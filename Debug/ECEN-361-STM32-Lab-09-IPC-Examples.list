
ECEN-361-STM32-Lab-09-IPC-Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800913c  0800913c  0001913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094e8  080094e8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080094e8  080094e8  000194e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094f0  080094f0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094f0  080094f0  000194f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094f4  080094f4  000194f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080094f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b4c  20000070  08009568  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bbc  08009568  00024bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c5a5  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a65  00000000  00000000  0003c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  000400f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ab  00000000  00000000  00041908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296b3  00000000  00000000  00042bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a36b  00000000  00000000  0006c266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffaa6  00000000  00000000  000865d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ed4  00000000  00000000  00186078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009124 	.word	0x08009124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009124 	.word	0x08009124

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 fa7f 	bl	8001aa0 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 fa6e 	bl	8001aa0 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fa63 	bl	8001aa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 fa5d 	bl	8001aa0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 fa57 	bl	8001aa0 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MultiFunctionShield_Single_Digit_Display>:
* @param digit: 1..4, pick the digit to write to
* @param value: 0..9, pick the value to display
* @retval None
*/
void MultiFunctionShield_Single_Digit_Display (int digit, int8_t value)
	{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	if (value <0) //then blank a digit
 8000614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000618:	2b00      	cmp	r3, #0
 800061a:	da06      	bge.n	800062a <MultiFunctionShield_Single_Digit_Display+0x22>
		{
		SEGMENT_VALUE[4-digit] = SEGMENT_BLANK;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f1c3 0304 	rsb	r3, r3, #4
 8000622:	21ff      	movs	r1, #255	; 0xff
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000626:	54d1      	strb	r1, [r2, r3]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
			}
		}
	}
 8000628:	e039      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
		value = (value & 0b1111) % 10 ;
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f003 020f 	and.w	r2, r3, #15
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 8000632:	fb83 1302 	smull	r1, r3, r3, r2
 8000636:	1099      	asrs	r1, r3, #2
 8000638:	17d3      	asrs	r3, r2, #31
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	460b      	mov	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1ad1      	subs	r1, r2, r3
 8000646:	460b      	mov	r3, r1
 8000648:	70fb      	strb	r3, [r7, #3]
		if ((digit <=4 ) && (digit >=0))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b04      	cmp	r3, #4
 800064e:	dc1a      	bgt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db17      	blt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
			SEGMENT_VALUE[4-digit] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000656:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 800065c:	fb83 1302 	smull	r1, r3, r3, r2
 8000660:	1099      	asrs	r1, r3, #2
 8000662:	17d3      	asrs	r3, r2, #31
 8000664:	1ac9      	subs	r1, r1, r3
 8000666:	460b      	mov	r3, r1
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f1c3 0304 	rsb	r3, r3, #4
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <MultiFunctionShield_Single_Digit_Display+0xac>)
 800067e:	5c51      	ldrb	r1, [r2, r1]
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000682:	54d1      	strb	r1, [r2, r3]
	}
 8000684:	e00b      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
			SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000686:	22bf      	movs	r2, #191	; 0xbf
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800068a:	701a      	strb	r2, [r3, #0]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
 800068c:	22bf      	movs	r2, #191	; 0xbf
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000690:	705a      	strb	r2, [r3, #1]
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000692:	22bf      	movs	r2, #191	; 0xbf
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000696:	709a      	strb	r2, [r3, #2]
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000698:	22bf      	movs	r2, #191	; 0xbf
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800069c:	70da      	strb	r2, [r3, #3]
	}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000090 	.word	0x20000090
 80006b0:	66666667 	.word	0x66666667
 80006b4:	08009254 	.word	0x08009254

080006b8 <MultiFunctionShield_Display_Two_Digits>:


void MultiFunctionShield_Display_Two_Digits (int8_t value)
// Just change the right-most 2 display digits.  Must be 0<= x <=99
	{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	if (value <0) {	//Display negative
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da06      	bge.n	80006d8 <MultiFunctionShield_Display_Two_Digits+0x20>
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
 80006ca:	22bf      	movs	r2, #191	; 0xbf
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MultiFunctionShield_Display_Two_Digits+0x88>)
 80006ce:	709a      	strb	r2, [r3, #2]
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
 80006d0:	22bf      	movs	r2, #191	; 0xbf
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MultiFunctionShield_Display_Two_Digits+0x88>)
 80006d4:	70da      	strb	r2, [r3, #3]
		{
		value = value % 99; // Just in case it's bigger
		MultiFunctionShield_Single_Digit_Display(2, (value / 10));
		MultiFunctionShield_Single_Digit_Display(1, (value % 10));
		}
	}
 80006d6:	e02e      	b.n	8000736 <MultiFunctionShield_Display_Two_Digits+0x7e>
		value = value % 99; // Just in case it's bigger
 80006d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MultiFunctionShield_Display_Two_Digits+0x8c>)
 80006de:	fb83 1302 	smull	r1, r3, r3, r2
 80006e2:	4413      	add	r3, r2
 80006e4:	1199      	asrs	r1, r3, #6
 80006e6:	17d3      	asrs	r3, r2, #31
 80006e8:	1ac9      	subs	r1, r1, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	440b      	add	r3, r1
 80006f0:	0159      	lsls	r1, r3, #5
 80006f2:	440b      	add	r3, r1
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	71fb      	strb	r3, [r7, #7]
		MultiFunctionShield_Single_Digit_Display(2, (value / 10));
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MultiFunctionShield_Display_Two_Digits+0x90>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	1092      	asrs	r2, r2, #2
 8000704:	17db      	asrs	r3, r3, #31
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff ff7b 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
		MultiFunctionShield_Single_Digit_Display(1, (value % 10));
 8000712:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MultiFunctionShield_Display_Two_Digits+0x90>)
 8000718:	fb83 1302 	smull	r1, r3, r3, r2
 800071c:	1099      	asrs	r1, r3, #2
 800071e:	17d3      	asrs	r3, r2, #31
 8000720:	1ac9      	subs	r1, r1, r3
 8000722:	460b      	mov	r3, r1
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ff69 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000090 	.word	0x20000090
 8000744:	a57eb503 	.word	0xa57eb503
 8000748:	66666667 	.word	0x66666667

0800074c <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f001 f9a2 	bl	8001aa0 <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f001 f99c 	bl	8001aa0 <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <Clear_LEDs+0x38>)
 800076e:	f001 f997 	bl	8001aa0 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f001 f991 	bl	8001aa0 <HAL_GPIO_WritePin>
#endif
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	48000400 	.word	0x48000400

08000788 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 800078c:	22ff      	movs	r2, #255	; 0xff
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 8000790:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000792:	22ff      	movs	r2, #255	; 0xff
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 8000796:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000798:	22ff      	movs	r2, #255	; 0xff
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 800079c:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 80007a2:	70da      	strb	r2, [r3, #3]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000090 	.word	0x20000090

080007b4 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	4816      	ldr	r0, [pc, #88]	; (800081c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80007c4:	f001 f96c 	bl	8001aa0 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007c8:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 80007cc:	5cd3      	ldrb	r3, [r2, r3]
 80007ce:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	2301      	movs	r3, #1
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f7ff fec1 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007ea:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 80007ee:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f7ff feb1 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2120      	movs	r1, #32
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000810:	f001 f946 	bl	8001aa0 <HAL_GPIO_WritePin>
	}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	48000400 	.word	0x48000400
 8000820:	20000090 	.word	0x20000090
 8000824:	08009260 	.word	0x08009260

08000828 <MultiFunctionShield__ISRFunc>:
	}



void MultiFunctionShield__ISRFunc(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MultiFunctionShield__ISRFunc+0x60>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MultiFunctionShield__ISRFunc+0x60>)
 8000838:	4611      	mov	r1, r2
 800083a:	7019      	strb	r1, [r3, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	3b01      	subs	r3, #1
 8000840:	2b03      	cmp	r3, #3
 8000842:	d81e      	bhi.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
 8000844:	a201      	add	r2, pc, #4	; (adr r2, 800084c <MultiFunctionShield__ISRFunc+0x24>)
 8000846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084a:	bf00      	nop
 800084c:	0800085d 	.word	0x0800085d
 8000850:	08000865 	.word	0x08000865
 8000854:	0800086d 	.word	0x0800086d
 8000858:	08000875 	.word	0x08000875
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ffa9 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 8000862:	e00e      	b.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff ffa5 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 800086a:	e00a      	b.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff ffa1 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 8000872:	e006      	b.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000874:	2003      	movs	r0, #3
 8000876:	f7ff ff9d 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 800087a:	4b03      	ldr	r3, [pc, #12]	; (8000888 <MultiFunctionShield__ISRFunc+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	bf00      	nop
  }
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000008c 	.word	0x2000008c

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 fe3a 	bl	8001508 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f8ca 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f970 	bl	8000b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089c:	f000 f93e 	bl	8000b1c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80008a0:	f000 f916 	bl	8000ad0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  printf("\033\143"); printf("Welcome to ECEN-361 Lab-09, <student>\n\r");
 80008a4:	483c      	ldr	r0, [pc, #240]	; (8000998 <main+0x10c>)
 80008a6:	f007 fcdf 	bl	8008268 <iprintf>
 80008aa:	483c      	ldr	r0, [pc, #240]	; (800099c <main+0x110>)
 80008ac:	f007 fcdc 	bl	8008268 <iprintf>
	// Start timer
	MultiFunctionShield_Clear();							// Clear the 7-seg display
 80008b0:	f7ff ff6a 	bl	8000788 <MultiFunctionShield_Clear>
	HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 80008b4:	483a      	ldr	r0, [pc, #232]	; (80009a0 <main+0x114>)
 80008b6:	f002 fce7 	bl	8003288 <HAL_TIM_Base_Start_IT>
	Clear_LEDs();
 80008ba:	f7ff ff47 	bl	800074c <Clear_LEDs>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008be:	f003 fd1f 	bl	8004300 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UpDownMutex */
  UpDownMutexHandle = osMutexNew(&UpDownMutex_attributes);
 80008c2:	4838      	ldr	r0, [pc, #224]	; (80009a4 <main+0x118>)
 80008c4:	f003 ff25 	bl	8004712 <osMutexNew>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <main+0x11c>)
 80008cc:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Button_1_Semaphore */
  Button_1_SemaphoreHandle = osSemaphoreNew(1, 1, &Button_1_Semaphore_attributes);
 80008ce:	4a37      	ldr	r2, [pc, #220]	; (80009ac <main+0x120>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	2001      	movs	r0, #1
 80008d4:	f004 f82b 	bl	800492e <osSemaphoreNew>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a35      	ldr	r2, [pc, #212]	; (80009b0 <main+0x124>)
 80008dc:	6013      	str	r3, [r2, #0]

  /* creation of Button_2_Semaphore */
  Button_2_SemaphoreHandle = osSemaphoreNew(1, 1, &Button_2_Semaphore_attributes);
 80008de:	4a35      	ldr	r2, [pc, #212]	; (80009b4 <main+0x128>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	2001      	movs	r0, #1
 80008e4:	f004 f823 	bl	800492e <osSemaphoreNew>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <main+0x12c>)
 80008ec:	6013      	str	r3, [r2, #0]

  /* creation of Button_3_Semaphore */
  Button_3_SemaphoreHandle = osSemaphoreNew(1, 1, &Button_3_Semaphore_attributes);
 80008ee:	4a33      	ldr	r2, [pc, #204]	; (80009bc <main+0x130>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	2001      	movs	r0, #1
 80008f4:	f004 f81b 	bl	800492e <osSemaphoreNew>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <main+0x134>)
 80008fc:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore_Counting */
  Semaphore_CountingHandle = osSemaphoreNew(31, 31, &Semaphore_Counting_attributes);
 80008fe:	4a31      	ldr	r2, [pc, #196]	; (80009c4 <main+0x138>)
 8000900:	211f      	movs	r1, #31
 8000902:	201f      	movs	r0, #31
 8000904:	f004 f813 	bl	800492e <osSemaphoreNew>
 8000908:	4603      	mov	r3, r0
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <main+0x13c>)
 800090c:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SW_Timer_7Seg */
  SW_Timer_7SegHandle = osTimerNew(SW_Timer_Countdown, osTimerPeriodic, NULL, &SW_Timer_7Seg_attributes);
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <main+0x140>)
 8000910:	2200      	movs	r2, #0
 8000912:	2101      	movs	r1, #1
 8000914:	482e      	ldr	r0, [pc, #184]	; (80009d0 <main+0x144>)
 8000916:	f003 fdff 	bl	8004518 <osTimerNew>
 800091a:	4603      	mov	r3, r0
 800091c:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <main+0x148>)
 800091e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SemaphoreToggle */
  SemaphoreToggleHandle = osThreadNew(Semaphore_Toggle_Task, NULL, &SemaphoreToggle_attributes);
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <main+0x14c>)
 8000922:	2100      	movs	r1, #0
 8000924:	482d      	ldr	r0, [pc, #180]	; (80009dc <main+0x150>)
 8000926:	f003 fd35 	bl	8004394 <osThreadNew>
 800092a:	4603      	mov	r3, r0
 800092c:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <main+0x154>)
 800092e:	6013      	str	r3, [r2, #0]

  /* creation of NotifToggle */
  NotifToggleHandle = osThreadNew(NotifyToggleTask, NULL, &NotifToggle_attributes);
 8000930:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <main+0x158>)
 8000932:	2100      	movs	r1, #0
 8000934:	482c      	ldr	r0, [pc, #176]	; (80009e8 <main+0x15c>)
 8000936:	f003 fd2d 	bl	8004394 <osThreadNew>
 800093a:	4603      	mov	r3, r0
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <main+0x160>)
 800093e:	6013      	str	r3, [r2, #0]

  /* creation of SW_Timer_Toggle */
  SW_Timer_ToggleHandle = osThreadNew(SW_Timer_Task, NULL, &SW_Timer_Toggle_attributes);
 8000940:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <main+0x164>)
 8000942:	2100      	movs	r1, #0
 8000944:	482b      	ldr	r0, [pc, #172]	; (80009f4 <main+0x168>)
 8000946:	f003 fd25 	bl	8004394 <osThreadNew>
 800094a:	4603      	mov	r3, r0
 800094c:	4a2a      	ldr	r2, [pc, #168]	; (80009f8 <main+0x16c>)
 800094e:	6013      	str	r3, [r2, #0]

  /* creation of Mutex_CountUp */
  Mutex_CountUpHandle = osThreadNew(Mutex_CountUpTask, NULL, &Mutex_CountUp_attributes);
 8000950:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <main+0x170>)
 8000952:	2100      	movs	r1, #0
 8000954:	482a      	ldr	r0, [pc, #168]	; (8000a00 <main+0x174>)
 8000956:	f003 fd1d 	bl	8004394 <osThreadNew>
 800095a:	4603      	mov	r3, r0
 800095c:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <main+0x178>)
 800095e:	6013      	str	r3, [r2, #0]

  /* creation of Mutex_CountDown */
  Mutex_CountDownHandle = osThreadNew(Mutex_CountDownTask, NULL, &Mutex_CountDown_attributes);
 8000960:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <main+0x17c>)
 8000962:	2100      	movs	r1, #0
 8000964:	4829      	ldr	r0, [pc, #164]	; (8000a0c <main+0x180>)
 8000966:	f003 fd15 	bl	8004394 <osThreadNew>
 800096a:	4603      	mov	r3, r0
 800096c:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <main+0x184>)
 800096e:	6013      	str	r3, [r2, #0]

  /* creation of UpdateGlobDisp */
  UpdateGlobDispHandle = osThreadNew(UpdateGlobDisplayProcess, NULL, &UpdateGlobDisp_attributes);
 8000970:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <main+0x188>)
 8000972:	2100      	movs	r1, #0
 8000974:	4828      	ldr	r0, [pc, #160]	; (8000a18 <main+0x18c>)
 8000976:	f003 fd0d 	bl	8004394 <osThreadNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <main+0x190>)
 800097e:	6013      	str	r3, [r2, #0]

  /* creation of ResetGlobal */
  ResetGlobalHandle = osThreadNew(ResetGlobalTask, NULL, &ResetGlobal_attributes);
 8000980:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <main+0x194>)
 8000982:	2100      	movs	r1, #0
 8000984:	4827      	ldr	r0, [pc, #156]	; (8000a24 <main+0x198>)
 8000986:	f003 fd05 	bl	8004394 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <main+0x19c>)
 800098e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000990:	f003 fcda 	bl	8004348 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000994:	e7fe      	b.n	8000994 <main+0x108>
 8000996:	bf00      	nop
 8000998:	08009210 	.word	0x08009210
 800099c:	08009214 	.word	0x08009214
 80009a0:	20000094 	.word	0x20000094
 80009a4:	08009370 	.word	0x08009370
 80009a8:	20000188 	.word	0x20000188
 80009ac:	08009380 	.word	0x08009380
 80009b0:	2000018c 	.word	0x2000018c
 80009b4:	08009390 	.word	0x08009390
 80009b8:	20000190 	.word	0x20000190
 80009bc:	080093a0 	.word	0x080093a0
 80009c0:	20000194 	.word	0x20000194
 80009c4:	080093b0 	.word	0x080093b0
 80009c8:	20000198 	.word	0x20000198
 80009cc:	08009360 	.word	0x08009360
 80009d0:	08000fbd 	.word	0x08000fbd
 80009d4:	20000184 	.word	0x20000184
 80009d8:	08009264 	.word	0x08009264
 80009dc:	08000e0d 	.word	0x08000e0d
 80009e0:	20000168 	.word	0x20000168
 80009e4:	08009288 	.word	0x08009288
 80009e8:	08000e3d 	.word	0x08000e3d
 80009ec:	2000016c 	.word	0x2000016c
 80009f0:	080092ac 	.word	0x080092ac
 80009f4:	08000e4d 	.word	0x08000e4d
 80009f8:	20000170 	.word	0x20000170
 80009fc:	080092d0 	.word	0x080092d0
 8000a00:	08000e9d 	.word	0x08000e9d
 8000a04:	20000174 	.word	0x20000174
 8000a08:	080092f4 	.word	0x080092f4
 8000a0c:	08000ef5 	.word	0x08000ef5
 8000a10:	20000178 	.word	0x20000178
 8000a14:	08009318 	.word	0x08009318
 8000a18:	08000f4d 	.word	0x08000f4d
 8000a1c:	2000017c 	.word	0x2000017c
 8000a20:	0800933c 	.word	0x0800933c
 8000a24:	08000f6d 	.word	0x08000f6d
 8000a28:	20000180 	.word	0x20000180

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2244      	movs	r2, #68	; 0x44
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f007 fc26 	bl	800828c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a52:	f001 f87d 	bl	8001b50 <HAL_PWREx_ControlVoltageScaling>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a5c:	f000 fae8 	bl	8001030 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f8b4 	bl	8001bfc <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a9a:	f000 fac9 	bl	8001030 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fc7c 	bl	80023b4 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ac2:	f000 fab5 	bl	8001030 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3758      	adds	r7, #88	; 0x58
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000adc:	f240 321f 	movw	r2, #799	; 0x31f
 8000ae0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000aea:	2264      	movs	r2, #100	; 0x64
 8000aec:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000b02:	f002 fb69 	bl	80031d8 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000b0c:	f000 fa90 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000094 	.word	0x20000094
 8000b18:	40014800 	.word	0x40014800

08000b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART2_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b60:	f002 fde4 	bl	800372c <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 fa61 	bl	8001030 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000e0 	.word	0x200000e0
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b6a      	ldr	r3, [pc, #424]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a69      	ldr	r2, [pc, #420]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b67      	ldr	r3, [pc, #412]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b64      	ldr	r3, [pc, #400]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a63      	ldr	r2, [pc, #396]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b61      	ldr	r3, [pc, #388]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a5d      	ldr	r2, [pc, #372]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b5b      	ldr	r3, [pc, #364]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a57      	ldr	r2, [pc, #348]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 ff50 	bl	8001aa0 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2160      	movs	r1, #96	; 0x60
 8000c04:	484e      	ldr	r0, [pc, #312]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000c06:	f000 ff4b 	bl	8001aa0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4848      	ldr	r0, [pc, #288]	; (8000d44 <MX_GPIO_Init+0x1c8>)
 8000c22:	f000 fd93 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000c26:	2302      	movs	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4842      	ldr	r0, [pc, #264]	; (8000d44 <MX_GPIO_Init+0x1c8>)
 8000c3a:	f000 fd87 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c42:	230b      	movs	r3, #11
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 fd7a 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000c58:	2312      	movs	r3, #18
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f000 fd6c 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin;
 8000c74:	23e0      	movs	r3, #224	; 0xe0
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c78:	2311      	movs	r3, #17
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f000 fd5d 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000c92:	2301      	movs	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4826      	ldr	r0, [pc, #152]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000ca8:	f000 fd50 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin;
 8000cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fd40 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4817      	ldr	r0, [pc, #92]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000ce4:	f000 fd32 	bl	800174c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000ce8:	2340      	movs	r3, #64	; 0x40
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cec:	2311      	movs	r3, #17
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4810      	ldr	r0, [pc, #64]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000d00:	f000 fd24 	bl	800174c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2105      	movs	r1, #5
 8000d08:	2006      	movs	r0, #6
 8000d0a:	f000 fcf5 	bl	80016f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d0e:	2006      	movs	r0, #6
 8000d10:	f000 fd0e 	bl	8001730 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2105      	movs	r1, #5
 8000d18:	2007      	movs	r0, #7
 8000d1a:	f000 fced 	bl	80016f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f000 fd06 	bl	8001730 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2105      	movs	r1, #5
 8000d28:	200a      	movs	r0, #10
 8000d2a:	f000 fce5 	bl	80016f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f000 fcfe 	bl	8001730 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800

08000d48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	2b10      	cmp	r3, #16
 8000d56:	d00b      	beq.n	8000d70 <HAL_GPIO_EXTI_Callback+0x28>
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	dc1a      	bgt.n	8000d92 <HAL_GPIO_EXTI_Callback+0x4a>
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d00d      	beq.n	8000d7c <HAL_GPIO_EXTI_Callback+0x34>
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d116      	bne.n	8000d92 <HAL_GPIO_EXTI_Callback+0x4a>
		{
		case Button_1_Pin:
			// Got the pin -- Give the semaphore
			osSemaphoreRelease(Button_1_SemaphoreHandle);
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x54>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 febb 	bl	8004ae4 <osSemaphoreRelease>
			break;
 8000d6e:	e010      	b.n	8000d92 <HAL_GPIO_EXTI_Callback+0x4a>

		case Button_2_Pin:
			osSemaphoreRelease(Button_2_SemaphoreHandle);
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 feb5 	bl	8004ae4 <osSemaphoreRelease>
			break;
 8000d7a:	e00a      	b.n	8000d92 <HAL_GPIO_EXTI_Callback+0x4a>

		case Button_3_Pin:
			srand((unsigned) uwTick );
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f007 f943 	bl	800800c <srand>
			osSemaphoreRelease(Button_3_SemaphoreHandle);
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 feaa 	bl	8004ae4 <osSemaphoreRelease>
			break;
 8000d90:	bf00      	nop
		}

	}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000018c 	.word	0x2000018c
 8000da0:	20000190 	.word	0x20000190
 8000da4:	200001ec 	.word	0x200001ec
 8000da8:	20000194 	.word	0x20000194

08000dac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000db4:	1d39      	adds	r1, r7, #4
 8000db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <__io_putchar+0x20>)
 8000dbe:	f002 fd03 	bl	80037c8 <HAL_UART_Transmit>

  return ch;
 8000dc2:	687b      	ldr	r3, [r7, #4]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000e0 	.word	0x200000e0

08000dd0 <random_wait>:


int random_wait(int min)
	{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	/* Return a random number between 200 - 300
	 * Meant to be mS for the count up or count down in the protected
	 * mutex demonstration routines
	 */
	int rand_millisec = min + (rand() % 99);
 8000dd8:	f007 f946 	bl	8008068 <rand>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <random_wait+0x38>)
 8000de0:	fb83 1302 	smull	r1, r3, r3, r2
 8000de4:	4413      	add	r3, r2
 8000de6:	1199      	asrs	r1, r3, #6
 8000de8:	17d3      	asrs	r3, r2, #31
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	460b      	mov	r3, r1
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	440b      	add	r3, r1
 8000df2:	0159      	lsls	r1, r3, #5
 8000df4:	440b      	add	r3, r1
 8000df6:	1ad1      	subs	r1, r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	60fb      	str	r3, [r7, #12]
	return rand_millisec;
 8000dfe:	68fb      	ldr	r3, [r7, #12]

	}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	a57eb503 	.word	0xa57eb503

08000e0c <Semaphore_Toggle_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Semaphore_Toggle_Task */
void Semaphore_Toggle_Task(void *argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

	  /* USER CODE BEGIN SemaphoreToggle_Task */
	  /* Infinite loop */
	  for(;;)
	  {
		osSemaphoreAcquire(Button_1_SemaphoreHandle,100000);
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <Semaphore_Toggle_Task+0x24>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4906      	ldr	r1, [pc, #24]	; (8000e34 <Semaphore_Toggle_Task+0x28>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fe10 	bl	8004a40 <osSemaphoreAcquire>
		HAL_GPIO_TogglePin(LED_D4_GPIO_Port , LED_D4_Pin);
 8000e20:	2140      	movs	r1, #64	; 0x40
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <Semaphore_Toggle_Task+0x2c>)
 8000e24:	f000 fe54 	bl	8001ad0 <HAL_GPIO_TogglePin>
		osDelay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f003 fb45 	bl	80044b8 <osDelay>
		osSemaphoreAcquire(Button_1_SemaphoreHandle,100000);
 8000e2e:	e7f1      	b.n	8000e14 <Semaphore_Toggle_Task+0x8>
 8000e30:	2000018c 	.word	0x2000018c
 8000e34:	000186a0 	.word	0x000186a0
 8000e38:	48000400 	.word	0x48000400

08000e3c <NotifyToggleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NotifyToggleTask */
void NotifyToggleTask(void *argument)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NotifyToggleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f003 fb37 	bl	80044b8 <osDelay>
 8000e4a:	e7fb      	b.n	8000e44 <NotifyToggleTask+0x8>

08000e4c <SW_Timer_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SW_Timer_Task */
void SW_Timer_Task(void *argument)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SW_Timer_Task */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Button_2_SemaphoreHandle,100000);
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <SW_Timer_Task+0x44>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	490e      	ldr	r1, [pc, #56]	; (8000e94 <SW_Timer_Task+0x48>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 fdf0 	bl	8004a40 <osSemaphoreAcquire>
	  // A button push starts or stops the SW Timer
	  // Button push is indicated by the semaphore
	if (osTimerIsRunning(SW_Timer_7SegHandle))
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <SW_Timer_Task+0x4c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fc38 	bl	80046da <osTimerIsRunning>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <SW_Timer_Task+0x30>
		osTimerStop(SW_Timer_7SegHandle );
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <SW_Timer_Task+0x4c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fbf9 	bl	800466c <osTimerStop>
 8000e7a:	e005      	b.n	8000e88 <SW_Timer_Task+0x3c>
	else
		osTimerStart(SW_Timer_7SegHandle , 200);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SW_Timer_Task+0x4c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	21c8      	movs	r1, #200	; 0xc8
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 fbc4 	bl	8004610 <osTimerStart>
    osDelay(1);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f003 fb15 	bl	80044b8 <osDelay>
	osSemaphoreAcquire(Button_2_SemaphoreHandle,100000);
 8000e8e:	e7e1      	b.n	8000e54 <SW_Timer_Task+0x8>
 8000e90:	20000190 	.word	0x20000190
 8000e94:	000186a0 	.word	0x000186a0
 8000e98:	20000184 	.word	0x20000184

08000e9c <Mutex_CountUpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mutex_CountUpTask */
void Mutex_CountUpTask(void *argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mutex_CountUpTask */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(UpDownMutexHandle,100000);
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <Mutex_CountUpTask+0x4c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4910      	ldr	r1, [pc, #64]	; (8000eec <Mutex_CountUpTask+0x50>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fcb7 	bl	800481e <osMutexAcquire>
	  // Once we have it, we can start counting Up
	  // THe count up will be some random between 200 - 300 mS

	if (mutex_protected_count<99)
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <Mutex_CountUpTask+0x54>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b62      	cmp	r3, #98	; 0x62
 8000eb6:	d806      	bhi.n	8000ec6 <Mutex_CountUpTask+0x2a>
		mutex_protected_count++;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <Mutex_CountUpTask+0x54>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <Mutex_CountUpTask+0x54>)
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e002      	b.n	8000ecc <Mutex_CountUpTask+0x30>
	else
		mutex_protected_count=0;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <Mutex_CountUpTask+0x54>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
	// Done writing, so give back the mutex
	osMutexRelease(UpDownMutexHandle);
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <Mutex_CountUpTask+0x4c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fcef 	bl	80048b4 <osMutexRelease>
    osDelay(random_wait(300));
 8000ed6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000eda:	f7ff ff79 	bl	8000dd0 <random_wait>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fae9 	bl	80044b8 <osDelay>
	  osMutexWait(UpDownMutexHandle,100000);
 8000ee6:	e7dd      	b.n	8000ea4 <Mutex_CountUpTask+0x8>
 8000ee8:	20000188 	.word	0x20000188
 8000eec:	000186a0 	.word	0x000186a0
 8000ef0:	20000001 	.word	0x20000001

08000ef4 <Mutex_CountDownTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mutex_CountDownTask */
void Mutex_CountDownTask(void *argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mutex_CountDownTask */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(UpDownMutexHandle,100000);
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <Mutex_CountDownTask+0x4c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4910      	ldr	r1, [pc, #64]	; (8000f44 <Mutex_CountDownTask+0x50>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 fc8b 	bl	800481e <osMutexAcquire>
	  if (mutex_protected_count<1)
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <Mutex_CountDownTask+0x54>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d103      	bne.n	8000f18 <Mutex_CountDownTask+0x24>
	  		mutex_protected_count=99;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <Mutex_CountDownTask+0x54>)
 8000f12:	2263      	movs	r2, #99	; 0x63
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e005      	b.n	8000f24 <Mutex_CountDownTask+0x30>
	  	else
	  		mutex_protected_count--;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <Mutex_CountDownTask+0x54>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <Mutex_CountDownTask+0x54>)
 8000f22:	701a      	strb	r2, [r3, #0]
	  	// Done writing, so give back the mutex
		osMutexRelease(UpDownMutexHandle);
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <Mutex_CountDownTask+0x4c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f003 fcc3 	bl	80048b4 <osMutexRelease>
		osDelay(random_wait(200));
 8000f2e:	20c8      	movs	r0, #200	; 0xc8
 8000f30:	f7ff ff4e 	bl	8000dd0 <random_wait>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 fabe 	bl	80044b8 <osDelay>
	  osMutexWait(UpDownMutexHandle,100000);
 8000f3c:	e7de      	b.n	8000efc <Mutex_CountDownTask+0x8>
 8000f3e:	bf00      	nop
 8000f40:	20000188 	.word	0x20000188
 8000f44:	000186a0 	.word	0x000186a0
 8000f48:	20000001 	.word	0x20000001

08000f4c <UpdateGlobDisplayProcess>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UpdateGlobDisplayProcess */
void UpdateGlobDisplayProcess(void *argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
   * This just puts the value of the GlobalVariable on the
   * right-most two-digits of the 7Seg Display */

  for(;;)
	  {
	  MultiFunctionShield_Display_Two_Digits(mutex_protected_count);
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <UpdateGlobDisplayProcess+0x1c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fbac 	bl	80006b8 <MultiFunctionShield_Display_Two_Digits>
	  osDelay(150);	// The competing process to inc/dec are 200 - 300mS
 8000f60:	2096      	movs	r0, #150	; 0x96
 8000f62:	f003 faa9 	bl	80044b8 <osDelay>
	  MultiFunctionShield_Display_Two_Digits(mutex_protected_count);
 8000f66:	e7f5      	b.n	8000f54 <UpdateGlobDisplayProcess+0x8>
 8000f68:	20000001 	.word	0x20000001

08000f6c <ResetGlobalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ResetGlobalTask */
void ResetGlobalTask(void *argument)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
		{
		/* Pressing Button 3 sets us to ask for
		 * the MUTEX protecting the global variable
		 * When we get it, we can reset the global to the middle
		 */
		osSemaphoreAcquire(Button_3_SemaphoreHandle,100000);
 8000f74:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <ResetGlobalTask+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	490d      	ldr	r1, [pc, #52]	; (8000fb0 <ResetGlobalTask+0x44>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fd60 	bl	8004a40 <osSemaphoreAcquire>
		// Now we have the semaphore because the button was pressed
		osMutexWait(UpDownMutexHandle,100000);
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <ResetGlobalTask+0x48>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	490a      	ldr	r1, [pc, #40]	; (8000fb0 <ResetGlobalTask+0x44>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 fc49 	bl	800481e <osMutexAcquire>
		mutex_protected_count = Protected_Count_Initial_Value ;
 8000f8c:	4b0a      	ldr	r3, [pc, #40]	; (8000fb8 <ResetGlobalTask+0x4c>)
 8000f8e:	2232      	movs	r2, #50	; 0x32
 8000f90:	701a      	strb	r2, [r3, #0]
		osDelay(5000);	// Wait for 5 seconds before making the resource available again
 8000f92:	f241 3088 	movw	r0, #5000	; 0x1388
 8000f96:	f003 fa8f 	bl	80044b8 <osDelay>
		osMutexRelease(UpDownMutexHandle);
 8000f9a:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <ResetGlobalTask+0x48>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f003 fc88 	bl	80048b4 <osMutexRelease>
		osDelay(1);
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	f003 fa87 	bl	80044b8 <osDelay>
		osSemaphoreAcquire(Button_3_SemaphoreHandle,100000);
 8000faa:	e7e3      	b.n	8000f74 <ResetGlobalTask+0x8>
 8000fac:	20000194 	.word	0x20000194
 8000fb0:	000186a0 	.word	0x000186a0
 8000fb4:	20000188 	.word	0x20000188
 8000fb8:	20000001 	.word	0x20000001

08000fbc <SW_Timer_Countdown>:
		  /* USER CODE END ResetGlobalTask */
}

/* SW_Timer_Countdown function */
void SW_Timer_Countdown(void *argument)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
	/*
	 * When the timer expires, decrement the Count and Display it
	 * on the 7-Seg Upper
	 */

	if (countdown_display == 0) countdown_display = 9;
 8000fc4:	4b0c      	ldr	r3, [pc, #48]	; (8000ff8 <SW_Timer_Countdown+0x3c>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d103      	bne.n	8000fd4 <SW_Timer_Countdown+0x18>
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <SW_Timer_Countdown+0x3c>)
 8000fce:	2209      	movs	r2, #9
 8000fd0:	701a      	strb	r2, [r3, #0]
 8000fd2:	e005      	b.n	8000fe0 <SW_Timer_Countdown+0x24>
		else countdown_display--;
 8000fd4:	4b08      	ldr	r3, [pc, #32]	; (8000ff8 <SW_Timer_Countdown+0x3c>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	3b01      	subs	r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b06      	ldr	r3, [pc, #24]	; (8000ff8 <SW_Timer_Countdown+0x3c>)
 8000fde:	701a      	strb	r2, [r3, #0]

	MultiFunctionShield_Single_Digit_Display(4, countdown_display);   //put it on the left
 8000fe0:	4b05      	ldr	r3, [pc, #20]	; (8000ff8 <SW_Timer_Countdown+0x3c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	b25b      	sxtb	r3, r3
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	2004      	movs	r0, #4
 8000fea:	f7ff fb0d 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	// MultiFunctionShield_Single_Digit_Display(2, -1);//blank the bottom two

  /* USER CODE END SW_Timer_Countdown */
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	20000000 	.word	0x20000000

08000ffc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a07      	ldr	r2, [pc, #28]	; (8001028 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d101      	bne.n	8001012 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800100e:	f000 fa9b 	bl	8001548 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim17 )
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a05      	ldr	r2, [pc, #20]	; (800102c <HAL_TIM_PeriodElapsedCallback+0x30>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_TIM_PeriodElapsedCallback+0x22>
  {
	  MultiFunctionShield__ISRFunc();
 800101a:	f7ff fc05 	bl	8000828 <MultiFunctionShield__ISRFunc>
  }

  /* USER CODE END Callback 1 */
}
 800101e:	bf00      	nop
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40000400 	.word	0x40000400
 800102c:	20000094 	.word	0x20000094

08001030 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001034:	b672      	cpsid	i
}
 8001036:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001038:	e7fe      	b.n	8001038 <Error_Handler+0x8>
	...

0800103c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001042:	4b11      	ldr	r3, [pc, #68]	; (8001088 <HAL_MspInit+0x4c>)
 8001044:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001046:	4a10      	ldr	r2, [pc, #64]	; (8001088 <HAL_MspInit+0x4c>)
 8001048:	f043 0301 	orr.w	r3, r3, #1
 800104c:	6613      	str	r3, [r2, #96]	; 0x60
 800104e:	4b0e      	ldr	r3, [pc, #56]	; (8001088 <HAL_MspInit+0x4c>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001052:	f003 0301 	and.w	r3, r3, #1
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800105a:	4b0b      	ldr	r3, [pc, #44]	; (8001088 <HAL_MspInit+0x4c>)
 800105c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800105e:	4a0a      	ldr	r2, [pc, #40]	; (8001088 <HAL_MspInit+0x4c>)
 8001060:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001064:	6593      	str	r3, [r2, #88]	; 0x58
 8001066:	4b08      	ldr	r3, [pc, #32]	; (8001088 <HAL_MspInit+0x4c>)
 8001068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001072:	2200      	movs	r2, #0
 8001074:	210f      	movs	r1, #15
 8001076:	f06f 0001 	mvn.w	r0, #1
 800107a:	f000 fb3d 	bl	80016f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800107e:	bf00      	nop
 8001080:	3708      	adds	r7, #8
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0d      	ldr	r2, [pc, #52]	; (80010d0 <HAL_TIM_Base_MspInit+0x44>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d113      	bne.n	80010c6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800109e:	4b0d      	ldr	r3, [pc, #52]	; (80010d4 <HAL_TIM_Base_MspInit+0x48>)
 80010a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a2:	4a0c      	ldr	r2, [pc, #48]	; (80010d4 <HAL_TIM_Base_MspInit+0x48>)
 80010a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a8:	6613      	str	r3, [r2, #96]	; 0x60
 80010aa:	4b0a      	ldr	r3, [pc, #40]	; (80010d4 <HAL_TIM_Base_MspInit+0x48>)
 80010ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010b2:	60fb      	str	r3, [r7, #12]
 80010b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 80010b6:	2200      	movs	r2, #0
 80010b8:	2105      	movs	r1, #5
 80010ba:	201a      	movs	r0, #26
 80010bc:	f000 fb1c 	bl	80016f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80010c0:	201a      	movs	r0, #26
 80010c2:	f000 fb35 	bl	8001730 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010c6:	bf00      	nop
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40014800 	.word	0x40014800
 80010d4:	40021000 	.word	0x40021000

080010d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b0ac      	sub	sp, #176	; 0xb0
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010e4:	2200      	movs	r2, #0
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	605a      	str	r2, [r3, #4]
 80010ea:	609a      	str	r2, [r3, #8]
 80010ec:	60da      	str	r2, [r3, #12]
 80010ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2288      	movs	r2, #136	; 0x88
 80010f6:	2100      	movs	r1, #0
 80010f8:	4618      	mov	r0, r3
 80010fa:	f007 f8c7 	bl	800828c <memset>
  if(huart->Instance==USART2)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a21      	ldr	r2, [pc, #132]	; (8001188 <HAL_UART_MspInit+0xb0>)
 8001104:	4293      	cmp	r3, r2
 8001106:	d13b      	bne.n	8001180 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001108:	2302      	movs	r3, #2
 800110a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800110c:	2300      	movs	r3, #0
 800110e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001110:	f107 0314 	add.w	r3, r7, #20
 8001114:	4618      	mov	r0, r3
 8001116:	f001 fba3 	bl	8002860 <HAL_RCCEx_PeriphCLKConfig>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001120:	f7ff ff86 	bl	8001030 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001124:	4b19      	ldr	r3, [pc, #100]	; (800118c <HAL_UART_MspInit+0xb4>)
 8001126:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001128:	4a18      	ldr	r2, [pc, #96]	; (800118c <HAL_UART_MspInit+0xb4>)
 800112a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800112e:	6593      	str	r3, [r2, #88]	; 0x58
 8001130:	4b16      	ldr	r3, [pc, #88]	; (800118c <HAL_UART_MspInit+0xb4>)
 8001132:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001134:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800113c:	4b13      	ldr	r3, [pc, #76]	; (800118c <HAL_UART_MspInit+0xb4>)
 800113e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001140:	4a12      	ldr	r2, [pc, #72]	; (800118c <HAL_UART_MspInit+0xb4>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001148:	4b10      	ldr	r3, [pc, #64]	; (800118c <HAL_UART_MspInit+0xb4>)
 800114a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60fb      	str	r3, [r7, #12]
 8001152:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001154:	230c      	movs	r3, #12
 8001156:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115a:	2302      	movs	r3, #2
 800115c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001166:	2303      	movs	r3, #3
 8001168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800116c:	2307      	movs	r3, #7
 800116e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001176:	4619      	mov	r1, r3
 8001178:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800117c:	f000 fae6 	bl	800174c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001180:	bf00      	nop
 8001182:	37b0      	adds	r7, #176	; 0xb0
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}
 8001188:	40004400 	.word	0x40004400
 800118c:	40021000 	.word	0x40021000

08001190 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b08e      	sub	sp, #56	; 0x38
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001198:	2300      	movs	r3, #0
 800119a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800119e:	4b34      	ldr	r3, [pc, #208]	; (8001270 <HAL_InitTick+0xe0>)
 80011a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a2:	4a33      	ldr	r2, [pc, #204]	; (8001270 <HAL_InitTick+0xe0>)
 80011a4:	f043 0302 	orr.w	r3, r3, #2
 80011a8:	6593      	str	r3, [r2, #88]	; 0x58
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <HAL_InitTick+0xe0>)
 80011ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	60fb      	str	r3, [r7, #12]
 80011b4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011b6:	f107 0210 	add.w	r2, r7, #16
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4611      	mov	r1, r2
 80011c0:	4618      	mov	r0, r3
 80011c2:	f001 fabb 	bl	800273c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011c6:	6a3b      	ldr	r3, [r7, #32]
 80011c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d103      	bne.n	80011d8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011d0:	f001 fa88 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 80011d4:	6378      	str	r0, [r7, #52]	; 0x34
 80011d6:	e004      	b.n	80011e2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011d8:	f001 fa84 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 80011dc:	4603      	mov	r3, r0
 80011de:	005b      	lsls	r3, r3, #1
 80011e0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011e4:	4a23      	ldr	r2, [pc, #140]	; (8001274 <HAL_InitTick+0xe4>)
 80011e6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ea:	0c9b      	lsrs	r3, r3, #18
 80011ec:	3b01      	subs	r3, #1
 80011ee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <HAL_InitTick+0xe8>)
 80011f2:	4a22      	ldr	r2, [pc, #136]	; (800127c <HAL_InitTick+0xec>)
 80011f4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80011f6:	4b20      	ldr	r3, [pc, #128]	; (8001278 <HAL_InitTick+0xe8>)
 80011f8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011fc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80011fe:	4a1e      	ldr	r2, [pc, #120]	; (8001278 <HAL_InitTick+0xe8>)
 8001200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001202:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001204:	4b1c      	ldr	r3, [pc, #112]	; (8001278 <HAL_InitTick+0xe8>)
 8001206:	2200      	movs	r2, #0
 8001208:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800120a:	4b1b      	ldr	r3, [pc, #108]	; (8001278 <HAL_InitTick+0xe8>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001210:	4b19      	ldr	r3, [pc, #100]	; (8001278 <HAL_InitTick+0xe8>)
 8001212:	2200      	movs	r2, #0
 8001214:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8001216:	4818      	ldr	r0, [pc, #96]	; (8001278 <HAL_InitTick+0xe8>)
 8001218:	f001 ffde 	bl	80031d8 <HAL_TIM_Base_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001222:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001226:	2b00      	cmp	r3, #0
 8001228:	d11b      	bne.n	8001262 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800122a:	4813      	ldr	r0, [pc, #76]	; (8001278 <HAL_InitTick+0xe8>)
 800122c:	f002 f82c 	bl	8003288 <HAL_TIM_Base_Start_IT>
 8001230:	4603      	mov	r3, r0
 8001232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001236:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800123a:	2b00      	cmp	r3, #0
 800123c:	d111      	bne.n	8001262 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800123e:	201d      	movs	r0, #29
 8001240:	f000 fa76 	bl	8001730 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	2b0f      	cmp	r3, #15
 8001248:	d808      	bhi.n	800125c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800124a:	2200      	movs	r2, #0
 800124c:	6879      	ldr	r1, [r7, #4]
 800124e:	201d      	movs	r0, #29
 8001250:	f000 fa52 	bl	80016f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001254:	4a0a      	ldr	r2, [pc, #40]	; (8001280 <HAL_InitTick+0xf0>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	e002      	b.n	8001262 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800125c:	2301      	movs	r3, #1
 800125e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001262:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001266:	4618      	mov	r0, r3
 8001268:	3738      	adds	r7, #56	; 0x38
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	431bde83 	.word	0x431bde83
 8001278:	2000019c 	.word	0x2000019c
 800127c:	40000400 	.word	0x40000400
 8001280:	20000008 	.word	0x20000008

08001284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <NMI_Handler+0x4>

0800128a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128e:	e7fe      	b.n	800128e <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	e7fe      	b.n	8001294 <MemManage_Handler+0x4>

08001296 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001296:	b480      	push	{r7}
 8001298:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129a:	e7fe      	b.n	800129a <BusFault_Handler+0x4>

0800129c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a0:	e7fe      	b.n	80012a0 <UsageFault_Handler+0x4>

080012a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012a2:	b480      	push	{r7}
 80012a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80012b4:	2001      	movs	r0, #1
 80012b6:	f000 fc25 	bl	8001b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}

080012be <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012be:	b580      	push	{r7, lr}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 80012c2:	2002      	movs	r0, #2
 80012c4:	f000 fc1e 	bl	8001b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}

080012cc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 80012d0:	2010      	movs	r0, #16
 80012d2:	f000 fc17 	bl	8001b04 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012d6:	bf00      	nop
 80012d8:	bd80      	pop	{r7, pc}
	...

080012dc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012e0:	4802      	ldr	r0, [pc, #8]	; (80012ec <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012e2:	f002 f841 	bl	8003368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000094 	.word	0x20000094

080012f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <TIM3_IRQHandler+0x10>)
 80012f6:	f002 f837 	bl	8003368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	2000019c 	.word	0x2000019c

08001304 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  return 1;
 8001308:	2301      	movs	r3, #1
}
 800130a:	4618      	mov	r0, r3
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr

08001314 <_kill>:

int _kill(int pid, int sig)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800131e:	f007 f813 	bl	8008348 <__errno>
 8001322:	4603      	mov	r3, r0
 8001324:	2216      	movs	r2, #22
 8001326:	601a      	str	r2, [r3, #0]
  return -1;
 8001328:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}

08001334 <_exit>:

void _exit (int status)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800133c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f7ff ffe7 	bl	8001314 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001346:	e7fe      	b.n	8001346 <_exit+0x12>

08001348 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0
 800134e:	60f8      	str	r0, [r7, #12]
 8001350:	60b9      	str	r1, [r7, #8]
 8001352:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]
 8001358:	e00a      	b.n	8001370 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800135a:	f3af 8000 	nop.w
 800135e:	4601      	mov	r1, r0
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	1c5a      	adds	r2, r3, #1
 8001364:	60ba      	str	r2, [r7, #8]
 8001366:	b2ca      	uxtb	r2, r1
 8001368:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800136a:	697b      	ldr	r3, [r7, #20]
 800136c:	3301      	adds	r3, #1
 800136e:	617b      	str	r3, [r7, #20]
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	429a      	cmp	r2, r3
 8001376:	dbf0      	blt.n	800135a <_read+0x12>
  }

  return len;
 8001378:	687b      	ldr	r3, [r7, #4]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3718      	adds	r7, #24
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}

08001382 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001382:	b580      	push	{r7, lr}
 8001384:	b086      	sub	sp, #24
 8001386:	af00      	add	r7, sp, #0
 8001388:	60f8      	str	r0, [r7, #12]
 800138a:	60b9      	str	r1, [r7, #8]
 800138c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
 8001392:	e009      	b.n	80013a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	60ba      	str	r2, [r7, #8]
 800139a:	781b      	ldrb	r3, [r3, #0]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff fd05 	bl	8000dac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	3301      	adds	r3, #1
 80013a6:	617b      	str	r3, [r7, #20]
 80013a8:	697a      	ldr	r2, [r7, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	dbf1      	blt.n	8001394 <_write+0x12>
  }
  return len;
 80013b0:	687b      	ldr	r3, [r7, #4]
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3718      	adds	r7, #24
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <_close>:

int _close(int file)
{
 80013ba:	b480      	push	{r7}
 80013bc:	b083      	sub	sp, #12
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013d2:	b480      	push	{r7}
 80013d4:	b083      	sub	sp, #12
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
 80013da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013e2:	605a      	str	r2, [r3, #4]
  return 0;
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	370c      	adds	r7, #12
 80013ea:	46bd      	mov	sp, r7
 80013ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f0:	4770      	bx	lr

080013f2 <_isatty>:

int _isatty(int file)
{
 80013f2:	b480      	push	{r7}
 80013f4:	b083      	sub	sp, #12
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013fa:	2301      	movs	r3, #1
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001408:	b480      	push	{r7}
 800140a:	b085      	sub	sp, #20
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	3714      	adds	r7, #20
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
	...

08001424 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b086      	sub	sp, #24
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800142c:	4a14      	ldr	r2, [pc, #80]	; (8001480 <_sbrk+0x5c>)
 800142e:	4b15      	ldr	r3, [pc, #84]	; (8001484 <_sbrk+0x60>)
 8001430:	1ad3      	subs	r3, r2, r3
 8001432:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001438:	4b13      	ldr	r3, [pc, #76]	; (8001488 <_sbrk+0x64>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	d102      	bne.n	8001446 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001440:	4b11      	ldr	r3, [pc, #68]	; (8001488 <_sbrk+0x64>)
 8001442:	4a12      	ldr	r2, [pc, #72]	; (800148c <_sbrk+0x68>)
 8001444:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001446:	4b10      	ldr	r3, [pc, #64]	; (8001488 <_sbrk+0x64>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4413      	add	r3, r2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	429a      	cmp	r2, r3
 8001452:	d207      	bcs.n	8001464 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001454:	f006 ff78 	bl	8008348 <__errno>
 8001458:	4603      	mov	r3, r0
 800145a:	220c      	movs	r2, #12
 800145c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800145e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001462:	e009      	b.n	8001478 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <_sbrk+0x64>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800146a:	4b07      	ldr	r3, [pc, #28]	; (8001488 <_sbrk+0x64>)
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4413      	add	r3, r2
 8001472:	4a05      	ldr	r2, [pc, #20]	; (8001488 <_sbrk+0x64>)
 8001474:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001476:	68fb      	ldr	r3, [r7, #12]
}
 8001478:	4618      	mov	r0, r3
 800147a:	3718      	adds	r7, #24
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20018000 	.word	0x20018000
 8001484:	00000400 	.word	0x00000400
 8001488:	200001e8 	.word	0x200001e8
 800148c:	20004bc0 	.word	0x20004bc0

08001490 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001494:	4b06      	ldr	r3, [pc, #24]	; (80014b0 <SystemInit+0x20>)
 8001496:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800149a:	4a05      	ldr	r2, [pc, #20]	; (80014b0 <SystemInit+0x20>)
 800149c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	e000ed00 	.word	0xe000ed00

080014b4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014ec <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b8:	f7ff ffea 	bl	8001490 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <LoopForever+0x6>)
  ldr r1, =_edata
 80014be:	490d      	ldr	r1, [pc, #52]	; (80014f4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <LoopForever+0xe>)
  movs r3, #0
 80014c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014c4:	e002      	b.n	80014cc <LoopCopyDataInit>

080014c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ca:	3304      	adds	r3, #4

080014cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014d0:	d3f9      	bcc.n	80014c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014d2:	4a0a      	ldr	r2, [pc, #40]	; (80014fc <LoopForever+0x12>)
  ldr r4, =_ebss
 80014d4:	4c0a      	ldr	r4, [pc, #40]	; (8001500 <LoopForever+0x16>)
  movs r3, #0
 80014d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d8:	e001      	b.n	80014de <LoopFillZerobss>

080014da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014dc:	3204      	adds	r2, #4

080014de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014e0:	d3fb      	bcc.n	80014da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014e2:	f006 ff37 	bl	8008354 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014e6:	f7ff f9d1 	bl	800088c <main>

080014ea <LoopForever>:

LoopForever:
    b LoopForever
 80014ea:	e7fe      	b.n	80014ea <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014ec:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014f4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014f8:	080094f8 	.word	0x080094f8
  ldr r2, =_sbss
 80014fc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001500:	20004bbc 	.word	0x20004bbc

08001504 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001504:	e7fe      	b.n	8001504 <ADC1_2_IRQHandler>
	...

08001508 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b082      	sub	sp, #8
 800150c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800150e:	2300      	movs	r3, #0
 8001510:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001512:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <HAL_Init+0x3c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a0b      	ldr	r2, [pc, #44]	; (8001544 <HAL_Init+0x3c>)
 8001518:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151e:	2003      	movs	r0, #3
 8001520:	f000 f8df 	bl	80016e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001524:	200f      	movs	r0, #15
 8001526:	f7ff fe33 	bl	8001190 <HAL_InitTick>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d002      	beq.n	8001536 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	e001      	b.n	800153a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001536:	f7ff fd81 	bl	800103c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800153a:	79fb      	ldrb	r3, [r7, #7]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40022000 	.word	0x40022000

08001548 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <HAL_IncTick+0x20>)
 800154e:	781b      	ldrb	r3, [r3, #0]
 8001550:	461a      	mov	r2, r3
 8001552:	4b06      	ldr	r3, [pc, #24]	; (800156c <HAL_IncTick+0x24>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4413      	add	r3, r2
 8001558:	4a04      	ldr	r2, [pc, #16]	; (800156c <HAL_IncTick+0x24>)
 800155a:	6013      	str	r3, [r2, #0]
}
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr
 8001566:	bf00      	nop
 8001568:	2000000c 	.word	0x2000000c
 800156c:	200001ec 	.word	0x200001ec

08001570 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001570:	b480      	push	{r7}
 8001572:	af00      	add	r7, sp, #0
  return uwTick;
 8001574:	4b03      	ldr	r3, [pc, #12]	; (8001584 <HAL_GetTick+0x14>)
 8001576:	681b      	ldr	r3, [r3, #0]
}
 8001578:	4618      	mov	r0, r3
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	200001ec 	.word	0x200001ec

08001588 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001588:	b480      	push	{r7}
 800158a:	b085      	sub	sp, #20
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f003 0307 	and.w	r3, r3, #7
 8001596:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001598:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 800159a:	68db      	ldr	r3, [r3, #12]
 800159c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800159e:	68ba      	ldr	r2, [r7, #8]
 80015a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015a4:	4013      	ands	r3, r2
 80015a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015ac:	68bb      	ldr	r3, [r7, #8]
 80015ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <__NVIC_SetPriorityGrouping+0x44>)
 80015bc:	68bb      	ldr	r3, [r7, #8]
 80015be:	60d3      	str	r3, [r2, #12]
}
 80015c0:	bf00      	nop
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	e000ed00 	.word	0xe000ed00

080015d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015d4:	4b04      	ldr	r3, [pc, #16]	; (80015e8 <__NVIC_GetPriorityGrouping+0x18>)
 80015d6:	68db      	ldr	r3, [r3, #12]
 80015d8:	0a1b      	lsrs	r3, r3, #8
 80015da:	f003 0307 	and.w	r3, r3, #7
}
 80015de:	4618      	mov	r0, r3
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	db0b      	blt.n	8001616 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015fe:	79fb      	ldrb	r3, [r7, #7]
 8001600:	f003 021f 	and.w	r2, r3, #31
 8001604:	4907      	ldr	r1, [pc, #28]	; (8001624 <__NVIC_EnableIRQ+0x38>)
 8001606:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800160a:	095b      	lsrs	r3, r3, #5
 800160c:	2001      	movs	r0, #1
 800160e:	fa00 f202 	lsl.w	r2, r0, r2
 8001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	e000e100 	.word	0xe000e100

08001628 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	4603      	mov	r3, r0
 8001630:	6039      	str	r1, [r7, #0]
 8001632:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001634:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001638:	2b00      	cmp	r3, #0
 800163a:	db0a      	blt.n	8001652 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	b2da      	uxtb	r2, r3
 8001640:	490c      	ldr	r1, [pc, #48]	; (8001674 <__NVIC_SetPriority+0x4c>)
 8001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001646:	0112      	lsls	r2, r2, #4
 8001648:	b2d2      	uxtb	r2, r2
 800164a:	440b      	add	r3, r1
 800164c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001650:	e00a      	b.n	8001668 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	b2da      	uxtb	r2, r3
 8001656:	4908      	ldr	r1, [pc, #32]	; (8001678 <__NVIC_SetPriority+0x50>)
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	f003 030f 	and.w	r3, r3, #15
 800165e:	3b04      	subs	r3, #4
 8001660:	0112      	lsls	r2, r2, #4
 8001662:	b2d2      	uxtb	r2, r2
 8001664:	440b      	add	r3, r1
 8001666:	761a      	strb	r2, [r3, #24]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr
 8001674:	e000e100 	.word	0xe000e100
 8001678:	e000ed00 	.word	0xe000ed00

0800167c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	60f8      	str	r0, [r7, #12]
 8001684:	60b9      	str	r1, [r7, #8]
 8001686:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001690:	69fb      	ldr	r3, [r7, #28]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	2b04      	cmp	r3, #4
 8001698:	bf28      	it	cs
 800169a:	2304      	movcs	r3, #4
 800169c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3304      	adds	r3, #4
 80016a2:	2b06      	cmp	r3, #6
 80016a4:	d902      	bls.n	80016ac <NVIC_EncodePriority+0x30>
 80016a6:	69fb      	ldr	r3, [r7, #28]
 80016a8:	3b03      	subs	r3, #3
 80016aa:	e000      	b.n	80016ae <NVIC_EncodePriority+0x32>
 80016ac:	2300      	movs	r3, #0
 80016ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	fa02 f303 	lsl.w	r3, r2, r3
 80016ba:	43da      	mvns	r2, r3
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	401a      	ands	r2, r3
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43d9      	mvns	r1, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016d4:	4313      	orrs	r3, r2
         );
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3724      	adds	r7, #36	; 0x24
 80016da:	46bd      	mov	sp, r7
 80016dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e0:	4770      	bx	lr

080016e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e2:	b580      	push	{r7, lr}
 80016e4:	b082      	sub	sp, #8
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f7ff ff4c 	bl	8001588 <__NVIC_SetPriorityGrouping>
}
 80016f0:	bf00      	nop
 80016f2:	3708      	adds	r7, #8
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b086      	sub	sp, #24
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	4603      	mov	r3, r0
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001706:	2300      	movs	r3, #0
 8001708:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800170a:	f7ff ff61 	bl	80015d0 <__NVIC_GetPriorityGrouping>
 800170e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001710:	687a      	ldr	r2, [r7, #4]
 8001712:	68b9      	ldr	r1, [r7, #8]
 8001714:	6978      	ldr	r0, [r7, #20]
 8001716:	f7ff ffb1 	bl	800167c <NVIC_EncodePriority>
 800171a:	4602      	mov	r2, r0
 800171c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001720:	4611      	mov	r1, r2
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff80 	bl	8001628 <__NVIC_SetPriority>
}
 8001728:	bf00      	nop
 800172a:	3718      	adds	r7, #24
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	4603      	mov	r3, r0
 8001738:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800173a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800173e:	4618      	mov	r0, r3
 8001740:	f7ff ff54 	bl	80015ec <__NVIC_EnableIRQ>
}
 8001744:	bf00      	nop
 8001746:	3708      	adds	r7, #8
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}

0800174c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800174c:	b480      	push	{r7}
 800174e:	b087      	sub	sp, #28
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001756:	2300      	movs	r3, #0
 8001758:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800175a:	e17f      	b.n	8001a5c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	2101      	movs	r1, #1
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	fa01 f303 	lsl.w	r3, r1, r3
 8001768:	4013      	ands	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8171 	beq.w	8001a56 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f003 0303 	and.w	r3, r3, #3
 800177c:	2b01      	cmp	r3, #1
 800177e:	d005      	beq.n	800178c <HAL_GPIO_Init+0x40>
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f003 0303 	and.w	r3, r3, #3
 8001788:	2b02      	cmp	r3, #2
 800178a:	d130      	bne.n	80017ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	689b      	ldr	r3, [r3, #8]
 8001790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001792:	697b      	ldr	r3, [r7, #20]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	4013      	ands	r3, r2
 80017a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	68da      	ldr	r2, [r3, #12]
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	005b      	lsls	r3, r3, #1
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017c2:	2201      	movs	r2, #1
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ca:	43db      	mvns	r3, r3
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	4013      	ands	r3, r2
 80017d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	091b      	lsrs	r3, r3, #4
 80017d8:	f003 0201 	and.w	r2, r3, #1
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	693a      	ldr	r2, [r7, #16]
 80017ec:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d118      	bne.n	800182c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001800:	2201      	movs	r2, #1
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	43db      	mvns	r3, r3
 800180a:	693a      	ldr	r2, [r7, #16]
 800180c:	4013      	ands	r3, r2
 800180e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	08db      	lsrs	r3, r3, #3
 8001816:	f003 0201 	and.w	r2, r3, #1
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	693a      	ldr	r2, [r7, #16]
 800182a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685b      	ldr	r3, [r3, #4]
 8001830:	f003 0303 	and.w	r3, r3, #3
 8001834:	2b03      	cmp	r3, #3
 8001836:	d017      	beq.n	8001868 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	68db      	ldr	r3, [r3, #12]
 800183c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	005b      	lsls	r3, r3, #1
 8001842:	2203      	movs	r2, #3
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	43db      	mvns	r3, r3
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	4013      	ands	r3, r2
 800184e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	689a      	ldr	r2, [r3, #8]
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	005b      	lsls	r3, r3, #1
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	4313      	orrs	r3, r2
 8001860:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	693a      	ldr	r2, [r7, #16]
 8001866:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	2b02      	cmp	r3, #2
 8001872:	d123      	bne.n	80018bc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	08da      	lsrs	r2, r3, #3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	3208      	adds	r2, #8
 800187c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001880:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	220f      	movs	r2, #15
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	43db      	mvns	r3, r3
 8001892:	693a      	ldr	r2, [r7, #16]
 8001894:	4013      	ands	r3, r2
 8001896:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	691a      	ldr	r2, [r3, #16]
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f003 0307 	and.w	r3, r3, #7
 80018a2:	009b      	lsls	r3, r3, #2
 80018a4:	fa02 f303 	lsl.w	r3, r2, r3
 80018a8:	693a      	ldr	r2, [r7, #16]
 80018aa:	4313      	orrs	r3, r2
 80018ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	08da      	lsrs	r2, r3, #3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3208      	adds	r2, #8
 80018b6:	6939      	ldr	r1, [r7, #16]
 80018b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	2203      	movs	r2, #3
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f003 0203 	and.w	r2, r3, #3
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	005b      	lsls	r3, r3, #1
 80018e0:	fa02 f303 	lsl.w	r3, r2, r3
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	4313      	orrs	r3, r2
 80018e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018f0:	683b      	ldr	r3, [r7, #0]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	f000 80ac 	beq.w	8001a56 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018fe:	4b5f      	ldr	r3, [pc, #380]	; (8001a7c <HAL_GPIO_Init+0x330>)
 8001900:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001902:	4a5e      	ldr	r2, [pc, #376]	; (8001a7c <HAL_GPIO_Init+0x330>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	6613      	str	r3, [r2, #96]	; 0x60
 800190a:	4b5c      	ldr	r3, [pc, #368]	; (8001a7c <HAL_GPIO_Init+0x330>)
 800190c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	60bb      	str	r3, [r7, #8]
 8001914:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001916:	4a5a      	ldr	r2, [pc, #360]	; (8001a80 <HAL_GPIO_Init+0x334>)
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	089b      	lsrs	r3, r3, #2
 800191c:	3302      	adds	r3, #2
 800191e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001922:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001924:	697b      	ldr	r3, [r7, #20]
 8001926:	f003 0303 	and.w	r3, r3, #3
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	220f      	movs	r2, #15
 800192e:	fa02 f303 	lsl.w	r3, r2, r3
 8001932:	43db      	mvns	r3, r3
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	4013      	ands	r3, r2
 8001938:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001940:	d025      	beq.n	800198e <HAL_GPIO_Init+0x242>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4f      	ldr	r2, [pc, #316]	; (8001a84 <HAL_GPIO_Init+0x338>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d01f      	beq.n	800198a <HAL_GPIO_Init+0x23e>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4e      	ldr	r2, [pc, #312]	; (8001a88 <HAL_GPIO_Init+0x33c>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d019      	beq.n	8001986 <HAL_GPIO_Init+0x23a>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4d      	ldr	r2, [pc, #308]	; (8001a8c <HAL_GPIO_Init+0x340>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d013      	beq.n	8001982 <HAL_GPIO_Init+0x236>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4c      	ldr	r2, [pc, #304]	; (8001a90 <HAL_GPIO_Init+0x344>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d00d      	beq.n	800197e <HAL_GPIO_Init+0x232>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4b      	ldr	r2, [pc, #300]	; (8001a94 <HAL_GPIO_Init+0x348>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d007      	beq.n	800197a <HAL_GPIO_Init+0x22e>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a4a      	ldr	r2, [pc, #296]	; (8001a98 <HAL_GPIO_Init+0x34c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d101      	bne.n	8001976 <HAL_GPIO_Init+0x22a>
 8001972:	2306      	movs	r3, #6
 8001974:	e00c      	b.n	8001990 <HAL_GPIO_Init+0x244>
 8001976:	2307      	movs	r3, #7
 8001978:	e00a      	b.n	8001990 <HAL_GPIO_Init+0x244>
 800197a:	2305      	movs	r3, #5
 800197c:	e008      	b.n	8001990 <HAL_GPIO_Init+0x244>
 800197e:	2304      	movs	r3, #4
 8001980:	e006      	b.n	8001990 <HAL_GPIO_Init+0x244>
 8001982:	2303      	movs	r3, #3
 8001984:	e004      	b.n	8001990 <HAL_GPIO_Init+0x244>
 8001986:	2302      	movs	r3, #2
 8001988:	e002      	b.n	8001990 <HAL_GPIO_Init+0x244>
 800198a:	2301      	movs	r3, #1
 800198c:	e000      	b.n	8001990 <HAL_GPIO_Init+0x244>
 800198e:	2300      	movs	r3, #0
 8001990:	697a      	ldr	r2, [r7, #20]
 8001992:	f002 0203 	and.w	r2, r2, #3
 8001996:	0092      	lsls	r2, r2, #2
 8001998:	4093      	lsls	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4313      	orrs	r3, r2
 800199e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019a0:	4937      	ldr	r1, [pc, #220]	; (8001a80 <HAL_GPIO_Init+0x334>)
 80019a2:	697b      	ldr	r3, [r7, #20]
 80019a4:	089b      	lsrs	r3, r3, #2
 80019a6:	3302      	adds	r3, #2
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019ae:	4b3b      	ldr	r3, [pc, #236]	; (8001a9c <HAL_GPIO_Init+0x350>)
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	43db      	mvns	r3, r3
 80019b8:	693a      	ldr	r2, [r7, #16]
 80019ba:	4013      	ands	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	685b      	ldr	r3, [r3, #4]
 80019c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019ca:	693a      	ldr	r2, [r7, #16]
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019d2:	4a32      	ldr	r2, [pc, #200]	; (8001a9c <HAL_GPIO_Init+0x350>)
 80019d4:	693b      	ldr	r3, [r7, #16]
 80019d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019d8:	4b30      	ldr	r3, [pc, #192]	; (8001a9c <HAL_GPIO_Init+0x350>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	43db      	mvns	r3, r3
 80019e2:	693a      	ldr	r2, [r7, #16]
 80019e4:	4013      	ands	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019f4:	693a      	ldr	r2, [r7, #16]
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	4313      	orrs	r3, r2
 80019fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019fc:	4a27      	ldr	r2, [pc, #156]	; (8001a9c <HAL_GPIO_Init+0x350>)
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a02:	4b26      	ldr	r3, [pc, #152]	; (8001a9c <HAL_GPIO_Init+0x350>)
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	43db      	mvns	r3, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4013      	ands	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d003      	beq.n	8001a26 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a1e:	693a      	ldr	r2, [r7, #16]
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a26:	4a1d      	ldr	r2, [pc, #116]	; (8001a9c <HAL_GPIO_Init+0x350>)
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a2c:	4b1b      	ldr	r3, [pc, #108]	; (8001a9c <HAL_GPIO_Init+0x350>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	43db      	mvns	r3, r3
 8001a36:	693a      	ldr	r2, [r7, #16]
 8001a38:	4013      	ands	r3, r2
 8001a3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d003      	beq.n	8001a50 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a48:	693a      	ldr	r2, [r7, #16]
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a50:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <HAL_GPIO_Init+0x350>)
 8001a52:	693b      	ldr	r3, [r7, #16]
 8001a54:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	3301      	adds	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a5c:	683b      	ldr	r3, [r7, #0]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	fa22 f303 	lsr.w	r3, r2, r3
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f47f ae78 	bne.w	800175c <HAL_GPIO_Init+0x10>
  }
}
 8001a6c:	bf00      	nop
 8001a6e:	bf00      	nop
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	40010000 	.word	0x40010000
 8001a84:	48000400 	.word	0x48000400
 8001a88:	48000800 	.word	0x48000800
 8001a8c:	48000c00 	.word	0x48000c00
 8001a90:	48001000 	.word	0x48001000
 8001a94:	48001400 	.word	0x48001400
 8001a98:	48001800 	.word	0x48001800
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	807b      	strh	r3, [r7, #2]
 8001aac:	4613      	mov	r3, r2
 8001aae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ab0:	787b      	ldrb	r3, [r7, #1]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d003      	beq.n	8001abe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001abc:	e002      	b.n	8001ac4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001abe:	887a      	ldrh	r2, [r7, #2]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b085      	sub	sp, #20
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	695b      	ldr	r3, [r3, #20]
 8001ae0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ae2:	887a      	ldrh	r2, [r7, #2]
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	041a      	lsls	r2, r3, #16
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	43d9      	mvns	r1, r3
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	400b      	ands	r3, r1
 8001af2:	431a      	orrs	r2, r3
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	619a      	str	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	3714      	adds	r7, #20
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b0e:	4b08      	ldr	r3, [pc, #32]	; (8001b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b10:	695a      	ldr	r2, [r3, #20]
 8001b12:	88fb      	ldrh	r3, [r7, #6]
 8001b14:	4013      	ands	r3, r2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d006      	beq.n	8001b28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b1a:	4a05      	ldr	r2, [pc, #20]	; (8001b30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b1c:	88fb      	ldrh	r3, [r7, #6]
 8001b1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff f910 	bl	8000d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b28:	bf00      	nop
 8001b2a:	3708      	adds	r7, #8
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}
 8001b30:	40010400 	.word	0x40010400

08001b34 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b38:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <HAL_PWREx_GetVoltageRange+0x18>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	40007000 	.word	0x40007000

08001b50 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b085      	sub	sp, #20
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b5e:	d130      	bne.n	8001bc2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b60:	4b23      	ldr	r3, [pc, #140]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b6c:	d038      	beq.n	8001be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b6e:	4b20      	ldr	r3, [pc, #128]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b76:	4a1e      	ldr	r2, [pc, #120]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b78:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b7c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b7e:	4b1d      	ldr	r3, [pc, #116]	; (8001bf4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	2232      	movs	r2, #50	; 0x32
 8001b84:	fb02 f303 	mul.w	r3, r2, r3
 8001b88:	4a1b      	ldr	r2, [pc, #108]	; (8001bf8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	0c9b      	lsrs	r3, r3, #18
 8001b90:	3301      	adds	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b94:	e002      	b.n	8001b9c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	3b01      	subs	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba8:	d102      	bne.n	8001bb0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d1f2      	bne.n	8001b96 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bb0:	4b0f      	ldr	r3, [pc, #60]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bb2:	695b      	ldr	r3, [r3, #20]
 8001bb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bbc:	d110      	bne.n	8001be0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e00f      	b.n	8001be2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bc2:	4b0b      	ldr	r3, [pc, #44]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bce:	d007      	beq.n	8001be0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd0:	4b07      	ldr	r3, [pc, #28]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bd8:	4a05      	ldr	r2, [pc, #20]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bda:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bde:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3714      	adds	r7, #20
 8001be6:	46bd      	mov	sp, r7
 8001be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bec:	4770      	bx	lr
 8001bee:	bf00      	nop
 8001bf0:	40007000 	.word	0x40007000
 8001bf4:	20000004 	.word	0x20000004
 8001bf8:	431bde83 	.word	0x431bde83

08001bfc <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b088      	sub	sp, #32
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d101      	bne.n	8001c0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c0a:	2301      	movs	r3, #1
 8001c0c:	e3ca      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c0e:	4b97      	ldr	r3, [pc, #604]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	f003 030c 	and.w	r3, r3, #12
 8001c16:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c18:	4b94      	ldr	r3, [pc, #592]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0310 	and.w	r3, r3, #16
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80e4 	beq.w	8001df8 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c30:	69bb      	ldr	r3, [r7, #24]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_RCC_OscConfig+0x4a>
 8001c36:	69bb      	ldr	r3, [r7, #24]
 8001c38:	2b0c      	cmp	r3, #12
 8001c3a:	f040 808b 	bne.w	8001d54 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	f040 8087 	bne.w	8001d54 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c46:	4b89      	ldr	r3, [pc, #548]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0302 	and.w	r3, r3, #2
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d005      	beq.n	8001c5e <HAL_RCC_OscConfig+0x62>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	699b      	ldr	r3, [r3, #24]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e3a2      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a1a      	ldr	r2, [r3, #32]
 8001c62:	4b82      	ldr	r3, [pc, #520]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d004      	beq.n	8001c78 <HAL_RCC_OscConfig+0x7c>
 8001c6e:	4b7f      	ldr	r3, [pc, #508]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c76:	e005      	b.n	8001c84 <HAL_RCC_OscConfig+0x88>
 8001c78:	4b7c      	ldr	r3, [pc, #496]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d223      	bcs.n	8001cd0 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a1b      	ldr	r3, [r3, #32]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f000 fd87 	bl	80027a0 <RCC_SetFlashLatencyFromMSIRange>
 8001c92:	4603      	mov	r3, r0
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e383      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c9c:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a72      	ldr	r2, [pc, #456]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001ca2:	f043 0308 	orr.w	r3, r3, #8
 8001ca6:	6013      	str	r3, [r2, #0]
 8001ca8:	4b70      	ldr	r3, [pc, #448]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	496d      	ldr	r1, [pc, #436]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cba:	4b6c      	ldr	r3, [pc, #432]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	69db      	ldr	r3, [r3, #28]
 8001cc6:	021b      	lsls	r3, r3, #8
 8001cc8:	4968      	ldr	r1, [pc, #416]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	604b      	str	r3, [r1, #4]
 8001cce:	e025      	b.n	8001d1c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd0:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a65      	ldr	r2, [pc, #404]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	4960      	ldr	r1, [pc, #384]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cee:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	495b      	ldr	r1, [pc, #364]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d109      	bne.n	8001d1c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6a1b      	ldr	r3, [r3, #32]
 8001d0c:	4618      	mov	r0, r3
 8001d0e:	f000 fd47 	bl	80027a0 <RCC_SetFlashLatencyFromMSIRange>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e343      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d1c:	f000 fc4a 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8001d20:	4602      	mov	r2, r0
 8001d22:	4b52      	ldr	r3, [pc, #328]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001d24:	689b      	ldr	r3, [r3, #8]
 8001d26:	091b      	lsrs	r3, r3, #4
 8001d28:	f003 030f 	and.w	r3, r3, #15
 8001d2c:	4950      	ldr	r1, [pc, #320]	; (8001e70 <HAL_RCC_OscConfig+0x274>)
 8001d2e:	5ccb      	ldrb	r3, [r1, r3]
 8001d30:	f003 031f 	and.w	r3, r3, #31
 8001d34:	fa22 f303 	lsr.w	r3, r2, r3
 8001d38:	4a4e      	ldr	r2, [pc, #312]	; (8001e74 <HAL_RCC_OscConfig+0x278>)
 8001d3a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d3c:	4b4e      	ldr	r3, [pc, #312]	; (8001e78 <HAL_RCC_OscConfig+0x27c>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f7ff fa25 	bl	8001190 <HAL_InitTick>
 8001d46:	4603      	mov	r3, r0
 8001d48:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d4a:	7bfb      	ldrb	r3, [r7, #15]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d052      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d50:	7bfb      	ldrb	r3, [r7, #15]
 8001d52:	e327      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	699b      	ldr	r3, [r3, #24]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d032      	beq.n	8001dc2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d5c:	4b43      	ldr	r3, [pc, #268]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	4a42      	ldr	r2, [pc, #264]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001d62:	f043 0301 	orr.w	r3, r3, #1
 8001d66:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d68:	f7ff fc02 	bl	8001570 <HAL_GetTick>
 8001d6c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d6e:	e008      	b.n	8001d82 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d70:	f7ff fbfe 	bl	8001570 <HAL_GetTick>
 8001d74:	4602      	mov	r2, r0
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	1ad3      	subs	r3, r2, r3
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d901      	bls.n	8001d82 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e310      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d82:	4b3a      	ldr	r3, [pc, #232]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0302 	and.w	r3, r3, #2
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d0f0      	beq.n	8001d70 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d8e:	4b37      	ldr	r3, [pc, #220]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a36      	ldr	r2, [pc, #216]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b34      	ldr	r3, [pc, #208]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6a1b      	ldr	r3, [r3, #32]
 8001da6:	4931      	ldr	r1, [pc, #196]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001da8:	4313      	orrs	r3, r2
 8001daa:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dac:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	021b      	lsls	r3, r3, #8
 8001dba:	492c      	ldr	r1, [pc, #176]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	604b      	str	r3, [r1, #4]
 8001dc0:	e01a      	b.n	8001df8 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dc2:	4b2a      	ldr	r3, [pc, #168]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a29      	ldr	r2, [pc, #164]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001dc8:	f023 0301 	bic.w	r3, r3, #1
 8001dcc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dce:	f7ff fbcf 	bl	8001570 <HAL_GetTick>
 8001dd2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dd4:	e008      	b.n	8001de8 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dd6:	f7ff fbcb 	bl	8001570 <HAL_GetTick>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	693b      	ldr	r3, [r7, #16]
 8001dde:	1ad3      	subs	r3, r2, r3
 8001de0:	2b02      	cmp	r3, #2
 8001de2:	d901      	bls.n	8001de8 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e2dd      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001de8:	4b20      	ldr	r3, [pc, #128]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0302 	and.w	r3, r3, #2
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d1f0      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x1da>
 8001df4:	e000      	b.n	8001df8 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001df6:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 0301 	and.w	r3, r3, #1
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d074      	beq.n	8001eee <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	2b08      	cmp	r3, #8
 8001e08:	d005      	beq.n	8001e16 <HAL_RCC_OscConfig+0x21a>
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	2b0c      	cmp	r3, #12
 8001e0e:	d10e      	bne.n	8001e2e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	2b03      	cmp	r3, #3
 8001e14:	d10b      	bne.n	8001e2e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e16:	4b15      	ldr	r3, [pc, #84]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d064      	beq.n	8001eec <HAL_RCC_OscConfig+0x2f0>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d160      	bne.n	8001eec <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	e2ba      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e36:	d106      	bne.n	8001e46 <HAL_RCC_OscConfig+0x24a>
 8001e38:	4b0c      	ldr	r3, [pc, #48]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001e3e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e42:	6013      	str	r3, [r2, #0]
 8001e44:	e026      	b.n	8001e94 <HAL_RCC_OscConfig+0x298>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e4e:	d115      	bne.n	8001e7c <HAL_RCC_OscConfig+0x280>
 8001e50:	4b06      	ldr	r3, [pc, #24]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4a05      	ldr	r2, [pc, #20]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001e56:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e5a:	6013      	str	r3, [r2, #0]
 8001e5c:	4b03      	ldr	r3, [pc, #12]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4a02      	ldr	r2, [pc, #8]	; (8001e6c <HAL_RCC_OscConfig+0x270>)
 8001e62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e66:	6013      	str	r3, [r2, #0]
 8001e68:	e014      	b.n	8001e94 <HAL_RCC_OscConfig+0x298>
 8001e6a:	bf00      	nop
 8001e6c:	40021000 	.word	0x40021000
 8001e70:	080093c0 	.word	0x080093c0
 8001e74:	20000004 	.word	0x20000004
 8001e78:	20000008 	.word	0x20000008
 8001e7c:	4ba0      	ldr	r3, [pc, #640]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a9f      	ldr	r2, [pc, #636]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001e82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e86:	6013      	str	r3, [r2, #0]
 8001e88:	4b9d      	ldr	r3, [pc, #628]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a9c      	ldr	r2, [pc, #624]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001e8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d013      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9c:	f7ff fb68 	bl	8001570 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea4:	f7ff fb64 	bl	8001570 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b64      	cmp	r3, #100	; 0x64
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e276      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb6:	4b92      	ldr	r3, [pc, #584]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x2a8>
 8001ec2:	e014      	b.n	8001eee <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec4:	f7ff fb54 	bl	8001570 <HAL_GetTick>
 8001ec8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eca:	e008      	b.n	8001ede <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ecc:	f7ff fb50 	bl	8001570 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	2b64      	cmp	r3, #100	; 0x64
 8001ed8:	d901      	bls.n	8001ede <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001eda:	2303      	movs	r3, #3
 8001edc:	e262      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ede:	4b88      	ldr	r3, [pc, #544]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d1f0      	bne.n	8001ecc <HAL_RCC_OscConfig+0x2d0>
 8001eea:	e000      	b.n	8001eee <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001eec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d060      	beq.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	2b04      	cmp	r3, #4
 8001efe:	d005      	beq.n	8001f0c <HAL_RCC_OscConfig+0x310>
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	2b0c      	cmp	r3, #12
 8001f04:	d119      	bne.n	8001f3a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b02      	cmp	r3, #2
 8001f0a:	d116      	bne.n	8001f3a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f0c:	4b7c      	ldr	r3, [pc, #496]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d005      	beq.n	8001f24 <HAL_RCC_OscConfig+0x328>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d101      	bne.n	8001f24 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e23f      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b76      	ldr	r3, [pc, #472]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f26:	685b      	ldr	r3, [r3, #4]
 8001f28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	061b      	lsls	r3, r3, #24
 8001f32:	4973      	ldr	r1, [pc, #460]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f38:	e040      	b.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d023      	beq.n	8001f8a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f42:	4b6f      	ldr	r3, [pc, #444]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a6e      	ldr	r2, [pc, #440]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f4c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4e:	f7ff fb0f 	bl	8001570 <HAL_GetTick>
 8001f52:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f54:	e008      	b.n	8001f68 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f56:	f7ff fb0b 	bl	8001570 <HAL_GetTick>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	1ad3      	subs	r3, r2, r3
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	d901      	bls.n	8001f68 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e21d      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f68:	4b65      	ldr	r3, [pc, #404]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0f0      	beq.n	8001f56 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f74:	4b62      	ldr	r3, [pc, #392]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	691b      	ldr	r3, [r3, #16]
 8001f80:	061b      	lsls	r3, r3, #24
 8001f82:	495f      	ldr	r1, [pc, #380]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f84:	4313      	orrs	r3, r2
 8001f86:	604b      	str	r3, [r1, #4]
 8001f88:	e018      	b.n	8001fbc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f8a:	4b5d      	ldr	r3, [pc, #372]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a5c      	ldr	r2, [pc, #368]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f96:	f7ff faeb 	bl	8001570 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f9e:	f7ff fae7 	bl	8001570 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e1f9      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fb0:	4b53      	ldr	r3, [pc, #332]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d03c      	beq.n	8002042 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	695b      	ldr	r3, [r3, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d01c      	beq.n	800200a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd0:	4b4b      	ldr	r3, [pc, #300]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fd6:	4a4a      	ldr	r2, [pc, #296]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001fd8:	f043 0301 	orr.w	r3, r3, #1
 8001fdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fe0:	f7ff fac6 	bl	8001570 <HAL_GetTick>
 8001fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fe6:	e008      	b.n	8001ffa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe8:	f7ff fac2 	bl	8001570 <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	2b02      	cmp	r3, #2
 8001ff4:	d901      	bls.n	8001ffa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	e1d4      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ffa:	4b41      	ldr	r3, [pc, #260]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002000:	f003 0302 	and.w	r3, r3, #2
 8002004:	2b00      	cmp	r3, #0
 8002006:	d0ef      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x3ec>
 8002008:	e01b      	b.n	8002042 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800200a:	4b3d      	ldr	r3, [pc, #244]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 800200c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002010:	4a3b      	ldr	r2, [pc, #236]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8002012:	f023 0301 	bic.w	r3, r3, #1
 8002016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201a:	f7ff faa9 	bl	8001570 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002022:	f7ff faa5 	bl	8001570 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e1b7      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002034:	4b32      	ldr	r3, [pc, #200]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8002036:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800203a:	f003 0302 	and.w	r3, r3, #2
 800203e:	2b00      	cmp	r3, #0
 8002040:	d1ef      	bne.n	8002022 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0304 	and.w	r3, r3, #4
 800204a:	2b00      	cmp	r3, #0
 800204c:	f000 80a6 	beq.w	800219c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002050:	2300      	movs	r3, #0
 8002052:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002054:	4b2a      	ldr	r3, [pc, #168]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8002056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10d      	bne.n	800207c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002060:	4b27      	ldr	r3, [pc, #156]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	4a26      	ldr	r2, [pc, #152]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 8002066:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800206a:	6593      	str	r3, [r2, #88]	; 0x58
 800206c:	4b24      	ldr	r3, [pc, #144]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 800206e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002070:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002074:	60bb      	str	r3, [r7, #8]
 8002076:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002078:	2301      	movs	r3, #1
 800207a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800207c:	4b21      	ldr	r3, [pc, #132]	; (8002104 <HAL_RCC_OscConfig+0x508>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002084:	2b00      	cmp	r3, #0
 8002086:	d118      	bne.n	80020ba <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002088:	4b1e      	ldr	r3, [pc, #120]	; (8002104 <HAL_RCC_OscConfig+0x508>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a1d      	ldr	r2, [pc, #116]	; (8002104 <HAL_RCC_OscConfig+0x508>)
 800208e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002092:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002094:	f7ff fa6c 	bl	8001570 <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209c:	f7ff fa68 	bl	8001570 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e17a      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ae:	4b15      	ldr	r3, [pc, #84]	; (8002104 <HAL_RCC_OscConfig+0x508>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b01      	cmp	r3, #1
 80020c0:	d108      	bne.n	80020d4 <HAL_RCC_OscConfig+0x4d8>
 80020c2:	4b0f      	ldr	r3, [pc, #60]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 80020c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c8:	4a0d      	ldr	r2, [pc, #52]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 80020ca:	f043 0301 	orr.w	r3, r3, #1
 80020ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020d2:	e029      	b.n	8002128 <HAL_RCC_OscConfig+0x52c>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689b      	ldr	r3, [r3, #8]
 80020d8:	2b05      	cmp	r3, #5
 80020da:	d115      	bne.n	8002108 <HAL_RCC_OscConfig+0x50c>
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 80020de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e2:	4a07      	ldr	r2, [pc, #28]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ec:	4b04      	ldr	r3, [pc, #16]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 80020ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020f2:	4a03      	ldr	r2, [pc, #12]	; (8002100 <HAL_RCC_OscConfig+0x504>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020fc:	e014      	b.n	8002128 <HAL_RCC_OscConfig+0x52c>
 80020fe:	bf00      	nop
 8002100:	40021000 	.word	0x40021000
 8002104:	40007000 	.word	0x40007000
 8002108:	4b9c      	ldr	r3, [pc, #624]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800210a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800210e:	4a9b      	ldr	r2, [pc, #620]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002110:	f023 0301 	bic.w	r3, r3, #1
 8002114:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002118:	4b98      	ldr	r3, [pc, #608]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800211a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800211e:	4a97      	ldr	r2, [pc, #604]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002120:	f023 0304 	bic.w	r3, r3, #4
 8002124:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2b00      	cmp	r3, #0
 800212e:	d016      	beq.n	800215e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff fa1e 	bl	8001570 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002136:	e00a      	b.n	800214e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002138:	f7ff fa1a 	bl	8001570 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	f241 3288 	movw	r2, #5000	; 0x1388
 8002146:	4293      	cmp	r3, r2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e12a      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800214e:	4b8b      	ldr	r3, [pc, #556]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ed      	beq.n	8002138 <HAL_RCC_OscConfig+0x53c>
 800215c:	e015      	b.n	800218a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800215e:	f7ff fa07 	bl	8001570 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7ff fa03 	bl	8001570 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	; 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e113      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800217c:	4b7f      	ldr	r3, [pc, #508]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800217e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	2b00      	cmp	r3, #0
 8002188:	d1ed      	bne.n	8002166 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800218a:	7ffb      	ldrb	r3, [r7, #31]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d105      	bne.n	800219c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002190:	4b7a      	ldr	r3, [pc, #488]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002192:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002194:	4a79      	ldr	r2, [pc, #484]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002196:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800219a:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80fe 	beq.w	80023a2 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021aa:	2b02      	cmp	r3, #2
 80021ac:	f040 80d0 	bne.w	8002350 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021b0:	4b72      	ldr	r3, [pc, #456]	; (800237c <HAL_RCC_OscConfig+0x780>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f003 0203 	and.w	r2, r3, #3
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d130      	bne.n	8002226 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	3b01      	subs	r3, #1
 80021d0:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d127      	bne.n	8002226 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021d6:	697b      	ldr	r3, [r7, #20]
 80021d8:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021e0:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021e2:	429a      	cmp	r2, r3
 80021e4:	d11f      	bne.n	8002226 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ec:	687a      	ldr	r2, [r7, #4]
 80021ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021f0:	2a07      	cmp	r2, #7
 80021f2:	bf14      	ite	ne
 80021f4:	2201      	movne	r2, #1
 80021f6:	2200      	moveq	r2, #0
 80021f8:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d113      	bne.n	8002226 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002208:	085b      	lsrs	r3, r3, #1
 800220a:	3b01      	subs	r3, #1
 800220c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800220e:	429a      	cmp	r2, r3
 8002210:	d109      	bne.n	8002226 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	085b      	lsrs	r3, r3, #1
 800221e:	3b01      	subs	r3, #1
 8002220:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002222:	429a      	cmp	r2, r3
 8002224:	d06e      	beq.n	8002304 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b0c      	cmp	r3, #12
 800222a:	d069      	beq.n	8002300 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800222c:	4b53      	ldr	r3, [pc, #332]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d105      	bne.n	8002244 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002238:	4b50      	ldr	r3, [pc, #320]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e0ad      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002248:	4b4c      	ldr	r3, [pc, #304]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a4b      	ldr	r2, [pc, #300]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800224e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002254:	f7ff f98c 	bl	8001570 <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800225c:	f7ff f988 	bl	8001570 <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e09a      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800226e:	4b43      	ldr	r3, [pc, #268]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800227a:	4b40      	ldr	r3, [pc, #256]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800227c:	68da      	ldr	r2, [r3, #12]
 800227e:	4b40      	ldr	r3, [pc, #256]	; (8002380 <HAL_RCC_OscConfig+0x784>)
 8002280:	4013      	ands	r3, r2
 8002282:	687a      	ldr	r2, [r7, #4]
 8002284:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800228a:	3a01      	subs	r2, #1
 800228c:	0112      	lsls	r2, r2, #4
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002294:	0212      	lsls	r2, r2, #8
 8002296:	4311      	orrs	r1, r2
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800229c:	0852      	lsrs	r2, r2, #1
 800229e:	3a01      	subs	r2, #1
 80022a0:	0552      	lsls	r2, r2, #21
 80022a2:	4311      	orrs	r1, r2
 80022a4:	687a      	ldr	r2, [r7, #4]
 80022a6:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022a8:	0852      	lsrs	r2, r2, #1
 80022aa:	3a01      	subs	r2, #1
 80022ac:	0652      	lsls	r2, r2, #25
 80022ae:	4311      	orrs	r1, r2
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022b4:	0912      	lsrs	r2, r2, #4
 80022b6:	0452      	lsls	r2, r2, #17
 80022b8:	430a      	orrs	r2, r1
 80022ba:	4930      	ldr	r1, [pc, #192]	; (800237c <HAL_RCC_OscConfig+0x780>)
 80022bc:	4313      	orrs	r3, r2
 80022be:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022c0:	4b2e      	ldr	r3, [pc, #184]	; (800237c <HAL_RCC_OscConfig+0x780>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4a2d      	ldr	r2, [pc, #180]	; (800237c <HAL_RCC_OscConfig+0x780>)
 80022c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ca:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022cc:	4b2b      	ldr	r3, [pc, #172]	; (800237c <HAL_RCC_OscConfig+0x780>)
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	4a2a      	ldr	r2, [pc, #168]	; (800237c <HAL_RCC_OscConfig+0x780>)
 80022d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022d6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d8:	f7ff f94a 	bl	8001570 <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022e0:	f7ff f946 	bl	8001570 <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e058      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022f2:	4b22      	ldr	r3, [pc, #136]	; (800237c <HAL_RCC_OscConfig+0x780>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d0f0      	beq.n	80022e0 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022fe:	e050      	b.n	80023a2 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e04f      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002304:	4b1d      	ldr	r3, [pc, #116]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d148      	bne.n	80023a2 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002310:	4b1a      	ldr	r3, [pc, #104]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a19      	ldr	r2, [pc, #100]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002316:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800231c:	4b17      	ldr	r3, [pc, #92]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	4a16      	ldr	r2, [pc, #88]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002322:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002326:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002328:	f7ff f922 	bl	8001570 <HAL_GetTick>
 800232c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800232e:	e008      	b.n	8002342 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002330:	f7ff f91e 	bl	8001570 <HAL_GetTick>
 8002334:	4602      	mov	r2, r0
 8002336:	693b      	ldr	r3, [r7, #16]
 8002338:	1ad3      	subs	r3, r2, r3
 800233a:	2b02      	cmp	r3, #2
 800233c:	d901      	bls.n	8002342 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800233e:	2303      	movs	r3, #3
 8002340:	e030      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002342:	4b0e      	ldr	r3, [pc, #56]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800234a:	2b00      	cmp	r3, #0
 800234c:	d0f0      	beq.n	8002330 <HAL_RCC_OscConfig+0x734>
 800234e:	e028      	b.n	80023a2 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	2b0c      	cmp	r3, #12
 8002354:	d023      	beq.n	800239e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002356:	4b09      	ldr	r3, [pc, #36]	; (800237c <HAL_RCC_OscConfig+0x780>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4a08      	ldr	r2, [pc, #32]	; (800237c <HAL_RCC_OscConfig+0x780>)
 800235c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002360:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002362:	f7ff f905 	bl	8001570 <HAL_GetTick>
 8002366:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002368:	e00c      	b.n	8002384 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800236a:	f7ff f901 	bl	8001570 <HAL_GetTick>
 800236e:	4602      	mov	r2, r0
 8002370:	693b      	ldr	r3, [r7, #16]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	2b02      	cmp	r3, #2
 8002376:	d905      	bls.n	8002384 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002378:	2303      	movs	r3, #3
 800237a:	e013      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
 800237c:	40021000 	.word	0x40021000
 8002380:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	4b09      	ldr	r3, [pc, #36]	; (80023ac <HAL_RCC_OscConfig+0x7b0>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800238c:	2b00      	cmp	r3, #0
 800238e:	d1ec      	bne.n	800236a <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002390:	4b06      	ldr	r3, [pc, #24]	; (80023ac <HAL_RCC_OscConfig+0x7b0>)
 8002392:	68da      	ldr	r2, [r3, #12]
 8002394:	4905      	ldr	r1, [pc, #20]	; (80023ac <HAL_RCC_OscConfig+0x7b0>)
 8002396:	4b06      	ldr	r3, [pc, #24]	; (80023b0 <HAL_RCC_OscConfig+0x7b4>)
 8002398:	4013      	ands	r3, r2
 800239a:	60cb      	str	r3, [r1, #12]
 800239c:	e001      	b.n	80023a2 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e000      	b.n	80023a4 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3720      	adds	r7, #32
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	40021000 	.word	0x40021000
 80023b0:	feeefffc 	.word	0xfeeefffc

080023b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0e7      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b75      	ldr	r3, [pc, #468]	; (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b72      	ldr	r3, [pc, #456]	; (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4970      	ldr	r1, [pc, #448]	; (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b6e      	ldr	r3, [pc, #440]	; (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0cf      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d010      	beq.n	8002426 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	4b66      	ldr	r3, [pc, #408]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002410:	429a      	cmp	r2, r3
 8002412:	d908      	bls.n	8002426 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002414:	4b63      	ldr	r3, [pc, #396]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	4960      	ldr	r1, [pc, #384]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002422:	4313      	orrs	r3, r2
 8002424:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	2b00      	cmp	r3, #0
 8002430:	d04c      	beq.n	80024cc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b03      	cmp	r3, #3
 8002438:	d107      	bne.n	800244a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243a:	4b5a      	ldr	r3, [pc, #360]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d121      	bne.n	800248a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002446:	2301      	movs	r3, #1
 8002448:	e0a6      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	2b02      	cmp	r3, #2
 8002450:	d107      	bne.n	8002462 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002452:	4b54      	ldr	r3, [pc, #336]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d115      	bne.n	800248a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e09a      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800246a:	4b4e      	ldr	r3, [pc, #312]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0302 	and.w	r3, r3, #2
 8002472:	2b00      	cmp	r3, #0
 8002474:	d109      	bne.n	800248a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
 8002478:	e08e      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800247a:	4b4a      	ldr	r3, [pc, #296]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002482:	2b00      	cmp	r3, #0
 8002484:	d101      	bne.n	800248a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002486:	2301      	movs	r3, #1
 8002488:	e086      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800248a:	4b46      	ldr	r3, [pc, #280]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	f023 0203 	bic.w	r2, r3, #3
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	4943      	ldr	r1, [pc, #268]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002498:	4313      	orrs	r3, r2
 800249a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800249c:	f7ff f868 	bl	8001570 <HAL_GetTick>
 80024a0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024a2:	e00a      	b.n	80024ba <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024a4:	f7ff f864 	bl	8001570 <HAL_GetTick>
 80024a8:	4602      	mov	r2, r0
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	1ad3      	subs	r3, r2, r3
 80024ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d901      	bls.n	80024ba <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e06e      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ba:	4b3a      	ldr	r3, [pc, #232]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	f003 020c 	and.w	r2, r3, #12
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	009b      	lsls	r3, r3, #2
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d1eb      	bne.n	80024a4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f003 0302 	and.w	r3, r3, #2
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d010      	beq.n	80024fa <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	689a      	ldr	r2, [r3, #8]
 80024dc:	4b31      	ldr	r3, [pc, #196]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e4:	429a      	cmp	r2, r3
 80024e6:	d208      	bcs.n	80024fa <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e8:	4b2e      	ldr	r3, [pc, #184]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	492b      	ldr	r1, [pc, #172]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 80024f6:	4313      	orrs	r3, r2
 80024f8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024fa:	4b29      	ldr	r3, [pc, #164]	; (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	683a      	ldr	r2, [r7, #0]
 8002504:	429a      	cmp	r2, r3
 8002506:	d210      	bcs.n	800252a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002508:	4b25      	ldr	r3, [pc, #148]	; (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f023 0207 	bic.w	r2, r3, #7
 8002510:	4923      	ldr	r1, [pc, #140]	; (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	4313      	orrs	r3, r2
 8002516:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002518:	4b21      	ldr	r3, [pc, #132]	; (80025a0 <HAL_RCC_ClockConfig+0x1ec>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0307 	and.w	r3, r3, #7
 8002520:	683a      	ldr	r2, [r7, #0]
 8002522:	429a      	cmp	r2, r3
 8002524:	d001      	beq.n	800252a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e036      	b.n	8002598 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0304 	and.w	r3, r3, #4
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002536:	4b1b      	ldr	r3, [pc, #108]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	4918      	ldr	r1, [pc, #96]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002544:	4313      	orrs	r3, r2
 8002546:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0308 	and.w	r3, r3, #8
 8002550:	2b00      	cmp	r3, #0
 8002552:	d009      	beq.n	8002568 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002554:	4b13      	ldr	r3, [pc, #76]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	691b      	ldr	r3, [r3, #16]
 8002560:	00db      	lsls	r3, r3, #3
 8002562:	4910      	ldr	r1, [pc, #64]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002564:	4313      	orrs	r3, r2
 8002566:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002568:	f000 f824 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 800256c:	4602      	mov	r2, r0
 800256e:	4b0d      	ldr	r3, [pc, #52]	; (80025a4 <HAL_RCC_ClockConfig+0x1f0>)
 8002570:	689b      	ldr	r3, [r3, #8]
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	490b      	ldr	r1, [pc, #44]	; (80025a8 <HAL_RCC_ClockConfig+0x1f4>)
 800257a:	5ccb      	ldrb	r3, [r1, r3]
 800257c:	f003 031f 	and.w	r3, r3, #31
 8002580:	fa22 f303 	lsr.w	r3, r2, r3
 8002584:	4a09      	ldr	r2, [pc, #36]	; (80025ac <HAL_RCC_ClockConfig+0x1f8>)
 8002586:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002588:	4b09      	ldr	r3, [pc, #36]	; (80025b0 <HAL_RCC_ClockConfig+0x1fc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f7fe fdff 	bl	8001190 <HAL_InitTick>
 8002592:	4603      	mov	r3, r0
 8002594:	72fb      	strb	r3, [r7, #11]

  return status;
 8002596:	7afb      	ldrb	r3, [r7, #11]
}
 8002598:	4618      	mov	r0, r3
 800259a:	3710      	adds	r7, #16
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40022000 	.word	0x40022000
 80025a4:	40021000 	.word	0x40021000
 80025a8:	080093c0 	.word	0x080093c0
 80025ac:	20000004 	.word	0x20000004
 80025b0:	20000008 	.word	0x20000008

080025b4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025b4:	b480      	push	{r7}
 80025b6:	b089      	sub	sp, #36	; 0x24
 80025b8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ba:	2300      	movs	r3, #0
 80025bc:	61fb      	str	r3, [r7, #28]
 80025be:	2300      	movs	r3, #0
 80025c0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025c2:	4b3e      	ldr	r3, [pc, #248]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
 80025ca:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025cc:	4b3b      	ldr	r3, [pc, #236]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d005      	beq.n	80025e8 <HAL_RCC_GetSysClockFreq+0x34>
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	2b0c      	cmp	r3, #12
 80025e0:	d121      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d11e      	bne.n	8002626 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025e8:	4b34      	ldr	r3, [pc, #208]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0308 	and.w	r3, r3, #8
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d107      	bne.n	8002604 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025f4:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 80025f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025fa:	0a1b      	lsrs	r3, r3, #8
 80025fc:	f003 030f 	and.w	r3, r3, #15
 8002600:	61fb      	str	r3, [r7, #28]
 8002602:	e005      	b.n	8002610 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002604:	4b2d      	ldr	r3, [pc, #180]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	091b      	lsrs	r3, r3, #4
 800260a:	f003 030f 	and.w	r3, r3, #15
 800260e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002610:	4a2b      	ldr	r2, [pc, #172]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002612:	69fb      	ldr	r3, [r7, #28]
 8002614:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002618:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10d      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002624:	e00a      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	2b04      	cmp	r3, #4
 800262a:	d102      	bne.n	8002632 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800262c:	4b25      	ldr	r3, [pc, #148]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800262e:	61bb      	str	r3, [r7, #24]
 8002630:	e004      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	2b08      	cmp	r3, #8
 8002636:	d101      	bne.n	800263c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002638:	4b23      	ldr	r3, [pc, #140]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x114>)
 800263a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	2b0c      	cmp	r3, #12
 8002640:	d134      	bne.n	80026ac <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002642:	4b1e      	ldr	r3, [pc, #120]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	2b02      	cmp	r3, #2
 8002650:	d003      	beq.n	800265a <HAL_RCC_GetSysClockFreq+0xa6>
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	2b03      	cmp	r3, #3
 8002656:	d003      	beq.n	8002660 <HAL_RCC_GetSysClockFreq+0xac>
 8002658:	e005      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800265a:	4b1a      	ldr	r3, [pc, #104]	; (80026c4 <HAL_RCC_GetSysClockFreq+0x110>)
 800265c:	617b      	str	r3, [r7, #20]
      break;
 800265e:	e005      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002660:	4b19      	ldr	r3, [pc, #100]	; (80026c8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002662:	617b      	str	r3, [r7, #20]
      break;
 8002664:	e002      	b.n	800266c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002666:	69fb      	ldr	r3, [r7, #28]
 8002668:	617b      	str	r3, [r7, #20]
      break;
 800266a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800266c:	4b13      	ldr	r3, [pc, #76]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	091b      	lsrs	r3, r3, #4
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	3301      	adds	r3, #1
 8002678:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800267a:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	0a1b      	lsrs	r3, r3, #8
 8002680:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002684:	697a      	ldr	r2, [r7, #20]
 8002686:	fb03 f202 	mul.w	r2, r3, r2
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002690:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002692:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_RCC_GetSysClockFreq+0x108>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	0e5b      	lsrs	r3, r3, #25
 8002698:	f003 0303 	and.w	r3, r3, #3
 800269c:	3301      	adds	r3, #1
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026a2:	697a      	ldr	r2, [r7, #20]
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026aa:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026ac:	69bb      	ldr	r3, [r7, #24]
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3724      	adds	r7, #36	; 0x24
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000
 80026c0:	080093d8 	.word	0x080093d8
 80026c4:	00f42400 	.word	0x00f42400
 80026c8:	007a1200 	.word	0x007a1200

080026cc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026d0:	4b03      	ldr	r3, [pc, #12]	; (80026e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	20000004 	.word	0x20000004

080026e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026e8:	f7ff fff0 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 80026ec:	4602      	mov	r2, r0
 80026ee:	4b06      	ldr	r3, [pc, #24]	; (8002708 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026f0:	689b      	ldr	r3, [r3, #8]
 80026f2:	0a1b      	lsrs	r3, r3, #8
 80026f4:	f003 0307 	and.w	r3, r3, #7
 80026f8:	4904      	ldr	r1, [pc, #16]	; (800270c <HAL_RCC_GetPCLK1Freq+0x28>)
 80026fa:	5ccb      	ldrb	r3, [r1, r3]
 80026fc:	f003 031f 	and.w	r3, r3, #31
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40021000 	.word	0x40021000
 800270c:	080093d0 	.word	0x080093d0

08002710 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002714:	f7ff ffda 	bl	80026cc <HAL_RCC_GetHCLKFreq>
 8002718:	4602      	mov	r2, r0
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_RCC_GetPCLK2Freq+0x24>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	0adb      	lsrs	r3, r3, #11
 8002720:	f003 0307 	and.w	r3, r3, #7
 8002724:	4904      	ldr	r1, [pc, #16]	; (8002738 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002726:	5ccb      	ldrb	r3, [r1, r3]
 8002728:	f003 031f 	and.w	r3, r3, #31
 800272c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002730:	4618      	mov	r0, r3
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40021000 	.word	0x40021000
 8002738:	080093d0 	.word	0x080093d0

0800273c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	220f      	movs	r2, #15
 800274a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800274c:	4b12      	ldr	r3, [pc, #72]	; (8002798 <HAL_RCC_GetClockConfig+0x5c>)
 800274e:	689b      	ldr	r3, [r3, #8]
 8002750:	f003 0203 	and.w	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002758:	4b0f      	ldr	r3, [pc, #60]	; (8002798 <HAL_RCC_GetClockConfig+0x5c>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002764:	4b0c      	ldr	r3, [pc, #48]	; (8002798 <HAL_RCC_GetClockConfig+0x5c>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002770:	4b09      	ldr	r3, [pc, #36]	; (8002798 <HAL_RCC_GetClockConfig+0x5c>)
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	08db      	lsrs	r3, r3, #3
 8002776:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800277e:	4b07      	ldr	r3, [pc, #28]	; (800279c <HAL_RCC_GetClockConfig+0x60>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0207 	and.w	r2, r3, #7
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	601a      	str	r2, [r3, #0]
}
 800278a:	bf00      	nop
 800278c:	370c      	adds	r7, #12
 800278e:	46bd      	mov	sp, r7
 8002790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002794:	4770      	bx	lr
 8002796:	bf00      	nop
 8002798:	40021000 	.word	0x40021000
 800279c:	40022000 	.word	0x40022000

080027a0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027a8:	2300      	movs	r3, #0
 80027aa:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027ac:	4b2a      	ldr	r3, [pc, #168]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d003      	beq.n	80027c0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027b8:	f7ff f9bc 	bl	8001b34 <HAL_PWREx_GetVoltageRange>
 80027bc:	6178      	str	r0, [r7, #20]
 80027be:	e014      	b.n	80027ea <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027c0:	4b25      	ldr	r3, [pc, #148]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c4:	4a24      	ldr	r2, [pc, #144]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027ca:	6593      	str	r3, [r2, #88]	; 0x58
 80027cc:	4b22      	ldr	r3, [pc, #136]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027d8:	f7ff f9ac 	bl	8001b34 <HAL_PWREx_GetVoltageRange>
 80027dc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027de:	4b1e      	ldr	r3, [pc, #120]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e2:	4a1d      	ldr	r2, [pc, #116]	; (8002858 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027f0:	d10b      	bne.n	800280a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b80      	cmp	r3, #128	; 0x80
 80027f6:	d919      	bls.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2ba0      	cmp	r3, #160	; 0xa0
 80027fc:	d902      	bls.n	8002804 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027fe:	2302      	movs	r3, #2
 8002800:	613b      	str	r3, [r7, #16]
 8002802:	e013      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002804:	2301      	movs	r3, #1
 8002806:	613b      	str	r3, [r7, #16]
 8002808:	e010      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b80      	cmp	r3, #128	; 0x80
 800280e:	d902      	bls.n	8002816 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002810:	2303      	movs	r3, #3
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	e00a      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b80      	cmp	r3, #128	; 0x80
 800281a:	d102      	bne.n	8002822 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800281c:	2302      	movs	r3, #2
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	e004      	b.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2b70      	cmp	r3, #112	; 0x70
 8002826:	d101      	bne.n	800282c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002828:	2301      	movs	r3, #1
 800282a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800282c:	4b0b      	ldr	r3, [pc, #44]	; (800285c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f023 0207 	bic.w	r2, r3, #7
 8002834:	4909      	ldr	r1, [pc, #36]	; (800285c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800283c:	4b07      	ldr	r3, [pc, #28]	; (800285c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	693a      	ldr	r2, [r7, #16]
 8002846:	429a      	cmp	r2, r3
 8002848:	d001      	beq.n	800284e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800284a:	2301      	movs	r3, #1
 800284c:	e000      	b.n	8002850 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800284e:	2300      	movs	r3, #0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000
 800285c:	40022000 	.word	0x40022000

08002860 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b086      	sub	sp, #24
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002868:	2300      	movs	r3, #0
 800286a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800286c:	2300      	movs	r3, #0
 800286e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002878:	2b00      	cmp	r3, #0
 800287a:	d041      	beq.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002880:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002884:	d02a      	beq.n	80028dc <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002886:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800288a:	d824      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 800288c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002890:	d008      	beq.n	80028a4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002892:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002896:	d81e      	bhi.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002898:	2b00      	cmp	r3, #0
 800289a:	d00a      	beq.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x52>
 800289c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028a0:	d010      	beq.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028a2:	e018      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028a4:	4b86      	ldr	r3, [pc, #536]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	68db      	ldr	r3, [r3, #12]
 80028a8:	4a85      	ldr	r2, [pc, #532]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ae:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028b0:	e015      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	3304      	adds	r3, #4
 80028b6:	2100      	movs	r1, #0
 80028b8:	4618      	mov	r0, r3
 80028ba:	f000 fabb 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 80028be:	4603      	mov	r3, r0
 80028c0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028c2:	e00c      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	3320      	adds	r3, #32
 80028c8:	2100      	movs	r1, #0
 80028ca:	4618      	mov	r0, r3
 80028cc:	f000 fba6 	bl	800301c <RCCEx_PLLSAI2_Config>
 80028d0:	4603      	mov	r3, r0
 80028d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028d4:	e003      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	74fb      	strb	r3, [r7, #19]
      break;
 80028da:	e000      	b.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d10b      	bne.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028e4:	4b76      	ldr	r3, [pc, #472]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f2:	4973      	ldr	r1, [pc, #460]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028fa:	e001      	b.n	8002900 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028fc:	7cfb      	ldrb	r3, [r7, #19]
 80028fe:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002908:	2b00      	cmp	r3, #0
 800290a:	d041      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002910:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002914:	d02a      	beq.n	800296c <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002916:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800291a:	d824      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x106>
 800291c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002920:	d008      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002926:	d81e      	bhi.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002928:	2b00      	cmp	r3, #0
 800292a:	d00a      	beq.n	8002942 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 800292c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002930:	d010      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002932:	e018      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002934:	4b62      	ldr	r3, [pc, #392]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	4a61      	ldr	r2, [pc, #388]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800293a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800293e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002940:	e015      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	3304      	adds	r3, #4
 8002946:	2100      	movs	r1, #0
 8002948:	4618      	mov	r0, r3
 800294a:	f000 fa73 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 800294e:	4603      	mov	r3, r0
 8002950:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002952:	e00c      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3320      	adds	r3, #32
 8002958:	2100      	movs	r1, #0
 800295a:	4618      	mov	r0, r3
 800295c:	f000 fb5e 	bl	800301c <RCCEx_PLLSAI2_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002964:	e003      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002966:	2301      	movs	r3, #1
 8002968:	74fb      	strb	r3, [r7, #19]
      break;
 800296a:	e000      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 800296c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800296e:	7cfb      	ldrb	r3, [r7, #19]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d10b      	bne.n	800298c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002974:	4b52      	ldr	r3, [pc, #328]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002976:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800297a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002982:	494f      	ldr	r1, [pc, #316]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800298a:	e001      	b.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002998:	2b00      	cmp	r3, #0
 800299a:	f000 80a0 	beq.w	8002ade <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800299e:	2300      	movs	r3, #0
 80029a0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029a2:	4b47      	ldr	r3, [pc, #284]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d101      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029ae:	2301      	movs	r3, #1
 80029b0:	e000      	b.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029b2:	2300      	movs	r3, #0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d00d      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b8:	4b41      	ldr	r3, [pc, #260]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029bc:	4a40      	ldr	r2, [pc, #256]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029c2:	6593      	str	r3, [r2, #88]	; 0x58
 80029c4:	4b3e      	ldr	r3, [pc, #248]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029cc:	60bb      	str	r3, [r7, #8]
 80029ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029d0:	2301      	movs	r3, #1
 80029d2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029d4:	4b3b      	ldr	r3, [pc, #236]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a3a      	ldr	r2, [pc, #232]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029e0:	f7fe fdc6 	bl	8001570 <HAL_GetTick>
 80029e4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029e6:	e009      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e8:	f7fe fdc2 	bl	8001570 <HAL_GetTick>
 80029ec:	4602      	mov	r2, r0
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	1ad3      	subs	r3, r2, r3
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d902      	bls.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	74fb      	strb	r3, [r7, #19]
        break;
 80029fa:	e005      	b.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029fc:	4b31      	ldr	r3, [pc, #196]	; (8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d0ef      	beq.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a08:	7cfb      	ldrb	r3, [r7, #19]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d15c      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a0e:	4b2c      	ldr	r3, [pc, #176]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d01f      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d019      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a38:	4b21      	ldr	r3, [pc, #132]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a3e:	4a20      	ldr	r2, [pc, #128]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a48:	4b1d      	ldr	r3, [pc, #116]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a4e:	4a1c      	ldr	r2, [pc, #112]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a58:	4a19      	ldr	r2, [pc, #100]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	f003 0301 	and.w	r3, r3, #1
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d016      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a6a:	f7fe fd81 	bl	8001570 <HAL_GetTick>
 8002a6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a70:	e00b      	b.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a72:	f7fe fd7d 	bl	8001570 <HAL_GetTick>
 8002a76:	4602      	mov	r2, r0
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1ad3      	subs	r3, r2, r3
 8002a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d902      	bls.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a84:	2303      	movs	r3, #3
 8002a86:	74fb      	strb	r3, [r7, #19]
            break;
 8002a88:	e006      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a8a:	4b0d      	ldr	r3, [pc, #52]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d0ec      	beq.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d10c      	bne.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a9e:	4b08      	ldr	r3, [pc, #32]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aae:	4904      	ldr	r1, [pc, #16]	; (8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ab0:	4313      	orrs	r3, r2
 8002ab2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ab6:	e009      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ab8:	7cfb      	ldrb	r3, [r7, #19]
 8002aba:	74bb      	strb	r3, [r7, #18]
 8002abc:	e006      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002abe:	bf00      	nop
 8002ac0:	40021000 	.word	0x40021000
 8002ac4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac8:	7cfb      	ldrb	r3, [r7, #19]
 8002aca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002acc:	7c7b      	ldrb	r3, [r7, #17]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d105      	bne.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ad2:	4b9e      	ldr	r3, [pc, #632]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ad6:	4a9d      	ldr	r2, [pc, #628]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002adc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f003 0301 	and.w	r3, r3, #1
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00a      	beq.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002aea:	4b98      	ldr	r3, [pc, #608]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002af0:	f023 0203 	bic.w	r2, r3, #3
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af8:	4994      	ldr	r1, [pc, #592]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002afa:	4313      	orrs	r3, r2
 8002afc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0302 	and.w	r3, r3, #2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00a      	beq.n	8002b22 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b0c:	4b8f      	ldr	r3, [pc, #572]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b12:	f023 020c 	bic.w	r2, r3, #12
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b1a:	498c      	ldr	r1, [pc, #560]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00a      	beq.n	8002b44 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b2e:	4b87      	ldr	r3, [pc, #540]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3c:	4983      	ldr	r1, [pc, #524]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f003 0308 	and.w	r3, r3, #8
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b50:	4b7e      	ldr	r3, [pc, #504]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	497b      	ldr	r1, [pc, #492]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d00a      	beq.n	8002b88 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b72:	4b76      	ldr	r3, [pc, #472]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b80:	4972      	ldr	r1, [pc, #456]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b82:	4313      	orrs	r3, r2
 8002b84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d00a      	beq.n	8002baa <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b94:	4b6d      	ldr	r3, [pc, #436]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ba2:	496a      	ldr	r1, [pc, #424]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d00a      	beq.n	8002bcc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bb6:	4b65      	ldr	r3, [pc, #404]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bc4:	4961      	ldr	r1, [pc, #388]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d00a      	beq.n	8002bee <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bd8:	4b5c      	ldr	r3, [pc, #368]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002be6:	4959      	ldr	r1, [pc, #356]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be8:	4313      	orrs	r3, r2
 8002bea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bfa:	4b54      	ldr	r3, [pc, #336]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c08:	4950      	ldr	r1, [pc, #320]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00a      	beq.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c1c:	4b4b      	ldr	r3, [pc, #300]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c2a:	4948      	ldr	r1, [pc, #288]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d00a      	beq.n	8002c54 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c3e:	4b43      	ldr	r3, [pc, #268]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c4c:	493f      	ldr	r1, [pc, #252]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4e:	4313      	orrs	r3, r2
 8002c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d028      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c60:	4b3a      	ldr	r3, [pc, #232]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c6e:	4937      	ldr	r1, [pc, #220]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c70:	4313      	orrs	r3, r2
 8002c72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c7e:	d106      	bne.n	8002c8e <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c80:	4b32      	ldr	r3, [pc, #200]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	4a31      	ldr	r2, [pc, #196]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c8a:	60d3      	str	r3, [r2, #12]
 8002c8c:	e011      	b.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c96:	d10c      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3304      	adds	r3, #4
 8002c9c:	2101      	movs	r1, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f000 f8c8 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ca8:	7cfb      	ldrb	r3, [r7, #19]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d001      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002cae:	7cfb      	ldrb	r3, [r7, #19]
 8002cb0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d028      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cbe:	4b23      	ldr	r3, [pc, #140]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ccc:	491f      	ldr	r1, [pc, #124]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cdc:	d106      	bne.n	8002cec <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cde:	4b1b      	ldr	r3, [pc, #108]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce0:	68db      	ldr	r3, [r3, #12]
 8002ce2:	4a1a      	ldr	r2, [pc, #104]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ce4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce8:	60d3      	str	r3, [r2, #12]
 8002cea:	e011      	b.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cf0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cf4:	d10c      	bne.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	2101      	movs	r1, #1
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f000 f899 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 8002d02:	4603      	mov	r3, r0
 8002d04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d06:	7cfb      	ldrb	r3, [r7, #19]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d0c:	7cfb      	ldrb	r3, [r7, #19]
 8002d0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d02b      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d1c:	4b0b      	ldr	r3, [pc, #44]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2a:	4908      	ldr	r1, [pc, #32]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d3a:	d109      	bne.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d3c:	4b03      	ldr	r3, [pc, #12]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4a02      	ldr	r2, [pc, #8]	; (8002d4c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d46:	60d3      	str	r3, [r2, #12]
 8002d48:	e014      	b.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d4a:	bf00      	nop
 8002d4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d58:	d10c      	bne.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	3304      	adds	r3, #4
 8002d5e:	2101      	movs	r1, #1
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 f867 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 8002d66:	4603      	mov	r3, r0
 8002d68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d6a:	7cfb      	ldrb	r3, [r7, #19]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d001      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d70:	7cfb      	ldrb	r3, [r7, #19]
 8002d72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d02f      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d80:	4b2b      	ldr	r3, [pc, #172]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d8e:	4928      	ldr	r1, [pc, #160]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d9e:	d10d      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3304      	adds	r3, #4
 8002da4:	2102      	movs	r1, #2
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 f844 	bl	8002e34 <RCCEx_PLLSAI1_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002db0:	7cfb      	ldrb	r3, [r7, #19]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d014      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002db6:	7cfb      	ldrb	r3, [r7, #19]
 8002db8:	74bb      	strb	r3, [r7, #18]
 8002dba:	e011      	b.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	3320      	adds	r3, #32
 8002dca:	2102      	movs	r1, #2
 8002dcc:	4618      	mov	r0, r3
 8002dce:	f000 f925 	bl	800301c <RCCEx_PLLSAI2_Config>
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dd6:	7cfb      	ldrb	r3, [r7, #19]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d001      	beq.n	8002de0 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ddc:	7cfb      	ldrb	r3, [r7, #19]
 8002dde:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d00a      	beq.n	8002e02 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002dec:	4b10      	ldr	r3, [pc, #64]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002df2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002dfa:	490d      	ldr	r1, [pc, #52]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d00b      	beq.n	8002e26 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e0e:	4b08      	ldr	r3, [pc, #32]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e1e:	4904      	ldr	r1, [pc, #16]	; (8002e30 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e20:	4313      	orrs	r3, r2
 8002e22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e26:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	3718      	adds	r7, #24
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd80      	pop	{r7, pc}
 8002e30:	40021000 	.word	0x40021000

08002e34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e42:	4b75      	ldr	r3, [pc, #468]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e44:	68db      	ldr	r3, [r3, #12]
 8002e46:	f003 0303 	and.w	r3, r3, #3
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d018      	beq.n	8002e80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e4e:	4b72      	ldr	r3, [pc, #456]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	f003 0203 	and.w	r2, r3, #3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d10d      	bne.n	8002e7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
       ||
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d009      	beq.n	8002e7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e66:	4b6c      	ldr	r3, [pc, #432]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e68:	68db      	ldr	r3, [r3, #12]
 8002e6a:	091b      	lsrs	r3, r3, #4
 8002e6c:	f003 0307 	and.w	r3, r3, #7
 8002e70:	1c5a      	adds	r2, r3, #1
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685b      	ldr	r3, [r3, #4]
       ||
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d047      	beq.n	8002f0a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	73fb      	strb	r3, [r7, #15]
 8002e7e:	e044      	b.n	8002f0a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d018      	beq.n	8002eba <RCCEx_PLLSAI1_Config+0x86>
 8002e88:	2b03      	cmp	r3, #3
 8002e8a:	d825      	bhi.n	8002ed8 <RCCEx_PLLSAI1_Config+0xa4>
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d002      	beq.n	8002e96 <RCCEx_PLLSAI1_Config+0x62>
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d009      	beq.n	8002ea8 <RCCEx_PLLSAI1_Config+0x74>
 8002e94:	e020      	b.n	8002ed8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e96:	4b60      	ldr	r3, [pc, #384]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d11d      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ea6:	e01a      	b.n	8002ede <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea8:	4b5b      	ldr	r3, [pc, #364]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d116      	bne.n	8002ee2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb8:	e013      	b.n	8002ee2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eba:	4b57      	ldr	r3, [pc, #348]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d10f      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ec6:	4b54      	ldr	r3, [pc, #336]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d109      	bne.n	8002ee6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ed6:	e006      	b.n	8002ee6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ed8:	2301      	movs	r3, #1
 8002eda:	73fb      	strb	r3, [r7, #15]
      break;
 8002edc:	e004      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ede:	bf00      	nop
 8002ee0:	e002      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ee2:	bf00      	nop
 8002ee4:	e000      	b.n	8002ee8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ee6:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee8:	7bfb      	ldrb	r3, [r7, #15]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10d      	bne.n	8002f0a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002eee:	4b4a      	ldr	r3, [pc, #296]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	68db      	ldr	r3, [r3, #12]
 8002ef2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6819      	ldr	r1, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	3b01      	subs	r3, #1
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	430b      	orrs	r3, r1
 8002f04:	4944      	ldr	r1, [pc, #272]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d17d      	bne.n	800300c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f10:	4b41      	ldr	r3, [pc, #260]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a40      	ldr	r2, [pc, #256]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f16:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f1c:	f7fe fb28 	bl	8001570 <HAL_GetTick>
 8002f20:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f22:	e009      	b.n	8002f38 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f24:	f7fe fb24 	bl	8001570 <HAL_GetTick>
 8002f28:	4602      	mov	r2, r0
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	1ad3      	subs	r3, r2, r3
 8002f2e:	2b02      	cmp	r3, #2
 8002f30:	d902      	bls.n	8002f38 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	73fb      	strb	r3, [r7, #15]
        break;
 8002f36:	e005      	b.n	8002f44 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f38:	4b37      	ldr	r3, [pc, #220]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d1ef      	bne.n	8002f24 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f44:	7bfb      	ldrb	r3, [r7, #15]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d160      	bne.n	800300c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d111      	bne.n	8002f74 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f50:	4b31      	ldr	r3, [pc, #196]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f52:	691b      	ldr	r3, [r3, #16]
 8002f54:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	6892      	ldr	r2, [r2, #8]
 8002f60:	0211      	lsls	r1, r2, #8
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	0912      	lsrs	r2, r2, #4
 8002f68:	0452      	lsls	r2, r2, #17
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	492a      	ldr	r1, [pc, #168]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	4313      	orrs	r3, r2
 8002f70:	610b      	str	r3, [r1, #16]
 8002f72:	e027      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	2b01      	cmp	r3, #1
 8002f78:	d112      	bne.n	8002fa0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f7a:	4b27      	ldr	r3, [pc, #156]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f86:	687a      	ldr	r2, [r7, #4]
 8002f88:	6892      	ldr	r2, [r2, #8]
 8002f8a:	0211      	lsls	r1, r2, #8
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	6912      	ldr	r2, [r2, #16]
 8002f90:	0852      	lsrs	r2, r2, #1
 8002f92:	3a01      	subs	r2, #1
 8002f94:	0552      	lsls	r2, r2, #21
 8002f96:	430a      	orrs	r2, r1
 8002f98:	491f      	ldr	r1, [pc, #124]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	610b      	str	r3, [r1, #16]
 8002f9e:	e011      	b.n	8002fc4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fa0:	4b1d      	ldr	r3, [pc, #116]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fa8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fac:	687a      	ldr	r2, [r7, #4]
 8002fae:	6892      	ldr	r2, [r2, #8]
 8002fb0:	0211      	lsls	r1, r2, #8
 8002fb2:	687a      	ldr	r2, [r7, #4]
 8002fb4:	6952      	ldr	r2, [r2, #20]
 8002fb6:	0852      	lsrs	r2, r2, #1
 8002fb8:	3a01      	subs	r2, #1
 8002fba:	0652      	lsls	r2, r2, #25
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	4916      	ldr	r1, [pc, #88]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fc4:	4b14      	ldr	r3, [pc, #80]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4a13      	ldr	r2, [pc, #76]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd0:	f7fe face 	bl	8001570 <HAL_GetTick>
 8002fd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fd6:	e009      	b.n	8002fec <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fd8:	f7fe faca 	bl	8001570 <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	68bb      	ldr	r3, [r7, #8]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d902      	bls.n	8002fec <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	73fb      	strb	r3, [r7, #15]
          break;
 8002fea:	e005      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fec:	4b0a      	ldr	r3, [pc, #40]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0ef      	beq.n	8002fd8 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ff8:	7bfb      	ldrb	r3, [r7, #15]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ffe:	4b06      	ldr	r3, [pc, #24]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003000:	691a      	ldr	r2, [r3, #16]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	4904      	ldr	r1, [pc, #16]	; (8003018 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003008:	4313      	orrs	r3, r2
 800300a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	40021000 	.word	0x40021000

0800301c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
 8003024:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003026:	2300      	movs	r3, #0
 8003028:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800302a:	4b6a      	ldr	r3, [pc, #424]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800302c:	68db      	ldr	r3, [r3, #12]
 800302e:	f003 0303 	and.w	r3, r3, #3
 8003032:	2b00      	cmp	r3, #0
 8003034:	d018      	beq.n	8003068 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003036:	4b67      	ldr	r3, [pc, #412]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003038:	68db      	ldr	r3, [r3, #12]
 800303a:	f003 0203 	and.w	r2, r3, #3
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	429a      	cmp	r2, r3
 8003044:	d10d      	bne.n	8003062 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
       ||
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800304e:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	091b      	lsrs	r3, r3, #4
 8003054:	f003 0307 	and.w	r3, r3, #7
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
       ||
 800305e:	429a      	cmp	r2, r3
 8003060:	d047      	beq.n	80030f2 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	73fb      	strb	r3, [r7, #15]
 8003066:	e044      	b.n	80030f2 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	2b03      	cmp	r3, #3
 800306e:	d018      	beq.n	80030a2 <RCCEx_PLLSAI2_Config+0x86>
 8003070:	2b03      	cmp	r3, #3
 8003072:	d825      	bhi.n	80030c0 <RCCEx_PLLSAI2_Config+0xa4>
 8003074:	2b01      	cmp	r3, #1
 8003076:	d002      	beq.n	800307e <RCCEx_PLLSAI2_Config+0x62>
 8003078:	2b02      	cmp	r3, #2
 800307a:	d009      	beq.n	8003090 <RCCEx_PLLSAI2_Config+0x74>
 800307c:	e020      	b.n	80030c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800307e:	4b55      	ldr	r3, [pc, #340]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 0302 	and.w	r3, r3, #2
 8003086:	2b00      	cmp	r3, #0
 8003088:	d11d      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800308e:	e01a      	b.n	80030c6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003090:	4b50      	ldr	r3, [pc, #320]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003098:	2b00      	cmp	r3, #0
 800309a:	d116      	bne.n	80030ca <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a0:	e013      	b.n	80030ca <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030a2:	4b4c      	ldr	r3, [pc, #304]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d10f      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030ae:	4b49      	ldr	r3, [pc, #292]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d109      	bne.n	80030ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030be:	e006      	b.n	80030ce <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
      break;
 80030c4:	e004      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030c6:	bf00      	nop
 80030c8:	e002      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ca:	bf00      	nop
 80030cc:	e000      	b.n	80030d0 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80030d0:	7bfb      	ldrb	r3, [r7, #15]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d10d      	bne.n	80030f2 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030d6:	4b3f      	ldr	r3, [pc, #252]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6819      	ldr	r1, [r3, #0]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	3b01      	subs	r3, #1
 80030e8:	011b      	lsls	r3, r3, #4
 80030ea:	430b      	orrs	r3, r1
 80030ec:	4939      	ldr	r1, [pc, #228]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030f2:	7bfb      	ldrb	r3, [r7, #15]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d167      	bne.n	80031c8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030f8:	4b36      	ldr	r3, [pc, #216]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a35      	ldr	r2, [pc, #212]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003102:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003104:	f7fe fa34 	bl	8001570 <HAL_GetTick>
 8003108:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800310a:	e009      	b.n	8003120 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800310c:	f7fe fa30 	bl	8001570 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d902      	bls.n	8003120 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	73fb      	strb	r3, [r7, #15]
        break;
 800311e:	e005      	b.n	800312c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003120:	4b2c      	ldr	r3, [pc, #176]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003128:	2b00      	cmp	r3, #0
 800312a:	d1ef      	bne.n	800310c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800312c:	7bfb      	ldrb	r3, [r7, #15]
 800312e:	2b00      	cmp	r3, #0
 8003130:	d14a      	bne.n	80031c8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	2b00      	cmp	r3, #0
 8003136:	d111      	bne.n	800315c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003138:	4b26      	ldr	r3, [pc, #152]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800313a:	695b      	ldr	r3, [r3, #20]
 800313c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003140:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003144:	687a      	ldr	r2, [r7, #4]
 8003146:	6892      	ldr	r2, [r2, #8]
 8003148:	0211      	lsls	r1, r2, #8
 800314a:	687a      	ldr	r2, [r7, #4]
 800314c:	68d2      	ldr	r2, [r2, #12]
 800314e:	0912      	lsrs	r2, r2, #4
 8003150:	0452      	lsls	r2, r2, #17
 8003152:	430a      	orrs	r2, r1
 8003154:	491f      	ldr	r1, [pc, #124]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003156:	4313      	orrs	r3, r2
 8003158:	614b      	str	r3, [r1, #20]
 800315a:	e011      	b.n	8003180 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800315c:	4b1d      	ldr	r3, [pc, #116]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800315e:	695b      	ldr	r3, [r3, #20]
 8003160:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003164:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6892      	ldr	r2, [r2, #8]
 800316c:	0211      	lsls	r1, r2, #8
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	6912      	ldr	r2, [r2, #16]
 8003172:	0852      	lsrs	r2, r2, #1
 8003174:	3a01      	subs	r2, #1
 8003176:	0652      	lsls	r2, r2, #25
 8003178:	430a      	orrs	r2, r1
 800317a:	4916      	ldr	r1, [pc, #88]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 800317c:	4313      	orrs	r3, r2
 800317e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003180:	4b14      	ldr	r3, [pc, #80]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a13      	ldr	r2, [pc, #76]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800318a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800318c:	f7fe f9f0 	bl	8001570 <HAL_GetTick>
 8003190:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003192:	e009      	b.n	80031a8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003194:	f7fe f9ec 	bl	8001570 <HAL_GetTick>
 8003198:	4602      	mov	r2, r0
 800319a:	68bb      	ldr	r3, [r7, #8]
 800319c:	1ad3      	subs	r3, r2, r3
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d902      	bls.n	80031a8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	73fb      	strb	r3, [r7, #15]
          break;
 80031a6:	e005      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031a8:	4b0a      	ldr	r3, [pc, #40]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d0ef      	beq.n	8003194 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031b4:	7bfb      	ldrb	r3, [r7, #15]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d106      	bne.n	80031c8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031ba:	4b06      	ldr	r3, [pc, #24]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031bc:	695a      	ldr	r2, [r3, #20]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	4904      	ldr	r1, [pc, #16]	; (80031d4 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031c4:	4313      	orrs	r3, r2
 80031c6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3710      	adds	r7, #16
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	40021000 	.word	0x40021000

080031d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b082      	sub	sp, #8
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d101      	bne.n	80031ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	e049      	b.n	800327e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d106      	bne.n	8003204 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f7fd ff44 	bl	800108c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2202      	movs	r2, #2
 8003208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	3304      	adds	r3, #4
 8003214:	4619      	mov	r1, r3
 8003216:	4610      	mov	r0, r2
 8003218:	f000 f9d0 	bl	80035bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800327c:	2300      	movs	r3, #0
}
 800327e:	4618      	mov	r0, r3
 8003280:	3708      	adds	r7, #8
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d001      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e04f      	b.n	8003340 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a23      	ldr	r2, [pc, #140]	; (800334c <HAL_TIM_Base_Start_IT+0xc4>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d01d      	beq.n	80032fe <HAL_TIM_Base_Start_IT+0x76>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ca:	d018      	beq.n	80032fe <HAL_TIM_Base_Start_IT+0x76>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1f      	ldr	r2, [pc, #124]	; (8003350 <HAL_TIM_Base_Start_IT+0xc8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d013      	beq.n	80032fe <HAL_TIM_Base_Start_IT+0x76>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_TIM_Base_Start_IT+0xcc>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_TIM_Base_Start_IT+0x76>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a1c      	ldr	r2, [pc, #112]	; (8003358 <HAL_TIM_Base_Start_IT+0xd0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_TIM_Base_Start_IT+0x76>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a1b      	ldr	r2, [pc, #108]	; (800335c <HAL_TIM_Base_Start_IT+0xd4>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_TIM_Base_Start_IT+0x76>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a19      	ldr	r2, [pc, #100]	; (8003360 <HAL_TIM_Base_Start_IT+0xd8>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d115      	bne.n	800332a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689a      	ldr	r2, [r3, #8]
 8003304:	4b17      	ldr	r3, [pc, #92]	; (8003364 <HAL_TIM_Base_Start_IT+0xdc>)
 8003306:	4013      	ands	r3, r2
 8003308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b06      	cmp	r3, #6
 800330e:	d015      	beq.n	800333c <HAL_TIM_Base_Start_IT+0xb4>
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003316:	d011      	beq.n	800333c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003328:	e008      	b.n	800333c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f042 0201 	orr.w	r2, r2, #1
 8003338:	601a      	str	r2, [r3, #0]
 800333a:	e000      	b.n	800333e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800333e:	2300      	movs	r3, #0
}
 8003340:	4618      	mov	r0, r3
 8003342:	3714      	adds	r7, #20
 8003344:	46bd      	mov	sp, r7
 8003346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334a:	4770      	bx	lr
 800334c:	40012c00 	.word	0x40012c00
 8003350:	40000400 	.word	0x40000400
 8003354:	40000800 	.word	0x40000800
 8003358:	40000c00 	.word	0x40000c00
 800335c:	40013400 	.word	0x40013400
 8003360:	40014000 	.word	0x40014000
 8003364:	00010007 	.word	0x00010007

08003368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b084      	sub	sp, #16
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	68db      	ldr	r3, [r3, #12]
 8003376:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b00      	cmp	r3, #0
 8003388:	d020      	beq.n	80033cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f003 0302 	and.w	r3, r3, #2
 8003390:	2b00      	cmp	r3, #0
 8003392:	d01b      	beq.n	80033cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f06f 0202 	mvn.w	r2, #2
 800339c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2201      	movs	r2, #1
 80033a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	699b      	ldr	r3, [r3, #24]
 80033aa:	f003 0303 	and.w	r3, r3, #3
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d003      	beq.n	80033ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f8e4 	bl	8003580 <HAL_TIM_IC_CaptureCallback>
 80033b8:	e005      	b.n	80033c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f8d6 	bl	800356c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c0:	6878      	ldr	r0, [r7, #4]
 80033c2:	f000 f8e7 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2200      	movs	r2, #0
 80033ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	f003 0304 	and.w	r3, r3, #4
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d020      	beq.n	8003418 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d01b      	beq.n	8003418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0204 	mvn.w	r2, #4
 80033e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2202      	movs	r2, #2
 80033ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d003      	beq.n	8003406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f8be 	bl	8003580 <HAL_TIM_IC_CaptureCallback>
 8003404:	e005      	b.n	8003412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f8b0 	bl	800356c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f000 f8c1 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0308 	and.w	r3, r3, #8
 800341e:	2b00      	cmp	r3, #0
 8003420:	d020      	beq.n	8003464 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0308 	and.w	r3, r3, #8
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01b      	beq.n	8003464 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0208 	mvn.w	r2, #8
 8003434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2204      	movs	r2, #4
 800343a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f003 0303 	and.w	r3, r3, #3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d003      	beq.n	8003452 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f898 	bl	8003580 <HAL_TIM_IC_CaptureCallback>
 8003450:	e005      	b.n	800345e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003452:	6878      	ldr	r0, [r7, #4]
 8003454:	f000 f88a 	bl	800356c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003458:	6878      	ldr	r0, [r7, #4]
 800345a:	f000 f89b 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f003 0310 	and.w	r3, r3, #16
 800346a:	2b00      	cmp	r3, #0
 800346c:	d020      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0310 	and.w	r3, r3, #16
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01b      	beq.n	80034b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f06f 0210 	mvn.w	r2, #16
 8003480:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2208      	movs	r2, #8
 8003486:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	69db      	ldr	r3, [r3, #28]
 800348e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003492:	2b00      	cmp	r3, #0
 8003494:	d003      	beq.n	800349e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f872 	bl	8003580 <HAL_TIM_IC_CaptureCallback>
 800349c:	e005      	b.n	80034aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f000 f864 	bl	800356c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a4:	6878      	ldr	r0, [r7, #4]
 80034a6:	f000 f875 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d00c      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	f003 0301 	and.w	r3, r3, #1
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d007      	beq.n	80034d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0201 	mvn.w	r2, #1
 80034cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fd fd94 	bl	8000ffc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d00c      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d007      	beq.n	80034f8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 f906 	bl	8003704 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00c      	beq.n	800351c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003508:	2b00      	cmp	r3, #0
 800350a:	d007      	beq.n	800351c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003514:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003516:	6878      	ldr	r0, [r7, #4]
 8003518:	f000 f8fe 	bl	8003718 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800351c:	68bb      	ldr	r3, [r7, #8]
 800351e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003522:	2b00      	cmp	r3, #0
 8003524:	d00c      	beq.n	8003540 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800352c:	2b00      	cmp	r3, #0
 800352e:	d007      	beq.n	8003540 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f000 f834 	bl	80035a8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	f003 0320 	and.w	r3, r3, #32
 8003546:	2b00      	cmp	r3, #0
 8003548:	d00c      	beq.n	8003564 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	f003 0320 	and.w	r3, r3, #32
 8003550:	2b00      	cmp	r3, #0
 8003552:	d007      	beq.n	8003564 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0220 	mvn.w	r2, #32
 800355c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f8c6 	bl	80036f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003564:	bf00      	nop
 8003566:	3710      	adds	r7, #16
 8003568:	46bd      	mov	sp, r7
 800356a:	bd80      	pop	{r7, pc}

0800356c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003574:	bf00      	nop
 8003576:	370c      	adds	r7, #12
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr

08003580 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b480      	push	{r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003588:	bf00      	nop
 800358a:	370c      	adds	r7, #12
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035b0:	bf00      	nop
 80035b2:	370c      	adds	r7, #12
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr

080035bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035bc:	b480      	push	{r7}
 80035be:	b085      	sub	sp, #20
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	4a40      	ldr	r2, [pc, #256]	; (80036d0 <TIM_Base_SetConfig+0x114>)
 80035d0:	4293      	cmp	r3, r2
 80035d2:	d013      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035da:	d00f      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3d      	ldr	r2, [pc, #244]	; (80036d4 <TIM_Base_SetConfig+0x118>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d00b      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3c      	ldr	r2, [pc, #240]	; (80036d8 <TIM_Base_SetConfig+0x11c>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d007      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3b      	ldr	r2, [pc, #236]	; (80036dc <TIM_Base_SetConfig+0x120>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d003      	beq.n	80035fc <TIM_Base_SetConfig+0x40>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	4a3a      	ldr	r2, [pc, #232]	; (80036e0 <TIM_Base_SetConfig+0x124>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d108      	bne.n	800360e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003602:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	685b      	ldr	r3, [r3, #4]
 8003608:	68fa      	ldr	r2, [r7, #12]
 800360a:	4313      	orrs	r3, r2
 800360c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a2f      	ldr	r2, [pc, #188]	; (80036d0 <TIM_Base_SetConfig+0x114>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d01f      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800361c:	d01b      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2c      	ldr	r2, [pc, #176]	; (80036d4 <TIM_Base_SetConfig+0x118>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d017      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2b      	ldr	r2, [pc, #172]	; (80036d8 <TIM_Base_SetConfig+0x11c>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d013      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a2a      	ldr	r2, [pc, #168]	; (80036dc <TIM_Base_SetConfig+0x120>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00f      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <TIM_Base_SetConfig+0x124>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d00b      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a28      	ldr	r2, [pc, #160]	; (80036e4 <TIM_Base_SetConfig+0x128>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d007      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a27      	ldr	r2, [pc, #156]	; (80036e8 <TIM_Base_SetConfig+0x12c>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d003      	beq.n	8003656 <TIM_Base_SetConfig+0x9a>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a26      	ldr	r2, [pc, #152]	; (80036ec <TIM_Base_SetConfig+0x130>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d108      	bne.n	8003668 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800365c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	4313      	orrs	r3, r2
 8003666:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	4313      	orrs	r3, r2
 8003674:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	689a      	ldr	r2, [r3, #8]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681a      	ldr	r2, [r3, #0]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a10      	ldr	r2, [pc, #64]	; (80036d0 <TIM_Base_SetConfig+0x114>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00f      	beq.n	80036b4 <TIM_Base_SetConfig+0xf8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a12      	ldr	r2, [pc, #72]	; (80036e0 <TIM_Base_SetConfig+0x124>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00b      	beq.n	80036b4 <TIM_Base_SetConfig+0xf8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a11      	ldr	r2, [pc, #68]	; (80036e4 <TIM_Base_SetConfig+0x128>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <TIM_Base_SetConfig+0xf8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a10      	ldr	r2, [pc, #64]	; (80036e8 <TIM_Base_SetConfig+0x12c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_Base_SetConfig+0xf8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a0f      	ldr	r2, [pc, #60]	; (80036ec <TIM_Base_SetConfig+0x130>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d103      	bne.n	80036bc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	691a      	ldr	r2, [r3, #16]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	615a      	str	r2, [r3, #20]
}
 80036c2:	bf00      	nop
 80036c4:	3714      	adds	r7, #20
 80036c6:	46bd      	mov	sp, r7
 80036c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036cc:	4770      	bx	lr
 80036ce:	bf00      	nop
 80036d0:	40012c00 	.word	0x40012c00
 80036d4:	40000400 	.word	0x40000400
 80036d8:	40000800 	.word	0x40000800
 80036dc:	40000c00 	.word	0x40000c00
 80036e0:	40013400 	.word	0x40013400
 80036e4:	40014000 	.word	0x40014000
 80036e8:	40014400 	.word	0x40014400
 80036ec:	40014800 	.word	0x40014800

080036f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800370c:	bf00      	nop
 800370e:	370c      	adds	r7, #12
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003718:	b480      	push	{r7}
 800371a:	b083      	sub	sp, #12
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003720:	bf00      	nop
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr

0800372c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b082      	sub	sp, #8
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e040      	b.n	80037c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003742:	2b00      	cmp	r3, #0
 8003744:	d106      	bne.n	8003754 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2200      	movs	r2, #0
 800374a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f7fd fcc2 	bl	80010d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	2224      	movs	r2, #36	; 0x24
 8003758:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 0201 	bic.w	r2, r2, #1
 8003768:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800376e:	2b00      	cmp	r3, #0
 8003770:	d002      	beq.n	8003778 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 fb6a 	bl	8003e4c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 f8af 	bl	80038dc <UART_SetConfig>
 800377e:	4603      	mov	r3, r0
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	e01b      	b.n	80037c0 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685a      	ldr	r2, [r3, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003796:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	689a      	ldr	r2, [r3, #8]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f042 0201 	orr.w	r2, r2, #1
 80037b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fbe9 	bl	8003f90 <UART_CheckIdleState>
 80037be:	4603      	mov	r3, r0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3708      	adds	r7, #8
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}

080037c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b08a      	sub	sp, #40	; 0x28
 80037cc:	af02      	add	r7, sp, #8
 80037ce:	60f8      	str	r0, [r7, #12]
 80037d0:	60b9      	str	r1, [r7, #8]
 80037d2:	603b      	str	r3, [r7, #0]
 80037d4:	4613      	mov	r3, r2
 80037d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037dc:	2b20      	cmp	r3, #32
 80037de:	d178      	bne.n	80038d2 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037e0:	68bb      	ldr	r3, [r7, #8]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d002      	beq.n	80037ec <HAL_UART_Transmit+0x24>
 80037e6:	88fb      	ldrh	r3, [r7, #6]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d101      	bne.n	80037f0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	e071      	b.n	80038d4 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2200      	movs	r2, #0
 80037f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	2221      	movs	r2, #33	; 0x21
 80037fc:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037fe:	f7fd feb7 	bl	8001570 <HAL_GetTick>
 8003802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	88fa      	ldrh	r2, [r7, #6]
 8003810:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800381c:	d108      	bne.n	8003830 <HAL_UART_Transmit+0x68>
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d104      	bne.n	8003830 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	61bb      	str	r3, [r7, #24]
 800382e:	e003      	b.n	8003838 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003834:	2300      	movs	r3, #0
 8003836:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003838:	e030      	b.n	800389c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	9300      	str	r3, [sp, #0]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2200      	movs	r2, #0
 8003842:	2180      	movs	r1, #128	; 0x80
 8003844:	68f8      	ldr	r0, [r7, #12]
 8003846:	f000 fc4b 	bl	80040e0 <UART_WaitOnFlagUntilTimeout>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d004      	beq.n	800385a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	2220      	movs	r2, #32
 8003854:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e03c      	b.n	80038d4 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800385a:	69fb      	ldr	r3, [r7, #28]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d10b      	bne.n	8003878 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003860:	69bb      	ldr	r3, [r7, #24]
 8003862:	881a      	ldrh	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800386c:	b292      	uxth	r2, r2
 800386e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	3302      	adds	r3, #2
 8003874:	61bb      	str	r3, [r7, #24]
 8003876:	e008      	b.n	800388a <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	781a      	ldrb	r2, [r3, #0]
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	b292      	uxth	r2, r2
 8003882:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003884:	69fb      	ldr	r3, [r7, #28]
 8003886:	3301      	adds	r3, #1
 8003888:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003890:	b29b      	uxth	r3, r3
 8003892:	3b01      	subs	r3, #1
 8003894:	b29a      	uxth	r2, r3
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d1c8      	bne.n	800383a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	9300      	str	r3, [sp, #0]
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	2200      	movs	r2, #0
 80038b0:	2140      	movs	r1, #64	; 0x40
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	f000 fc14 	bl	80040e0 <UART_WaitOnFlagUntilTimeout>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2220      	movs	r2, #32
 80038c2:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80038c4:	2303      	movs	r3, #3
 80038c6:	e005      	b.n	80038d4 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2220      	movs	r2, #32
 80038cc:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	e000      	b.n	80038d4 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80038d2:	2302      	movs	r3, #2
  }
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3720      	adds	r7, #32
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038e0:	b08a      	sub	sp, #40	; 0x28
 80038e2:	af00      	add	r7, sp, #0
 80038e4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	689a      	ldr	r2, [r3, #8]
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	431a      	orrs	r2, r3
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	695b      	ldr	r3, [r3, #20]
 80038fa:	431a      	orrs	r2, r3
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	69db      	ldr	r3, [r3, #28]
 8003900:	4313      	orrs	r3, r2
 8003902:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4ba4      	ldr	r3, [pc, #656]	; (8003b9c <UART_SetConfig+0x2c0>)
 800390c:	4013      	ands	r3, r2
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	6812      	ldr	r2, [r2, #0]
 8003912:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003914:	430b      	orrs	r3, r1
 8003916:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	430a      	orrs	r2, r1
 800392c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	699b      	ldr	r3, [r3, #24]
 8003932:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a99      	ldr	r2, [pc, #612]	; (8003ba0 <UART_SetConfig+0x2c4>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d004      	beq.n	8003948 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003944:	4313      	orrs	r3, r2
 8003946:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003958:	430a      	orrs	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a90      	ldr	r2, [pc, #576]	; (8003ba4 <UART_SetConfig+0x2c8>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d126      	bne.n	80039b4 <UART_SetConfig+0xd8>
 8003966:	4b90      	ldr	r3, [pc, #576]	; (8003ba8 <UART_SetConfig+0x2cc>)
 8003968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800396c:	f003 0303 	and.w	r3, r3, #3
 8003970:	2b03      	cmp	r3, #3
 8003972:	d81b      	bhi.n	80039ac <UART_SetConfig+0xd0>
 8003974:	a201      	add	r2, pc, #4	; (adr r2, 800397c <UART_SetConfig+0xa0>)
 8003976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800397a:	bf00      	nop
 800397c:	0800398d 	.word	0x0800398d
 8003980:	0800399d 	.word	0x0800399d
 8003984:	08003995 	.word	0x08003995
 8003988:	080039a5 	.word	0x080039a5
 800398c:	2301      	movs	r3, #1
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003992:	e116      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003994:	2302      	movs	r3, #2
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399a:	e112      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 800399c:	2304      	movs	r3, #4
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e10e      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 80039a4:	2308      	movs	r3, #8
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e10a      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 80039ac:	2310      	movs	r3, #16
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e106      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a7c      	ldr	r2, [pc, #496]	; (8003bac <UART_SetConfig+0x2d0>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d138      	bne.n	8003a30 <UART_SetConfig+0x154>
 80039be:	4b7a      	ldr	r3, [pc, #488]	; (8003ba8 <UART_SetConfig+0x2cc>)
 80039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039c4:	f003 030c 	and.w	r3, r3, #12
 80039c8:	2b0c      	cmp	r3, #12
 80039ca:	d82d      	bhi.n	8003a28 <UART_SetConfig+0x14c>
 80039cc:	a201      	add	r2, pc, #4	; (adr r2, 80039d4 <UART_SetConfig+0xf8>)
 80039ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d2:	bf00      	nop
 80039d4:	08003a09 	.word	0x08003a09
 80039d8:	08003a29 	.word	0x08003a29
 80039dc:	08003a29 	.word	0x08003a29
 80039e0:	08003a29 	.word	0x08003a29
 80039e4:	08003a19 	.word	0x08003a19
 80039e8:	08003a29 	.word	0x08003a29
 80039ec:	08003a29 	.word	0x08003a29
 80039f0:	08003a29 	.word	0x08003a29
 80039f4:	08003a11 	.word	0x08003a11
 80039f8:	08003a29 	.word	0x08003a29
 80039fc:	08003a29 	.word	0x08003a29
 8003a00:	08003a29 	.word	0x08003a29
 8003a04:	08003a21 	.word	0x08003a21
 8003a08:	2300      	movs	r3, #0
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	e0d8      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a10:	2302      	movs	r3, #2
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e0d4      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a18:	2304      	movs	r3, #4
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e0d0      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a20:	2308      	movs	r3, #8
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e0cc      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a28:	2310      	movs	r3, #16
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e0c8      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a5e      	ldr	r2, [pc, #376]	; (8003bb0 <UART_SetConfig+0x2d4>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d125      	bne.n	8003a86 <UART_SetConfig+0x1aa>
 8003a3a:	4b5b      	ldr	r3, [pc, #364]	; (8003ba8 <UART_SetConfig+0x2cc>)
 8003a3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a44:	2b30      	cmp	r3, #48	; 0x30
 8003a46:	d016      	beq.n	8003a76 <UART_SetConfig+0x19a>
 8003a48:	2b30      	cmp	r3, #48	; 0x30
 8003a4a:	d818      	bhi.n	8003a7e <UART_SetConfig+0x1a2>
 8003a4c:	2b20      	cmp	r3, #32
 8003a4e:	d00a      	beq.n	8003a66 <UART_SetConfig+0x18a>
 8003a50:	2b20      	cmp	r3, #32
 8003a52:	d814      	bhi.n	8003a7e <UART_SetConfig+0x1a2>
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d002      	beq.n	8003a5e <UART_SetConfig+0x182>
 8003a58:	2b10      	cmp	r3, #16
 8003a5a:	d008      	beq.n	8003a6e <UART_SetConfig+0x192>
 8003a5c:	e00f      	b.n	8003a7e <UART_SetConfig+0x1a2>
 8003a5e:	2300      	movs	r3, #0
 8003a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a64:	e0ad      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a66:	2302      	movs	r3, #2
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6c:	e0a9      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a6e:	2304      	movs	r3, #4
 8003a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a74:	e0a5      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a76:	2308      	movs	r3, #8
 8003a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7c:	e0a1      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a7e:	2310      	movs	r3, #16
 8003a80:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a84:	e09d      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4a4a      	ldr	r2, [pc, #296]	; (8003bb4 <UART_SetConfig+0x2d8>)
 8003a8c:	4293      	cmp	r3, r2
 8003a8e:	d125      	bne.n	8003adc <UART_SetConfig+0x200>
 8003a90:	4b45      	ldr	r3, [pc, #276]	; (8003ba8 <UART_SetConfig+0x2cc>)
 8003a92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a9c:	d016      	beq.n	8003acc <UART_SetConfig+0x1f0>
 8003a9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003aa0:	d818      	bhi.n	8003ad4 <UART_SetConfig+0x1f8>
 8003aa2:	2b80      	cmp	r3, #128	; 0x80
 8003aa4:	d00a      	beq.n	8003abc <UART_SetConfig+0x1e0>
 8003aa6:	2b80      	cmp	r3, #128	; 0x80
 8003aa8:	d814      	bhi.n	8003ad4 <UART_SetConfig+0x1f8>
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d002      	beq.n	8003ab4 <UART_SetConfig+0x1d8>
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d008      	beq.n	8003ac4 <UART_SetConfig+0x1e8>
 8003ab2:	e00f      	b.n	8003ad4 <UART_SetConfig+0x1f8>
 8003ab4:	2300      	movs	r3, #0
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e082      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003abc:	2302      	movs	r3, #2
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac2:	e07e      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003ac4:	2304      	movs	r3, #4
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aca:	e07a      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003acc:	2308      	movs	r3, #8
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad2:	e076      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003ad4:	2310      	movs	r3, #16
 8003ad6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ada:	e072      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	4a35      	ldr	r2, [pc, #212]	; (8003bb8 <UART_SetConfig+0x2dc>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d12a      	bne.n	8003b3c <UART_SetConfig+0x260>
 8003ae6:	4b30      	ldr	r3, [pc, #192]	; (8003ba8 <UART_SetConfig+0x2cc>)
 8003ae8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003af0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af4:	d01a      	beq.n	8003b2c <UART_SetConfig+0x250>
 8003af6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003afa:	d81b      	bhi.n	8003b34 <UART_SetConfig+0x258>
 8003afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b00:	d00c      	beq.n	8003b1c <UART_SetConfig+0x240>
 8003b02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b06:	d815      	bhi.n	8003b34 <UART_SetConfig+0x258>
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <UART_SetConfig+0x238>
 8003b0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b10:	d008      	beq.n	8003b24 <UART_SetConfig+0x248>
 8003b12:	e00f      	b.n	8003b34 <UART_SetConfig+0x258>
 8003b14:	2300      	movs	r3, #0
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e052      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e04e      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b24:	2304      	movs	r3, #4
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e04a      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b2c:	2308      	movs	r3, #8
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b32:	e046      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b34:	2310      	movs	r3, #16
 8003b36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3a:	e042      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <UART_SetConfig+0x2c4>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d13a      	bne.n	8003bbc <UART_SetConfig+0x2e0>
 8003b46:	4b18      	ldr	r3, [pc, #96]	; (8003ba8 <UART_SetConfig+0x2cc>)
 8003b48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b54:	d01a      	beq.n	8003b8c <UART_SetConfig+0x2b0>
 8003b56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b5a:	d81b      	bhi.n	8003b94 <UART_SetConfig+0x2b8>
 8003b5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b60:	d00c      	beq.n	8003b7c <UART_SetConfig+0x2a0>
 8003b62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b66:	d815      	bhi.n	8003b94 <UART_SetConfig+0x2b8>
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d003      	beq.n	8003b74 <UART_SetConfig+0x298>
 8003b6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b70:	d008      	beq.n	8003b84 <UART_SetConfig+0x2a8>
 8003b72:	e00f      	b.n	8003b94 <UART_SetConfig+0x2b8>
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7a:	e022      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b82:	e01e      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b84:	2304      	movs	r3, #4
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e01a      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b8c:	2308      	movs	r3, #8
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e016      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b94:	2310      	movs	r3, #16
 8003b96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b9a:	e012      	b.n	8003bc2 <UART_SetConfig+0x2e6>
 8003b9c:	efff69f3 	.word	0xefff69f3
 8003ba0:	40008000 	.word	0x40008000
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40004400 	.word	0x40004400
 8003bb0:	40004800 	.word	0x40004800
 8003bb4:	40004c00 	.word	0x40004c00
 8003bb8:	40005000 	.word	0x40005000
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a9f      	ldr	r2, [pc, #636]	; (8003e44 <UART_SetConfig+0x568>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d17a      	bne.n	8003cc2 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bcc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	d824      	bhi.n	8003c1e <UART_SetConfig+0x342>
 8003bd4:	a201      	add	r2, pc, #4	; (adr r2, 8003bdc <UART_SetConfig+0x300>)
 8003bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bda:	bf00      	nop
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c1f 	.word	0x08003c1f
 8003be4:	08003c09 	.word	0x08003c09
 8003be8:	08003c1f 	.word	0x08003c1f
 8003bec:	08003c0f 	.word	0x08003c0f
 8003bf0:	08003c1f 	.word	0x08003c1f
 8003bf4:	08003c1f 	.word	0x08003c1f
 8003bf8:	08003c1f 	.word	0x08003c1f
 8003bfc:	08003c17 	.word	0x08003c17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c00:	f7fe fd70 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8003c04:	61f8      	str	r0, [r7, #28]
        break;
 8003c06:	e010      	b.n	8003c2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c08:	4b8f      	ldr	r3, [pc, #572]	; (8003e48 <UART_SetConfig+0x56c>)
 8003c0a:	61fb      	str	r3, [r7, #28]
        break;
 8003c0c:	e00d      	b.n	8003c2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c0e:	f7fe fcd1 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8003c12:	61f8      	str	r0, [r7, #28]
        break;
 8003c14:	e009      	b.n	8003c2a <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1a:	61fb      	str	r3, [r7, #28]
        break;
 8003c1c:	e005      	b.n	8003c2a <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c22:	2301      	movs	r3, #1
 8003c24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c28:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 80fb 	beq.w	8003e28 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	4613      	mov	r3, r2
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4413      	add	r3, r2
 8003c3c:	69fa      	ldr	r2, [r7, #28]
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d305      	bcc.n	8003c4e <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c48:	69fa      	ldr	r2, [r7, #28]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d903      	bls.n	8003c56 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c54:	e0e8      	b.n	8003e28 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c56:	69fb      	ldr	r3, [r7, #28]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	461c      	mov	r4, r3
 8003c5c:	4615      	mov	r5, r2
 8003c5e:	f04f 0200 	mov.w	r2, #0
 8003c62:	f04f 0300 	mov.w	r3, #0
 8003c66:	022b      	lsls	r3, r5, #8
 8003c68:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c6c:	0222      	lsls	r2, r4, #8
 8003c6e:	68f9      	ldr	r1, [r7, #12]
 8003c70:	6849      	ldr	r1, [r1, #4]
 8003c72:	0849      	lsrs	r1, r1, #1
 8003c74:	2000      	movs	r0, #0
 8003c76:	4688      	mov	r8, r1
 8003c78:	4681      	mov	r9, r0
 8003c7a:	eb12 0a08 	adds.w	sl, r2, r8
 8003c7e:	eb43 0b09 	adc.w	fp, r3, r9
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	603b      	str	r3, [r7, #0]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c90:	4650      	mov	r0, sl
 8003c92:	4659      	mov	r1, fp
 8003c94:	f7fc faec 	bl	8000270 <__aeabi_uldivmod>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4613      	mov	r3, r2
 8003c9e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ca6:	d308      	bcc.n	8003cba <UART_SetConfig+0x3de>
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003cae:	d204      	bcs.n	8003cba <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	60da      	str	r2, [r3, #12]
 8003cb8:	e0b6      	b.n	8003e28 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cc0:	e0b2      	b.n	8003e28 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	69db      	ldr	r3, [r3, #28]
 8003cc6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cca:	d15e      	bne.n	8003d8a <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cd0:	2b08      	cmp	r3, #8
 8003cd2:	d828      	bhi.n	8003d26 <UART_SetConfig+0x44a>
 8003cd4:	a201      	add	r2, pc, #4	; (adr r2, 8003cdc <UART_SetConfig+0x400>)
 8003cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cda:	bf00      	nop
 8003cdc:	08003d01 	.word	0x08003d01
 8003ce0:	08003d09 	.word	0x08003d09
 8003ce4:	08003d11 	.word	0x08003d11
 8003ce8:	08003d27 	.word	0x08003d27
 8003cec:	08003d17 	.word	0x08003d17
 8003cf0:	08003d27 	.word	0x08003d27
 8003cf4:	08003d27 	.word	0x08003d27
 8003cf8:	08003d27 	.word	0x08003d27
 8003cfc:	08003d1f 	.word	0x08003d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d00:	f7fe fcf0 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8003d04:	61f8      	str	r0, [r7, #28]
        break;
 8003d06:	e014      	b.n	8003d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d08:	f7fe fd02 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 8003d0c:	61f8      	str	r0, [r7, #28]
        break;
 8003d0e:	e010      	b.n	8003d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d10:	4b4d      	ldr	r3, [pc, #308]	; (8003e48 <UART_SetConfig+0x56c>)
 8003d12:	61fb      	str	r3, [r7, #28]
        break;
 8003d14:	e00d      	b.n	8003d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d16:	f7fe fc4d 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8003d1a:	61f8      	str	r0, [r7, #28]
        break;
 8003d1c:	e009      	b.n	8003d32 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d22:	61fb      	str	r3, [r7, #28]
        break;
 8003d24:	e005      	b.n	8003d32 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d30:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d32:	69fb      	ldr	r3, [r7, #28]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d077      	beq.n	8003e28 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d38:	69fb      	ldr	r3, [r7, #28]
 8003d3a:	005a      	lsls	r2, r3, #1
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	085b      	lsrs	r3, r3, #1
 8003d42:	441a      	add	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d4e:	69bb      	ldr	r3, [r7, #24]
 8003d50:	2b0f      	cmp	r3, #15
 8003d52:	d916      	bls.n	8003d82 <UART_SetConfig+0x4a6>
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d5a:	d212      	bcs.n	8003d82 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d5c:	69bb      	ldr	r3, [r7, #24]
 8003d5e:	b29b      	uxth	r3, r3
 8003d60:	f023 030f 	bic.w	r3, r3, #15
 8003d64:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	085b      	lsrs	r3, r3, #1
 8003d6a:	b29b      	uxth	r3, r3
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	8afb      	ldrh	r3, [r7, #22]
 8003d74:	4313      	orrs	r3, r2
 8003d76:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	8afa      	ldrh	r2, [r7, #22]
 8003d7e:	60da      	str	r2, [r3, #12]
 8003d80:	e052      	b.n	8003e28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d88:	e04e      	b.n	8003e28 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d8a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d8e:	2b08      	cmp	r3, #8
 8003d90:	d827      	bhi.n	8003de2 <UART_SetConfig+0x506>
 8003d92:	a201      	add	r2, pc, #4	; (adr r2, 8003d98 <UART_SetConfig+0x4bc>)
 8003d94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d98:	08003dbd 	.word	0x08003dbd
 8003d9c:	08003dc5 	.word	0x08003dc5
 8003da0:	08003dcd 	.word	0x08003dcd
 8003da4:	08003de3 	.word	0x08003de3
 8003da8:	08003dd3 	.word	0x08003dd3
 8003dac:	08003de3 	.word	0x08003de3
 8003db0:	08003de3 	.word	0x08003de3
 8003db4:	08003de3 	.word	0x08003de3
 8003db8:	08003ddb 	.word	0x08003ddb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dbc:	f7fe fc92 	bl	80026e4 <HAL_RCC_GetPCLK1Freq>
 8003dc0:	61f8      	str	r0, [r7, #28]
        break;
 8003dc2:	e014      	b.n	8003dee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dc4:	f7fe fca4 	bl	8002710 <HAL_RCC_GetPCLK2Freq>
 8003dc8:	61f8      	str	r0, [r7, #28]
        break;
 8003dca:	e010      	b.n	8003dee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dcc:	4b1e      	ldr	r3, [pc, #120]	; (8003e48 <UART_SetConfig+0x56c>)
 8003dce:	61fb      	str	r3, [r7, #28]
        break;
 8003dd0:	e00d      	b.n	8003dee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dd2:	f7fe fbef 	bl	80025b4 <HAL_RCC_GetSysClockFreq>
 8003dd6:	61f8      	str	r0, [r7, #28]
        break;
 8003dd8:	e009      	b.n	8003dee <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dde:	61fb      	str	r3, [r7, #28]
        break;
 8003de0:	e005      	b.n	8003dee <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003de6:	2301      	movs	r3, #1
 8003de8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003dec:	bf00      	nop
    }

    if (pclk != 0U)
 8003dee:	69fb      	ldr	r3, [r7, #28]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d019      	beq.n	8003e28 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	085a      	lsrs	r2, r3, #1
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	441a      	add	r2, r3
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	685b      	ldr	r3, [r3, #4]
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	2b0f      	cmp	r3, #15
 8003e0c:	d909      	bls.n	8003e22 <UART_SetConfig+0x546>
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e14:	d205      	bcs.n	8003e22 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	60da      	str	r2, [r3, #12]
 8003e20:	e002      	b.n	8003e28 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e22:	2301      	movs	r3, #1
 8003e24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2200      	movs	r2, #0
 8003e32:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e34:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e38:	4618      	mov	r0, r3
 8003e3a:	3728      	adds	r7, #40	; 0x28
 8003e3c:	46bd      	mov	sp, r7
 8003e3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e42:	bf00      	nop
 8003e44:	40008000 	.word	0x40008000
 8003e48:	00f42400 	.word	0x00f42400

08003e4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d00a      	beq.n	8003e76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	430a      	orrs	r2, r1
 8003e74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7a:	f003 0301 	and.w	r3, r3, #1
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d00a      	beq.n	8003e98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	430a      	orrs	r2, r1
 8003e96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e9c:	f003 0302 	and.w	r3, r3, #2
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d00a      	beq.n	8003eba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	430a      	orrs	r2, r1
 8003eb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	f003 0304 	and.w	r3, r3, #4
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	430a      	orrs	r2, r1
 8003eda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee0:	f003 0310 	and.w	r3, r3, #16
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	430a      	orrs	r2, r1
 8003efc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	430a      	orrs	r2, r1
 8003f1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d01a      	beq.n	8003f62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	430a      	orrs	r2, r1
 8003f40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f4a:	d10a      	bne.n	8003f62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	430a      	orrs	r2, r1
 8003f60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d00a      	beq.n	8003f84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	685b      	ldr	r3, [r3, #4]
 8003f74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	430a      	orrs	r2, r1
 8003f82:	605a      	str	r2, [r3, #4]
  }
}
 8003f84:	bf00      	nop
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b098      	sub	sp, #96	; 0x60
 8003f94:	af02      	add	r7, sp, #8
 8003f96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fa0:	f7fd fae6 	bl	8001570 <HAL_GetTick>
 8003fa4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f003 0308 	and.w	r3, r3, #8
 8003fb0:	2b08      	cmp	r3, #8
 8003fb2:	d12e      	bne.n	8004012 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fb4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb8:	9300      	str	r3, [sp, #0]
 8003fba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 f88c 	bl	80040e0 <UART_WaitOnFlagUntilTimeout>
 8003fc8:	4603      	mov	r3, r0
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d021      	beq.n	8004012 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd6:	e853 3f00 	ldrex	r3, [r3]
 8003fda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fe2:	653b      	str	r3, [r7, #80]	; 0x50
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fec:	647b      	str	r3, [r7, #68]	; 0x44
 8003fee:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ff0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ff2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ff4:	e841 2300 	strex	r3, r2, [r1]
 8003ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ffa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d1e6      	bne.n	8003fce <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2220      	movs	r2, #32
 8004004:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800400e:	2303      	movs	r3, #3
 8004010:	e062      	b.n	80040d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 0304 	and.w	r3, r3, #4
 800401c:	2b04      	cmp	r3, #4
 800401e:	d149      	bne.n	80040b4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004020:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004024:	9300      	str	r3, [sp, #0]
 8004026:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004028:	2200      	movs	r2, #0
 800402a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 f856 	bl	80040e0 <UART_WaitOnFlagUntilTimeout>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d03c      	beq.n	80040b4 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004042:	e853 3f00 	ldrex	r3, [r3]
 8004046:	623b      	str	r3, [r7, #32]
   return(result);
 8004048:	6a3b      	ldr	r3, [r7, #32]
 800404a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800404e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	461a      	mov	r2, r3
 8004056:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004058:	633b      	str	r3, [r7, #48]	; 0x30
 800405a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800405e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004060:	e841 2300 	strex	r3, r2, [r1]
 8004064:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004068:	2b00      	cmp	r3, #0
 800406a:	d1e6      	bne.n	800403a <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	3308      	adds	r3, #8
 8004072:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	60fb      	str	r3, [r7, #12]
   return(result);
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	f023 0301 	bic.w	r3, r3, #1
 8004082:	64bb      	str	r3, [r7, #72]	; 0x48
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	3308      	adds	r3, #8
 800408a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800408c:	61fa      	str	r2, [r7, #28]
 800408e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	69b9      	ldr	r1, [r7, #24]
 8004092:	69fa      	ldr	r2, [r7, #28]
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	617b      	str	r3, [r7, #20]
   return(result);
 800409a:	697b      	ldr	r3, [r7, #20]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e5      	bne.n	800406c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2220      	movs	r2, #32
 80040a4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040b0:	2303      	movs	r3, #3
 80040b2:	e011      	b.n	80040d8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2220      	movs	r2, #32
 80040b8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2220      	movs	r2, #32
 80040be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	2200      	movs	r2, #0
 80040c6:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2200      	movs	r2, #0
 80040cc:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	2200      	movs	r2, #0
 80040d2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040d6:	2300      	movs	r3, #0
}
 80040d8:	4618      	mov	r0, r3
 80040da:	3758      	adds	r7, #88	; 0x58
 80040dc:	46bd      	mov	sp, r7
 80040de:	bd80      	pop	{r7, pc}

080040e0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f0:	e049      	b.n	8004186 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f8:	d045      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fd fa39 	bl	8001570 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	69ba      	ldr	r2, [r7, #24]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <UART_WaitOnFlagUntilTimeout+0x30>
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d101      	bne.n	8004114 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004110:	2303      	movs	r3, #3
 8004112:	e048      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f003 0304 	and.w	r3, r3, #4
 800411e:	2b00      	cmp	r3, #0
 8004120:	d031      	beq.n	8004186 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	69db      	ldr	r3, [r3, #28]
 8004128:	f003 0308 	and.w	r3, r3, #8
 800412c:	2b08      	cmp	r3, #8
 800412e:	d110      	bne.n	8004152 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2208      	movs	r2, #8
 8004136:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004138:	68f8      	ldr	r0, [r7, #12]
 800413a:	f000 f838 	bl	80041ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2208      	movs	r2, #8
 8004142:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2200      	movs	r2, #0
 800414a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e029      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	69db      	ldr	r3, [r3, #28]
 8004158:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800415c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004160:	d111      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800416a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f81e 	bl	80041ae <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e00f      	b.n	80041a6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69da      	ldr	r2, [r3, #28]
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	4013      	ands	r3, r2
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	429a      	cmp	r2, r3
 8004194:	bf0c      	ite	eq
 8004196:	2301      	moveq	r3, #1
 8004198:	2300      	movne	r3, #0
 800419a:	b2db      	uxtb	r3, r3
 800419c:	461a      	mov	r2, r3
 800419e:	79fb      	ldrb	r3, [r7, #7]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	d0a6      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b095      	sub	sp, #84	; 0x54
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041be:	e853 3f00 	ldrex	r3, [r3]
 80041c2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	461a      	mov	r2, r3
 80041d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041d4:	643b      	str	r3, [r7, #64]	; 0x40
 80041d6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041da:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041dc:	e841 2300 	strex	r3, r2, [r1]
 80041e0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d1e6      	bne.n	80041b6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	3308      	adds	r3, #8
 80041ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f8:	69fb      	ldr	r3, [r7, #28]
 80041fa:	f023 0301 	bic.w	r3, r3, #1
 80041fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	3308      	adds	r3, #8
 8004206:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004208:	62fa      	str	r2, [r7, #44]	; 0x2c
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800420e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e5      	bne.n	80041e8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004220:	2b01      	cmp	r3, #1
 8004222:	d118      	bne.n	8004256 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	60bb      	str	r3, [r7, #8]
   return(result);
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	f023 0310 	bic.w	r3, r3, #16
 8004238:	647b      	str	r3, [r7, #68]	; 0x44
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	461a      	mov	r2, r3
 8004240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004242:	61bb      	str	r3, [r7, #24]
 8004244:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6979      	ldr	r1, [r7, #20]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	613b      	str	r3, [r7, #16]
   return(result);
 8004250:	693b      	ldr	r3, [r7, #16]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e6      	bne.n	8004224 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2220      	movs	r2, #32
 800425a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2200      	movs	r2, #0
 8004262:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2200      	movs	r2, #0
 8004268:	669a      	str	r2, [r3, #104]	; 0x68
}
 800426a:	bf00      	nop
 800426c:	3754      	adds	r7, #84	; 0x54
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
	...

08004278 <__NVIC_SetPriority>:
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	4603      	mov	r3, r0
 8004280:	6039      	str	r1, [r7, #0]
 8004282:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004284:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004288:	2b00      	cmp	r3, #0
 800428a:	db0a      	blt.n	80042a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	b2da      	uxtb	r2, r3
 8004290:	490c      	ldr	r1, [pc, #48]	; (80042c4 <__NVIC_SetPriority+0x4c>)
 8004292:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004296:	0112      	lsls	r2, r2, #4
 8004298:	b2d2      	uxtb	r2, r2
 800429a:	440b      	add	r3, r1
 800429c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042a0:	e00a      	b.n	80042b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	b2da      	uxtb	r2, r3
 80042a6:	4908      	ldr	r1, [pc, #32]	; (80042c8 <__NVIC_SetPriority+0x50>)
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	f003 030f 	and.w	r3, r3, #15
 80042ae:	3b04      	subs	r3, #4
 80042b0:	0112      	lsls	r2, r2, #4
 80042b2:	b2d2      	uxtb	r2, r2
 80042b4:	440b      	add	r3, r1
 80042b6:	761a      	strb	r2, [r3, #24]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr
 80042c4:	e000e100 	.word	0xe000e100
 80042c8:	e000ed00 	.word	0xe000ed00

080042cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80042d0:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <SysTick_Handler+0x1c>)
 80042d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80042d4:	f002 fc4e 	bl	8006b74 <xTaskGetSchedulerState>
 80042d8:	4603      	mov	r3, r0
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d001      	beq.n	80042e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80042de:	f003 fc1b 	bl	8007b18 <xPortSysTickHandler>
  }
}
 80042e2:	bf00      	nop
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	e000e010 	.word	0xe000e010

080042ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042ec:	b580      	push	{r7, lr}
 80042ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042f0:	2100      	movs	r1, #0
 80042f2:	f06f 0004 	mvn.w	r0, #4
 80042f6:	f7ff ffbf 	bl	8004278 <__NVIC_SetPriority>
#endif
}
 80042fa:	bf00      	nop
 80042fc:	bd80      	pop	{r7, pc}
	...

08004300 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004300:	b480      	push	{r7}
 8004302:	b083      	sub	sp, #12
 8004304:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004306:	f3ef 8305 	mrs	r3, IPSR
 800430a:	603b      	str	r3, [r7, #0]
  return(result);
 800430c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800430e:	2b00      	cmp	r3, #0
 8004310:	d003      	beq.n	800431a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004312:	f06f 0305 	mvn.w	r3, #5
 8004316:	607b      	str	r3, [r7, #4]
 8004318:	e00c      	b.n	8004334 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800431a:	4b0a      	ldr	r3, [pc, #40]	; (8004344 <osKernelInitialize+0x44>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d105      	bne.n	800432e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004322:	4b08      	ldr	r3, [pc, #32]	; (8004344 <osKernelInitialize+0x44>)
 8004324:	2201      	movs	r2, #1
 8004326:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004328:	2300      	movs	r3, #0
 800432a:	607b      	str	r3, [r7, #4]
 800432c:	e002      	b.n	8004334 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004332:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004334:	687b      	ldr	r3, [r7, #4]
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
 8004342:	bf00      	nop
 8004344:	200001f0 	.word	0x200001f0

08004348 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800434e:	f3ef 8305 	mrs	r3, IPSR
 8004352:	603b      	str	r3, [r7, #0]
  return(result);
 8004354:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004356:	2b00      	cmp	r3, #0
 8004358:	d003      	beq.n	8004362 <osKernelStart+0x1a>
    stat = osErrorISR;
 800435a:	f06f 0305 	mvn.w	r3, #5
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	e010      	b.n	8004384 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004362:	4b0b      	ldr	r3, [pc, #44]	; (8004390 <osKernelStart+0x48>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d109      	bne.n	800437e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800436a:	f7ff ffbf 	bl	80042ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800436e:	4b08      	ldr	r3, [pc, #32]	; (8004390 <osKernelStart+0x48>)
 8004370:	2202      	movs	r2, #2
 8004372:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004374:	f001 ff92 	bl	800629c <vTaskStartScheduler>
      stat = osOK;
 8004378:	2300      	movs	r3, #0
 800437a:	607b      	str	r3, [r7, #4]
 800437c:	e002      	b.n	8004384 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800437e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004382:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004384:	687b      	ldr	r3, [r7, #4]
}
 8004386:	4618      	mov	r0, r3
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	200001f0 	.word	0x200001f0

08004394 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004394:	b580      	push	{r7, lr}
 8004396:	b08e      	sub	sp, #56	; 0x38
 8004398:	af04      	add	r7, sp, #16
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043a0:	2300      	movs	r3, #0
 80043a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a4:	f3ef 8305 	mrs	r3, IPSR
 80043a8:	617b      	str	r3, [r7, #20]
  return(result);
 80043aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d17e      	bne.n	80044ae <osThreadNew+0x11a>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d07b      	beq.n	80044ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043ba:	2318      	movs	r3, #24
 80043bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043be:	2300      	movs	r3, #0
 80043c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80043c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d045      	beq.n	800445a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d002      	beq.n	80043dc <osThreadNew+0x48>
        name = attr->name;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d002      	beq.n	80043ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043ea:	69fb      	ldr	r3, [r7, #28]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d008      	beq.n	8004402 <osThreadNew+0x6e>
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	2b38      	cmp	r3, #56	; 0x38
 80043f4:	d805      	bhi.n	8004402 <osThreadNew+0x6e>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <osThreadNew+0x72>
        return (NULL);
 8004402:	2300      	movs	r3, #0
 8004404:	e054      	b.n	80044b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	089b      	lsrs	r3, r3, #2
 8004414:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	689b      	ldr	r3, [r3, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00e      	beq.n	800443c <osThreadNew+0xa8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	2ba7      	cmp	r3, #167	; 0xa7
 8004424:	d90a      	bls.n	800443c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800442a:	2b00      	cmp	r3, #0
 800442c:	d006      	beq.n	800443c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <osThreadNew+0xa8>
        mem = 1;
 8004436:	2301      	movs	r3, #1
 8004438:	61bb      	str	r3, [r7, #24]
 800443a:	e010      	b.n	800445e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d10c      	bne.n	800445e <osThreadNew+0xca>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d108      	bne.n	800445e <osThreadNew+0xca>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	691b      	ldr	r3, [r3, #16]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d104      	bne.n	800445e <osThreadNew+0xca>
          mem = 0;
 8004454:	2300      	movs	r3, #0
 8004456:	61bb      	str	r3, [r7, #24]
 8004458:	e001      	b.n	800445e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800445a:	2300      	movs	r3, #0
 800445c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d110      	bne.n	8004486 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004468:	687a      	ldr	r2, [r7, #4]
 800446a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800446c:	9202      	str	r2, [sp, #8]
 800446e:	9301      	str	r3, [sp, #4]
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	9300      	str	r3, [sp, #0]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	6a3a      	ldr	r2, [r7, #32]
 8004478:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f001 fd22 	bl	8005ec4 <xTaskCreateStatic>
 8004480:	4603      	mov	r3, r0
 8004482:	613b      	str	r3, [r7, #16]
 8004484:	e013      	b.n	80044ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004486:	69bb      	ldr	r3, [r7, #24]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d110      	bne.n	80044ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800448c:	6a3b      	ldr	r3, [r7, #32]
 800448e:	b29a      	uxth	r2, r3
 8004490:	f107 0310 	add.w	r3, r7, #16
 8004494:	9301      	str	r3, [sp, #4]
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	9300      	str	r3, [sp, #0]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800449e:	68f8      	ldr	r0, [r7, #12]
 80044a0:	f001 fd6d 	bl	8005f7e <xTaskCreate>
 80044a4:	4603      	mov	r3, r0
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d001      	beq.n	80044ae <osThreadNew+0x11a>
            hTask = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044ae:	693b      	ldr	r3, [r7, #16]
}
 80044b0:	4618      	mov	r0, r3
 80044b2:	3728      	adds	r7, #40	; 0x28
 80044b4:	46bd      	mov	sp, r7
 80044b6:	bd80      	pop	{r7, pc}

080044b8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b084      	sub	sp, #16
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044c0:	f3ef 8305 	mrs	r3, IPSR
 80044c4:	60bb      	str	r3, [r7, #8]
  return(result);
 80044c6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d003      	beq.n	80044d4 <osDelay+0x1c>
    stat = osErrorISR;
 80044cc:	f06f 0305 	mvn.w	r3, #5
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	e007      	b.n	80044e4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044d4:	2300      	movs	r3, #0
 80044d6:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d002      	beq.n	80044e4 <osDelay+0x2c>
      vTaskDelay(ticks);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f001 fea8 	bl	8006234 <vTaskDelay>
    }
  }

  return (stat);
 80044e4:	68fb      	ldr	r3, [r7, #12]
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80044ee:	b580      	push	{r7, lr}
 80044f0:	b084      	sub	sp, #16
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80044f6:	6878      	ldr	r0, [r7, #4]
 80044f8:	f003 f92b 	bl	8007752 <pvTimerGetTimerID>
 80044fc:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68fa      	ldr	r2, [r7, #12]
 800450a:	6852      	ldr	r2, [r2, #4]
 800450c:	4610      	mov	r0, r2
 800450e:	4798      	blx	r3
  }
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004518:	b580      	push	{r7, lr}
 800451a:	b08c      	sub	sp, #48	; 0x30
 800451c:	af02      	add	r7, sp, #8
 800451e:	60f8      	str	r0, [r7, #12]
 8004520:	607a      	str	r2, [r7, #4]
 8004522:	603b      	str	r3, [r7, #0]
 8004524:	460b      	mov	r3, r1
 8004526:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004528:	2300      	movs	r3, #0
 800452a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800452c:	f3ef 8305 	mrs	r3, IPSR
 8004530:	613b      	str	r3, [r7, #16]
  return(result);
 8004532:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004534:	2b00      	cmp	r3, #0
 8004536:	d163      	bne.n	8004600 <osTimerNew+0xe8>
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d060      	beq.n	8004600 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 800453e:	2008      	movs	r0, #8
 8004540:	f003 fb7a 	bl	8007c38 <pvPortMalloc>
 8004544:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d059      	beq.n	8004600 <osTimerNew+0xe8>
      callb->func = func;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	68fa      	ldr	r2, [r7, #12]
 8004550:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004558:	7afb      	ldrb	r3, [r7, #11]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d102      	bne.n	8004564 <osTimerNew+0x4c>
        reload = pdFALSE;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
 8004562:	e001      	b.n	8004568 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004564:	2301      	movs	r3, #1
 8004566:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800456c:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d01c      	beq.n	80045b2 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d002      	beq.n	8004586 <osTimerNew+0x6e>
          name = attr->name;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	689b      	ldr	r3, [r3, #8]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d006      	beq.n	800459c <osTimerNew+0x84>
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	68db      	ldr	r3, [r3, #12]
 8004592:	2b2b      	cmp	r3, #43	; 0x2b
 8004594:	d902      	bls.n	800459c <osTimerNew+0x84>
          mem = 1;
 8004596:	2301      	movs	r3, #1
 8004598:	61bb      	str	r3, [r7, #24]
 800459a:	e00c      	b.n	80045b6 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d108      	bne.n	80045b6 <osTimerNew+0x9e>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d104      	bne.n	80045b6 <osTimerNew+0x9e>
            mem = 0;
 80045ac:	2300      	movs	r3, #0
 80045ae:	61bb      	str	r3, [r7, #24]
 80045b0:	e001      	b.n	80045b6 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80045b2:	2300      	movs	r3, #0
 80045b4:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d10c      	bne.n	80045d6 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80045bc:	683b      	ldr	r3, [r7, #0]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	9301      	str	r3, [sp, #4]
 80045c2:	4b12      	ldr	r3, [pc, #72]	; (800460c <osTimerNew+0xf4>)
 80045c4:	9300      	str	r3, [sp, #0]
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	69fa      	ldr	r2, [r7, #28]
 80045ca:	2101      	movs	r1, #1
 80045cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045ce:	f002 fd18 	bl	8007002 <xTimerCreateStatic>
 80045d2:	6238      	str	r0, [r7, #32]
 80045d4:	e00b      	b.n	80045ee <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d108      	bne.n	80045ee <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80045dc:	4b0b      	ldr	r3, [pc, #44]	; (800460c <osTimerNew+0xf4>)
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	69fa      	ldr	r2, [r7, #28]
 80045e4:	2101      	movs	r1, #1
 80045e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045e8:	f002 fcea 	bl	8006fc0 <xTimerCreate>
 80045ec:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80045ee:	6a3b      	ldr	r3, [r7, #32]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d105      	bne.n	8004600 <osTimerNew+0xe8>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d002      	beq.n	8004600 <osTimerNew+0xe8>
        vPortFree (callb);
 80045fa:	6978      	ldr	r0, [r7, #20]
 80045fc:	f003 fbe8 	bl	8007dd0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004600:	6a3b      	ldr	r3, [r7, #32]
}
 8004602:	4618      	mov	r0, r3
 8004604:	3728      	adds	r7, #40	; 0x28
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	080044ef 	.word	0x080044ef

08004610 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004610:	b580      	push	{r7, lr}
 8004612:	b088      	sub	sp, #32
 8004614:	af02      	add	r7, sp, #8
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800461e:	f3ef 8305 	mrs	r3, IPSR
 8004622:	60fb      	str	r3, [r7, #12]
  return(result);
 8004624:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004626:	2b00      	cmp	r3, #0
 8004628:	d003      	beq.n	8004632 <osTimerStart+0x22>
    stat = osErrorISR;
 800462a:	f06f 0305 	mvn.w	r3, #5
 800462e:	617b      	str	r3, [r7, #20]
 8004630:	e017      	b.n	8004662 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d103      	bne.n	8004640 <osTimerStart+0x30>
    stat = osErrorParameter;
 8004638:	f06f 0303 	mvn.w	r3, #3
 800463c:	617b      	str	r3, [r7, #20]
 800463e:	e010      	b.n	8004662 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004640:	2300      	movs	r3, #0
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	2300      	movs	r3, #0
 8004646:	683a      	ldr	r2, [r7, #0]
 8004648:	2104      	movs	r1, #4
 800464a:	6938      	ldr	r0, [r7, #16]
 800464c:	f002 fd52 	bl	80070f4 <xTimerGenericCommand>
 8004650:	4603      	mov	r3, r0
 8004652:	2b01      	cmp	r3, #1
 8004654:	d102      	bne.n	800465c <osTimerStart+0x4c>
      stat = osOK;
 8004656:	2300      	movs	r3, #0
 8004658:	617b      	str	r3, [r7, #20]
 800465a:	e002      	b.n	8004662 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 800465c:	f06f 0302 	mvn.w	r3, #2
 8004660:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004662:	697b      	ldr	r3, [r7, #20]
}
 8004664:	4618      	mov	r0, r3
 8004666:	3718      	adds	r7, #24
 8004668:	46bd      	mov	sp, r7
 800466a:	bd80      	pop	{r7, pc}

0800466c <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af02      	add	r7, sp, #8
 8004672:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004678:	f3ef 8305 	mrs	r3, IPSR
 800467c:	60fb      	str	r3, [r7, #12]
  return(result);
 800467e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004680:	2b00      	cmp	r3, #0
 8004682:	d003      	beq.n	800468c <osTimerStop+0x20>
    stat = osErrorISR;
 8004684:	f06f 0305 	mvn.w	r3, #5
 8004688:	617b      	str	r3, [r7, #20]
 800468a:	e021      	b.n	80046d0 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <osTimerStop+0x2e>
    stat = osErrorParameter;
 8004692:	f06f 0303 	mvn.w	r3, #3
 8004696:	617b      	str	r3, [r7, #20]
 8004698:	e01a      	b.n	80046d0 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 800469a:	6938      	ldr	r0, [r7, #16]
 800469c:	f003 f830 	bl	8007700 <xTimerIsTimerActive>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d103      	bne.n	80046ae <osTimerStop+0x42>
      stat = osErrorResource;
 80046a6:	f06f 0302 	mvn.w	r3, #2
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e010      	b.n	80046d0 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80046ae:	2300      	movs	r3, #0
 80046b0:	9300      	str	r3, [sp, #0]
 80046b2:	2300      	movs	r3, #0
 80046b4:	2200      	movs	r2, #0
 80046b6:	2103      	movs	r1, #3
 80046b8:	6938      	ldr	r0, [r7, #16]
 80046ba:	f002 fd1b 	bl	80070f4 <xTimerGenericCommand>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d102      	bne.n	80046ca <osTimerStop+0x5e>
        stat = osOK;
 80046c4:	2300      	movs	r3, #0
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	e002      	b.n	80046d0 <osTimerStop+0x64>
      } else {
        stat = osError;
 80046ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046ce:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80046d0:	697b      	ldr	r3, [r7, #20]
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3718      	adds	r7, #24
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}

080046da <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80046da:	b580      	push	{r7, lr}
 80046dc:	b086      	sub	sp, #24
 80046de:	af00      	add	r7, sp, #0
 80046e0:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046e6:	f3ef 8305 	mrs	r3, IPSR
 80046ea:	60fb      	str	r3, [r7, #12]
  return(result);
 80046ec:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d102      	bne.n	80046f8 <osTimerIsRunning+0x1e>
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d102      	bne.n	80046fe <osTimerIsRunning+0x24>
    running = 0U;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e004      	b.n	8004708 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80046fe:	6938      	ldr	r0, [r7, #16]
 8004700:	f002 fffe 	bl	8007700 <xTimerIsTimerActive>
 8004704:	4603      	mov	r3, r0
 8004706:	617b      	str	r3, [r7, #20]
  }

  return (running);
 8004708:	697b      	ldr	r3, [r7, #20]
}
 800470a:	4618      	mov	r0, r3
 800470c:	3718      	adds	r7, #24
 800470e:	46bd      	mov	sp, r7
 8004710:	bd80      	pop	{r7, pc}

08004712 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004712:	b580      	push	{r7, lr}
 8004714:	b088      	sub	sp, #32
 8004716:	af00      	add	r7, sp, #0
 8004718:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800471a:	2300      	movs	r3, #0
 800471c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800471e:	f3ef 8305 	mrs	r3, IPSR
 8004722:	60bb      	str	r3, [r7, #8]
  return(result);
 8004724:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8004726:	2b00      	cmp	r3, #0
 8004728:	d174      	bne.n	8004814 <osMutexNew+0x102>
    if (attr != NULL) {
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d003      	beq.n	8004738 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	61bb      	str	r3, [r7, #24]
 8004736:	e001      	b.n	800473c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	f003 0301 	and.w	r3, r3, #1
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <osMutexNew+0x3a>
      rmtx = 1U;
 8004746:	2301      	movs	r3, #1
 8004748:	617b      	str	r3, [r7, #20]
 800474a:	e001      	b.n	8004750 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800474c:	2300      	movs	r3, #0
 800474e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	f003 0308 	and.w	r3, r3, #8
 8004756:	2b00      	cmp	r3, #0
 8004758:	d15c      	bne.n	8004814 <osMutexNew+0x102>
      mem = -1;
 800475a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800475e:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d015      	beq.n	8004792 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	689b      	ldr	r3, [r3, #8]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d006      	beq.n	800477c <osMutexNew+0x6a>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	68db      	ldr	r3, [r3, #12]
 8004772:	2b4f      	cmp	r3, #79	; 0x4f
 8004774:	d902      	bls.n	800477c <osMutexNew+0x6a>
          mem = 1;
 8004776:	2301      	movs	r3, #1
 8004778:	613b      	str	r3, [r7, #16]
 800477a:	e00c      	b.n	8004796 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d108      	bne.n	8004796 <osMutexNew+0x84>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	68db      	ldr	r3, [r3, #12]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d104      	bne.n	8004796 <osMutexNew+0x84>
            mem = 0;
 800478c:	2300      	movs	r3, #0
 800478e:	613b      	str	r3, [r7, #16]
 8004790:	e001      	b.n	8004796 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8004792:	2300      	movs	r3, #0
 8004794:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d112      	bne.n	80047c2 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d007      	beq.n	80047b2 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4619      	mov	r1, r3
 80047a8:	2004      	movs	r0, #4
 80047aa:	f000 fc36 	bl	800501a <xQueueCreateMutexStatic>
 80047ae:	61f8      	str	r0, [r7, #28]
 80047b0:	e016      	b.n	80047e0 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	689b      	ldr	r3, [r3, #8]
 80047b6:	4619      	mov	r1, r3
 80047b8:	2001      	movs	r0, #1
 80047ba:	f000 fc2e 	bl	800501a <xQueueCreateMutexStatic>
 80047be:	61f8      	str	r0, [r7, #28]
 80047c0:	e00e      	b.n	80047e0 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d004      	beq.n	80047d8 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80047ce:	2004      	movs	r0, #4
 80047d0:	f000 fc0b 	bl	8004fea <xQueueCreateMutex>
 80047d4:	61f8      	str	r0, [r7, #28]
 80047d6:	e003      	b.n	80047e0 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80047d8:	2001      	movs	r0, #1
 80047da:	f000 fc06 	bl	8004fea <xQueueCreateMutex>
 80047de:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d00c      	beq.n	8004800 <osMutexNew+0xee>
        if (attr != NULL) {
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <osMutexNew+0xe2>
          name = attr->name;
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	60fb      	str	r3, [r7, #12]
 80047f2:	e001      	b.n	80047f8 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80047f4:	2300      	movs	r3, #0
 80047f6:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80047f8:	68f9      	ldr	r1, [r7, #12]
 80047fa:	69f8      	ldr	r0, [r7, #28]
 80047fc:	f001 fada 	bl	8005db4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004800:	69fb      	ldr	r3, [r7, #28]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d006      	beq.n	8004814 <osMutexNew+0x102>
 8004806:	697b      	ldr	r3, [r7, #20]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800480c:	69fb      	ldr	r3, [r7, #28]
 800480e:	f043 0301 	orr.w	r3, r3, #1
 8004812:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004814:	69fb      	ldr	r3, [r7, #28]
}
 8004816:	4618      	mov	r0, r3
 8004818:	3720      	adds	r7, #32
 800481a:	46bd      	mov	sp, r7
 800481c:	bd80      	pop	{r7, pc}

0800481e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800481e:	b580      	push	{r7, lr}
 8004820:	b086      	sub	sp, #24
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f023 0301 	bic.w	r3, r3, #1
 800482e:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f003 0301 	and.w	r3, r3, #1
 8004836:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004838:	2300      	movs	r3, #0
 800483a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800483c:	f3ef 8305 	mrs	r3, IPSR
 8004840:	60bb      	str	r3, [r7, #8]
  return(result);
 8004842:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004848:	f06f 0305 	mvn.w	r3, #5
 800484c:	617b      	str	r3, [r7, #20]
 800484e:	e02c      	b.n	80048aa <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8004856:	f06f 0303 	mvn.w	r3, #3
 800485a:	617b      	str	r3, [r7, #20]
 800485c:	e025      	b.n	80048aa <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d011      	beq.n	8004888 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004864:	6839      	ldr	r1, [r7, #0]
 8004866:	6938      	ldr	r0, [r7, #16]
 8004868:	f000 fc26 	bl	80050b8 <xQueueTakeMutexRecursive>
 800486c:	4603      	mov	r3, r0
 800486e:	2b01      	cmp	r3, #1
 8004870:	d01b      	beq.n	80048aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d003      	beq.n	8004880 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004878:	f06f 0301 	mvn.w	r3, #1
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e014      	b.n	80048aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004880:	f06f 0302 	mvn.w	r3, #2
 8004884:	617b      	str	r3, [r7, #20]
 8004886:	e010      	b.n	80048aa <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004888:	6839      	ldr	r1, [r7, #0]
 800488a:	6938      	ldr	r0, [r7, #16]
 800488c:	f000 ffba 	bl	8005804 <xQueueSemaphoreTake>
 8004890:	4603      	mov	r3, r0
 8004892:	2b01      	cmp	r3, #1
 8004894:	d009      	beq.n	80048aa <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800489c:	f06f 0301 	mvn.w	r3, #1
 80048a0:	617b      	str	r3, [r7, #20]
 80048a2:	e002      	b.n	80048aa <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80048a4:	f06f 0302 	mvn.w	r3, #2
 80048a8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80048aa:	697b      	ldr	r3, [r7, #20]
}
 80048ac:	4618      	mov	r0, r3
 80048ae:	3718      	adds	r7, #24
 80048b0:	46bd      	mov	sp, r7
 80048b2:	bd80      	pop	{r7, pc}

080048b4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80048b4:	b580      	push	{r7, lr}
 80048b6:	b086      	sub	sp, #24
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f023 0301 	bic.w	r3, r3, #1
 80048c2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048d0:	f3ef 8305 	mrs	r3, IPSR
 80048d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80048d6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d003      	beq.n	80048e4 <osMutexRelease+0x30>
    stat = osErrorISR;
 80048dc:	f06f 0305 	mvn.w	r3, #5
 80048e0:	617b      	str	r3, [r7, #20]
 80048e2:	e01f      	b.n	8004924 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d103      	bne.n	80048f2 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80048ea:	f06f 0303 	mvn.w	r3, #3
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	e018      	b.n	8004924 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d009      	beq.n	800490c <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80048f8:	6938      	ldr	r0, [r7, #16]
 80048fa:	f000 fba9 	bl	8005050 <xQueueGiveMutexRecursive>
 80048fe:	4603      	mov	r3, r0
 8004900:	2b01      	cmp	r3, #1
 8004902:	d00f      	beq.n	8004924 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004904:	f06f 0302 	mvn.w	r3, #2
 8004908:	617b      	str	r3, [r7, #20]
 800490a:	e00b      	b.n	8004924 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800490c:	2300      	movs	r3, #0
 800490e:	2200      	movs	r2, #0
 8004910:	2100      	movs	r1, #0
 8004912:	6938      	ldr	r0, [r7, #16]
 8004914:	f000 fc70 	bl	80051f8 <xQueueGenericSend>
 8004918:	4603      	mov	r3, r0
 800491a:	2b01      	cmp	r3, #1
 800491c:	d002      	beq.n	8004924 <osMutexRelease+0x70>
        stat = osErrorResource;
 800491e:	f06f 0302 	mvn.w	r3, #2
 8004922:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004924:	697b      	ldr	r3, [r7, #20]
}
 8004926:	4618      	mov	r0, r3
 8004928:	3718      	adds	r7, #24
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}

0800492e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800492e:	b580      	push	{r7, lr}
 8004930:	b08a      	sub	sp, #40	; 0x28
 8004932:	af02      	add	r7, sp, #8
 8004934:	60f8      	str	r0, [r7, #12]
 8004936:	60b9      	str	r1, [r7, #8]
 8004938:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800493a:	2300      	movs	r3, #0
 800493c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800493e:	f3ef 8305 	mrs	r3, IPSR
 8004942:	613b      	str	r3, [r7, #16]
  return(result);
 8004944:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004946:	2b00      	cmp	r3, #0
 8004948:	d175      	bne.n	8004a36 <osSemaphoreNew+0x108>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d072      	beq.n	8004a36 <osSemaphoreNew+0x108>
 8004950:	68ba      	ldr	r2, [r7, #8]
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	429a      	cmp	r2, r3
 8004956:	d86e      	bhi.n	8004a36 <osSemaphoreNew+0x108>
    mem = -1;
 8004958:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800495c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d015      	beq.n	8004990 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	689b      	ldr	r3, [r3, #8]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d006      	beq.n	800497a <osSemaphoreNew+0x4c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	2b4f      	cmp	r3, #79	; 0x4f
 8004972:	d902      	bls.n	800497a <osSemaphoreNew+0x4c>
        mem = 1;
 8004974:	2301      	movs	r3, #1
 8004976:	61bb      	str	r3, [r7, #24]
 8004978:	e00c      	b.n	8004994 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d108      	bne.n	8004994 <osSemaphoreNew+0x66>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <osSemaphoreNew+0x66>
          mem = 0;
 800498a:	2300      	movs	r3, #0
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	e001      	b.n	8004994 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004990:	2300      	movs	r3, #0
 8004992:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800499a:	d04c      	beq.n	8004a36 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2b01      	cmp	r3, #1
 80049a0:	d128      	bne.n	80049f4 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d10a      	bne.n	80049be <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	2203      	movs	r2, #3
 80049ae:	9200      	str	r2, [sp, #0]
 80049b0:	2200      	movs	r2, #0
 80049b2:	2100      	movs	r1, #0
 80049b4:	2001      	movs	r0, #1
 80049b6:	f000 fa29 	bl	8004e0c <xQueueGenericCreateStatic>
 80049ba:	61f8      	str	r0, [r7, #28]
 80049bc:	e005      	b.n	80049ca <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80049be:	2203      	movs	r2, #3
 80049c0:	2100      	movs	r1, #0
 80049c2:	2001      	movs	r0, #1
 80049c4:	f000 fa9a 	bl	8004efc <xQueueGenericCreate>
 80049c8:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80049ca:	69fb      	ldr	r3, [r7, #28]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d022      	beq.n	8004a16 <osSemaphoreNew+0xe8>
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d01f      	beq.n	8004a16 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80049d6:	2300      	movs	r3, #0
 80049d8:	2200      	movs	r2, #0
 80049da:	2100      	movs	r1, #0
 80049dc:	69f8      	ldr	r0, [r7, #28]
 80049de:	f000 fc0b 	bl	80051f8 <xQueueGenericSend>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d016      	beq.n	8004a16 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80049e8:	69f8      	ldr	r0, [r7, #28]
 80049ea:	f001 f897 	bl	8005b1c <vQueueDelete>
            hSemaphore = NULL;
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	e010      	b.n	8004a16 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80049f4:	69bb      	ldr	r3, [r7, #24]
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d108      	bne.n	8004a0c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	461a      	mov	r2, r3
 8004a00:	68b9      	ldr	r1, [r7, #8]
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 fb8e 	bl	8005124 <xQueueCreateCountingSemaphoreStatic>
 8004a08:	61f8      	str	r0, [r7, #28]
 8004a0a:	e004      	b.n	8004a16 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004a0c:	68b9      	ldr	r1, [r7, #8]
 8004a0e:	68f8      	ldr	r0, [r7, #12]
 8004a10:	f000 fbbf 	bl	8005192 <xQueueCreateCountingSemaphore>
 8004a14:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d00c      	beq.n	8004a36 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d003      	beq.n	8004a2a <osSemaphoreNew+0xfc>
          name = attr->name;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e001      	b.n	8004a2e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004a2e:	6979      	ldr	r1, [r7, #20]
 8004a30:	69f8      	ldr	r0, [r7, #28]
 8004a32:	f001 f9bf 	bl	8005db4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004a36:	69fb      	ldr	r3, [r7, #28]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3720      	adds	r7, #32
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b086      	sub	sp, #24
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004a52:	693b      	ldr	r3, [r7, #16]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d103      	bne.n	8004a60 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004a58:	f06f 0303 	mvn.w	r3, #3
 8004a5c:	617b      	str	r3, [r7, #20]
 8004a5e:	e039      	b.n	8004ad4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a60:	f3ef 8305 	mrs	r3, IPSR
 8004a64:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a66:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d022      	beq.n	8004ab2 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004a72:	f06f 0303 	mvn.w	r3, #3
 8004a76:	617b      	str	r3, [r7, #20]
 8004a78:	e02c      	b.n	8004ad4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004a7e:	f107 0308 	add.w	r3, r7, #8
 8004a82:	461a      	mov	r2, r3
 8004a84:	2100      	movs	r1, #0
 8004a86:	6938      	ldr	r0, [r7, #16]
 8004a88:	f000 ffc8 	bl	8005a1c <xQueueReceiveFromISR>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b01      	cmp	r3, #1
 8004a90:	d003      	beq.n	8004a9a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004a92:	f06f 0302 	mvn.w	r3, #2
 8004a96:	617b      	str	r3, [r7, #20]
 8004a98:	e01c      	b.n	8004ad4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d019      	beq.n	8004ad4 <osSemaphoreAcquire+0x94>
 8004aa0:	4b0f      	ldr	r3, [pc, #60]	; (8004ae0 <osSemaphoreAcquire+0xa0>)
 8004aa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa6:	601a      	str	r2, [r3, #0]
 8004aa8:	f3bf 8f4f 	dsb	sy
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	e010      	b.n	8004ad4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004ab2:	6839      	ldr	r1, [r7, #0]
 8004ab4:	6938      	ldr	r0, [r7, #16]
 8004ab6:	f000 fea5 	bl	8005804 <xQueueSemaphoreTake>
 8004aba:	4603      	mov	r3, r0
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d009      	beq.n	8004ad4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004ac6:	f06f 0301 	mvn.w	r3, #1
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e002      	b.n	8004ad4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004ace:	f06f 0302 	mvn.w	r3, #2
 8004ad2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004ad4:	697b      	ldr	r3, [r7, #20]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3718      	adds	r7, #24
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
 8004ade:	bf00      	nop
 8004ae0:	e000ed04 	.word	0xe000ed04

08004ae4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b086      	sub	sp, #24
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004af0:	2300      	movs	r3, #0
 8004af2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d103      	bne.n	8004b02 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004afa:	f06f 0303 	mvn.w	r3, #3
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e02c      	b.n	8004b5c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b02:	f3ef 8305 	mrs	r3, IPSR
 8004b06:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b08:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01a      	beq.n	8004b44 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004b12:	f107 0308 	add.w	r3, r7, #8
 8004b16:	4619      	mov	r1, r3
 8004b18:	6938      	ldr	r0, [r7, #16]
 8004b1a:	f000 fd06 	bl	800552a <xQueueGiveFromISR>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d003      	beq.n	8004b2c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004b24:	f06f 0302 	mvn.w	r3, #2
 8004b28:	617b      	str	r3, [r7, #20]
 8004b2a:	e017      	b.n	8004b5c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d014      	beq.n	8004b5c <osSemaphoreRelease+0x78>
 8004b32:	4b0d      	ldr	r3, [pc, #52]	; (8004b68 <osSemaphoreRelease+0x84>)
 8004b34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	f3bf 8f4f 	dsb	sy
 8004b3e:	f3bf 8f6f 	isb	sy
 8004b42:	e00b      	b.n	8004b5c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004b44:	2300      	movs	r3, #0
 8004b46:	2200      	movs	r2, #0
 8004b48:	2100      	movs	r1, #0
 8004b4a:	6938      	ldr	r0, [r7, #16]
 8004b4c:	f000 fb54 	bl	80051f8 <xQueueGenericSend>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b01      	cmp	r3, #1
 8004b54:	d002      	beq.n	8004b5c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004b56:	f06f 0302 	mvn.w	r3, #2
 8004b5a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004b5c:	697b      	ldr	r3, [r7, #20]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}
 8004b66:	bf00      	nop
 8004b68:	e000ed04 	.word	0xe000ed04

08004b6c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b6c:	b480      	push	{r7}
 8004b6e:	b085      	sub	sp, #20
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	4a07      	ldr	r2, [pc, #28]	; (8004b98 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b7c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	4a06      	ldr	r2, [pc, #24]	; (8004b9c <vApplicationGetIdleTaskMemory+0x30>)
 8004b82:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2280      	movs	r2, #128	; 0x80
 8004b88:	601a      	str	r2, [r3, #0]
}
 8004b8a:	bf00      	nop
 8004b8c:	3714      	adds	r7, #20
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b94:	4770      	bx	lr
 8004b96:	bf00      	nop
 8004b98:	200001f4 	.word	0x200001f4
 8004b9c:	2000029c 	.word	0x2000029c

08004ba0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <vApplicationGetTimerTaskMemory+0x2c>)
 8004bb0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <vApplicationGetTimerTaskMemory+0x30>)
 8004bb6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bbe:	601a      	str	r2, [r3, #0]
}
 8004bc0:	bf00      	nop
 8004bc2:	3714      	adds	r7, #20
 8004bc4:	46bd      	mov	sp, r7
 8004bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bca:	4770      	bx	lr
 8004bcc:	2000049c 	.word	0x2000049c
 8004bd0:	20000544 	.word	0x20000544

08004bd4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bd4:	b480      	push	{r7}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	f103 0208 	add.w	r2, r3, #8
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004bec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	f103 0208 	add.w	r2, r3, #8
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	f103 0208 	add.w	r2, r3, #8
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2200      	movs	r2, #0
 8004c06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c08:	bf00      	nop
 8004c0a:	370c      	adds	r7, #12
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c14:	b480      	push	{r7}
 8004c16:	b083      	sub	sp, #12
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c22:	bf00      	nop
 8004c24:	370c      	adds	r7, #12
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr

08004c2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c2e:	b480      	push	{r7}
 8004c30:	b085      	sub	sp, #20
 8004c32:	af00      	add	r7, sp, #0
 8004c34:	6078      	str	r0, [r7, #4]
 8004c36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689a      	ldr	r2, [r3, #8]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	683a      	ldr	r2, [r7, #0]
 8004c52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	601a      	str	r2, [r3, #0]
}
 8004c6a:	bf00      	nop
 8004c6c:	3714      	adds	r7, #20
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr

08004c76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c76:	b480      	push	{r7}
 8004c78:	b085      	sub	sp, #20
 8004c7a:	af00      	add	r7, sp, #0
 8004c7c:	6078      	str	r0, [r7, #4]
 8004c7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c8c:	d103      	bne.n	8004c96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e00c      	b.n	8004cb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	3308      	adds	r3, #8
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	e002      	b.n	8004ca4 <vListInsert+0x2e>
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	60fb      	str	r3, [r7, #12]
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d2f6      	bcs.n	8004c9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	685b      	ldr	r3, [r3, #4]
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	1c5a      	adds	r2, r3, #1
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	601a      	str	r2, [r3, #0]
}
 8004cdc:	bf00      	nop
 8004cde:	3714      	adds	r7, #20
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	691b      	ldr	r3, [r3, #16]
 8004cf4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	6892      	ldr	r2, [r2, #8]
 8004cfe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	687a      	ldr	r2, [r7, #4]
 8004d06:	6852      	ldr	r2, [r2, #4]
 8004d08:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	687a      	ldr	r2, [r7, #4]
 8004d10:	429a      	cmp	r2, r3
 8004d12:	d103      	bne.n	8004d1c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	1e5a      	subs	r2, r3, #1
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3714      	adds	r7, #20
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b084      	sub	sp, #16
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d10a      	bne.n	8004d66 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d54:	f383 8811 	msr	BASEPRI, r3
 8004d58:	f3bf 8f6f 	isb	sy
 8004d5c:	f3bf 8f4f 	dsb	sy
 8004d60:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d62:	bf00      	nop
 8004d64:	e7fe      	b.n	8004d64 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d66:	f002 fe45 	bl	80079f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d72:	68f9      	ldr	r1, [r7, #12]
 8004d74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d76:	fb01 f303 	mul.w	r3, r1, r3
 8004d7a:	441a      	add	r2, r3
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d96:	3b01      	subs	r3, #1
 8004d98:	68f9      	ldr	r1, [r7, #12]
 8004d9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d9c:	fb01 f303 	mul.w	r3, r1, r3
 8004da0:	441a      	add	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	22ff      	movs	r2, #255	; 0xff
 8004daa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	22ff      	movs	r2, #255	; 0xff
 8004db2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d114      	bne.n	8004de6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d01a      	beq.n	8004dfa <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	3310      	adds	r3, #16
 8004dc8:	4618      	mov	r0, r3
 8004dca:	f001 fd01 	bl	80067d0 <xTaskRemoveFromEventList>
 8004dce:	4603      	mov	r3, r0
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d012      	beq.n	8004dfa <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	; (8004e08 <xQueueGenericReset+0xcc>)
 8004dd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	f3bf 8f4f 	dsb	sy
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	e009      	b.n	8004dfa <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	3310      	adds	r3, #16
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7ff fef2 	bl	8004bd4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3324      	adds	r3, #36	; 0x24
 8004df4:	4618      	mov	r0, r3
 8004df6:	f7ff feed 	bl	8004bd4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004dfa:	f002 fe2b 	bl	8007a54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004dfe:	2301      	movs	r3, #1
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3710      	adds	r7, #16
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08e      	sub	sp, #56	; 0x38
 8004e10:	af02      	add	r7, sp, #8
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
 8004e18:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10a      	bne.n	8004e36 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e24:	f383 8811 	msr	BASEPRI, r3
 8004e28:	f3bf 8f6f 	isb	sy
 8004e2c:	f3bf 8f4f 	dsb	sy
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e32:	bf00      	nop
 8004e34:	e7fe      	b.n	8004e34 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d10a      	bne.n	8004e52 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e40:	f383 8811 	msr	BASEPRI, r3
 8004e44:	f3bf 8f6f 	isb	sy
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e4e:	bf00      	nop
 8004e50:	e7fe      	b.n	8004e50 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d002      	beq.n	8004e5e <xQueueGenericCreateStatic+0x52>
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <xQueueGenericCreateStatic+0x56>
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e000      	b.n	8004e64 <xQueueGenericCreateStatic+0x58>
 8004e62:	2300      	movs	r3, #0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d10a      	bne.n	8004e7e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e6c:	f383 8811 	msr	BASEPRI, r3
 8004e70:	f3bf 8f6f 	isb	sy
 8004e74:	f3bf 8f4f 	dsb	sy
 8004e78:	623b      	str	r3, [r7, #32]
}
 8004e7a:	bf00      	nop
 8004e7c:	e7fe      	b.n	8004e7c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d102      	bne.n	8004e8a <xQueueGenericCreateStatic+0x7e>
 8004e84:	68bb      	ldr	r3, [r7, #8]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <xQueueGenericCreateStatic+0x82>
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e000      	b.n	8004e90 <xQueueGenericCreateStatic+0x84>
 8004e8e:	2300      	movs	r3, #0
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d10a      	bne.n	8004eaa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e98:	f383 8811 	msr	BASEPRI, r3
 8004e9c:	f3bf 8f6f 	isb	sy
 8004ea0:	f3bf 8f4f 	dsb	sy
 8004ea4:	61fb      	str	r3, [r7, #28]
}
 8004ea6:	bf00      	nop
 8004ea8:	e7fe      	b.n	8004ea8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004eaa:	2350      	movs	r3, #80	; 0x50
 8004eac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	2b50      	cmp	r3, #80	; 0x50
 8004eb2:	d00a      	beq.n	8004eca <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb8:	f383 8811 	msr	BASEPRI, r3
 8004ebc:	f3bf 8f6f 	isb	sy
 8004ec0:	f3bf 8f4f 	dsb	sy
 8004ec4:	61bb      	str	r3, [r7, #24]
}
 8004ec6:	bf00      	nop
 8004ec8:	e7fe      	b.n	8004ec8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004eca:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d00d      	beq.n	8004ef2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed8:	2201      	movs	r2, #1
 8004eda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ede:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004ee2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee4:	9300      	str	r3, [sp, #0]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	687a      	ldr	r2, [r7, #4]
 8004eea:	68b9      	ldr	r1, [r7, #8]
 8004eec:	68f8      	ldr	r0, [r7, #12]
 8004eee:	f000 f83f 	bl	8004f70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ef2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3730      	adds	r7, #48	; 0x30
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	bd80      	pop	{r7, pc}

08004efc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08a      	sub	sp, #40	; 0x28
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	4613      	mov	r3, r2
 8004f08:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d10a      	bne.n	8004f26 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f14:	f383 8811 	msr	BASEPRI, r3
 8004f18:	f3bf 8f6f 	isb	sy
 8004f1c:	f3bf 8f4f 	dsb	sy
 8004f20:	613b      	str	r3, [r7, #16]
}
 8004f22:	bf00      	nop
 8004f24:	e7fe      	b.n	8004f24 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	68ba      	ldr	r2, [r7, #8]
 8004f2a:	fb02 f303 	mul.w	r3, r2, r3
 8004f2e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f30:	69fb      	ldr	r3, [r7, #28]
 8004f32:	3350      	adds	r3, #80	; 0x50
 8004f34:	4618      	mov	r0, r3
 8004f36:	f002 fe7f 	bl	8007c38 <pvPortMalloc>
 8004f3a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f3c:	69bb      	ldr	r3, [r7, #24]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d011      	beq.n	8004f66 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	3350      	adds	r3, #80	; 0x50
 8004f4a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f54:	79fa      	ldrb	r2, [r7, #7]
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	9300      	str	r3, [sp, #0]
 8004f5a:	4613      	mov	r3, r2
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	68b9      	ldr	r1, [r7, #8]
 8004f60:	68f8      	ldr	r0, [r7, #12]
 8004f62:	f000 f805 	bl	8004f70 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f66:	69bb      	ldr	r3, [r7, #24]
	}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3720      	adds	r7, #32
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}

08004f70 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b084      	sub	sp, #16
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]
 8004f7c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d103      	bne.n	8004f8c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	601a      	str	r2, [r3, #0]
 8004f8a:	e002      	b.n	8004f92 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	68fa      	ldr	r2, [r7, #12]
 8004f96:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f9e:	2101      	movs	r1, #1
 8004fa0:	69b8      	ldr	r0, [r7, #24]
 8004fa2:	f7ff fecb 	bl	8004d3c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	78fa      	ldrb	r2, [r7, #3]
 8004faa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d00e      	beq.n	8004fe2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	2200      	movs	r2, #0
 8004fda:	2100      	movs	r1, #0
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f90b 	bl	80051f8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004fe2:	bf00      	nop
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b086      	sub	sp, #24
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	617b      	str	r3, [r7, #20]
 8004ff8:	2300      	movs	r3, #0
 8004ffa:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004ffc:	79fb      	ldrb	r3, [r7, #7]
 8004ffe:	461a      	mov	r2, r3
 8005000:	6939      	ldr	r1, [r7, #16]
 8005002:	6978      	ldr	r0, [r7, #20]
 8005004:	f7ff ff7a 	bl	8004efc <xQueueGenericCreate>
 8005008:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800500a:	68f8      	ldr	r0, [r7, #12]
 800500c:	f7ff ffd3 	bl	8004fb6 <prvInitialiseMutex>

		return xNewQueue;
 8005010:	68fb      	ldr	r3, [r7, #12]
	}
 8005012:	4618      	mov	r0, r3
 8005014:	3718      	adds	r7, #24
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800501a:	b580      	push	{r7, lr}
 800501c:	b088      	sub	sp, #32
 800501e:	af02      	add	r7, sp, #8
 8005020:	4603      	mov	r3, r0
 8005022:	6039      	str	r1, [r7, #0]
 8005024:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005026:	2301      	movs	r3, #1
 8005028:	617b      	str	r3, [r7, #20]
 800502a:	2300      	movs	r3, #0
 800502c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	9300      	str	r3, [sp, #0]
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	2200      	movs	r2, #0
 8005036:	6939      	ldr	r1, [r7, #16]
 8005038:	6978      	ldr	r0, [r7, #20]
 800503a:	f7ff fee7 	bl	8004e0c <xQueueGenericCreateStatic>
 800503e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005040:	68f8      	ldr	r0, [r7, #12]
 8005042:	f7ff ffb8 	bl	8004fb6 <prvInitialiseMutex>

		return xNewQueue;
 8005046:	68fb      	ldr	r3, [r7, #12]
	}
 8005048:	4618      	mov	r0, r3
 800504a:	3718      	adds	r7, #24
 800504c:	46bd      	mov	sp, r7
 800504e:	bd80      	pop	{r7, pc}

08005050 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005050:	b590      	push	{r4, r7, lr}
 8005052:	b087      	sub	sp, #28
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60fb      	str	r3, [r7, #12]
}
 8005074:	bf00      	nop
 8005076:	e7fe      	b.n	8005076 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	689c      	ldr	r4, [r3, #8]
 800507c:	f001 fd6a 	bl	8006b54 <xTaskGetCurrentTaskHandle>
 8005080:	4603      	mov	r3, r0
 8005082:	429c      	cmp	r4, r3
 8005084:	d111      	bne.n	80050aa <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	68db      	ldr	r3, [r3, #12]
 800508a:	1e5a      	subs	r2, r3, #1
 800508c:	693b      	ldr	r3, [r7, #16]
 800508e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	68db      	ldr	r3, [r3, #12]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d105      	bne.n	80050a4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005098:	2300      	movs	r3, #0
 800509a:	2200      	movs	r2, #0
 800509c:	2100      	movs	r1, #0
 800509e:	6938      	ldr	r0, [r7, #16]
 80050a0:	f000 f8aa 	bl	80051f8 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80050a4:	2301      	movs	r3, #1
 80050a6:	617b      	str	r3, [r7, #20]
 80050a8:	e001      	b.n	80050ae <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80050aa:	2300      	movs	r3, #0
 80050ac:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80050ae:	697b      	ldr	r3, [r7, #20]
	}
 80050b0:	4618      	mov	r0, r3
 80050b2:	371c      	adds	r7, #28
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd90      	pop	{r4, r7, pc}

080050b8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80050b8:	b590      	push	{r4, r7, lr}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
 80050c0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80050c6:	693b      	ldr	r3, [r7, #16]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	60fb      	str	r3, [r7, #12]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80050e2:	693b      	ldr	r3, [r7, #16]
 80050e4:	689c      	ldr	r4, [r3, #8]
 80050e6:	f001 fd35 	bl	8006b54 <xTaskGetCurrentTaskHandle>
 80050ea:	4603      	mov	r3, r0
 80050ec:	429c      	cmp	r4, r3
 80050ee:	d107      	bne.n	8005100 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	68db      	ldr	r3, [r3, #12]
 80050f4:	1c5a      	adds	r2, r3, #1
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80050fa:	2301      	movs	r3, #1
 80050fc:	617b      	str	r3, [r7, #20]
 80050fe:	e00c      	b.n	800511a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005100:	6839      	ldr	r1, [r7, #0]
 8005102:	6938      	ldr	r0, [r7, #16]
 8005104:	f000 fb7e 	bl	8005804 <xQueueSemaphoreTake>
 8005108:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d004      	beq.n	800511a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800511a:	697b      	ldr	r3, [r7, #20]
	}
 800511c:	4618      	mov	r0, r3
 800511e:	371c      	adds	r7, #28
 8005120:	46bd      	mov	sp, r7
 8005122:	bd90      	pop	{r4, r7, pc}

08005124 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005124:	b580      	push	{r7, lr}
 8005126:	b08a      	sub	sp, #40	; 0x28
 8005128:	af02      	add	r7, sp, #8
 800512a:	60f8      	str	r0, [r7, #12]
 800512c:	60b9      	str	r1, [r7, #8]
 800512e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d10a      	bne.n	800514c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8005136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800513a:	f383 8811 	msr	BASEPRI, r3
 800513e:	f3bf 8f6f 	isb	sy
 8005142:	f3bf 8f4f 	dsb	sy
 8005146:	61bb      	str	r3, [r7, #24]
}
 8005148:	bf00      	nop
 800514a:	e7fe      	b.n	800514a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800514c:	68ba      	ldr	r2, [r7, #8]
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	429a      	cmp	r2, r3
 8005152:	d90a      	bls.n	800516a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005158:	f383 8811 	msr	BASEPRI, r3
 800515c:	f3bf 8f6f 	isb	sy
 8005160:	f3bf 8f4f 	dsb	sy
 8005164:	617b      	str	r3, [r7, #20]
}
 8005166:	bf00      	nop
 8005168:	e7fe      	b.n	8005168 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800516a:	2302      	movs	r3, #2
 800516c:	9300      	str	r3, [sp, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	2100      	movs	r1, #0
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7ff fe49 	bl	8004e0c <xQueueGenericCreateStatic>
 800517a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800517c:	69fb      	ldr	r3, [r7, #28]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d002      	beq.n	8005188 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8005182:	69fb      	ldr	r3, [r7, #28]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005188:	69fb      	ldr	r3, [r7, #28]
	}
 800518a:	4618      	mov	r0, r3
 800518c:	3720      	adds	r7, #32
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}

08005192 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8005192:	b580      	push	{r7, lr}
 8005194:	b086      	sub	sp, #24
 8005196:	af00      	add	r7, sp, #0
 8005198:	6078      	str	r0, [r7, #4]
 800519a:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10a      	bne.n	80051b8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80051a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a6:	f383 8811 	msr	BASEPRI, r3
 80051aa:	f3bf 8f6f 	isb	sy
 80051ae:	f3bf 8f4f 	dsb	sy
 80051b2:	613b      	str	r3, [r7, #16]
}
 80051b4:	bf00      	nop
 80051b6:	e7fe      	b.n	80051b6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d90a      	bls.n	80051d6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	60fb      	str	r3, [r7, #12]
}
 80051d2:	bf00      	nop
 80051d4:	e7fe      	b.n	80051d4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80051d6:	2202      	movs	r2, #2
 80051d8:	2100      	movs	r1, #0
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff fe8e 	bl	8004efc <xQueueGenericCreate>
 80051e0:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80051e2:	697b      	ldr	r3, [r7, #20]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d002      	beq.n	80051ee <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	683a      	ldr	r2, [r7, #0]
 80051ec:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80051ee:	697b      	ldr	r3, [r7, #20]
	}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3718      	adds	r7, #24
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}

080051f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b08e      	sub	sp, #56	; 0x38
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	60f8      	str	r0, [r7, #12]
 8005200:	60b9      	str	r1, [r7, #8]
 8005202:	607a      	str	r2, [r7, #4]
 8005204:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005206:	2300      	movs	r3, #0
 8005208:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800520e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xQueueGenericSend+0x32>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d103      	bne.n	8005238 <xQueueGenericSend+0x40>
 8005230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	2b00      	cmp	r3, #0
 8005236:	d101      	bne.n	800523c <xQueueGenericSend+0x44>
 8005238:	2301      	movs	r3, #1
 800523a:	e000      	b.n	800523e <xQueueGenericSend+0x46>
 800523c:	2300      	movs	r3, #0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <xQueueGenericSend+0x60>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005258:	683b      	ldr	r3, [r7, #0]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d103      	bne.n	8005266 <xQueueGenericSend+0x6e>
 800525e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005260:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005262:	2b01      	cmp	r3, #1
 8005264:	d101      	bne.n	800526a <xQueueGenericSend+0x72>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueGenericSend+0x74>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueGenericSend+0x8e>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	623b      	str	r3, [r7, #32]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005286:	f001 fc75 	bl	8006b74 <xTaskGetSchedulerState>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <xQueueGenericSend+0x9e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <xQueueGenericSend+0xa2>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <xQueueGenericSend+0xa4>
 800529a:	2300      	movs	r3, #0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61fb      	str	r3, [r7, #28]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052b6:	f002 fb9d 	bl	80079f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052c2:	429a      	cmp	r2, r3
 80052c4:	d302      	bcc.n	80052cc <xQueueGenericSend+0xd4>
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d129      	bne.n	8005320 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	68b9      	ldr	r1, [r7, #8]
 80052d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052d2:	f000 fc5e 	bl	8005b92 <prvCopyDataToQueue>
 80052d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d010      	beq.n	8005302 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	4618      	mov	r0, r3
 80052e6:	f001 fa73 	bl	80067d0 <xTaskRemoveFromEventList>
 80052ea:	4603      	mov	r3, r0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d013      	beq.n	8005318 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052f0:	4b3f      	ldr	r3, [pc, #252]	; (80053f0 <xQueueGenericSend+0x1f8>)
 80052f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f6:	601a      	str	r2, [r3, #0]
 80052f8:	f3bf 8f4f 	dsb	sy
 80052fc:	f3bf 8f6f 	isb	sy
 8005300:	e00a      	b.n	8005318 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005304:	2b00      	cmp	r3, #0
 8005306:	d007      	beq.n	8005318 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005308:	4b39      	ldr	r3, [pc, #228]	; (80053f0 <xQueueGenericSend+0x1f8>)
 800530a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800530e:	601a      	str	r2, [r3, #0]
 8005310:	f3bf 8f4f 	dsb	sy
 8005314:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005318:	f002 fb9c 	bl	8007a54 <vPortExitCritical>
				return pdPASS;
 800531c:	2301      	movs	r3, #1
 800531e:	e063      	b.n	80053e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d103      	bne.n	800532e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005326:	f002 fb95 	bl	8007a54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800532a:	2300      	movs	r3, #0
 800532c:	e05c      	b.n	80053e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800532e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005330:	2b00      	cmp	r3, #0
 8005332:	d106      	bne.n	8005342 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005334:	f107 0314 	add.w	r3, r7, #20
 8005338:	4618      	mov	r0, r3
 800533a:	f001 faad 	bl	8006898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800533e:	2301      	movs	r3, #1
 8005340:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005342:	f002 fb87 	bl	8007a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005346:	f001 f819 	bl	800637c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800534a:	f002 fb53 	bl	80079f4 <vPortEnterCritical>
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005354:	b25b      	sxtb	r3, r3
 8005356:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800535a:	d103      	bne.n	8005364 <xQueueGenericSend+0x16c>
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	2200      	movs	r2, #0
 8005360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800536a:	b25b      	sxtb	r3, r3
 800536c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005370:	d103      	bne.n	800537a <xQueueGenericSend+0x182>
 8005372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005374:	2200      	movs	r2, #0
 8005376:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800537a:	f002 fb6b 	bl	8007a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800537e:	1d3a      	adds	r2, r7, #4
 8005380:	f107 0314 	add.w	r3, r7, #20
 8005384:	4611      	mov	r1, r2
 8005386:	4618      	mov	r0, r3
 8005388:	f001 fa9c 	bl	80068c4 <xTaskCheckForTimeOut>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d124      	bne.n	80053dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005392:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005394:	f000 fcf5 	bl	8005d82 <prvIsQueueFull>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d018      	beq.n	80053d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	3310      	adds	r3, #16
 80053a2:	687a      	ldr	r2, [r7, #4]
 80053a4:	4611      	mov	r1, r2
 80053a6:	4618      	mov	r0, r3
 80053a8:	f001 f9c2 	bl	8006730 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ae:	f000 fc80 	bl	8005cb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053b2:	f000 fff1 	bl	8006398 <xTaskResumeAll>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	f47f af7c 	bne.w	80052b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053be:	4b0c      	ldr	r3, [pc, #48]	; (80053f0 <xQueueGenericSend+0x1f8>)
 80053c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053c4:	601a      	str	r2, [r3, #0]
 80053c6:	f3bf 8f4f 	dsb	sy
 80053ca:	f3bf 8f6f 	isb	sy
 80053ce:	e772      	b.n	80052b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d2:	f000 fc6e 	bl	8005cb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053d6:	f000 ffdf 	bl	8006398 <xTaskResumeAll>
 80053da:	e76c      	b.n	80052b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053de:	f000 fc68 	bl	8005cb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053e2:	f000 ffd9 	bl	8006398 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3738      	adds	r7, #56	; 0x38
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}
 80053f0:	e000ed04 	.word	0xe000ed04

080053f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b090      	sub	sp, #64	; 0x40
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	60f8      	str	r0, [r7, #12]
 80053fc:	60b9      	str	r1, [r7, #8]
 80053fe:	607a      	str	r2, [r7, #4]
 8005400:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005408:	2b00      	cmp	r3, #0
 800540a:	d10a      	bne.n	8005422 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800540c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005410:	f383 8811 	msr	BASEPRI, r3
 8005414:	f3bf 8f6f 	isb	sy
 8005418:	f3bf 8f4f 	dsb	sy
 800541c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800541e:	bf00      	nop
 8005420:	e7fe      	b.n	8005420 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d103      	bne.n	8005430 <xQueueGenericSendFromISR+0x3c>
 8005428:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800542a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800542c:	2b00      	cmp	r3, #0
 800542e:	d101      	bne.n	8005434 <xQueueGenericSendFromISR+0x40>
 8005430:	2301      	movs	r3, #1
 8005432:	e000      	b.n	8005436 <xQueueGenericSendFromISR+0x42>
 8005434:	2300      	movs	r3, #0
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800544c:	bf00      	nop
 800544e:	e7fe      	b.n	800544e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	2b02      	cmp	r3, #2
 8005454:	d103      	bne.n	800545e <xQueueGenericSendFromISR+0x6a>
 8005456:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005458:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800545a:	2b01      	cmp	r3, #1
 800545c:	d101      	bne.n	8005462 <xQueueGenericSendFromISR+0x6e>
 800545e:	2301      	movs	r3, #1
 8005460:	e000      	b.n	8005464 <xQueueGenericSendFromISR+0x70>
 8005462:	2300      	movs	r3, #0
 8005464:	2b00      	cmp	r3, #0
 8005466:	d10a      	bne.n	800547e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005468:	f04f 0350 	mov.w	r3, #80	; 0x50
 800546c:	f383 8811 	msr	BASEPRI, r3
 8005470:	f3bf 8f6f 	isb	sy
 8005474:	f3bf 8f4f 	dsb	sy
 8005478:	623b      	str	r3, [r7, #32]
}
 800547a:	bf00      	nop
 800547c:	e7fe      	b.n	800547c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800547e:	f002 fb9b 	bl	8007bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005482:	f3ef 8211 	mrs	r2, BASEPRI
 8005486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800548a:	f383 8811 	msr	BASEPRI, r3
 800548e:	f3bf 8f6f 	isb	sy
 8005492:	f3bf 8f4f 	dsb	sy
 8005496:	61fa      	str	r2, [r7, #28]
 8005498:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800549a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800549c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800549e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d302      	bcc.n	80054b0 <xQueueGenericSendFromISR+0xbc>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	2b02      	cmp	r3, #2
 80054ae:	d12f      	bne.n	8005510 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	68b9      	ldr	r1, [r7, #8]
 80054c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054c6:	f000 fb64 	bl	8005b92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d2:	d112      	bne.n	80054fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d016      	beq.n	800550a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054de:	3324      	adds	r3, #36	; 0x24
 80054e0:	4618      	mov	r0, r3
 80054e2:	f001 f975 	bl	80067d0 <xTaskRemoveFromEventList>
 80054e6:	4603      	mov	r3, r0
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d00e      	beq.n	800550a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00b      	beq.n	800550a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2201      	movs	r2, #1
 80054f6:	601a      	str	r2, [r3, #0]
 80054f8:	e007      	b.n	800550a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054fe:	3301      	adds	r3, #1
 8005500:	b2db      	uxtb	r3, r3
 8005502:	b25a      	sxtb	r2, r3
 8005504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800550a:	2301      	movs	r3, #1
 800550c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800550e:	e001      	b.n	8005514 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005510:	2300      	movs	r3, #0
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005514:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005516:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800551e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005520:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005522:	4618      	mov	r0, r3
 8005524:	3740      	adds	r7, #64	; 0x40
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}

0800552a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800552a:	b580      	push	{r7, lr}
 800552c:	b08e      	sub	sp, #56	; 0x38
 800552e:	af00      	add	r7, sp, #0
 8005530:	6078      	str	r0, [r7, #4]
 8005532:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800553a:	2b00      	cmp	r3, #0
 800553c:	d10a      	bne.n	8005554 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800553e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005542:	f383 8811 	msr	BASEPRI, r3
 8005546:	f3bf 8f6f 	isb	sy
 800554a:	f3bf 8f4f 	dsb	sy
 800554e:	623b      	str	r3, [r7, #32]
}
 8005550:	bf00      	nop
 8005552:	e7fe      	b.n	8005552 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005558:	2b00      	cmp	r3, #0
 800555a:	d00a      	beq.n	8005572 <xQueueGiveFromISR+0x48>
	__asm volatile
 800555c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005560:	f383 8811 	msr	BASEPRI, r3
 8005564:	f3bf 8f6f 	isb	sy
 8005568:	f3bf 8f4f 	dsb	sy
 800556c:	61fb      	str	r3, [r7, #28]
}
 800556e:	bf00      	nop
 8005570:	e7fe      	b.n	8005570 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d103      	bne.n	8005582 <xQueueGiveFromISR+0x58>
 800557a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d101      	bne.n	8005586 <xQueueGiveFromISR+0x5c>
 8005582:	2301      	movs	r3, #1
 8005584:	e000      	b.n	8005588 <xQueueGiveFromISR+0x5e>
 8005586:	2300      	movs	r3, #0
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	61bb      	str	r3, [r7, #24]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055a2:	f002 fb09 	bl	8007bb8 <vPortValidateInterruptPriority>
	__asm volatile
 80055a6:	f3ef 8211 	mrs	r2, BASEPRI
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	617a      	str	r2, [r7, #20]
 80055bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80055be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80055c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055ce:	429a      	cmp	r2, r3
 80055d0:	d22b      	bcs.n	800562a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055ec:	d112      	bne.n	8005614 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d016      	beq.n	8005624 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	3324      	adds	r3, #36	; 0x24
 80055fa:	4618      	mov	r0, r3
 80055fc:	f001 f8e8 	bl	80067d0 <xTaskRemoveFromEventList>
 8005600:	4603      	mov	r3, r0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d00e      	beq.n	8005624 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005606:	683b      	ldr	r3, [r7, #0]
 8005608:	2b00      	cmp	r3, #0
 800560a:	d00b      	beq.n	8005624 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	2201      	movs	r2, #1
 8005610:	601a      	str	r2, [r3, #0]
 8005612:	e007      	b.n	8005624 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005618:	3301      	adds	r3, #1
 800561a:	b2db      	uxtb	r3, r3
 800561c:	b25a      	sxtb	r2, r3
 800561e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005624:	2301      	movs	r3, #1
 8005626:	637b      	str	r3, [r7, #52]	; 0x34
 8005628:	e001      	b.n	800562e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800562a:	2300      	movs	r3, #0
 800562c:	637b      	str	r3, [r7, #52]	; 0x34
 800562e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005630:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	f383 8811 	msr	BASEPRI, r3
}
 8005638:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800563a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800563c:	4618      	mov	r0, r3
 800563e:	3738      	adds	r7, #56	; 0x38
 8005640:	46bd      	mov	sp, r7
 8005642:	bd80      	pop	{r7, pc}

08005644 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b08c      	sub	sp, #48	; 0x30
 8005648:	af00      	add	r7, sp, #0
 800564a:	60f8      	str	r0, [r7, #12]
 800564c:	60b9      	str	r1, [r7, #8]
 800564e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005650:	2300      	movs	r3, #0
 8005652:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	2b00      	cmp	r3, #0
 800565c:	d10a      	bne.n	8005674 <xQueueReceive+0x30>
	__asm volatile
 800565e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005662:	f383 8811 	msr	BASEPRI, r3
 8005666:	f3bf 8f6f 	isb	sy
 800566a:	f3bf 8f4f 	dsb	sy
 800566e:	623b      	str	r3, [r7, #32]
}
 8005670:	bf00      	nop
 8005672:	e7fe      	b.n	8005672 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d103      	bne.n	8005682 <xQueueReceive+0x3e>
 800567a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b00      	cmp	r3, #0
 8005680:	d101      	bne.n	8005686 <xQueueReceive+0x42>
 8005682:	2301      	movs	r3, #1
 8005684:	e000      	b.n	8005688 <xQueueReceive+0x44>
 8005686:	2300      	movs	r3, #0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d10a      	bne.n	80056a2 <xQueueReceive+0x5e>
	__asm volatile
 800568c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005690:	f383 8811 	msr	BASEPRI, r3
 8005694:	f3bf 8f6f 	isb	sy
 8005698:	f3bf 8f4f 	dsb	sy
 800569c:	61fb      	str	r3, [r7, #28]
}
 800569e:	bf00      	nop
 80056a0:	e7fe      	b.n	80056a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056a2:	f001 fa67 	bl	8006b74 <xTaskGetSchedulerState>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d102      	bne.n	80056b2 <xQueueReceive+0x6e>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <xQueueReceive+0x72>
 80056b2:	2301      	movs	r3, #1
 80056b4:	e000      	b.n	80056b8 <xQueueReceive+0x74>
 80056b6:	2300      	movs	r3, #0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d10a      	bne.n	80056d2 <xQueueReceive+0x8e>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	61bb      	str	r3, [r7, #24]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056d2:	f002 f98f 	bl	80079f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d01f      	beq.n	8005722 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056e6:	f000 fabe 	bl	8005c66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ec:	1e5a      	subs	r2, r3, #1
 80056ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00f      	beq.n	800571a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056fc:	3310      	adds	r3, #16
 80056fe:	4618      	mov	r0, r3
 8005700:	f001 f866 	bl	80067d0 <xTaskRemoveFromEventList>
 8005704:	4603      	mov	r3, r0
 8005706:	2b00      	cmp	r3, #0
 8005708:	d007      	beq.n	800571a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800570a:	4b3d      	ldr	r3, [pc, #244]	; (8005800 <xQueueReceive+0x1bc>)
 800570c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005710:	601a      	str	r2, [r3, #0]
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800571a:	f002 f99b 	bl	8007a54 <vPortExitCritical>
				return pdPASS;
 800571e:	2301      	movs	r3, #1
 8005720:	e069      	b.n	80057f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d103      	bne.n	8005730 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005728:	f002 f994 	bl	8007a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800572c:	2300      	movs	r3, #0
 800572e:	e062      	b.n	80057f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005730:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005732:	2b00      	cmp	r3, #0
 8005734:	d106      	bne.n	8005744 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005736:	f107 0310 	add.w	r3, r7, #16
 800573a:	4618      	mov	r0, r3
 800573c:	f001 f8ac 	bl	8006898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005744:	f002 f986 	bl	8007a54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005748:	f000 fe18 	bl	800637c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800574c:	f002 f952 	bl	80079f4 <vPortEnterCritical>
 8005750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005752:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005756:	b25b      	sxtb	r3, r3
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800575c:	d103      	bne.n	8005766 <xQueueReceive+0x122>
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	2200      	movs	r2, #0
 8005762:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005768:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800576c:	b25b      	sxtb	r3, r3
 800576e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005772:	d103      	bne.n	800577c <xQueueReceive+0x138>
 8005774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005776:	2200      	movs	r2, #0
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800577c:	f002 f96a 	bl	8007a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005780:	1d3a      	adds	r2, r7, #4
 8005782:	f107 0310 	add.w	r3, r7, #16
 8005786:	4611      	mov	r1, r2
 8005788:	4618      	mov	r0, r3
 800578a:	f001 f89b 	bl	80068c4 <xTaskCheckForTimeOut>
 800578e:	4603      	mov	r3, r0
 8005790:	2b00      	cmp	r3, #0
 8005792:	d123      	bne.n	80057dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005794:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005796:	f000 fade 	bl	8005d56 <prvIsQueueEmpty>
 800579a:	4603      	mov	r3, r0
 800579c:	2b00      	cmp	r3, #0
 800579e:	d017      	beq.n	80057d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a2:	3324      	adds	r3, #36	; 0x24
 80057a4:	687a      	ldr	r2, [r7, #4]
 80057a6:	4611      	mov	r1, r2
 80057a8:	4618      	mov	r0, r3
 80057aa:	f000 ffc1 	bl	8006730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057b0:	f000 fa7f 	bl	8005cb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057b4:	f000 fdf0 	bl	8006398 <xTaskResumeAll>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d189      	bne.n	80056d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057be:	4b10      	ldr	r3, [pc, #64]	; (8005800 <xQueueReceive+0x1bc>)
 80057c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057c4:	601a      	str	r2, [r3, #0]
 80057c6:	f3bf 8f4f 	dsb	sy
 80057ca:	f3bf 8f6f 	isb	sy
 80057ce:	e780      	b.n	80056d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d2:	f000 fa6e 	bl	8005cb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057d6:	f000 fddf 	bl	8006398 <xTaskResumeAll>
 80057da:	e77a      	b.n	80056d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057de:	f000 fa68 	bl	8005cb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057e2:	f000 fdd9 	bl	8006398 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e8:	f000 fab5 	bl	8005d56 <prvIsQueueEmpty>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	f43f af6f 	beq.w	80056d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3730      	adds	r7, #48	; 0x30
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	e000ed04 	.word	0xe000ed04

08005804 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b08e      	sub	sp, #56	; 0x38
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
 800580c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005816:	2300      	movs	r3, #0
 8005818:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800581a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10a      	bne.n	8005836 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	623b      	str	r3, [r7, #32]
}
 8005832:	bf00      	nop
 8005834:	e7fe      	b.n	8005834 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	d00a      	beq.n	8005854 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	61fb      	str	r3, [r7, #28]
}
 8005850:	bf00      	nop
 8005852:	e7fe      	b.n	8005852 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005854:	f001 f98e 	bl	8006b74 <xTaskGetSchedulerState>
 8005858:	4603      	mov	r3, r0
 800585a:	2b00      	cmp	r3, #0
 800585c:	d102      	bne.n	8005864 <xQueueSemaphoreTake+0x60>
 800585e:	683b      	ldr	r3, [r7, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <xQueueSemaphoreTake+0x64>
 8005864:	2301      	movs	r3, #1
 8005866:	e000      	b.n	800586a <xQueueSemaphoreTake+0x66>
 8005868:	2300      	movs	r3, #0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10a      	bne.n	8005884 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	61bb      	str	r3, [r7, #24]
}
 8005880:	bf00      	nop
 8005882:	e7fe      	b.n	8005882 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005884:	f002 f8b6 	bl	80079f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005888:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800588a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	2b00      	cmp	r3, #0
 8005892:	d024      	beq.n	80058de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005896:	1e5a      	subs	r2, r3, #1
 8005898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800589c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d104      	bne.n	80058ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80058a4:	f001 fadc 	bl	8006e60 <pvTaskIncrementMutexHeldCount>
 80058a8:	4602      	mov	r2, r0
 80058aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00f      	beq.n	80058d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b8:	3310      	adds	r3, #16
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 ff88 	bl	80067d0 <xTaskRemoveFromEventList>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d007      	beq.n	80058d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058c6:	4b54      	ldr	r3, [pc, #336]	; (8005a18 <xQueueSemaphoreTake+0x214>)
 80058c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058cc:	601a      	str	r2, [r3, #0]
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058d6:	f002 f8bd 	bl	8007a54 <vPortExitCritical>
				return pdPASS;
 80058da:	2301      	movs	r3, #1
 80058dc:	e097      	b.n	8005a0e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d111      	bne.n	8005908 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00a      	beq.n	8005900 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80058ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ee:	f383 8811 	msr	BASEPRI, r3
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	f3bf 8f4f 	dsb	sy
 80058fa:	617b      	str	r3, [r7, #20]
}
 80058fc:	bf00      	nop
 80058fe:	e7fe      	b.n	80058fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005900:	f002 f8a8 	bl	8007a54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005904:	2300      	movs	r3, #0
 8005906:	e082      	b.n	8005a0e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005908:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800590a:	2b00      	cmp	r3, #0
 800590c:	d106      	bne.n	800591c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800590e:	f107 030c 	add.w	r3, r7, #12
 8005912:	4618      	mov	r0, r3
 8005914:	f000 ffc0 	bl	8006898 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005918:	2301      	movs	r3, #1
 800591a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800591c:	f002 f89a 	bl	8007a54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005920:	f000 fd2c 	bl	800637c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005924:	f002 f866 	bl	80079f4 <vPortEnterCritical>
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800592e:	b25b      	sxtb	r3, r3
 8005930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005934:	d103      	bne.n	800593e <xQueueSemaphoreTake+0x13a>
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	2200      	movs	r2, #0
 800593a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005944:	b25b      	sxtb	r3, r3
 8005946:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800594a:	d103      	bne.n	8005954 <xQueueSemaphoreTake+0x150>
 800594c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800594e:	2200      	movs	r2, #0
 8005950:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005954:	f002 f87e 	bl	8007a54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005958:	463a      	mov	r2, r7
 800595a:	f107 030c 	add.w	r3, r7, #12
 800595e:	4611      	mov	r1, r2
 8005960:	4618      	mov	r0, r3
 8005962:	f000 ffaf 	bl	80068c4 <xTaskCheckForTimeOut>
 8005966:	4603      	mov	r3, r0
 8005968:	2b00      	cmp	r3, #0
 800596a:	d132      	bne.n	80059d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800596c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800596e:	f000 f9f2 	bl	8005d56 <prvIsQueueEmpty>
 8005972:	4603      	mov	r3, r0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d026      	beq.n	80059c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d109      	bne.n	8005994 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005980:	f002 f838 	bl	80079f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	4618      	mov	r0, r3
 800598a:	f001 f911 	bl	8006bb0 <xTaskPriorityInherit>
 800598e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005990:	f002 f860 	bl	8007a54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005996:	3324      	adds	r3, #36	; 0x24
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	4611      	mov	r1, r2
 800599c:	4618      	mov	r0, r3
 800599e:	f000 fec7 	bl	8006730 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059a4:	f000 f985 	bl	8005cb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059a8:	f000 fcf6 	bl	8006398 <xTaskResumeAll>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	f47f af68 	bne.w	8005884 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80059b4:	4b18      	ldr	r3, [pc, #96]	; (8005a18 <xQueueSemaphoreTake+0x214>)
 80059b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ba:	601a      	str	r2, [r3, #0]
 80059bc:	f3bf 8f4f 	dsb	sy
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	e75e      	b.n	8005884 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80059c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059c8:	f000 f973 	bl	8005cb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059cc:	f000 fce4 	bl	8006398 <xTaskResumeAll>
 80059d0:	e758      	b.n	8005884 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80059d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059d4:	f000 f96d 	bl	8005cb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059d8:	f000 fcde 	bl	8006398 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059de:	f000 f9ba 	bl	8005d56 <prvIsQueueEmpty>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	f43f af4d 	beq.w	8005884 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d00d      	beq.n	8005a0c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80059f0:	f002 f800 	bl	80079f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059f6:	f000 f8b4 	bl	8005b62 <prvGetDisinheritPriorityAfterTimeout>
 80059fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a02:	4618      	mov	r0, r3
 8005a04:	f001 f9aa 	bl	8006d5c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a08:	f002 f824 	bl	8007a54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3738      	adds	r7, #56	; 0x38
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	e000ed04 	.word	0xe000ed04

08005a1c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b08e      	sub	sp, #56	; 0x38
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	623b      	str	r3, [r7, #32]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <xQueueReceiveFromISR+0x3a>
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <xQueueReceiveFromISR+0x3e>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <xQueueReceiveFromISR+0x40>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61fb      	str	r3, [r7, #28]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a76:	f002 f89f 	bl	8007bb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005a7a:	f3ef 8211 	mrs	r2, BASEPRI
 8005a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a82:	f383 8811 	msr	BASEPRI, r3
 8005a86:	f3bf 8f6f 	isb	sy
 8005a8a:	f3bf 8f4f 	dsb	sy
 8005a8e:	61ba      	str	r2, [r7, #24]
 8005a90:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a92:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a94:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a9a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d02f      	beq.n	8005b02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005aa2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ab0:	f000 f8d9 	bl	8005c66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ab6:	1e5a      	subs	r2, r3, #1
 8005ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005abc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ac0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ac4:	d112      	bne.n	8005aec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d016      	beq.n	8005afc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad0:	3310      	adds	r3, #16
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fe7c 	bl	80067d0 <xTaskRemoveFromEventList>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d00e      	beq.n	8005afc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d00b      	beq.n	8005afc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2201      	movs	r2, #1
 8005ae8:	601a      	str	r2, [r3, #0]
 8005aea:	e007      	b.n	8005afc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005aec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005af0:	3301      	adds	r3, #1
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	b25a      	sxtb	r2, r3
 8005af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005afc:	2301      	movs	r3, #1
 8005afe:	637b      	str	r3, [r7, #52]	; 0x34
 8005b00:	e001      	b.n	8005b06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005b02:	2300      	movs	r3, #0
 8005b04:	637b      	str	r3, [r7, #52]	; 0x34
 8005b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b0a:	693b      	ldr	r3, [r7, #16]
 8005b0c:	f383 8811 	msr	BASEPRI, r3
}
 8005b10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3738      	adds	r7, #56	; 0x38
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d10a      	bne.n	8005b44 <vQueueDelete+0x28>
	__asm volatile
 8005b2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b32:	f383 8811 	msr	BASEPRI, r3
 8005b36:	f3bf 8f6f 	isb	sy
 8005b3a:	f3bf 8f4f 	dsb	sy
 8005b3e:	60bb      	str	r3, [r7, #8]
}
 8005b40:	bf00      	nop
 8005b42:	e7fe      	b.n	8005b42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b44:	68f8      	ldr	r0, [r7, #12]
 8005b46:	f000 f95f 	bl	8005e08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d102      	bne.n	8005b5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005b54:	68f8      	ldr	r0, [r7, #12]
 8005b56:	f002 f93b 	bl	8007dd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b5a:	bf00      	nop
 8005b5c:	3710      	adds	r7, #16
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b62:	b480      	push	{r7}
 8005b64:	b085      	sub	sp, #20
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d006      	beq.n	8005b80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005b7c:	60fb      	str	r3, [r7, #12]
 8005b7e:	e001      	b.n	8005b84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b80:	2300      	movs	r3, #0
 8005b82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b84:	68fb      	ldr	r3, [r7, #12]
	}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b92:	b580      	push	{r7, lr}
 8005b94:	b086      	sub	sp, #24
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	60f8      	str	r0, [r7, #12]
 8005b9a:	60b9      	str	r1, [r7, #8]
 8005b9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10d      	bne.n	8005bcc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d14d      	bne.n	8005c54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f001 f85f 	bl	8006c80 <xTaskPriorityDisinherit>
 8005bc2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2200      	movs	r2, #0
 8005bc8:	609a      	str	r2, [r3, #8]
 8005bca:	e043      	b.n	8005c54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d119      	bne.n	8005c06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	6858      	ldr	r0, [r3, #4]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bda:	461a      	mov	r2, r3
 8005bdc:	68b9      	ldr	r1, [r7, #8]
 8005bde:	f002 fbe0 	bl	80083a2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	685a      	ldr	r2, [r3, #4]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bea:	441a      	add	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	685a      	ldr	r2, [r3, #4]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d32b      	bcc.n	8005c54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	605a      	str	r2, [r3, #4]
 8005c04:	e026      	b.n	8005c54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	68d8      	ldr	r0, [r3, #12]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	f002 fbc6 	bl	80083a2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	68da      	ldr	r2, [r3, #12]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	425b      	negs	r3, r3
 8005c20:	441a      	add	r2, r3
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	68da      	ldr	r2, [r3, #12]
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d207      	bcs.n	8005c42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	425b      	negs	r3, r3
 8005c3c:	441a      	add	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b02      	cmp	r3, #2
 8005c46:	d105      	bne.n	8005c54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d002      	beq.n	8005c54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	3b01      	subs	r3, #1
 8005c52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c54:	693b      	ldr	r3, [r7, #16]
 8005c56:	1c5a      	adds	r2, r3, #1
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c5c:	697b      	ldr	r3, [r7, #20]
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	3718      	adds	r7, #24
 8005c62:	46bd      	mov	sp, r7
 8005c64:	bd80      	pop	{r7, pc}

08005c66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c66:	b580      	push	{r7, lr}
 8005c68:	b082      	sub	sp, #8
 8005c6a:	af00      	add	r7, sp, #0
 8005c6c:	6078      	str	r0, [r7, #4]
 8005c6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d018      	beq.n	8005caa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	68da      	ldr	r2, [r3, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	441a      	add	r2, r3
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d303      	bcc.n	8005c9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681a      	ldr	r2, [r3, #0]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	68d9      	ldr	r1, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca2:	461a      	mov	r2, r3
 8005ca4:	6838      	ldr	r0, [r7, #0]
 8005ca6:	f002 fb7c 	bl	80083a2 <memcpy>
	}
}
 8005caa:	bf00      	nop
 8005cac:	3708      	adds	r7, #8
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	bd80      	pop	{r7, pc}

08005cb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cb2:	b580      	push	{r7, lr}
 8005cb4:	b084      	sub	sp, #16
 8005cb6:	af00      	add	r7, sp, #0
 8005cb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cba:	f001 fe9b 	bl	80079f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cc6:	e011      	b.n	8005cec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d012      	beq.n	8005cf6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	3324      	adds	r3, #36	; 0x24
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f000 fd7b 	bl	80067d0 <xTaskRemoveFromEventList>
 8005cda:	4603      	mov	r3, r0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d001      	beq.n	8005ce4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ce0:	f000 fe52 	bl	8006988 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ce4:	7bfb      	ldrb	r3, [r7, #15]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	dce9      	bgt.n	8005cc8 <prvUnlockQueue+0x16>
 8005cf4:	e000      	b.n	8005cf8 <prvUnlockQueue+0x46>
					break;
 8005cf6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	22ff      	movs	r2, #255	; 0xff
 8005cfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d00:	f001 fea8 	bl	8007a54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d04:	f001 fe76 	bl	80079f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d10:	e011      	b.n	8005d36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d012      	beq.n	8005d40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	3310      	adds	r3, #16
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f000 fd56 	bl	80067d0 <xTaskRemoveFromEventList>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d2a:	f000 fe2d 	bl	8006988 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d2e:	7bbb      	ldrb	r3, [r7, #14]
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b2db      	uxtb	r3, r3
 8005d34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	dce9      	bgt.n	8005d12 <prvUnlockQueue+0x60>
 8005d3e:	e000      	b.n	8005d42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	22ff      	movs	r2, #255	; 0xff
 8005d46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d4a:	f001 fe83 	bl	8007a54 <vPortExitCritical>
}
 8005d4e:	bf00      	nop
 8005d50:	3710      	adds	r7, #16
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}

08005d56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b084      	sub	sp, #16
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d5e:	f001 fe49 	bl	80079f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d102      	bne.n	8005d70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	60fb      	str	r3, [r7, #12]
 8005d6e:	e001      	b.n	8005d74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d70:	2300      	movs	r3, #0
 8005d72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d74:	f001 fe6e 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 8005d78:	68fb      	ldr	r3, [r7, #12]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}

08005d82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d82:	b580      	push	{r7, lr}
 8005d84:	b084      	sub	sp, #16
 8005d86:	af00      	add	r7, sp, #0
 8005d88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d8a:	f001 fe33 	bl	80079f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d102      	bne.n	8005da0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]
 8005d9e:	e001      	b.n	8005da4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005da0:	2300      	movs	r3, #0
 8005da2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005da4:	f001 fe56 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 8005da8:	68fb      	ldr	r3, [r7, #12]
}
 8005daa:	4618      	mov	r0, r3
 8005dac:	3710      	adds	r7, #16
 8005dae:	46bd      	mov	sp, r7
 8005db0:	bd80      	pop	{r7, pc}
	...

08005db4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
 8005dbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	60fb      	str	r3, [r7, #12]
 8005dc2:	e014      	b.n	8005dee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dc4:	4a0f      	ldr	r2, [pc, #60]	; (8005e04 <vQueueAddToRegistry+0x50>)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d10b      	bne.n	8005de8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dd0:	490c      	ldr	r1, [pc, #48]	; (8005e04 <vQueueAddToRegistry+0x50>)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	683a      	ldr	r2, [r7, #0]
 8005dd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dda:	4a0a      	ldr	r2, [pc, #40]	; (8005e04 <vQueueAddToRegistry+0x50>)
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	00db      	lsls	r3, r3, #3
 8005de0:	4413      	add	r3, r2
 8005de2:	687a      	ldr	r2, [r7, #4]
 8005de4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005de6:	e006      	b.n	8005df6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	3301      	adds	r3, #1
 8005dec:	60fb      	str	r3, [r7, #12]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2b07      	cmp	r3, #7
 8005df2:	d9e7      	bls.n	8005dc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005df4:	bf00      	nop
 8005df6:	bf00      	nop
 8005df8:	3714      	adds	r7, #20
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e00:	4770      	bx	lr
 8005e02:	bf00      	nop
 8005e04:	20000944 	.word	0x20000944

08005e08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e10:	2300      	movs	r3, #0
 8005e12:	60fb      	str	r3, [r7, #12]
 8005e14:	e016      	b.n	8005e44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005e16:	4a10      	ldr	r2, [pc, #64]	; (8005e58 <vQueueUnregisterQueue+0x50>)
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	00db      	lsls	r3, r3, #3
 8005e1c:	4413      	add	r3, r2
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	687a      	ldr	r2, [r7, #4]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d10b      	bne.n	8005e3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005e26:	4a0c      	ldr	r2, [pc, #48]	; (8005e58 <vQueueUnregisterQueue+0x50>)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005e30:	4a09      	ldr	r2, [pc, #36]	; (8005e58 <vQueueUnregisterQueue+0x50>)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	00db      	lsls	r3, r3, #3
 8005e36:	4413      	add	r3, r2
 8005e38:	2200      	movs	r2, #0
 8005e3a:	605a      	str	r2, [r3, #4]
				break;
 8005e3c:	e006      	b.n	8005e4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	3301      	adds	r3, #1
 8005e42:	60fb      	str	r3, [r7, #12]
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b07      	cmp	r3, #7
 8005e48:	d9e5      	bls.n	8005e16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e4a:	bf00      	nop
 8005e4c:	bf00      	nop
 8005e4e:	3714      	adds	r7, #20
 8005e50:	46bd      	mov	sp, r7
 8005e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e56:	4770      	bx	lr
 8005e58:	20000944 	.word	0x20000944

08005e5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e5c:	b580      	push	{r7, lr}
 8005e5e:	b086      	sub	sp, #24
 8005e60:	af00      	add	r7, sp, #0
 8005e62:	60f8      	str	r0, [r7, #12]
 8005e64:	60b9      	str	r1, [r7, #8]
 8005e66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e6c:	f001 fdc2 	bl	80079f4 <vPortEnterCritical>
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e76:	b25b      	sxtb	r3, r3
 8005e78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e7c:	d103      	bne.n	8005e86 <vQueueWaitForMessageRestricted+0x2a>
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e86:	697b      	ldr	r3, [r7, #20]
 8005e88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e8c:	b25b      	sxtb	r3, r3
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e92:	d103      	bne.n	8005e9c <vQueueWaitForMessageRestricted+0x40>
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	2200      	movs	r2, #0
 8005e98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e9c:	f001 fdda 	bl	8007a54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d106      	bne.n	8005eb6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	3324      	adds	r3, #36	; 0x24
 8005eac:	687a      	ldr	r2, [r7, #4]
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f000 fc61 	bl	8006778 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eb6:	6978      	ldr	r0, [r7, #20]
 8005eb8:	f7ff fefb 	bl	8005cb2 <prvUnlockQueue>
	}
 8005ebc:	bf00      	nop
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b08e      	sub	sp, #56	; 0x38
 8005ec8:	af04      	add	r7, sp, #16
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
 8005ed0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d10a      	bne.n	8005eee <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ed8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005edc:	f383 8811 	msr	BASEPRI, r3
 8005ee0:	f3bf 8f6f 	isb	sy
 8005ee4:	f3bf 8f4f 	dsb	sy
 8005ee8:	623b      	str	r3, [r7, #32]
}
 8005eea:	bf00      	nop
 8005eec:	e7fe      	b.n	8005eec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005eee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d10a      	bne.n	8005f0a <xTaskCreateStatic+0x46>
	__asm volatile
 8005ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef8:	f383 8811 	msr	BASEPRI, r3
 8005efc:	f3bf 8f6f 	isb	sy
 8005f00:	f3bf 8f4f 	dsb	sy
 8005f04:	61fb      	str	r3, [r7, #28]
}
 8005f06:	bf00      	nop
 8005f08:	e7fe      	b.n	8005f08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f0a:	23a8      	movs	r3, #168	; 0xa8
 8005f0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2ba8      	cmp	r3, #168	; 0xa8
 8005f12:	d00a      	beq.n	8005f2a <xTaskCreateStatic+0x66>
	__asm volatile
 8005f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f18:	f383 8811 	msr	BASEPRI, r3
 8005f1c:	f3bf 8f6f 	isb	sy
 8005f20:	f3bf 8f4f 	dsb	sy
 8005f24:	61bb      	str	r3, [r7, #24]
}
 8005f26:	bf00      	nop
 8005f28:	e7fe      	b.n	8005f28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d01e      	beq.n	8005f70 <xTaskCreateStatic+0xac>
 8005f32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d01b      	beq.n	8005f70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	9303      	str	r3, [sp, #12]
 8005f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f50:	9302      	str	r3, [sp, #8]
 8005f52:	f107 0314 	add.w	r3, r7, #20
 8005f56:	9301      	str	r3, [sp, #4]
 8005f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f5a:	9300      	str	r3, [sp, #0]
 8005f5c:	683b      	ldr	r3, [r7, #0]
 8005f5e:	687a      	ldr	r2, [r7, #4]
 8005f60:	68b9      	ldr	r1, [r7, #8]
 8005f62:	68f8      	ldr	r0, [r7, #12]
 8005f64:	f000 f850 	bl	8006008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f6a:	f000 f8f3 	bl	8006154 <prvAddNewTaskToReadyList>
 8005f6e:	e001      	b.n	8005f74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f74:	697b      	ldr	r3, [r7, #20]
	}
 8005f76:	4618      	mov	r0, r3
 8005f78:	3728      	adds	r7, #40	; 0x28
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	bd80      	pop	{r7, pc}

08005f7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f7e:	b580      	push	{r7, lr}
 8005f80:	b08c      	sub	sp, #48	; 0x30
 8005f82:	af04      	add	r7, sp, #16
 8005f84:	60f8      	str	r0, [r7, #12]
 8005f86:	60b9      	str	r1, [r7, #8]
 8005f88:	603b      	str	r3, [r7, #0]
 8005f8a:	4613      	mov	r3, r2
 8005f8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f8e:	88fb      	ldrh	r3, [r7, #6]
 8005f90:	009b      	lsls	r3, r3, #2
 8005f92:	4618      	mov	r0, r3
 8005f94:	f001 fe50 	bl	8007c38 <pvPortMalloc>
 8005f98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f9a:	697b      	ldr	r3, [r7, #20]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00e      	beq.n	8005fbe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fa0:	20a8      	movs	r0, #168	; 0xa8
 8005fa2:	f001 fe49 	bl	8007c38 <pvPortMalloc>
 8005fa6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fa8:	69fb      	ldr	r3, [r7, #28]
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d003      	beq.n	8005fb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fae:	69fb      	ldr	r3, [r7, #28]
 8005fb0:	697a      	ldr	r2, [r7, #20]
 8005fb2:	631a      	str	r2, [r3, #48]	; 0x30
 8005fb4:	e005      	b.n	8005fc2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fb6:	6978      	ldr	r0, [r7, #20]
 8005fb8:	f001 ff0a 	bl	8007dd0 <vPortFree>
 8005fbc:	e001      	b.n	8005fc2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d017      	beq.n	8005ff8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fd0:	88fa      	ldrh	r2, [r7, #6]
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	9303      	str	r3, [sp, #12]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	9302      	str	r3, [sp, #8]
 8005fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fdc:	9301      	str	r3, [sp, #4]
 8005fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe0:	9300      	str	r3, [sp, #0]
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68b9      	ldr	r1, [r7, #8]
 8005fe6:	68f8      	ldr	r0, [r7, #12]
 8005fe8:	f000 f80e 	bl	8006008 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fec:	69f8      	ldr	r0, [r7, #28]
 8005fee:	f000 f8b1 	bl	8006154 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	61bb      	str	r3, [r7, #24]
 8005ff6:	e002      	b.n	8005ffe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ff8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ffc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ffe:	69bb      	ldr	r3, [r7, #24]
	}
 8006000:	4618      	mov	r0, r3
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b088      	sub	sp, #32
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
 8006014:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	009b      	lsls	r3, r3, #2
 800601e:	461a      	mov	r2, r3
 8006020:	21a5      	movs	r1, #165	; 0xa5
 8006022:	f002 f933 	bl	800828c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006028:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006030:	3b01      	subs	r3, #1
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	4413      	add	r3, r2
 8006036:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f023 0307 	bic.w	r3, r3, #7
 800603e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006040:	69bb      	ldr	r3, [r7, #24]
 8006042:	f003 0307 	and.w	r3, r3, #7
 8006046:	2b00      	cmp	r3, #0
 8006048:	d00a      	beq.n	8006060 <prvInitialiseNewTask+0x58>
	__asm volatile
 800604a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800604e:	f383 8811 	msr	BASEPRI, r3
 8006052:	f3bf 8f6f 	isb	sy
 8006056:	f3bf 8f4f 	dsb	sy
 800605a:	617b      	str	r3, [r7, #20]
}
 800605c:	bf00      	nop
 800605e:	e7fe      	b.n	800605e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006060:	68bb      	ldr	r3, [r7, #8]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d01f      	beq.n	80060a6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006066:	2300      	movs	r3, #0
 8006068:	61fb      	str	r3, [r7, #28]
 800606a:	e012      	b.n	8006092 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800606c:	68ba      	ldr	r2, [r7, #8]
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	7819      	ldrb	r1, [r3, #0]
 8006074:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	4413      	add	r3, r2
 800607a:	3334      	adds	r3, #52	; 0x34
 800607c:	460a      	mov	r2, r1
 800607e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006080:	68ba      	ldr	r2, [r7, #8]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	4413      	add	r3, r2
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	2b00      	cmp	r3, #0
 800608a:	d006      	beq.n	800609a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	3301      	adds	r3, #1
 8006090:	61fb      	str	r3, [r7, #28]
 8006092:	69fb      	ldr	r3, [r7, #28]
 8006094:	2b0f      	cmp	r3, #15
 8006096:	d9e9      	bls.n	800606c <prvInitialiseNewTask+0x64>
 8006098:	e000      	b.n	800609c <prvInitialiseNewTask+0x94>
			{
				break;
 800609a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800609c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609e:	2200      	movs	r2, #0
 80060a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060a4:	e003      	b.n	80060ae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a8:	2200      	movs	r2, #0
 80060aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b0:	2b37      	cmp	r3, #55	; 0x37
 80060b2:	d901      	bls.n	80060b8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060b4:	2337      	movs	r3, #55	; 0x37
 80060b6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060bc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060c2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	2200      	movs	r2, #0
 80060c8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060cc:	3304      	adds	r3, #4
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fe fda0 	bl	8004c14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d6:	3318      	adds	r3, #24
 80060d8:	4618      	mov	r0, r3
 80060da:	f7fe fd9b 	bl	8004c14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060f2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	2200      	movs	r2, #0
 8006100:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006106:	3354      	adds	r3, #84	; 0x54
 8006108:	224c      	movs	r2, #76	; 0x4c
 800610a:	2100      	movs	r1, #0
 800610c:	4618      	mov	r0, r3
 800610e:	f002 f8bd 	bl	800828c <memset>
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	4a0c      	ldr	r2, [pc, #48]	; (8006148 <prvInitialiseNewTask+0x140>)
 8006116:	659a      	str	r2, [r3, #88]	; 0x58
 8006118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800611a:	4a0c      	ldr	r2, [pc, #48]	; (800614c <prvInitialiseNewTask+0x144>)
 800611c:	65da      	str	r2, [r3, #92]	; 0x5c
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	4a0b      	ldr	r2, [pc, #44]	; (8006150 <prvInitialiseNewTask+0x148>)
 8006122:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006124:	683a      	ldr	r2, [r7, #0]
 8006126:	68f9      	ldr	r1, [r7, #12]
 8006128:	69b8      	ldr	r0, [r7, #24]
 800612a:	f001 fb33 	bl	8007794 <pxPortInitialiseStack>
 800612e:	4602      	mov	r2, r0
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	d002      	beq.n	8006140 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800613a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800613c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800613e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006140:	bf00      	nop
 8006142:	3720      	adds	r7, #32
 8006144:	46bd      	mov	sp, r7
 8006146:	bd80      	pop	{r7, pc}
 8006148:	20004a70 	.word	0x20004a70
 800614c:	20004ad8 	.word	0x20004ad8
 8006150:	20004b40 	.word	0x20004b40

08006154 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006154:	b580      	push	{r7, lr}
 8006156:	b082      	sub	sp, #8
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800615c:	f001 fc4a 	bl	80079f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006160:	4b2d      	ldr	r3, [pc, #180]	; (8006218 <prvAddNewTaskToReadyList+0xc4>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	3301      	adds	r3, #1
 8006166:	4a2c      	ldr	r2, [pc, #176]	; (8006218 <prvAddNewTaskToReadyList+0xc4>)
 8006168:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800616a:	4b2c      	ldr	r3, [pc, #176]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d109      	bne.n	8006186 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006172:	4a2a      	ldr	r2, [pc, #168]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006178:	4b27      	ldr	r3, [pc, #156]	; (8006218 <prvAddNewTaskToReadyList+0xc4>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	d110      	bne.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006180:	f000 fc26 	bl	80069d0 <prvInitialiseTaskLists>
 8006184:	e00d      	b.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006186:	4b26      	ldr	r3, [pc, #152]	; (8006220 <prvAddNewTaskToReadyList+0xcc>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d109      	bne.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800618e:	4b23      	ldr	r3, [pc, #140]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006198:	429a      	cmp	r2, r3
 800619a:	d802      	bhi.n	80061a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800619c:	4a1f      	ldr	r2, [pc, #124]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061a2:	4b20      	ldr	r3, [pc, #128]	; (8006224 <prvAddNewTaskToReadyList+0xd0>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	3301      	adds	r3, #1
 80061a8:	4a1e      	ldr	r2, [pc, #120]	; (8006224 <prvAddNewTaskToReadyList+0xd0>)
 80061aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061ac:	4b1d      	ldr	r3, [pc, #116]	; (8006224 <prvAddNewTaskToReadyList+0xd0>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b8:	4b1b      	ldr	r3, [pc, #108]	; (8006228 <prvAddNewTaskToReadyList+0xd4>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d903      	bls.n	80061c8 <prvAddNewTaskToReadyList+0x74>
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061c4:	4a18      	ldr	r2, [pc, #96]	; (8006228 <prvAddNewTaskToReadyList+0xd4>)
 80061c6:	6013      	str	r3, [r2, #0]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061cc:	4613      	mov	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	4413      	add	r3, r2
 80061d2:	009b      	lsls	r3, r3, #2
 80061d4:	4a15      	ldr	r2, [pc, #84]	; (800622c <prvAddNewTaskToReadyList+0xd8>)
 80061d6:	441a      	add	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3304      	adds	r3, #4
 80061dc:	4619      	mov	r1, r3
 80061de:	4610      	mov	r0, r2
 80061e0:	f7fe fd25 	bl	8004c2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061e4:	f001 fc36 	bl	8007a54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061e8:	4b0d      	ldr	r3, [pc, #52]	; (8006220 <prvAddNewTaskToReadyList+0xcc>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d00e      	beq.n	800620e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061f0:	4b0a      	ldr	r3, [pc, #40]	; (800621c <prvAddNewTaskToReadyList+0xc8>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d207      	bcs.n	800620e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061fe:	4b0c      	ldr	r3, [pc, #48]	; (8006230 <prvAddNewTaskToReadyList+0xdc>)
 8006200:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	f3bf 8f4f 	dsb	sy
 800620a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800620e:	bf00      	nop
 8006210:	3708      	adds	r7, #8
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	20000e58 	.word	0x20000e58
 800621c:	20000984 	.word	0x20000984
 8006220:	20000e64 	.word	0x20000e64
 8006224:	20000e74 	.word	0x20000e74
 8006228:	20000e60 	.word	0x20000e60
 800622c:	20000988 	.word	0x20000988
 8006230:	e000ed04 	.word	0xe000ed04

08006234 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006234:	b580      	push	{r7, lr}
 8006236:	b084      	sub	sp, #16
 8006238:	af00      	add	r7, sp, #0
 800623a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d017      	beq.n	8006276 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006246:	4b13      	ldr	r3, [pc, #76]	; (8006294 <vTaskDelay+0x60>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	2b00      	cmp	r3, #0
 800624c:	d00a      	beq.n	8006264 <vTaskDelay+0x30>
	__asm volatile
 800624e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006252:	f383 8811 	msr	BASEPRI, r3
 8006256:	f3bf 8f6f 	isb	sy
 800625a:	f3bf 8f4f 	dsb	sy
 800625e:	60bb      	str	r3, [r7, #8]
}
 8006260:	bf00      	nop
 8006262:	e7fe      	b.n	8006262 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006264:	f000 f88a 	bl	800637c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006268:	2100      	movs	r1, #0
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fe0c 	bl	8006e88 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006270:	f000 f892 	bl	8006398 <xTaskResumeAll>
 8006274:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d107      	bne.n	800628c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800627c:	4b06      	ldr	r3, [pc, #24]	; (8006298 <vTaskDelay+0x64>)
 800627e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006282:	601a      	str	r2, [r3, #0]
 8006284:	f3bf 8f4f 	dsb	sy
 8006288:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800628c:	bf00      	nop
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}
 8006294:	20000e80 	.word	0x20000e80
 8006298:	e000ed04 	.word	0xe000ed04

0800629c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b08a      	sub	sp, #40	; 0x28
 80062a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062a6:	2300      	movs	r3, #0
 80062a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062aa:	463a      	mov	r2, r7
 80062ac:	1d39      	adds	r1, r7, #4
 80062ae:	f107 0308 	add.w	r3, r7, #8
 80062b2:	4618      	mov	r0, r3
 80062b4:	f7fe fc5a 	bl	8004b6c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062b8:	6839      	ldr	r1, [r7, #0]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68ba      	ldr	r2, [r7, #8]
 80062be:	9202      	str	r2, [sp, #8]
 80062c0:	9301      	str	r3, [sp, #4]
 80062c2:	2300      	movs	r3, #0
 80062c4:	9300      	str	r3, [sp, #0]
 80062c6:	2300      	movs	r3, #0
 80062c8:	460a      	mov	r2, r1
 80062ca:	4924      	ldr	r1, [pc, #144]	; (800635c <vTaskStartScheduler+0xc0>)
 80062cc:	4824      	ldr	r0, [pc, #144]	; (8006360 <vTaskStartScheduler+0xc4>)
 80062ce:	f7ff fdf9 	bl	8005ec4 <xTaskCreateStatic>
 80062d2:	4603      	mov	r3, r0
 80062d4:	4a23      	ldr	r2, [pc, #140]	; (8006364 <vTaskStartScheduler+0xc8>)
 80062d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062d8:	4b22      	ldr	r3, [pc, #136]	; (8006364 <vTaskStartScheduler+0xc8>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d002      	beq.n	80062e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062e0:	2301      	movs	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
 80062e4:	e001      	b.n	80062ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062e6:	2300      	movs	r3, #0
 80062e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d102      	bne.n	80062f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062f0:	f000 fe1e 	bl	8006f30 <xTimerCreateTimerTask>
 80062f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	2b01      	cmp	r3, #1
 80062fa:	d11b      	bne.n	8006334 <vTaskStartScheduler+0x98>
	__asm volatile
 80062fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006300:	f383 8811 	msr	BASEPRI, r3
 8006304:	f3bf 8f6f 	isb	sy
 8006308:	f3bf 8f4f 	dsb	sy
 800630c:	613b      	str	r3, [r7, #16]
}
 800630e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006310:	4b15      	ldr	r3, [pc, #84]	; (8006368 <vTaskStartScheduler+0xcc>)
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	3354      	adds	r3, #84	; 0x54
 8006316:	4a15      	ldr	r2, [pc, #84]	; (800636c <vTaskStartScheduler+0xd0>)
 8006318:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800631a:	4b15      	ldr	r3, [pc, #84]	; (8006370 <vTaskStartScheduler+0xd4>)
 800631c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006320:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006322:	4b14      	ldr	r3, [pc, #80]	; (8006374 <vTaskStartScheduler+0xd8>)
 8006324:	2201      	movs	r2, #1
 8006326:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006328:	4b13      	ldr	r3, [pc, #76]	; (8006378 <vTaskStartScheduler+0xdc>)
 800632a:	2200      	movs	r2, #0
 800632c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800632e:	f001 fabf 	bl	80078b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006332:	e00e      	b.n	8006352 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800633a:	d10a      	bne.n	8006352 <vTaskStartScheduler+0xb6>
	__asm volatile
 800633c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006340:	f383 8811 	msr	BASEPRI, r3
 8006344:	f3bf 8f6f 	isb	sy
 8006348:	f3bf 8f4f 	dsb	sy
 800634c:	60fb      	str	r3, [r7, #12]
}
 800634e:	bf00      	nop
 8006350:	e7fe      	b.n	8006350 <vTaskStartScheduler+0xb4>
}
 8006352:	bf00      	nop
 8006354:	3718      	adds	r7, #24
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}
 800635a:	bf00      	nop
 800635c:	0800923c 	.word	0x0800923c
 8006360:	080069a1 	.word	0x080069a1
 8006364:	20000e7c 	.word	0x20000e7c
 8006368:	20000984 	.word	0x20000984
 800636c:	2000006c 	.word	0x2000006c
 8006370:	20000e78 	.word	0x20000e78
 8006374:	20000e64 	.word	0x20000e64
 8006378:	20000e5c 	.word	0x20000e5c

0800637c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800637c:	b480      	push	{r7}
 800637e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006380:	4b04      	ldr	r3, [pc, #16]	; (8006394 <vTaskSuspendAll+0x18>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	3301      	adds	r3, #1
 8006386:	4a03      	ldr	r2, [pc, #12]	; (8006394 <vTaskSuspendAll+0x18>)
 8006388:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800638a:	bf00      	nop
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	20000e80 	.word	0x20000e80

08006398 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b084      	sub	sp, #16
 800639c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800639e:	2300      	movs	r3, #0
 80063a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063a6:	4b42      	ldr	r3, [pc, #264]	; (80064b0 <xTaskResumeAll+0x118>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10a      	bne.n	80063c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	603b      	str	r3, [r7, #0]
}
 80063c0:	bf00      	nop
 80063c2:	e7fe      	b.n	80063c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063c4:	f001 fb16 	bl	80079f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063c8:	4b39      	ldr	r3, [pc, #228]	; (80064b0 <xTaskResumeAll+0x118>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	3b01      	subs	r3, #1
 80063ce:	4a38      	ldr	r2, [pc, #224]	; (80064b0 <xTaskResumeAll+0x118>)
 80063d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063d2:	4b37      	ldr	r3, [pc, #220]	; (80064b0 <xTaskResumeAll+0x118>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d162      	bne.n	80064a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063da:	4b36      	ldr	r3, [pc, #216]	; (80064b4 <xTaskResumeAll+0x11c>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d05e      	beq.n	80064a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063e2:	e02f      	b.n	8006444 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e4:	4b34      	ldr	r3, [pc, #208]	; (80064b8 <xTaskResumeAll+0x120>)
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	68db      	ldr	r3, [r3, #12]
 80063ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3318      	adds	r3, #24
 80063f0:	4618      	mov	r0, r3
 80063f2:	f7fe fc79 	bl	8004ce8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	3304      	adds	r3, #4
 80063fa:	4618      	mov	r0, r3
 80063fc:	f7fe fc74 	bl	8004ce8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006404:	4b2d      	ldr	r3, [pc, #180]	; (80064bc <xTaskResumeAll+0x124>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	429a      	cmp	r2, r3
 800640a:	d903      	bls.n	8006414 <xTaskResumeAll+0x7c>
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006410:	4a2a      	ldr	r2, [pc, #168]	; (80064bc <xTaskResumeAll+0x124>)
 8006412:	6013      	str	r3, [r2, #0]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	4613      	mov	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4413      	add	r3, r2
 800641e:	009b      	lsls	r3, r3, #2
 8006420:	4a27      	ldr	r2, [pc, #156]	; (80064c0 <xTaskResumeAll+0x128>)
 8006422:	441a      	add	r2, r3
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	3304      	adds	r3, #4
 8006428:	4619      	mov	r1, r3
 800642a:	4610      	mov	r0, r2
 800642c:	f7fe fbff 	bl	8004c2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006434:	4b23      	ldr	r3, [pc, #140]	; (80064c4 <xTaskResumeAll+0x12c>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	429a      	cmp	r2, r3
 800643c:	d302      	bcc.n	8006444 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800643e:	4b22      	ldr	r3, [pc, #136]	; (80064c8 <xTaskResumeAll+0x130>)
 8006440:	2201      	movs	r2, #1
 8006442:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006444:	4b1c      	ldr	r3, [pc, #112]	; (80064b8 <xTaskResumeAll+0x120>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d1cb      	bne.n	80063e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d001      	beq.n	8006456 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006452:	f000 fb5f 	bl	8006b14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006456:	4b1d      	ldr	r3, [pc, #116]	; (80064cc <xTaskResumeAll+0x134>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d010      	beq.n	8006484 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006462:	f000 f847 	bl	80064f4 <xTaskIncrementTick>
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d002      	beq.n	8006472 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800646c:	4b16      	ldr	r3, [pc, #88]	; (80064c8 <xTaskResumeAll+0x130>)
 800646e:	2201      	movs	r2, #1
 8006470:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	3b01      	subs	r3, #1
 8006476:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1f1      	bne.n	8006462 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800647e:	4b13      	ldr	r3, [pc, #76]	; (80064cc <xTaskResumeAll+0x134>)
 8006480:	2200      	movs	r2, #0
 8006482:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006484:	4b10      	ldr	r3, [pc, #64]	; (80064c8 <xTaskResumeAll+0x130>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d009      	beq.n	80064a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800648c:	2301      	movs	r3, #1
 800648e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006490:	4b0f      	ldr	r3, [pc, #60]	; (80064d0 <xTaskResumeAll+0x138>)
 8006492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006496:	601a      	str	r2, [r3, #0]
 8006498:	f3bf 8f4f 	dsb	sy
 800649c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064a0:	f001 fad8 	bl	8007a54 <vPortExitCritical>

	return xAlreadyYielded;
 80064a4:	68bb      	ldr	r3, [r7, #8]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop
 80064b0:	20000e80 	.word	0x20000e80
 80064b4:	20000e58 	.word	0x20000e58
 80064b8:	20000e18 	.word	0x20000e18
 80064bc:	20000e60 	.word	0x20000e60
 80064c0:	20000988 	.word	0x20000988
 80064c4:	20000984 	.word	0x20000984
 80064c8:	20000e6c 	.word	0x20000e6c
 80064cc:	20000e68 	.word	0x20000e68
 80064d0:	e000ed04 	.word	0xe000ed04

080064d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064d4:	b480      	push	{r7}
 80064d6:	b083      	sub	sp, #12
 80064d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064da:	4b05      	ldr	r3, [pc, #20]	; (80064f0 <xTaskGetTickCount+0x1c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064e0:	687b      	ldr	r3, [r7, #4]
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
 80064ee:	bf00      	nop
 80064f0:	20000e5c 	.word	0x20000e5c

080064f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b086      	sub	sp, #24
 80064f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064fa:	2300      	movs	r3, #0
 80064fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064fe:	4b4f      	ldr	r3, [pc, #316]	; (800663c <xTaskIncrementTick+0x148>)
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	2b00      	cmp	r3, #0
 8006504:	f040 808f 	bne.w	8006626 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006508:	4b4d      	ldr	r3, [pc, #308]	; (8006640 <xTaskIncrementTick+0x14c>)
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	3301      	adds	r3, #1
 800650e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006510:	4a4b      	ldr	r2, [pc, #300]	; (8006640 <xTaskIncrementTick+0x14c>)
 8006512:	693b      	ldr	r3, [r7, #16]
 8006514:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d120      	bne.n	800655e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800651c:	4b49      	ldr	r3, [pc, #292]	; (8006644 <xTaskIncrementTick+0x150>)
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d00a      	beq.n	800653c <xTaskIncrementTick+0x48>
	__asm volatile
 8006526:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652a:	f383 8811 	msr	BASEPRI, r3
 800652e:	f3bf 8f6f 	isb	sy
 8006532:	f3bf 8f4f 	dsb	sy
 8006536:	603b      	str	r3, [r7, #0]
}
 8006538:	bf00      	nop
 800653a:	e7fe      	b.n	800653a <xTaskIncrementTick+0x46>
 800653c:	4b41      	ldr	r3, [pc, #260]	; (8006644 <xTaskIncrementTick+0x150>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	60fb      	str	r3, [r7, #12]
 8006542:	4b41      	ldr	r3, [pc, #260]	; (8006648 <xTaskIncrementTick+0x154>)
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a3f      	ldr	r2, [pc, #252]	; (8006644 <xTaskIncrementTick+0x150>)
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	4a3f      	ldr	r2, [pc, #252]	; (8006648 <xTaskIncrementTick+0x154>)
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6013      	str	r3, [r2, #0]
 8006550:	4b3e      	ldr	r3, [pc, #248]	; (800664c <xTaskIncrementTick+0x158>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	3301      	adds	r3, #1
 8006556:	4a3d      	ldr	r2, [pc, #244]	; (800664c <xTaskIncrementTick+0x158>)
 8006558:	6013      	str	r3, [r2, #0]
 800655a:	f000 fadb 	bl	8006b14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800655e:	4b3c      	ldr	r3, [pc, #240]	; (8006650 <xTaskIncrementTick+0x15c>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	429a      	cmp	r2, r3
 8006566:	d349      	bcc.n	80065fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006568:	4b36      	ldr	r3, [pc, #216]	; (8006644 <xTaskIncrementTick+0x150>)
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d104      	bne.n	800657c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006572:	4b37      	ldr	r3, [pc, #220]	; (8006650 <xTaskIncrementTick+0x15c>)
 8006574:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006578:	601a      	str	r2, [r3, #0]
					break;
 800657a:	e03f      	b.n	80065fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800657c:	4b31      	ldr	r3, [pc, #196]	; (8006644 <xTaskIncrementTick+0x150>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68db      	ldr	r3, [r3, #12]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	685b      	ldr	r3, [r3, #4]
 800658a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800658c:	693a      	ldr	r2, [r7, #16]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	429a      	cmp	r2, r3
 8006592:	d203      	bcs.n	800659c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006594:	4a2e      	ldr	r2, [pc, #184]	; (8006650 <xTaskIncrementTick+0x15c>)
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800659a:	e02f      	b.n	80065fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800659c:	68bb      	ldr	r3, [r7, #8]
 800659e:	3304      	adds	r3, #4
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7fe fba1 	bl	8004ce8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d004      	beq.n	80065b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	3318      	adds	r3, #24
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7fe fb98 	bl	8004ce8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065bc:	4b25      	ldr	r3, [pc, #148]	; (8006654 <xTaskIncrementTick+0x160>)
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	429a      	cmp	r2, r3
 80065c2:	d903      	bls.n	80065cc <xTaskIncrementTick+0xd8>
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c8:	4a22      	ldr	r2, [pc, #136]	; (8006654 <xTaskIncrementTick+0x160>)
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	4613      	mov	r3, r2
 80065d2:	009b      	lsls	r3, r3, #2
 80065d4:	4413      	add	r3, r2
 80065d6:	009b      	lsls	r3, r3, #2
 80065d8:	4a1f      	ldr	r2, [pc, #124]	; (8006658 <xTaskIncrementTick+0x164>)
 80065da:	441a      	add	r2, r3
 80065dc:	68bb      	ldr	r3, [r7, #8]
 80065de:	3304      	adds	r3, #4
 80065e0:	4619      	mov	r1, r3
 80065e2:	4610      	mov	r0, r2
 80065e4:	f7fe fb23 	bl	8004c2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ec:	4b1b      	ldr	r3, [pc, #108]	; (800665c <xTaskIncrementTick+0x168>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f2:	429a      	cmp	r2, r3
 80065f4:	d3b8      	bcc.n	8006568 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80065f6:	2301      	movs	r3, #1
 80065f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065fa:	e7b5      	b.n	8006568 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065fc:	4b17      	ldr	r3, [pc, #92]	; (800665c <xTaskIncrementTick+0x168>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006602:	4915      	ldr	r1, [pc, #84]	; (8006658 <xTaskIncrementTick+0x164>)
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	440b      	add	r3, r1
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2b01      	cmp	r3, #1
 8006612:	d901      	bls.n	8006618 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006614:	2301      	movs	r3, #1
 8006616:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006618:	4b11      	ldr	r3, [pc, #68]	; (8006660 <xTaskIncrementTick+0x16c>)
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006620:	2301      	movs	r3, #1
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	e004      	b.n	8006630 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006626:	4b0f      	ldr	r3, [pc, #60]	; (8006664 <xTaskIncrementTick+0x170>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	3301      	adds	r3, #1
 800662c:	4a0d      	ldr	r2, [pc, #52]	; (8006664 <xTaskIncrementTick+0x170>)
 800662e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006630:	697b      	ldr	r3, [r7, #20]
}
 8006632:	4618      	mov	r0, r3
 8006634:	3718      	adds	r7, #24
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	20000e80 	.word	0x20000e80
 8006640:	20000e5c 	.word	0x20000e5c
 8006644:	20000e10 	.word	0x20000e10
 8006648:	20000e14 	.word	0x20000e14
 800664c:	20000e70 	.word	0x20000e70
 8006650:	20000e78 	.word	0x20000e78
 8006654:	20000e60 	.word	0x20000e60
 8006658:	20000988 	.word	0x20000988
 800665c:	20000984 	.word	0x20000984
 8006660:	20000e6c 	.word	0x20000e6c
 8006664:	20000e68 	.word	0x20000e68

08006668 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006668:	b480      	push	{r7}
 800666a:	b085      	sub	sp, #20
 800666c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800666e:	4b2a      	ldr	r3, [pc, #168]	; (8006718 <vTaskSwitchContext+0xb0>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2b00      	cmp	r3, #0
 8006674:	d003      	beq.n	800667e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006676:	4b29      	ldr	r3, [pc, #164]	; (800671c <vTaskSwitchContext+0xb4>)
 8006678:	2201      	movs	r2, #1
 800667a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800667c:	e046      	b.n	800670c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800667e:	4b27      	ldr	r3, [pc, #156]	; (800671c <vTaskSwitchContext+0xb4>)
 8006680:	2200      	movs	r2, #0
 8006682:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006684:	4b26      	ldr	r3, [pc, #152]	; (8006720 <vTaskSwitchContext+0xb8>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	e010      	b.n	80066ae <vTaskSwitchContext+0x46>
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	2b00      	cmp	r3, #0
 8006690:	d10a      	bne.n	80066a8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006696:	f383 8811 	msr	BASEPRI, r3
 800669a:	f3bf 8f6f 	isb	sy
 800669e:	f3bf 8f4f 	dsb	sy
 80066a2:	607b      	str	r3, [r7, #4]
}
 80066a4:	bf00      	nop
 80066a6:	e7fe      	b.n	80066a6 <vTaskSwitchContext+0x3e>
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	3b01      	subs	r3, #1
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	491d      	ldr	r1, [pc, #116]	; (8006724 <vTaskSwitchContext+0xbc>)
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4613      	mov	r3, r2
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	009b      	lsls	r3, r3, #2
 80066ba:	440b      	add	r3, r1
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0e4      	beq.n	800668c <vTaskSwitchContext+0x24>
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4613      	mov	r3, r2
 80066c6:	009b      	lsls	r3, r3, #2
 80066c8:	4413      	add	r3, r2
 80066ca:	009b      	lsls	r3, r3, #2
 80066cc:	4a15      	ldr	r2, [pc, #84]	; (8006724 <vTaskSwitchContext+0xbc>)
 80066ce:	4413      	add	r3, r2
 80066d0:	60bb      	str	r3, [r7, #8]
 80066d2:	68bb      	ldr	r3, [r7, #8]
 80066d4:	685b      	ldr	r3, [r3, #4]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	605a      	str	r2, [r3, #4]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	685a      	ldr	r2, [r3, #4]
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	3308      	adds	r3, #8
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d104      	bne.n	80066f2 <vTaskSwitchContext+0x8a>
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	685b      	ldr	r3, [r3, #4]
 80066ec:	685a      	ldr	r2, [r3, #4]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	605a      	str	r2, [r3, #4]
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	4a0b      	ldr	r2, [pc, #44]	; (8006728 <vTaskSwitchContext+0xc0>)
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	4a08      	ldr	r2, [pc, #32]	; (8006720 <vTaskSwitchContext+0xb8>)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006702:	4b09      	ldr	r3, [pc, #36]	; (8006728 <vTaskSwitchContext+0xc0>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	3354      	adds	r3, #84	; 0x54
 8006708:	4a08      	ldr	r2, [pc, #32]	; (800672c <vTaskSwitchContext+0xc4>)
 800670a:	6013      	str	r3, [r2, #0]
}
 800670c:	bf00      	nop
 800670e:	3714      	adds	r7, #20
 8006710:	46bd      	mov	sp, r7
 8006712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006716:	4770      	bx	lr
 8006718:	20000e80 	.word	0x20000e80
 800671c:	20000e6c 	.word	0x20000e6c
 8006720:	20000e60 	.word	0x20000e60
 8006724:	20000988 	.word	0x20000988
 8006728:	20000984 	.word	0x20000984
 800672c:	2000006c 	.word	0x2000006c

08006730 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006730:	b580      	push	{r7, lr}
 8006732:	b084      	sub	sp, #16
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d10a      	bne.n	8006756 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006744:	f383 8811 	msr	BASEPRI, r3
 8006748:	f3bf 8f6f 	isb	sy
 800674c:	f3bf 8f4f 	dsb	sy
 8006750:	60fb      	str	r3, [r7, #12]
}
 8006752:	bf00      	nop
 8006754:	e7fe      	b.n	8006754 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006756:	4b07      	ldr	r3, [pc, #28]	; (8006774 <vTaskPlaceOnEventList+0x44>)
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	3318      	adds	r3, #24
 800675c:	4619      	mov	r1, r3
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f7fe fa89 	bl	8004c76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006764:	2101      	movs	r1, #1
 8006766:	6838      	ldr	r0, [r7, #0]
 8006768:	f000 fb8e 	bl	8006e88 <prvAddCurrentTaskToDelayedList>
}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	20000984 	.word	0x20000984

08006778 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006778:	b580      	push	{r7, lr}
 800677a:	b086      	sub	sp, #24
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d10a      	bne.n	80067a0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800678a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800678e:	f383 8811 	msr	BASEPRI, r3
 8006792:	f3bf 8f6f 	isb	sy
 8006796:	f3bf 8f4f 	dsb	sy
 800679a:	617b      	str	r3, [r7, #20]
}
 800679c:	bf00      	nop
 800679e:	e7fe      	b.n	800679e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067a0:	4b0a      	ldr	r3, [pc, #40]	; (80067cc <vTaskPlaceOnEventListRestricted+0x54>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	3318      	adds	r3, #24
 80067a6:	4619      	mov	r1, r3
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f7fe fa40 	bl	8004c2e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d002      	beq.n	80067ba <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067ba:	6879      	ldr	r1, [r7, #4]
 80067bc:	68b8      	ldr	r0, [r7, #8]
 80067be:	f000 fb63 	bl	8006e88 <prvAddCurrentTaskToDelayedList>
	}
 80067c2:	bf00      	nop
 80067c4:	3718      	adds	r7, #24
 80067c6:	46bd      	mov	sp, r7
 80067c8:	bd80      	pop	{r7, pc}
 80067ca:	bf00      	nop
 80067cc:	20000984 	.word	0x20000984

080067d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	68db      	ldr	r3, [r3, #12]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067e0:	693b      	ldr	r3, [r7, #16]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d10a      	bne.n	80067fc <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067ea:	f383 8811 	msr	BASEPRI, r3
 80067ee:	f3bf 8f6f 	isb	sy
 80067f2:	f3bf 8f4f 	dsb	sy
 80067f6:	60fb      	str	r3, [r7, #12]
}
 80067f8:	bf00      	nop
 80067fa:	e7fe      	b.n	80067fa <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	3318      	adds	r3, #24
 8006800:	4618      	mov	r0, r3
 8006802:	f7fe fa71 	bl	8004ce8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006806:	4b1e      	ldr	r3, [pc, #120]	; (8006880 <xTaskRemoveFromEventList+0xb0>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d11d      	bne.n	800684a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800680e:	693b      	ldr	r3, [r7, #16]
 8006810:	3304      	adds	r3, #4
 8006812:	4618      	mov	r0, r3
 8006814:	f7fe fa68 	bl	8004ce8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800681c:	4b19      	ldr	r3, [pc, #100]	; (8006884 <xTaskRemoveFromEventList+0xb4>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	429a      	cmp	r2, r3
 8006822:	d903      	bls.n	800682c <xTaskRemoveFromEventList+0x5c>
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	4a16      	ldr	r2, [pc, #88]	; (8006884 <xTaskRemoveFromEventList+0xb4>)
 800682a:	6013      	str	r3, [r2, #0]
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006830:	4613      	mov	r3, r2
 8006832:	009b      	lsls	r3, r3, #2
 8006834:	4413      	add	r3, r2
 8006836:	009b      	lsls	r3, r3, #2
 8006838:	4a13      	ldr	r2, [pc, #76]	; (8006888 <xTaskRemoveFromEventList+0xb8>)
 800683a:	441a      	add	r2, r3
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	3304      	adds	r3, #4
 8006840:	4619      	mov	r1, r3
 8006842:	4610      	mov	r0, r2
 8006844:	f7fe f9f3 	bl	8004c2e <vListInsertEnd>
 8006848:	e005      	b.n	8006856 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800684a:	693b      	ldr	r3, [r7, #16]
 800684c:	3318      	adds	r3, #24
 800684e:	4619      	mov	r1, r3
 8006850:	480e      	ldr	r0, [pc, #56]	; (800688c <xTaskRemoveFromEventList+0xbc>)
 8006852:	f7fe f9ec 	bl	8004c2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <xTaskRemoveFromEventList+0xc0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006860:	429a      	cmp	r2, r3
 8006862:	d905      	bls.n	8006870 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006864:	2301      	movs	r3, #1
 8006866:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <xTaskRemoveFromEventList+0xc4>)
 800686a:	2201      	movs	r2, #1
 800686c:	601a      	str	r2, [r3, #0]
 800686e:	e001      	b.n	8006874 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006870:	2300      	movs	r3, #0
 8006872:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006874:	697b      	ldr	r3, [r7, #20]
}
 8006876:	4618      	mov	r0, r3
 8006878:	3718      	adds	r7, #24
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	20000e80 	.word	0x20000e80
 8006884:	20000e60 	.word	0x20000e60
 8006888:	20000988 	.word	0x20000988
 800688c:	20000e18 	.word	0x20000e18
 8006890:	20000984 	.word	0x20000984
 8006894:	20000e6c 	.word	0x20000e6c

08006898 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068a0:	4b06      	ldr	r3, [pc, #24]	; (80068bc <vTaskInternalSetTimeOutState+0x24>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068a8:	4b05      	ldr	r3, [pc, #20]	; (80068c0 <vTaskInternalSetTimeOutState+0x28>)
 80068aa:	681a      	ldr	r2, [r3, #0]
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	605a      	str	r2, [r3, #4]
}
 80068b0:	bf00      	nop
 80068b2:	370c      	adds	r7, #12
 80068b4:	46bd      	mov	sp, r7
 80068b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ba:	4770      	bx	lr
 80068bc:	20000e70 	.word	0x20000e70
 80068c0:	20000e5c 	.word	0x20000e5c

080068c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b088      	sub	sp, #32
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d10a      	bne.n	80068ea <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d8:	f383 8811 	msr	BASEPRI, r3
 80068dc:	f3bf 8f6f 	isb	sy
 80068e0:	f3bf 8f4f 	dsb	sy
 80068e4:	613b      	str	r3, [r7, #16]
}
 80068e6:	bf00      	nop
 80068e8:	e7fe      	b.n	80068e8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d10a      	bne.n	8006906 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f4:	f383 8811 	msr	BASEPRI, r3
 80068f8:	f3bf 8f6f 	isb	sy
 80068fc:	f3bf 8f4f 	dsb	sy
 8006900:	60fb      	str	r3, [r7, #12]
}
 8006902:	bf00      	nop
 8006904:	e7fe      	b.n	8006904 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006906:	f001 f875 	bl	80079f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800690a:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <xTaskCheckForTimeOut+0xbc>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	69ba      	ldr	r2, [r7, #24]
 8006916:	1ad3      	subs	r3, r2, r3
 8006918:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006922:	d102      	bne.n	800692a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006924:	2300      	movs	r3, #0
 8006926:	61fb      	str	r3, [r7, #28]
 8006928:	e023      	b.n	8006972 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681a      	ldr	r2, [r3, #0]
 800692e:	4b15      	ldr	r3, [pc, #84]	; (8006984 <xTaskCheckForTimeOut+0xc0>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	429a      	cmp	r2, r3
 8006934:	d007      	beq.n	8006946 <xTaskCheckForTimeOut+0x82>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	429a      	cmp	r2, r3
 800693e:	d302      	bcc.n	8006946 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006940:	2301      	movs	r3, #1
 8006942:	61fb      	str	r3, [r7, #28]
 8006944:	e015      	b.n	8006972 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	697a      	ldr	r2, [r7, #20]
 800694c:	429a      	cmp	r2, r3
 800694e:	d20b      	bcs.n	8006968 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	681a      	ldr	r2, [r3, #0]
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	1ad2      	subs	r2, r2, r3
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	f7ff ff9b 	bl	8006898 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
 8006966:	e004      	b.n	8006972 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	2200      	movs	r2, #0
 800696c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800696e:	2301      	movs	r3, #1
 8006970:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006972:	f001 f86f 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 8006976:	69fb      	ldr	r3, [r7, #28]
}
 8006978:	4618      	mov	r0, r3
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}
 8006980:	20000e5c 	.word	0x20000e5c
 8006984:	20000e70 	.word	0x20000e70

08006988 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006988:	b480      	push	{r7}
 800698a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800698c:	4b03      	ldr	r3, [pc, #12]	; (800699c <vTaskMissedYield+0x14>)
 800698e:	2201      	movs	r2, #1
 8006990:	601a      	str	r2, [r3, #0]
}
 8006992:	bf00      	nop
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr
 800699c:	20000e6c 	.word	0x20000e6c

080069a0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b082      	sub	sp, #8
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069a8:	f000 f852 	bl	8006a50 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069ac:	4b06      	ldr	r3, [pc, #24]	; (80069c8 <prvIdleTask+0x28>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b01      	cmp	r3, #1
 80069b2:	d9f9      	bls.n	80069a8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069b4:	4b05      	ldr	r3, [pc, #20]	; (80069cc <prvIdleTask+0x2c>)
 80069b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ba:	601a      	str	r2, [r3, #0]
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069c4:	e7f0      	b.n	80069a8 <prvIdleTask+0x8>
 80069c6:	bf00      	nop
 80069c8:	20000988 	.word	0x20000988
 80069cc:	e000ed04 	.word	0xe000ed04

080069d0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069d6:	2300      	movs	r3, #0
 80069d8:	607b      	str	r3, [r7, #4]
 80069da:	e00c      	b.n	80069f6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	4613      	mov	r3, r2
 80069e0:	009b      	lsls	r3, r3, #2
 80069e2:	4413      	add	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4a12      	ldr	r2, [pc, #72]	; (8006a30 <prvInitialiseTaskLists+0x60>)
 80069e8:	4413      	add	r3, r2
 80069ea:	4618      	mov	r0, r3
 80069ec:	f7fe f8f2 	bl	8004bd4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	3301      	adds	r3, #1
 80069f4:	607b      	str	r3, [r7, #4]
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2b37      	cmp	r3, #55	; 0x37
 80069fa:	d9ef      	bls.n	80069dc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069fc:	480d      	ldr	r0, [pc, #52]	; (8006a34 <prvInitialiseTaskLists+0x64>)
 80069fe:	f7fe f8e9 	bl	8004bd4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a02:	480d      	ldr	r0, [pc, #52]	; (8006a38 <prvInitialiseTaskLists+0x68>)
 8006a04:	f7fe f8e6 	bl	8004bd4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a08:	480c      	ldr	r0, [pc, #48]	; (8006a3c <prvInitialiseTaskLists+0x6c>)
 8006a0a:	f7fe f8e3 	bl	8004bd4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a0e:	480c      	ldr	r0, [pc, #48]	; (8006a40 <prvInitialiseTaskLists+0x70>)
 8006a10:	f7fe f8e0 	bl	8004bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a14:	480b      	ldr	r0, [pc, #44]	; (8006a44 <prvInitialiseTaskLists+0x74>)
 8006a16:	f7fe f8dd 	bl	8004bd4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a1a:	4b0b      	ldr	r3, [pc, #44]	; (8006a48 <prvInitialiseTaskLists+0x78>)
 8006a1c:	4a05      	ldr	r2, [pc, #20]	; (8006a34 <prvInitialiseTaskLists+0x64>)
 8006a1e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <prvInitialiseTaskLists+0x7c>)
 8006a22:	4a05      	ldr	r2, [pc, #20]	; (8006a38 <prvInitialiseTaskLists+0x68>)
 8006a24:	601a      	str	r2, [r3, #0]
}
 8006a26:	bf00      	nop
 8006a28:	3708      	adds	r7, #8
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	20000988 	.word	0x20000988
 8006a34:	20000de8 	.word	0x20000de8
 8006a38:	20000dfc 	.word	0x20000dfc
 8006a3c:	20000e18 	.word	0x20000e18
 8006a40:	20000e2c 	.word	0x20000e2c
 8006a44:	20000e44 	.word	0x20000e44
 8006a48:	20000e10 	.word	0x20000e10
 8006a4c:	20000e14 	.word	0x20000e14

08006a50 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b082      	sub	sp, #8
 8006a54:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a56:	e019      	b.n	8006a8c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a58:	f000 ffcc 	bl	80079f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a5c:	4b10      	ldr	r3, [pc, #64]	; (8006aa0 <prvCheckTasksWaitingTermination+0x50>)
 8006a5e:	68db      	ldr	r3, [r3, #12]
 8006a60:	68db      	ldr	r3, [r3, #12]
 8006a62:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	3304      	adds	r3, #4
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f7fe f93d 	bl	8004ce8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <prvCheckTasksWaitingTermination+0x54>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	3b01      	subs	r3, #1
 8006a74:	4a0b      	ldr	r2, [pc, #44]	; (8006aa4 <prvCheckTasksWaitingTermination+0x54>)
 8006a76:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a78:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <prvCheckTasksWaitingTermination+0x58>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <prvCheckTasksWaitingTermination+0x58>)
 8006a80:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a82:	f000 ffe7 	bl	8007a54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 f810 	bl	8006aac <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a8c:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <prvCheckTasksWaitingTermination+0x58>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d1e1      	bne.n	8006a58 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	3708      	adds	r7, #8
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
 8006a9e:	bf00      	nop
 8006aa0:	20000e2c 	.word	0x20000e2c
 8006aa4:	20000e58 	.word	0x20000e58
 8006aa8:	20000e40 	.word	0x20000e40

08006aac <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b084      	sub	sp, #16
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3354      	adds	r3, #84	; 0x54
 8006ab8:	4618      	mov	r0, r3
 8006aba:	f001 fbef 	bl	800829c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d108      	bne.n	8006ada <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006acc:	4618      	mov	r0, r3
 8006ace:	f001 f97f 	bl	8007dd0 <vPortFree>
				vPortFree( pxTCB );
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f001 f97c 	bl	8007dd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ad8:	e018      	b.n	8006b0c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ae0:	2b01      	cmp	r3, #1
 8006ae2:	d103      	bne.n	8006aec <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f001 f973 	bl	8007dd0 <vPortFree>
	}
 8006aea:	e00f      	b.n	8006b0c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d00a      	beq.n	8006b0c <prvDeleteTCB+0x60>
	__asm volatile
 8006af6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afa:	f383 8811 	msr	BASEPRI, r3
 8006afe:	f3bf 8f6f 	isb	sy
 8006b02:	f3bf 8f4f 	dsb	sy
 8006b06:	60fb      	str	r3, [r7, #12]
}
 8006b08:	bf00      	nop
 8006b0a:	e7fe      	b.n	8006b0a <prvDeleteTCB+0x5e>
	}
 8006b0c:	bf00      	nop
 8006b0e:	3710      	adds	r7, #16
 8006b10:	46bd      	mov	sp, r7
 8006b12:	bd80      	pop	{r7, pc}

08006b14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b14:	b480      	push	{r7}
 8006b16:	b083      	sub	sp, #12
 8006b18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b1a:	4b0c      	ldr	r3, [pc, #48]	; (8006b4c <prvResetNextTaskUnblockTime+0x38>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d104      	bne.n	8006b2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b24:	4b0a      	ldr	r3, [pc, #40]	; (8006b50 <prvResetNextTaskUnblockTime+0x3c>)
 8006b26:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b2c:	e008      	b.n	8006b40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b2e:	4b07      	ldr	r3, [pc, #28]	; (8006b4c <prvResetNextTaskUnblockTime+0x38>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68db      	ldr	r3, [r3, #12]
 8006b34:	68db      	ldr	r3, [r3, #12]
 8006b36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	4a04      	ldr	r2, [pc, #16]	; (8006b50 <prvResetNextTaskUnblockTime+0x3c>)
 8006b3e:	6013      	str	r3, [r2, #0]
}
 8006b40:	bf00      	nop
 8006b42:	370c      	adds	r7, #12
 8006b44:	46bd      	mov	sp, r7
 8006b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4a:	4770      	bx	lr
 8006b4c:	20000e10 	.word	0x20000e10
 8006b50:	20000e78 	.word	0x20000e78

08006b54 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006b54:	b480      	push	{r7}
 8006b56:	b083      	sub	sp, #12
 8006b58:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006b5a:	4b05      	ldr	r3, [pc, #20]	; (8006b70 <xTaskGetCurrentTaskHandle+0x1c>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006b60:	687b      	ldr	r3, [r7, #4]
	}
 8006b62:	4618      	mov	r0, r3
 8006b64:	370c      	adds	r7, #12
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr
 8006b6e:	bf00      	nop
 8006b70:	20000984 	.word	0x20000984

08006b74 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b7a:	4b0b      	ldr	r3, [pc, #44]	; (8006ba8 <xTaskGetSchedulerState+0x34>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d102      	bne.n	8006b88 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b82:	2301      	movs	r3, #1
 8006b84:	607b      	str	r3, [r7, #4]
 8006b86:	e008      	b.n	8006b9a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b88:	4b08      	ldr	r3, [pc, #32]	; (8006bac <xTaskGetSchedulerState+0x38>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d102      	bne.n	8006b96 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b90:	2302      	movs	r3, #2
 8006b92:	607b      	str	r3, [r7, #4]
 8006b94:	e001      	b.n	8006b9a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b96:	2300      	movs	r3, #0
 8006b98:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b9a:	687b      	ldr	r3, [r7, #4]
	}
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	20000e64 	.word	0x20000e64
 8006bac:	20000e80 	.word	0x20000e80

08006bb0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b084      	sub	sp, #16
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d051      	beq.n	8006c6a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bca:	4b2a      	ldr	r3, [pc, #168]	; (8006c74 <xTaskPriorityInherit+0xc4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d241      	bcs.n	8006c58 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	db06      	blt.n	8006bea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bdc:	4b25      	ldr	r3, [pc, #148]	; (8006c74 <xTaskPriorityInherit+0xc4>)
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006be2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006bea:	68bb      	ldr	r3, [r7, #8]
 8006bec:	6959      	ldr	r1, [r3, #20]
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4a1f      	ldr	r2, [pc, #124]	; (8006c78 <xTaskPriorityInherit+0xc8>)
 8006bfc:	4413      	add	r3, r2
 8006bfe:	4299      	cmp	r1, r3
 8006c00:	d122      	bne.n	8006c48 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7fe f86e 	bl	8004ce8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c0c:	4b19      	ldr	r3, [pc, #100]	; (8006c74 <xTaskPriorityInherit+0xc4>)
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c16:	68bb      	ldr	r3, [r7, #8]
 8006c18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c1a:	4b18      	ldr	r3, [pc, #96]	; (8006c7c <xTaskPriorityInherit+0xcc>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	429a      	cmp	r2, r3
 8006c20:	d903      	bls.n	8006c2a <xTaskPriorityInherit+0x7a>
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c26:	4a15      	ldr	r2, [pc, #84]	; (8006c7c <xTaskPriorityInherit+0xcc>)
 8006c28:	6013      	str	r3, [r2, #0]
 8006c2a:	68bb      	ldr	r3, [r7, #8]
 8006c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c2e:	4613      	mov	r3, r2
 8006c30:	009b      	lsls	r3, r3, #2
 8006c32:	4413      	add	r3, r2
 8006c34:	009b      	lsls	r3, r3, #2
 8006c36:	4a10      	ldr	r2, [pc, #64]	; (8006c78 <xTaskPriorityInherit+0xc8>)
 8006c38:	441a      	add	r2, r3
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	3304      	adds	r3, #4
 8006c3e:	4619      	mov	r1, r3
 8006c40:	4610      	mov	r0, r2
 8006c42:	f7fd fff4 	bl	8004c2e <vListInsertEnd>
 8006c46:	e004      	b.n	8006c52 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c48:	4b0a      	ldr	r3, [pc, #40]	; (8006c74 <xTaskPriorityInherit+0xc4>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4e:	68bb      	ldr	r3, [r7, #8]
 8006c50:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c52:	2301      	movs	r3, #1
 8006c54:	60fb      	str	r3, [r7, #12]
 8006c56:	e008      	b.n	8006c6a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c5c:	4b05      	ldr	r3, [pc, #20]	; (8006c74 <xTaskPriorityInherit+0xc4>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d201      	bcs.n	8006c6a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006c66:	2301      	movs	r3, #1
 8006c68:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
	}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3710      	adds	r7, #16
 8006c70:	46bd      	mov	sp, r7
 8006c72:	bd80      	pop	{r7, pc}
 8006c74:	20000984 	.word	0x20000984
 8006c78:	20000988 	.word	0x20000988
 8006c7c:	20000e60 	.word	0x20000e60

08006c80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b086      	sub	sp, #24
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c8c:	2300      	movs	r3, #0
 8006c8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d056      	beq.n	8006d44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c96:	4b2e      	ldr	r3, [pc, #184]	; (8006d50 <xTaskPriorityDisinherit+0xd0>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	693a      	ldr	r2, [r7, #16]
 8006c9c:	429a      	cmp	r2, r3
 8006c9e:	d00a      	beq.n	8006cb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	e7fe      	b.n	8006cb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cb6:	693b      	ldr	r3, [r7, #16]
 8006cb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d10a      	bne.n	8006cd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cc2:	f383 8811 	msr	BASEPRI, r3
 8006cc6:	f3bf 8f6f 	isb	sy
 8006cca:	f3bf 8f4f 	dsb	sy
 8006cce:	60bb      	str	r3, [r7, #8]
}
 8006cd0:	bf00      	nop
 8006cd2:	e7fe      	b.n	8006cd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd8:	1e5a      	subs	r2, r3, #1
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d02c      	beq.n	8006d44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d128      	bne.n	8006d44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cf2:	693b      	ldr	r3, [r7, #16]
 8006cf4:	3304      	adds	r3, #4
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fd fff6 	bl	8004ce8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d0c:	693b      	ldr	r3, [r7, #16]
 8006d0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d14:	4b0f      	ldr	r3, [pc, #60]	; (8006d54 <xTaskPriorityDisinherit+0xd4>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d903      	bls.n	8006d24 <xTaskPriorityDisinherit+0xa4>
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d20:	4a0c      	ldr	r2, [pc, #48]	; (8006d54 <xTaskPriorityDisinherit+0xd4>)
 8006d22:	6013      	str	r3, [r2, #0]
 8006d24:	693b      	ldr	r3, [r7, #16]
 8006d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d28:	4613      	mov	r3, r2
 8006d2a:	009b      	lsls	r3, r3, #2
 8006d2c:	4413      	add	r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	4a09      	ldr	r2, [pc, #36]	; (8006d58 <xTaskPriorityDisinherit+0xd8>)
 8006d32:	441a      	add	r2, r3
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	3304      	adds	r3, #4
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4610      	mov	r0, r2
 8006d3c:	f7fd ff77 	bl	8004c2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d40:	2301      	movs	r3, #1
 8006d42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d44:	697b      	ldr	r3, [r7, #20]
	}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3718      	adds	r7, #24
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000984 	.word	0x20000984
 8006d54:	20000e60 	.word	0x20000e60
 8006d58:	20000988 	.word	0x20000988

08006d5c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	b088      	sub	sp, #32
 8006d60:	af00      	add	r7, sp, #0
 8006d62:	6078      	str	r0, [r7, #4]
 8006d64:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d6a:	2301      	movs	r3, #1
 8006d6c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d06a      	beq.n	8006e4a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d74:	69bb      	ldr	r3, [r7, #24]
 8006d76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d10a      	bne.n	8006d92 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006d7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d80:	f383 8811 	msr	BASEPRI, r3
 8006d84:	f3bf 8f6f 	isb	sy
 8006d88:	f3bf 8f4f 	dsb	sy
 8006d8c:	60fb      	str	r3, [r7, #12]
}
 8006d8e:	bf00      	nop
 8006d90:	e7fe      	b.n	8006d90 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d92:	69bb      	ldr	r3, [r7, #24]
 8006d94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d96:	683a      	ldr	r2, [r7, #0]
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d902      	bls.n	8006da2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	61fb      	str	r3, [r7, #28]
 8006da0:	e002      	b.n	8006da8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006da2:	69bb      	ldr	r3, [r7, #24]
 8006da4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006da6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dac:	69fa      	ldr	r2, [r7, #28]
 8006dae:	429a      	cmp	r2, r3
 8006db0:	d04b      	beq.n	8006e4a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006db2:	69bb      	ldr	r3, [r7, #24]
 8006db4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	429a      	cmp	r2, r3
 8006dba:	d146      	bne.n	8006e4a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006dbc:	4b25      	ldr	r3, [pc, #148]	; (8006e54 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	69ba      	ldr	r2, [r7, #24]
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d10a      	bne.n	8006ddc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dca:	f383 8811 	msr	BASEPRI, r3
 8006dce:	f3bf 8f6f 	isb	sy
 8006dd2:	f3bf 8f4f 	dsb	sy
 8006dd6:	60bb      	str	r3, [r7, #8]
}
 8006dd8:	bf00      	nop
 8006dda:	e7fe      	b.n	8006dda <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006de2:	69bb      	ldr	r3, [r7, #24]
 8006de4:	69fa      	ldr	r2, [r7, #28]
 8006de6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	699b      	ldr	r3, [r3, #24]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	db04      	blt.n	8006dfa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006df6:	69bb      	ldr	r3, [r7, #24]
 8006df8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	6959      	ldr	r1, [r3, #20]
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4613      	mov	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	4413      	add	r3, r2
 8006e06:	009b      	lsls	r3, r3, #2
 8006e08:	4a13      	ldr	r2, [pc, #76]	; (8006e58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e0a:	4413      	add	r3, r2
 8006e0c:	4299      	cmp	r1, r3
 8006e0e:	d11c      	bne.n	8006e4a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	3304      	adds	r3, #4
 8006e14:	4618      	mov	r0, r3
 8006e16:	f7fd ff67 	bl	8004ce8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e1a:	69bb      	ldr	r3, [r7, #24]
 8006e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e1e:	4b0f      	ldr	r3, [pc, #60]	; (8006e5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d903      	bls.n	8006e2e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e2a:	4a0c      	ldr	r2, [pc, #48]	; (8006e5c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e2c:	6013      	str	r3, [r2, #0]
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e32:	4613      	mov	r3, r2
 8006e34:	009b      	lsls	r3, r3, #2
 8006e36:	4413      	add	r3, r2
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4a07      	ldr	r2, [pc, #28]	; (8006e58 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e3c:	441a      	add	r2, r3
 8006e3e:	69bb      	ldr	r3, [r7, #24]
 8006e40:	3304      	adds	r3, #4
 8006e42:	4619      	mov	r1, r3
 8006e44:	4610      	mov	r0, r2
 8006e46:	f7fd fef2 	bl	8004c2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e4a:	bf00      	nop
 8006e4c:	3720      	adds	r7, #32
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop
 8006e54:	20000984 	.word	0x20000984
 8006e58:	20000988 	.word	0x20000988
 8006e5c:	20000e60 	.word	0x20000e60

08006e60 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e60:	b480      	push	{r7}
 8006e62:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e64:	4b07      	ldr	r3, [pc, #28]	; (8006e84 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d004      	beq.n	8006e76 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e6c:	4b05      	ldr	r3, [pc, #20]	; (8006e84 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e72:	3201      	adds	r2, #1
 8006e74:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006e76:	4b03      	ldr	r3, [pc, #12]	; (8006e84 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e78:	681b      	ldr	r3, [r3, #0]
	}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr
 8006e84:	20000984 	.word	0x20000984

08006e88 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e92:	4b21      	ldr	r3, [pc, #132]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e98:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	3304      	adds	r3, #4
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fd ff22 	bl	8004ce8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006eaa:	d10a      	bne.n	8006ec2 <prvAddCurrentTaskToDelayedList+0x3a>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d007      	beq.n	8006ec2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eb2:	4b1a      	ldr	r3, [pc, #104]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	3304      	adds	r3, #4
 8006eb8:	4619      	mov	r1, r3
 8006eba:	4819      	ldr	r0, [pc, #100]	; (8006f20 <prvAddCurrentTaskToDelayedList+0x98>)
 8006ebc:	f7fd feb7 	bl	8004c2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006ec0:	e026      	b.n	8006f10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006ec2:	68fa      	ldr	r2, [r7, #12]
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4413      	add	r3, r2
 8006ec8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006eca:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ed2:	68ba      	ldr	r2, [r7, #8]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d209      	bcs.n	8006eee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eda:	4b12      	ldr	r3, [pc, #72]	; (8006f24 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006edc:	681a      	ldr	r2, [r3, #0]
 8006ede:	4b0f      	ldr	r3, [pc, #60]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	3304      	adds	r3, #4
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	4610      	mov	r0, r2
 8006ee8:	f7fd fec5 	bl	8004c76 <vListInsert>
}
 8006eec:	e010      	b.n	8006f10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eee:	4b0e      	ldr	r3, [pc, #56]	; (8006f28 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ef0:	681a      	ldr	r2, [r3, #0]
 8006ef2:	4b0a      	ldr	r3, [pc, #40]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x94>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3304      	adds	r3, #4
 8006ef8:	4619      	mov	r1, r3
 8006efa:	4610      	mov	r0, r2
 8006efc:	f7fd febb 	bl	8004c76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006f00:	4b0a      	ldr	r3, [pc, #40]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	68ba      	ldr	r2, [r7, #8]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	d202      	bcs.n	8006f10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f0a:	4a08      	ldr	r2, [pc, #32]	; (8006f2c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	6013      	str	r3, [r2, #0]
}
 8006f10:	bf00      	nop
 8006f12:	3710      	adds	r7, #16
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000e5c 	.word	0x20000e5c
 8006f1c:	20000984 	.word	0x20000984
 8006f20:	20000e44 	.word	0x20000e44
 8006f24:	20000e14 	.word	0x20000e14
 8006f28:	20000e10 	.word	0x20000e10
 8006f2c:	20000e78 	.word	0x20000e78

08006f30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b08a      	sub	sp, #40	; 0x28
 8006f34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f36:	2300      	movs	r3, #0
 8006f38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f3a:	f000 fba1 	bl	8007680 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f3e:	4b1c      	ldr	r3, [pc, #112]	; (8006fb0 <xTimerCreateTimerTask+0x80>)
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d021      	beq.n	8006f8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f46:	2300      	movs	r3, #0
 8006f48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f4a:	2300      	movs	r3, #0
 8006f4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f4e:	1d3a      	adds	r2, r7, #4
 8006f50:	f107 0108 	add.w	r1, r7, #8
 8006f54:	f107 030c 	add.w	r3, r7, #12
 8006f58:	4618      	mov	r0, r3
 8006f5a:	f7fd fe21 	bl	8004ba0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	68fa      	ldr	r2, [r7, #12]
 8006f64:	9202      	str	r2, [sp, #8]
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	2302      	movs	r3, #2
 8006f6a:	9300      	str	r3, [sp, #0]
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	460a      	mov	r2, r1
 8006f70:	4910      	ldr	r1, [pc, #64]	; (8006fb4 <xTimerCreateTimerTask+0x84>)
 8006f72:	4811      	ldr	r0, [pc, #68]	; (8006fb8 <xTimerCreateTimerTask+0x88>)
 8006f74:	f7fe ffa6 	bl	8005ec4 <xTaskCreateStatic>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	4a10      	ldr	r2, [pc, #64]	; (8006fbc <xTimerCreateTimerTask+0x8c>)
 8006f7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f7e:	4b0f      	ldr	r3, [pc, #60]	; (8006fbc <xTimerCreateTimerTask+0x8c>)
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d001      	beq.n	8006f8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f86:	2301      	movs	r3, #1
 8006f88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f8a:	697b      	ldr	r3, [r7, #20]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d10a      	bne.n	8006fa6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f94:	f383 8811 	msr	BASEPRI, r3
 8006f98:	f3bf 8f6f 	isb	sy
 8006f9c:	f3bf 8f4f 	dsb	sy
 8006fa0:	613b      	str	r3, [r7, #16]
}
 8006fa2:	bf00      	nop
 8006fa4:	e7fe      	b.n	8006fa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006fa6:	697b      	ldr	r3, [r7, #20]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000eb4 	.word	0x20000eb4
 8006fb4:	08009244 	.word	0x08009244
 8006fb8:	08007229 	.word	0x08007229
 8006fbc:	20000eb8 	.word	0x20000eb8

08006fc0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b088      	sub	sp, #32
 8006fc4:	af02      	add	r7, sp, #8
 8006fc6:	60f8      	str	r0, [r7, #12]
 8006fc8:	60b9      	str	r1, [r7, #8]
 8006fca:	607a      	str	r2, [r7, #4]
 8006fcc:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006fce:	202c      	movs	r0, #44	; 0x2c
 8006fd0:	f000 fe32 	bl	8007c38 <pvPortMalloc>
 8006fd4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006fd6:	697b      	ldr	r3, [r7, #20]
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	d00d      	beq.n	8006ff8 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006fe4:	697b      	ldr	r3, [r7, #20]
 8006fe6:	9301      	str	r3, [sp, #4]
 8006fe8:	6a3b      	ldr	r3, [r7, #32]
 8006fea:	9300      	str	r3, [sp, #0]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	68b9      	ldr	r1, [r7, #8]
 8006ff2:	68f8      	ldr	r0, [r7, #12]
 8006ff4:	f000 f843 	bl	800707e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006ff8:	697b      	ldr	r3, [r7, #20]
	}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	3718      	adds	r7, #24
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}

08007002 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8007002:	b580      	push	{r7, lr}
 8007004:	b08a      	sub	sp, #40	; 0x28
 8007006:	af02      	add	r7, sp, #8
 8007008:	60f8      	str	r0, [r7, #12]
 800700a:	60b9      	str	r1, [r7, #8]
 800700c:	607a      	str	r2, [r7, #4]
 800700e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007010:	232c      	movs	r3, #44	; 0x2c
 8007012:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2b2c      	cmp	r3, #44	; 0x2c
 8007018:	d00a      	beq.n	8007030 <xTimerCreateStatic+0x2e>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	61bb      	str	r3, [r7, #24]
}
 800702c:	bf00      	nop
 800702e:	e7fe      	b.n	800702e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007030:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8007032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007034:	2b00      	cmp	r3, #0
 8007036:	d10a      	bne.n	800704e <xTimerCreateStatic+0x4c>
	__asm volatile
 8007038:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703c:	f383 8811 	msr	BASEPRI, r3
 8007040:	f3bf 8f6f 	isb	sy
 8007044:	f3bf 8f4f 	dsb	sy
 8007048:	617b      	str	r3, [r7, #20]
}
 800704a:	bf00      	nop
 800704c:	e7fe      	b.n	800704c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00d      	beq.n	8007074 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	2202      	movs	r2, #2
 800705c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	9300      	str	r3, [sp, #0]
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	687a      	ldr	r2, [r7, #4]
 800706c:	68b9      	ldr	r1, [r7, #8]
 800706e:	68f8      	ldr	r0, [r7, #12]
 8007070:	f000 f805 	bl	800707e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007074:	69fb      	ldr	r3, [r7, #28]
	}
 8007076:	4618      	mov	r0, r3
 8007078:	3720      	adds	r7, #32
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}

0800707e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800707e:	b580      	push	{r7, lr}
 8007080:	b086      	sub	sp, #24
 8007082:	af00      	add	r7, sp, #0
 8007084:	60f8      	str	r0, [r7, #12]
 8007086:	60b9      	str	r1, [r7, #8]
 8007088:	607a      	str	r2, [r7, #4]
 800708a:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800708c:	68bb      	ldr	r3, [r7, #8]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d10a      	bne.n	80070a8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007096:	f383 8811 	msr	BASEPRI, r3
 800709a:	f3bf 8f6f 	isb	sy
 800709e:	f3bf 8f4f 	dsb	sy
 80070a2:	617b      	str	r3, [r7, #20]
}
 80070a4:	bf00      	nop
 80070a6:	e7fe      	b.n	80070a6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80070a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d01e      	beq.n	80070ec <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80070ae:	f000 fae7 	bl	8007680 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80070b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b4:	68fa      	ldr	r2, [r7, #12]
 80070b6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80070b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ba:	68ba      	ldr	r2, [r7, #8]
 80070bc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80070be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c0:	683a      	ldr	r2, [r7, #0]
 80070c2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80070c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c6:	6a3a      	ldr	r2, [r7, #32]
 80070c8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80070ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070cc:	3304      	adds	r3, #4
 80070ce:	4618      	mov	r0, r3
 80070d0:	f7fd fda0 	bl	8004c14 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	d008      	beq.n	80070ec <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80070da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070dc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070e0:	f043 0304 	orr.w	r3, r3, #4
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80070ec:	bf00      	nop
 80070ee:	3718      	adds	r7, #24
 80070f0:	46bd      	mov	sp, r7
 80070f2:	bd80      	pop	{r7, pc}

080070f4 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070f4:	b580      	push	{r7, lr}
 80070f6:	b08a      	sub	sp, #40	; 0x28
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007102:	2300      	movs	r3, #0
 8007104:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d10a      	bne.n	8007122 <xTimerGenericCommand+0x2e>
	__asm volatile
 800710c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007110:	f383 8811 	msr	BASEPRI, r3
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	f3bf 8f4f 	dsb	sy
 800711c:	623b      	str	r3, [r7, #32]
}
 800711e:	bf00      	nop
 8007120:	e7fe      	b.n	8007120 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007122:	4b1a      	ldr	r3, [pc, #104]	; (800718c <xTimerGenericCommand+0x98>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d02a      	beq.n	8007180 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800712a:	68bb      	ldr	r3, [r7, #8]
 800712c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007136:	68bb      	ldr	r3, [r7, #8]
 8007138:	2b05      	cmp	r3, #5
 800713a:	dc18      	bgt.n	800716e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800713c:	f7ff fd1a 	bl	8006b74 <xTaskGetSchedulerState>
 8007140:	4603      	mov	r3, r0
 8007142:	2b02      	cmp	r3, #2
 8007144:	d109      	bne.n	800715a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007146:	4b11      	ldr	r3, [pc, #68]	; (800718c <xTimerGenericCommand+0x98>)
 8007148:	6818      	ldr	r0, [r3, #0]
 800714a:	f107 0110 	add.w	r1, r7, #16
 800714e:	2300      	movs	r3, #0
 8007150:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007152:	f7fe f851 	bl	80051f8 <xQueueGenericSend>
 8007156:	6278      	str	r0, [r7, #36]	; 0x24
 8007158:	e012      	b.n	8007180 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800715a:	4b0c      	ldr	r3, [pc, #48]	; (800718c <xTimerGenericCommand+0x98>)
 800715c:	6818      	ldr	r0, [r3, #0]
 800715e:	f107 0110 	add.w	r1, r7, #16
 8007162:	2300      	movs	r3, #0
 8007164:	2200      	movs	r2, #0
 8007166:	f7fe f847 	bl	80051f8 <xQueueGenericSend>
 800716a:	6278      	str	r0, [r7, #36]	; 0x24
 800716c:	e008      	b.n	8007180 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800716e:	4b07      	ldr	r3, [pc, #28]	; (800718c <xTimerGenericCommand+0x98>)
 8007170:	6818      	ldr	r0, [r3, #0]
 8007172:	f107 0110 	add.w	r1, r7, #16
 8007176:	2300      	movs	r3, #0
 8007178:	683a      	ldr	r2, [r7, #0]
 800717a:	f7fe f93b 	bl	80053f4 <xQueueGenericSendFromISR>
 800717e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007182:	4618      	mov	r0, r3
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	20000eb4 	.word	0x20000eb4

08007190 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b088      	sub	sp, #32
 8007194:	af02      	add	r7, sp, #8
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800719a:	4b22      	ldr	r3, [pc, #136]	; (8007224 <prvProcessExpiredTimer+0x94>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	68db      	ldr	r3, [r3, #12]
 80071a0:	68db      	ldr	r3, [r3, #12]
 80071a2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	3304      	adds	r3, #4
 80071a8:	4618      	mov	r0, r3
 80071aa:	f7fd fd9d 	bl	8004ce8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b4:	f003 0304 	and.w	r3, r3, #4
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d022      	beq.n	8007202 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	699a      	ldr	r2, [r3, #24]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	18d1      	adds	r1, r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	683a      	ldr	r2, [r7, #0]
 80071c8:	6978      	ldr	r0, [r7, #20]
 80071ca:	f000 f8d1 	bl	8007370 <prvInsertTimerInActiveList>
 80071ce:	4603      	mov	r3, r0
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d01f      	beq.n	8007214 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071d4:	2300      	movs	r3, #0
 80071d6:	9300      	str	r3, [sp, #0]
 80071d8:	2300      	movs	r3, #0
 80071da:	687a      	ldr	r2, [r7, #4]
 80071dc:	2100      	movs	r1, #0
 80071de:	6978      	ldr	r0, [r7, #20]
 80071e0:	f7ff ff88 	bl	80070f4 <xTimerGenericCommand>
 80071e4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d113      	bne.n	8007214 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80071ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f0:	f383 8811 	msr	BASEPRI, r3
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	60fb      	str	r3, [r7, #12]
}
 80071fe:	bf00      	nop
 8007200:	e7fe      	b.n	8007200 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007208:	f023 0301 	bic.w	r3, r3, #1
 800720c:	b2da      	uxtb	r2, r3
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007214:	697b      	ldr	r3, [r7, #20]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	6978      	ldr	r0, [r7, #20]
 800721a:	4798      	blx	r3
}
 800721c:	bf00      	nop
 800721e:	3718      	adds	r7, #24
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20000eac 	.word	0x20000eac

08007228 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007230:	f107 0308 	add.w	r3, r7, #8
 8007234:	4618      	mov	r0, r3
 8007236:	f000 f857 	bl	80072e8 <prvGetNextExpireTime>
 800723a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800723c:	68bb      	ldr	r3, [r7, #8]
 800723e:	4619      	mov	r1, r3
 8007240:	68f8      	ldr	r0, [r7, #12]
 8007242:	f000 f803 	bl	800724c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007246:	f000 f8d5 	bl	80073f4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800724a:	e7f1      	b.n	8007230 <prvTimerTask+0x8>

0800724c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800724c:	b580      	push	{r7, lr}
 800724e:	b084      	sub	sp, #16
 8007250:	af00      	add	r7, sp, #0
 8007252:	6078      	str	r0, [r7, #4]
 8007254:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007256:	f7ff f891 	bl	800637c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800725a:	f107 0308 	add.w	r3, r7, #8
 800725e:	4618      	mov	r0, r3
 8007260:	f000 f866 	bl	8007330 <prvSampleTimeNow>
 8007264:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	2b00      	cmp	r3, #0
 800726a:	d130      	bne.n	80072ce <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d10a      	bne.n	8007288 <prvProcessTimerOrBlockTask+0x3c>
 8007272:	687a      	ldr	r2, [r7, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	429a      	cmp	r2, r3
 8007278:	d806      	bhi.n	8007288 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800727a:	f7ff f88d 	bl	8006398 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800727e:	68f9      	ldr	r1, [r7, #12]
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f7ff ff85 	bl	8007190 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007286:	e024      	b.n	80072d2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d008      	beq.n	80072a0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800728e:	4b13      	ldr	r3, [pc, #76]	; (80072dc <prvProcessTimerOrBlockTask+0x90>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d101      	bne.n	800729c <prvProcessTimerOrBlockTask+0x50>
 8007298:	2301      	movs	r3, #1
 800729a:	e000      	b.n	800729e <prvProcessTimerOrBlockTask+0x52>
 800729c:	2300      	movs	r3, #0
 800729e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80072a0:	4b0f      	ldr	r3, [pc, #60]	; (80072e0 <prvProcessTimerOrBlockTask+0x94>)
 80072a2:	6818      	ldr	r0, [r3, #0]
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	1ad3      	subs	r3, r2, r3
 80072aa:	683a      	ldr	r2, [r7, #0]
 80072ac:	4619      	mov	r1, r3
 80072ae:	f7fe fdd5 	bl	8005e5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072b2:	f7ff f871 	bl	8006398 <xTaskResumeAll>
 80072b6:	4603      	mov	r3, r0
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072bc:	4b09      	ldr	r3, [pc, #36]	; (80072e4 <prvProcessTimerOrBlockTask+0x98>)
 80072be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072c2:	601a      	str	r2, [r3, #0]
 80072c4:	f3bf 8f4f 	dsb	sy
 80072c8:	f3bf 8f6f 	isb	sy
}
 80072cc:	e001      	b.n	80072d2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072ce:	f7ff f863 	bl	8006398 <xTaskResumeAll>
}
 80072d2:	bf00      	nop
 80072d4:	3710      	adds	r7, #16
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	20000eb0 	.word	0x20000eb0
 80072e0:	20000eb4 	.word	0x20000eb4
 80072e4:	e000ed04 	.word	0xe000ed04

080072e8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072e8:	b480      	push	{r7}
 80072ea:	b085      	sub	sp, #20
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072f0:	4b0e      	ldr	r3, [pc, #56]	; (800732c <prvGetNextExpireTime+0x44>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d101      	bne.n	80072fe <prvGetNextExpireTime+0x16>
 80072fa:	2201      	movs	r2, #1
 80072fc:	e000      	b.n	8007300 <prvGetNextExpireTime+0x18>
 80072fe:	2200      	movs	r2, #0
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d105      	bne.n	8007318 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800730c:	4b07      	ldr	r3, [pc, #28]	; (800732c <prvGetNextExpireTime+0x44>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	68db      	ldr	r3, [r3, #12]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	60fb      	str	r3, [r7, #12]
 8007316:	e001      	b.n	800731c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800731c:	68fb      	ldr	r3, [r7, #12]
}
 800731e:	4618      	mov	r0, r3
 8007320:	3714      	adds	r7, #20
 8007322:	46bd      	mov	sp, r7
 8007324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007328:	4770      	bx	lr
 800732a:	bf00      	nop
 800732c:	20000eac 	.word	0x20000eac

08007330 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007338:	f7ff f8cc 	bl	80064d4 <xTaskGetTickCount>
 800733c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800733e:	4b0b      	ldr	r3, [pc, #44]	; (800736c <prvSampleTimeNow+0x3c>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	68fa      	ldr	r2, [r7, #12]
 8007344:	429a      	cmp	r2, r3
 8007346:	d205      	bcs.n	8007354 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007348:	f000 f936 	bl	80075b8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2201      	movs	r2, #1
 8007350:	601a      	str	r2, [r3, #0]
 8007352:	e002      	b.n	800735a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800735a:	4a04      	ldr	r2, [pc, #16]	; (800736c <prvSampleTimeNow+0x3c>)
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007360:	68fb      	ldr	r3, [r7, #12]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3710      	adds	r7, #16
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
 800736a:	bf00      	nop
 800736c:	20000ebc 	.word	0x20000ebc

08007370 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007370:	b580      	push	{r7, lr}
 8007372:	b086      	sub	sp, #24
 8007374:	af00      	add	r7, sp, #0
 8007376:	60f8      	str	r0, [r7, #12]
 8007378:	60b9      	str	r1, [r7, #8]
 800737a:	607a      	str	r2, [r7, #4]
 800737c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800737e:	2300      	movs	r3, #0
 8007380:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	68fa      	ldr	r2, [r7, #12]
 800738c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800738e:	68ba      	ldr	r2, [r7, #8]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	429a      	cmp	r2, r3
 8007394:	d812      	bhi.n	80073bc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	1ad2      	subs	r2, r2, r3
 800739c:	68fb      	ldr	r3, [r7, #12]
 800739e:	699b      	ldr	r3, [r3, #24]
 80073a0:	429a      	cmp	r2, r3
 80073a2:	d302      	bcc.n	80073aa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80073a4:	2301      	movs	r3, #1
 80073a6:	617b      	str	r3, [r7, #20]
 80073a8:	e01b      	b.n	80073e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073aa:	4b10      	ldr	r3, [pc, #64]	; (80073ec <prvInsertTimerInActiveList+0x7c>)
 80073ac:	681a      	ldr	r2, [r3, #0]
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	3304      	adds	r3, #4
 80073b2:	4619      	mov	r1, r3
 80073b4:	4610      	mov	r0, r2
 80073b6:	f7fd fc5e 	bl	8004c76 <vListInsert>
 80073ba:	e012      	b.n	80073e2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d206      	bcs.n	80073d2 <prvInsertTimerInActiveList+0x62>
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d302      	bcc.n	80073d2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073cc:	2301      	movs	r3, #1
 80073ce:	617b      	str	r3, [r7, #20]
 80073d0:	e007      	b.n	80073e2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073d2:	4b07      	ldr	r3, [pc, #28]	; (80073f0 <prvInsertTimerInActiveList+0x80>)
 80073d4:	681a      	ldr	r2, [r3, #0]
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3304      	adds	r3, #4
 80073da:	4619      	mov	r1, r3
 80073dc:	4610      	mov	r0, r2
 80073de:	f7fd fc4a 	bl	8004c76 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073e2:	697b      	ldr	r3, [r7, #20]
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3718      	adds	r7, #24
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}
 80073ec:	20000eb0 	.word	0x20000eb0
 80073f0:	20000eac 	.word	0x20000eac

080073f4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b08e      	sub	sp, #56	; 0x38
 80073f8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073fa:	e0ca      	b.n	8007592 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	da18      	bge.n	8007434 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007402:	1d3b      	adds	r3, r7, #4
 8007404:	3304      	adds	r3, #4
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	61fb      	str	r3, [r7, #28]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742a:	6850      	ldr	r0, [r2, #4]
 800742c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800742e:	6892      	ldr	r2, [r2, #8]
 8007430:	4611      	mov	r1, r2
 8007432:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	f2c0 80ab 	blt.w	8007592 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	695b      	ldr	r3, [r3, #20]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d004      	beq.n	8007452 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800744a:	3304      	adds	r3, #4
 800744c:	4618      	mov	r0, r3
 800744e:	f7fd fc4b 	bl	8004ce8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007452:	463b      	mov	r3, r7
 8007454:	4618      	mov	r0, r3
 8007456:	f7ff ff6b 	bl	8007330 <prvSampleTimeNow>
 800745a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2b09      	cmp	r3, #9
 8007460:	f200 8096 	bhi.w	8007590 <prvProcessReceivedCommands+0x19c>
 8007464:	a201      	add	r2, pc, #4	; (adr r2, 800746c <prvProcessReceivedCommands+0x78>)
 8007466:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800746a:	bf00      	nop
 800746c:	08007495 	.word	0x08007495
 8007470:	08007495 	.word	0x08007495
 8007474:	08007495 	.word	0x08007495
 8007478:	08007509 	.word	0x08007509
 800747c:	0800751d 	.word	0x0800751d
 8007480:	08007567 	.word	0x08007567
 8007484:	08007495 	.word	0x08007495
 8007488:	08007495 	.word	0x08007495
 800748c:	08007509 	.word	0x08007509
 8007490:	0800751d 	.word	0x0800751d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007496:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800749a:	f043 0301 	orr.w	r3, r3, #1
 800749e:	b2da      	uxtb	r2, r3
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80074a6:	68ba      	ldr	r2, [r7, #8]
 80074a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	18d1      	adds	r1, r2, r3
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074b4:	f7ff ff5c 	bl	8007370 <prvInsertTimerInActiveList>
 80074b8:	4603      	mov	r3, r0
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d069      	beq.n	8007592 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	6a1b      	ldr	r3, [r3, #32]
 80074c2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074c4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074cc:	f003 0304 	and.w	r3, r3, #4
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d05e      	beq.n	8007592 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074d4:	68ba      	ldr	r2, [r7, #8]
 80074d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d8:	699b      	ldr	r3, [r3, #24]
 80074da:	441a      	add	r2, r3
 80074dc:	2300      	movs	r3, #0
 80074de:	9300      	str	r3, [sp, #0]
 80074e0:	2300      	movs	r3, #0
 80074e2:	2100      	movs	r1, #0
 80074e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074e6:	f7ff fe05 	bl	80070f4 <xTimerGenericCommand>
 80074ea:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074ec:	6a3b      	ldr	r3, [r7, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d14f      	bne.n	8007592 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80074f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074f6:	f383 8811 	msr	BASEPRI, r3
 80074fa:	f3bf 8f6f 	isb	sy
 80074fe:	f3bf 8f4f 	dsb	sy
 8007502:	61bb      	str	r3, [r7, #24]
}
 8007504:	bf00      	nop
 8007506:	e7fe      	b.n	8007506 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800750e:	f023 0301 	bic.w	r3, r3, #1
 8007512:	b2da      	uxtb	r2, r3
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800751a:	e03a      	b.n	8007592 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800751c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800751e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007522:	f043 0301 	orr.w	r3, r3, #1
 8007526:	b2da      	uxtb	r2, r3
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800752e:	68ba      	ldr	r2, [r7, #8]
 8007530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007532:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d10a      	bne.n	8007552 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	617b      	str	r3, [r7, #20]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007552:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007554:	699a      	ldr	r2, [r3, #24]
 8007556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007558:	18d1      	adds	r1, r2, r3
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800755c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800755e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007560:	f7ff ff06 	bl	8007370 <prvInsertTimerInActiveList>
					break;
 8007564:	e015      	b.n	8007592 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007568:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800756c:	f003 0302 	and.w	r3, r3, #2
 8007570:	2b00      	cmp	r3, #0
 8007572:	d103      	bne.n	800757c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007574:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007576:	f000 fc2b 	bl	8007dd0 <vPortFree>
 800757a:	e00a      	b.n	8007592 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800757c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800757e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007582:	f023 0301 	bic.w	r3, r3, #1
 8007586:	b2da      	uxtb	r2, r3
 8007588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800758a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800758e:	e000      	b.n	8007592 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007590:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007592:	4b08      	ldr	r3, [pc, #32]	; (80075b4 <prvProcessReceivedCommands+0x1c0>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	1d39      	adds	r1, r7, #4
 8007598:	2200      	movs	r2, #0
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe f852 	bl	8005644 <xQueueReceive>
 80075a0:	4603      	mov	r3, r0
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f47f af2a 	bne.w	80073fc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075a8:	bf00      	nop
 80075aa:	bf00      	nop
 80075ac:	3730      	adds	r7, #48	; 0x30
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20000eb4 	.word	0x20000eb4

080075b8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075be:	e048      	b.n	8007652 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075c0:	4b2d      	ldr	r3, [pc, #180]	; (8007678 <prvSwitchTimerLists+0xc0>)
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	68db      	ldr	r3, [r3, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075ca:	4b2b      	ldr	r3, [pc, #172]	; (8007678 <prvSwitchTimerLists+0xc0>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	68db      	ldr	r3, [r3, #12]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	3304      	adds	r3, #4
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fd fb85 	bl	8004ce8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	68f8      	ldr	r0, [r7, #12]
 80075e4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075ec:	f003 0304 	and.w	r3, r3, #4
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d02e      	beq.n	8007652 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	699b      	ldr	r3, [r3, #24]
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4413      	add	r3, r2
 80075fc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075fe:	68ba      	ldr	r2, [r7, #8]
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	429a      	cmp	r2, r3
 8007604:	d90e      	bls.n	8007624 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	68ba      	ldr	r2, [r7, #8]
 800760a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007612:	4b19      	ldr	r3, [pc, #100]	; (8007678 <prvSwitchTimerLists+0xc0>)
 8007614:	681a      	ldr	r2, [r3, #0]
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	3304      	adds	r3, #4
 800761a:	4619      	mov	r1, r3
 800761c:	4610      	mov	r0, r2
 800761e:	f7fd fb2a 	bl	8004c76 <vListInsert>
 8007622:	e016      	b.n	8007652 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007624:	2300      	movs	r3, #0
 8007626:	9300      	str	r3, [sp, #0]
 8007628:	2300      	movs	r3, #0
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	2100      	movs	r1, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7ff fd60 	bl	80070f4 <xTimerGenericCommand>
 8007634:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	603b      	str	r3, [r7, #0]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007652:	4b09      	ldr	r3, [pc, #36]	; (8007678 <prvSwitchTimerLists+0xc0>)
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1b1      	bne.n	80075c0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800765c:	4b06      	ldr	r3, [pc, #24]	; (8007678 <prvSwitchTimerLists+0xc0>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007662:	4b06      	ldr	r3, [pc, #24]	; (800767c <prvSwitchTimerLists+0xc4>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a04      	ldr	r2, [pc, #16]	; (8007678 <prvSwitchTimerLists+0xc0>)
 8007668:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800766a:	4a04      	ldr	r2, [pc, #16]	; (800767c <prvSwitchTimerLists+0xc4>)
 800766c:	697b      	ldr	r3, [r7, #20]
 800766e:	6013      	str	r3, [r2, #0]
}
 8007670:	bf00      	nop
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20000eac 	.word	0x20000eac
 800767c:	20000eb0 	.word	0x20000eb0

08007680 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007680:	b580      	push	{r7, lr}
 8007682:	b082      	sub	sp, #8
 8007684:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007686:	f000 f9b5 	bl	80079f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800768a:	4b15      	ldr	r3, [pc, #84]	; (80076e0 <prvCheckForValidListAndQueue+0x60>)
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	2b00      	cmp	r3, #0
 8007690:	d120      	bne.n	80076d4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007692:	4814      	ldr	r0, [pc, #80]	; (80076e4 <prvCheckForValidListAndQueue+0x64>)
 8007694:	f7fd fa9e 	bl	8004bd4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007698:	4813      	ldr	r0, [pc, #76]	; (80076e8 <prvCheckForValidListAndQueue+0x68>)
 800769a:	f7fd fa9b 	bl	8004bd4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800769e:	4b13      	ldr	r3, [pc, #76]	; (80076ec <prvCheckForValidListAndQueue+0x6c>)
 80076a0:	4a10      	ldr	r2, [pc, #64]	; (80076e4 <prvCheckForValidListAndQueue+0x64>)
 80076a2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80076a4:	4b12      	ldr	r3, [pc, #72]	; (80076f0 <prvCheckForValidListAndQueue+0x70>)
 80076a6:	4a10      	ldr	r2, [pc, #64]	; (80076e8 <prvCheckForValidListAndQueue+0x68>)
 80076a8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076aa:	2300      	movs	r3, #0
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <prvCheckForValidListAndQueue+0x74>)
 80076b0:	4a11      	ldr	r2, [pc, #68]	; (80076f8 <prvCheckForValidListAndQueue+0x78>)
 80076b2:	2110      	movs	r1, #16
 80076b4:	200a      	movs	r0, #10
 80076b6:	f7fd fba9 	bl	8004e0c <xQueueGenericCreateStatic>
 80076ba:	4603      	mov	r3, r0
 80076bc:	4a08      	ldr	r2, [pc, #32]	; (80076e0 <prvCheckForValidListAndQueue+0x60>)
 80076be:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076c0:	4b07      	ldr	r3, [pc, #28]	; (80076e0 <prvCheckForValidListAndQueue+0x60>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d005      	beq.n	80076d4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076c8:	4b05      	ldr	r3, [pc, #20]	; (80076e0 <prvCheckForValidListAndQueue+0x60>)
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	490b      	ldr	r1, [pc, #44]	; (80076fc <prvCheckForValidListAndQueue+0x7c>)
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7fe fb70 	bl	8005db4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076d4:	f000 f9be 	bl	8007a54 <vPortExitCritical>
}
 80076d8:	bf00      	nop
 80076da:	46bd      	mov	sp, r7
 80076dc:	bd80      	pop	{r7, pc}
 80076de:	bf00      	nop
 80076e0:	20000eb4 	.word	0x20000eb4
 80076e4:	20000e84 	.word	0x20000e84
 80076e8:	20000e98 	.word	0x20000e98
 80076ec:	20000eac 	.word	0x20000eac
 80076f0:	20000eb0 	.word	0x20000eb0
 80076f4:	20000f60 	.word	0x20000f60
 80076f8:	20000ec0 	.word	0x20000ec0
 80076fc:	0800924c 	.word	0x0800924c

08007700 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8007700:	b580      	push	{r7, lr}
 8007702:	b086      	sub	sp, #24
 8007704:	af00      	add	r7, sp, #0
 8007706:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10a      	bne.n	8007728 <xTimerIsTimerActive+0x28>
	__asm volatile
 8007712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007716:	f383 8811 	msr	BASEPRI, r3
 800771a:	f3bf 8f6f 	isb	sy
 800771e:	f3bf 8f4f 	dsb	sy
 8007722:	60fb      	str	r3, [r7, #12]
}
 8007724:	bf00      	nop
 8007726:	e7fe      	b.n	8007726 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8007728:	f000 f964 	bl	80079f4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007732:	f003 0301 	and.w	r3, r3, #1
 8007736:	2b00      	cmp	r3, #0
 8007738:	d102      	bne.n	8007740 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800773a:	2300      	movs	r3, #0
 800773c:	617b      	str	r3, [r7, #20]
 800773e:	e001      	b.n	8007744 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8007740:	2301      	movs	r3, #1
 8007742:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007744:	f000 f986 	bl	8007a54 <vPortExitCritical>

	return xReturn;
 8007748:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}

08007752 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007752:	b580      	push	{r7, lr}
 8007754:	b086      	sub	sp, #24
 8007756:	af00      	add	r7, sp, #0
 8007758:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d10a      	bne.n	800777a <pvTimerGetTimerID+0x28>
	__asm volatile
 8007764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007768:	f383 8811 	msr	BASEPRI, r3
 800776c:	f3bf 8f6f 	isb	sy
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	60fb      	str	r3, [r7, #12]
}
 8007776:	bf00      	nop
 8007778:	e7fe      	b.n	8007778 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800777a:	f000 f93b 	bl	80079f4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007784:	f000 f966 	bl	8007a54 <vPortExitCritical>

	return pvReturn;
 8007788:	693b      	ldr	r3, [r7, #16]
}
 800778a:	4618      	mov	r0, r3
 800778c:	3718      	adds	r7, #24
 800778e:	46bd      	mov	sp, r7
 8007790:	bd80      	pop	{r7, pc}
	...

08007794 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007794:	b480      	push	{r7}
 8007796:	b085      	sub	sp, #20
 8007798:	af00      	add	r7, sp, #0
 800779a:	60f8      	str	r0, [r7, #12]
 800779c:	60b9      	str	r1, [r7, #8]
 800779e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	3b04      	subs	r3, #4
 80077a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	3b04      	subs	r3, #4
 80077b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	f023 0201 	bic.w	r2, r3, #1
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	3b04      	subs	r3, #4
 80077c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077c4:	4a0c      	ldr	r2, [pc, #48]	; (80077f8 <pxPortInitialiseStack+0x64>)
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	3b14      	subs	r3, #20
 80077ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077d0:	687a      	ldr	r2, [r7, #4]
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	3b04      	subs	r3, #4
 80077da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f06f 0202 	mvn.w	r2, #2
 80077e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	3b20      	subs	r3, #32
 80077e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077ea:	68fb      	ldr	r3, [r7, #12]
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3714      	adds	r7, #20
 80077f0:	46bd      	mov	sp, r7
 80077f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f6:	4770      	bx	lr
 80077f8:	080077fd 	.word	0x080077fd

080077fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077fc:	b480      	push	{r7}
 80077fe:	b085      	sub	sp, #20
 8007800:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007802:	2300      	movs	r3, #0
 8007804:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007806:	4b12      	ldr	r3, [pc, #72]	; (8007850 <prvTaskExitError+0x54>)
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800780e:	d00a      	beq.n	8007826 <prvTaskExitError+0x2a>
	__asm volatile
 8007810:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007814:	f383 8811 	msr	BASEPRI, r3
 8007818:	f3bf 8f6f 	isb	sy
 800781c:	f3bf 8f4f 	dsb	sy
 8007820:	60fb      	str	r3, [r7, #12]
}
 8007822:	bf00      	nop
 8007824:	e7fe      	b.n	8007824 <prvTaskExitError+0x28>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60bb      	str	r3, [r7, #8]
}
 8007838:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800783a:	bf00      	nop
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2b00      	cmp	r3, #0
 8007840:	d0fc      	beq.n	800783c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007842:	bf00      	nop
 8007844:	bf00      	nop
 8007846:	3714      	adds	r7, #20
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr
 8007850:	20000010 	.word	0x20000010
	...

08007860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007860:	4b07      	ldr	r3, [pc, #28]	; (8007880 <pxCurrentTCBConst2>)
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	6808      	ldr	r0, [r1, #0]
 8007866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	f380 8809 	msr	PSP, r0
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8811 	msr	BASEPRI, r0
 800787a:	4770      	bx	lr
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst2>:
 8007880:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop

08007888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007888:	4808      	ldr	r0, [pc, #32]	; (80078ac <prvPortStartFirstTask+0x24>)
 800788a:	6800      	ldr	r0, [r0, #0]
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f380 8808 	msr	MSP, r0
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8814 	msr	CONTROL, r0
 800789a:	b662      	cpsie	i
 800789c:	b661      	cpsie	f
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	df00      	svc	0
 80078a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078aa:	bf00      	nop
 80078ac:	e000ed08 	.word	0xe000ed08

080078b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078b6:	4b46      	ldr	r3, [pc, #280]	; (80079d0 <xPortStartScheduler+0x120>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a46      	ldr	r2, [pc, #280]	; (80079d4 <xPortStartScheduler+0x124>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10a      	bne.n	80078d6 <xPortStartScheduler+0x26>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	613b      	str	r3, [r7, #16]
}
 80078d2:	bf00      	nop
 80078d4:	e7fe      	b.n	80078d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078d6:	4b3e      	ldr	r3, [pc, #248]	; (80079d0 <xPortStartScheduler+0x120>)
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	4a3f      	ldr	r2, [pc, #252]	; (80079d8 <xPortStartScheduler+0x128>)
 80078dc:	4293      	cmp	r3, r2
 80078de:	d10a      	bne.n	80078f6 <xPortStartScheduler+0x46>
	__asm volatile
 80078e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078e4:	f383 8811 	msr	BASEPRI, r3
 80078e8:	f3bf 8f6f 	isb	sy
 80078ec:	f3bf 8f4f 	dsb	sy
 80078f0:	60fb      	str	r3, [r7, #12]
}
 80078f2:	bf00      	nop
 80078f4:	e7fe      	b.n	80078f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078f6:	4b39      	ldr	r3, [pc, #228]	; (80079dc <xPortStartScheduler+0x12c>)
 80078f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b2db      	uxtb	r3, r3
 8007900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007902:	697b      	ldr	r3, [r7, #20]
 8007904:	22ff      	movs	r2, #255	; 0xff
 8007906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007908:	697b      	ldr	r3, [r7, #20]
 800790a:	781b      	ldrb	r3, [r3, #0]
 800790c:	b2db      	uxtb	r3, r3
 800790e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007910:	78fb      	ldrb	r3, [r7, #3]
 8007912:	b2db      	uxtb	r3, r3
 8007914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007918:	b2da      	uxtb	r2, r3
 800791a:	4b31      	ldr	r3, [pc, #196]	; (80079e0 <xPortStartScheduler+0x130>)
 800791c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800791e:	4b31      	ldr	r3, [pc, #196]	; (80079e4 <xPortStartScheduler+0x134>)
 8007920:	2207      	movs	r2, #7
 8007922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007924:	e009      	b.n	800793a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007926:	4b2f      	ldr	r3, [pc, #188]	; (80079e4 <xPortStartScheduler+0x134>)
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	3b01      	subs	r3, #1
 800792c:	4a2d      	ldr	r2, [pc, #180]	; (80079e4 <xPortStartScheduler+0x134>)
 800792e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007930:	78fb      	ldrb	r3, [r7, #3]
 8007932:	b2db      	uxtb	r3, r3
 8007934:	005b      	lsls	r3, r3, #1
 8007936:	b2db      	uxtb	r3, r3
 8007938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800793a:	78fb      	ldrb	r3, [r7, #3]
 800793c:	b2db      	uxtb	r3, r3
 800793e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007942:	2b80      	cmp	r3, #128	; 0x80
 8007944:	d0ef      	beq.n	8007926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007946:	4b27      	ldr	r3, [pc, #156]	; (80079e4 <xPortStartScheduler+0x134>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f1c3 0307 	rsb	r3, r3, #7
 800794e:	2b04      	cmp	r3, #4
 8007950:	d00a      	beq.n	8007968 <xPortStartScheduler+0xb8>
	__asm volatile
 8007952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007956:	f383 8811 	msr	BASEPRI, r3
 800795a:	f3bf 8f6f 	isb	sy
 800795e:	f3bf 8f4f 	dsb	sy
 8007962:	60bb      	str	r3, [r7, #8]
}
 8007964:	bf00      	nop
 8007966:	e7fe      	b.n	8007966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007968:	4b1e      	ldr	r3, [pc, #120]	; (80079e4 <xPortStartScheduler+0x134>)
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	021b      	lsls	r3, r3, #8
 800796e:	4a1d      	ldr	r2, [pc, #116]	; (80079e4 <xPortStartScheduler+0x134>)
 8007970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007972:	4b1c      	ldr	r3, [pc, #112]	; (80079e4 <xPortStartScheduler+0x134>)
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800797a:	4a1a      	ldr	r2, [pc, #104]	; (80079e4 <xPortStartScheduler+0x134>)
 800797c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	b2da      	uxtb	r2, r3
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007986:	4b18      	ldr	r3, [pc, #96]	; (80079e8 <xPortStartScheduler+0x138>)
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a17      	ldr	r2, [pc, #92]	; (80079e8 <xPortStartScheduler+0x138>)
 800798c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007992:	4b15      	ldr	r3, [pc, #84]	; (80079e8 <xPortStartScheduler+0x138>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	4a14      	ldr	r2, [pc, #80]	; (80079e8 <xPortStartScheduler+0x138>)
 8007998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800799c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800799e:	f000 f8dd 	bl	8007b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079a2:	4b12      	ldr	r3, [pc, #72]	; (80079ec <xPortStartScheduler+0x13c>)
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079a8:	f000 f8fc 	bl	8007ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079ac:	4b10      	ldr	r3, [pc, #64]	; (80079f0 <xPortStartScheduler+0x140>)
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	4a0f      	ldr	r2, [pc, #60]	; (80079f0 <xPortStartScheduler+0x140>)
 80079b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079b8:	f7ff ff66 	bl	8007888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079bc:	f7fe fe54 	bl	8006668 <vTaskSwitchContext>
	prvTaskExitError();
 80079c0:	f7ff ff1c 	bl	80077fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079c4:	2300      	movs	r3, #0
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3718      	adds	r7, #24
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	e000ed00 	.word	0xe000ed00
 80079d4:	410fc271 	.word	0x410fc271
 80079d8:	410fc270 	.word	0x410fc270
 80079dc:	e000e400 	.word	0xe000e400
 80079e0:	20000fb0 	.word	0x20000fb0
 80079e4:	20000fb4 	.word	0x20000fb4
 80079e8:	e000ed20 	.word	0xe000ed20
 80079ec:	20000010 	.word	0x20000010
 80079f0:	e000ef34 	.word	0xe000ef34

080079f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079f4:	b480      	push	{r7}
 80079f6:	b083      	sub	sp, #12
 80079f8:	af00      	add	r7, sp, #0
	__asm volatile
 80079fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079fe:	f383 8811 	msr	BASEPRI, r3
 8007a02:	f3bf 8f6f 	isb	sy
 8007a06:	f3bf 8f4f 	dsb	sy
 8007a0a:	607b      	str	r3, [r7, #4]
}
 8007a0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a0e:	4b0f      	ldr	r3, [pc, #60]	; (8007a4c <vPortEnterCritical+0x58>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	3301      	adds	r3, #1
 8007a14:	4a0d      	ldr	r2, [pc, #52]	; (8007a4c <vPortEnterCritical+0x58>)
 8007a16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a18:	4b0c      	ldr	r3, [pc, #48]	; (8007a4c <vPortEnterCritical+0x58>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	2b01      	cmp	r3, #1
 8007a1e:	d10f      	bne.n	8007a40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a20:	4b0b      	ldr	r3, [pc, #44]	; (8007a50 <vPortEnterCritical+0x5c>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	b2db      	uxtb	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d00a      	beq.n	8007a40 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a2e:	f383 8811 	msr	BASEPRI, r3
 8007a32:	f3bf 8f6f 	isb	sy
 8007a36:	f3bf 8f4f 	dsb	sy
 8007a3a:	603b      	str	r3, [r7, #0]
}
 8007a3c:	bf00      	nop
 8007a3e:	e7fe      	b.n	8007a3e <vPortEnterCritical+0x4a>
	}
}
 8007a40:	bf00      	nop
 8007a42:	370c      	adds	r7, #12
 8007a44:	46bd      	mov	sp, r7
 8007a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4a:	4770      	bx	lr
 8007a4c:	20000010 	.word	0x20000010
 8007a50:	e000ed04 	.word	0xe000ed04

08007a54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b083      	sub	sp, #12
 8007a58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a5a:	4b12      	ldr	r3, [pc, #72]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10a      	bne.n	8007a78 <vPortExitCritical+0x24>
	__asm volatile
 8007a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a66:	f383 8811 	msr	BASEPRI, r3
 8007a6a:	f3bf 8f6f 	isb	sy
 8007a6e:	f3bf 8f4f 	dsb	sy
 8007a72:	607b      	str	r3, [r7, #4]
}
 8007a74:	bf00      	nop
 8007a76:	e7fe      	b.n	8007a76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a78:	4b0a      	ldr	r3, [pc, #40]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	3b01      	subs	r3, #1
 8007a7e:	4a09      	ldr	r2, [pc, #36]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a82:	4b08      	ldr	r3, [pc, #32]	; (8007aa4 <vPortExitCritical+0x50>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d105      	bne.n	8007a96 <vPortExitCritical+0x42>
 8007a8a:	2300      	movs	r3, #0
 8007a8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	f383 8811 	msr	BASEPRI, r3
}
 8007a94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a96:	bf00      	nop
 8007a98:	370c      	adds	r7, #12
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000010 	.word	0x20000010
	...

08007ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ab0:	f3ef 8009 	mrs	r0, PSP
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	4b15      	ldr	r3, [pc, #84]	; (8007b10 <pxCurrentTCBConst>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	f01e 0f10 	tst.w	lr, #16
 8007ac0:	bf08      	it	eq
 8007ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aca:	6010      	str	r0, [r2, #0]
 8007acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ad4:	f380 8811 	msr	BASEPRI, r0
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f7fe fdc2 	bl	8006668 <vTaskSwitchContext>
 8007ae4:	f04f 0000 	mov.w	r0, #0
 8007ae8:	f380 8811 	msr	BASEPRI, r0
 8007aec:	bc09      	pop	{r0, r3}
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	6808      	ldr	r0, [r1, #0]
 8007af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af6:	f01e 0f10 	tst.w	lr, #16
 8007afa:	bf08      	it	eq
 8007afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b00:	f380 8809 	msr	PSP, r0
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w

08007b10 <pxCurrentTCBConst>:
 8007b10:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop

08007b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b32:	f7fe fcdf 	bl	80064f4 <xTaskIncrementTick>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b3c:	4b06      	ldr	r3, [pc, #24]	; (8007b58 <xPortSysTickHandler+0x40>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f383 8811 	msr	BASEPRI, r3
}
 8007b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b60:	4b0b      	ldr	r3, [pc, #44]	; (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	; (8007b94 <vPortSetupTimerInterrupt+0x38>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	; (8007b98 <vPortSetupTimerInterrupt+0x3c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	; (8007b9c <vPortSetupTimerInterrupt+0x40>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	099b      	lsrs	r3, r3, #6
 8007b78:	4a09      	ldr	r2, [pc, #36]	; (8007ba0 <vPortSetupTimerInterrupt+0x44>)
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b7e:	4b04      	ldr	r3, [pc, #16]	; (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b80:	2207      	movs	r2, #7
 8007b82:	601a      	str	r2, [r3, #0]
}
 8007b84:	bf00      	nop
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	e000e010 	.word	0xe000e010
 8007b94:	e000e018 	.word	0xe000e018
 8007b98:	20000004 	.word	0x20000004
 8007b9c:	10624dd3 	.word	0x10624dd3
 8007ba0:	e000e014 	.word	0xe000e014

08007ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007bb4 <vPortEnableVFP+0x10>
 8007ba8:	6801      	ldr	r1, [r0, #0]
 8007baa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007bae:	6001      	str	r1, [r0, #0]
 8007bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bb2:	bf00      	nop
 8007bb4:	e000ed88 	.word	0xe000ed88

08007bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bbe:	f3ef 8305 	mrs	r3, IPSR
 8007bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b0f      	cmp	r3, #15
 8007bc8:	d914      	bls.n	8007bf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bca:	4a17      	ldr	r2, [pc, #92]	; (8007c28 <vPortValidateInterruptPriority+0x70>)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bd4:	4b15      	ldr	r3, [pc, #84]	; (8007c2c <vPortValidateInterruptPriority+0x74>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	7afa      	ldrb	r2, [r7, #11]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d20a      	bcs.n	8007bf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	e7fe      	b.n	8007bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bf4:	4b0e      	ldr	r3, [pc, #56]	; (8007c30 <vPortValidateInterruptPriority+0x78>)
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bfc:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <vPortValidateInterruptPriority+0x7c>)
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	429a      	cmp	r2, r3
 8007c02:	d90a      	bls.n	8007c1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c08:	f383 8811 	msr	BASEPRI, r3
 8007c0c:	f3bf 8f6f 	isb	sy
 8007c10:	f3bf 8f4f 	dsb	sy
 8007c14:	603b      	str	r3, [r7, #0]
}
 8007c16:	bf00      	nop
 8007c18:	e7fe      	b.n	8007c18 <vPortValidateInterruptPriority+0x60>
	}
 8007c1a:	bf00      	nop
 8007c1c:	3714      	adds	r7, #20
 8007c1e:	46bd      	mov	sp, r7
 8007c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c24:	4770      	bx	lr
 8007c26:	bf00      	nop
 8007c28:	e000e3f0 	.word	0xe000e3f0
 8007c2c:	20000fb0 	.word	0x20000fb0
 8007c30:	e000ed0c 	.word	0xe000ed0c
 8007c34:	20000fb4 	.word	0x20000fb4

08007c38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b08a      	sub	sp, #40	; 0x28
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c40:	2300      	movs	r3, #0
 8007c42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c44:	f7fe fb9a 	bl	800637c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c48:	4b5b      	ldr	r3, [pc, #364]	; (8007db8 <pvPortMalloc+0x180>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d101      	bne.n	8007c54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c50:	f000 f920 	bl	8007e94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c54:	4b59      	ldr	r3, [pc, #356]	; (8007dbc <pvPortMalloc+0x184>)
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	f040 8093 	bne.w	8007d88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d01d      	beq.n	8007ca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c68:	2208      	movs	r2, #8
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	4413      	add	r3, r2
 8007c6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f003 0307 	and.w	r3, r3, #7
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d014      	beq.n	8007ca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	f023 0307 	bic.w	r3, r3, #7
 8007c80:	3308      	adds	r3, #8
 8007c82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f003 0307 	and.w	r3, r3, #7
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d00a      	beq.n	8007ca4 <pvPortMalloc+0x6c>
	__asm volatile
 8007c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c92:	f383 8811 	msr	BASEPRI, r3
 8007c96:	f3bf 8f6f 	isb	sy
 8007c9a:	f3bf 8f4f 	dsb	sy
 8007c9e:	617b      	str	r3, [r7, #20]
}
 8007ca0:	bf00      	nop
 8007ca2:	e7fe      	b.n	8007ca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d06e      	beq.n	8007d88 <pvPortMalloc+0x150>
 8007caa:	4b45      	ldr	r3, [pc, #276]	; (8007dc0 <pvPortMalloc+0x188>)
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	687a      	ldr	r2, [r7, #4]
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d869      	bhi.n	8007d88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cb4:	4b43      	ldr	r3, [pc, #268]	; (8007dc4 <pvPortMalloc+0x18c>)
 8007cb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cb8:	4b42      	ldr	r3, [pc, #264]	; (8007dc4 <pvPortMalloc+0x18c>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cbe:	e004      	b.n	8007cca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	687a      	ldr	r2, [r7, #4]
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d903      	bls.n	8007cdc <pvPortMalloc+0xa4>
 8007cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d1f1      	bne.n	8007cc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007cdc:	4b36      	ldr	r3, [pc, #216]	; (8007db8 <pvPortMalloc+0x180>)
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ce2:	429a      	cmp	r2, r3
 8007ce4:	d050      	beq.n	8007d88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ce6:	6a3b      	ldr	r3, [r7, #32]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2208      	movs	r2, #8
 8007cec:	4413      	add	r3, r2
 8007cee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf2:	681a      	ldr	r2, [r3, #0]
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	1ad2      	subs	r2, r2, r3
 8007d00:	2308      	movs	r3, #8
 8007d02:	005b      	lsls	r3, r3, #1
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d91f      	bls.n	8007d48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d10:	69bb      	ldr	r3, [r7, #24]
 8007d12:	f003 0307 	and.w	r3, r3, #7
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d00a      	beq.n	8007d30 <pvPortMalloc+0xf8>
	__asm volatile
 8007d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d1e:	f383 8811 	msr	BASEPRI, r3
 8007d22:	f3bf 8f6f 	isb	sy
 8007d26:	f3bf 8f4f 	dsb	sy
 8007d2a:	613b      	str	r3, [r7, #16]
}
 8007d2c:	bf00      	nop
 8007d2e:	e7fe      	b.n	8007d2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d32:	685a      	ldr	r2, [r3, #4]
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	1ad2      	subs	r2, r2, r3
 8007d38:	69bb      	ldr	r3, [r7, #24]
 8007d3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d42:	69b8      	ldr	r0, [r7, #24]
 8007d44:	f000 f908 	bl	8007f58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d48:	4b1d      	ldr	r3, [pc, #116]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d4a:	681a      	ldr	r2, [r3, #0]
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	685b      	ldr	r3, [r3, #4]
 8007d50:	1ad3      	subs	r3, r2, r3
 8007d52:	4a1b      	ldr	r2, [pc, #108]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d56:	4b1a      	ldr	r3, [pc, #104]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d58:	681a      	ldr	r2, [r3, #0]
 8007d5a:	4b1b      	ldr	r3, [pc, #108]	; (8007dc8 <pvPortMalloc+0x190>)
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	429a      	cmp	r2, r3
 8007d60:	d203      	bcs.n	8007d6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d62:	4b17      	ldr	r3, [pc, #92]	; (8007dc0 <pvPortMalloc+0x188>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	4a18      	ldr	r2, [pc, #96]	; (8007dc8 <pvPortMalloc+0x190>)
 8007d68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6c:	685a      	ldr	r2, [r3, #4]
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <pvPortMalloc+0x184>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d7e:	4b13      	ldr	r3, [pc, #76]	; (8007dcc <pvPortMalloc+0x194>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3301      	adds	r3, #1
 8007d84:	4a11      	ldr	r2, [pc, #68]	; (8007dcc <pvPortMalloc+0x194>)
 8007d86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d88:	f7fe fb06 	bl	8006398 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	f003 0307 	and.w	r3, r3, #7
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d00a      	beq.n	8007dac <pvPortMalloc+0x174>
	__asm volatile
 8007d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d9a:	f383 8811 	msr	BASEPRI, r3
 8007d9e:	f3bf 8f6f 	isb	sy
 8007da2:	f3bf 8f4f 	dsb	sy
 8007da6:	60fb      	str	r3, [r7, #12]
}
 8007da8:	bf00      	nop
 8007daa:	e7fe      	b.n	8007daa <pvPortMalloc+0x172>
	return pvReturn;
 8007dac:	69fb      	ldr	r3, [r7, #28]
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3728      	adds	r7, #40	; 0x28
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	20004a58 	.word	0x20004a58
 8007dbc:	20004a6c 	.word	0x20004a6c
 8007dc0:	20004a5c 	.word	0x20004a5c
 8007dc4:	20004a50 	.word	0x20004a50
 8007dc8:	20004a60 	.word	0x20004a60
 8007dcc:	20004a64 	.word	0x20004a64

08007dd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b086      	sub	sp, #24
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d04d      	beq.n	8007e7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007de2:	2308      	movs	r3, #8
 8007de4:	425b      	negs	r3, r3
 8007de6:	697a      	ldr	r2, [r7, #20]
 8007de8:	4413      	add	r3, r2
 8007dea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007dec:	697b      	ldr	r3, [r7, #20]
 8007dee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007df0:	693b      	ldr	r3, [r7, #16]
 8007df2:	685a      	ldr	r2, [r3, #4]
 8007df4:	4b24      	ldr	r3, [pc, #144]	; (8007e88 <vPortFree+0xb8>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d10a      	bne.n	8007e14 <vPortFree+0x44>
	__asm volatile
 8007dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e02:	f383 8811 	msr	BASEPRI, r3
 8007e06:	f3bf 8f6f 	isb	sy
 8007e0a:	f3bf 8f4f 	dsb	sy
 8007e0e:	60fb      	str	r3, [r7, #12]
}
 8007e10:	bf00      	nop
 8007e12:	e7fe      	b.n	8007e12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d00a      	beq.n	8007e32 <vPortFree+0x62>
	__asm volatile
 8007e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e20:	f383 8811 	msr	BASEPRI, r3
 8007e24:	f3bf 8f6f 	isb	sy
 8007e28:	f3bf 8f4f 	dsb	sy
 8007e2c:	60bb      	str	r3, [r7, #8]
}
 8007e2e:	bf00      	nop
 8007e30:	e7fe      	b.n	8007e30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e32:	693b      	ldr	r3, [r7, #16]
 8007e34:	685a      	ldr	r2, [r3, #4]
 8007e36:	4b14      	ldr	r3, [pc, #80]	; (8007e88 <vPortFree+0xb8>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01e      	beq.n	8007e7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e40:	693b      	ldr	r3, [r7, #16]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d11a      	bne.n	8007e7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e48:	693b      	ldr	r3, [r7, #16]
 8007e4a:	685a      	ldr	r2, [r3, #4]
 8007e4c:	4b0e      	ldr	r3, [pc, #56]	; (8007e88 <vPortFree+0xb8>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	43db      	mvns	r3, r3
 8007e52:	401a      	ands	r2, r3
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e58:	f7fe fa90 	bl	800637c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e5c:	693b      	ldr	r3, [r7, #16]
 8007e5e:	685a      	ldr	r2, [r3, #4]
 8007e60:	4b0a      	ldr	r3, [pc, #40]	; (8007e8c <vPortFree+0xbc>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	4413      	add	r3, r2
 8007e66:	4a09      	ldr	r2, [pc, #36]	; (8007e8c <vPortFree+0xbc>)
 8007e68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e6a:	6938      	ldr	r0, [r7, #16]
 8007e6c:	f000 f874 	bl	8007f58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e70:	4b07      	ldr	r3, [pc, #28]	; (8007e90 <vPortFree+0xc0>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	3301      	adds	r3, #1
 8007e76:	4a06      	ldr	r2, [pc, #24]	; (8007e90 <vPortFree+0xc0>)
 8007e78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e7a:	f7fe fa8d 	bl	8006398 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e7e:	bf00      	nop
 8007e80:	3718      	adds	r7, #24
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20004a6c 	.word	0x20004a6c
 8007e8c:	20004a5c 	.word	0x20004a5c
 8007e90:	20004a68 	.word	0x20004a68

08007e94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e9a:	f643 2398 	movw	r3, #15000	; 0x3a98
 8007e9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ea0:	4b27      	ldr	r3, [pc, #156]	; (8007f40 <prvHeapInit+0xac>)
 8007ea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f003 0307 	and.w	r3, r3, #7
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d00c      	beq.n	8007ec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	3307      	adds	r3, #7
 8007eb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f023 0307 	bic.w	r3, r3, #7
 8007eba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	4a1f      	ldr	r2, [pc, #124]	; (8007f40 <prvHeapInit+0xac>)
 8007ec4:	4413      	add	r3, r2
 8007ec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ecc:	4a1d      	ldr	r2, [pc, #116]	; (8007f44 <prvHeapInit+0xb0>)
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ed2:	4b1c      	ldr	r3, [pc, #112]	; (8007f44 <prvHeapInit+0xb0>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	68ba      	ldr	r2, [r7, #8]
 8007edc:	4413      	add	r3, r2
 8007ede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ee0:	2208      	movs	r2, #8
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	1a9b      	subs	r3, r3, r2
 8007ee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	f023 0307 	bic.w	r3, r3, #7
 8007eee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	4a15      	ldr	r2, [pc, #84]	; (8007f48 <prvHeapInit+0xb4>)
 8007ef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ef6:	4b14      	ldr	r3, [pc, #80]	; (8007f48 <prvHeapInit+0xb4>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	2200      	movs	r2, #0
 8007efc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007efe:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <prvHeapInit+0xb4>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	68fa      	ldr	r2, [r7, #12]
 8007f0e:	1ad2      	subs	r2, r2, r3
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f14:	4b0c      	ldr	r3, [pc, #48]	; (8007f48 <prvHeapInit+0xb4>)
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	683b      	ldr	r3, [r7, #0]
 8007f1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	685b      	ldr	r3, [r3, #4]
 8007f20:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <prvHeapInit+0xb8>)
 8007f22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	685b      	ldr	r3, [r3, #4]
 8007f28:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <prvHeapInit+0xbc>)
 8007f2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f2c:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <prvHeapInit+0xc0>)
 8007f2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f32:	601a      	str	r2, [r3, #0]
}
 8007f34:	bf00      	nop
 8007f36:	3714      	adds	r7, #20
 8007f38:	46bd      	mov	sp, r7
 8007f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3e:	4770      	bx	lr
 8007f40:	20000fb8 	.word	0x20000fb8
 8007f44:	20004a50 	.word	0x20004a50
 8007f48:	20004a58 	.word	0x20004a58
 8007f4c:	20004a60 	.word	0x20004a60
 8007f50:	20004a5c 	.word	0x20004a5c
 8007f54:	20004a6c 	.word	0x20004a6c

08007f58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f60:	4b28      	ldr	r3, [pc, #160]	; (8008004 <prvInsertBlockIntoFreeList+0xac>)
 8007f62:	60fb      	str	r3, [r7, #12]
 8007f64:	e002      	b.n	8007f6c <prvInsertBlockIntoFreeList+0x14>
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	60fb      	str	r3, [r7, #12]
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	687a      	ldr	r2, [r7, #4]
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d8f7      	bhi.n	8007f66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	68ba      	ldr	r2, [r7, #8]
 8007f80:	4413      	add	r3, r2
 8007f82:	687a      	ldr	r2, [r7, #4]
 8007f84:	429a      	cmp	r2, r3
 8007f86:	d108      	bne.n	8007f9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	685a      	ldr	r2, [r3, #4]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	441a      	add	r2, r3
 8007f92:	68fb      	ldr	r3, [r7, #12]
 8007f94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	685b      	ldr	r3, [r3, #4]
 8007fa2:	68ba      	ldr	r2, [r7, #8]
 8007fa4:	441a      	add	r2, r3
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	429a      	cmp	r2, r3
 8007fac:	d118      	bne.n	8007fe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681a      	ldr	r2, [r3, #0]
 8007fb2:	4b15      	ldr	r3, [pc, #84]	; (8008008 <prvInsertBlockIntoFreeList+0xb0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d00d      	beq.n	8007fd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	685a      	ldr	r2, [r3, #4]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	685b      	ldr	r3, [r3, #4]
 8007fc4:	441a      	add	r2, r3
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	681a      	ldr	r2, [r3, #0]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	601a      	str	r2, [r3, #0]
 8007fd4:	e008      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fd6:	4b0c      	ldr	r3, [pc, #48]	; (8008008 <prvInsertBlockIntoFreeList+0xb0>)
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	601a      	str	r2, [r3, #0]
 8007fde:	e003      	b.n	8007fe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fe8:	68fa      	ldr	r2, [r7, #12]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d002      	beq.n	8007ff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	687a      	ldr	r2, [r7, #4]
 8007ff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007ff6:	bf00      	nop
 8007ff8:	3714      	adds	r7, #20
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008000:	4770      	bx	lr
 8008002:	bf00      	nop
 8008004:	20004a50 	.word	0x20004a50
 8008008:	20004a58 	.word	0x20004a58

0800800c <srand>:
 800800c:	b538      	push	{r3, r4, r5, lr}
 800800e:	4b10      	ldr	r3, [pc, #64]	; (8008050 <srand+0x44>)
 8008010:	681d      	ldr	r5, [r3, #0]
 8008012:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008014:	4604      	mov	r4, r0
 8008016:	b9b3      	cbnz	r3, 8008046 <srand+0x3a>
 8008018:	2018      	movs	r0, #24
 800801a:	f000 fb7f 	bl	800871c <malloc>
 800801e:	4602      	mov	r2, r0
 8008020:	6328      	str	r0, [r5, #48]	; 0x30
 8008022:	b920      	cbnz	r0, 800802e <srand+0x22>
 8008024:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <srand+0x48>)
 8008026:	480c      	ldr	r0, [pc, #48]	; (8008058 <srand+0x4c>)
 8008028:	2146      	movs	r1, #70	; 0x46
 800802a:	f000 f9c9 	bl	80083c0 <__assert_func>
 800802e:	490b      	ldr	r1, [pc, #44]	; (800805c <srand+0x50>)
 8008030:	4b0b      	ldr	r3, [pc, #44]	; (8008060 <srand+0x54>)
 8008032:	e9c0 1300 	strd	r1, r3, [r0]
 8008036:	4b0b      	ldr	r3, [pc, #44]	; (8008064 <srand+0x58>)
 8008038:	6083      	str	r3, [r0, #8]
 800803a:	230b      	movs	r3, #11
 800803c:	8183      	strh	r3, [r0, #12]
 800803e:	2100      	movs	r1, #0
 8008040:	2001      	movs	r0, #1
 8008042:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008046:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008048:	2200      	movs	r2, #0
 800804a:	611c      	str	r4, [r3, #16]
 800804c:	615a      	str	r2, [r3, #20]
 800804e:	bd38      	pop	{r3, r4, r5, pc}
 8008050:	2000006c 	.word	0x2000006c
 8008054:	08009408 	.word	0x08009408
 8008058:	0800941f 	.word	0x0800941f
 800805c:	abcd330e 	.word	0xabcd330e
 8008060:	e66d1234 	.word	0xe66d1234
 8008064:	0005deec 	.word	0x0005deec

08008068 <rand>:
 8008068:	4b16      	ldr	r3, [pc, #88]	; (80080c4 <rand+0x5c>)
 800806a:	b510      	push	{r4, lr}
 800806c:	681c      	ldr	r4, [r3, #0]
 800806e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008070:	b9b3      	cbnz	r3, 80080a0 <rand+0x38>
 8008072:	2018      	movs	r0, #24
 8008074:	f000 fb52 	bl	800871c <malloc>
 8008078:	4602      	mov	r2, r0
 800807a:	6320      	str	r0, [r4, #48]	; 0x30
 800807c:	b920      	cbnz	r0, 8008088 <rand+0x20>
 800807e:	4b12      	ldr	r3, [pc, #72]	; (80080c8 <rand+0x60>)
 8008080:	4812      	ldr	r0, [pc, #72]	; (80080cc <rand+0x64>)
 8008082:	2152      	movs	r1, #82	; 0x52
 8008084:	f000 f99c 	bl	80083c0 <__assert_func>
 8008088:	4911      	ldr	r1, [pc, #68]	; (80080d0 <rand+0x68>)
 800808a:	4b12      	ldr	r3, [pc, #72]	; (80080d4 <rand+0x6c>)
 800808c:	e9c0 1300 	strd	r1, r3, [r0]
 8008090:	4b11      	ldr	r3, [pc, #68]	; (80080d8 <rand+0x70>)
 8008092:	6083      	str	r3, [r0, #8]
 8008094:	230b      	movs	r3, #11
 8008096:	8183      	strh	r3, [r0, #12]
 8008098:	2100      	movs	r1, #0
 800809a:	2001      	movs	r0, #1
 800809c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80080a0:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80080a2:	480e      	ldr	r0, [pc, #56]	; (80080dc <rand+0x74>)
 80080a4:	690b      	ldr	r3, [r1, #16]
 80080a6:	694c      	ldr	r4, [r1, #20]
 80080a8:	4a0d      	ldr	r2, [pc, #52]	; (80080e0 <rand+0x78>)
 80080aa:	4358      	muls	r0, r3
 80080ac:	fb02 0004 	mla	r0, r2, r4, r0
 80080b0:	fba3 3202 	umull	r3, r2, r3, r2
 80080b4:	3301      	adds	r3, #1
 80080b6:	eb40 0002 	adc.w	r0, r0, r2
 80080ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80080be:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80080c2:	bd10      	pop	{r4, pc}
 80080c4:	2000006c 	.word	0x2000006c
 80080c8:	08009408 	.word	0x08009408
 80080cc:	0800941f 	.word	0x0800941f
 80080d0:	abcd330e 	.word	0xabcd330e
 80080d4:	e66d1234 	.word	0xe66d1234
 80080d8:	0005deec 	.word	0x0005deec
 80080dc:	5851f42d 	.word	0x5851f42d
 80080e0:	4c957f2d 	.word	0x4c957f2d

080080e4 <std>:
 80080e4:	2300      	movs	r3, #0
 80080e6:	b510      	push	{r4, lr}
 80080e8:	4604      	mov	r4, r0
 80080ea:	e9c0 3300 	strd	r3, r3, [r0]
 80080ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080f2:	6083      	str	r3, [r0, #8]
 80080f4:	8181      	strh	r1, [r0, #12]
 80080f6:	6643      	str	r3, [r0, #100]	; 0x64
 80080f8:	81c2      	strh	r2, [r0, #14]
 80080fa:	6183      	str	r3, [r0, #24]
 80080fc:	4619      	mov	r1, r3
 80080fe:	2208      	movs	r2, #8
 8008100:	305c      	adds	r0, #92	; 0x5c
 8008102:	f000 f8c3 	bl	800828c <memset>
 8008106:	4b0d      	ldr	r3, [pc, #52]	; (800813c <std+0x58>)
 8008108:	6263      	str	r3, [r4, #36]	; 0x24
 800810a:	4b0d      	ldr	r3, [pc, #52]	; (8008140 <std+0x5c>)
 800810c:	62a3      	str	r3, [r4, #40]	; 0x28
 800810e:	4b0d      	ldr	r3, [pc, #52]	; (8008144 <std+0x60>)
 8008110:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008112:	4b0d      	ldr	r3, [pc, #52]	; (8008148 <std+0x64>)
 8008114:	6323      	str	r3, [r4, #48]	; 0x30
 8008116:	4b0d      	ldr	r3, [pc, #52]	; (800814c <std+0x68>)
 8008118:	6224      	str	r4, [r4, #32]
 800811a:	429c      	cmp	r4, r3
 800811c:	d006      	beq.n	800812c <std+0x48>
 800811e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008122:	4294      	cmp	r4, r2
 8008124:	d002      	beq.n	800812c <std+0x48>
 8008126:	33d0      	adds	r3, #208	; 0xd0
 8008128:	429c      	cmp	r4, r3
 800812a:	d105      	bne.n	8008138 <std+0x54>
 800812c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008130:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008134:	f000 b932 	b.w	800839c <__retarget_lock_init_recursive>
 8008138:	bd10      	pop	{r4, pc}
 800813a:	bf00      	nop
 800813c:	08008d01 	.word	0x08008d01
 8008140:	08008d23 	.word	0x08008d23
 8008144:	08008d5b 	.word	0x08008d5b
 8008148:	08008d7f 	.word	0x08008d7f
 800814c:	20004a70 	.word	0x20004a70

08008150 <stdio_exit_handler>:
 8008150:	4a02      	ldr	r2, [pc, #8]	; (800815c <stdio_exit_handler+0xc>)
 8008152:	4903      	ldr	r1, [pc, #12]	; (8008160 <stdio_exit_handler+0x10>)
 8008154:	4803      	ldr	r0, [pc, #12]	; (8008164 <stdio_exit_handler+0x14>)
 8008156:	f000 b869 	b.w	800822c <_fwalk_sglue>
 800815a:	bf00      	nop
 800815c:	20000014 	.word	0x20000014
 8008160:	08008c99 	.word	0x08008c99
 8008164:	20000020 	.word	0x20000020

08008168 <cleanup_stdio>:
 8008168:	6841      	ldr	r1, [r0, #4]
 800816a:	4b0c      	ldr	r3, [pc, #48]	; (800819c <cleanup_stdio+0x34>)
 800816c:	4299      	cmp	r1, r3
 800816e:	b510      	push	{r4, lr}
 8008170:	4604      	mov	r4, r0
 8008172:	d001      	beq.n	8008178 <cleanup_stdio+0x10>
 8008174:	f000 fd90 	bl	8008c98 <_fflush_r>
 8008178:	68a1      	ldr	r1, [r4, #8]
 800817a:	4b09      	ldr	r3, [pc, #36]	; (80081a0 <cleanup_stdio+0x38>)
 800817c:	4299      	cmp	r1, r3
 800817e:	d002      	beq.n	8008186 <cleanup_stdio+0x1e>
 8008180:	4620      	mov	r0, r4
 8008182:	f000 fd89 	bl	8008c98 <_fflush_r>
 8008186:	68e1      	ldr	r1, [r4, #12]
 8008188:	4b06      	ldr	r3, [pc, #24]	; (80081a4 <cleanup_stdio+0x3c>)
 800818a:	4299      	cmp	r1, r3
 800818c:	d004      	beq.n	8008198 <cleanup_stdio+0x30>
 800818e:	4620      	mov	r0, r4
 8008190:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008194:	f000 bd80 	b.w	8008c98 <_fflush_r>
 8008198:	bd10      	pop	{r4, pc}
 800819a:	bf00      	nop
 800819c:	20004a70 	.word	0x20004a70
 80081a0:	20004ad8 	.word	0x20004ad8
 80081a4:	20004b40 	.word	0x20004b40

080081a8 <global_stdio_init.part.0>:
 80081a8:	b510      	push	{r4, lr}
 80081aa:	4b0b      	ldr	r3, [pc, #44]	; (80081d8 <global_stdio_init.part.0+0x30>)
 80081ac:	4c0b      	ldr	r4, [pc, #44]	; (80081dc <global_stdio_init.part.0+0x34>)
 80081ae:	4a0c      	ldr	r2, [pc, #48]	; (80081e0 <global_stdio_init.part.0+0x38>)
 80081b0:	601a      	str	r2, [r3, #0]
 80081b2:	4620      	mov	r0, r4
 80081b4:	2200      	movs	r2, #0
 80081b6:	2104      	movs	r1, #4
 80081b8:	f7ff ff94 	bl	80080e4 <std>
 80081bc:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80081c0:	2201      	movs	r2, #1
 80081c2:	2109      	movs	r1, #9
 80081c4:	f7ff ff8e 	bl	80080e4 <std>
 80081c8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80081cc:	2202      	movs	r2, #2
 80081ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081d2:	2112      	movs	r1, #18
 80081d4:	f7ff bf86 	b.w	80080e4 <std>
 80081d8:	20004ba8 	.word	0x20004ba8
 80081dc:	20004a70 	.word	0x20004a70
 80081e0:	08008151 	.word	0x08008151

080081e4 <__sfp_lock_acquire>:
 80081e4:	4801      	ldr	r0, [pc, #4]	; (80081ec <__sfp_lock_acquire+0x8>)
 80081e6:	f000 b8da 	b.w	800839e <__retarget_lock_acquire_recursive>
 80081ea:	bf00      	nop
 80081ec:	20004bb1 	.word	0x20004bb1

080081f0 <__sfp_lock_release>:
 80081f0:	4801      	ldr	r0, [pc, #4]	; (80081f8 <__sfp_lock_release+0x8>)
 80081f2:	f000 b8d5 	b.w	80083a0 <__retarget_lock_release_recursive>
 80081f6:	bf00      	nop
 80081f8:	20004bb1 	.word	0x20004bb1

080081fc <__sinit>:
 80081fc:	b510      	push	{r4, lr}
 80081fe:	4604      	mov	r4, r0
 8008200:	f7ff fff0 	bl	80081e4 <__sfp_lock_acquire>
 8008204:	6a23      	ldr	r3, [r4, #32]
 8008206:	b11b      	cbz	r3, 8008210 <__sinit+0x14>
 8008208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800820c:	f7ff bff0 	b.w	80081f0 <__sfp_lock_release>
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <__sinit+0x28>)
 8008212:	6223      	str	r3, [r4, #32]
 8008214:	4b04      	ldr	r3, [pc, #16]	; (8008228 <__sinit+0x2c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1f5      	bne.n	8008208 <__sinit+0xc>
 800821c:	f7ff ffc4 	bl	80081a8 <global_stdio_init.part.0>
 8008220:	e7f2      	b.n	8008208 <__sinit+0xc>
 8008222:	bf00      	nop
 8008224:	08008169 	.word	0x08008169
 8008228:	20004ba8 	.word	0x20004ba8

0800822c <_fwalk_sglue>:
 800822c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008230:	4607      	mov	r7, r0
 8008232:	4688      	mov	r8, r1
 8008234:	4614      	mov	r4, r2
 8008236:	2600      	movs	r6, #0
 8008238:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800823c:	f1b9 0901 	subs.w	r9, r9, #1
 8008240:	d505      	bpl.n	800824e <_fwalk_sglue+0x22>
 8008242:	6824      	ldr	r4, [r4, #0]
 8008244:	2c00      	cmp	r4, #0
 8008246:	d1f7      	bne.n	8008238 <_fwalk_sglue+0xc>
 8008248:	4630      	mov	r0, r6
 800824a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	2b01      	cmp	r3, #1
 8008252:	d907      	bls.n	8008264 <_fwalk_sglue+0x38>
 8008254:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008258:	3301      	adds	r3, #1
 800825a:	d003      	beq.n	8008264 <_fwalk_sglue+0x38>
 800825c:	4629      	mov	r1, r5
 800825e:	4638      	mov	r0, r7
 8008260:	47c0      	blx	r8
 8008262:	4306      	orrs	r6, r0
 8008264:	3568      	adds	r5, #104	; 0x68
 8008266:	e7e9      	b.n	800823c <_fwalk_sglue+0x10>

08008268 <iprintf>:
 8008268:	b40f      	push	{r0, r1, r2, r3}
 800826a:	b507      	push	{r0, r1, r2, lr}
 800826c:	4906      	ldr	r1, [pc, #24]	; (8008288 <iprintf+0x20>)
 800826e:	ab04      	add	r3, sp, #16
 8008270:	6808      	ldr	r0, [r1, #0]
 8008272:	f853 2b04 	ldr.w	r2, [r3], #4
 8008276:	6881      	ldr	r1, [r0, #8]
 8008278:	9301      	str	r3, [sp, #4]
 800827a:	f000 f935 	bl	80084e8 <_vfiprintf_r>
 800827e:	b003      	add	sp, #12
 8008280:	f85d eb04 	ldr.w	lr, [sp], #4
 8008284:	b004      	add	sp, #16
 8008286:	4770      	bx	lr
 8008288:	2000006c 	.word	0x2000006c

0800828c <memset>:
 800828c:	4402      	add	r2, r0
 800828e:	4603      	mov	r3, r0
 8008290:	4293      	cmp	r3, r2
 8008292:	d100      	bne.n	8008296 <memset+0xa>
 8008294:	4770      	bx	lr
 8008296:	f803 1b01 	strb.w	r1, [r3], #1
 800829a:	e7f9      	b.n	8008290 <memset+0x4>

0800829c <_reclaim_reent>:
 800829c:	4b29      	ldr	r3, [pc, #164]	; (8008344 <_reclaim_reent+0xa8>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	4283      	cmp	r3, r0
 80082a2:	b570      	push	{r4, r5, r6, lr}
 80082a4:	4604      	mov	r4, r0
 80082a6:	d04b      	beq.n	8008340 <_reclaim_reent+0xa4>
 80082a8:	69c3      	ldr	r3, [r0, #28]
 80082aa:	b143      	cbz	r3, 80082be <_reclaim_reent+0x22>
 80082ac:	68db      	ldr	r3, [r3, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	d144      	bne.n	800833c <_reclaim_reent+0xa0>
 80082b2:	69e3      	ldr	r3, [r4, #28]
 80082b4:	6819      	ldr	r1, [r3, #0]
 80082b6:	b111      	cbz	r1, 80082be <_reclaim_reent+0x22>
 80082b8:	4620      	mov	r0, r4
 80082ba:	f000 f89f 	bl	80083fc <_free_r>
 80082be:	6961      	ldr	r1, [r4, #20]
 80082c0:	b111      	cbz	r1, 80082c8 <_reclaim_reent+0x2c>
 80082c2:	4620      	mov	r0, r4
 80082c4:	f000 f89a 	bl	80083fc <_free_r>
 80082c8:	69e1      	ldr	r1, [r4, #28]
 80082ca:	b111      	cbz	r1, 80082d2 <_reclaim_reent+0x36>
 80082cc:	4620      	mov	r0, r4
 80082ce:	f000 f895 	bl	80083fc <_free_r>
 80082d2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80082d4:	b111      	cbz	r1, 80082dc <_reclaim_reent+0x40>
 80082d6:	4620      	mov	r0, r4
 80082d8:	f000 f890 	bl	80083fc <_free_r>
 80082dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082de:	b111      	cbz	r1, 80082e6 <_reclaim_reent+0x4a>
 80082e0:	4620      	mov	r0, r4
 80082e2:	f000 f88b 	bl	80083fc <_free_r>
 80082e6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80082e8:	b111      	cbz	r1, 80082f0 <_reclaim_reent+0x54>
 80082ea:	4620      	mov	r0, r4
 80082ec:	f000 f886 	bl	80083fc <_free_r>
 80082f0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80082f2:	b111      	cbz	r1, 80082fa <_reclaim_reent+0x5e>
 80082f4:	4620      	mov	r0, r4
 80082f6:	f000 f881 	bl	80083fc <_free_r>
 80082fa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80082fc:	b111      	cbz	r1, 8008304 <_reclaim_reent+0x68>
 80082fe:	4620      	mov	r0, r4
 8008300:	f000 f87c 	bl	80083fc <_free_r>
 8008304:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008306:	b111      	cbz	r1, 800830e <_reclaim_reent+0x72>
 8008308:	4620      	mov	r0, r4
 800830a:	f000 f877 	bl	80083fc <_free_r>
 800830e:	6a23      	ldr	r3, [r4, #32]
 8008310:	b1b3      	cbz	r3, 8008340 <_reclaim_reent+0xa4>
 8008312:	4620      	mov	r0, r4
 8008314:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008318:	4718      	bx	r3
 800831a:	5949      	ldr	r1, [r1, r5]
 800831c:	b941      	cbnz	r1, 8008330 <_reclaim_reent+0x94>
 800831e:	3504      	adds	r5, #4
 8008320:	69e3      	ldr	r3, [r4, #28]
 8008322:	2d80      	cmp	r5, #128	; 0x80
 8008324:	68d9      	ldr	r1, [r3, #12]
 8008326:	d1f8      	bne.n	800831a <_reclaim_reent+0x7e>
 8008328:	4620      	mov	r0, r4
 800832a:	f000 f867 	bl	80083fc <_free_r>
 800832e:	e7c0      	b.n	80082b2 <_reclaim_reent+0x16>
 8008330:	680e      	ldr	r6, [r1, #0]
 8008332:	4620      	mov	r0, r4
 8008334:	f000 f862 	bl	80083fc <_free_r>
 8008338:	4631      	mov	r1, r6
 800833a:	e7ef      	b.n	800831c <_reclaim_reent+0x80>
 800833c:	2500      	movs	r5, #0
 800833e:	e7ef      	b.n	8008320 <_reclaim_reent+0x84>
 8008340:	bd70      	pop	{r4, r5, r6, pc}
 8008342:	bf00      	nop
 8008344:	2000006c 	.word	0x2000006c

08008348 <__errno>:
 8008348:	4b01      	ldr	r3, [pc, #4]	; (8008350 <__errno+0x8>)
 800834a:	6818      	ldr	r0, [r3, #0]
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	2000006c 	.word	0x2000006c

08008354 <__libc_init_array>:
 8008354:	b570      	push	{r4, r5, r6, lr}
 8008356:	4d0d      	ldr	r5, [pc, #52]	; (800838c <__libc_init_array+0x38>)
 8008358:	4c0d      	ldr	r4, [pc, #52]	; (8008390 <__libc_init_array+0x3c>)
 800835a:	1b64      	subs	r4, r4, r5
 800835c:	10a4      	asrs	r4, r4, #2
 800835e:	2600      	movs	r6, #0
 8008360:	42a6      	cmp	r6, r4
 8008362:	d109      	bne.n	8008378 <__libc_init_array+0x24>
 8008364:	4d0b      	ldr	r5, [pc, #44]	; (8008394 <__libc_init_array+0x40>)
 8008366:	4c0c      	ldr	r4, [pc, #48]	; (8008398 <__libc_init_array+0x44>)
 8008368:	f000 fedc 	bl	8009124 <_init>
 800836c:	1b64      	subs	r4, r4, r5
 800836e:	10a4      	asrs	r4, r4, #2
 8008370:	2600      	movs	r6, #0
 8008372:	42a6      	cmp	r6, r4
 8008374:	d105      	bne.n	8008382 <__libc_init_array+0x2e>
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	f855 3b04 	ldr.w	r3, [r5], #4
 800837c:	4798      	blx	r3
 800837e:	3601      	adds	r6, #1
 8008380:	e7ee      	b.n	8008360 <__libc_init_array+0xc>
 8008382:	f855 3b04 	ldr.w	r3, [r5], #4
 8008386:	4798      	blx	r3
 8008388:	3601      	adds	r6, #1
 800838a:	e7f2      	b.n	8008372 <__libc_init_array+0x1e>
 800838c:	080094f0 	.word	0x080094f0
 8008390:	080094f0 	.word	0x080094f0
 8008394:	080094f0 	.word	0x080094f0
 8008398:	080094f4 	.word	0x080094f4

0800839c <__retarget_lock_init_recursive>:
 800839c:	4770      	bx	lr

0800839e <__retarget_lock_acquire_recursive>:
 800839e:	4770      	bx	lr

080083a0 <__retarget_lock_release_recursive>:
 80083a0:	4770      	bx	lr

080083a2 <memcpy>:
 80083a2:	440a      	add	r2, r1
 80083a4:	4291      	cmp	r1, r2
 80083a6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80083aa:	d100      	bne.n	80083ae <memcpy+0xc>
 80083ac:	4770      	bx	lr
 80083ae:	b510      	push	{r4, lr}
 80083b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083b4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083b8:	4291      	cmp	r1, r2
 80083ba:	d1f9      	bne.n	80083b0 <memcpy+0xe>
 80083bc:	bd10      	pop	{r4, pc}
	...

080083c0 <__assert_func>:
 80083c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083c2:	4614      	mov	r4, r2
 80083c4:	461a      	mov	r2, r3
 80083c6:	4b09      	ldr	r3, [pc, #36]	; (80083ec <__assert_func+0x2c>)
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4605      	mov	r5, r0
 80083cc:	68d8      	ldr	r0, [r3, #12]
 80083ce:	b14c      	cbz	r4, 80083e4 <__assert_func+0x24>
 80083d0:	4b07      	ldr	r3, [pc, #28]	; (80083f0 <__assert_func+0x30>)
 80083d2:	9100      	str	r1, [sp, #0]
 80083d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083d8:	4906      	ldr	r1, [pc, #24]	; (80083f4 <__assert_func+0x34>)
 80083da:	462b      	mov	r3, r5
 80083dc:	f000 fcd4 	bl	8008d88 <fiprintf>
 80083e0:	f000 fe54 	bl	800908c <abort>
 80083e4:	4b04      	ldr	r3, [pc, #16]	; (80083f8 <__assert_func+0x38>)
 80083e6:	461c      	mov	r4, r3
 80083e8:	e7f3      	b.n	80083d2 <__assert_func+0x12>
 80083ea:	bf00      	nop
 80083ec:	2000006c 	.word	0x2000006c
 80083f0:	08009477 	.word	0x08009477
 80083f4:	08009484 	.word	0x08009484
 80083f8:	080094b2 	.word	0x080094b2

080083fc <_free_r>:
 80083fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083fe:	2900      	cmp	r1, #0
 8008400:	d044      	beq.n	800848c <_free_r+0x90>
 8008402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008406:	9001      	str	r0, [sp, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	f1a1 0404 	sub.w	r4, r1, #4
 800840e:	bfb8      	it	lt
 8008410:	18e4      	addlt	r4, r4, r3
 8008412:	f000 fc69 	bl	8008ce8 <__malloc_lock>
 8008416:	4a1e      	ldr	r2, [pc, #120]	; (8008490 <_free_r+0x94>)
 8008418:	9801      	ldr	r0, [sp, #4]
 800841a:	6813      	ldr	r3, [r2, #0]
 800841c:	b933      	cbnz	r3, 800842c <_free_r+0x30>
 800841e:	6063      	str	r3, [r4, #4]
 8008420:	6014      	str	r4, [r2, #0]
 8008422:	b003      	add	sp, #12
 8008424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008428:	f000 bc64 	b.w	8008cf4 <__malloc_unlock>
 800842c:	42a3      	cmp	r3, r4
 800842e:	d908      	bls.n	8008442 <_free_r+0x46>
 8008430:	6825      	ldr	r5, [r4, #0]
 8008432:	1961      	adds	r1, r4, r5
 8008434:	428b      	cmp	r3, r1
 8008436:	bf01      	itttt	eq
 8008438:	6819      	ldreq	r1, [r3, #0]
 800843a:	685b      	ldreq	r3, [r3, #4]
 800843c:	1949      	addeq	r1, r1, r5
 800843e:	6021      	streq	r1, [r4, #0]
 8008440:	e7ed      	b.n	800841e <_free_r+0x22>
 8008442:	461a      	mov	r2, r3
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	b10b      	cbz	r3, 800844c <_free_r+0x50>
 8008448:	42a3      	cmp	r3, r4
 800844a:	d9fa      	bls.n	8008442 <_free_r+0x46>
 800844c:	6811      	ldr	r1, [r2, #0]
 800844e:	1855      	adds	r5, r2, r1
 8008450:	42a5      	cmp	r5, r4
 8008452:	d10b      	bne.n	800846c <_free_r+0x70>
 8008454:	6824      	ldr	r4, [r4, #0]
 8008456:	4421      	add	r1, r4
 8008458:	1854      	adds	r4, r2, r1
 800845a:	42a3      	cmp	r3, r4
 800845c:	6011      	str	r1, [r2, #0]
 800845e:	d1e0      	bne.n	8008422 <_free_r+0x26>
 8008460:	681c      	ldr	r4, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	6053      	str	r3, [r2, #4]
 8008466:	440c      	add	r4, r1
 8008468:	6014      	str	r4, [r2, #0]
 800846a:	e7da      	b.n	8008422 <_free_r+0x26>
 800846c:	d902      	bls.n	8008474 <_free_r+0x78>
 800846e:	230c      	movs	r3, #12
 8008470:	6003      	str	r3, [r0, #0]
 8008472:	e7d6      	b.n	8008422 <_free_r+0x26>
 8008474:	6825      	ldr	r5, [r4, #0]
 8008476:	1961      	adds	r1, r4, r5
 8008478:	428b      	cmp	r3, r1
 800847a:	bf04      	itt	eq
 800847c:	6819      	ldreq	r1, [r3, #0]
 800847e:	685b      	ldreq	r3, [r3, #4]
 8008480:	6063      	str	r3, [r4, #4]
 8008482:	bf04      	itt	eq
 8008484:	1949      	addeq	r1, r1, r5
 8008486:	6021      	streq	r1, [r4, #0]
 8008488:	6054      	str	r4, [r2, #4]
 800848a:	e7ca      	b.n	8008422 <_free_r+0x26>
 800848c:	b003      	add	sp, #12
 800848e:	bd30      	pop	{r4, r5, pc}
 8008490:	20004bb4 	.word	0x20004bb4

08008494 <__sfputc_r>:
 8008494:	6893      	ldr	r3, [r2, #8]
 8008496:	3b01      	subs	r3, #1
 8008498:	2b00      	cmp	r3, #0
 800849a:	b410      	push	{r4}
 800849c:	6093      	str	r3, [r2, #8]
 800849e:	da08      	bge.n	80084b2 <__sfputc_r+0x1e>
 80084a0:	6994      	ldr	r4, [r2, #24]
 80084a2:	42a3      	cmp	r3, r4
 80084a4:	db01      	blt.n	80084aa <__sfputc_r+0x16>
 80084a6:	290a      	cmp	r1, #10
 80084a8:	d103      	bne.n	80084b2 <__sfputc_r+0x1e>
 80084aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084ae:	f000 bc7d 	b.w	8008dac <__swbuf_r>
 80084b2:	6813      	ldr	r3, [r2, #0]
 80084b4:	1c58      	adds	r0, r3, #1
 80084b6:	6010      	str	r0, [r2, #0]
 80084b8:	7019      	strb	r1, [r3, #0]
 80084ba:	4608      	mov	r0, r1
 80084bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084c0:	4770      	bx	lr

080084c2 <__sfputs_r>:
 80084c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084c4:	4606      	mov	r6, r0
 80084c6:	460f      	mov	r7, r1
 80084c8:	4614      	mov	r4, r2
 80084ca:	18d5      	adds	r5, r2, r3
 80084cc:	42ac      	cmp	r4, r5
 80084ce:	d101      	bne.n	80084d4 <__sfputs_r+0x12>
 80084d0:	2000      	movs	r0, #0
 80084d2:	e007      	b.n	80084e4 <__sfputs_r+0x22>
 80084d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084d8:	463a      	mov	r2, r7
 80084da:	4630      	mov	r0, r6
 80084dc:	f7ff ffda 	bl	8008494 <__sfputc_r>
 80084e0:	1c43      	adds	r3, r0, #1
 80084e2:	d1f3      	bne.n	80084cc <__sfputs_r+0xa>
 80084e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084e8 <_vfiprintf_r>:
 80084e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084ec:	460d      	mov	r5, r1
 80084ee:	b09d      	sub	sp, #116	; 0x74
 80084f0:	4614      	mov	r4, r2
 80084f2:	4698      	mov	r8, r3
 80084f4:	4606      	mov	r6, r0
 80084f6:	b118      	cbz	r0, 8008500 <_vfiprintf_r+0x18>
 80084f8:	6a03      	ldr	r3, [r0, #32]
 80084fa:	b90b      	cbnz	r3, 8008500 <_vfiprintf_r+0x18>
 80084fc:	f7ff fe7e 	bl	80081fc <__sinit>
 8008500:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008502:	07d9      	lsls	r1, r3, #31
 8008504:	d405      	bmi.n	8008512 <_vfiprintf_r+0x2a>
 8008506:	89ab      	ldrh	r3, [r5, #12]
 8008508:	059a      	lsls	r2, r3, #22
 800850a:	d402      	bmi.n	8008512 <_vfiprintf_r+0x2a>
 800850c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800850e:	f7ff ff46 	bl	800839e <__retarget_lock_acquire_recursive>
 8008512:	89ab      	ldrh	r3, [r5, #12]
 8008514:	071b      	lsls	r3, r3, #28
 8008516:	d501      	bpl.n	800851c <_vfiprintf_r+0x34>
 8008518:	692b      	ldr	r3, [r5, #16]
 800851a:	b99b      	cbnz	r3, 8008544 <_vfiprintf_r+0x5c>
 800851c:	4629      	mov	r1, r5
 800851e:	4630      	mov	r0, r6
 8008520:	f000 fc82 	bl	8008e28 <__swsetup_r>
 8008524:	b170      	cbz	r0, 8008544 <_vfiprintf_r+0x5c>
 8008526:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008528:	07dc      	lsls	r4, r3, #31
 800852a:	d504      	bpl.n	8008536 <_vfiprintf_r+0x4e>
 800852c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008530:	b01d      	add	sp, #116	; 0x74
 8008532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008536:	89ab      	ldrh	r3, [r5, #12]
 8008538:	0598      	lsls	r0, r3, #22
 800853a:	d4f7      	bmi.n	800852c <_vfiprintf_r+0x44>
 800853c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800853e:	f7ff ff2f 	bl	80083a0 <__retarget_lock_release_recursive>
 8008542:	e7f3      	b.n	800852c <_vfiprintf_r+0x44>
 8008544:	2300      	movs	r3, #0
 8008546:	9309      	str	r3, [sp, #36]	; 0x24
 8008548:	2320      	movs	r3, #32
 800854a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800854e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008552:	2330      	movs	r3, #48	; 0x30
 8008554:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008708 <_vfiprintf_r+0x220>
 8008558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800855c:	f04f 0901 	mov.w	r9, #1
 8008560:	4623      	mov	r3, r4
 8008562:	469a      	mov	sl, r3
 8008564:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008568:	b10a      	cbz	r2, 800856e <_vfiprintf_r+0x86>
 800856a:	2a25      	cmp	r2, #37	; 0x25
 800856c:	d1f9      	bne.n	8008562 <_vfiprintf_r+0x7a>
 800856e:	ebba 0b04 	subs.w	fp, sl, r4
 8008572:	d00b      	beq.n	800858c <_vfiprintf_r+0xa4>
 8008574:	465b      	mov	r3, fp
 8008576:	4622      	mov	r2, r4
 8008578:	4629      	mov	r1, r5
 800857a:	4630      	mov	r0, r6
 800857c:	f7ff ffa1 	bl	80084c2 <__sfputs_r>
 8008580:	3001      	adds	r0, #1
 8008582:	f000 80a9 	beq.w	80086d8 <_vfiprintf_r+0x1f0>
 8008586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008588:	445a      	add	r2, fp
 800858a:	9209      	str	r2, [sp, #36]	; 0x24
 800858c:	f89a 3000 	ldrb.w	r3, [sl]
 8008590:	2b00      	cmp	r3, #0
 8008592:	f000 80a1 	beq.w	80086d8 <_vfiprintf_r+0x1f0>
 8008596:	2300      	movs	r3, #0
 8008598:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800859c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80085a0:	f10a 0a01 	add.w	sl, sl, #1
 80085a4:	9304      	str	r3, [sp, #16]
 80085a6:	9307      	str	r3, [sp, #28]
 80085a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80085ac:	931a      	str	r3, [sp, #104]	; 0x68
 80085ae:	4654      	mov	r4, sl
 80085b0:	2205      	movs	r2, #5
 80085b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085b6:	4854      	ldr	r0, [pc, #336]	; (8008708 <_vfiprintf_r+0x220>)
 80085b8:	f7f7 fe0a 	bl	80001d0 <memchr>
 80085bc:	9a04      	ldr	r2, [sp, #16]
 80085be:	b9d8      	cbnz	r0, 80085f8 <_vfiprintf_r+0x110>
 80085c0:	06d1      	lsls	r1, r2, #27
 80085c2:	bf44      	itt	mi
 80085c4:	2320      	movmi	r3, #32
 80085c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ca:	0713      	lsls	r3, r2, #28
 80085cc:	bf44      	itt	mi
 80085ce:	232b      	movmi	r3, #43	; 0x2b
 80085d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085d4:	f89a 3000 	ldrb.w	r3, [sl]
 80085d8:	2b2a      	cmp	r3, #42	; 0x2a
 80085da:	d015      	beq.n	8008608 <_vfiprintf_r+0x120>
 80085dc:	9a07      	ldr	r2, [sp, #28]
 80085de:	4654      	mov	r4, sl
 80085e0:	2000      	movs	r0, #0
 80085e2:	f04f 0c0a 	mov.w	ip, #10
 80085e6:	4621      	mov	r1, r4
 80085e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085ec:	3b30      	subs	r3, #48	; 0x30
 80085ee:	2b09      	cmp	r3, #9
 80085f0:	d94d      	bls.n	800868e <_vfiprintf_r+0x1a6>
 80085f2:	b1b0      	cbz	r0, 8008622 <_vfiprintf_r+0x13a>
 80085f4:	9207      	str	r2, [sp, #28]
 80085f6:	e014      	b.n	8008622 <_vfiprintf_r+0x13a>
 80085f8:	eba0 0308 	sub.w	r3, r0, r8
 80085fc:	fa09 f303 	lsl.w	r3, r9, r3
 8008600:	4313      	orrs	r3, r2
 8008602:	9304      	str	r3, [sp, #16]
 8008604:	46a2      	mov	sl, r4
 8008606:	e7d2      	b.n	80085ae <_vfiprintf_r+0xc6>
 8008608:	9b03      	ldr	r3, [sp, #12]
 800860a:	1d19      	adds	r1, r3, #4
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	9103      	str	r1, [sp, #12]
 8008610:	2b00      	cmp	r3, #0
 8008612:	bfbb      	ittet	lt
 8008614:	425b      	neglt	r3, r3
 8008616:	f042 0202 	orrlt.w	r2, r2, #2
 800861a:	9307      	strge	r3, [sp, #28]
 800861c:	9307      	strlt	r3, [sp, #28]
 800861e:	bfb8      	it	lt
 8008620:	9204      	strlt	r2, [sp, #16]
 8008622:	7823      	ldrb	r3, [r4, #0]
 8008624:	2b2e      	cmp	r3, #46	; 0x2e
 8008626:	d10c      	bne.n	8008642 <_vfiprintf_r+0x15a>
 8008628:	7863      	ldrb	r3, [r4, #1]
 800862a:	2b2a      	cmp	r3, #42	; 0x2a
 800862c:	d134      	bne.n	8008698 <_vfiprintf_r+0x1b0>
 800862e:	9b03      	ldr	r3, [sp, #12]
 8008630:	1d1a      	adds	r2, r3, #4
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	9203      	str	r2, [sp, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	bfb8      	it	lt
 800863a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800863e:	3402      	adds	r4, #2
 8008640:	9305      	str	r3, [sp, #20]
 8008642:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008718 <_vfiprintf_r+0x230>
 8008646:	7821      	ldrb	r1, [r4, #0]
 8008648:	2203      	movs	r2, #3
 800864a:	4650      	mov	r0, sl
 800864c:	f7f7 fdc0 	bl	80001d0 <memchr>
 8008650:	b138      	cbz	r0, 8008662 <_vfiprintf_r+0x17a>
 8008652:	9b04      	ldr	r3, [sp, #16]
 8008654:	eba0 000a 	sub.w	r0, r0, sl
 8008658:	2240      	movs	r2, #64	; 0x40
 800865a:	4082      	lsls	r2, r0
 800865c:	4313      	orrs	r3, r2
 800865e:	3401      	adds	r4, #1
 8008660:	9304      	str	r3, [sp, #16]
 8008662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008666:	4829      	ldr	r0, [pc, #164]	; (800870c <_vfiprintf_r+0x224>)
 8008668:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800866c:	2206      	movs	r2, #6
 800866e:	f7f7 fdaf 	bl	80001d0 <memchr>
 8008672:	2800      	cmp	r0, #0
 8008674:	d03f      	beq.n	80086f6 <_vfiprintf_r+0x20e>
 8008676:	4b26      	ldr	r3, [pc, #152]	; (8008710 <_vfiprintf_r+0x228>)
 8008678:	bb1b      	cbnz	r3, 80086c2 <_vfiprintf_r+0x1da>
 800867a:	9b03      	ldr	r3, [sp, #12]
 800867c:	3307      	adds	r3, #7
 800867e:	f023 0307 	bic.w	r3, r3, #7
 8008682:	3308      	adds	r3, #8
 8008684:	9303      	str	r3, [sp, #12]
 8008686:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008688:	443b      	add	r3, r7
 800868a:	9309      	str	r3, [sp, #36]	; 0x24
 800868c:	e768      	b.n	8008560 <_vfiprintf_r+0x78>
 800868e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008692:	460c      	mov	r4, r1
 8008694:	2001      	movs	r0, #1
 8008696:	e7a6      	b.n	80085e6 <_vfiprintf_r+0xfe>
 8008698:	2300      	movs	r3, #0
 800869a:	3401      	adds	r4, #1
 800869c:	9305      	str	r3, [sp, #20]
 800869e:	4619      	mov	r1, r3
 80086a0:	f04f 0c0a 	mov.w	ip, #10
 80086a4:	4620      	mov	r0, r4
 80086a6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80086aa:	3a30      	subs	r2, #48	; 0x30
 80086ac:	2a09      	cmp	r2, #9
 80086ae:	d903      	bls.n	80086b8 <_vfiprintf_r+0x1d0>
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d0c6      	beq.n	8008642 <_vfiprintf_r+0x15a>
 80086b4:	9105      	str	r1, [sp, #20]
 80086b6:	e7c4      	b.n	8008642 <_vfiprintf_r+0x15a>
 80086b8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086bc:	4604      	mov	r4, r0
 80086be:	2301      	movs	r3, #1
 80086c0:	e7f0      	b.n	80086a4 <_vfiprintf_r+0x1bc>
 80086c2:	ab03      	add	r3, sp, #12
 80086c4:	9300      	str	r3, [sp, #0]
 80086c6:	462a      	mov	r2, r5
 80086c8:	4b12      	ldr	r3, [pc, #72]	; (8008714 <_vfiprintf_r+0x22c>)
 80086ca:	a904      	add	r1, sp, #16
 80086cc:	4630      	mov	r0, r6
 80086ce:	f3af 8000 	nop.w
 80086d2:	4607      	mov	r7, r0
 80086d4:	1c78      	adds	r0, r7, #1
 80086d6:	d1d6      	bne.n	8008686 <_vfiprintf_r+0x19e>
 80086d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086da:	07d9      	lsls	r1, r3, #31
 80086dc:	d405      	bmi.n	80086ea <_vfiprintf_r+0x202>
 80086de:	89ab      	ldrh	r3, [r5, #12]
 80086e0:	059a      	lsls	r2, r3, #22
 80086e2:	d402      	bmi.n	80086ea <_vfiprintf_r+0x202>
 80086e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086e6:	f7ff fe5b 	bl	80083a0 <__retarget_lock_release_recursive>
 80086ea:	89ab      	ldrh	r3, [r5, #12]
 80086ec:	065b      	lsls	r3, r3, #25
 80086ee:	f53f af1d 	bmi.w	800852c <_vfiprintf_r+0x44>
 80086f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086f4:	e71c      	b.n	8008530 <_vfiprintf_r+0x48>
 80086f6:	ab03      	add	r3, sp, #12
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	462a      	mov	r2, r5
 80086fc:	4b05      	ldr	r3, [pc, #20]	; (8008714 <_vfiprintf_r+0x22c>)
 80086fe:	a904      	add	r1, sp, #16
 8008700:	4630      	mov	r0, r6
 8008702:	f000 f921 	bl	8008948 <_printf_i>
 8008706:	e7e4      	b.n	80086d2 <_vfiprintf_r+0x1ea>
 8008708:	080094b3 	.word	0x080094b3
 800870c:	080094bd 	.word	0x080094bd
 8008710:	00000000 	.word	0x00000000
 8008714:	080084c3 	.word	0x080084c3
 8008718:	080094b9 	.word	0x080094b9

0800871c <malloc>:
 800871c:	4b02      	ldr	r3, [pc, #8]	; (8008728 <malloc+0xc>)
 800871e:	4601      	mov	r1, r0
 8008720:	6818      	ldr	r0, [r3, #0]
 8008722:	f000 b823 	b.w	800876c <_malloc_r>
 8008726:	bf00      	nop
 8008728:	2000006c 	.word	0x2000006c

0800872c <sbrk_aligned>:
 800872c:	b570      	push	{r4, r5, r6, lr}
 800872e:	4e0e      	ldr	r6, [pc, #56]	; (8008768 <sbrk_aligned+0x3c>)
 8008730:	460c      	mov	r4, r1
 8008732:	6831      	ldr	r1, [r6, #0]
 8008734:	4605      	mov	r5, r0
 8008736:	b911      	cbnz	r1, 800873e <sbrk_aligned+0x12>
 8008738:	f000 fc86 	bl	8009048 <_sbrk_r>
 800873c:	6030      	str	r0, [r6, #0]
 800873e:	4621      	mov	r1, r4
 8008740:	4628      	mov	r0, r5
 8008742:	f000 fc81 	bl	8009048 <_sbrk_r>
 8008746:	1c43      	adds	r3, r0, #1
 8008748:	d00a      	beq.n	8008760 <sbrk_aligned+0x34>
 800874a:	1cc4      	adds	r4, r0, #3
 800874c:	f024 0403 	bic.w	r4, r4, #3
 8008750:	42a0      	cmp	r0, r4
 8008752:	d007      	beq.n	8008764 <sbrk_aligned+0x38>
 8008754:	1a21      	subs	r1, r4, r0
 8008756:	4628      	mov	r0, r5
 8008758:	f000 fc76 	bl	8009048 <_sbrk_r>
 800875c:	3001      	adds	r0, #1
 800875e:	d101      	bne.n	8008764 <sbrk_aligned+0x38>
 8008760:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008764:	4620      	mov	r0, r4
 8008766:	bd70      	pop	{r4, r5, r6, pc}
 8008768:	20004bb8 	.word	0x20004bb8

0800876c <_malloc_r>:
 800876c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008770:	1ccd      	adds	r5, r1, #3
 8008772:	f025 0503 	bic.w	r5, r5, #3
 8008776:	3508      	adds	r5, #8
 8008778:	2d0c      	cmp	r5, #12
 800877a:	bf38      	it	cc
 800877c:	250c      	movcc	r5, #12
 800877e:	2d00      	cmp	r5, #0
 8008780:	4607      	mov	r7, r0
 8008782:	db01      	blt.n	8008788 <_malloc_r+0x1c>
 8008784:	42a9      	cmp	r1, r5
 8008786:	d905      	bls.n	8008794 <_malloc_r+0x28>
 8008788:	230c      	movs	r3, #12
 800878a:	603b      	str	r3, [r7, #0]
 800878c:	2600      	movs	r6, #0
 800878e:	4630      	mov	r0, r6
 8008790:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008794:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008868 <_malloc_r+0xfc>
 8008798:	f000 faa6 	bl	8008ce8 <__malloc_lock>
 800879c:	f8d8 3000 	ldr.w	r3, [r8]
 80087a0:	461c      	mov	r4, r3
 80087a2:	bb5c      	cbnz	r4, 80087fc <_malloc_r+0x90>
 80087a4:	4629      	mov	r1, r5
 80087a6:	4638      	mov	r0, r7
 80087a8:	f7ff ffc0 	bl	800872c <sbrk_aligned>
 80087ac:	1c43      	adds	r3, r0, #1
 80087ae:	4604      	mov	r4, r0
 80087b0:	d155      	bne.n	800885e <_malloc_r+0xf2>
 80087b2:	f8d8 4000 	ldr.w	r4, [r8]
 80087b6:	4626      	mov	r6, r4
 80087b8:	2e00      	cmp	r6, #0
 80087ba:	d145      	bne.n	8008848 <_malloc_r+0xdc>
 80087bc:	2c00      	cmp	r4, #0
 80087be:	d048      	beq.n	8008852 <_malloc_r+0xe6>
 80087c0:	6823      	ldr	r3, [r4, #0]
 80087c2:	4631      	mov	r1, r6
 80087c4:	4638      	mov	r0, r7
 80087c6:	eb04 0903 	add.w	r9, r4, r3
 80087ca:	f000 fc3d 	bl	8009048 <_sbrk_r>
 80087ce:	4581      	cmp	r9, r0
 80087d0:	d13f      	bne.n	8008852 <_malloc_r+0xe6>
 80087d2:	6821      	ldr	r1, [r4, #0]
 80087d4:	1a6d      	subs	r5, r5, r1
 80087d6:	4629      	mov	r1, r5
 80087d8:	4638      	mov	r0, r7
 80087da:	f7ff ffa7 	bl	800872c <sbrk_aligned>
 80087de:	3001      	adds	r0, #1
 80087e0:	d037      	beq.n	8008852 <_malloc_r+0xe6>
 80087e2:	6823      	ldr	r3, [r4, #0]
 80087e4:	442b      	add	r3, r5
 80087e6:	6023      	str	r3, [r4, #0]
 80087e8:	f8d8 3000 	ldr.w	r3, [r8]
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d038      	beq.n	8008862 <_malloc_r+0xf6>
 80087f0:	685a      	ldr	r2, [r3, #4]
 80087f2:	42a2      	cmp	r2, r4
 80087f4:	d12b      	bne.n	800884e <_malloc_r+0xe2>
 80087f6:	2200      	movs	r2, #0
 80087f8:	605a      	str	r2, [r3, #4]
 80087fa:	e00f      	b.n	800881c <_malloc_r+0xb0>
 80087fc:	6822      	ldr	r2, [r4, #0]
 80087fe:	1b52      	subs	r2, r2, r5
 8008800:	d41f      	bmi.n	8008842 <_malloc_r+0xd6>
 8008802:	2a0b      	cmp	r2, #11
 8008804:	d917      	bls.n	8008836 <_malloc_r+0xca>
 8008806:	1961      	adds	r1, r4, r5
 8008808:	42a3      	cmp	r3, r4
 800880a:	6025      	str	r5, [r4, #0]
 800880c:	bf18      	it	ne
 800880e:	6059      	strne	r1, [r3, #4]
 8008810:	6863      	ldr	r3, [r4, #4]
 8008812:	bf08      	it	eq
 8008814:	f8c8 1000 	streq.w	r1, [r8]
 8008818:	5162      	str	r2, [r4, r5]
 800881a:	604b      	str	r3, [r1, #4]
 800881c:	4638      	mov	r0, r7
 800881e:	f104 060b 	add.w	r6, r4, #11
 8008822:	f000 fa67 	bl	8008cf4 <__malloc_unlock>
 8008826:	f026 0607 	bic.w	r6, r6, #7
 800882a:	1d23      	adds	r3, r4, #4
 800882c:	1af2      	subs	r2, r6, r3
 800882e:	d0ae      	beq.n	800878e <_malloc_r+0x22>
 8008830:	1b9b      	subs	r3, r3, r6
 8008832:	50a3      	str	r3, [r4, r2]
 8008834:	e7ab      	b.n	800878e <_malloc_r+0x22>
 8008836:	42a3      	cmp	r3, r4
 8008838:	6862      	ldr	r2, [r4, #4]
 800883a:	d1dd      	bne.n	80087f8 <_malloc_r+0x8c>
 800883c:	f8c8 2000 	str.w	r2, [r8]
 8008840:	e7ec      	b.n	800881c <_malloc_r+0xb0>
 8008842:	4623      	mov	r3, r4
 8008844:	6864      	ldr	r4, [r4, #4]
 8008846:	e7ac      	b.n	80087a2 <_malloc_r+0x36>
 8008848:	4634      	mov	r4, r6
 800884a:	6876      	ldr	r6, [r6, #4]
 800884c:	e7b4      	b.n	80087b8 <_malloc_r+0x4c>
 800884e:	4613      	mov	r3, r2
 8008850:	e7cc      	b.n	80087ec <_malloc_r+0x80>
 8008852:	230c      	movs	r3, #12
 8008854:	603b      	str	r3, [r7, #0]
 8008856:	4638      	mov	r0, r7
 8008858:	f000 fa4c 	bl	8008cf4 <__malloc_unlock>
 800885c:	e797      	b.n	800878e <_malloc_r+0x22>
 800885e:	6025      	str	r5, [r4, #0]
 8008860:	e7dc      	b.n	800881c <_malloc_r+0xb0>
 8008862:	605b      	str	r3, [r3, #4]
 8008864:	deff      	udf	#255	; 0xff
 8008866:	bf00      	nop
 8008868:	20004bb4 	.word	0x20004bb4

0800886c <_printf_common>:
 800886c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008870:	4616      	mov	r6, r2
 8008872:	4699      	mov	r9, r3
 8008874:	688a      	ldr	r2, [r1, #8]
 8008876:	690b      	ldr	r3, [r1, #16]
 8008878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800887c:	4293      	cmp	r3, r2
 800887e:	bfb8      	it	lt
 8008880:	4613      	movlt	r3, r2
 8008882:	6033      	str	r3, [r6, #0]
 8008884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008888:	4607      	mov	r7, r0
 800888a:	460c      	mov	r4, r1
 800888c:	b10a      	cbz	r2, 8008892 <_printf_common+0x26>
 800888e:	3301      	adds	r3, #1
 8008890:	6033      	str	r3, [r6, #0]
 8008892:	6823      	ldr	r3, [r4, #0]
 8008894:	0699      	lsls	r1, r3, #26
 8008896:	bf42      	ittt	mi
 8008898:	6833      	ldrmi	r3, [r6, #0]
 800889a:	3302      	addmi	r3, #2
 800889c:	6033      	strmi	r3, [r6, #0]
 800889e:	6825      	ldr	r5, [r4, #0]
 80088a0:	f015 0506 	ands.w	r5, r5, #6
 80088a4:	d106      	bne.n	80088b4 <_printf_common+0x48>
 80088a6:	f104 0a19 	add.w	sl, r4, #25
 80088aa:	68e3      	ldr	r3, [r4, #12]
 80088ac:	6832      	ldr	r2, [r6, #0]
 80088ae:	1a9b      	subs	r3, r3, r2
 80088b0:	42ab      	cmp	r3, r5
 80088b2:	dc26      	bgt.n	8008902 <_printf_common+0x96>
 80088b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088b8:	1e13      	subs	r3, r2, #0
 80088ba:	6822      	ldr	r2, [r4, #0]
 80088bc:	bf18      	it	ne
 80088be:	2301      	movne	r3, #1
 80088c0:	0692      	lsls	r2, r2, #26
 80088c2:	d42b      	bmi.n	800891c <_printf_common+0xb0>
 80088c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088c8:	4649      	mov	r1, r9
 80088ca:	4638      	mov	r0, r7
 80088cc:	47c0      	blx	r8
 80088ce:	3001      	adds	r0, #1
 80088d0:	d01e      	beq.n	8008910 <_printf_common+0xa4>
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	6922      	ldr	r2, [r4, #16]
 80088d6:	f003 0306 	and.w	r3, r3, #6
 80088da:	2b04      	cmp	r3, #4
 80088dc:	bf02      	ittt	eq
 80088de:	68e5      	ldreq	r5, [r4, #12]
 80088e0:	6833      	ldreq	r3, [r6, #0]
 80088e2:	1aed      	subeq	r5, r5, r3
 80088e4:	68a3      	ldr	r3, [r4, #8]
 80088e6:	bf0c      	ite	eq
 80088e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088ec:	2500      	movne	r5, #0
 80088ee:	4293      	cmp	r3, r2
 80088f0:	bfc4      	itt	gt
 80088f2:	1a9b      	subgt	r3, r3, r2
 80088f4:	18ed      	addgt	r5, r5, r3
 80088f6:	2600      	movs	r6, #0
 80088f8:	341a      	adds	r4, #26
 80088fa:	42b5      	cmp	r5, r6
 80088fc:	d11a      	bne.n	8008934 <_printf_common+0xc8>
 80088fe:	2000      	movs	r0, #0
 8008900:	e008      	b.n	8008914 <_printf_common+0xa8>
 8008902:	2301      	movs	r3, #1
 8008904:	4652      	mov	r2, sl
 8008906:	4649      	mov	r1, r9
 8008908:	4638      	mov	r0, r7
 800890a:	47c0      	blx	r8
 800890c:	3001      	adds	r0, #1
 800890e:	d103      	bne.n	8008918 <_printf_common+0xac>
 8008910:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008918:	3501      	adds	r5, #1
 800891a:	e7c6      	b.n	80088aa <_printf_common+0x3e>
 800891c:	18e1      	adds	r1, r4, r3
 800891e:	1c5a      	adds	r2, r3, #1
 8008920:	2030      	movs	r0, #48	; 0x30
 8008922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008926:	4422      	add	r2, r4
 8008928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800892c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008930:	3302      	adds	r3, #2
 8008932:	e7c7      	b.n	80088c4 <_printf_common+0x58>
 8008934:	2301      	movs	r3, #1
 8008936:	4622      	mov	r2, r4
 8008938:	4649      	mov	r1, r9
 800893a:	4638      	mov	r0, r7
 800893c:	47c0      	blx	r8
 800893e:	3001      	adds	r0, #1
 8008940:	d0e6      	beq.n	8008910 <_printf_common+0xa4>
 8008942:	3601      	adds	r6, #1
 8008944:	e7d9      	b.n	80088fa <_printf_common+0x8e>
	...

08008948 <_printf_i>:
 8008948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800894c:	7e0f      	ldrb	r7, [r1, #24]
 800894e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008950:	2f78      	cmp	r7, #120	; 0x78
 8008952:	4691      	mov	r9, r2
 8008954:	4680      	mov	r8, r0
 8008956:	460c      	mov	r4, r1
 8008958:	469a      	mov	sl, r3
 800895a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800895e:	d807      	bhi.n	8008970 <_printf_i+0x28>
 8008960:	2f62      	cmp	r7, #98	; 0x62
 8008962:	d80a      	bhi.n	800897a <_printf_i+0x32>
 8008964:	2f00      	cmp	r7, #0
 8008966:	f000 80d4 	beq.w	8008b12 <_printf_i+0x1ca>
 800896a:	2f58      	cmp	r7, #88	; 0x58
 800896c:	f000 80c0 	beq.w	8008af0 <_printf_i+0x1a8>
 8008970:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008978:	e03a      	b.n	80089f0 <_printf_i+0xa8>
 800897a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800897e:	2b15      	cmp	r3, #21
 8008980:	d8f6      	bhi.n	8008970 <_printf_i+0x28>
 8008982:	a101      	add	r1, pc, #4	; (adr r1, 8008988 <_printf_i+0x40>)
 8008984:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008988:	080089e1 	.word	0x080089e1
 800898c:	080089f5 	.word	0x080089f5
 8008990:	08008971 	.word	0x08008971
 8008994:	08008971 	.word	0x08008971
 8008998:	08008971 	.word	0x08008971
 800899c:	08008971 	.word	0x08008971
 80089a0:	080089f5 	.word	0x080089f5
 80089a4:	08008971 	.word	0x08008971
 80089a8:	08008971 	.word	0x08008971
 80089ac:	08008971 	.word	0x08008971
 80089b0:	08008971 	.word	0x08008971
 80089b4:	08008af9 	.word	0x08008af9
 80089b8:	08008a21 	.word	0x08008a21
 80089bc:	08008ab3 	.word	0x08008ab3
 80089c0:	08008971 	.word	0x08008971
 80089c4:	08008971 	.word	0x08008971
 80089c8:	08008b1b 	.word	0x08008b1b
 80089cc:	08008971 	.word	0x08008971
 80089d0:	08008a21 	.word	0x08008a21
 80089d4:	08008971 	.word	0x08008971
 80089d8:	08008971 	.word	0x08008971
 80089dc:	08008abb 	.word	0x08008abb
 80089e0:	682b      	ldr	r3, [r5, #0]
 80089e2:	1d1a      	adds	r2, r3, #4
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	602a      	str	r2, [r5, #0]
 80089e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089f0:	2301      	movs	r3, #1
 80089f2:	e09f      	b.n	8008b34 <_printf_i+0x1ec>
 80089f4:	6820      	ldr	r0, [r4, #0]
 80089f6:	682b      	ldr	r3, [r5, #0]
 80089f8:	0607      	lsls	r7, r0, #24
 80089fa:	f103 0104 	add.w	r1, r3, #4
 80089fe:	6029      	str	r1, [r5, #0]
 8008a00:	d501      	bpl.n	8008a06 <_printf_i+0xbe>
 8008a02:	681e      	ldr	r6, [r3, #0]
 8008a04:	e003      	b.n	8008a0e <_printf_i+0xc6>
 8008a06:	0646      	lsls	r6, r0, #25
 8008a08:	d5fb      	bpl.n	8008a02 <_printf_i+0xba>
 8008a0a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a0e:	2e00      	cmp	r6, #0
 8008a10:	da03      	bge.n	8008a1a <_printf_i+0xd2>
 8008a12:	232d      	movs	r3, #45	; 0x2d
 8008a14:	4276      	negs	r6, r6
 8008a16:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a1a:	485a      	ldr	r0, [pc, #360]	; (8008b84 <_printf_i+0x23c>)
 8008a1c:	230a      	movs	r3, #10
 8008a1e:	e012      	b.n	8008a46 <_printf_i+0xfe>
 8008a20:	682b      	ldr	r3, [r5, #0]
 8008a22:	6820      	ldr	r0, [r4, #0]
 8008a24:	1d19      	adds	r1, r3, #4
 8008a26:	6029      	str	r1, [r5, #0]
 8008a28:	0605      	lsls	r5, r0, #24
 8008a2a:	d501      	bpl.n	8008a30 <_printf_i+0xe8>
 8008a2c:	681e      	ldr	r6, [r3, #0]
 8008a2e:	e002      	b.n	8008a36 <_printf_i+0xee>
 8008a30:	0641      	lsls	r1, r0, #25
 8008a32:	d5fb      	bpl.n	8008a2c <_printf_i+0xe4>
 8008a34:	881e      	ldrh	r6, [r3, #0]
 8008a36:	4853      	ldr	r0, [pc, #332]	; (8008b84 <_printf_i+0x23c>)
 8008a38:	2f6f      	cmp	r7, #111	; 0x6f
 8008a3a:	bf0c      	ite	eq
 8008a3c:	2308      	moveq	r3, #8
 8008a3e:	230a      	movne	r3, #10
 8008a40:	2100      	movs	r1, #0
 8008a42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a46:	6865      	ldr	r5, [r4, #4]
 8008a48:	60a5      	str	r5, [r4, #8]
 8008a4a:	2d00      	cmp	r5, #0
 8008a4c:	bfa2      	ittt	ge
 8008a4e:	6821      	ldrge	r1, [r4, #0]
 8008a50:	f021 0104 	bicge.w	r1, r1, #4
 8008a54:	6021      	strge	r1, [r4, #0]
 8008a56:	b90e      	cbnz	r6, 8008a5c <_printf_i+0x114>
 8008a58:	2d00      	cmp	r5, #0
 8008a5a:	d04b      	beq.n	8008af4 <_printf_i+0x1ac>
 8008a5c:	4615      	mov	r5, r2
 8008a5e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a62:	fb03 6711 	mls	r7, r3, r1, r6
 8008a66:	5dc7      	ldrb	r7, [r0, r7]
 8008a68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a6c:	4637      	mov	r7, r6
 8008a6e:	42bb      	cmp	r3, r7
 8008a70:	460e      	mov	r6, r1
 8008a72:	d9f4      	bls.n	8008a5e <_printf_i+0x116>
 8008a74:	2b08      	cmp	r3, #8
 8008a76:	d10b      	bne.n	8008a90 <_printf_i+0x148>
 8008a78:	6823      	ldr	r3, [r4, #0]
 8008a7a:	07de      	lsls	r6, r3, #31
 8008a7c:	d508      	bpl.n	8008a90 <_printf_i+0x148>
 8008a7e:	6923      	ldr	r3, [r4, #16]
 8008a80:	6861      	ldr	r1, [r4, #4]
 8008a82:	4299      	cmp	r1, r3
 8008a84:	bfde      	ittt	le
 8008a86:	2330      	movle	r3, #48	; 0x30
 8008a88:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a8c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008a90:	1b52      	subs	r2, r2, r5
 8008a92:	6122      	str	r2, [r4, #16]
 8008a94:	f8cd a000 	str.w	sl, [sp]
 8008a98:	464b      	mov	r3, r9
 8008a9a:	aa03      	add	r2, sp, #12
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	4640      	mov	r0, r8
 8008aa0:	f7ff fee4 	bl	800886c <_printf_common>
 8008aa4:	3001      	adds	r0, #1
 8008aa6:	d14a      	bne.n	8008b3e <_printf_i+0x1f6>
 8008aa8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008aac:	b004      	add	sp, #16
 8008aae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	f043 0320 	orr.w	r3, r3, #32
 8008ab8:	6023      	str	r3, [r4, #0]
 8008aba:	4833      	ldr	r0, [pc, #204]	; (8008b88 <_printf_i+0x240>)
 8008abc:	2778      	movs	r7, #120	; 0x78
 8008abe:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ac2:	6823      	ldr	r3, [r4, #0]
 8008ac4:	6829      	ldr	r1, [r5, #0]
 8008ac6:	061f      	lsls	r7, r3, #24
 8008ac8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008acc:	d402      	bmi.n	8008ad4 <_printf_i+0x18c>
 8008ace:	065f      	lsls	r7, r3, #25
 8008ad0:	bf48      	it	mi
 8008ad2:	b2b6      	uxthmi	r6, r6
 8008ad4:	07df      	lsls	r7, r3, #31
 8008ad6:	bf48      	it	mi
 8008ad8:	f043 0320 	orrmi.w	r3, r3, #32
 8008adc:	6029      	str	r1, [r5, #0]
 8008ade:	bf48      	it	mi
 8008ae0:	6023      	strmi	r3, [r4, #0]
 8008ae2:	b91e      	cbnz	r6, 8008aec <_printf_i+0x1a4>
 8008ae4:	6823      	ldr	r3, [r4, #0]
 8008ae6:	f023 0320 	bic.w	r3, r3, #32
 8008aea:	6023      	str	r3, [r4, #0]
 8008aec:	2310      	movs	r3, #16
 8008aee:	e7a7      	b.n	8008a40 <_printf_i+0xf8>
 8008af0:	4824      	ldr	r0, [pc, #144]	; (8008b84 <_printf_i+0x23c>)
 8008af2:	e7e4      	b.n	8008abe <_printf_i+0x176>
 8008af4:	4615      	mov	r5, r2
 8008af6:	e7bd      	b.n	8008a74 <_printf_i+0x12c>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	6826      	ldr	r6, [r4, #0]
 8008afc:	6961      	ldr	r1, [r4, #20]
 8008afe:	1d18      	adds	r0, r3, #4
 8008b00:	6028      	str	r0, [r5, #0]
 8008b02:	0635      	lsls	r5, r6, #24
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	d501      	bpl.n	8008b0c <_printf_i+0x1c4>
 8008b08:	6019      	str	r1, [r3, #0]
 8008b0a:	e002      	b.n	8008b12 <_printf_i+0x1ca>
 8008b0c:	0670      	lsls	r0, r6, #25
 8008b0e:	d5fb      	bpl.n	8008b08 <_printf_i+0x1c0>
 8008b10:	8019      	strh	r1, [r3, #0]
 8008b12:	2300      	movs	r3, #0
 8008b14:	6123      	str	r3, [r4, #16]
 8008b16:	4615      	mov	r5, r2
 8008b18:	e7bc      	b.n	8008a94 <_printf_i+0x14c>
 8008b1a:	682b      	ldr	r3, [r5, #0]
 8008b1c:	1d1a      	adds	r2, r3, #4
 8008b1e:	602a      	str	r2, [r5, #0]
 8008b20:	681d      	ldr	r5, [r3, #0]
 8008b22:	6862      	ldr	r2, [r4, #4]
 8008b24:	2100      	movs	r1, #0
 8008b26:	4628      	mov	r0, r5
 8008b28:	f7f7 fb52 	bl	80001d0 <memchr>
 8008b2c:	b108      	cbz	r0, 8008b32 <_printf_i+0x1ea>
 8008b2e:	1b40      	subs	r0, r0, r5
 8008b30:	6060      	str	r0, [r4, #4]
 8008b32:	6863      	ldr	r3, [r4, #4]
 8008b34:	6123      	str	r3, [r4, #16]
 8008b36:	2300      	movs	r3, #0
 8008b38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b3c:	e7aa      	b.n	8008a94 <_printf_i+0x14c>
 8008b3e:	6923      	ldr	r3, [r4, #16]
 8008b40:	462a      	mov	r2, r5
 8008b42:	4649      	mov	r1, r9
 8008b44:	4640      	mov	r0, r8
 8008b46:	47d0      	blx	sl
 8008b48:	3001      	adds	r0, #1
 8008b4a:	d0ad      	beq.n	8008aa8 <_printf_i+0x160>
 8008b4c:	6823      	ldr	r3, [r4, #0]
 8008b4e:	079b      	lsls	r3, r3, #30
 8008b50:	d413      	bmi.n	8008b7a <_printf_i+0x232>
 8008b52:	68e0      	ldr	r0, [r4, #12]
 8008b54:	9b03      	ldr	r3, [sp, #12]
 8008b56:	4298      	cmp	r0, r3
 8008b58:	bfb8      	it	lt
 8008b5a:	4618      	movlt	r0, r3
 8008b5c:	e7a6      	b.n	8008aac <_printf_i+0x164>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4632      	mov	r2, r6
 8008b62:	4649      	mov	r1, r9
 8008b64:	4640      	mov	r0, r8
 8008b66:	47d0      	blx	sl
 8008b68:	3001      	adds	r0, #1
 8008b6a:	d09d      	beq.n	8008aa8 <_printf_i+0x160>
 8008b6c:	3501      	adds	r5, #1
 8008b6e:	68e3      	ldr	r3, [r4, #12]
 8008b70:	9903      	ldr	r1, [sp, #12]
 8008b72:	1a5b      	subs	r3, r3, r1
 8008b74:	42ab      	cmp	r3, r5
 8008b76:	dcf2      	bgt.n	8008b5e <_printf_i+0x216>
 8008b78:	e7eb      	b.n	8008b52 <_printf_i+0x20a>
 8008b7a:	2500      	movs	r5, #0
 8008b7c:	f104 0619 	add.w	r6, r4, #25
 8008b80:	e7f5      	b.n	8008b6e <_printf_i+0x226>
 8008b82:	bf00      	nop
 8008b84:	080094c4 	.word	0x080094c4
 8008b88:	080094d5 	.word	0x080094d5

08008b8c <__sflush_r>:
 8008b8c:	898a      	ldrh	r2, [r1, #12]
 8008b8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b92:	4605      	mov	r5, r0
 8008b94:	0710      	lsls	r0, r2, #28
 8008b96:	460c      	mov	r4, r1
 8008b98:	d458      	bmi.n	8008c4c <__sflush_r+0xc0>
 8008b9a:	684b      	ldr	r3, [r1, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	dc05      	bgt.n	8008bac <__sflush_r+0x20>
 8008ba0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	dc02      	bgt.n	8008bac <__sflush_r+0x20>
 8008ba6:	2000      	movs	r0, #0
 8008ba8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bae:	2e00      	cmp	r6, #0
 8008bb0:	d0f9      	beq.n	8008ba6 <__sflush_r+0x1a>
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bb8:	682f      	ldr	r7, [r5, #0]
 8008bba:	6a21      	ldr	r1, [r4, #32]
 8008bbc:	602b      	str	r3, [r5, #0]
 8008bbe:	d032      	beq.n	8008c26 <__sflush_r+0x9a>
 8008bc0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bc2:	89a3      	ldrh	r3, [r4, #12]
 8008bc4:	075a      	lsls	r2, r3, #29
 8008bc6:	d505      	bpl.n	8008bd4 <__sflush_r+0x48>
 8008bc8:	6863      	ldr	r3, [r4, #4]
 8008bca:	1ac0      	subs	r0, r0, r3
 8008bcc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bce:	b10b      	cbz	r3, 8008bd4 <__sflush_r+0x48>
 8008bd0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bd2:	1ac0      	subs	r0, r0, r3
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4602      	mov	r2, r0
 8008bd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bda:	6a21      	ldr	r1, [r4, #32]
 8008bdc:	4628      	mov	r0, r5
 8008bde:	47b0      	blx	r6
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	89a3      	ldrh	r3, [r4, #12]
 8008be4:	d106      	bne.n	8008bf4 <__sflush_r+0x68>
 8008be6:	6829      	ldr	r1, [r5, #0]
 8008be8:	291d      	cmp	r1, #29
 8008bea:	d82b      	bhi.n	8008c44 <__sflush_r+0xb8>
 8008bec:	4a29      	ldr	r2, [pc, #164]	; (8008c94 <__sflush_r+0x108>)
 8008bee:	410a      	asrs	r2, r1
 8008bf0:	07d6      	lsls	r6, r2, #31
 8008bf2:	d427      	bmi.n	8008c44 <__sflush_r+0xb8>
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	6062      	str	r2, [r4, #4]
 8008bf8:	04d9      	lsls	r1, r3, #19
 8008bfa:	6922      	ldr	r2, [r4, #16]
 8008bfc:	6022      	str	r2, [r4, #0]
 8008bfe:	d504      	bpl.n	8008c0a <__sflush_r+0x7e>
 8008c00:	1c42      	adds	r2, r0, #1
 8008c02:	d101      	bne.n	8008c08 <__sflush_r+0x7c>
 8008c04:	682b      	ldr	r3, [r5, #0]
 8008c06:	b903      	cbnz	r3, 8008c0a <__sflush_r+0x7e>
 8008c08:	6560      	str	r0, [r4, #84]	; 0x54
 8008c0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c0c:	602f      	str	r7, [r5, #0]
 8008c0e:	2900      	cmp	r1, #0
 8008c10:	d0c9      	beq.n	8008ba6 <__sflush_r+0x1a>
 8008c12:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c16:	4299      	cmp	r1, r3
 8008c18:	d002      	beq.n	8008c20 <__sflush_r+0x94>
 8008c1a:	4628      	mov	r0, r5
 8008c1c:	f7ff fbee 	bl	80083fc <_free_r>
 8008c20:	2000      	movs	r0, #0
 8008c22:	6360      	str	r0, [r4, #52]	; 0x34
 8008c24:	e7c0      	b.n	8008ba8 <__sflush_r+0x1c>
 8008c26:	2301      	movs	r3, #1
 8008c28:	4628      	mov	r0, r5
 8008c2a:	47b0      	blx	r6
 8008c2c:	1c41      	adds	r1, r0, #1
 8008c2e:	d1c8      	bne.n	8008bc2 <__sflush_r+0x36>
 8008c30:	682b      	ldr	r3, [r5, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	d0c5      	beq.n	8008bc2 <__sflush_r+0x36>
 8008c36:	2b1d      	cmp	r3, #29
 8008c38:	d001      	beq.n	8008c3e <__sflush_r+0xb2>
 8008c3a:	2b16      	cmp	r3, #22
 8008c3c:	d101      	bne.n	8008c42 <__sflush_r+0xb6>
 8008c3e:	602f      	str	r7, [r5, #0]
 8008c40:	e7b1      	b.n	8008ba6 <__sflush_r+0x1a>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	e7ad      	b.n	8008ba8 <__sflush_r+0x1c>
 8008c4c:	690f      	ldr	r7, [r1, #16]
 8008c4e:	2f00      	cmp	r7, #0
 8008c50:	d0a9      	beq.n	8008ba6 <__sflush_r+0x1a>
 8008c52:	0793      	lsls	r3, r2, #30
 8008c54:	680e      	ldr	r6, [r1, #0]
 8008c56:	bf08      	it	eq
 8008c58:	694b      	ldreq	r3, [r1, #20]
 8008c5a:	600f      	str	r7, [r1, #0]
 8008c5c:	bf18      	it	ne
 8008c5e:	2300      	movne	r3, #0
 8008c60:	eba6 0807 	sub.w	r8, r6, r7
 8008c64:	608b      	str	r3, [r1, #8]
 8008c66:	f1b8 0f00 	cmp.w	r8, #0
 8008c6a:	dd9c      	ble.n	8008ba6 <__sflush_r+0x1a>
 8008c6c:	6a21      	ldr	r1, [r4, #32]
 8008c6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c70:	4643      	mov	r3, r8
 8008c72:	463a      	mov	r2, r7
 8008c74:	4628      	mov	r0, r5
 8008c76:	47b0      	blx	r6
 8008c78:	2800      	cmp	r0, #0
 8008c7a:	dc06      	bgt.n	8008c8a <__sflush_r+0xfe>
 8008c7c:	89a3      	ldrh	r3, [r4, #12]
 8008c7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c82:	81a3      	strh	r3, [r4, #12]
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c88:	e78e      	b.n	8008ba8 <__sflush_r+0x1c>
 8008c8a:	4407      	add	r7, r0
 8008c8c:	eba8 0800 	sub.w	r8, r8, r0
 8008c90:	e7e9      	b.n	8008c66 <__sflush_r+0xda>
 8008c92:	bf00      	nop
 8008c94:	dfbffffe 	.word	0xdfbffffe

08008c98 <_fflush_r>:
 8008c98:	b538      	push	{r3, r4, r5, lr}
 8008c9a:	690b      	ldr	r3, [r1, #16]
 8008c9c:	4605      	mov	r5, r0
 8008c9e:	460c      	mov	r4, r1
 8008ca0:	b913      	cbnz	r3, 8008ca8 <_fflush_r+0x10>
 8008ca2:	2500      	movs	r5, #0
 8008ca4:	4628      	mov	r0, r5
 8008ca6:	bd38      	pop	{r3, r4, r5, pc}
 8008ca8:	b118      	cbz	r0, 8008cb2 <_fflush_r+0x1a>
 8008caa:	6a03      	ldr	r3, [r0, #32]
 8008cac:	b90b      	cbnz	r3, 8008cb2 <_fflush_r+0x1a>
 8008cae:	f7ff faa5 	bl	80081fc <__sinit>
 8008cb2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d0f3      	beq.n	8008ca2 <_fflush_r+0xa>
 8008cba:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cbc:	07d0      	lsls	r0, r2, #31
 8008cbe:	d404      	bmi.n	8008cca <_fflush_r+0x32>
 8008cc0:	0599      	lsls	r1, r3, #22
 8008cc2:	d402      	bmi.n	8008cca <_fflush_r+0x32>
 8008cc4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cc6:	f7ff fb6a 	bl	800839e <__retarget_lock_acquire_recursive>
 8008cca:	4628      	mov	r0, r5
 8008ccc:	4621      	mov	r1, r4
 8008cce:	f7ff ff5d 	bl	8008b8c <__sflush_r>
 8008cd2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cd4:	07da      	lsls	r2, r3, #31
 8008cd6:	4605      	mov	r5, r0
 8008cd8:	d4e4      	bmi.n	8008ca4 <_fflush_r+0xc>
 8008cda:	89a3      	ldrh	r3, [r4, #12]
 8008cdc:	059b      	lsls	r3, r3, #22
 8008cde:	d4e1      	bmi.n	8008ca4 <_fflush_r+0xc>
 8008ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ce2:	f7ff fb5d 	bl	80083a0 <__retarget_lock_release_recursive>
 8008ce6:	e7dd      	b.n	8008ca4 <_fflush_r+0xc>

08008ce8 <__malloc_lock>:
 8008ce8:	4801      	ldr	r0, [pc, #4]	; (8008cf0 <__malloc_lock+0x8>)
 8008cea:	f7ff bb58 	b.w	800839e <__retarget_lock_acquire_recursive>
 8008cee:	bf00      	nop
 8008cf0:	20004bb0 	.word	0x20004bb0

08008cf4 <__malloc_unlock>:
 8008cf4:	4801      	ldr	r0, [pc, #4]	; (8008cfc <__malloc_unlock+0x8>)
 8008cf6:	f7ff bb53 	b.w	80083a0 <__retarget_lock_release_recursive>
 8008cfa:	bf00      	nop
 8008cfc:	20004bb0 	.word	0x20004bb0

08008d00 <__sread>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	460c      	mov	r4, r1
 8008d04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d08:	f000 f98c 	bl	8009024 <_read_r>
 8008d0c:	2800      	cmp	r0, #0
 8008d0e:	bfab      	itete	ge
 8008d10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d12:	89a3      	ldrhlt	r3, [r4, #12]
 8008d14:	181b      	addge	r3, r3, r0
 8008d16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d1a:	bfac      	ite	ge
 8008d1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d1e:	81a3      	strhlt	r3, [r4, #12]
 8008d20:	bd10      	pop	{r4, pc}

08008d22 <__swrite>:
 8008d22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d26:	461f      	mov	r7, r3
 8008d28:	898b      	ldrh	r3, [r1, #12]
 8008d2a:	05db      	lsls	r3, r3, #23
 8008d2c:	4605      	mov	r5, r0
 8008d2e:	460c      	mov	r4, r1
 8008d30:	4616      	mov	r6, r2
 8008d32:	d505      	bpl.n	8008d40 <__swrite+0x1e>
 8008d34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d38:	2302      	movs	r3, #2
 8008d3a:	2200      	movs	r2, #0
 8008d3c:	f000 f960 	bl	8009000 <_lseek_r>
 8008d40:	89a3      	ldrh	r3, [r4, #12]
 8008d42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d4a:	81a3      	strh	r3, [r4, #12]
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	463b      	mov	r3, r7
 8008d50:	4628      	mov	r0, r5
 8008d52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d56:	f000 b987 	b.w	8009068 <_write_r>

08008d5a <__sseek>:
 8008d5a:	b510      	push	{r4, lr}
 8008d5c:	460c      	mov	r4, r1
 8008d5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d62:	f000 f94d 	bl	8009000 <_lseek_r>
 8008d66:	1c43      	adds	r3, r0, #1
 8008d68:	89a3      	ldrh	r3, [r4, #12]
 8008d6a:	bf15      	itete	ne
 8008d6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d76:	81a3      	strheq	r3, [r4, #12]
 8008d78:	bf18      	it	ne
 8008d7a:	81a3      	strhne	r3, [r4, #12]
 8008d7c:	bd10      	pop	{r4, pc}

08008d7e <__sclose>:
 8008d7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d82:	f000 b90b 	b.w	8008f9c <_close_r>
	...

08008d88 <fiprintf>:
 8008d88:	b40e      	push	{r1, r2, r3}
 8008d8a:	b503      	push	{r0, r1, lr}
 8008d8c:	4601      	mov	r1, r0
 8008d8e:	ab03      	add	r3, sp, #12
 8008d90:	4805      	ldr	r0, [pc, #20]	; (8008da8 <fiprintf+0x20>)
 8008d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d96:	6800      	ldr	r0, [r0, #0]
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	f7ff fba5 	bl	80084e8 <_vfiprintf_r>
 8008d9e:	b002      	add	sp, #8
 8008da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8008da4:	b003      	add	sp, #12
 8008da6:	4770      	bx	lr
 8008da8:	2000006c 	.word	0x2000006c

08008dac <__swbuf_r>:
 8008dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008dae:	460e      	mov	r6, r1
 8008db0:	4614      	mov	r4, r2
 8008db2:	4605      	mov	r5, r0
 8008db4:	b118      	cbz	r0, 8008dbe <__swbuf_r+0x12>
 8008db6:	6a03      	ldr	r3, [r0, #32]
 8008db8:	b90b      	cbnz	r3, 8008dbe <__swbuf_r+0x12>
 8008dba:	f7ff fa1f 	bl	80081fc <__sinit>
 8008dbe:	69a3      	ldr	r3, [r4, #24]
 8008dc0:	60a3      	str	r3, [r4, #8]
 8008dc2:	89a3      	ldrh	r3, [r4, #12]
 8008dc4:	071a      	lsls	r2, r3, #28
 8008dc6:	d525      	bpl.n	8008e14 <__swbuf_r+0x68>
 8008dc8:	6923      	ldr	r3, [r4, #16]
 8008dca:	b31b      	cbz	r3, 8008e14 <__swbuf_r+0x68>
 8008dcc:	6823      	ldr	r3, [r4, #0]
 8008dce:	6922      	ldr	r2, [r4, #16]
 8008dd0:	1a98      	subs	r0, r3, r2
 8008dd2:	6963      	ldr	r3, [r4, #20]
 8008dd4:	b2f6      	uxtb	r6, r6
 8008dd6:	4283      	cmp	r3, r0
 8008dd8:	4637      	mov	r7, r6
 8008dda:	dc04      	bgt.n	8008de6 <__swbuf_r+0x3a>
 8008ddc:	4621      	mov	r1, r4
 8008dde:	4628      	mov	r0, r5
 8008de0:	f7ff ff5a 	bl	8008c98 <_fflush_r>
 8008de4:	b9e0      	cbnz	r0, 8008e20 <__swbuf_r+0x74>
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	60a3      	str	r3, [r4, #8]
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	6022      	str	r2, [r4, #0]
 8008df2:	701e      	strb	r6, [r3, #0]
 8008df4:	6962      	ldr	r2, [r4, #20]
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d004      	beq.n	8008e06 <__swbuf_r+0x5a>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	07db      	lsls	r3, r3, #31
 8008e00:	d506      	bpl.n	8008e10 <__swbuf_r+0x64>
 8008e02:	2e0a      	cmp	r6, #10
 8008e04:	d104      	bne.n	8008e10 <__swbuf_r+0x64>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f7ff ff45 	bl	8008c98 <_fflush_r>
 8008e0e:	b938      	cbnz	r0, 8008e20 <__swbuf_r+0x74>
 8008e10:	4638      	mov	r0, r7
 8008e12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e14:	4621      	mov	r1, r4
 8008e16:	4628      	mov	r0, r5
 8008e18:	f000 f806 	bl	8008e28 <__swsetup_r>
 8008e1c:	2800      	cmp	r0, #0
 8008e1e:	d0d5      	beq.n	8008dcc <__swbuf_r+0x20>
 8008e20:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e24:	e7f4      	b.n	8008e10 <__swbuf_r+0x64>
	...

08008e28 <__swsetup_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4b2a      	ldr	r3, [pc, #168]	; (8008ed4 <__swsetup_r+0xac>)
 8008e2c:	4605      	mov	r5, r0
 8008e2e:	6818      	ldr	r0, [r3, #0]
 8008e30:	460c      	mov	r4, r1
 8008e32:	b118      	cbz	r0, 8008e3c <__swsetup_r+0x14>
 8008e34:	6a03      	ldr	r3, [r0, #32]
 8008e36:	b90b      	cbnz	r3, 8008e3c <__swsetup_r+0x14>
 8008e38:	f7ff f9e0 	bl	80081fc <__sinit>
 8008e3c:	89a3      	ldrh	r3, [r4, #12]
 8008e3e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e42:	0718      	lsls	r0, r3, #28
 8008e44:	d422      	bmi.n	8008e8c <__swsetup_r+0x64>
 8008e46:	06d9      	lsls	r1, r3, #27
 8008e48:	d407      	bmi.n	8008e5a <__swsetup_r+0x32>
 8008e4a:	2309      	movs	r3, #9
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e52:	81a3      	strh	r3, [r4, #12]
 8008e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e58:	e034      	b.n	8008ec4 <__swsetup_r+0x9c>
 8008e5a:	0758      	lsls	r0, r3, #29
 8008e5c:	d512      	bpl.n	8008e84 <__swsetup_r+0x5c>
 8008e5e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e60:	b141      	cbz	r1, 8008e74 <__swsetup_r+0x4c>
 8008e62:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e66:	4299      	cmp	r1, r3
 8008e68:	d002      	beq.n	8008e70 <__swsetup_r+0x48>
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	f7ff fac6 	bl	80083fc <_free_r>
 8008e70:	2300      	movs	r3, #0
 8008e72:	6363      	str	r3, [r4, #52]	; 0x34
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	6063      	str	r3, [r4, #4]
 8008e80:	6923      	ldr	r3, [r4, #16]
 8008e82:	6023      	str	r3, [r4, #0]
 8008e84:	89a3      	ldrh	r3, [r4, #12]
 8008e86:	f043 0308 	orr.w	r3, r3, #8
 8008e8a:	81a3      	strh	r3, [r4, #12]
 8008e8c:	6923      	ldr	r3, [r4, #16]
 8008e8e:	b94b      	cbnz	r3, 8008ea4 <__swsetup_r+0x7c>
 8008e90:	89a3      	ldrh	r3, [r4, #12]
 8008e92:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e9a:	d003      	beq.n	8008ea4 <__swsetup_r+0x7c>
 8008e9c:	4621      	mov	r1, r4
 8008e9e:	4628      	mov	r0, r5
 8008ea0:	f000 f840 	bl	8008f24 <__smakebuf_r>
 8008ea4:	89a0      	ldrh	r0, [r4, #12]
 8008ea6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008eaa:	f010 0301 	ands.w	r3, r0, #1
 8008eae:	d00a      	beq.n	8008ec6 <__swsetup_r+0x9e>
 8008eb0:	2300      	movs	r3, #0
 8008eb2:	60a3      	str	r3, [r4, #8]
 8008eb4:	6963      	ldr	r3, [r4, #20]
 8008eb6:	425b      	negs	r3, r3
 8008eb8:	61a3      	str	r3, [r4, #24]
 8008eba:	6923      	ldr	r3, [r4, #16]
 8008ebc:	b943      	cbnz	r3, 8008ed0 <__swsetup_r+0xa8>
 8008ebe:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008ec2:	d1c4      	bne.n	8008e4e <__swsetup_r+0x26>
 8008ec4:	bd38      	pop	{r3, r4, r5, pc}
 8008ec6:	0781      	lsls	r1, r0, #30
 8008ec8:	bf58      	it	pl
 8008eca:	6963      	ldrpl	r3, [r4, #20]
 8008ecc:	60a3      	str	r3, [r4, #8]
 8008ece:	e7f4      	b.n	8008eba <__swsetup_r+0x92>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	e7f7      	b.n	8008ec4 <__swsetup_r+0x9c>
 8008ed4:	2000006c 	.word	0x2000006c

08008ed8 <__swhatbuf_r>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	460c      	mov	r4, r1
 8008edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ee0:	2900      	cmp	r1, #0
 8008ee2:	b096      	sub	sp, #88	; 0x58
 8008ee4:	4615      	mov	r5, r2
 8008ee6:	461e      	mov	r6, r3
 8008ee8:	da0d      	bge.n	8008f06 <__swhatbuf_r+0x2e>
 8008eea:	89a3      	ldrh	r3, [r4, #12]
 8008eec:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ef0:	f04f 0100 	mov.w	r1, #0
 8008ef4:	bf0c      	ite	eq
 8008ef6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008efa:	2340      	movne	r3, #64	; 0x40
 8008efc:	2000      	movs	r0, #0
 8008efe:	6031      	str	r1, [r6, #0]
 8008f00:	602b      	str	r3, [r5, #0]
 8008f02:	b016      	add	sp, #88	; 0x58
 8008f04:	bd70      	pop	{r4, r5, r6, pc}
 8008f06:	466a      	mov	r2, sp
 8008f08:	f000 f858 	bl	8008fbc <_fstat_r>
 8008f0c:	2800      	cmp	r0, #0
 8008f0e:	dbec      	blt.n	8008eea <__swhatbuf_r+0x12>
 8008f10:	9901      	ldr	r1, [sp, #4]
 8008f12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f1a:	4259      	negs	r1, r3
 8008f1c:	4159      	adcs	r1, r3
 8008f1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f22:	e7eb      	b.n	8008efc <__swhatbuf_r+0x24>

08008f24 <__smakebuf_r>:
 8008f24:	898b      	ldrh	r3, [r1, #12]
 8008f26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f28:	079d      	lsls	r5, r3, #30
 8008f2a:	4606      	mov	r6, r0
 8008f2c:	460c      	mov	r4, r1
 8008f2e:	d507      	bpl.n	8008f40 <__smakebuf_r+0x1c>
 8008f30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f34:	6023      	str	r3, [r4, #0]
 8008f36:	6123      	str	r3, [r4, #16]
 8008f38:	2301      	movs	r3, #1
 8008f3a:	6163      	str	r3, [r4, #20]
 8008f3c:	b002      	add	sp, #8
 8008f3e:	bd70      	pop	{r4, r5, r6, pc}
 8008f40:	ab01      	add	r3, sp, #4
 8008f42:	466a      	mov	r2, sp
 8008f44:	f7ff ffc8 	bl	8008ed8 <__swhatbuf_r>
 8008f48:	9900      	ldr	r1, [sp, #0]
 8008f4a:	4605      	mov	r5, r0
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f7ff fc0d 	bl	800876c <_malloc_r>
 8008f52:	b948      	cbnz	r0, 8008f68 <__smakebuf_r+0x44>
 8008f54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f58:	059a      	lsls	r2, r3, #22
 8008f5a:	d4ef      	bmi.n	8008f3c <__smakebuf_r+0x18>
 8008f5c:	f023 0303 	bic.w	r3, r3, #3
 8008f60:	f043 0302 	orr.w	r3, r3, #2
 8008f64:	81a3      	strh	r3, [r4, #12]
 8008f66:	e7e3      	b.n	8008f30 <__smakebuf_r+0xc>
 8008f68:	89a3      	ldrh	r3, [r4, #12]
 8008f6a:	6020      	str	r0, [r4, #0]
 8008f6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f70:	81a3      	strh	r3, [r4, #12]
 8008f72:	9b00      	ldr	r3, [sp, #0]
 8008f74:	6163      	str	r3, [r4, #20]
 8008f76:	9b01      	ldr	r3, [sp, #4]
 8008f78:	6120      	str	r0, [r4, #16]
 8008f7a:	b15b      	cbz	r3, 8008f94 <__smakebuf_r+0x70>
 8008f7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f80:	4630      	mov	r0, r6
 8008f82:	f000 f82d 	bl	8008fe0 <_isatty_r>
 8008f86:	b128      	cbz	r0, 8008f94 <__smakebuf_r+0x70>
 8008f88:	89a3      	ldrh	r3, [r4, #12]
 8008f8a:	f023 0303 	bic.w	r3, r3, #3
 8008f8e:	f043 0301 	orr.w	r3, r3, #1
 8008f92:	81a3      	strh	r3, [r4, #12]
 8008f94:	89a3      	ldrh	r3, [r4, #12]
 8008f96:	431d      	orrs	r5, r3
 8008f98:	81a5      	strh	r5, [r4, #12]
 8008f9a:	e7cf      	b.n	8008f3c <__smakebuf_r+0x18>

08008f9c <_close_r>:
 8008f9c:	b538      	push	{r3, r4, r5, lr}
 8008f9e:	4d06      	ldr	r5, [pc, #24]	; (8008fb8 <_close_r+0x1c>)
 8008fa0:	2300      	movs	r3, #0
 8008fa2:	4604      	mov	r4, r0
 8008fa4:	4608      	mov	r0, r1
 8008fa6:	602b      	str	r3, [r5, #0]
 8008fa8:	f7f8 fa07 	bl	80013ba <_close>
 8008fac:	1c43      	adds	r3, r0, #1
 8008fae:	d102      	bne.n	8008fb6 <_close_r+0x1a>
 8008fb0:	682b      	ldr	r3, [r5, #0]
 8008fb2:	b103      	cbz	r3, 8008fb6 <_close_r+0x1a>
 8008fb4:	6023      	str	r3, [r4, #0]
 8008fb6:	bd38      	pop	{r3, r4, r5, pc}
 8008fb8:	20004bac 	.word	0x20004bac

08008fbc <_fstat_r>:
 8008fbc:	b538      	push	{r3, r4, r5, lr}
 8008fbe:	4d07      	ldr	r5, [pc, #28]	; (8008fdc <_fstat_r+0x20>)
 8008fc0:	2300      	movs	r3, #0
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	4608      	mov	r0, r1
 8008fc6:	4611      	mov	r1, r2
 8008fc8:	602b      	str	r3, [r5, #0]
 8008fca:	f7f8 fa02 	bl	80013d2 <_fstat>
 8008fce:	1c43      	adds	r3, r0, #1
 8008fd0:	d102      	bne.n	8008fd8 <_fstat_r+0x1c>
 8008fd2:	682b      	ldr	r3, [r5, #0]
 8008fd4:	b103      	cbz	r3, 8008fd8 <_fstat_r+0x1c>
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	bd38      	pop	{r3, r4, r5, pc}
 8008fda:	bf00      	nop
 8008fdc:	20004bac 	.word	0x20004bac

08008fe0 <_isatty_r>:
 8008fe0:	b538      	push	{r3, r4, r5, lr}
 8008fe2:	4d06      	ldr	r5, [pc, #24]	; (8008ffc <_isatty_r+0x1c>)
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	4604      	mov	r4, r0
 8008fe8:	4608      	mov	r0, r1
 8008fea:	602b      	str	r3, [r5, #0]
 8008fec:	f7f8 fa01 	bl	80013f2 <_isatty>
 8008ff0:	1c43      	adds	r3, r0, #1
 8008ff2:	d102      	bne.n	8008ffa <_isatty_r+0x1a>
 8008ff4:	682b      	ldr	r3, [r5, #0]
 8008ff6:	b103      	cbz	r3, 8008ffa <_isatty_r+0x1a>
 8008ff8:	6023      	str	r3, [r4, #0]
 8008ffa:	bd38      	pop	{r3, r4, r5, pc}
 8008ffc:	20004bac 	.word	0x20004bac

08009000 <_lseek_r>:
 8009000:	b538      	push	{r3, r4, r5, lr}
 8009002:	4d07      	ldr	r5, [pc, #28]	; (8009020 <_lseek_r+0x20>)
 8009004:	4604      	mov	r4, r0
 8009006:	4608      	mov	r0, r1
 8009008:	4611      	mov	r1, r2
 800900a:	2200      	movs	r2, #0
 800900c:	602a      	str	r2, [r5, #0]
 800900e:	461a      	mov	r2, r3
 8009010:	f7f8 f9fa 	bl	8001408 <_lseek>
 8009014:	1c43      	adds	r3, r0, #1
 8009016:	d102      	bne.n	800901e <_lseek_r+0x1e>
 8009018:	682b      	ldr	r3, [r5, #0]
 800901a:	b103      	cbz	r3, 800901e <_lseek_r+0x1e>
 800901c:	6023      	str	r3, [r4, #0]
 800901e:	bd38      	pop	{r3, r4, r5, pc}
 8009020:	20004bac 	.word	0x20004bac

08009024 <_read_r>:
 8009024:	b538      	push	{r3, r4, r5, lr}
 8009026:	4d07      	ldr	r5, [pc, #28]	; (8009044 <_read_r+0x20>)
 8009028:	4604      	mov	r4, r0
 800902a:	4608      	mov	r0, r1
 800902c:	4611      	mov	r1, r2
 800902e:	2200      	movs	r2, #0
 8009030:	602a      	str	r2, [r5, #0]
 8009032:	461a      	mov	r2, r3
 8009034:	f7f8 f988 	bl	8001348 <_read>
 8009038:	1c43      	adds	r3, r0, #1
 800903a:	d102      	bne.n	8009042 <_read_r+0x1e>
 800903c:	682b      	ldr	r3, [r5, #0]
 800903e:	b103      	cbz	r3, 8009042 <_read_r+0x1e>
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	bd38      	pop	{r3, r4, r5, pc}
 8009044:	20004bac 	.word	0x20004bac

08009048 <_sbrk_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4d06      	ldr	r5, [pc, #24]	; (8009064 <_sbrk_r+0x1c>)
 800904c:	2300      	movs	r3, #0
 800904e:	4604      	mov	r4, r0
 8009050:	4608      	mov	r0, r1
 8009052:	602b      	str	r3, [r5, #0]
 8009054:	f7f8 f9e6 	bl	8001424 <_sbrk>
 8009058:	1c43      	adds	r3, r0, #1
 800905a:	d102      	bne.n	8009062 <_sbrk_r+0x1a>
 800905c:	682b      	ldr	r3, [r5, #0]
 800905e:	b103      	cbz	r3, 8009062 <_sbrk_r+0x1a>
 8009060:	6023      	str	r3, [r4, #0]
 8009062:	bd38      	pop	{r3, r4, r5, pc}
 8009064:	20004bac 	.word	0x20004bac

08009068 <_write_r>:
 8009068:	b538      	push	{r3, r4, r5, lr}
 800906a:	4d07      	ldr	r5, [pc, #28]	; (8009088 <_write_r+0x20>)
 800906c:	4604      	mov	r4, r0
 800906e:	4608      	mov	r0, r1
 8009070:	4611      	mov	r1, r2
 8009072:	2200      	movs	r2, #0
 8009074:	602a      	str	r2, [r5, #0]
 8009076:	461a      	mov	r2, r3
 8009078:	f7f8 f983 	bl	8001382 <_write>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_write_r+0x1e>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	b103      	cbz	r3, 8009086 <_write_r+0x1e>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	20004bac 	.word	0x20004bac

0800908c <abort>:
 800908c:	b508      	push	{r3, lr}
 800908e:	2006      	movs	r0, #6
 8009090:	f000 f82c 	bl	80090ec <raise>
 8009094:	2001      	movs	r0, #1
 8009096:	f7f8 f94d 	bl	8001334 <_exit>

0800909a <_raise_r>:
 800909a:	291f      	cmp	r1, #31
 800909c:	b538      	push	{r3, r4, r5, lr}
 800909e:	4604      	mov	r4, r0
 80090a0:	460d      	mov	r5, r1
 80090a2:	d904      	bls.n	80090ae <_raise_r+0x14>
 80090a4:	2316      	movs	r3, #22
 80090a6:	6003      	str	r3, [r0, #0]
 80090a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80090ac:	bd38      	pop	{r3, r4, r5, pc}
 80090ae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80090b0:	b112      	cbz	r2, 80090b8 <_raise_r+0x1e>
 80090b2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090b6:	b94b      	cbnz	r3, 80090cc <_raise_r+0x32>
 80090b8:	4620      	mov	r0, r4
 80090ba:	f000 f831 	bl	8009120 <_getpid_r>
 80090be:	462a      	mov	r2, r5
 80090c0:	4601      	mov	r1, r0
 80090c2:	4620      	mov	r0, r4
 80090c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090c8:	f000 b818 	b.w	80090fc <_kill_r>
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d00a      	beq.n	80090e6 <_raise_r+0x4c>
 80090d0:	1c59      	adds	r1, r3, #1
 80090d2:	d103      	bne.n	80090dc <_raise_r+0x42>
 80090d4:	2316      	movs	r3, #22
 80090d6:	6003      	str	r3, [r0, #0]
 80090d8:	2001      	movs	r0, #1
 80090da:	e7e7      	b.n	80090ac <_raise_r+0x12>
 80090dc:	2400      	movs	r4, #0
 80090de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090e2:	4628      	mov	r0, r5
 80090e4:	4798      	blx	r3
 80090e6:	2000      	movs	r0, #0
 80090e8:	e7e0      	b.n	80090ac <_raise_r+0x12>
	...

080090ec <raise>:
 80090ec:	4b02      	ldr	r3, [pc, #8]	; (80090f8 <raise+0xc>)
 80090ee:	4601      	mov	r1, r0
 80090f0:	6818      	ldr	r0, [r3, #0]
 80090f2:	f7ff bfd2 	b.w	800909a <_raise_r>
 80090f6:	bf00      	nop
 80090f8:	2000006c 	.word	0x2000006c

080090fc <_kill_r>:
 80090fc:	b538      	push	{r3, r4, r5, lr}
 80090fe:	4d07      	ldr	r5, [pc, #28]	; (800911c <_kill_r+0x20>)
 8009100:	2300      	movs	r3, #0
 8009102:	4604      	mov	r4, r0
 8009104:	4608      	mov	r0, r1
 8009106:	4611      	mov	r1, r2
 8009108:	602b      	str	r3, [r5, #0]
 800910a:	f7f8 f903 	bl	8001314 <_kill>
 800910e:	1c43      	adds	r3, r0, #1
 8009110:	d102      	bne.n	8009118 <_kill_r+0x1c>
 8009112:	682b      	ldr	r3, [r5, #0]
 8009114:	b103      	cbz	r3, 8009118 <_kill_r+0x1c>
 8009116:	6023      	str	r3, [r4, #0]
 8009118:	bd38      	pop	{r3, r4, r5, pc}
 800911a:	bf00      	nop
 800911c:	20004bac 	.word	0x20004bac

08009120 <_getpid_r>:
 8009120:	f7f8 b8f0 	b.w	8001304 <_getpid>

08009124 <_init>:
 8009124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009126:	bf00      	nop
 8009128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800912a:	bc08      	pop	{r3}
 800912c:	469e      	mov	lr, r3
 800912e:	4770      	bx	lr

08009130 <_fini>:
 8009130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009132:	bf00      	nop
 8009134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009136:	bc08      	pop	{r3}
 8009138:	469e      	mov	lr, r3
 800913a:	4770      	bx	lr
