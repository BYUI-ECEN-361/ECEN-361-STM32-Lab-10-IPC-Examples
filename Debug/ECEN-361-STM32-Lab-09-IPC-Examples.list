
ECEN-361-STM32-Lab-09-IPC-Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008f9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  0800912c  0800912c  0001912c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094d8  080094d8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080094d8  080094d8  000194d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094e0  080094e0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094e0  080094e0  000194e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080094e4  080094e4  000194e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080094e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b4c  20000070  08009558  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bbc  08009558  00024bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c5a5  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a65  00000000  00000000  0003c688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  000400f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ab  00000000  00000000  00041908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296b3  00000000  00000000  00042bb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a364  00000000  00000000  0006c266  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffaa6  00000000  00000000  000865ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ed4  00000000  00000000  00186070  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018cf44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009114 	.word	0x08009114

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08009114 	.word	0x08009114

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 fa7b 	bl	8001a98 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 fa6a 	bl	8001a98 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fa5f 	bl	8001a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 fa59 	bl	8001a98 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 fa53 	bl	8001a98 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MultiFunctionShield_Single_Digit_Display>:
* @param digit: 1..4, pick the digit to write to
* @param value: 0..9, pick the value to display
* @retval None
*/
void MultiFunctionShield_Single_Digit_Display (int digit, int8_t value)
	{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	if (value <0) //then blank a digit
 8000614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000618:	2b00      	cmp	r3, #0
 800061a:	da06      	bge.n	800062a <MultiFunctionShield_Single_Digit_Display+0x22>
		{
		SEGMENT_VALUE[4-digit] = SEGMENT_BLANK;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f1c3 0304 	rsb	r3, r3, #4
 8000622:	21ff      	movs	r1, #255	; 0xff
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000626:	54d1      	strb	r1, [r2, r3]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
			}
		}
	}
 8000628:	e039      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
		value = (value & 0b1111) % 10 ;
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f003 020f 	and.w	r2, r3, #15
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 8000632:	fb83 1302 	smull	r1, r3, r3, r2
 8000636:	1099      	asrs	r1, r3, #2
 8000638:	17d3      	asrs	r3, r2, #31
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	460b      	mov	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1ad1      	subs	r1, r2, r3
 8000646:	460b      	mov	r3, r1
 8000648:	70fb      	strb	r3, [r7, #3]
		if ((digit <=4 ) && (digit >=0))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b04      	cmp	r3, #4
 800064e:	dc1a      	bgt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db17      	blt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
			SEGMENT_VALUE[4-digit] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000656:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 800065c:	fb83 1302 	smull	r1, r3, r3, r2
 8000660:	1099      	asrs	r1, r3, #2
 8000662:	17d3      	asrs	r3, r2, #31
 8000664:	1ac9      	subs	r1, r1, r3
 8000666:	460b      	mov	r3, r1
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f1c3 0304 	rsb	r3, r3, #4
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <MultiFunctionShield_Single_Digit_Display+0xac>)
 800067e:	5c51      	ldrb	r1, [r2, r1]
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000682:	54d1      	strb	r1, [r2, r3]
	}
 8000684:	e00b      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
			SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000686:	22bf      	movs	r2, #191	; 0xbf
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800068a:	701a      	strb	r2, [r3, #0]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
 800068c:	22bf      	movs	r2, #191	; 0xbf
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000690:	705a      	strb	r2, [r3, #1]
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000692:	22bf      	movs	r2, #191	; 0xbf
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000696:	709a      	strb	r2, [r3, #2]
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000698:	22bf      	movs	r2, #191	; 0xbf
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800069c:	70da      	strb	r2, [r3, #3]
	}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000090 	.word	0x20000090
 80006b0:	66666667 	.word	0x66666667
 80006b4:	08009244 	.word	0x08009244

080006b8 <MultiFunctionShield_Display_Two_Digits>:


void MultiFunctionShield_Display_Two_Digits (int8_t value)
// Just change the right-most 2 display digits.  Must be 0<= x <=99
	{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	if (value <0) {	//Display negative
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da06      	bge.n	80006d8 <MultiFunctionShield_Display_Two_Digits+0x20>
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
 80006ca:	22bf      	movs	r2, #191	; 0xbf
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MultiFunctionShield_Display_Two_Digits+0x88>)
 80006ce:	709a      	strb	r2, [r3, #2]
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
 80006d0:	22bf      	movs	r2, #191	; 0xbf
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MultiFunctionShield_Display_Two_Digits+0x88>)
 80006d4:	70da      	strb	r2, [r3, #3]
		{
		value = value % 99; // Just in case it's bigger
		MultiFunctionShield_Single_Digit_Display(2, (value / 10));
		MultiFunctionShield_Single_Digit_Display(1, (value % 10));
		}
	}
 80006d6:	e02e      	b.n	8000736 <MultiFunctionShield_Display_Two_Digits+0x7e>
		value = value % 99; // Just in case it's bigger
 80006d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MultiFunctionShield_Display_Two_Digits+0x8c>)
 80006de:	fb83 1302 	smull	r1, r3, r3, r2
 80006e2:	4413      	add	r3, r2
 80006e4:	1199      	asrs	r1, r3, #6
 80006e6:	17d3      	asrs	r3, r2, #31
 80006e8:	1ac9      	subs	r1, r1, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	440b      	add	r3, r1
 80006f0:	0159      	lsls	r1, r3, #5
 80006f2:	440b      	add	r3, r1
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	71fb      	strb	r3, [r7, #7]
		MultiFunctionShield_Single_Digit_Display(2, (value / 10));
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MultiFunctionShield_Display_Two_Digits+0x90>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	1092      	asrs	r2, r2, #2
 8000704:	17db      	asrs	r3, r3, #31
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff ff7b 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
		MultiFunctionShield_Single_Digit_Display(1, (value % 10));
 8000712:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MultiFunctionShield_Display_Two_Digits+0x90>)
 8000718:	fb83 1302 	smull	r1, r3, r3, r2
 800071c:	1099      	asrs	r1, r3, #2
 800071e:	17d3      	asrs	r3, r2, #31
 8000720:	1ac9      	subs	r1, r1, r3
 8000722:	460b      	mov	r3, r1
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ff69 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000090 	.word	0x20000090
 8000744:	a57eb503 	.word	0xa57eb503
 8000748:	66666667 	.word	0x66666667

0800074c <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f001 f99e 	bl	8001a98 <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f001 f998 	bl	8001a98 <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <Clear_LEDs+0x38>)
 800076e:	f001 f993 	bl	8001a98 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f001 f98d 	bl	8001a98 <HAL_GPIO_WritePin>
#endif
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	48000400 	.word	0x48000400

08000788 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 800078c:	22ff      	movs	r2, #255	; 0xff
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 8000790:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000792:	22ff      	movs	r2, #255	; 0xff
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 8000796:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000798:	22ff      	movs	r2, #255	; 0xff
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 800079c:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 80007a2:	70da      	strb	r2, [r3, #3]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000090 	.word	0x20000090

080007b4 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	4816      	ldr	r0, [pc, #88]	; (800081c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80007c4:	f001 f968 	bl	8001a98 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007c8:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 80007cc:	5cd3      	ldrb	r3, [r2, r3]
 80007ce:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	2301      	movs	r3, #1
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f7ff fec1 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007ea:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 80007ee:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f7ff feb1 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2120      	movs	r1, #32
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000810:	f001 f942 	bl	8001a98 <HAL_GPIO_WritePin>
	}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	48000400 	.word	0x48000400
 8000820:	20000090 	.word	0x20000090
 8000824:	08009250 	.word	0x08009250

08000828 <MultiFunctionShield__ISRFunc>:
	}



void MultiFunctionShield__ISRFunc(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MultiFunctionShield__ISRFunc+0x60>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MultiFunctionShield__ISRFunc+0x60>)
 8000838:	4611      	mov	r1, r2
 800083a:	7019      	strb	r1, [r3, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	3b01      	subs	r3, #1
 8000840:	2b03      	cmp	r3, #3
 8000842:	d81e      	bhi.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
 8000844:	a201      	add	r2, pc, #4	; (adr r2, 800084c <MultiFunctionShield__ISRFunc+0x24>)
 8000846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084a:	bf00      	nop
 800084c:	0800085d 	.word	0x0800085d
 8000850:	08000865 	.word	0x08000865
 8000854:	0800086d 	.word	0x0800086d
 8000858:	08000875 	.word	0x08000875
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ffa9 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 8000862:	e00e      	b.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff ffa5 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 800086a:	e00a      	b.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff ffa1 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 8000872:	e006      	b.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000874:	2003      	movs	r0, #3
 8000876:	f7ff ff9d 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 800087a:	4b03      	ldr	r3, [pc, #12]	; (8000888 <MultiFunctionShield__ISRFunc+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	bf00      	nop
  }
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000008c 	.word	0x2000008c

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 fe36 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f8ca 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f970 	bl	8000b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089c:	f000 f93e 	bl	8000b1c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80008a0:	f000 f916 	bl	8000ad0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  printf("\033\143"); printf("Welcome to ECEN-361 Lab-09, <student>\n\r");
 80008a4:	483c      	ldr	r0, [pc, #240]	; (8000998 <main+0x10c>)
 80008a6:	f007 fcd7 	bl	8008258 <iprintf>
 80008aa:	483c      	ldr	r0, [pc, #240]	; (800099c <main+0x110>)
 80008ac:	f007 fcd4 	bl	8008258 <iprintf>
	// Start timer
	MultiFunctionShield_Clear();							// Clear the 7-seg display
 80008b0:	f7ff ff6a 	bl	8000788 <MultiFunctionShield_Clear>
	HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 80008b4:	483a      	ldr	r0, [pc, #232]	; (80009a0 <main+0x114>)
 80008b6:	f002 fce3 	bl	8003280 <HAL_TIM_Base_Start_IT>
	Clear_LEDs();
 80008ba:	f7ff ff47 	bl	800074c <Clear_LEDs>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008be:	f003 fd1b 	bl	80042f8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UpDownMutex */
  UpDownMutexHandle = osMutexNew(&UpDownMutex_attributes);
 80008c2:	4838      	ldr	r0, [pc, #224]	; (80009a4 <main+0x118>)
 80008c4:	f003 ff21 	bl	800470a <osMutexNew>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <main+0x11c>)
 80008cc:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Button_1_Semaphore */
  Button_1_SemaphoreHandle = osSemaphoreNew(1, 1, &Button_1_Semaphore_attributes);
 80008ce:	4a37      	ldr	r2, [pc, #220]	; (80009ac <main+0x120>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	2001      	movs	r0, #1
 80008d4:	f004 f827 	bl	8004926 <osSemaphoreNew>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a35      	ldr	r2, [pc, #212]	; (80009b0 <main+0x124>)
 80008dc:	6013      	str	r3, [r2, #0]

  /* creation of Button_2_Semaphore */
  Button_2_SemaphoreHandle = osSemaphoreNew(1, 1, &Button_2_Semaphore_attributes);
 80008de:	4a35      	ldr	r2, [pc, #212]	; (80009b4 <main+0x128>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	2001      	movs	r0, #1
 80008e4:	f004 f81f 	bl	8004926 <osSemaphoreNew>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <main+0x12c>)
 80008ec:	6013      	str	r3, [r2, #0]

  /* creation of Button_3_Semaphore */
  Button_3_SemaphoreHandle = osSemaphoreNew(1, 1, &Button_3_Semaphore_attributes);
 80008ee:	4a33      	ldr	r2, [pc, #204]	; (80009bc <main+0x130>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	2001      	movs	r0, #1
 80008f4:	f004 f817 	bl	8004926 <osSemaphoreNew>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <main+0x134>)
 80008fc:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore_Counting */
  Semaphore_CountingHandle = osSemaphoreNew(31, 31, &Semaphore_Counting_attributes);
 80008fe:	4a31      	ldr	r2, [pc, #196]	; (80009c4 <main+0x138>)
 8000900:	211f      	movs	r1, #31
 8000902:	201f      	movs	r0, #31
 8000904:	f004 f80f 	bl	8004926 <osSemaphoreNew>
 8000908:	4603      	mov	r3, r0
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <main+0x13c>)
 800090c:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SW_Timer_7Seg */
  SW_Timer_7SegHandle = osTimerNew(SW_Timer_Countdown, osTimerPeriodic, NULL, &SW_Timer_7Seg_attributes);
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <main+0x140>)
 8000910:	2200      	movs	r2, #0
 8000912:	2101      	movs	r1, #1
 8000914:	482e      	ldr	r0, [pc, #184]	; (80009d0 <main+0x144>)
 8000916:	f003 fdfb 	bl	8004510 <osTimerNew>
 800091a:	4603      	mov	r3, r0
 800091c:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <main+0x148>)
 800091e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SemaphoreToggle */
  SemaphoreToggleHandle = osThreadNew(Semaphore_Toggle_Task, NULL, &SemaphoreToggle_attributes);
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <main+0x14c>)
 8000922:	2100      	movs	r1, #0
 8000924:	482d      	ldr	r0, [pc, #180]	; (80009dc <main+0x150>)
 8000926:	f003 fd31 	bl	800438c <osThreadNew>
 800092a:	4603      	mov	r3, r0
 800092c:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <main+0x154>)
 800092e:	6013      	str	r3, [r2, #0]

  /* creation of NotifToggle */
  NotifToggleHandle = osThreadNew(NotifyToggleTask, NULL, &NotifToggle_attributes);
 8000930:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <main+0x158>)
 8000932:	2100      	movs	r1, #0
 8000934:	482c      	ldr	r0, [pc, #176]	; (80009e8 <main+0x15c>)
 8000936:	f003 fd29 	bl	800438c <osThreadNew>
 800093a:	4603      	mov	r3, r0
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <main+0x160>)
 800093e:	6013      	str	r3, [r2, #0]

  /* creation of SW_Timer_Toggle */
  SW_Timer_ToggleHandle = osThreadNew(SW_Timer_Task, NULL, &SW_Timer_Toggle_attributes);
 8000940:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <main+0x164>)
 8000942:	2100      	movs	r1, #0
 8000944:	482b      	ldr	r0, [pc, #172]	; (80009f4 <main+0x168>)
 8000946:	f003 fd21 	bl	800438c <osThreadNew>
 800094a:	4603      	mov	r3, r0
 800094c:	4a2a      	ldr	r2, [pc, #168]	; (80009f8 <main+0x16c>)
 800094e:	6013      	str	r3, [r2, #0]

  /* creation of Mutex_CountUp */
  Mutex_CountUpHandle = osThreadNew(Mutex_CountUpTask, NULL, &Mutex_CountUp_attributes);
 8000950:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <main+0x170>)
 8000952:	2100      	movs	r1, #0
 8000954:	482a      	ldr	r0, [pc, #168]	; (8000a00 <main+0x174>)
 8000956:	f003 fd19 	bl	800438c <osThreadNew>
 800095a:	4603      	mov	r3, r0
 800095c:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <main+0x178>)
 800095e:	6013      	str	r3, [r2, #0]

  /* creation of Mutex_CountDown */
  Mutex_CountDownHandle = osThreadNew(Mutex_CountDownTask, NULL, &Mutex_CountDown_attributes);
 8000960:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <main+0x17c>)
 8000962:	2100      	movs	r1, #0
 8000964:	4829      	ldr	r0, [pc, #164]	; (8000a0c <main+0x180>)
 8000966:	f003 fd11 	bl	800438c <osThreadNew>
 800096a:	4603      	mov	r3, r0
 800096c:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <main+0x184>)
 800096e:	6013      	str	r3, [r2, #0]

  /* creation of UpdateGlobDisp */
  UpdateGlobDispHandle = osThreadNew(UpdateGlobDisplayProcess, NULL, &UpdateGlobDisp_attributes);
 8000970:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <main+0x188>)
 8000972:	2100      	movs	r1, #0
 8000974:	4828      	ldr	r0, [pc, #160]	; (8000a18 <main+0x18c>)
 8000976:	f003 fd09 	bl	800438c <osThreadNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <main+0x190>)
 800097e:	6013      	str	r3, [r2, #0]

  /* creation of ResetGlobal */
  ResetGlobalHandle = osThreadNew(ResetGlobalTask, NULL, &ResetGlobal_attributes);
 8000980:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <main+0x194>)
 8000982:	2100      	movs	r1, #0
 8000984:	4827      	ldr	r0, [pc, #156]	; (8000a24 <main+0x198>)
 8000986:	f003 fd01 	bl	800438c <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <main+0x19c>)
 800098e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000990:	f003 fcd6 	bl	8004340 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000994:	e7fe      	b.n	8000994 <main+0x108>
 8000996:	bf00      	nop
 8000998:	08009200 	.word	0x08009200
 800099c:	08009204 	.word	0x08009204
 80009a0:	20000094 	.word	0x20000094
 80009a4:	08009360 	.word	0x08009360
 80009a8:	20000188 	.word	0x20000188
 80009ac:	08009370 	.word	0x08009370
 80009b0:	2000018c 	.word	0x2000018c
 80009b4:	08009380 	.word	0x08009380
 80009b8:	20000190 	.word	0x20000190
 80009bc:	08009390 	.word	0x08009390
 80009c0:	20000194 	.word	0x20000194
 80009c4:	080093a0 	.word	0x080093a0
 80009c8:	20000198 	.word	0x20000198
 80009cc:	08009350 	.word	0x08009350
 80009d0:	08000fb5 	.word	0x08000fb5
 80009d4:	20000184 	.word	0x20000184
 80009d8:	08009254 	.word	0x08009254
 80009dc:	08000e0d 	.word	0x08000e0d
 80009e0:	20000168 	.word	0x20000168
 80009e4:	08009278 	.word	0x08009278
 80009e8:	08000e3d 	.word	0x08000e3d
 80009ec:	2000016c 	.word	0x2000016c
 80009f0:	0800929c 	.word	0x0800929c
 80009f4:	08000e4d 	.word	0x08000e4d
 80009f8:	20000170 	.word	0x20000170
 80009fc:	080092c0 	.word	0x080092c0
 8000a00:	08000e9d 	.word	0x08000e9d
 8000a04:	20000174 	.word	0x20000174
 8000a08:	080092e4 	.word	0x080092e4
 8000a0c:	08000ef5 	.word	0x08000ef5
 8000a10:	20000178 	.word	0x20000178
 8000a14:	08009308 	.word	0x08009308
 8000a18:	08000f4d 	.word	0x08000f4d
 8000a1c:	2000017c 	.word	0x2000017c
 8000a20:	0800932c 	.word	0x0800932c
 8000a24:	08000f6d 	.word	0x08000f6d
 8000a28:	20000180 	.word	0x20000180

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2244      	movs	r2, #68	; 0x44
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f007 fc1e 	bl	800827c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a52:	f001 f879 	bl	8001b48 <HAL_PWREx_ControlVoltageScaling>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a5c:	f000 fae4 	bl	8001028 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f8b0 	bl	8001bf4 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a9a:	f000 fac5 	bl	8001028 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fc78 	bl	80023ac <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ac2:	f000 fab1 	bl	8001028 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3758      	adds	r7, #88	; 0x58
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000adc:	f240 321f 	movw	r2, #799	; 0x31f
 8000ae0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000aea:	2264      	movs	r2, #100	; 0x64
 8000aec:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000b02:	f002 fb65 	bl	80031d0 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000b0c:	f000 fa8c 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000094 	.word	0x20000094
 8000b18:	40014800 	.word	0x40014800

08000b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART2_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b60:	f002 fde0 	bl	8003724 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 fa5d 	bl	8001028 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000e0 	.word	0x200000e0
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b6a      	ldr	r3, [pc, #424]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a69      	ldr	r2, [pc, #420]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b67      	ldr	r3, [pc, #412]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b64      	ldr	r3, [pc, #400]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a63      	ldr	r2, [pc, #396]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b61      	ldr	r3, [pc, #388]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a5d      	ldr	r2, [pc, #372]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b5b      	ldr	r3, [pc, #364]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a57      	ldr	r2, [pc, #348]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 ff4c 	bl	8001a98 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2160      	movs	r1, #96	; 0x60
 8000c04:	484e      	ldr	r0, [pc, #312]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000c06:	f000 ff47 	bl	8001a98 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4848      	ldr	r0, [pc, #288]	; (8000d44 <MX_GPIO_Init+0x1c8>)
 8000c22:	f000 fd8f 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000c26:	2302      	movs	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4842      	ldr	r0, [pc, #264]	; (8000d44 <MX_GPIO_Init+0x1c8>)
 8000c3a:	f000 fd83 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c42:	230b      	movs	r3, #11
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 fd76 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000c58:	2312      	movs	r3, #18
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f000 fd68 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin;
 8000c74:	23e0      	movs	r3, #224	; 0xe0
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c78:	2311      	movs	r3, #17
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f000 fd59 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000c92:	2301      	movs	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4826      	ldr	r0, [pc, #152]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000ca8:	f000 fd4c 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin;
 8000cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fd3c 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4817      	ldr	r0, [pc, #92]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000ce4:	f000 fd2e 	bl	8001744 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000ce8:	2340      	movs	r3, #64	; 0x40
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cec:	2311      	movs	r3, #17
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4810      	ldr	r0, [pc, #64]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000d00:	f000 fd20 	bl	8001744 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2105      	movs	r1, #5
 8000d08:	2006      	movs	r0, #6
 8000d0a:	f000 fcf1 	bl	80016f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d0e:	2006      	movs	r0, #6
 8000d10:	f000 fd0a 	bl	8001728 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2105      	movs	r1, #5
 8000d18:	2007      	movs	r0, #7
 8000d1a:	f000 fce9 	bl	80016f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f000 fd02 	bl	8001728 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2105      	movs	r1, #5
 8000d28:	200a      	movs	r0, #10
 8000d2a:	f000 fce1 	bl	80016f0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f000 fcfa 	bl	8001728 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800

08000d48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b082      	sub	sp, #8
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	2b10      	cmp	r3, #16
 8000d56:	d00b      	beq.n	8000d70 <HAL_GPIO_EXTI_Callback+0x28>
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	dc1a      	bgt.n	8000d92 <HAL_GPIO_EXTI_Callback+0x4a>
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d00d      	beq.n	8000d7c <HAL_GPIO_EXTI_Callback+0x34>
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d116      	bne.n	8000d92 <HAL_GPIO_EXTI_Callback+0x4a>
		{
		case Button_1_Pin:
			// Got the pin -- Give the semaphore
			osSemaphoreRelease(Button_1_SemaphoreHandle);
 8000d64:	4b0d      	ldr	r3, [pc, #52]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x54>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 feb7 	bl	8004adc <osSemaphoreRelease>
			break;
 8000d6e:	e010      	b.n	8000d92 <HAL_GPIO_EXTI_Callback+0x4a>

		case Button_2_Pin:
			osSemaphoreRelease(Button_2_SemaphoreHandle);
 8000d70:	4b0b      	ldr	r3, [pc, #44]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x58>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 feb1 	bl	8004adc <osSemaphoreRelease>
			break;
 8000d7a:	e00a      	b.n	8000d92 <HAL_GPIO_EXTI_Callback+0x4a>

		case Button_3_Pin:
			srand((unsigned) uwTick );
 8000d7c:	4b09      	ldr	r3, [pc, #36]	; (8000da4 <HAL_GPIO_EXTI_Callback+0x5c>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	4618      	mov	r0, r3
 8000d82:	f007 f93b 	bl	8007ffc <srand>
			osSemaphoreRelease(Button_3_SemaphoreHandle);
 8000d86:	4b08      	ldr	r3, [pc, #32]	; (8000da8 <HAL_GPIO_EXTI_Callback+0x60>)
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	f003 fea6 	bl	8004adc <osSemaphoreRelease>
			break;
 8000d90:	bf00      	nop
		}

	}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	2000018c 	.word	0x2000018c
 8000da0:	20000190 	.word	0x20000190
 8000da4:	200001ec 	.word	0x200001ec
 8000da8:	20000194 	.word	0x20000194

08000dac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000db4:	1d39      	adds	r1, r7, #4
 8000db6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dba:	2201      	movs	r2, #1
 8000dbc:	4803      	ldr	r0, [pc, #12]	; (8000dcc <__io_putchar+0x20>)
 8000dbe:	f002 fcff 	bl	80037c0 <HAL_UART_Transmit>

  return ch;
 8000dc2:	687b      	ldr	r3, [r7, #4]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3708      	adds	r7, #8
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	200000e0 	.word	0x200000e0

08000dd0 <random_wait>:


int random_wait(int min)
	{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b084      	sub	sp, #16
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
	/* Return a random number between 200 - 300
	 * Meant to be mS for the count up or count down in the protected
	 * mutex demonstration routines
	 */
	int rand_millisec = min + (rand() % 99);
 8000dd8:	f007 f93e 	bl	8008058 <rand>
 8000ddc:	4602      	mov	r2, r0
 8000dde:	4b0a      	ldr	r3, [pc, #40]	; (8000e08 <random_wait+0x38>)
 8000de0:	fb83 1302 	smull	r1, r3, r3, r2
 8000de4:	4413      	add	r3, r2
 8000de6:	1199      	asrs	r1, r3, #6
 8000de8:	17d3      	asrs	r3, r2, #31
 8000dea:	1ac9      	subs	r1, r1, r3
 8000dec:	460b      	mov	r3, r1
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	440b      	add	r3, r1
 8000df2:	0159      	lsls	r1, r3, #5
 8000df4:	440b      	add	r3, r1
 8000df6:	1ad1      	subs	r1, r2, r3
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	440b      	add	r3, r1
 8000dfc:	60fb      	str	r3, [r7, #12]
	return rand_millisec;
 8000dfe:	68fb      	ldr	r3, [r7, #12]

	}
 8000e00:	4618      	mov	r0, r3
 8000e02:	3710      	adds	r7, #16
 8000e04:	46bd      	mov	sp, r7
 8000e06:	bd80      	pop	{r7, pc}
 8000e08:	a57eb503 	.word	0xa57eb503

08000e0c <Semaphore_Toggle_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Semaphore_Toggle_Task */
void Semaphore_Toggle_Task(void *argument)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b082      	sub	sp, #8
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	6078      	str	r0, [r7, #4]

	  /* USER CODE BEGIN SemaphoreToggle_Task */
	  /* Infinite loop */
	  for(;;)
	  {
		osSemaphoreAcquire(Button_1_SemaphoreHandle,100000);
 8000e14:	4b06      	ldr	r3, [pc, #24]	; (8000e30 <Semaphore_Toggle_Task+0x24>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4906      	ldr	r1, [pc, #24]	; (8000e34 <Semaphore_Toggle_Task+0x28>)
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f003 fe0c 	bl	8004a38 <osSemaphoreAcquire>
		HAL_GPIO_TogglePin(LED_D4_GPIO_Port , LED_D4_Pin);
 8000e20:	2140      	movs	r1, #64	; 0x40
 8000e22:	4805      	ldr	r0, [pc, #20]	; (8000e38 <Semaphore_Toggle_Task+0x2c>)
 8000e24:	f000 fe50 	bl	8001ac8 <HAL_GPIO_TogglePin>
		osDelay(1);
 8000e28:	2001      	movs	r0, #1
 8000e2a:	f003 fb41 	bl	80044b0 <osDelay>
		osSemaphoreAcquire(Button_1_SemaphoreHandle,100000);
 8000e2e:	e7f1      	b.n	8000e14 <Semaphore_Toggle_Task+0x8>
 8000e30:	2000018c 	.word	0x2000018c
 8000e34:	000186a0 	.word	0x000186a0
 8000e38:	48000400 	.word	0x48000400

08000e3c <NotifyToggleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NotifyToggleTask */
void NotifyToggleTask(void *argument)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NotifyToggleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000e44:	2001      	movs	r0, #1
 8000e46:	f003 fb33 	bl	80044b0 <osDelay>
 8000e4a:	e7fb      	b.n	8000e44 <NotifyToggleTask+0x8>

08000e4c <SW_Timer_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SW_Timer_Task */
void SW_Timer_Task(void *argument)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SW_Timer_Task */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Button_2_SemaphoreHandle,100000);
 8000e54:	4b0e      	ldr	r3, [pc, #56]	; (8000e90 <SW_Timer_Task+0x44>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	490e      	ldr	r1, [pc, #56]	; (8000e94 <SW_Timer_Task+0x48>)
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	f003 fdec 	bl	8004a38 <osSemaphoreAcquire>
	  // A button push starts or stops the SW Timer
	  // Button push is indicated by the semaphore
	if (osTimerIsRunning(SW_Timer_7SegHandle))
 8000e60:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <SW_Timer_Task+0x4c>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4618      	mov	r0, r3
 8000e66:	f003 fc34 	bl	80046d2 <osTimerIsRunning>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d005      	beq.n	8000e7c <SW_Timer_Task+0x30>
		osTimerStop(SW_Timer_7SegHandle );
 8000e70:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <SW_Timer_Task+0x4c>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4618      	mov	r0, r3
 8000e76:	f003 fbf5 	bl	8004664 <osTimerStop>
 8000e7a:	e005      	b.n	8000e88 <SW_Timer_Task+0x3c>
	else
		osTimerStart(SW_Timer_7SegHandle , 200);
 8000e7c:	4b06      	ldr	r3, [pc, #24]	; (8000e98 <SW_Timer_Task+0x4c>)
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	21c8      	movs	r1, #200	; 0xc8
 8000e82:	4618      	mov	r0, r3
 8000e84:	f003 fbc0 	bl	8004608 <osTimerStart>
    osDelay(1);
 8000e88:	2001      	movs	r0, #1
 8000e8a:	f003 fb11 	bl	80044b0 <osDelay>
	osSemaphoreAcquire(Button_2_SemaphoreHandle,100000);
 8000e8e:	e7e1      	b.n	8000e54 <SW_Timer_Task+0x8>
 8000e90:	20000190 	.word	0x20000190
 8000e94:	000186a0 	.word	0x000186a0
 8000e98:	20000184 	.word	0x20000184

08000e9c <Mutex_CountUpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mutex_CountUpTask */
void Mutex_CountUpTask(void *argument)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mutex_CountUpTask */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(UpDownMutexHandle,100000);
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <Mutex_CountUpTask+0x4c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4910      	ldr	r1, [pc, #64]	; (8000eec <Mutex_CountUpTask+0x50>)
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f003 fcb3 	bl	8004816 <osMutexAcquire>
	  // Once we have it, we can start counting Up
	  // THe count up will be some random between 200 - 300 mS

	if (mutex_protected_count<99)
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	; (8000ef0 <Mutex_CountUpTask+0x54>)
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	2b62      	cmp	r3, #98	; 0x62
 8000eb6:	d806      	bhi.n	8000ec6 <Mutex_CountUpTask+0x2a>
		mutex_protected_count++;
 8000eb8:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <Mutex_CountUpTask+0x54>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	b2da      	uxtb	r2, r3
 8000ec0:	4b0b      	ldr	r3, [pc, #44]	; (8000ef0 <Mutex_CountUpTask+0x54>)
 8000ec2:	701a      	strb	r2, [r3, #0]
 8000ec4:	e002      	b.n	8000ecc <Mutex_CountUpTask+0x30>
	else
		mutex_protected_count=0;
 8000ec6:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <Mutex_CountUpTask+0x54>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	701a      	strb	r2, [r3, #0]
	// Done writing, so give back the mutex
	osMutexRelease(UpDownMutexHandle);
 8000ecc:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <Mutex_CountUpTask+0x4c>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f003 fceb 	bl	80048ac <osMutexRelease>
    osDelay(random_wait(300));
 8000ed6:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000eda:	f7ff ff79 	bl	8000dd0 <random_wait>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f003 fae5 	bl	80044b0 <osDelay>
	  osMutexWait(UpDownMutexHandle,100000);
 8000ee6:	e7dd      	b.n	8000ea4 <Mutex_CountUpTask+0x8>
 8000ee8:	20000188 	.word	0x20000188
 8000eec:	000186a0 	.word	0x000186a0
 8000ef0:	20000001 	.word	0x20000001

08000ef4 <Mutex_CountDownTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mutex_CountDownTask */
void Mutex_CountDownTask(void *argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mutex_CountDownTask */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(UpDownMutexHandle,100000);
 8000efc:	4b10      	ldr	r3, [pc, #64]	; (8000f40 <Mutex_CountDownTask+0x4c>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4910      	ldr	r1, [pc, #64]	; (8000f44 <Mutex_CountDownTask+0x50>)
 8000f02:	4618      	mov	r0, r3
 8000f04:	f003 fc87 	bl	8004816 <osMutexAcquire>
	  if (mutex_protected_count<1)
 8000f08:	4b0f      	ldr	r3, [pc, #60]	; (8000f48 <Mutex_CountDownTask+0x54>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d103      	bne.n	8000f18 <Mutex_CountDownTask+0x24>
	  		mutex_protected_count=99;
 8000f10:	4b0d      	ldr	r3, [pc, #52]	; (8000f48 <Mutex_CountDownTask+0x54>)
 8000f12:	2263      	movs	r2, #99	; 0x63
 8000f14:	701a      	strb	r2, [r3, #0]
 8000f16:	e005      	b.n	8000f24 <Mutex_CountDownTask+0x30>
	  	else
	  		mutex_protected_count--;
 8000f18:	4b0b      	ldr	r3, [pc, #44]	; (8000f48 <Mutex_CountDownTask+0x54>)
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	3b01      	subs	r3, #1
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	4b09      	ldr	r3, [pc, #36]	; (8000f48 <Mutex_CountDownTask+0x54>)
 8000f22:	701a      	strb	r2, [r3, #0]
	  	// Done writing, so give back the mutex
		osMutexRelease(UpDownMutexHandle);
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <Mutex_CountDownTask+0x4c>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f003 fcbf 	bl	80048ac <osMutexRelease>
		osDelay(random_wait(200));
 8000f2e:	20c8      	movs	r0, #200	; 0xc8
 8000f30:	f7ff ff4e 	bl	8000dd0 <random_wait>
 8000f34:	4603      	mov	r3, r0
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 faba 	bl	80044b0 <osDelay>
	  osMutexWait(UpDownMutexHandle,100000);
 8000f3c:	e7de      	b.n	8000efc <Mutex_CountDownTask+0x8>
 8000f3e:	bf00      	nop
 8000f40:	20000188 	.word	0x20000188
 8000f44:	000186a0 	.word	0x000186a0
 8000f48:	20000001 	.word	0x20000001

08000f4c <UpdateGlobDisplayProcess>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UpdateGlobDisplayProcess */
void UpdateGlobDisplayProcess(void *argument)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
   * This just puts the value of the GlobalVariable on the
   * right-most two-digits of the 7Seg Display */

  for(;;)
	  {
	  MultiFunctionShield_Display_Two_Digits(mutex_protected_count);
 8000f54:	4b04      	ldr	r3, [pc, #16]	; (8000f68 <UpdateGlobDisplayProcess+0x1c>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	b25b      	sxtb	r3, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff fbac 	bl	80006b8 <MultiFunctionShield_Display_Two_Digits>
	  osDelay(150);	// The competing process to inc/dec are 200 - 300mS
 8000f60:	2096      	movs	r0, #150	; 0x96
 8000f62:	f003 faa5 	bl	80044b0 <osDelay>
	  MultiFunctionShield_Display_Two_Digits(mutex_protected_count);
 8000f66:	e7f5      	b.n	8000f54 <UpdateGlobDisplayProcess+0x8>
 8000f68:	20000001 	.word	0x20000001

08000f6c <ResetGlobalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ResetGlobalTask */
void ResetGlobalTask(void *argument)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
		{
		/* Pressing Button 3 sets us to ask for
		 * the MUTEX protecting the global variable
		 * When we get it, we can reset the global to the middle
		 */
		osSemaphoreAcquire(Button_3_SemaphoreHandle,100000);
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <ResetGlobalTask+0x38>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	490b      	ldr	r1, [pc, #44]	; (8000fa8 <ResetGlobalTask+0x3c>)
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f003 fd5c 	bl	8004a38 <osSemaphoreAcquire>
		// Now we have the semaphore because the button was pressed
		osMutexWait(UpDownMutexHandle,100000);
 8000f80:	4b0a      	ldr	r3, [pc, #40]	; (8000fac <ResetGlobalTask+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4908      	ldr	r1, [pc, #32]	; (8000fa8 <ResetGlobalTask+0x3c>)
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 fc45 	bl	8004816 <osMutexAcquire>
		mutex_protected_count = Protected_Count_Initial_Value ;
 8000f8c:	4b08      	ldr	r3, [pc, #32]	; (8000fb0 <ResetGlobalTask+0x44>)
 8000f8e:	2232      	movs	r2, #50	; 0x32
 8000f90:	701a      	strb	r2, [r3, #0]
		osMutexRelease(UpDownMutexHandle);
 8000f92:	4b06      	ldr	r3, [pc, #24]	; (8000fac <ResetGlobalTask+0x40>)
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f003 fc88 	bl	80048ac <osMutexRelease>
		osDelay(1);
 8000f9c:	2001      	movs	r0, #1
 8000f9e:	f003 fa87 	bl	80044b0 <osDelay>
		osSemaphoreAcquire(Button_3_SemaphoreHandle,100000);
 8000fa2:	e7e7      	b.n	8000f74 <ResetGlobalTask+0x8>
 8000fa4:	20000194 	.word	0x20000194
 8000fa8:	000186a0 	.word	0x000186a0
 8000fac:	20000188 	.word	0x20000188
 8000fb0:	20000001 	.word	0x20000001

08000fb4 <SW_Timer_Countdown>:
		  /* USER CODE END ResetGlobalTask */
}

/* SW_Timer_Countdown function */
void SW_Timer_Countdown(void *argument)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	/*
	 * When the timer expires, decrement the Count and Display it
	 * on the 7-Seg Upper
	 */

	if (countdown_display == 0) countdown_display = 9;
 8000fbc:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <SW_Timer_Countdown+0x3c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d103      	bne.n	8000fcc <SW_Timer_Countdown+0x18>
 8000fc4:	4b0a      	ldr	r3, [pc, #40]	; (8000ff0 <SW_Timer_Countdown+0x3c>)
 8000fc6:	2209      	movs	r2, #9
 8000fc8:	701a      	strb	r2, [r3, #0]
 8000fca:	e005      	b.n	8000fd8 <SW_Timer_Countdown+0x24>
		else countdown_display--;
 8000fcc:	4b08      	ldr	r3, [pc, #32]	; (8000ff0 <SW_Timer_Countdown+0x3c>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	b2da      	uxtb	r2, r3
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <SW_Timer_Countdown+0x3c>)
 8000fd6:	701a      	strb	r2, [r3, #0]

	MultiFunctionShield_Single_Digit_Display(4, countdown_display);   //put it on the left
 8000fd8:	4b05      	ldr	r3, [pc, #20]	; (8000ff0 <SW_Timer_Countdown+0x3c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	b25b      	sxtb	r3, r3
 8000fde:	4619      	mov	r1, r3
 8000fe0:	2004      	movs	r0, #4
 8000fe2:	f7ff fb11 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	// MultiFunctionShield_Single_Digit_Display(2, -1);//blank the bottom two

  /* USER CODE END SW_Timer_Countdown */
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	20000000 	.word	0x20000000

08000ff4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a07      	ldr	r2, [pc, #28]	; (8001020 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d101      	bne.n	800100a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001006:	f000 fa9b 	bl	8001540 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim17 )
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a05      	ldr	r2, [pc, #20]	; (8001024 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d101      	bne.n	8001016 <HAL_TIM_PeriodElapsedCallback+0x22>
  {
	  MultiFunctionShield__ISRFunc();
 8001012:	f7ff fc09 	bl	8000828 <MultiFunctionShield__ISRFunc>
  }

  /* USER CODE END Callback 1 */
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	40000400 	.word	0x40000400
 8001024:	20000094 	.word	0x20000094

08001028 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800102c:	b672      	cpsid	i
}
 800102e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001030:	e7fe      	b.n	8001030 <Error_Handler+0x8>
	...

08001034 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b11      	ldr	r3, [pc, #68]	; (8001080 <HAL_MspInit+0x4c>)
 800103c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800103e:	4a10      	ldr	r2, [pc, #64]	; (8001080 <HAL_MspInit+0x4c>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6613      	str	r3, [r2, #96]	; 0x60
 8001046:	4b0e      	ldr	r3, [pc, #56]	; (8001080 <HAL_MspInit+0x4c>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	607b      	str	r3, [r7, #4]
 8001050:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001052:	4b0b      	ldr	r3, [pc, #44]	; (8001080 <HAL_MspInit+0x4c>)
 8001054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001056:	4a0a      	ldr	r2, [pc, #40]	; (8001080 <HAL_MspInit+0x4c>)
 8001058:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800105c:	6593      	str	r3, [r2, #88]	; 0x58
 800105e:	4b08      	ldr	r3, [pc, #32]	; (8001080 <HAL_MspInit+0x4c>)
 8001060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001062:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	210f      	movs	r1, #15
 800106e:	f06f 0001 	mvn.w	r0, #1
 8001072:	f000 fb3d 	bl	80016f0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000

08001084 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a0d      	ldr	r2, [pc, #52]	; (80010c8 <HAL_TIM_Base_MspInit+0x44>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d113      	bne.n	80010be <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8001096:	4b0d      	ldr	r3, [pc, #52]	; (80010cc <HAL_TIM_Base_MspInit+0x48>)
 8001098:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800109a:	4a0c      	ldr	r2, [pc, #48]	; (80010cc <HAL_TIM_Base_MspInit+0x48>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010a0:	6613      	str	r3, [r2, #96]	; 0x60
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <HAL_TIM_Base_MspInit+0x48>)
 80010a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 80010ae:	2200      	movs	r2, #0
 80010b0:	2105      	movs	r1, #5
 80010b2:	201a      	movs	r0, #26
 80010b4:	f000 fb1c 	bl	80016f0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80010b8:	201a      	movs	r0, #26
 80010ba:	f000 fb35 	bl	8001728 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010be:	bf00      	nop
 80010c0:	3710      	adds	r7, #16
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40014800 	.word	0x40014800
 80010cc:	40021000 	.word	0x40021000

080010d0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b0ac      	sub	sp, #176	; 0xb0
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80010dc:	2200      	movs	r2, #0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	605a      	str	r2, [r3, #4]
 80010e2:	609a      	str	r2, [r3, #8]
 80010e4:	60da      	str	r2, [r3, #12]
 80010e6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010e8:	f107 0314 	add.w	r3, r7, #20
 80010ec:	2288      	movs	r2, #136	; 0x88
 80010ee:	2100      	movs	r1, #0
 80010f0:	4618      	mov	r0, r3
 80010f2:	f007 f8c3 	bl	800827c <memset>
  if(huart->Instance==USART2)
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_UART_MspInit+0xb0>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d13b      	bne.n	8001178 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001100:	2302      	movs	r3, #2
 8001102:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001104:	2300      	movs	r3, #0
 8001106:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001108:	f107 0314 	add.w	r3, r7, #20
 800110c:	4618      	mov	r0, r3
 800110e:	f001 fba3 	bl	8002858 <HAL_RCCEx_PeriphCLKConfig>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001118:	f7ff ff86 	bl	8001028 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800111c:	4b19      	ldr	r3, [pc, #100]	; (8001184 <HAL_UART_MspInit+0xb4>)
 800111e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001120:	4a18      	ldr	r2, [pc, #96]	; (8001184 <HAL_UART_MspInit+0xb4>)
 8001122:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001126:	6593      	str	r3, [r2, #88]	; 0x58
 8001128:	4b16      	ldr	r3, [pc, #88]	; (8001184 <HAL_UART_MspInit+0xb4>)
 800112a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001130:	613b      	str	r3, [r7, #16]
 8001132:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001134:	4b13      	ldr	r3, [pc, #76]	; (8001184 <HAL_UART_MspInit+0xb4>)
 8001136:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001138:	4a12      	ldr	r2, [pc, #72]	; (8001184 <HAL_UART_MspInit+0xb4>)
 800113a:	f043 0301 	orr.w	r3, r3, #1
 800113e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001140:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_UART_MspInit+0xb4>)
 8001142:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
 800114a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800114c:	230c      	movs	r3, #12
 800114e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001152:	2302      	movs	r3, #2
 8001154:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800115e:	2303      	movs	r3, #3
 8001160:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001164:	2307      	movs	r3, #7
 8001166:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800116a:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f000 fae6 	bl	8001744 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001178:	bf00      	nop
 800117a:	37b0      	adds	r7, #176	; 0xb0
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40004400 	.word	0x40004400
 8001184:	40021000 	.word	0x40021000

08001188 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08e      	sub	sp, #56	; 0x38
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001190:	2300      	movs	r3, #0
 8001192:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8001196:	4b34      	ldr	r3, [pc, #208]	; (8001268 <HAL_InitTick+0xe0>)
 8001198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800119a:	4a33      	ldr	r2, [pc, #204]	; (8001268 <HAL_InitTick+0xe0>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6593      	str	r3, [r2, #88]	; 0x58
 80011a2:	4b31      	ldr	r3, [pc, #196]	; (8001268 <HAL_InitTick+0xe0>)
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ae:	f107 0210 	add.w	r2, r7, #16
 80011b2:	f107 0314 	add.w	r3, r7, #20
 80011b6:	4611      	mov	r1, r2
 80011b8:	4618      	mov	r0, r3
 80011ba:	f001 fabb 	bl	8002734 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011be:	6a3b      	ldr	r3, [r7, #32]
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d103      	bne.n	80011d0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80011c8:	f001 fa88 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 80011cc:	6378      	str	r0, [r7, #52]	; 0x34
 80011ce:	e004      	b.n	80011da <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80011d0:	f001 fa84 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 80011d4:	4603      	mov	r3, r0
 80011d6:	005b      	lsls	r3, r3, #1
 80011d8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80011da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011dc:	4a23      	ldr	r2, [pc, #140]	; (800126c <HAL_InitTick+0xe4>)
 80011de:	fba2 2303 	umull	r2, r3, r2, r3
 80011e2:	0c9b      	lsrs	r3, r3, #18
 80011e4:	3b01      	subs	r3, #1
 80011e6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80011e8:	4b21      	ldr	r3, [pc, #132]	; (8001270 <HAL_InitTick+0xe8>)
 80011ea:	4a22      	ldr	r2, [pc, #136]	; (8001274 <HAL_InitTick+0xec>)
 80011ec:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <HAL_InitTick+0xe8>)
 80011f0:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011f4:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80011f6:	4a1e      	ldr	r2, [pc, #120]	; (8001270 <HAL_InitTick+0xe8>)
 80011f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011fa:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80011fc:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <HAL_InitTick+0xe8>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <HAL_InitTick+0xe8>)
 8001204:	2200      	movs	r2, #0
 8001206:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b19      	ldr	r3, [pc, #100]	; (8001270 <HAL_InitTick+0xe8>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <HAL_InitTick+0xe8>)
 8001210:	f001 ffde 	bl	80031d0 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800121a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800121e:	2b00      	cmp	r3, #0
 8001220:	d11b      	bne.n	800125a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8001222:	4813      	ldr	r0, [pc, #76]	; (8001270 <HAL_InitTick+0xe8>)
 8001224:	f002 f82c 	bl	8003280 <HAL_TIM_Base_Start_IT>
 8001228:	4603      	mov	r3, r0
 800122a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800122e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001232:	2b00      	cmp	r3, #0
 8001234:	d111      	bne.n	800125a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001236:	201d      	movs	r0, #29
 8001238:	f000 fa76 	bl	8001728 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b0f      	cmp	r3, #15
 8001240:	d808      	bhi.n	8001254 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8001242:	2200      	movs	r2, #0
 8001244:	6879      	ldr	r1, [r7, #4]
 8001246:	201d      	movs	r0, #29
 8001248:	f000 fa52 	bl	80016f0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <HAL_InitTick+0xf0>)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	e002      	b.n	800125a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800125a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800125e:	4618      	mov	r0, r3
 8001260:	3738      	adds	r7, #56	; 0x38
 8001262:	46bd      	mov	sp, r7
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40021000 	.word	0x40021000
 800126c:	431bde83 	.word	0x431bde83
 8001270:	2000019c 	.word	0x2000019c
 8001274:	40000400 	.word	0x40000400
 8001278:	20000008 	.word	0x20000008

0800127c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001280:	e7fe      	b.n	8001280 <NMI_Handler+0x4>

08001282 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001286:	e7fe      	b.n	8001286 <HardFault_Handler+0x4>

08001288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800128c:	e7fe      	b.n	800128c <MemManage_Handler+0x4>

0800128e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800128e:	b480      	push	{r7}
 8001290:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001292:	e7fe      	b.n	8001292 <BusFault_Handler+0x4>

08001294 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001298:	e7fe      	b.n	8001298 <UsageFault_Handler+0x4>

0800129a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800129a:	b480      	push	{r7}
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129e:	bf00      	nop
 80012a0:	46bd      	mov	sp, r7
 80012a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a6:	4770      	bx	lr

080012a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80012ac:	2001      	movs	r0, #1
 80012ae:	f000 fc25 	bl	8001afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}

080012b6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012b6:	b580      	push	{r7, lr}
 80012b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 80012ba:	2002      	movs	r0, #2
 80012bc:	f000 fc1e 	bl	8001afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}

080012c4 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 80012c8:	2010      	movs	r0, #16
 80012ca:	f000 fc17 	bl	8001afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
	...

080012d4 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 80012d8:	4802      	ldr	r0, [pc, #8]	; (80012e4 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 80012da:	f002 f841 	bl	8003360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 80012de:	bf00      	nop
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	20000094 	.word	0x20000094

080012e8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012ec:	4802      	ldr	r0, [pc, #8]	; (80012f8 <TIM3_IRQHandler+0x10>)
 80012ee:	f002 f837 	bl	8003360 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012f2:	bf00      	nop
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	2000019c 	.word	0x2000019c

080012fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_kill>:

int _kill(int pid, int sig)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001316:	f007 f80f 	bl	8008338 <__errno>
 800131a:	4603      	mov	r3, r0
 800131c:	2216      	movs	r2, #22
 800131e:	601a      	str	r2, [r3, #0]
  return -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_exit>:

void _exit (int status)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001334:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffe7 	bl	800130c <_kill>
  while (1) {}    /* Make sure we hang here */
 800133e:	e7fe      	b.n	800133e <_exit+0x12>

08001340 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134c:	2300      	movs	r3, #0
 800134e:	617b      	str	r3, [r7, #20]
 8001350:	e00a      	b.n	8001368 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001352:	f3af 8000 	nop.w
 8001356:	4601      	mov	r1, r0
 8001358:	68bb      	ldr	r3, [r7, #8]
 800135a:	1c5a      	adds	r2, r3, #1
 800135c:	60ba      	str	r2, [r7, #8]
 800135e:	b2ca      	uxtb	r2, r1
 8001360:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	3301      	adds	r3, #1
 8001366:	617b      	str	r3, [r7, #20]
 8001368:	697a      	ldr	r2, [r7, #20]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	429a      	cmp	r2, r3
 800136e:	dbf0      	blt.n	8001352 <_read+0x12>
  }

  return len;
 8001370:	687b      	ldr	r3, [r7, #4]
}
 8001372:	4618      	mov	r0, r3
 8001374:	3718      	adds	r7, #24
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}

0800137a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b086      	sub	sp, #24
 800137e:	af00      	add	r7, sp, #0
 8001380:	60f8      	str	r0, [r7, #12]
 8001382:	60b9      	str	r1, [r7, #8]
 8001384:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
 800138a:	e009      	b.n	80013a0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	1c5a      	adds	r2, r3, #1
 8001390:	60ba      	str	r2, [r7, #8]
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fd09 	bl	8000dac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	617b      	str	r3, [r7, #20]
 80013a0:	697a      	ldr	r2, [r7, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	dbf1      	blt.n	800138c <_write+0x12>
  }
  return len;
 80013a8:	687b      	ldr	r3, [r7, #4]
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	3718      	adds	r7, #24
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}

080013b2 <_close>:

int _close(int file)
{
 80013b2:	b480      	push	{r7}
 80013b4:	b083      	sub	sp, #12
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013be:	4618      	mov	r0, r3
 80013c0:	370c      	adds	r7, #12
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr

080013ca <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013ca:	b480      	push	{r7}
 80013cc:	b083      	sub	sp, #12
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
 80013d2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80013da:	605a      	str	r2, [r3, #4]
  return 0;
 80013dc:	2300      	movs	r3, #0
}
 80013de:	4618      	mov	r0, r3
 80013e0:	370c      	adds	r7, #12
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr

080013ea <_isatty>:

int _isatty(int file)
{
 80013ea:	b480      	push	{r7}
 80013ec:	b083      	sub	sp, #12
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f2:	2301      	movs	r3, #1
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr

08001400 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	60f8      	str	r0, [r7, #12]
 8001408:	60b9      	str	r1, [r7, #8]
 800140a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	3714      	adds	r7, #20
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
	...

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	; (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	; (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	; (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	; (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	; (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	; (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f006 ff74 	bl	8008338 <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	; (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	; (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	; (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20018000 	.word	0x20018000
 800147c:	00000400 	.word	0x00000400
 8001480:	200001e8 	.word	0x200001e8
 8001484:	20004bc0 	.word	0x20004bc0

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80014e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b0:	f7ff ffea 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	; (80014e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	; (80014ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	; (80014f0 <LoopForever+0xe>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	; (80014f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	; (80014f8 <LoopForever+0x16>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014da:	f006 ff33 	bl	8008344 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014de:	f7ff f9d5 	bl	800088c <main>

080014e2 <LoopForever>:

LoopForever:
    b LoopForever
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80014e4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80014f0:	080094e8 	.word	0x080094e8
  ldr r2, =_sbss
 80014f4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80014f8:	20004bbc 	.word	0x20004bbc

080014fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC1_2_IRQHandler>
	...

08001500 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b082      	sub	sp, #8
 8001504:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001506:	2300      	movs	r3, #0
 8001508:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800150a:	4b0c      	ldr	r3, [pc, #48]	; (800153c <HAL_Init+0x3c>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	4a0b      	ldr	r2, [pc, #44]	; (800153c <HAL_Init+0x3c>)
 8001510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001514:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001516:	2003      	movs	r0, #3
 8001518:	f000 f8df 	bl	80016da <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800151c:	200f      	movs	r0, #15
 800151e:	f7ff fe33 	bl	8001188 <HAL_InitTick>
 8001522:	4603      	mov	r3, r0
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001528:	2301      	movs	r3, #1
 800152a:	71fb      	strb	r3, [r7, #7]
 800152c:	e001      	b.n	8001532 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800152e:	f7ff fd81 	bl	8001034 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001532:	79fb      	ldrb	r3, [r7, #7]
}
 8001534:	4618      	mov	r0, r3
 8001536:	3708      	adds	r7, #8
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40022000 	.word	0x40022000

08001540 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001544:	4b06      	ldr	r3, [pc, #24]	; (8001560 <HAL_IncTick+0x20>)
 8001546:	781b      	ldrb	r3, [r3, #0]
 8001548:	461a      	mov	r2, r3
 800154a:	4b06      	ldr	r3, [pc, #24]	; (8001564 <HAL_IncTick+0x24>)
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4413      	add	r3, r2
 8001550:	4a04      	ldr	r2, [pc, #16]	; (8001564 <HAL_IncTick+0x24>)
 8001552:	6013      	str	r3, [r2, #0]
}
 8001554:	bf00      	nop
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	2000000c 	.word	0x2000000c
 8001564:	200001ec 	.word	0x200001ec

08001568 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
  return uwTick;
 800156c:	4b03      	ldr	r3, [pc, #12]	; (800157c <HAL_GetTick+0x14>)
 800156e:	681b      	ldr	r3, [r3, #0]
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	200001ec 	.word	0x200001ec

08001580 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001580:	b480      	push	{r7}
 8001582:	b085      	sub	sp, #20
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001590:	4b0c      	ldr	r3, [pc, #48]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001592:	68db      	ldr	r3, [r3, #12]
 8001594:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001596:	68ba      	ldr	r2, [r7, #8]
 8001598:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800159c:	4013      	ands	r3, r2
 800159e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	60d3      	str	r3, [r2, #12]
}
 80015b8:	bf00      	nop
 80015ba:	3714      	adds	r7, #20
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015cc:	4b04      	ldr	r3, [pc, #16]	; (80015e0 <__NVIC_GetPriorityGrouping+0x18>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	0a1b      	lsrs	r3, r3, #8
 80015d2:	f003 0307 	and.w	r3, r3, #7
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000ed00 	.word	0xe000ed00

080015e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	4603      	mov	r3, r0
 80015ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	db0b      	blt.n	800160e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	f003 021f 	and.w	r2, r3, #31
 80015fc:	4907      	ldr	r1, [pc, #28]	; (800161c <__NVIC_EnableIRQ+0x38>)
 80015fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001602:	095b      	lsrs	r3, r3, #5
 8001604:	2001      	movs	r0, #1
 8001606:	fa00 f202 	lsl.w	r2, r0, r2
 800160a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800160e:	bf00      	nop
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000e100 	.word	0xe000e100

08001620 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	6039      	str	r1, [r7, #0]
 800162a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001630:	2b00      	cmp	r3, #0
 8001632:	db0a      	blt.n	800164a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	b2da      	uxtb	r2, r3
 8001638:	490c      	ldr	r1, [pc, #48]	; (800166c <__NVIC_SetPriority+0x4c>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	0112      	lsls	r2, r2, #4
 8001640:	b2d2      	uxtb	r2, r2
 8001642:	440b      	add	r3, r1
 8001644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001648:	e00a      	b.n	8001660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	b2da      	uxtb	r2, r3
 800164e:	4908      	ldr	r1, [pc, #32]	; (8001670 <__NVIC_SetPriority+0x50>)
 8001650:	79fb      	ldrb	r3, [r7, #7]
 8001652:	f003 030f 	and.w	r3, r3, #15
 8001656:	3b04      	subs	r3, #4
 8001658:	0112      	lsls	r2, r2, #4
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	440b      	add	r3, r1
 800165e:	761a      	strb	r2, [r3, #24]
}
 8001660:	bf00      	nop
 8001662:	370c      	adds	r7, #12
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr
 800166c:	e000e100 	.word	0xe000e100
 8001670:	e000ed00 	.word	0xe000ed00

08001674 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001674:	b480      	push	{r7}
 8001676:	b089      	sub	sp, #36	; 0x24
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	f003 0307 	and.w	r3, r3, #7
 8001686:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	f1c3 0307 	rsb	r3, r3, #7
 800168e:	2b04      	cmp	r3, #4
 8001690:	bf28      	it	cs
 8001692:	2304      	movcs	r3, #4
 8001694:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001696:	69fb      	ldr	r3, [r7, #28]
 8001698:	3304      	adds	r3, #4
 800169a:	2b06      	cmp	r3, #6
 800169c:	d902      	bls.n	80016a4 <NVIC_EncodePriority+0x30>
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	3b03      	subs	r3, #3
 80016a2:	e000      	b.n	80016a6 <NVIC_EncodePriority+0x32>
 80016a4:	2300      	movs	r3, #0
 80016a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016ac:	69bb      	ldr	r3, [r7, #24]
 80016ae:	fa02 f303 	lsl.w	r3, r2, r3
 80016b2:	43da      	mvns	r2, r3
 80016b4:	68bb      	ldr	r3, [r7, #8]
 80016b6:	401a      	ands	r2, r3
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	fa01 f303 	lsl.w	r3, r1, r3
 80016c6:	43d9      	mvns	r1, r3
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	4313      	orrs	r3, r2
         );
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	3724      	adds	r7, #36	; 0x24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr

080016da <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	b082      	sub	sp, #8
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff ff4c 	bl	8001580 <__NVIC_SetPriorityGrouping>
}
 80016e8:	bf00      	nop
 80016ea:	3708      	adds	r7, #8
 80016ec:	46bd      	mov	sp, r7
 80016ee:	bd80      	pop	{r7, pc}

080016f0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b086      	sub	sp, #24
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	4603      	mov	r3, r0
 80016f8:	60b9      	str	r1, [r7, #8]
 80016fa:	607a      	str	r2, [r7, #4]
 80016fc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016fe:	2300      	movs	r3, #0
 8001700:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001702:	f7ff ff61 	bl	80015c8 <__NVIC_GetPriorityGrouping>
 8001706:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001708:	687a      	ldr	r2, [r7, #4]
 800170a:	68b9      	ldr	r1, [r7, #8]
 800170c:	6978      	ldr	r0, [r7, #20]
 800170e:	f7ff ffb1 	bl	8001674 <NVIC_EncodePriority>
 8001712:	4602      	mov	r2, r0
 8001714:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001718:	4611      	mov	r1, r2
 800171a:	4618      	mov	r0, r3
 800171c:	f7ff ff80 	bl	8001620 <__NVIC_SetPriority>
}
 8001720:	bf00      	nop
 8001722:	3718      	adds	r7, #24
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001732:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001736:	4618      	mov	r0, r3
 8001738:	f7ff ff54 	bl	80015e4 <__NVIC_EnableIRQ>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}

08001744 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001744:	b480      	push	{r7}
 8001746:	b087      	sub	sp, #28
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
 800174c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800174e:	2300      	movs	r3, #0
 8001750:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001752:	e17f      	b.n	8001a54 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	2101      	movs	r1, #1
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	fa01 f303 	lsl.w	r3, r1, r3
 8001760:	4013      	ands	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	2b00      	cmp	r3, #0
 8001768:	f000 8171 	beq.w	8001a4e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b01      	cmp	r3, #1
 8001776:	d005      	beq.n	8001784 <HAL_GPIO_Init+0x40>
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f003 0303 	and.w	r3, r3, #3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d130      	bne.n	80017e6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	005b      	lsls	r3, r3, #1
 800178e:	2203      	movs	r2, #3
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	693a      	ldr	r2, [r7, #16]
 8001798:	4013      	ands	r3, r2
 800179a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	68da      	ldr	r2, [r3, #12]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	005b      	lsls	r3, r3, #1
 80017a4:	fa02 f303 	lsl.w	r3, r2, r3
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017ba:	2201      	movs	r2, #1
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	fa02 f303 	lsl.w	r3, r2, r3
 80017c2:	43db      	mvns	r3, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4013      	ands	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	091b      	lsrs	r3, r3, #4
 80017d0:	f003 0201 	and.w	r2, r3, #1
 80017d4:	697b      	ldr	r3, [r7, #20]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	693a      	ldr	r2, [r7, #16]
 80017dc:	4313      	orrs	r3, r2
 80017de:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	693a      	ldr	r2, [r7, #16]
 80017e4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	685b      	ldr	r3, [r3, #4]
 80017ea:	f003 0303 	and.w	r3, r3, #3
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d118      	bne.n	8001824 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017f6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80017f8:	2201      	movs	r2, #1
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001800:	43db      	mvns	r3, r3
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	4013      	ands	r3, r2
 8001806:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001808:	683b      	ldr	r3, [r7, #0]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	08db      	lsrs	r3, r3, #3
 800180e:	f003 0201 	and.w	r2, r3, #1
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	693a      	ldr	r2, [r7, #16]
 800181a:	4313      	orrs	r3, r2
 800181c:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	f003 0303 	and.w	r3, r3, #3
 800182c:	2b03      	cmp	r3, #3
 800182e:	d017      	beq.n	8001860 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	68db      	ldr	r3, [r3, #12]
 8001834:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	005b      	lsls	r3, r3, #1
 800183a:	2203      	movs	r2, #3
 800183c:	fa02 f303 	lsl.w	r3, r2, r3
 8001840:	43db      	mvns	r3, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4013      	ands	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	689a      	ldr	r2, [r3, #8]
 800184c:	697b      	ldr	r3, [r7, #20]
 800184e:	005b      	lsls	r3, r3, #1
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b02      	cmp	r3, #2
 800186a:	d123      	bne.n	80018b4 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800186c:	697b      	ldr	r3, [r7, #20]
 800186e:	08da      	lsrs	r2, r3, #3
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	3208      	adds	r2, #8
 8001874:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001878:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	f003 0307 	and.w	r3, r3, #7
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	220f      	movs	r2, #15
 8001884:	fa02 f303 	lsl.w	r3, r2, r3
 8001888:	43db      	mvns	r3, r3
 800188a:	693a      	ldr	r2, [r7, #16]
 800188c:	4013      	ands	r3, r2
 800188e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	691a      	ldr	r2, [r3, #16]
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	009b      	lsls	r3, r3, #2
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	08da      	lsrs	r2, r3, #3
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	3208      	adds	r2, #8
 80018ae:	6939      	ldr	r1, [r7, #16]
 80018b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	2203      	movs	r2, #3
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f003 0203 	and.w	r2, r3, #3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	005b      	lsls	r3, r3, #1
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	693a      	ldr	r2, [r7, #16]
 80018e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80ac 	beq.w	8001a4e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f6:	4b5f      	ldr	r3, [pc, #380]	; (8001a74 <HAL_GPIO_Init+0x330>)
 80018f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80018fa:	4a5e      	ldr	r2, [pc, #376]	; (8001a74 <HAL_GPIO_Init+0x330>)
 80018fc:	f043 0301 	orr.w	r3, r3, #1
 8001900:	6613      	str	r3, [r2, #96]	; 0x60
 8001902:	4b5c      	ldr	r3, [pc, #368]	; (8001a74 <HAL_GPIO_Init+0x330>)
 8001904:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001906:	f003 0301 	and.w	r3, r3, #1
 800190a:	60bb      	str	r3, [r7, #8]
 800190c:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800190e:	4a5a      	ldr	r2, [pc, #360]	; (8001a78 <HAL_GPIO_Init+0x334>)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	089b      	lsrs	r3, r3, #2
 8001914:	3302      	adds	r3, #2
 8001916:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800191a:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f003 0303 	and.w	r3, r3, #3
 8001922:	009b      	lsls	r3, r3, #2
 8001924:	220f      	movs	r2, #15
 8001926:	fa02 f303 	lsl.w	r3, r2, r3
 800192a:	43db      	mvns	r3, r3
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	4013      	ands	r3, r2
 8001930:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001938:	d025      	beq.n	8001986 <HAL_GPIO_Init+0x242>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	4a4f      	ldr	r2, [pc, #316]	; (8001a7c <HAL_GPIO_Init+0x338>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d01f      	beq.n	8001982 <HAL_GPIO_Init+0x23e>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	4a4e      	ldr	r2, [pc, #312]	; (8001a80 <HAL_GPIO_Init+0x33c>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d019      	beq.n	800197e <HAL_GPIO_Init+0x23a>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	4a4d      	ldr	r2, [pc, #308]	; (8001a84 <HAL_GPIO_Init+0x340>)
 800194e:	4293      	cmp	r3, r2
 8001950:	d013      	beq.n	800197a <HAL_GPIO_Init+0x236>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a4c      	ldr	r2, [pc, #304]	; (8001a88 <HAL_GPIO_Init+0x344>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d00d      	beq.n	8001976 <HAL_GPIO_Init+0x232>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4a4b      	ldr	r2, [pc, #300]	; (8001a8c <HAL_GPIO_Init+0x348>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <HAL_GPIO_Init+0x22e>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a4a      	ldr	r2, [pc, #296]	; (8001a90 <HAL_GPIO_Init+0x34c>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d101      	bne.n	800196e <HAL_GPIO_Init+0x22a>
 800196a:	2306      	movs	r3, #6
 800196c:	e00c      	b.n	8001988 <HAL_GPIO_Init+0x244>
 800196e:	2307      	movs	r3, #7
 8001970:	e00a      	b.n	8001988 <HAL_GPIO_Init+0x244>
 8001972:	2305      	movs	r3, #5
 8001974:	e008      	b.n	8001988 <HAL_GPIO_Init+0x244>
 8001976:	2304      	movs	r3, #4
 8001978:	e006      	b.n	8001988 <HAL_GPIO_Init+0x244>
 800197a:	2303      	movs	r3, #3
 800197c:	e004      	b.n	8001988 <HAL_GPIO_Init+0x244>
 800197e:	2302      	movs	r3, #2
 8001980:	e002      	b.n	8001988 <HAL_GPIO_Init+0x244>
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_GPIO_Init+0x244>
 8001986:	2300      	movs	r3, #0
 8001988:	697a      	ldr	r2, [r7, #20]
 800198a:	f002 0203 	and.w	r2, r2, #3
 800198e:	0092      	lsls	r2, r2, #2
 8001990:	4093      	lsls	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001998:	4937      	ldr	r1, [pc, #220]	; (8001a78 <HAL_GPIO_Init+0x334>)
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	089b      	lsrs	r3, r3, #2
 800199e:	3302      	adds	r3, #2
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019a6:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019a8:	689b      	ldr	r3, [r3, #8]
 80019aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	43db      	mvns	r3, r3
 80019b0:	693a      	ldr	r2, [r7, #16]
 80019b2:	4013      	ands	r3, r2
 80019b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d003      	beq.n	80019ca <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019c2:	693a      	ldr	r2, [r7, #16]
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80019ca:	4a32      	ldr	r2, [pc, #200]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	43db      	mvns	r3, r3
 80019da:	693a      	ldr	r2, [r7, #16]
 80019dc:	4013      	ands	r3, r2
 80019de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d003      	beq.n	80019f4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	68fb      	ldr	r3, [r7, #12]
 80019f0:	4313      	orrs	r3, r2
 80019f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019f4:	4a27      	ldr	r2, [pc, #156]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019fa:	4b26      	ldr	r3, [pc, #152]	; (8001a94 <HAL_GPIO_Init+0x350>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	693a      	ldr	r2, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a1e:	4a1d      	ldr	r2, [pc, #116]	; (8001a94 <HAL_GPIO_Init+0x350>)
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a24:	4b1b      	ldr	r3, [pc, #108]	; (8001a94 <HAL_GPIO_Init+0x350>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	43db      	mvns	r3, r3
 8001a2e:	693a      	ldr	r2, [r7, #16]
 8001a30:	4013      	ands	r3, r2
 8001a32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a34:	683b      	ldr	r3, [r7, #0]
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d003      	beq.n	8001a48 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	4313      	orrs	r3, r2
 8001a46:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a48:	4a12      	ldr	r2, [pc, #72]	; (8001a94 <HAL_GPIO_Init+0x350>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	3301      	adds	r3, #1
 8001a52:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	f47f ae78 	bne.w	8001754 <HAL_GPIO_Init+0x10>
  }
}
 8001a64:	bf00      	nop
 8001a66:	bf00      	nop
 8001a68:	371c      	adds	r7, #28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40010000 	.word	0x40010000
 8001a7c:	48000400 	.word	0x48000400
 8001a80:	48000800 	.word	0x48000800
 8001a84:	48000c00 	.word	0x48000c00
 8001a88:	48001000 	.word	0x48001000
 8001a8c:	48001400 	.word	0x48001400
 8001a90:	48001800 	.word	0x48001800
 8001a94:	40010400 	.word	0x40010400

08001a98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
 8001aa0:	460b      	mov	r3, r1
 8001aa2:	807b      	strh	r3, [r7, #2]
 8001aa4:	4613      	mov	r3, r2
 8001aa6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001aa8:	787b      	ldrb	r3, [r7, #1]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d003      	beq.n	8001ab6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aae:	887a      	ldrh	r2, [r7, #2]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001ab4:	e002      	b.n	8001abc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001ab6:	887a      	ldrh	r2, [r7, #2]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	695b      	ldr	r3, [r3, #20]
 8001ad8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001ada:	887a      	ldrh	r2, [r7, #2]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	43d9      	mvns	r1, r3
 8001ae6:	887b      	ldrh	r3, [r7, #2]
 8001ae8:	400b      	ands	r3, r1
 8001aea:	431a      	orrs	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
}
 8001af0:	bf00      	nop
 8001af2:	3714      	adds	r7, #20
 8001af4:	46bd      	mov	sp, r7
 8001af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afa:	4770      	bx	lr

08001afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b06:	4b08      	ldr	r3, [pc, #32]	; (8001b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b08:	695a      	ldr	r2, [r3, #20]
 8001b0a:	88fb      	ldrh	r3, [r7, #6]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d006      	beq.n	8001b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b12:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b14:	88fb      	ldrh	r3, [r7, #6]
 8001b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b18:	88fb      	ldrh	r3, [r7, #6]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f7ff f914 	bl	8000d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b20:	bf00      	nop
 8001b22:	3708      	adds	r7, #8
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	40010400 	.word	0x40010400

08001b2c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b30:	4b04      	ldr	r3, [pc, #16]	; (8001b44 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	40007000 	.word	0x40007000

08001b48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b085      	sub	sp, #20
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b56:	d130      	bne.n	8001bba <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b58:	4b23      	ldr	r3, [pc, #140]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b64:	d038      	beq.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b66:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b6e:	4a1e      	ldr	r2, [pc, #120]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b70:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b74:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001b76:	4b1d      	ldr	r3, [pc, #116]	; (8001bec <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2232      	movs	r2, #50	; 0x32
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	4a1b      	ldr	r2, [pc, #108]	; (8001bf0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001b82:	fba2 2303 	umull	r2, r3, r2, r3
 8001b86:	0c9b      	lsrs	r3, r3, #18
 8001b88:	3301      	adds	r3, #1
 8001b8a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b8c:	e002      	b.n	8001b94 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	3b01      	subs	r3, #1
 8001b92:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b94:	4b14      	ldr	r3, [pc, #80]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b96:	695b      	ldr	r3, [r3, #20]
 8001b98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba0:	d102      	bne.n	8001ba8 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d1f2      	bne.n	8001b8e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ba8:	4b0f      	ldr	r3, [pc, #60]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001baa:	695b      	ldr	r3, [r3, #20]
 8001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bb4:	d110      	bne.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bb6:	2303      	movs	r3, #3
 8001bb8:	e00f      	b.n	8001bda <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bba:	4b0b      	ldr	r3, [pc, #44]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bc6:	d007      	beq.n	8001bd8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bc8:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001bd0:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bd6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
 8001be6:	bf00      	nop
 8001be8:	40007000 	.word	0x40007000
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	431bde83 	.word	0x431bde83

08001bf4 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	b088      	sub	sp, #32
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d101      	bne.n	8001c06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e3ca      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c06:	4b97      	ldr	r3, [pc, #604]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	f003 030c 	and.w	r3, r3, #12
 8001c0e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c10:	4b94      	ldr	r3, [pc, #592]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0303 	and.w	r3, r3, #3
 8001c18:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0310 	and.w	r3, r3, #16
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	f000 80e4 	beq.w	8001df0 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d007      	beq.n	8001c3e <HAL_RCC_OscConfig+0x4a>
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	2b0c      	cmp	r3, #12
 8001c32:	f040 808b 	bne.w	8001d4c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c36:	697b      	ldr	r3, [r7, #20]
 8001c38:	2b01      	cmp	r3, #1
 8001c3a:	f040 8087 	bne.w	8001d4c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c3e:	4b89      	ldr	r3, [pc, #548]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_RCC_OscConfig+0x62>
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d101      	bne.n	8001c56 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e3a2      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6a1a      	ldr	r2, [r3, #32]
 8001c5a:	4b82      	ldr	r3, [pc, #520]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f003 0308 	and.w	r3, r3, #8
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d004      	beq.n	8001c70 <HAL_RCC_OscConfig+0x7c>
 8001c66:	4b7f      	ldr	r3, [pc, #508]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c6e:	e005      	b.n	8001c7c <HAL_RCC_OscConfig+0x88>
 8001c70:	4b7c      	ldr	r3, [pc, #496]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c76:	091b      	lsrs	r3, r3, #4
 8001c78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d223      	bcs.n	8001cc8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f000 fd87 	bl	8002798 <RCC_SetFlashLatencyFromMSIRange>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d001      	beq.n	8001c94 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e383      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c94:	4b73      	ldr	r3, [pc, #460]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a72      	ldr	r2, [pc, #456]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001c9a:	f043 0308 	orr.w	r3, r3, #8
 8001c9e:	6013      	str	r3, [r2, #0]
 8001ca0:	4b70      	ldr	r3, [pc, #448]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a1b      	ldr	r3, [r3, #32]
 8001cac:	496d      	ldr	r1, [pc, #436]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cb2:	4b6c      	ldr	r3, [pc, #432]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	69db      	ldr	r3, [r3, #28]
 8001cbe:	021b      	lsls	r3, r3, #8
 8001cc0:	4968      	ldr	r1, [pc, #416]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	604b      	str	r3, [r1, #4]
 8001cc6:	e025      	b.n	8001d14 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc8:	4b66      	ldr	r3, [pc, #408]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a65      	ldr	r2, [pc, #404]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f043 0308 	orr.w	r3, r3, #8
 8001cd2:	6013      	str	r3, [r2, #0]
 8001cd4:	4b63      	ldr	r3, [pc, #396]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a1b      	ldr	r3, [r3, #32]
 8001ce0:	4960      	ldr	r1, [pc, #384]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce6:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	69db      	ldr	r3, [r3, #28]
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	495b      	ldr	r1, [pc, #364]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d109      	bne.n	8001d14 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6a1b      	ldr	r3, [r3, #32]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 fd47 	bl	8002798 <RCC_SetFlashLatencyFromMSIRange>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d10:	2301      	movs	r3, #1
 8001d12:	e343      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d14:	f000 fc4a 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b52      	ldr	r3, [pc, #328]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	091b      	lsrs	r3, r3, #4
 8001d20:	f003 030f 	and.w	r3, r3, #15
 8001d24:	4950      	ldr	r1, [pc, #320]	; (8001e68 <HAL_RCC_OscConfig+0x274>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	f003 031f 	and.w	r3, r3, #31
 8001d2c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d30:	4a4e      	ldr	r2, [pc, #312]	; (8001e6c <HAL_RCC_OscConfig+0x278>)
 8001d32:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d34:	4b4e      	ldr	r3, [pc, #312]	; (8001e70 <HAL_RCC_OscConfig+0x27c>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f7ff fa25 	bl	8001188 <HAL_InitTick>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d42:	7bfb      	ldrb	r3, [r7, #15]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d052      	beq.n	8001dee <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d48:	7bfb      	ldrb	r3, [r7, #15]
 8001d4a:	e327      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	699b      	ldr	r3, [r3, #24]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d032      	beq.n	8001dba <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d54:	4b43      	ldr	r3, [pc, #268]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a42      	ldr	r2, [pc, #264]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001d5a:	f043 0301 	orr.w	r3, r3, #1
 8001d5e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d60:	f7ff fc02 	bl	8001568 <HAL_GetTick>
 8001d64:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d66:	e008      	b.n	8001d7a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d68:	f7ff fbfe 	bl	8001568 <HAL_GetTick>
 8001d6c:	4602      	mov	r2, r0
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	1ad3      	subs	r3, r2, r3
 8001d72:	2b02      	cmp	r3, #2
 8001d74:	d901      	bls.n	8001d7a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e310      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d7a:	4b3a      	ldr	r3, [pc, #232]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0302 	and.w	r3, r3, #2
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d0f0      	beq.n	8001d68 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d86:	4b37      	ldr	r3, [pc, #220]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	4a36      	ldr	r2, [pc, #216]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001d8c:	f043 0308 	orr.w	r3, r3, #8
 8001d90:	6013      	str	r3, [r2, #0]
 8001d92:	4b34      	ldr	r3, [pc, #208]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6a1b      	ldr	r3, [r3, #32]
 8001d9e:	4931      	ldr	r1, [pc, #196]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001da4:	4b2f      	ldr	r3, [pc, #188]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	021b      	lsls	r3, r3, #8
 8001db2:	492c      	ldr	r1, [pc, #176]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	604b      	str	r3, [r1, #4]
 8001db8:	e01a      	b.n	8001df0 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001dba:	4b2a      	ldr	r3, [pc, #168]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a29      	ldr	r2, [pc, #164]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff fbcf 	bl	8001568 <HAL_GetTick>
 8001dca:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dce:	f7ff fbcb 	bl	8001568 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b02      	cmp	r3, #2
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e2dd      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001de0:	4b20      	ldr	r3, [pc, #128]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1f0      	bne.n	8001dce <HAL_RCC_OscConfig+0x1da>
 8001dec:	e000      	b.n	8001df0 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001dee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0301 	and.w	r3, r3, #1
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d074      	beq.n	8001ee6 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001dfc:	69bb      	ldr	r3, [r7, #24]
 8001dfe:	2b08      	cmp	r3, #8
 8001e00:	d005      	beq.n	8001e0e <HAL_RCC_OscConfig+0x21a>
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b0c      	cmp	r3, #12
 8001e06:	d10e      	bne.n	8001e26 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	2b03      	cmp	r3, #3
 8001e0c:	d10b      	bne.n	8001e26 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0e:	4b15      	ldr	r3, [pc, #84]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d064      	beq.n	8001ee4 <HAL_RCC_OscConfig+0x2f0>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d160      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e22:	2301      	movs	r3, #1
 8001e24:	e2ba      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_OscConfig+0x24a>
 8001e30:	4b0c      	ldr	r3, [pc, #48]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4a0b      	ldr	r2, [pc, #44]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001e36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e3a:	6013      	str	r3, [r2, #0]
 8001e3c:	e026      	b.n	8001e8c <HAL_RCC_OscConfig+0x298>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e46:	d115      	bne.n	8001e74 <HAL_RCC_OscConfig+0x280>
 8001e48:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4a05      	ldr	r2, [pc, #20]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001e4e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b03      	ldr	r3, [pc, #12]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a02      	ldr	r2, [pc, #8]	; (8001e64 <HAL_RCC_OscConfig+0x270>)
 8001e5a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	e014      	b.n	8001e8c <HAL_RCC_OscConfig+0x298>
 8001e62:	bf00      	nop
 8001e64:	40021000 	.word	0x40021000
 8001e68:	080093b0 	.word	0x080093b0
 8001e6c:	20000004 	.word	0x20000004
 8001e70:	20000008 	.word	0x20000008
 8001e74:	4ba0      	ldr	r3, [pc, #640]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a9f      	ldr	r2, [pc, #636]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e7e:	6013      	str	r3, [r2, #0]
 8001e80:	4b9d      	ldr	r3, [pc, #628]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a9c      	ldr	r2, [pc, #624]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d013      	beq.n	8001ebc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e94:	f7ff fb68 	bl	8001568 <HAL_GetTick>
 8001e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e9a:	e008      	b.n	8001eae <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e9c:	f7ff fb64 	bl	8001568 <HAL_GetTick>
 8001ea0:	4602      	mov	r2, r0
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	1ad3      	subs	r3, r2, r3
 8001ea6:	2b64      	cmp	r3, #100	; 0x64
 8001ea8:	d901      	bls.n	8001eae <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001eaa:	2303      	movs	r3, #3
 8001eac:	e276      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eae:	4b92      	ldr	r3, [pc, #584]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d0f0      	beq.n	8001e9c <HAL_RCC_OscConfig+0x2a8>
 8001eba:	e014      	b.n	8001ee6 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ebc:	f7ff fb54 	bl	8001568 <HAL_GetTick>
 8001ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ec2:	e008      	b.n	8001ed6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec4:	f7ff fb50 	bl	8001568 <HAL_GetTick>
 8001ec8:	4602      	mov	r2, r0
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	2b64      	cmp	r3, #100	; 0x64
 8001ed0:	d901      	bls.n	8001ed6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001ed2:	2303      	movs	r3, #3
 8001ed4:	e262      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d1f0      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x2d0>
 8001ee2:	e000      	b.n	8001ee6 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 0302 	and.w	r3, r3, #2
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d060      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001ef2:	69bb      	ldr	r3, [r7, #24]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d005      	beq.n	8001f04 <HAL_RCC_OscConfig+0x310>
 8001ef8:	69bb      	ldr	r3, [r7, #24]
 8001efa:	2b0c      	cmp	r3, #12
 8001efc:	d119      	bne.n	8001f32 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	2b02      	cmp	r3, #2
 8001f02:	d116      	bne.n	8001f32 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f04:	4b7c      	ldr	r3, [pc, #496]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d005      	beq.n	8001f1c <HAL_RCC_OscConfig+0x328>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e23f      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f1c:	4b76      	ldr	r3, [pc, #472]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	691b      	ldr	r3, [r3, #16]
 8001f28:	061b      	lsls	r3, r3, #24
 8001f2a:	4973      	ldr	r1, [pc, #460]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f30:	e040      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d023      	beq.n	8001f82 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f3a:	4b6f      	ldr	r3, [pc, #444]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a6e      	ldr	r2, [pc, #440]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f46:	f7ff fb0f 	bl	8001568 <HAL_GetTick>
 8001f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f4c:	e008      	b.n	8001f60 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f4e:	f7ff fb0b 	bl	8001568 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d901      	bls.n	8001f60 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e21d      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f60:	4b65      	ldr	r3, [pc, #404]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d0f0      	beq.n	8001f4e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f6c:	4b62      	ldr	r3, [pc, #392]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	691b      	ldr	r3, [r3, #16]
 8001f78:	061b      	lsls	r3, r3, #24
 8001f7a:	495f      	ldr	r1, [pc, #380]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	604b      	str	r3, [r1, #4]
 8001f80:	e018      	b.n	8001fb4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f82:	4b5d      	ldr	r3, [pc, #372]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	4a5c      	ldr	r2, [pc, #368]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001f88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f8c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f8e:	f7ff faeb 	bl	8001568 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f94:	e008      	b.n	8001fa8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f96:	f7ff fae7 	bl	8001568 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	2b02      	cmp	r3, #2
 8001fa2:	d901      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	e1f9      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fa8:	4b53      	ldr	r3, [pc, #332]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1f0      	bne.n	8001f96 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d03c      	beq.n	800203a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	695b      	ldr	r3, [r3, #20]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d01c      	beq.n	8002002 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fc8:	4b4b      	ldr	r3, [pc, #300]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001fca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fce:	4a4a      	ldr	r2, [pc, #296]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001fd0:	f043 0301 	orr.w	r3, r3, #1
 8001fd4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fd8:	f7ff fac6 	bl	8001568 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7ff fac2 	bl	8001568 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e1d4      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ff2:	4b41      	ldr	r3, [pc, #260]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8001ff4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ff8:	f003 0302 	and.w	r3, r3, #2
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d0ef      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x3ec>
 8002000:	e01b      	b.n	800203a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002002:	4b3d      	ldr	r3, [pc, #244]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8002004:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002008:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 800200a:	f023 0301 	bic.w	r3, r3, #1
 800200e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002012:	f7ff faa9 	bl	8001568 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201a:	f7ff faa5 	bl	8001568 <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1b7      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800202c:	4b32      	ldr	r3, [pc, #200]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 800202e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d1ef      	bne.n	800201a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f003 0304 	and.w	r3, r3, #4
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 80a6 	beq.w	8002194 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002048:	2300      	movs	r3, #0
 800204a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800204c:	4b2a      	ldr	r3, [pc, #168]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 800204e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d10d      	bne.n	8002074 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002058:	4b27      	ldr	r3, [pc, #156]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 800205a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800205c:	4a26      	ldr	r2, [pc, #152]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 800205e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002062:	6593      	str	r3, [r2, #88]	; 0x58
 8002064:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 8002066:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002068:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800206c:	60bb      	str	r3, [r7, #8]
 800206e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002070:	2301      	movs	r3, #1
 8002072:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002074:	4b21      	ldr	r3, [pc, #132]	; (80020fc <HAL_RCC_OscConfig+0x508>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207c:	2b00      	cmp	r3, #0
 800207e:	d118      	bne.n	80020b2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <HAL_RCC_OscConfig+0x508>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	4a1d      	ldr	r2, [pc, #116]	; (80020fc <HAL_RCC_OscConfig+0x508>)
 8002086:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800208a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800208c:	f7ff fa6c 	bl	8001568 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002094:	f7ff fa68 	bl	8001568 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e17a      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <HAL_RCC_OscConfig+0x508>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d0f0      	beq.n	8002094 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	689b      	ldr	r3, [r3, #8]
 80020b6:	2b01      	cmp	r3, #1
 80020b8:	d108      	bne.n	80020cc <HAL_RCC_OscConfig+0x4d8>
 80020ba:	4b0f      	ldr	r3, [pc, #60]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	4a0d      	ldr	r2, [pc, #52]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 80020c2:	f043 0301 	orr.w	r3, r3, #1
 80020c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020ca:	e029      	b.n	8002120 <HAL_RCC_OscConfig+0x52c>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	2b05      	cmp	r3, #5
 80020d2:	d115      	bne.n	8002100 <HAL_RCC_OscConfig+0x50c>
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 80020d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020da:	4a07      	ldr	r2, [pc, #28]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 80020dc:	f043 0304 	orr.w	r3, r3, #4
 80020e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020e4:	4b04      	ldr	r3, [pc, #16]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 80020e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ea:	4a03      	ldr	r2, [pc, #12]	; (80020f8 <HAL_RCC_OscConfig+0x504>)
 80020ec:	f043 0301 	orr.w	r3, r3, #1
 80020f0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80020f4:	e014      	b.n	8002120 <HAL_RCC_OscConfig+0x52c>
 80020f6:	bf00      	nop
 80020f8:	40021000 	.word	0x40021000
 80020fc:	40007000 	.word	0x40007000
 8002100:	4b9c      	ldr	r3, [pc, #624]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002106:	4a9b      	ldr	r2, [pc, #620]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002108:	f023 0301 	bic.w	r3, r3, #1
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002110:	4b98      	ldr	r3, [pc, #608]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	4a97      	ldr	r2, [pc, #604]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002118:	f023 0304 	bic.w	r3, r3, #4
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	689b      	ldr	r3, [r3, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d016      	beq.n	8002156 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002128:	f7ff fa1e 	bl	8001568 <HAL_GetTick>
 800212c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800212e:	e00a      	b.n	8002146 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7ff fa1a 	bl	8001568 <HAL_GetTick>
 8002134:	4602      	mov	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	f241 3288 	movw	r2, #5000	; 0x1388
 800213e:	4293      	cmp	r3, r2
 8002140:	d901      	bls.n	8002146 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002142:	2303      	movs	r3, #3
 8002144:	e12a      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002146:	4b8b      	ldr	r3, [pc, #556]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002148:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214c:	f003 0302 	and.w	r3, r3, #2
 8002150:	2b00      	cmp	r3, #0
 8002152:	d0ed      	beq.n	8002130 <HAL_RCC_OscConfig+0x53c>
 8002154:	e015      	b.n	8002182 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002156:	f7ff fa07 	bl	8001568 <HAL_GetTick>
 800215a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800215c:	e00a      	b.n	8002174 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215e:	f7ff fa03 	bl	8001568 <HAL_GetTick>
 8002162:	4602      	mov	r2, r0
 8002164:	693b      	ldr	r3, [r7, #16]
 8002166:	1ad3      	subs	r3, r2, r3
 8002168:	f241 3288 	movw	r2, #5000	; 0x1388
 800216c:	4293      	cmp	r3, r2
 800216e:	d901      	bls.n	8002174 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002170:	2303      	movs	r3, #3
 8002172:	e113      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002174:	4b7f      	ldr	r3, [pc, #508]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800217a:	f003 0302 	and.w	r3, r3, #2
 800217e:	2b00      	cmp	r3, #0
 8002180:	d1ed      	bne.n	800215e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002182:	7ffb      	ldrb	r3, [r7, #31]
 8002184:	2b01      	cmp	r3, #1
 8002186:	d105      	bne.n	8002194 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002188:	4b7a      	ldr	r3, [pc, #488]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 800218a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218c:	4a79      	ldr	r2, [pc, #484]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 800218e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002192:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 80fe 	beq.w	800239a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a2:	2b02      	cmp	r3, #2
 80021a4:	f040 80d0 	bne.w	8002348 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021a8:	4b72      	ldr	r3, [pc, #456]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	f003 0203 	and.w	r2, r3, #3
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	429a      	cmp	r2, r3
 80021ba:	d130      	bne.n	800221e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	3b01      	subs	r3, #1
 80021c8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d127      	bne.n	800221e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021ce:	697b      	ldr	r3, [r7, #20]
 80021d0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021d8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021da:	429a      	cmp	r2, r3
 80021dc:	d11f      	bne.n	800221e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80021de:	697b      	ldr	r3, [r7, #20]
 80021e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e4:	687a      	ldr	r2, [r7, #4]
 80021e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021e8:	2a07      	cmp	r2, #7
 80021ea:	bf14      	ite	ne
 80021ec:	2201      	movne	r2, #1
 80021ee:	2200      	moveq	r2, #0
 80021f0:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d113      	bne.n	800221e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002200:	085b      	lsrs	r3, r3, #1
 8002202:	3b01      	subs	r3, #1
 8002204:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d109      	bne.n	800221e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002214:	085b      	lsrs	r3, r3, #1
 8002216:	3b01      	subs	r3, #1
 8002218:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800221a:	429a      	cmp	r2, r3
 800221c:	d06e      	beq.n	80022fc <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	2b0c      	cmp	r3, #12
 8002222:	d069      	beq.n	80022f8 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002224:	4b53      	ldr	r3, [pc, #332]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d105      	bne.n	800223c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002230:	4b50      	ldr	r3, [pc, #320]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e0ad      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002240:	4b4c      	ldr	r3, [pc, #304]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4a4b      	ldr	r2, [pc, #300]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002246:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800224a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800224c:	f7ff f98c 	bl	8001568 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7ff f988 	bl	8001568 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e09a      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002266:	4b43      	ldr	r3, [pc, #268]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002272:	4b40      	ldr	r3, [pc, #256]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002274:	68da      	ldr	r2, [r3, #12]
 8002276:	4b40      	ldr	r3, [pc, #256]	; (8002378 <HAL_RCC_OscConfig+0x784>)
 8002278:	4013      	ands	r3, r2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800227e:	687a      	ldr	r2, [r7, #4]
 8002280:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002282:	3a01      	subs	r2, #1
 8002284:	0112      	lsls	r2, r2, #4
 8002286:	4311      	orrs	r1, r2
 8002288:	687a      	ldr	r2, [r7, #4]
 800228a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800228c:	0212      	lsls	r2, r2, #8
 800228e:	4311      	orrs	r1, r2
 8002290:	687a      	ldr	r2, [r7, #4]
 8002292:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002294:	0852      	lsrs	r2, r2, #1
 8002296:	3a01      	subs	r2, #1
 8002298:	0552      	lsls	r2, r2, #21
 800229a:	4311      	orrs	r1, r2
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022a0:	0852      	lsrs	r2, r2, #1
 80022a2:	3a01      	subs	r2, #1
 80022a4:	0652      	lsls	r2, r2, #25
 80022a6:	4311      	orrs	r1, r2
 80022a8:	687a      	ldr	r2, [r7, #4]
 80022aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022ac:	0912      	lsrs	r2, r2, #4
 80022ae:	0452      	lsls	r2, r2, #17
 80022b0:	430a      	orrs	r2, r1
 80022b2:	4930      	ldr	r1, [pc, #192]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 80022b4:	4313      	orrs	r3, r2
 80022b6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022b8:	4b2e      	ldr	r3, [pc, #184]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a2d      	ldr	r2, [pc, #180]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 80022be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022c2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80022c4:	4b2b      	ldr	r3, [pc, #172]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 80022c6:	68db      	ldr	r3, [r3, #12]
 80022c8:	4a2a      	ldr	r2, [pc, #168]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 80022ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022ce:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022d0:	f7ff f94a 	bl	8001568 <HAL_GetTick>
 80022d4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022d6:	e008      	b.n	80022ea <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d8:	f7ff f946 	bl	8001568 <HAL_GetTick>
 80022dc:	4602      	mov	r2, r0
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	1ad3      	subs	r3, r2, r3
 80022e2:	2b02      	cmp	r3, #2
 80022e4:	d901      	bls.n	80022ea <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80022e6:	2303      	movs	r3, #3
 80022e8:	e058      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ea:	4b22      	ldr	r3, [pc, #136]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d0f0      	beq.n	80022d8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022f6:	e050      	b.n	800239a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80022f8:	2301      	movs	r3, #1
 80022fa:	e04f      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002304:	2b00      	cmp	r3, #0
 8002306:	d148      	bne.n	800239a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002308:	4b1a      	ldr	r3, [pc, #104]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a19      	ldr	r2, [pc, #100]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 800230e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002312:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002314:	4b17      	ldr	r3, [pc, #92]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4a16      	ldr	r2, [pc, #88]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 800231a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800231e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002320:	f7ff f922 	bl	8001568 <HAL_GetTick>
 8002324:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002326:	e008      	b.n	800233a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002328:	f7ff f91e 	bl	8001568 <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	693b      	ldr	r3, [r7, #16]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	2b02      	cmp	r3, #2
 8002334:	d901      	bls.n	800233a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002336:	2303      	movs	r3, #3
 8002338:	e030      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800233a:	4b0e      	ldr	r3, [pc, #56]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d0f0      	beq.n	8002328 <HAL_RCC_OscConfig+0x734>
 8002346:	e028      	b.n	800239a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002348:	69bb      	ldr	r3, [r7, #24]
 800234a:	2b0c      	cmp	r3, #12
 800234c:	d023      	beq.n	8002396 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800234e:	4b09      	ldr	r3, [pc, #36]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a08      	ldr	r2, [pc, #32]	; (8002374 <HAL_RCC_OscConfig+0x780>)
 8002354:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002358:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7ff f905 	bl	8001568 <HAL_GetTick>
 800235e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002360:	e00c      	b.n	800237c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002362:	f7ff f901 	bl	8001568 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d905      	bls.n	800237c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e013      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
 8002374:	40021000 	.word	0x40021000
 8002378:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800237c:	4b09      	ldr	r3, [pc, #36]	; (80023a4 <HAL_RCC_OscConfig+0x7b0>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002384:	2b00      	cmp	r3, #0
 8002386:	d1ec      	bne.n	8002362 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002388:	4b06      	ldr	r3, [pc, #24]	; (80023a4 <HAL_RCC_OscConfig+0x7b0>)
 800238a:	68da      	ldr	r2, [r3, #12]
 800238c:	4905      	ldr	r1, [pc, #20]	; (80023a4 <HAL_RCC_OscConfig+0x7b0>)
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_RCC_OscConfig+0x7b4>)
 8002390:	4013      	ands	r3, r2
 8002392:	60cb      	str	r3, [r1, #12]
 8002394:	e001      	b.n	800239a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e000      	b.n	800239c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800239a:	2300      	movs	r3, #0
}
 800239c:	4618      	mov	r0, r3
 800239e:	3720      	adds	r7, #32
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	40021000 	.word	0x40021000
 80023a8:	feeefffc 	.word	0xfeeefffc

080023ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d101      	bne.n	80023c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e0e7      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023c0:	4b75      	ldr	r3, [pc, #468]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0307 	and.w	r3, r3, #7
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	429a      	cmp	r2, r3
 80023cc:	d910      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ce:	4b72      	ldr	r3, [pc, #456]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f023 0207 	bic.w	r2, r3, #7
 80023d6:	4970      	ldr	r1, [pc, #448]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	4313      	orrs	r3, r2
 80023dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023de:	4b6e      	ldr	r3, [pc, #440]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d001      	beq.n	80023f0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e0cf      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f003 0302 	and.w	r3, r3, #2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d010      	beq.n	800241e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	4b66      	ldr	r3, [pc, #408]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002408:	429a      	cmp	r2, r3
 800240a:	d908      	bls.n	800241e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800240c:	4b63      	ldr	r3, [pc, #396]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	4960      	ldr	r1, [pc, #384]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800241a:	4313      	orrs	r3, r2
 800241c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d04c      	beq.n	80024c4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d107      	bne.n	8002442 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002432:	4b5a      	ldr	r3, [pc, #360]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800243a:	2b00      	cmp	r3, #0
 800243c:	d121      	bne.n	8002482 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e0a6      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	2b02      	cmp	r3, #2
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800244a:	4b54      	ldr	r3, [pc, #336]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d115      	bne.n	8002482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e09a      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d107      	bne.n	8002472 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002462:	4b4e      	ldr	r3, [pc, #312]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d109      	bne.n	8002482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	e08e      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002472:	4b4a      	ldr	r3, [pc, #296]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247a:	2b00      	cmp	r3, #0
 800247c:	d101      	bne.n	8002482 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e086      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002482:	4b46      	ldr	r3, [pc, #280]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002484:	689b      	ldr	r3, [r3, #8]
 8002486:	f023 0203 	bic.w	r2, r3, #3
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	4943      	ldr	r1, [pc, #268]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002490:	4313      	orrs	r3, r2
 8002492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002494:	f7ff f868 	bl	8001568 <HAL_GetTick>
 8002498:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	e00a      	b.n	80024b2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800249c:	f7ff f864 	bl	8001568 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80024aa:	4293      	cmp	r3, r2
 80024ac:	d901      	bls.n	80024b2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024ae:	2303      	movs	r3, #3
 80024b0:	e06e      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024b2:	4b3a      	ldr	r3, [pc, #232]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f003 020c 	and.w	r2, r3, #12
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d1eb      	bne.n	800249c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f003 0302 	and.w	r3, r3, #2
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d010      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689a      	ldr	r2, [r3, #8]
 80024d4:	4b31      	ldr	r3, [pc, #196]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024dc:	429a      	cmp	r2, r3
 80024de:	d208      	bcs.n	80024f2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024e0:	4b2e      	ldr	r3, [pc, #184]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	492b      	ldr	r1, [pc, #172]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024f2:	4b29      	ldr	r3, [pc, #164]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d210      	bcs.n	8002522 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002500:	4b25      	ldr	r3, [pc, #148]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f023 0207 	bic.w	r2, r3, #7
 8002508:	4923      	ldr	r1, [pc, #140]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	4313      	orrs	r3, r2
 800250e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002510:	4b21      	ldr	r3, [pc, #132]	; (8002598 <HAL_RCC_ClockConfig+0x1ec>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0307 	and.w	r3, r3, #7
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	429a      	cmp	r2, r3
 800251c:	d001      	beq.n	8002522 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800251e:	2301      	movs	r3, #1
 8002520:	e036      	b.n	8002590 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0304 	and.w	r3, r3, #4
 800252a:	2b00      	cmp	r3, #0
 800252c:	d008      	beq.n	8002540 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800252e:	4b1b      	ldr	r3, [pc, #108]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	68db      	ldr	r3, [r3, #12]
 800253a:	4918      	ldr	r1, [pc, #96]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800253c:	4313      	orrs	r3, r2
 800253e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	2b00      	cmp	r3, #0
 800254a:	d009      	beq.n	8002560 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800254c:	4b13      	ldr	r3, [pc, #76]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	691b      	ldr	r3, [r3, #16]
 8002558:	00db      	lsls	r3, r3, #3
 800255a:	4910      	ldr	r1, [pc, #64]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	4313      	orrs	r3, r2
 800255e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002560:	f000 f824 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8002564:	4602      	mov	r2, r0
 8002566:	4b0d      	ldr	r3, [pc, #52]	; (800259c <HAL_RCC_ClockConfig+0x1f0>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	091b      	lsrs	r3, r3, #4
 800256c:	f003 030f 	and.w	r3, r3, #15
 8002570:	490b      	ldr	r1, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x1f4>)
 8002572:	5ccb      	ldrb	r3, [r1, r3]
 8002574:	f003 031f 	and.w	r3, r3, #31
 8002578:	fa22 f303 	lsr.w	r3, r2, r3
 800257c:	4a09      	ldr	r2, [pc, #36]	; (80025a4 <HAL_RCC_ClockConfig+0x1f8>)
 800257e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002580:	4b09      	ldr	r3, [pc, #36]	; (80025a8 <HAL_RCC_ClockConfig+0x1fc>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4618      	mov	r0, r3
 8002586:	f7fe fdff 	bl	8001188 <HAL_InitTick>
 800258a:	4603      	mov	r3, r0
 800258c:	72fb      	strb	r3, [r7, #11]

  return status;
 800258e:	7afb      	ldrb	r3, [r7, #11]
}
 8002590:	4618      	mov	r0, r3
 8002592:	3710      	adds	r7, #16
 8002594:	46bd      	mov	sp, r7
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40022000 	.word	0x40022000
 800259c:	40021000 	.word	0x40021000
 80025a0:	080093b0 	.word	0x080093b0
 80025a4:	20000004 	.word	0x20000004
 80025a8:	20000008 	.word	0x20000008

080025ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b089      	sub	sp, #36	; 0x24
 80025b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	2300      	movs	r3, #0
 80025b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025ba:	4b3e      	ldr	r3, [pc, #248]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f003 030c 	and.w	r3, r3, #12
 80025c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025c4:	4b3b      	ldr	r3, [pc, #236]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80025ce:	693b      	ldr	r3, [r7, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d005      	beq.n	80025e0 <HAL_RCC_GetSysClockFreq+0x34>
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	2b0c      	cmp	r3, #12
 80025d8:	d121      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d11e      	bne.n	800261e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80025e0:	4b34      	ldr	r3, [pc, #208]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80025ec:	4b31      	ldr	r3, [pc, #196]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025f2:	0a1b      	lsrs	r3, r3, #8
 80025f4:	f003 030f 	and.w	r3, r3, #15
 80025f8:	61fb      	str	r3, [r7, #28]
 80025fa:	e005      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80025fc:	4b2d      	ldr	r3, [pc, #180]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002608:	4a2b      	ldr	r2, [pc, #172]	; (80026b8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002610:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d10d      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800261c:	e00a      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800261e:	693b      	ldr	r3, [r7, #16]
 8002620:	2b04      	cmp	r3, #4
 8002622:	d102      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002624:	4b25      	ldr	r3, [pc, #148]	; (80026bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002626:	61bb      	str	r3, [r7, #24]
 8002628:	e004      	b.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	2b08      	cmp	r3, #8
 800262e:	d101      	bne.n	8002634 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002630:	4b23      	ldr	r3, [pc, #140]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002632:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	2b0c      	cmp	r3, #12
 8002638:	d134      	bne.n	80026a4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800263a:	4b1e      	ldr	r3, [pc, #120]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800263c:	68db      	ldr	r3, [r3, #12]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d003      	beq.n	8002652 <HAL_RCC_GetSysClockFreq+0xa6>
 800264a:	68bb      	ldr	r3, [r7, #8]
 800264c:	2b03      	cmp	r3, #3
 800264e:	d003      	beq.n	8002658 <HAL_RCC_GetSysClockFreq+0xac>
 8002650:	e005      	b.n	800265e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002652:	4b1a      	ldr	r3, [pc, #104]	; (80026bc <HAL_RCC_GetSysClockFreq+0x110>)
 8002654:	617b      	str	r3, [r7, #20]
      break;
 8002656:	e005      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002658:	4b19      	ldr	r3, [pc, #100]	; (80026c0 <HAL_RCC_GetSysClockFreq+0x114>)
 800265a:	617b      	str	r3, [r7, #20]
      break;
 800265c:	e002      	b.n	8002664 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	617b      	str	r3, [r7, #20]
      break;
 8002662:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002664:	4b13      	ldr	r3, [pc, #76]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 0307 	and.w	r3, r3, #7
 800266e:	3301      	adds	r3, #1
 8002670:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002672:	4b10      	ldr	r3, [pc, #64]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002674:	68db      	ldr	r3, [r3, #12]
 8002676:	0a1b      	lsrs	r3, r3, #8
 8002678:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	fb03 f202 	mul.w	r2, r3, r2
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800268a:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <HAL_RCC_GetSysClockFreq+0x108>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	0e5b      	lsrs	r3, r3, #25
 8002690:	f003 0303 	and.w	r3, r3, #3
 8002694:	3301      	adds	r3, #1
 8002696:	005b      	lsls	r3, r3, #1
 8002698:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026a4:	69bb      	ldr	r3, [r7, #24]
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3724      	adds	r7, #36	; 0x24
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000
 80026b8:	080093c8 	.word	0x080093c8
 80026bc:	00f42400 	.word	0x00f42400
 80026c0:	007a1200 	.word	0x007a1200

080026c4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026c8:	4b03      	ldr	r3, [pc, #12]	; (80026d8 <HAL_RCC_GetHCLKFreq+0x14>)
 80026ca:	681b      	ldr	r3, [r3, #0]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	46bd      	mov	sp, r7
 80026d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d4:	4770      	bx	lr
 80026d6:	bf00      	nop
 80026d8:	20000004 	.word	0x20000004

080026dc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80026e0:	f7ff fff0 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 80026e4:	4602      	mov	r2, r0
 80026e6:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	0a1b      	lsrs	r3, r3, #8
 80026ec:	f003 0307 	and.w	r3, r3, #7
 80026f0:	4904      	ldr	r1, [pc, #16]	; (8002704 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026f2:	5ccb      	ldrb	r3, [r1, r3]
 80026f4:	f003 031f 	and.w	r3, r3, #31
 80026f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	bd80      	pop	{r7, pc}
 8002700:	40021000 	.word	0x40021000
 8002704:	080093c0 	.word	0x080093c0

08002708 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800270c:	f7ff ffda 	bl	80026c4 <HAL_RCC_GetHCLKFreq>
 8002710:	4602      	mov	r2, r0
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	0adb      	lsrs	r3, r3, #11
 8002718:	f003 0307 	and.w	r3, r3, #7
 800271c:	4904      	ldr	r1, [pc, #16]	; (8002730 <HAL_RCC_GetPCLK2Freq+0x28>)
 800271e:	5ccb      	ldrb	r3, [r1, r3]
 8002720:	f003 031f 	and.w	r3, r3, #31
 8002724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002728:	4618      	mov	r0, r3
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40021000 	.word	0x40021000
 8002730:	080093c0 	.word	0x080093c0

08002734 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002734:	b480      	push	{r7}
 8002736:	b083      	sub	sp, #12
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	220f      	movs	r2, #15
 8002742:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002744:	4b12      	ldr	r3, [pc, #72]	; (8002790 <HAL_RCC_GetClockConfig+0x5c>)
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f003 0203 	and.w	r2, r3, #3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002750:	4b0f      	ldr	r3, [pc, #60]	; (8002790 <HAL_RCC_GetClockConfig+0x5c>)
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800275c:	4b0c      	ldr	r3, [pc, #48]	; (8002790 <HAL_RCC_GetClockConfig+0x5c>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002768:	4b09      	ldr	r3, [pc, #36]	; (8002790 <HAL_RCC_GetClockConfig+0x5c>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	08db      	lsrs	r3, r3, #3
 800276e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002776:	4b07      	ldr	r3, [pc, #28]	; (8002794 <HAL_RCC_GetClockConfig+0x60>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0207 	and.w	r2, r3, #7
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	601a      	str	r2, [r3, #0]
}
 8002782:	bf00      	nop
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40021000 	.word	0x40021000
 8002794:	40022000 	.word	0x40022000

08002798 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027a0:	2300      	movs	r3, #0
 80027a2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027a4:	4b2a      	ldr	r3, [pc, #168]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d003      	beq.n	80027b8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027b0:	f7ff f9bc 	bl	8001b2c <HAL_PWREx_GetVoltageRange>
 80027b4:	6178      	str	r0, [r7, #20]
 80027b6:	e014      	b.n	80027e2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027b8:	4b25      	ldr	r3, [pc, #148]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027bc:	4a24      	ldr	r2, [pc, #144]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027c2:	6593      	str	r3, [r2, #88]	; 0x58
 80027c4:	4b22      	ldr	r3, [pc, #136]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80027d0:	f7ff f9ac 	bl	8001b2c <HAL_PWREx_GetVoltageRange>
 80027d4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80027d6:	4b1e      	ldr	r3, [pc, #120]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027da:	4a1d      	ldr	r2, [pc, #116]	; (8002850 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027e0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80027e2:	697b      	ldr	r3, [r7, #20]
 80027e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027e8:	d10b      	bne.n	8002802 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2b80      	cmp	r3, #128	; 0x80
 80027ee:	d919      	bls.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2ba0      	cmp	r3, #160	; 0xa0
 80027f4:	d902      	bls.n	80027fc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80027f6:	2302      	movs	r3, #2
 80027f8:	613b      	str	r3, [r7, #16]
 80027fa:	e013      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
 8002800:	e010      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b80      	cmp	r3, #128	; 0x80
 8002806:	d902      	bls.n	800280e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002808:	2303      	movs	r3, #3
 800280a:	613b      	str	r3, [r7, #16]
 800280c:	e00a      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b80      	cmp	r3, #128	; 0x80
 8002812:	d102      	bne.n	800281a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002814:	2302      	movs	r3, #2
 8002816:	613b      	str	r3, [r7, #16]
 8002818:	e004      	b.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2b70      	cmp	r3, #112	; 0x70
 800281e:	d101      	bne.n	8002824 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002820:	2301      	movs	r3, #1
 8002822:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002824:	4b0b      	ldr	r3, [pc, #44]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f023 0207 	bic.w	r2, r3, #7
 800282c:	4909      	ldr	r1, [pc, #36]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800282e:	693b      	ldr	r3, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002834:	4b07      	ldr	r3, [pc, #28]	; (8002854 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0307 	and.w	r3, r3, #7
 800283c:	693a      	ldr	r2, [r7, #16]
 800283e:	429a      	cmp	r2, r3
 8002840:	d001      	beq.n	8002846 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	e000      	b.n	8002848 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3718      	adds	r7, #24
 800284c:	46bd      	mov	sp, r7
 800284e:	bd80      	pop	{r7, pc}
 8002850:	40021000 	.word	0x40021000
 8002854:	40022000 	.word	0x40022000

08002858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b086      	sub	sp, #24
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002860:	2300      	movs	r3, #0
 8002862:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002864:	2300      	movs	r3, #0
 8002866:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002870:	2b00      	cmp	r3, #0
 8002872:	d041      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002878:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800287c:	d02a      	beq.n	80028d4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800287e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002882:	d824      	bhi.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002884:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002888:	d008      	beq.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800288a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800288e:	d81e      	bhi.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002894:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002898:	d010      	beq.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x64>
 800289a:	e018      	b.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800289c:	4b86      	ldr	r3, [pc, #536]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4a85      	ldr	r2, [pc, #532]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028a6:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028a8:	e015      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	3304      	adds	r3, #4
 80028ae:	2100      	movs	r1, #0
 80028b0:	4618      	mov	r0, r3
 80028b2:	f000 fabb 	bl	8002e2c <RCCEx_PLLSAI1_Config>
 80028b6:	4603      	mov	r3, r0
 80028b8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028ba:	e00c      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	3320      	adds	r3, #32
 80028c0:	2100      	movs	r1, #0
 80028c2:	4618      	mov	r0, r3
 80028c4:	f000 fba6 	bl	8003014 <RCCEx_PLLSAI2_Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028cc:	e003      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028ce:	2301      	movs	r3, #1
 80028d0:	74fb      	strb	r3, [r7, #19]
      break;
 80028d2:	e000      	b.n	80028d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80028d4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028d6:	7cfb      	ldrb	r3, [r7, #19]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10b      	bne.n	80028f4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80028dc:	4b76      	ldr	r3, [pc, #472]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028ea:	4973      	ldr	r1, [pc, #460]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028ec:	4313      	orrs	r3, r2
 80028ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028f2:	e001      	b.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f4:	7cfb      	ldrb	r3, [r7, #19]
 80028f6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d041      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002908:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800290c:	d02a      	beq.n	8002964 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800290e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002912:	d824      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002914:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002918:	d008      	beq.n	800292c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800291a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800291e:	d81e      	bhi.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00a      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002924:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002928:	d010      	beq.n	800294c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800292a:	e018      	b.n	800295e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800292c:	4b62      	ldr	r3, [pc, #392]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292e:	68db      	ldr	r3, [r3, #12]
 8002930:	4a61      	ldr	r2, [pc, #388]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002936:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002938:	e015      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	3304      	adds	r3, #4
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f000 fa73 	bl	8002e2c <RCCEx_PLLSAI1_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800294a:	e00c      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3320      	adds	r3, #32
 8002950:	2100      	movs	r1, #0
 8002952:	4618      	mov	r0, r3
 8002954:	f000 fb5e 	bl	8003014 <RCCEx_PLLSAI2_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800295c:	e003      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	74fb      	strb	r3, [r7, #19]
      break;
 8002962:	e000      	b.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002964:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002966:	7cfb      	ldrb	r3, [r7, #19]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d10b      	bne.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800296c:	4b52      	ldr	r3, [pc, #328]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002972:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800297a:	494f      	ldr	r1, [pc, #316]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297c:	4313      	orrs	r3, r2
 800297e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002982:	e001      	b.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002984:	7cfb      	ldrb	r3, [r7, #19]
 8002986:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 80a0 	beq.w	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002996:	2300      	movs	r3, #0
 8002998:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800299a:	4b47      	ldr	r3, [pc, #284]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800299e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029a6:	2301      	movs	r3, #1
 80029a8:	e000      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029aa:	2300      	movs	r3, #0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d00d      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029b0:	4b41      	ldr	r3, [pc, #260]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029b4:	4a40      	ldr	r2, [pc, #256]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029ba:	6593      	str	r3, [r2, #88]	; 0x58
 80029bc:	4b3e      	ldr	r3, [pc, #248]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029c4:	60bb      	str	r3, [r7, #8]
 80029c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80029c8:	2301      	movs	r3, #1
 80029ca:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80029cc:	4b3b      	ldr	r3, [pc, #236]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a3a      	ldr	r2, [pc, #232]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029d6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029d8:	f7fe fdc6 	bl	8001568 <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029de:	e009      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029e0:	f7fe fdc2 	bl	8001568 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d902      	bls.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	74fb      	strb	r3, [r7, #19]
        break;
 80029f2:	e005      	b.n	8002a00 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80029f4:	4b31      	ldr	r3, [pc, #196]	; (8002abc <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d0ef      	beq.n	80029e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a00:	7cfb      	ldrb	r3, [r7, #19]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d15c      	bne.n	8002ac0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a06:	4b2c      	ldr	r3, [pc, #176]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a10:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d01f      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d019      	beq.n	8002a58 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a24:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a30:	4b21      	ldr	r3, [pc, #132]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a36:	4a20      	ldr	r2, [pc, #128]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a40:	4b1d      	ldr	r3, [pc, #116]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a46:	4a1c      	ldr	r2, [pc, #112]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a50:	4a19      	ldr	r2, [pc, #100]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a52:	697b      	ldr	r3, [r7, #20]
 8002a54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d016      	beq.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a62:	f7fe fd81 	bl	8001568 <HAL_GetTick>
 8002a66:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a68:	e00b      	b.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a6a:	f7fe fd7d 	bl	8001568 <HAL_GetTick>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	1ad3      	subs	r3, r2, r3
 8002a74:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a78:	4293      	cmp	r3, r2
 8002a7a:	d902      	bls.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002a7c:	2303      	movs	r3, #3
 8002a7e:	74fb      	strb	r3, [r7, #19]
            break;
 8002a80:	e006      	b.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a82:	4b0d      	ldr	r3, [pc, #52]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a88:	f003 0302 	and.w	r3, r3, #2
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d0ec      	beq.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a90:	7cfb      	ldrb	r3, [r7, #19]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10c      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a96:	4b08      	ldr	r3, [pc, #32]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a9c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002aa6:	4904      	ldr	r1, [pc, #16]	; (8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002aae:	e009      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ab0:	7cfb      	ldrb	r3, [r7, #19]
 8002ab2:	74bb      	strb	r3, [r7, #18]
 8002ab4:	e006      	b.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002ab6:	bf00      	nop
 8002ab8:	40021000 	.word	0x40021000
 8002abc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac0:	7cfb      	ldrb	r3, [r7, #19]
 8002ac2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ac4:	7c7b      	ldrb	r3, [r7, #17]
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d105      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aca:	4b9e      	ldr	r3, [pc, #632]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ace:	4a9d      	ldr	r2, [pc, #628]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ad0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ad4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ae2:	4b98      	ldr	r3, [pc, #608]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae8:	f023 0203 	bic.w	r2, r3, #3
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002af0:	4994      	ldr	r1, [pc, #592]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002af2:	4313      	orrs	r3, r2
 8002af4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f003 0302 	and.w	r3, r3, #2
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d00a      	beq.n	8002b1a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b04:	4b8f      	ldr	r3, [pc, #572]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	f023 020c 	bic.w	r2, r3, #12
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b12:	498c      	ldr	r1, [pc, #560]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0304 	and.w	r3, r3, #4
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d00a      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b26:	4b87      	ldr	r3, [pc, #540]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b28:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b2c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b34:	4983      	ldr	r1, [pc, #524]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0308 	and.w	r3, r3, #8
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d00a      	beq.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b48:	4b7e      	ldr	r3, [pc, #504]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b56:	497b      	ldr	r1, [pc, #492]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 0310 	and.w	r3, r3, #16
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00a      	beq.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002b6a:	4b76      	ldr	r3, [pc, #472]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b70:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b78:	4972      	ldr	r1, [pc, #456]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b7a:	4313      	orrs	r3, r2
 8002b7c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f003 0320 	and.w	r3, r3, #32
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d00a      	beq.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b8c:	4b6d      	ldr	r3, [pc, #436]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b92:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b9a:	496a      	ldr	r1, [pc, #424]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b9c:	4313      	orrs	r3, r2
 8002b9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d00a      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bae:	4b65      	ldr	r3, [pc, #404]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bbc:	4961      	ldr	r1, [pc, #388]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bbe:	4313      	orrs	r3, r2
 8002bc0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d00a      	beq.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002bd0:	4b5c      	ldr	r3, [pc, #368]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	4959      	ldr	r1, [pc, #356]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d00a      	beq.n	8002c08 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002bf2:	4b54      	ldr	r3, [pc, #336]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c00:	4950      	ldr	r1, [pc, #320]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c02:	4313      	orrs	r3, r2
 8002c04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d00a      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c14:	4b4b      	ldr	r3, [pc, #300]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c1a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c22:	4948      	ldr	r1, [pc, #288]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c24:	4313      	orrs	r3, r2
 8002c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d00a      	beq.n	8002c4c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c36:	4b43      	ldr	r3, [pc, #268]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c44:	493f      	ldr	r1, [pc, #252]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c46:	4313      	orrs	r3, r2
 8002c48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d028      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c58:	4b3a      	ldr	r3, [pc, #232]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c66:	4937      	ldr	r1, [pc, #220]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c72:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c76:	d106      	bne.n	8002c86 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c78:	4b32      	ldr	r3, [pc, #200]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a31      	ldr	r2, [pc, #196]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c7e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c82:	60d3      	str	r3, [r2, #12]
 8002c84:	e011      	b.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002c8a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c8e:	d10c      	bne.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	3304      	adds	r3, #4
 8002c94:	2101      	movs	r1, #1
 8002c96:	4618      	mov	r0, r3
 8002c98:	f000 f8c8 	bl	8002e2c <RCCEx_PLLSAI1_Config>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ca0:	7cfb      	ldrb	r3, [r7, #19]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ca6:	7cfb      	ldrb	r3, [r7, #19]
 8002ca8:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d028      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cb6:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cbc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	491f      	ldr	r1, [pc, #124]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cd4:	d106      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4a1a      	ldr	r2, [pc, #104]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ce0:	60d3      	str	r3, [r2, #12]
 8002ce2:	e011      	b.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cec:	d10c      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3304      	adds	r3, #4
 8002cf2:	2101      	movs	r1, #1
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f000 f899 	bl	8002e2c <RCCEx_PLLSAI1_Config>
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d04:	7cfb      	ldrb	r3, [r7, #19]
 8002d06:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d02b      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d14:	4b0b      	ldr	r3, [pc, #44]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d1a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d22:	4908      	ldr	r1, [pc, #32]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d24:	4313      	orrs	r3, r2
 8002d26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d2e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d32:	d109      	bne.n	8002d48 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d34:	4b03      	ldr	r3, [pc, #12]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d36:	68db      	ldr	r3, [r3, #12]
 8002d38:	4a02      	ldr	r2, [pc, #8]	; (8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d3a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d3e:	60d3      	str	r3, [r2, #12]
 8002d40:	e014      	b.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d42:	bf00      	nop
 8002d44:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d4c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2101      	movs	r1, #1
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f000 f867 	bl	8002e2c <RCCEx_PLLSAI1_Config>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d62:	7cfb      	ldrb	r3, [r7, #19]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d001      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002d68:	7cfb      	ldrb	r3, [r7, #19]
 8002d6a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d02f      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002d78:	4b2b      	ldr	r3, [pc, #172]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d86:	4928      	ldr	r1, [pc, #160]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d96:	d10d      	bne.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3304      	adds	r3, #4
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f000 f844 	bl	8002e2c <RCCEx_PLLSAI1_Config>
 8002da4:	4603      	mov	r3, r0
 8002da6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002da8:	7cfb      	ldrb	r3, [r7, #19]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d014      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dae:	7cfb      	ldrb	r3, [r7, #19]
 8002db0:	74bb      	strb	r3, [r7, #18]
 8002db2:	e011      	b.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002db8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dbc:	d10c      	bne.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	3320      	adds	r3, #32
 8002dc2:	2102      	movs	r1, #2
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f000 f925 	bl	8003014 <RCCEx_PLLSAI2_Config>
 8002dca:	4603      	mov	r3, r0
 8002dcc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002dce:	7cfb      	ldrb	r3, [r7, #19]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dd4:	7cfb      	ldrb	r3, [r7, #19]
 8002dd6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d00a      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002de4:	4b10      	ldr	r3, [pc, #64]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dea:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002df2:	490d      	ldr	r1, [pc, #52]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d00b      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e06:	4b08      	ldr	r3, [pc, #32]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e16:	4904      	ldr	r1, [pc, #16]	; (8002e28 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e1e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3718      	adds	r7, #24
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}
 8002e28:	40021000 	.word	0x40021000

08002e2c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e2c:	b580      	push	{r7, lr}
 8002e2e:	b084      	sub	sp, #16
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	6078      	str	r0, [r7, #4]
 8002e34:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e3a:	4b75      	ldr	r3, [pc, #468]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	f003 0303 	and.w	r3, r3, #3
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d018      	beq.n	8002e78 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e46:	4b72      	ldr	r3, [pc, #456]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e48:	68db      	ldr	r3, [r3, #12]
 8002e4a:	f003 0203 	and.w	r2, r3, #3
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d10d      	bne.n	8002e72 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
       ||
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d009      	beq.n	8002e72 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e5e:	4b6c      	ldr	r3, [pc, #432]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e60:	68db      	ldr	r3, [r3, #12]
 8002e62:	091b      	lsrs	r3, r3, #4
 8002e64:	f003 0307 	and.w	r3, r3, #7
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	685b      	ldr	r3, [r3, #4]
       ||
 8002e6e:	429a      	cmp	r2, r3
 8002e70:	d047      	beq.n	8002f02 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002e72:	2301      	movs	r3, #1
 8002e74:	73fb      	strb	r3, [r7, #15]
 8002e76:	e044      	b.n	8002f02 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b03      	cmp	r3, #3
 8002e7e:	d018      	beq.n	8002eb2 <RCCEx_PLLSAI1_Config+0x86>
 8002e80:	2b03      	cmp	r3, #3
 8002e82:	d825      	bhi.n	8002ed0 <RCCEx_PLLSAI1_Config+0xa4>
 8002e84:	2b01      	cmp	r3, #1
 8002e86:	d002      	beq.n	8002e8e <RCCEx_PLLSAI1_Config+0x62>
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d009      	beq.n	8002ea0 <RCCEx_PLLSAI1_Config+0x74>
 8002e8c:	e020      	b.n	8002ed0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e8e:	4b60      	ldr	r3, [pc, #384]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d11d      	bne.n	8002ed6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
 8002e9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e9e:	e01a      	b.n	8002ed6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ea0:	4b5b      	ldr	r3, [pc, #364]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d116      	bne.n	8002eda <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002eac:	2301      	movs	r3, #1
 8002eae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eb0:	e013      	b.n	8002eda <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eb2:	4b57      	ldr	r3, [pc, #348]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ebe:	4b54      	ldr	r3, [pc, #336]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d109      	bne.n	8002ede <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ece:	e006      	b.n	8002ede <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002ed0:	2301      	movs	r3, #1
 8002ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8002ed4:	e004      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ed6:	bf00      	nop
 8002ed8:	e002      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002eda:	bf00      	nop
 8002edc:	e000      	b.n	8002ee0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ede:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ee0:	7bfb      	ldrb	r3, [r7, #15]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10d      	bne.n	8002f02 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee8:	68db      	ldr	r3, [r3, #12]
 8002eea:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6819      	ldr	r1, [r3, #0]
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	011b      	lsls	r3, r3, #4
 8002efa:	430b      	orrs	r3, r1
 8002efc:	4944      	ldr	r1, [pc, #272]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f02:	7bfb      	ldrb	r3, [r7, #15]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d17d      	bne.n	8003004 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f08:	4b41      	ldr	r3, [pc, #260]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a40      	ldr	r2, [pc, #256]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f14:	f7fe fb28 	bl	8001568 <HAL_GetTick>
 8002f18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f1a:	e009      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f1c:	f7fe fb24 	bl	8001568 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d902      	bls.n	8002f30 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	73fb      	strb	r3, [r7, #15]
        break;
 8002f2e:	e005      	b.n	8002f3c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f30:	4b37      	ldr	r3, [pc, #220]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d1ef      	bne.n	8002f1c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f3c:	7bfb      	ldrb	r3, [r7, #15]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d160      	bne.n	8003004 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d111      	bne.n	8002f6c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f48:	4b31      	ldr	r3, [pc, #196]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4a:	691b      	ldr	r3, [r3, #16]
 8002f4c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f50:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	6892      	ldr	r2, [r2, #8]
 8002f58:	0211      	lsls	r1, r2, #8
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68d2      	ldr	r2, [r2, #12]
 8002f5e:	0912      	lsrs	r2, r2, #4
 8002f60:	0452      	lsls	r2, r2, #17
 8002f62:	430a      	orrs	r2, r1
 8002f64:	492a      	ldr	r1, [pc, #168]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	610b      	str	r3, [r1, #16]
 8002f6a:	e027      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d112      	bne.n	8002f98 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f72:	4b27      	ldr	r3, [pc, #156]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002f7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6892      	ldr	r2, [r2, #8]
 8002f82:	0211      	lsls	r1, r2, #8
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	6912      	ldr	r2, [r2, #16]
 8002f88:	0852      	lsrs	r2, r2, #1
 8002f8a:	3a01      	subs	r2, #1
 8002f8c:	0552      	lsls	r2, r2, #21
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	491f      	ldr	r1, [pc, #124]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	610b      	str	r3, [r1, #16]
 8002f96:	e011      	b.n	8002fbc <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f98:	4b1d      	ldr	r3, [pc, #116]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f9a:	691b      	ldr	r3, [r3, #16]
 8002f9c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fa0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fa4:	687a      	ldr	r2, [r7, #4]
 8002fa6:	6892      	ldr	r2, [r2, #8]
 8002fa8:	0211      	lsls	r1, r2, #8
 8002faa:	687a      	ldr	r2, [r7, #4]
 8002fac:	6952      	ldr	r2, [r2, #20]
 8002fae:	0852      	lsrs	r2, r2, #1
 8002fb0:	3a01      	subs	r2, #1
 8002fb2:	0652      	lsls	r2, r2, #25
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	4916      	ldr	r1, [pc, #88]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002fbc:	4b14      	ldr	r3, [pc, #80]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a13      	ldr	r2, [pc, #76]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fc2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe face 	bl	8001568 <HAL_GetTick>
 8002fcc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fce:	e009      	b.n	8002fe4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002fd0:	f7fe faca 	bl	8001568 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d902      	bls.n	8002fe4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	73fb      	strb	r3, [r7, #15]
          break;
 8002fe2:	e005      	b.n	8002ff0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002fe4:	4b0a      	ldr	r3, [pc, #40]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d0ef      	beq.n	8002fd0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002ff0:	7bfb      	ldrb	r3, [r7, #15]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d106      	bne.n	8003004 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ff6:	4b06      	ldr	r3, [pc, #24]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff8:	691a      	ldr	r2, [r3, #16]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699b      	ldr	r3, [r3, #24]
 8002ffe:	4904      	ldr	r1, [pc, #16]	; (8003010 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003000:	4313      	orrs	r3, r2
 8003002:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003004:	7bfb      	ldrb	r3, [r7, #15]
}
 8003006:	4618      	mov	r0, r3
 8003008:	3710      	adds	r7, #16
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40021000 	.word	0x40021000

08003014 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800301e:	2300      	movs	r3, #0
 8003020:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003022:	4b6a      	ldr	r3, [pc, #424]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	f003 0303 	and.w	r3, r3, #3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d018      	beq.n	8003060 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800302e:	4b67      	ldr	r3, [pc, #412]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	f003 0203 	and.w	r2, r3, #3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d10d      	bne.n	800305a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
       ||
 8003042:	2b00      	cmp	r3, #0
 8003044:	d009      	beq.n	800305a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003046:	4b61      	ldr	r3, [pc, #388]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003048:	68db      	ldr	r3, [r3, #12]
 800304a:	091b      	lsrs	r3, r3, #4
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
       ||
 8003056:	429a      	cmp	r2, r3
 8003058:	d047      	beq.n	80030ea <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	73fb      	strb	r3, [r7, #15]
 800305e:	e044      	b.n	80030ea <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b03      	cmp	r3, #3
 8003066:	d018      	beq.n	800309a <RCCEx_PLLSAI2_Config+0x86>
 8003068:	2b03      	cmp	r3, #3
 800306a:	d825      	bhi.n	80030b8 <RCCEx_PLLSAI2_Config+0xa4>
 800306c:	2b01      	cmp	r3, #1
 800306e:	d002      	beq.n	8003076 <RCCEx_PLLSAI2_Config+0x62>
 8003070:	2b02      	cmp	r3, #2
 8003072:	d009      	beq.n	8003088 <RCCEx_PLLSAI2_Config+0x74>
 8003074:	e020      	b.n	80030b8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003076:	4b55      	ldr	r3, [pc, #340]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 0302 	and.w	r3, r3, #2
 800307e:	2b00      	cmp	r3, #0
 8003080:	d11d      	bne.n	80030be <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003086:	e01a      	b.n	80030be <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003088:	4b50      	ldr	r3, [pc, #320]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003090:	2b00      	cmp	r3, #0
 8003092:	d116      	bne.n	80030c2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003098:	e013      	b.n	80030c2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800309a:	4b4c      	ldr	r3, [pc, #304]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d109      	bne.n	80030c6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030b6:	e006      	b.n	80030c6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
      break;
 80030bc:	e004      	b.n	80030c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030be:	bf00      	nop
 80030c0:	e002      	b.n	80030c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030c2:	bf00      	nop
 80030c4:	e000      	b.n	80030c8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030c6:	bf00      	nop
    }

    if(status == HAL_OK)
 80030c8:	7bfb      	ldrb	r3, [r7, #15]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d10d      	bne.n	80030ea <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80030ce:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6819      	ldr	r1, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	3b01      	subs	r3, #1
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	430b      	orrs	r3, r1
 80030e4:	4939      	ldr	r1, [pc, #228]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e6:	4313      	orrs	r3, r2
 80030e8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d167      	bne.n	80031c0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80030f0:	4b36      	ldr	r3, [pc, #216]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a35      	ldr	r2, [pc, #212]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80030fc:	f7fe fa34 	bl	8001568 <HAL_GetTick>
 8003100:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003102:	e009      	b.n	8003118 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003104:	f7fe fa30 	bl	8001568 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d902      	bls.n	8003118 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	73fb      	strb	r3, [r7, #15]
        break;
 8003116:	e005      	b.n	8003124 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003118:	4b2c      	ldr	r3, [pc, #176]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d1ef      	bne.n	8003104 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003124:	7bfb      	ldrb	r3, [r7, #15]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d14a      	bne.n	80031c0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d111      	bne.n	8003154 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003130:	4b26      	ldr	r3, [pc, #152]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003132:	695b      	ldr	r3, [r3, #20]
 8003134:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003138:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	6892      	ldr	r2, [r2, #8]
 8003140:	0211      	lsls	r1, r2, #8
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	68d2      	ldr	r2, [r2, #12]
 8003146:	0912      	lsrs	r2, r2, #4
 8003148:	0452      	lsls	r2, r2, #17
 800314a:	430a      	orrs	r2, r1
 800314c:	491f      	ldr	r1, [pc, #124]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800314e:	4313      	orrs	r3, r2
 8003150:	614b      	str	r3, [r1, #20]
 8003152:	e011      	b.n	8003178 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003154:	4b1d      	ldr	r3, [pc, #116]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800315c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	6892      	ldr	r2, [r2, #8]
 8003164:	0211      	lsls	r1, r2, #8
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	6912      	ldr	r2, [r2, #16]
 800316a:	0852      	lsrs	r2, r2, #1
 800316c:	3a01      	subs	r2, #1
 800316e:	0652      	lsls	r2, r2, #25
 8003170:	430a      	orrs	r2, r1
 8003172:	4916      	ldr	r1, [pc, #88]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 8003174:	4313      	orrs	r3, r2
 8003176:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003178:	4b14      	ldr	r3, [pc, #80]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a13      	ldr	r2, [pc, #76]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 800317e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003182:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003184:	f7fe f9f0 	bl	8001568 <HAL_GetTick>
 8003188:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800318a:	e009      	b.n	80031a0 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800318c:	f7fe f9ec 	bl	8001568 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d902      	bls.n	80031a0 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	73fb      	strb	r3, [r7, #15]
          break;
 800319e:	e005      	b.n	80031ac <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031a0:	4b0a      	ldr	r3, [pc, #40]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d0ef      	beq.n	800318c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031ac:	7bfb      	ldrb	r3, [r7, #15]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d106      	bne.n	80031c0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	4904      	ldr	r1, [pc, #16]	; (80031cc <RCCEx_PLLSAI2_Config+0x1b8>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d101      	bne.n	80031e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031de:	2301      	movs	r3, #1
 80031e0:	e049      	b.n	8003276 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e8:	b2db      	uxtb	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7fd ff44 	bl	8001084 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2202      	movs	r2, #2
 8003200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	3304      	adds	r3, #4
 800320c:	4619      	mov	r1, r3
 800320e:	4610      	mov	r0, r2
 8003210:	f000 f9d0 	bl	80035b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	2201      	movs	r2, #1
 8003250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2201      	movs	r2, #1
 8003260:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2201      	movs	r2, #1
 8003270:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003274:	2300      	movs	r3, #0
}
 8003276:	4618      	mov	r0, r3
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
	...

08003280 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003280:	b480      	push	{r7}
 8003282:	b085      	sub	sp, #20
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328e:	b2db      	uxtb	r3, r3
 8003290:	2b01      	cmp	r3, #1
 8003292:	d001      	beq.n	8003298 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	e04f      	b.n	8003338 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2202      	movs	r2, #2
 800329c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68da      	ldr	r2, [r3, #12]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	4a23      	ldr	r2, [pc, #140]	; (8003344 <HAL_TIM_Base_Start_IT+0xc4>)
 80032b6:	4293      	cmp	r3, r2
 80032b8:	d01d      	beq.n	80032f6 <HAL_TIM_Base_Start_IT+0x76>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032c2:	d018      	beq.n	80032f6 <HAL_TIM_Base_Start_IT+0x76>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a1f      	ldr	r2, [pc, #124]	; (8003348 <HAL_TIM_Base_Start_IT+0xc8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d013      	beq.n	80032f6 <HAL_TIM_Base_Start_IT+0x76>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a1e      	ldr	r2, [pc, #120]	; (800334c <HAL_TIM_Base_Start_IT+0xcc>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d00e      	beq.n	80032f6 <HAL_TIM_Base_Start_IT+0x76>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a1c      	ldr	r2, [pc, #112]	; (8003350 <HAL_TIM_Base_Start_IT+0xd0>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d009      	beq.n	80032f6 <HAL_TIM_Base_Start_IT+0x76>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a1b      	ldr	r2, [pc, #108]	; (8003354 <HAL_TIM_Base_Start_IT+0xd4>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d004      	beq.n	80032f6 <HAL_TIM_Base_Start_IT+0x76>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a19      	ldr	r2, [pc, #100]	; (8003358 <HAL_TIM_Base_Start_IT+0xd8>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d115      	bne.n	8003322 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	689a      	ldr	r2, [r3, #8]
 80032fc:	4b17      	ldr	r3, [pc, #92]	; (800335c <HAL_TIM_Base_Start_IT+0xdc>)
 80032fe:	4013      	ands	r3, r2
 8003300:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2b06      	cmp	r3, #6
 8003306:	d015      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0xb4>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800330e:	d011      	beq.n	8003334 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003320:	e008      	b.n	8003334 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
 8003332:	e000      	b.n	8003336 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003334:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003336:	2300      	movs	r3, #0
}
 8003338:	4618      	mov	r0, r3
 800333a:	3714      	adds	r7, #20
 800333c:	46bd      	mov	sp, r7
 800333e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003342:	4770      	bx	lr
 8003344:	40012c00 	.word	0x40012c00
 8003348:	40000400 	.word	0x40000400
 800334c:	40000800 	.word	0x40000800
 8003350:	40000c00 	.word	0x40000c00
 8003354:	40013400 	.word	0x40013400
 8003358:	40014000 	.word	0x40014000
 800335c:	00010007 	.word	0x00010007

08003360 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b084      	sub	sp, #16
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	691b      	ldr	r3, [r3, #16]
 8003376:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	f003 0302 	and.w	r3, r3, #2
 800337e:	2b00      	cmp	r3, #0
 8003380:	d020      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d01b      	beq.n	80033c4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f06f 0202 	mvn.w	r2, #2
 8003394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2201      	movs	r2, #1
 800339a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	699b      	ldr	r3, [r3, #24]
 80033a2:	f003 0303 	and.w	r3, r3, #3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d003      	beq.n	80033b2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033aa:	6878      	ldr	r0, [r7, #4]
 80033ac:	f000 f8e4 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 80033b0:	e005      	b.n	80033be <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f000 f8d6 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b8:	6878      	ldr	r0, [r7, #4]
 80033ba:	f000 f8e7 	bl	800358c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2200      	movs	r2, #0
 80033c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	f003 0304 	and.w	r3, r3, #4
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d020      	beq.n	8003410 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	f003 0304 	and.w	r3, r3, #4
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d01b      	beq.n	8003410 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f06f 0204 	mvn.w	r2, #4
 80033e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2202      	movs	r2, #2
 80033e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	699b      	ldr	r3, [r3, #24]
 80033ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d003      	beq.n	80033fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033f6:	6878      	ldr	r0, [r7, #4]
 80033f8:	f000 f8be 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 80033fc:	e005      	b.n	800340a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f000 f8b0 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f8c1 	bl	800358c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 0308 	and.w	r3, r3, #8
 8003416:	2b00      	cmp	r3, #0
 8003418:	d020      	beq.n	800345c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	f003 0308 	and.w	r3, r3, #8
 8003420:	2b00      	cmp	r3, #0
 8003422:	d01b      	beq.n	800345c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f06f 0208 	mvn.w	r2, #8
 800342c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2204      	movs	r2, #4
 8003432:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	f003 0303 	and.w	r3, r3, #3
 800343e:	2b00      	cmp	r3, #0
 8003440:	d003      	beq.n	800344a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f898 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 8003448:	e005      	b.n	8003456 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800344a:	6878      	ldr	r0, [r7, #4]
 800344c:	f000 f88a 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003450:	6878      	ldr	r0, [r7, #4]
 8003452:	f000 f89b 	bl	800358c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	2200      	movs	r2, #0
 800345a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	f003 0310 	and.w	r3, r3, #16
 8003462:	2b00      	cmp	r3, #0
 8003464:	d020      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f003 0310 	and.w	r3, r3, #16
 800346c:	2b00      	cmp	r3, #0
 800346e:	d01b      	beq.n	80034a8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0210 	mvn.w	r2, #16
 8003478:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2208      	movs	r2, #8
 800347e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	69db      	ldr	r3, [r3, #28]
 8003486:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f872 	bl	8003578 <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f864 	bl	8003564 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f875 	bl	800358c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	f003 0301 	and.w	r3, r3, #1
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d00c      	beq.n	80034cc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	f003 0301 	and.w	r3, r3, #1
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d007      	beq.n	80034cc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f06f 0201 	mvn.w	r2, #1
 80034c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7fd fd94 	bl	8000ff4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d00c      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d007      	beq.n	80034f0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80034e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f906 	bl	80036fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00c      	beq.n	8003514 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003500:	2b00      	cmp	r3, #0
 8003502:	d007      	beq.n	8003514 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800350c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f8fe 	bl	8003710 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d00c      	beq.n	8003538 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003524:	2b00      	cmp	r3, #0
 8003526:	d007      	beq.n	8003538 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003530:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f834 	bl	80035a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003538:	68bb      	ldr	r3, [r7, #8]
 800353a:	f003 0320 	and.w	r3, r3, #32
 800353e:	2b00      	cmp	r3, #0
 8003540:	d00c      	beq.n	800355c <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	f003 0320 	and.w	r3, r3, #32
 8003548:	2b00      	cmp	r3, #0
 800354a:	d007      	beq.n	800355c <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f06f 0220 	mvn.w	r2, #32
 8003554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f8c6 	bl	80036e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800356c:	bf00      	nop
 800356e:	370c      	adds	r7, #12
 8003570:	46bd      	mov	sp, r7
 8003572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003576:	4770      	bx	lr

08003578 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003580:	bf00      	nop
 8003582:	370c      	adds	r7, #12
 8003584:	46bd      	mov	sp, r7
 8003586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358a:	4770      	bx	lr

0800358c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b085      	sub	sp, #20
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a40      	ldr	r2, [pc, #256]	; (80036c8 <TIM_Base_SetConfig+0x114>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d00f      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a3d      	ldr	r2, [pc, #244]	; (80036cc <TIM_Base_SetConfig+0x118>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00b      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a3c      	ldr	r2, [pc, #240]	; (80036d0 <TIM_Base_SetConfig+0x11c>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d007      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <TIM_Base_SetConfig+0x120>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <TIM_Base_SetConfig+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a3a      	ldr	r2, [pc, #232]	; (80036d8 <TIM_Base_SetConfig+0x124>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d108      	bne.n	8003606 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	4313      	orrs	r3, r2
 8003604:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a2f      	ldr	r2, [pc, #188]	; (80036c8 <TIM_Base_SetConfig+0x114>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d01f      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003614:	d01b      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a2c      	ldr	r2, [pc, #176]	; (80036cc <TIM_Base_SetConfig+0x118>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d017      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a2b      	ldr	r2, [pc, #172]	; (80036d0 <TIM_Base_SetConfig+0x11c>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d013      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	4a2a      	ldr	r2, [pc, #168]	; (80036d4 <TIM_Base_SetConfig+0x120>)
 800362a:	4293      	cmp	r3, r2
 800362c:	d00f      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	4a29      	ldr	r2, [pc, #164]	; (80036d8 <TIM_Base_SetConfig+0x124>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d00b      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a28      	ldr	r2, [pc, #160]	; (80036dc <TIM_Base_SetConfig+0x128>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d007      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a27      	ldr	r2, [pc, #156]	; (80036e0 <TIM_Base_SetConfig+0x12c>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d003      	beq.n	800364e <TIM_Base_SetConfig+0x9a>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a26      	ldr	r2, [pc, #152]	; (80036e4 <TIM_Base_SetConfig+0x130>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d108      	bne.n	8003660 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003654:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	4313      	orrs	r3, r2
 800365e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	695b      	ldr	r3, [r3, #20]
 800366a:	4313      	orrs	r3, r2
 800366c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68fa      	ldr	r2, [r7, #12]
 8003672:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	689a      	ldr	r2, [r3, #8]
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a10      	ldr	r2, [pc, #64]	; (80036c8 <TIM_Base_SetConfig+0x114>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d00f      	beq.n	80036ac <TIM_Base_SetConfig+0xf8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a12      	ldr	r2, [pc, #72]	; (80036d8 <TIM_Base_SetConfig+0x124>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00b      	beq.n	80036ac <TIM_Base_SetConfig+0xf8>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a11      	ldr	r2, [pc, #68]	; (80036dc <TIM_Base_SetConfig+0x128>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d007      	beq.n	80036ac <TIM_Base_SetConfig+0xf8>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a10      	ldr	r2, [pc, #64]	; (80036e0 <TIM_Base_SetConfig+0x12c>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d003      	beq.n	80036ac <TIM_Base_SetConfig+0xf8>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a0f      	ldr	r2, [pc, #60]	; (80036e4 <TIM_Base_SetConfig+0x130>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d103      	bne.n	80036b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	691a      	ldr	r2, [r3, #16]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	615a      	str	r2, [r3, #20]
}
 80036ba:	bf00      	nop
 80036bc:	3714      	adds	r7, #20
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800
 80036d4:	40000c00 	.word	0x40000c00
 80036d8:	40013400 	.word	0x40013400
 80036dc:	40014000 	.word	0x40014000
 80036e0:	40014400 	.word	0x40014400
 80036e4:	40014800 	.word	0x40014800

080036e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b082      	sub	sp, #8
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003732:	2301      	movs	r3, #1
 8003734:	e040      	b.n	80037b8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800373a:	2b00      	cmp	r3, #0
 800373c:	d106      	bne.n	800374c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003746:	6878      	ldr	r0, [r7, #4]
 8003748:	f7fd fcc2 	bl	80010d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2224      	movs	r2, #36	; 0x24
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 fb6a 	bl	8003e44 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f8af 	bl	80038d4 <UART_SetConfig>
 8003776:	4603      	mov	r3, r0
 8003778:	2b01      	cmp	r3, #1
 800377a:	d101      	bne.n	8003780 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e01b      	b.n	80037b8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800378e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	689a      	ldr	r2, [r3, #8]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800379e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f042 0201 	orr.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037b0:	6878      	ldr	r0, [r7, #4]
 80037b2:	f000 fbe9 	bl	8003f88 <UART_CheckIdleState>
 80037b6:	4603      	mov	r3, r0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b08a      	sub	sp, #40	; 0x28
 80037c4:	af02      	add	r7, sp, #8
 80037c6:	60f8      	str	r0, [r7, #12]
 80037c8:	60b9      	str	r1, [r7, #8]
 80037ca:	603b      	str	r3, [r7, #0]
 80037cc:	4613      	mov	r3, r2
 80037ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80037d4:	2b20      	cmp	r3, #32
 80037d6:	d178      	bne.n	80038ca <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d002      	beq.n	80037e4 <HAL_UART_Transmit+0x24>
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e071      	b.n	80038cc <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2200      	movs	r2, #0
 80037ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	2221      	movs	r2, #33	; 0x21
 80037f4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037f6:	f7fd feb7 	bl	8001568 <HAL_GetTick>
 80037fa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	88fa      	ldrh	r2, [r7, #6]
 8003800:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	88fa      	ldrh	r2, [r7, #6]
 8003808:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003814:	d108      	bne.n	8003828 <HAL_UART_Transmit+0x68>
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d104      	bne.n	8003828 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800381e:	2300      	movs	r3, #0
 8003820:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	61bb      	str	r3, [r7, #24]
 8003826:	e003      	b.n	8003830 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800382c:	2300      	movs	r3, #0
 800382e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003830:	e030      	b.n	8003894 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	9300      	str	r3, [sp, #0]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	2200      	movs	r2, #0
 800383a:	2180      	movs	r1, #128	; 0x80
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	f000 fc4b 	bl	80040d8 <UART_WaitOnFlagUntilTimeout>
 8003842:	4603      	mov	r3, r0
 8003844:	2b00      	cmp	r3, #0
 8003846:	d004      	beq.n	8003852 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2220      	movs	r2, #32
 800384c:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800384e:	2303      	movs	r3, #3
 8003850:	e03c      	b.n	80038cc <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10b      	bne.n	8003870 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003858:	69bb      	ldr	r3, [r7, #24]
 800385a:	881a      	ldrh	r2, [r3, #0]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003864:	b292      	uxth	r2, r2
 8003866:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003868:	69bb      	ldr	r3, [r7, #24]
 800386a:	3302      	adds	r3, #2
 800386c:	61bb      	str	r3, [r7, #24]
 800386e:	e008      	b.n	8003882 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	781a      	ldrb	r2, [r3, #0]
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	b292      	uxth	r2, r2
 800387a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800387c:	69fb      	ldr	r3, [r7, #28]
 800387e:	3301      	adds	r3, #1
 8003880:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003888:	b29b      	uxth	r3, r3
 800388a:	3b01      	subs	r3, #1
 800388c:	b29a      	uxth	r2, r3
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800389a:	b29b      	uxth	r3, r3
 800389c:	2b00      	cmp	r3, #0
 800389e:	d1c8      	bne.n	8003832 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	9300      	str	r3, [sp, #0]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	2200      	movs	r2, #0
 80038a8:	2140      	movs	r1, #64	; 0x40
 80038aa:	68f8      	ldr	r0, [r7, #12]
 80038ac:	f000 fc14 	bl	80040d8 <UART_WaitOnFlagUntilTimeout>
 80038b0:	4603      	mov	r3, r0
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d004      	beq.n	80038c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80038bc:	2303      	movs	r3, #3
 80038be:	e005      	b.n	80038cc <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2220      	movs	r2, #32
 80038c4:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80038c6:	2300      	movs	r3, #0
 80038c8:	e000      	b.n	80038cc <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80038ca:	2302      	movs	r3, #2
  }
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3720      	adds	r7, #32
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80038d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038d8:	b08a      	sub	sp, #40	; 0x28
 80038da:	af00      	add	r7, sp, #0
 80038dc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	691b      	ldr	r3, [r3, #16]
 80038ec:	431a      	orrs	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	69db      	ldr	r3, [r3, #28]
 80038f8:	4313      	orrs	r3, r2
 80038fa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	4ba4      	ldr	r3, [pc, #656]	; (8003b94 <UART_SetConfig+0x2c0>)
 8003904:	4013      	ands	r3, r2
 8003906:	68fa      	ldr	r2, [r7, #12]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800390c:	430b      	orrs	r3, r1
 800390e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	68da      	ldr	r2, [r3, #12]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	430a      	orrs	r2, r1
 8003924:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a99      	ldr	r2, [pc, #612]	; (8003b98 <UART_SetConfig+0x2c4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d004      	beq.n	8003940 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	6a1b      	ldr	r3, [r3, #32]
 800393a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800393c:	4313      	orrs	r3, r2
 800393e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003950:	430a      	orrs	r2, r1
 8003952:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	4a90      	ldr	r2, [pc, #576]	; (8003b9c <UART_SetConfig+0x2c8>)
 800395a:	4293      	cmp	r3, r2
 800395c:	d126      	bne.n	80039ac <UART_SetConfig+0xd8>
 800395e:	4b90      	ldr	r3, [pc, #576]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	2b03      	cmp	r3, #3
 800396a:	d81b      	bhi.n	80039a4 <UART_SetConfig+0xd0>
 800396c:	a201      	add	r2, pc, #4	; (adr r2, 8003974 <UART_SetConfig+0xa0>)
 800396e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003972:	bf00      	nop
 8003974:	08003985 	.word	0x08003985
 8003978:	08003995 	.word	0x08003995
 800397c:	0800398d 	.word	0x0800398d
 8003980:	0800399d 	.word	0x0800399d
 8003984:	2301      	movs	r3, #1
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398a:	e116      	b.n	8003bba <UART_SetConfig+0x2e6>
 800398c:	2302      	movs	r3, #2
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003992:	e112      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003994:	2304      	movs	r3, #4
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399a:	e10e      	b.n	8003bba <UART_SetConfig+0x2e6>
 800399c:	2308      	movs	r3, #8
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e10a      	b.n	8003bba <UART_SetConfig+0x2e6>
 80039a4:	2310      	movs	r3, #16
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e106      	b.n	8003bba <UART_SetConfig+0x2e6>
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a7c      	ldr	r2, [pc, #496]	; (8003ba4 <UART_SetConfig+0x2d0>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d138      	bne.n	8003a28 <UART_SetConfig+0x154>
 80039b6:	4b7a      	ldr	r3, [pc, #488]	; (8003ba0 <UART_SetConfig+0x2cc>)
 80039b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039bc:	f003 030c 	and.w	r3, r3, #12
 80039c0:	2b0c      	cmp	r3, #12
 80039c2:	d82d      	bhi.n	8003a20 <UART_SetConfig+0x14c>
 80039c4:	a201      	add	r2, pc, #4	; (adr r2, 80039cc <UART_SetConfig+0xf8>)
 80039c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ca:	bf00      	nop
 80039cc:	08003a01 	.word	0x08003a01
 80039d0:	08003a21 	.word	0x08003a21
 80039d4:	08003a21 	.word	0x08003a21
 80039d8:	08003a21 	.word	0x08003a21
 80039dc:	08003a11 	.word	0x08003a11
 80039e0:	08003a21 	.word	0x08003a21
 80039e4:	08003a21 	.word	0x08003a21
 80039e8:	08003a21 	.word	0x08003a21
 80039ec:	08003a09 	.word	0x08003a09
 80039f0:	08003a21 	.word	0x08003a21
 80039f4:	08003a21 	.word	0x08003a21
 80039f8:	08003a21 	.word	0x08003a21
 80039fc:	08003a19 	.word	0x08003a19
 8003a00:	2300      	movs	r3, #0
 8003a02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a06:	e0d8      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a08:	2302      	movs	r3, #2
 8003a0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0e:	e0d4      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a10:	2304      	movs	r3, #4
 8003a12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a16:	e0d0      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a18:	2308      	movs	r3, #8
 8003a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1e:	e0cc      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a20:	2310      	movs	r3, #16
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e0c8      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4a5e      	ldr	r2, [pc, #376]	; (8003ba8 <UART_SetConfig+0x2d4>)
 8003a2e:	4293      	cmp	r3, r2
 8003a30:	d125      	bne.n	8003a7e <UART_SetConfig+0x1aa>
 8003a32:	4b5b      	ldr	r3, [pc, #364]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a38:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a3c:	2b30      	cmp	r3, #48	; 0x30
 8003a3e:	d016      	beq.n	8003a6e <UART_SetConfig+0x19a>
 8003a40:	2b30      	cmp	r3, #48	; 0x30
 8003a42:	d818      	bhi.n	8003a76 <UART_SetConfig+0x1a2>
 8003a44:	2b20      	cmp	r3, #32
 8003a46:	d00a      	beq.n	8003a5e <UART_SetConfig+0x18a>
 8003a48:	2b20      	cmp	r3, #32
 8003a4a:	d814      	bhi.n	8003a76 <UART_SetConfig+0x1a2>
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <UART_SetConfig+0x182>
 8003a50:	2b10      	cmp	r3, #16
 8003a52:	d008      	beq.n	8003a66 <UART_SetConfig+0x192>
 8003a54:	e00f      	b.n	8003a76 <UART_SetConfig+0x1a2>
 8003a56:	2300      	movs	r3, #0
 8003a58:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5c:	e0ad      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a64:	e0a9      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a66:	2304      	movs	r3, #4
 8003a68:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6c:	e0a5      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a6e:	2308      	movs	r3, #8
 8003a70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a74:	e0a1      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a76:	2310      	movs	r3, #16
 8003a78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7c:	e09d      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a4a      	ldr	r2, [pc, #296]	; (8003bac <UART_SetConfig+0x2d8>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d125      	bne.n	8003ad4 <UART_SetConfig+0x200>
 8003a88:	4b45      	ldr	r3, [pc, #276]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a92:	2bc0      	cmp	r3, #192	; 0xc0
 8003a94:	d016      	beq.n	8003ac4 <UART_SetConfig+0x1f0>
 8003a96:	2bc0      	cmp	r3, #192	; 0xc0
 8003a98:	d818      	bhi.n	8003acc <UART_SetConfig+0x1f8>
 8003a9a:	2b80      	cmp	r3, #128	; 0x80
 8003a9c:	d00a      	beq.n	8003ab4 <UART_SetConfig+0x1e0>
 8003a9e:	2b80      	cmp	r3, #128	; 0x80
 8003aa0:	d814      	bhi.n	8003acc <UART_SetConfig+0x1f8>
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d002      	beq.n	8003aac <UART_SetConfig+0x1d8>
 8003aa6:	2b40      	cmp	r3, #64	; 0x40
 8003aa8:	d008      	beq.n	8003abc <UART_SetConfig+0x1e8>
 8003aaa:	e00f      	b.n	8003acc <UART_SetConfig+0x1f8>
 8003aac:	2300      	movs	r3, #0
 8003aae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab2:	e082      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aba:	e07e      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003abc:	2304      	movs	r3, #4
 8003abe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ac2:	e07a      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003ac4:	2308      	movs	r3, #8
 8003ac6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aca:	e076      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003acc:	2310      	movs	r3, #16
 8003ace:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad2:	e072      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a35      	ldr	r2, [pc, #212]	; (8003bb0 <UART_SetConfig+0x2dc>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d12a      	bne.n	8003b34 <UART_SetConfig+0x260>
 8003ade:	4b30      	ldr	r3, [pc, #192]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ae4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ae8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aec:	d01a      	beq.n	8003b24 <UART_SetConfig+0x250>
 8003aee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003af2:	d81b      	bhi.n	8003b2c <UART_SetConfig+0x258>
 8003af4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003af8:	d00c      	beq.n	8003b14 <UART_SetConfig+0x240>
 8003afa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003afe:	d815      	bhi.n	8003b2c <UART_SetConfig+0x258>
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d003      	beq.n	8003b0c <UART_SetConfig+0x238>
 8003b04:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b08:	d008      	beq.n	8003b1c <UART_SetConfig+0x248>
 8003b0a:	e00f      	b.n	8003b2c <UART_SetConfig+0x258>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b12:	e052      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b14:	2302      	movs	r3, #2
 8003b16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b1a:	e04e      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b1c:	2304      	movs	r3, #4
 8003b1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b22:	e04a      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b24:	2308      	movs	r3, #8
 8003b26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b2a:	e046      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b2c:	2310      	movs	r3, #16
 8003b2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b32:	e042      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	4a17      	ldr	r2, [pc, #92]	; (8003b98 <UART_SetConfig+0x2c4>)
 8003b3a:	4293      	cmp	r3, r2
 8003b3c:	d13a      	bne.n	8003bb4 <UART_SetConfig+0x2e0>
 8003b3e:	4b18      	ldr	r3, [pc, #96]	; (8003ba0 <UART_SetConfig+0x2cc>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b44:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b48:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b4c:	d01a      	beq.n	8003b84 <UART_SetConfig+0x2b0>
 8003b4e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b52:	d81b      	bhi.n	8003b8c <UART_SetConfig+0x2b8>
 8003b54:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b58:	d00c      	beq.n	8003b74 <UART_SetConfig+0x2a0>
 8003b5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b5e:	d815      	bhi.n	8003b8c <UART_SetConfig+0x2b8>
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d003      	beq.n	8003b6c <UART_SetConfig+0x298>
 8003b64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b68:	d008      	beq.n	8003b7c <UART_SetConfig+0x2a8>
 8003b6a:	e00f      	b.n	8003b8c <UART_SetConfig+0x2b8>
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b72:	e022      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b74:	2302      	movs	r3, #2
 8003b76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b7a:	e01e      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b7c:	2304      	movs	r3, #4
 8003b7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b82:	e01a      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b84:	2308      	movs	r3, #8
 8003b86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b8a:	e016      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b8c:	2310      	movs	r3, #16
 8003b8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b92:	e012      	b.n	8003bba <UART_SetConfig+0x2e6>
 8003b94:	efff69f3 	.word	0xefff69f3
 8003b98:	40008000 	.word	0x40008000
 8003b9c:	40013800 	.word	0x40013800
 8003ba0:	40021000 	.word	0x40021000
 8003ba4:	40004400 	.word	0x40004400
 8003ba8:	40004800 	.word	0x40004800
 8003bac:	40004c00 	.word	0x40004c00
 8003bb0:	40005000 	.word	0x40005000
 8003bb4:	2310      	movs	r3, #16
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a9f      	ldr	r2, [pc, #636]	; (8003e3c <UART_SetConfig+0x568>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d17a      	bne.n	8003cba <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003bc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003bc8:	2b08      	cmp	r3, #8
 8003bca:	d824      	bhi.n	8003c16 <UART_SetConfig+0x342>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <UART_SetConfig+0x300>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003bf9 	.word	0x08003bf9
 8003bd8:	08003c17 	.word	0x08003c17
 8003bdc:	08003c01 	.word	0x08003c01
 8003be0:	08003c17 	.word	0x08003c17
 8003be4:	08003c07 	.word	0x08003c07
 8003be8:	08003c17 	.word	0x08003c17
 8003bec:	08003c17 	.word	0x08003c17
 8003bf0:	08003c17 	.word	0x08003c17
 8003bf4:	08003c0f 	.word	0x08003c0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003bf8:	f7fe fd70 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003bfc:	61f8      	str	r0, [r7, #28]
        break;
 8003bfe:	e010      	b.n	8003c22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c00:	4b8f      	ldr	r3, [pc, #572]	; (8003e40 <UART_SetConfig+0x56c>)
 8003c02:	61fb      	str	r3, [r7, #28]
        break;
 8003c04:	e00d      	b.n	8003c22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c06:	f7fe fcd1 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8003c0a:	61f8      	str	r0, [r7, #28]
        break;
 8003c0c:	e009      	b.n	8003c22 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c12:	61fb      	str	r3, [r7, #28]
        break;
 8003c14:	e005      	b.n	8003c22 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c20:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	f000 80fb 	beq.w	8003e20 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	685a      	ldr	r2, [r3, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	005b      	lsls	r3, r3, #1
 8003c32:	4413      	add	r3, r2
 8003c34:	69fa      	ldr	r2, [r7, #28]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d305      	bcc.n	8003c46 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c40:	69fa      	ldr	r2, [r7, #28]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d903      	bls.n	8003c4e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c4c:	e0e8      	b.n	8003e20 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c4e:	69fb      	ldr	r3, [r7, #28]
 8003c50:	2200      	movs	r2, #0
 8003c52:	461c      	mov	r4, r3
 8003c54:	4615      	mov	r5, r2
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	022b      	lsls	r3, r5, #8
 8003c60:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c64:	0222      	lsls	r2, r4, #8
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	6849      	ldr	r1, [r1, #4]
 8003c6a:	0849      	lsrs	r1, r1, #1
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	4688      	mov	r8, r1
 8003c70:	4681      	mov	r9, r0
 8003c72:	eb12 0a08 	adds.w	sl, r2, r8
 8003c76:	eb43 0b09 	adc.w	fp, r3, r9
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	603b      	str	r3, [r7, #0]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c88:	4650      	mov	r0, sl
 8003c8a:	4659      	mov	r1, fp
 8003c8c:	f7fc faf0 	bl	8000270 <__aeabi_uldivmod>
 8003c90:	4602      	mov	r2, r0
 8003c92:	460b      	mov	r3, r1
 8003c94:	4613      	mov	r3, r2
 8003c96:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c9e:	d308      	bcc.n	8003cb2 <UART_SetConfig+0x3de>
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ca6:	d204      	bcs.n	8003cb2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	60da      	str	r2, [r3, #12]
 8003cb0:	e0b6      	b.n	8003e20 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cb8:	e0b2      	b.n	8003e20 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	69db      	ldr	r3, [r3, #28]
 8003cbe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cc2:	d15e      	bne.n	8003d82 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003cc4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cc8:	2b08      	cmp	r3, #8
 8003cca:	d828      	bhi.n	8003d1e <UART_SetConfig+0x44a>
 8003ccc:	a201      	add	r2, pc, #4	; (adr r2, 8003cd4 <UART_SetConfig+0x400>)
 8003cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd2:	bf00      	nop
 8003cd4:	08003cf9 	.word	0x08003cf9
 8003cd8:	08003d01 	.word	0x08003d01
 8003cdc:	08003d09 	.word	0x08003d09
 8003ce0:	08003d1f 	.word	0x08003d1f
 8003ce4:	08003d0f 	.word	0x08003d0f
 8003ce8:	08003d1f 	.word	0x08003d1f
 8003cec:	08003d1f 	.word	0x08003d1f
 8003cf0:	08003d1f 	.word	0x08003d1f
 8003cf4:	08003d17 	.word	0x08003d17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cf8:	f7fe fcf0 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003cfc:	61f8      	str	r0, [r7, #28]
        break;
 8003cfe:	e014      	b.n	8003d2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d00:	f7fe fd02 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 8003d04:	61f8      	str	r0, [r7, #28]
        break;
 8003d06:	e010      	b.n	8003d2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d08:	4b4d      	ldr	r3, [pc, #308]	; (8003e40 <UART_SetConfig+0x56c>)
 8003d0a:	61fb      	str	r3, [r7, #28]
        break;
 8003d0c:	e00d      	b.n	8003d2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d0e:	f7fe fc4d 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8003d12:	61f8      	str	r0, [r7, #28]
        break;
 8003d14:	e009      	b.n	8003d2a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d1a:	61fb      	str	r3, [r7, #28]
        break;
 8003d1c:	e005      	b.n	8003d2a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d2a:	69fb      	ldr	r3, [r7, #28]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d077      	beq.n	8003e20 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	005a      	lsls	r2, r3, #1
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	085b      	lsrs	r3, r3, #1
 8003d3a:	441a      	add	r2, r3
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	685b      	ldr	r3, [r3, #4]
 8003d40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d44:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d46:	69bb      	ldr	r3, [r7, #24]
 8003d48:	2b0f      	cmp	r3, #15
 8003d4a:	d916      	bls.n	8003d7a <UART_SetConfig+0x4a6>
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d52:	d212      	bcs.n	8003d7a <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d54:	69bb      	ldr	r3, [r7, #24]
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	f023 030f 	bic.w	r3, r3, #15
 8003d5c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	085b      	lsrs	r3, r3, #1
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	f003 0307 	and.w	r3, r3, #7
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	8afb      	ldrh	r3, [r7, #22]
 8003d6c:	4313      	orrs	r3, r2
 8003d6e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	8afa      	ldrh	r2, [r7, #22]
 8003d76:	60da      	str	r2, [r3, #12]
 8003d78:	e052      	b.n	8003e20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d80:	e04e      	b.n	8003e20 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d82:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d827      	bhi.n	8003dda <UART_SetConfig+0x506>
 8003d8a:	a201      	add	r2, pc, #4	; (adr r2, 8003d90 <UART_SetConfig+0x4bc>)
 8003d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d90:	08003db5 	.word	0x08003db5
 8003d94:	08003dbd 	.word	0x08003dbd
 8003d98:	08003dc5 	.word	0x08003dc5
 8003d9c:	08003ddb 	.word	0x08003ddb
 8003da0:	08003dcb 	.word	0x08003dcb
 8003da4:	08003ddb 	.word	0x08003ddb
 8003da8:	08003ddb 	.word	0x08003ddb
 8003dac:	08003ddb 	.word	0x08003ddb
 8003db0:	08003dd3 	.word	0x08003dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003db4:	f7fe fc92 	bl	80026dc <HAL_RCC_GetPCLK1Freq>
 8003db8:	61f8      	str	r0, [r7, #28]
        break;
 8003dba:	e014      	b.n	8003de6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003dbc:	f7fe fca4 	bl	8002708 <HAL_RCC_GetPCLK2Freq>
 8003dc0:	61f8      	str	r0, [r7, #28]
        break;
 8003dc2:	e010      	b.n	8003de6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003dc4:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <UART_SetConfig+0x56c>)
 8003dc6:	61fb      	str	r3, [r7, #28]
        break;
 8003dc8:	e00d      	b.n	8003de6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003dca:	f7fe fbef 	bl	80025ac <HAL_RCC_GetSysClockFreq>
 8003dce:	61f8      	str	r0, [r7, #28]
        break;
 8003dd0:	e009      	b.n	8003de6 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003dd6:	61fb      	str	r3, [r7, #28]
        break;
 8003dd8:	e005      	b.n	8003de6 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003de4:	bf00      	nop
    }

    if (pclk != 0U)
 8003de6:	69fb      	ldr	r3, [r7, #28]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d019      	beq.n	8003e20 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	085a      	lsrs	r2, r3, #1
 8003df2:	69fb      	ldr	r3, [r7, #28]
 8003df4:	441a      	add	r2, r3
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e00:	69bb      	ldr	r3, [r7, #24]
 8003e02:	2b0f      	cmp	r3, #15
 8003e04:	d909      	bls.n	8003e1a <UART_SetConfig+0x546>
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e0c:	d205      	bcs.n	8003e1a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	b29a      	uxth	r2, r3
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	60da      	str	r2, [r3, #12]
 8003e18:	e002      	b.n	8003e20 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e2c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3728      	adds	r7, #40	; 0x28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e3a:	bf00      	nop
 8003e3c:	40008000 	.word	0x40008000
 8003e40:	00f42400 	.word	0x00f42400

08003e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b083      	sub	sp, #12
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d00a      	beq.n	8003e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d00a      	beq.n	8003e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	430a      	orrs	r2, r1
 8003e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e94:	f003 0302 	and.w	r3, r3, #2
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d00a      	beq.n	8003eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	685b      	ldr	r3, [r3, #4]
 8003ea2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00a      	beq.n	8003ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	430a      	orrs	r2, r1
 8003ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed8:	f003 0310 	and.w	r3, r3, #16
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d00a      	beq.n	8003ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	430a      	orrs	r2, r1
 8003ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	f003 0320 	and.w	r3, r3, #32
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d00a      	beq.n	8003f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	430a      	orrs	r2, r1
 8003f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d01a      	beq.n	8003f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	430a      	orrs	r2, r1
 8003f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f42:	d10a      	bne.n	8003f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	430a      	orrs	r2, r1
 8003f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00a      	beq.n	8003f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	430a      	orrs	r2, r1
 8003f7a:	605a      	str	r2, [r3, #4]
  }
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b098      	sub	sp, #96	; 0x60
 8003f8c:	af02      	add	r7, sp, #8
 8003f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f98:	f7fd fae6 	bl	8001568 <HAL_GetTick>
 8003f9c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f003 0308 	and.w	r3, r3, #8
 8003fa8:	2b08      	cmp	r3, #8
 8003faa:	d12e      	bne.n	800400a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fb0:	9300      	str	r3, [sp, #0]
 8003fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003fba:	6878      	ldr	r0, [r7, #4]
 8003fbc:	f000 f88c 	bl	80040d8 <UART_WaitOnFlagUntilTimeout>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d021      	beq.n	800400a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	e853 3f00 	ldrex	r3, [r3]
 8003fd2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003fd6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fda:	653b      	str	r3, [r7, #80]	; 0x50
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003fe4:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003fea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003fec:	e841 2300 	strex	r3, r2, [r1]
 8003ff0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ff2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d1e6      	bne.n	8003fc6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2220      	movs	r2, #32
 8003ffc:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2200      	movs	r2, #0
 8004002:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e062      	b.n	80040d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b04      	cmp	r3, #4
 8004016:	d149      	bne.n	80040ac <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004018:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800401c:	9300      	str	r3, [sp, #0]
 800401e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004020:	2200      	movs	r2, #0
 8004022:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 f856 	bl	80040d8 <UART_WaitOnFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d03c      	beq.n	80040ac <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800403a:	e853 3f00 	ldrex	r3, [r3]
 800403e:	623b      	str	r3, [r7, #32]
   return(result);
 8004040:	6a3b      	ldr	r3, [r7, #32]
 8004042:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004046:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	461a      	mov	r2, r3
 800404e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004050:	633b      	str	r3, [r7, #48]	; 0x30
 8004052:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004054:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004056:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004058:	e841 2300 	strex	r3, r2, [r1]
 800405c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800405e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004060:	2b00      	cmp	r3, #0
 8004062:	d1e6      	bne.n	8004032 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	3308      	adds	r3, #8
 800406a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	e853 3f00 	ldrex	r3, [r3]
 8004072:	60fb      	str	r3, [r7, #12]
   return(result);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f023 0301 	bic.w	r3, r3, #1
 800407a:	64bb      	str	r3, [r7, #72]	; 0x48
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	3308      	adds	r3, #8
 8004082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004084:	61fa      	str	r2, [r7, #28]
 8004086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004088:	69b9      	ldr	r1, [r7, #24]
 800408a:	69fa      	ldr	r2, [r7, #28]
 800408c:	e841 2300 	strex	r3, r2, [r1]
 8004090:	617b      	str	r3, [r7, #20]
   return(result);
 8004092:	697b      	ldr	r3, [r7, #20]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d1e5      	bne.n	8004064 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2220      	movs	r2, #32
 800409c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2200      	movs	r2, #0
 80040a4:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e011      	b.n	80040d0 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2220      	movs	r2, #32
 80040b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	2200      	movs	r2, #0
 80040be:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	3758      	adds	r7, #88	; 0x58
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bd80      	pop	{r7, pc}

080040d8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	b084      	sub	sp, #16
 80040dc:	af00      	add	r7, sp, #0
 80040de:	60f8      	str	r0, [r7, #12]
 80040e0:	60b9      	str	r1, [r7, #8]
 80040e2:	603b      	str	r3, [r7, #0]
 80040e4:	4613      	mov	r3, r2
 80040e6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e8:	e049      	b.n	800417e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80040f0:	d045      	beq.n	800417e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040f2:	f7fd fa39 	bl	8001568 <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	69ba      	ldr	r2, [r7, #24]
 80040fe:	429a      	cmp	r2, r3
 8004100:	d302      	bcc.n	8004108 <UART_WaitOnFlagUntilTimeout+0x30>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d101      	bne.n	800410c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004108:	2303      	movs	r3, #3
 800410a:	e048      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0304 	and.w	r3, r3, #4
 8004116:	2b00      	cmp	r3, #0
 8004118:	d031      	beq.n	800417e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	69db      	ldr	r3, [r3, #28]
 8004120:	f003 0308 	and.w	r3, r3, #8
 8004124:	2b08      	cmp	r3, #8
 8004126:	d110      	bne.n	800414a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2208      	movs	r2, #8
 800412e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004130:	68f8      	ldr	r0, [r7, #12]
 8004132:	f000 f838 	bl	80041a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2208      	movs	r2, #8
 800413a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e029      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	69db      	ldr	r3, [r3, #28]
 8004150:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004154:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004158:	d111      	bne.n	800417e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004162:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004164:	68f8      	ldr	r0, [r7, #12]
 8004166:	f000 f81e 	bl	80041a6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2220      	movs	r2, #32
 800416e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e00f      	b.n	800419e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	69da      	ldr	r2, [r3, #28]
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	bf0c      	ite	eq
 800418e:	2301      	moveq	r3, #1
 8004190:	2300      	movne	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	461a      	mov	r2, r3
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	429a      	cmp	r2, r3
 800419a:	d0a6      	beq.n	80040ea <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}

080041a6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041a6:	b480      	push	{r7}
 80041a8:	b095      	sub	sp, #84	; 0x54
 80041aa:	af00      	add	r7, sp, #0
 80041ac:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041b6:	e853 3f00 	ldrex	r3, [r3]
 80041ba:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041be:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	461a      	mov	r2, r3
 80041ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041cc:	643b      	str	r3, [r7, #64]	; 0x40
 80041ce:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041d0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041d4:	e841 2300 	strex	r3, r2, [r1]
 80041d8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d1e6      	bne.n	80041ae <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3308      	adds	r3, #8
 80041e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e8:	6a3b      	ldr	r3, [r7, #32]
 80041ea:	e853 3f00 	ldrex	r3, [r3]
 80041ee:	61fb      	str	r3, [r7, #28]
   return(result);
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	f023 0301 	bic.w	r3, r3, #1
 80041f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	3308      	adds	r3, #8
 80041fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004200:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004202:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004204:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004206:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004208:	e841 2300 	strex	r3, r2, [r1]
 800420c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800420e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004210:	2b00      	cmp	r3, #0
 8004212:	d1e5      	bne.n	80041e0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004218:	2b01      	cmp	r3, #1
 800421a:	d118      	bne.n	800424e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	e853 3f00 	ldrex	r3, [r3]
 8004228:	60bb      	str	r3, [r7, #8]
   return(result);
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f023 0310 	bic.w	r3, r3, #16
 8004230:	647b      	str	r3, [r7, #68]	; 0x44
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	461a      	mov	r2, r3
 8004238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800423a:	61bb      	str	r3, [r7, #24]
 800423c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423e:	6979      	ldr	r1, [r7, #20]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	e841 2300 	strex	r3, r2, [r1]
 8004246:	613b      	str	r3, [r7, #16]
   return(result);
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1e6      	bne.n	800421c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2220      	movs	r2, #32
 8004252:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004262:	bf00      	nop
 8004264:	3754      	adds	r7, #84	; 0x54
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <__NVIC_SetPriority>:
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	db0a      	blt.n	800429a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	490c      	ldr	r1, [pc, #48]	; (80042bc <__NVIC_SetPriority+0x4c>)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	0112      	lsls	r2, r2, #4
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	440b      	add	r3, r1
 8004294:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004298:	e00a      	b.n	80042b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4908      	ldr	r1, [pc, #32]	; (80042c0 <__NVIC_SetPriority+0x50>)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	3b04      	subs	r3, #4
 80042a8:	0112      	lsls	r2, r2, #4
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	440b      	add	r3, r1
 80042ae:	761a      	strb	r2, [r3, #24]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000e100 	.word	0xe000e100
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80042c4:	b580      	push	{r7, lr}
 80042c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80042c8:	4b05      	ldr	r3, [pc, #20]	; (80042e0 <SysTick_Handler+0x1c>)
 80042ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80042cc:	f002 fc4e 	bl	8006b6c <xTaskGetSchedulerState>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d001      	beq.n	80042da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80042d6:	f003 fc17 	bl	8007b08 <xPortSysTickHandler>
  }
}
 80042da:	bf00      	nop
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	e000e010 	.word	0xe000e010

080042e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80042e4:	b580      	push	{r7, lr}
 80042e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80042e8:	2100      	movs	r1, #0
 80042ea:	f06f 0004 	mvn.w	r0, #4
 80042ee:	f7ff ffbf 	bl	8004270 <__NVIC_SetPriority>
#endif
}
 80042f2:	bf00      	nop
 80042f4:	bd80      	pop	{r7, pc}
	...

080042f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042fe:	f3ef 8305 	mrs	r3, IPSR
 8004302:	603b      	str	r3, [r7, #0]
  return(result);
 8004304:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004306:	2b00      	cmp	r3, #0
 8004308:	d003      	beq.n	8004312 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800430a:	f06f 0305 	mvn.w	r3, #5
 800430e:	607b      	str	r3, [r7, #4]
 8004310:	e00c      	b.n	800432c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004312:	4b0a      	ldr	r3, [pc, #40]	; (800433c <osKernelInitialize+0x44>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d105      	bne.n	8004326 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800431a:	4b08      	ldr	r3, [pc, #32]	; (800433c <osKernelInitialize+0x44>)
 800431c:	2201      	movs	r2, #1
 800431e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004320:	2300      	movs	r3, #0
 8004322:	607b      	str	r3, [r7, #4]
 8004324:	e002      	b.n	800432c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004326:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800432a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800432c:	687b      	ldr	r3, [r7, #4]
}
 800432e:	4618      	mov	r0, r3
 8004330:	370c      	adds	r7, #12
 8004332:	46bd      	mov	sp, r7
 8004334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004338:	4770      	bx	lr
 800433a:	bf00      	nop
 800433c:	200001f0 	.word	0x200001f0

08004340 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004346:	f3ef 8305 	mrs	r3, IPSR
 800434a:	603b      	str	r3, [r7, #0]
  return(result);
 800434c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800434e:	2b00      	cmp	r3, #0
 8004350:	d003      	beq.n	800435a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004352:	f06f 0305 	mvn.w	r3, #5
 8004356:	607b      	str	r3, [r7, #4]
 8004358:	e010      	b.n	800437c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <osKernelStart+0x48>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	2b01      	cmp	r3, #1
 8004360:	d109      	bne.n	8004376 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004362:	f7ff ffbf 	bl	80042e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004366:	4b08      	ldr	r3, [pc, #32]	; (8004388 <osKernelStart+0x48>)
 8004368:	2202      	movs	r2, #2
 800436a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800436c:	f001 ff92 	bl	8006294 <vTaskStartScheduler>
      stat = osOK;
 8004370:	2300      	movs	r3, #0
 8004372:	607b      	str	r3, [r7, #4]
 8004374:	e002      	b.n	800437c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004376:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800437a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800437c:	687b      	ldr	r3, [r7, #4]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}
 8004386:	bf00      	nop
 8004388:	200001f0 	.word	0x200001f0

0800438c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800438c:	b580      	push	{r7, lr}
 800438e:	b08e      	sub	sp, #56	; 0x38
 8004390:	af04      	add	r7, sp, #16
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004398:	2300      	movs	r3, #0
 800439a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800439c:	f3ef 8305 	mrs	r3, IPSR
 80043a0:	617b      	str	r3, [r7, #20]
  return(result);
 80043a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d17e      	bne.n	80044a6 <osThreadNew+0x11a>
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d07b      	beq.n	80044a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043ae:	2380      	movs	r3, #128	; 0x80
 80043b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043b2:	2318      	movs	r3, #24
 80043b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043b6:	2300      	movs	r3, #0
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80043ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d045      	beq.n	8004452 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d002      	beq.n	80043d4 <osThreadNew+0x48>
        name = attr->name;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	699b      	ldr	r3, [r3, #24]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d002      	beq.n	80043e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d008      	beq.n	80043fa <osThreadNew+0x6e>
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b38      	cmp	r3, #56	; 0x38
 80043ec:	d805      	bhi.n	80043fa <osThreadNew+0x6e>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d001      	beq.n	80043fe <osThreadNew+0x72>
        return (NULL);
 80043fa:	2300      	movs	r3, #0
 80043fc:	e054      	b.n	80044a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d003      	beq.n	800440e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695b      	ldr	r3, [r3, #20]
 800440a:	089b      	lsrs	r3, r3, #2
 800440c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d00e      	beq.n	8004434 <osThreadNew+0xa8>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68db      	ldr	r3, [r3, #12]
 800441a:	2ba7      	cmp	r3, #167	; 0xa7
 800441c:	d90a      	bls.n	8004434 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004422:	2b00      	cmp	r3, #0
 8004424:	d006      	beq.n	8004434 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d002      	beq.n	8004434 <osThreadNew+0xa8>
        mem = 1;
 800442e:	2301      	movs	r3, #1
 8004430:	61bb      	str	r3, [r7, #24]
 8004432:	e010      	b.n	8004456 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	689b      	ldr	r3, [r3, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10c      	bne.n	8004456 <osThreadNew+0xca>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d108      	bne.n	8004456 <osThreadNew+0xca>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <osThreadNew+0xca>
          mem = 0;
 800444c:	2300      	movs	r3, #0
 800444e:	61bb      	str	r3, [r7, #24]
 8004450:	e001      	b.n	8004456 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004452:	2300      	movs	r3, #0
 8004454:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004456:	69bb      	ldr	r3, [r7, #24]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d110      	bne.n	800447e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004464:	9202      	str	r2, [sp, #8]
 8004466:	9301      	str	r3, [sp, #4]
 8004468:	69fb      	ldr	r3, [r7, #28]
 800446a:	9300      	str	r3, [sp, #0]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	6a3a      	ldr	r2, [r7, #32]
 8004470:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004472:	68f8      	ldr	r0, [r7, #12]
 8004474:	f001 fd22 	bl	8005ebc <xTaskCreateStatic>
 8004478:	4603      	mov	r3, r0
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	e013      	b.n	80044a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800447e:	69bb      	ldr	r3, [r7, #24]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d110      	bne.n	80044a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004484:	6a3b      	ldr	r3, [r7, #32]
 8004486:	b29a      	uxth	r2, r3
 8004488:	f107 0310 	add.w	r3, r7, #16
 800448c:	9301      	str	r3, [sp, #4]
 800448e:	69fb      	ldr	r3, [r7, #28]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	68bb      	ldr	r3, [r7, #8]
 8004494:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004496:	68f8      	ldr	r0, [r7, #12]
 8004498:	f001 fd6d 	bl	8005f76 <xTaskCreate>
 800449c:	4603      	mov	r3, r0
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d001      	beq.n	80044a6 <osThreadNew+0x11a>
            hTask = NULL;
 80044a2:	2300      	movs	r3, #0
 80044a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044a6:	693b      	ldr	r3, [r7, #16]
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3728      	adds	r7, #40	; 0x28
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044b8:	f3ef 8305 	mrs	r3, IPSR
 80044bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80044be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d003      	beq.n	80044cc <osDelay+0x1c>
    stat = osErrorISR;
 80044c4:	f06f 0305 	mvn.w	r3, #5
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e007      	b.n	80044dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80044cc:	2300      	movs	r3, #0
 80044ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d002      	beq.n	80044dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80044d6:	6878      	ldr	r0, [r7, #4]
 80044d8:	f001 fea8 	bl	800622c <vTaskDelay>
    }
  }

  return (stat);
 80044dc:	68fb      	ldr	r3, [r7, #12]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}

080044e6 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80044e6:	b580      	push	{r7, lr}
 80044e8:	b084      	sub	sp, #16
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f003 f92b 	bl	800774a <pvTimerGetTimerID>
 80044f4:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d005      	beq.n	8004508 <TimerCallback+0x22>
    callb->func (callb->arg);
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	6852      	ldr	r2, [r2, #4]
 8004504:	4610      	mov	r0, r2
 8004506:	4798      	blx	r3
  }
}
 8004508:	bf00      	nop
 800450a:	3710      	adds	r7, #16
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af02      	add	r7, sp, #8
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	607a      	str	r2, [r7, #4]
 800451a:	603b      	str	r3, [r7, #0]
 800451c:	460b      	mov	r3, r1
 800451e:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004520:	2300      	movs	r3, #0
 8004522:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004524:	f3ef 8305 	mrs	r3, IPSR
 8004528:	613b      	str	r3, [r7, #16]
  return(result);
 800452a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 800452c:	2b00      	cmp	r3, #0
 800452e:	d163      	bne.n	80045f8 <osTimerNew+0xe8>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d060      	beq.n	80045f8 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004536:	2008      	movs	r0, #8
 8004538:	f003 fb76 	bl	8007c28 <pvPortMalloc>
 800453c:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d059      	beq.n	80045f8 <osTimerNew+0xe8>
      callb->func = func;
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	68fa      	ldr	r2, [r7, #12]
 8004548:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004550:	7afb      	ldrb	r3, [r7, #11]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d102      	bne.n	800455c <osTimerNew+0x4c>
        reload = pdFALSE;
 8004556:	2300      	movs	r3, #0
 8004558:	61fb      	str	r3, [r7, #28]
 800455a:	e001      	b.n	8004560 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 800455c:	2301      	movs	r3, #1
 800455e:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004560:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004564:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004566:	2300      	movs	r3, #0
 8004568:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01c      	beq.n	80045aa <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d002      	beq.n	800457e <osTimerNew+0x6e>
          name = attr->name;
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d006      	beq.n	8004594 <osTimerNew+0x84>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	68db      	ldr	r3, [r3, #12]
 800458a:	2b2b      	cmp	r3, #43	; 0x2b
 800458c:	d902      	bls.n	8004594 <osTimerNew+0x84>
          mem = 1;
 800458e:	2301      	movs	r3, #1
 8004590:	61bb      	str	r3, [r7, #24]
 8004592:	e00c      	b.n	80045ae <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004594:	683b      	ldr	r3, [r7, #0]
 8004596:	689b      	ldr	r3, [r3, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d108      	bne.n	80045ae <osTimerNew+0x9e>
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d104      	bne.n	80045ae <osTimerNew+0x9e>
            mem = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
 80045a8:	e001      	b.n	80045ae <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80045aa:	2300      	movs	r3, #0
 80045ac:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d10c      	bne.n	80045ce <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	689b      	ldr	r3, [r3, #8]
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	4b12      	ldr	r3, [pc, #72]	; (8004604 <osTimerNew+0xf4>)
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	69fa      	ldr	r2, [r7, #28]
 80045c2:	2101      	movs	r1, #1
 80045c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045c6:	f002 fd18 	bl	8006ffa <xTimerCreateStatic>
 80045ca:	6238      	str	r0, [r7, #32]
 80045cc:	e00b      	b.n	80045e6 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d108      	bne.n	80045e6 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 80045d4:	4b0b      	ldr	r3, [pc, #44]	; (8004604 <osTimerNew+0xf4>)
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	69fa      	ldr	r2, [r7, #28]
 80045dc:	2101      	movs	r1, #1
 80045de:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80045e0:	f002 fcea 	bl	8006fb8 <xTimerCreate>
 80045e4:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80045e6:	6a3b      	ldr	r3, [r7, #32]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d105      	bne.n	80045f8 <osTimerNew+0xe8>
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d002      	beq.n	80045f8 <osTimerNew+0xe8>
        vPortFree (callb);
 80045f2:	6978      	ldr	r0, [r7, #20]
 80045f4:	f003 fbe4 	bl	8007dc0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80045f8:	6a3b      	ldr	r3, [r7, #32]
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3728      	adds	r7, #40	; 0x28
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	080044e7 	.word	0x080044e7

08004608 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004608:	b580      	push	{r7, lr}
 800460a:	b088      	sub	sp, #32
 800460c:	af02      	add	r7, sp, #8
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004616:	f3ef 8305 	mrs	r3, IPSR
 800461a:	60fb      	str	r3, [r7, #12]
  return(result);
 800461c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <osTimerStart+0x22>
    stat = osErrorISR;
 8004622:	f06f 0305 	mvn.w	r3, #5
 8004626:	617b      	str	r3, [r7, #20]
 8004628:	e017      	b.n	800465a <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800462a:	693b      	ldr	r3, [r7, #16]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d103      	bne.n	8004638 <osTimerStart+0x30>
    stat = osErrorParameter;
 8004630:	f06f 0303 	mvn.w	r3, #3
 8004634:	617b      	str	r3, [r7, #20]
 8004636:	e010      	b.n	800465a <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004638:	2300      	movs	r3, #0
 800463a:	9300      	str	r3, [sp, #0]
 800463c:	2300      	movs	r3, #0
 800463e:	683a      	ldr	r2, [r7, #0]
 8004640:	2104      	movs	r1, #4
 8004642:	6938      	ldr	r0, [r7, #16]
 8004644:	f002 fd52 	bl	80070ec <xTimerGenericCommand>
 8004648:	4603      	mov	r3, r0
 800464a:	2b01      	cmp	r3, #1
 800464c:	d102      	bne.n	8004654 <osTimerStart+0x4c>
      stat = osOK;
 800464e:	2300      	movs	r3, #0
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e002      	b.n	800465a <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004654:	f06f 0302 	mvn.w	r3, #2
 8004658:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800465a:	697b      	ldr	r3, [r7, #20]
}
 800465c:	4618      	mov	r0, r3
 800465e:	3718      	adds	r7, #24
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8004664:	b580      	push	{r7, lr}
 8004666:	b088      	sub	sp, #32
 8004668:	af02      	add	r7, sp, #8
 800466a:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004670:	f3ef 8305 	mrs	r3, IPSR
 8004674:	60fb      	str	r3, [r7, #12]
  return(result);
 8004676:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004678:	2b00      	cmp	r3, #0
 800467a:	d003      	beq.n	8004684 <osTimerStop+0x20>
    stat = osErrorISR;
 800467c:	f06f 0305 	mvn.w	r3, #5
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e021      	b.n	80046c8 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d103      	bne.n	8004692 <osTimerStop+0x2e>
    stat = osErrorParameter;
 800468a:	f06f 0303 	mvn.w	r3, #3
 800468e:	617b      	str	r3, [r7, #20]
 8004690:	e01a      	b.n	80046c8 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8004692:	6938      	ldr	r0, [r7, #16]
 8004694:	f003 f830 	bl	80076f8 <xTimerIsTimerActive>
 8004698:	4603      	mov	r3, r0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d103      	bne.n	80046a6 <osTimerStop+0x42>
      stat = osErrorResource;
 800469e:	f06f 0302 	mvn.w	r3, #2
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	e010      	b.n	80046c8 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80046a6:	2300      	movs	r3, #0
 80046a8:	9300      	str	r3, [sp, #0]
 80046aa:	2300      	movs	r3, #0
 80046ac:	2200      	movs	r2, #0
 80046ae:	2103      	movs	r1, #3
 80046b0:	6938      	ldr	r0, [r7, #16]
 80046b2:	f002 fd1b 	bl	80070ec <xTimerGenericCommand>
 80046b6:	4603      	mov	r3, r0
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d102      	bne.n	80046c2 <osTimerStop+0x5e>
        stat = osOK;
 80046bc:	2300      	movs	r3, #0
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e002      	b.n	80046c8 <osTimerStop+0x64>
      } else {
        stat = osError;
 80046c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046c6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80046c8:	697b      	ldr	r3, [r7, #20]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	3718      	adds	r7, #24
 80046ce:	46bd      	mov	sp, r7
 80046d0:	bd80      	pop	{r7, pc}

080046d2 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80046d2:	b580      	push	{r7, lr}
 80046d4:	b086      	sub	sp, #24
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046de:	f3ef 8305 	mrs	r3, IPSR
 80046e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80046e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d102      	bne.n	80046f0 <osTimerIsRunning+0x1e>
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d102      	bne.n	80046f6 <osTimerIsRunning+0x24>
    running = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	617b      	str	r3, [r7, #20]
 80046f4:	e004      	b.n	8004700 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 80046f6:	6938      	ldr	r0, [r7, #16]
 80046f8:	f002 fffe 	bl	80076f8 <xTimerIsTimerActive>
 80046fc:	4603      	mov	r3, r0
 80046fe:	617b      	str	r3, [r7, #20]
  }

  return (running);
 8004700:	697b      	ldr	r3, [r7, #20]
}
 8004702:	4618      	mov	r0, r3
 8004704:	3718      	adds	r7, #24
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800470a:	b580      	push	{r7, lr}
 800470c:	b088      	sub	sp, #32
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8004712:	2300      	movs	r3, #0
 8004714:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004716:	f3ef 8305 	mrs	r3, IPSR
 800471a:	60bb      	str	r3, [r7, #8]
  return(result);
 800471c:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800471e:	2b00      	cmp	r3, #0
 8004720:	d174      	bne.n	800480c <osMutexNew+0x102>
    if (attr != NULL) {
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2b00      	cmp	r3, #0
 8004726:	d003      	beq.n	8004730 <osMutexNew+0x26>
      type = attr->attr_bits;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	61bb      	str	r3, [r7, #24]
 800472e:	e001      	b.n	8004734 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8004730:	2300      	movs	r3, #0
 8004732:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004734:	69bb      	ldr	r3, [r7, #24]
 8004736:	f003 0301 	and.w	r3, r3, #1
 800473a:	2b00      	cmp	r3, #0
 800473c:	d002      	beq.n	8004744 <osMutexNew+0x3a>
      rmtx = 1U;
 800473e:	2301      	movs	r3, #1
 8004740:	617b      	str	r3, [r7, #20]
 8004742:	e001      	b.n	8004748 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004744:	2300      	movs	r3, #0
 8004746:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004748:	69bb      	ldr	r3, [r7, #24]
 800474a:	f003 0308 	and.w	r3, r3, #8
 800474e:	2b00      	cmp	r3, #0
 8004750:	d15c      	bne.n	800480c <osMutexNew+0x102>
      mem = -1;
 8004752:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004756:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d015      	beq.n	800478a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	689b      	ldr	r3, [r3, #8]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d006      	beq.n	8004774 <osMutexNew+0x6a>
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	68db      	ldr	r3, [r3, #12]
 800476a:	2b4f      	cmp	r3, #79	; 0x4f
 800476c:	d902      	bls.n	8004774 <osMutexNew+0x6a>
          mem = 1;
 800476e:	2301      	movs	r3, #1
 8004770:	613b      	str	r3, [r7, #16]
 8004772:	e00c      	b.n	800478e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	689b      	ldr	r3, [r3, #8]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d108      	bne.n	800478e <osMutexNew+0x84>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68db      	ldr	r3, [r3, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d104      	bne.n	800478e <osMutexNew+0x84>
            mem = 0;
 8004784:	2300      	movs	r3, #0
 8004786:	613b      	str	r3, [r7, #16]
 8004788:	e001      	b.n	800478e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d112      	bne.n	80047ba <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8004794:	697b      	ldr	r3, [r7, #20]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	4619      	mov	r1, r3
 80047a0:	2004      	movs	r0, #4
 80047a2:	f000 fc36 	bl	8005012 <xQueueCreateMutexStatic>
 80047a6:	61f8      	str	r0, [r7, #28]
 80047a8:	e016      	b.n	80047d8 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	689b      	ldr	r3, [r3, #8]
 80047ae:	4619      	mov	r1, r3
 80047b0:	2001      	movs	r0, #1
 80047b2:	f000 fc2e 	bl	8005012 <xQueueCreateMutexStatic>
 80047b6:	61f8      	str	r0, [r7, #28]
 80047b8:	e00e      	b.n	80047d8 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10b      	bne.n	80047d8 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d004      	beq.n	80047d0 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80047c6:	2004      	movs	r0, #4
 80047c8:	f000 fc0b 	bl	8004fe2 <xQueueCreateMutex>
 80047cc:	61f8      	str	r0, [r7, #28]
 80047ce:	e003      	b.n	80047d8 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80047d0:	2001      	movs	r0, #1
 80047d2:	f000 fc06 	bl	8004fe2 <xQueueCreateMutex>
 80047d6:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80047d8:	69fb      	ldr	r3, [r7, #28]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d00c      	beq.n	80047f8 <osMutexNew+0xee>
        if (attr != NULL) {
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d003      	beq.n	80047ec <osMutexNew+0xe2>
          name = attr->name;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	60fb      	str	r3, [r7, #12]
 80047ea:	e001      	b.n	80047f0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 80047f0:	68f9      	ldr	r1, [r7, #12]
 80047f2:	69f8      	ldr	r0, [r7, #28]
 80047f4:	f001 fada 	bl	8005dac <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80047f8:	69fb      	ldr	r3, [r7, #28]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d006      	beq.n	800480c <osMutexNew+0x102>
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d003      	beq.n	800480c <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004804:	69fb      	ldr	r3, [r7, #28]
 8004806:	f043 0301 	orr.w	r3, r3, #1
 800480a:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800480c:	69fb      	ldr	r3, [r7, #28]
}
 800480e:	4618      	mov	r0, r3
 8004810:	3720      	adds	r7, #32
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004816:	b580      	push	{r7, lr}
 8004818:	b086      	sub	sp, #24
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f023 0301 	bic.w	r3, r3, #1
 8004826:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f003 0301 	and.w	r3, r3, #1
 800482e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004830:	2300      	movs	r3, #0
 8004832:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004834:	f3ef 8305 	mrs	r3, IPSR
 8004838:	60bb      	str	r3, [r7, #8]
  return(result);
 800483a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8004840:	f06f 0305 	mvn.w	r3, #5
 8004844:	617b      	str	r3, [r7, #20]
 8004846:	e02c      	b.n	80048a2 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	2b00      	cmp	r3, #0
 800484c:	d103      	bne.n	8004856 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800484e:	f06f 0303 	mvn.w	r3, #3
 8004852:	617b      	str	r3, [r7, #20]
 8004854:	e025      	b.n	80048a2 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d011      	beq.n	8004880 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800485c:	6839      	ldr	r1, [r7, #0]
 800485e:	6938      	ldr	r0, [r7, #16]
 8004860:	f000 fc26 	bl	80050b0 <xQueueTakeMutexRecursive>
 8004864:	4603      	mov	r3, r0
 8004866:	2b01      	cmp	r3, #1
 8004868:	d01b      	beq.n	80048a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d003      	beq.n	8004878 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8004870:	f06f 0301 	mvn.w	r3, #1
 8004874:	617b      	str	r3, [r7, #20]
 8004876:	e014      	b.n	80048a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8004878:	f06f 0302 	mvn.w	r3, #2
 800487c:	617b      	str	r3, [r7, #20]
 800487e:	e010      	b.n	80048a2 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8004880:	6839      	ldr	r1, [r7, #0]
 8004882:	6938      	ldr	r0, [r7, #16]
 8004884:	f000 ffba 	bl	80057fc <xQueueSemaphoreTake>
 8004888:	4603      	mov	r3, r0
 800488a:	2b01      	cmp	r3, #1
 800488c:	d009      	beq.n	80048a2 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d003      	beq.n	800489c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8004894:	f06f 0301 	mvn.w	r3, #1
 8004898:	617b      	str	r3, [r7, #20]
 800489a:	e002      	b.n	80048a2 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800489c:	f06f 0302 	mvn.w	r3, #2
 80048a0:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80048a2:	697b      	ldr	r3, [r7, #20]
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3718      	adds	r7, #24
 80048a8:	46bd      	mov	sp, r7
 80048aa:	bd80      	pop	{r7, pc}

080048ac <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b086      	sub	sp, #24
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	f023 0301 	bic.w	r3, r3, #1
 80048ba:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80048c4:	2300      	movs	r3, #0
 80048c6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048c8:	f3ef 8305 	mrs	r3, IPSR
 80048cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80048ce:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d003      	beq.n	80048dc <osMutexRelease+0x30>
    stat = osErrorISR;
 80048d4:	f06f 0305 	mvn.w	r3, #5
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e01f      	b.n	800491c <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d103      	bne.n	80048ea <osMutexRelease+0x3e>
    stat = osErrorParameter;
 80048e2:	f06f 0303 	mvn.w	r3, #3
 80048e6:	617b      	str	r3, [r7, #20]
 80048e8:	e018      	b.n	800491c <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d009      	beq.n	8004904 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 80048f0:	6938      	ldr	r0, [r7, #16]
 80048f2:	f000 fba9 	bl	8005048 <xQueueGiveMutexRecursive>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b01      	cmp	r3, #1
 80048fa:	d00f      	beq.n	800491c <osMutexRelease+0x70>
        stat = osErrorResource;
 80048fc:	f06f 0302 	mvn.w	r3, #2
 8004900:	617b      	str	r3, [r7, #20]
 8004902:	e00b      	b.n	800491c <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004904:	2300      	movs	r3, #0
 8004906:	2200      	movs	r2, #0
 8004908:	2100      	movs	r1, #0
 800490a:	6938      	ldr	r0, [r7, #16]
 800490c:	f000 fc70 	bl	80051f0 <xQueueGenericSend>
 8004910:	4603      	mov	r3, r0
 8004912:	2b01      	cmp	r3, #1
 8004914:	d002      	beq.n	800491c <osMutexRelease+0x70>
        stat = osErrorResource;
 8004916:	f06f 0302 	mvn.w	r3, #2
 800491a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800491c:	697b      	ldr	r3, [r7, #20]
}
 800491e:	4618      	mov	r0, r3
 8004920:	3718      	adds	r7, #24
 8004922:	46bd      	mov	sp, r7
 8004924:	bd80      	pop	{r7, pc}

08004926 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004926:	b580      	push	{r7, lr}
 8004928:	b08a      	sub	sp, #40	; 0x28
 800492a:	af02      	add	r7, sp, #8
 800492c:	60f8      	str	r0, [r7, #12]
 800492e:	60b9      	str	r1, [r7, #8]
 8004930:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004932:	2300      	movs	r3, #0
 8004934:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004936:	f3ef 8305 	mrs	r3, IPSR
 800493a:	613b      	str	r3, [r7, #16]
  return(result);
 800493c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800493e:	2b00      	cmp	r3, #0
 8004940:	d175      	bne.n	8004a2e <osSemaphoreNew+0x108>
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d072      	beq.n	8004a2e <osSemaphoreNew+0x108>
 8004948:	68ba      	ldr	r2, [r7, #8]
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	429a      	cmp	r2, r3
 800494e:	d86e      	bhi.n	8004a2e <osSemaphoreNew+0x108>
    mem = -1;
 8004950:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004954:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d015      	beq.n	8004988 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	689b      	ldr	r3, [r3, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d006      	beq.n	8004972 <osSemaphoreNew+0x4c>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b4f      	cmp	r3, #79	; 0x4f
 800496a:	d902      	bls.n	8004972 <osSemaphoreNew+0x4c>
        mem = 1;
 800496c:	2301      	movs	r3, #1
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	e00c      	b.n	800498c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d108      	bne.n	800498c <osSemaphoreNew+0x66>
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d104      	bne.n	800498c <osSemaphoreNew+0x66>
          mem = 0;
 8004982:	2300      	movs	r3, #0
 8004984:	61bb      	str	r3, [r7, #24]
 8004986:	e001      	b.n	800498c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004988:	2300      	movs	r3, #0
 800498a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004992:	d04c      	beq.n	8004a2e <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b01      	cmp	r3, #1
 8004998:	d128      	bne.n	80049ec <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800499a:	69bb      	ldr	r3, [r7, #24]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d10a      	bne.n	80049b6 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	2203      	movs	r2, #3
 80049a6:	9200      	str	r2, [sp, #0]
 80049a8:	2200      	movs	r2, #0
 80049aa:	2100      	movs	r1, #0
 80049ac:	2001      	movs	r0, #1
 80049ae:	f000 fa29 	bl	8004e04 <xQueueGenericCreateStatic>
 80049b2:	61f8      	str	r0, [r7, #28]
 80049b4:	e005      	b.n	80049c2 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80049b6:	2203      	movs	r2, #3
 80049b8:	2100      	movs	r1, #0
 80049ba:	2001      	movs	r0, #1
 80049bc:	f000 fa9a 	bl	8004ef4 <xQueueGenericCreate>
 80049c0:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d022      	beq.n	8004a0e <osSemaphoreNew+0xe8>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d01f      	beq.n	8004a0e <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80049ce:	2300      	movs	r3, #0
 80049d0:	2200      	movs	r2, #0
 80049d2:	2100      	movs	r1, #0
 80049d4:	69f8      	ldr	r0, [r7, #28]
 80049d6:	f000 fc0b 	bl	80051f0 <xQueueGenericSend>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d016      	beq.n	8004a0e <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80049e0:	69f8      	ldr	r0, [r7, #28]
 80049e2:	f001 f897 	bl	8005b14 <vQueueDelete>
            hSemaphore = NULL;
 80049e6:	2300      	movs	r3, #0
 80049e8:	61fb      	str	r3, [r7, #28]
 80049ea:	e010      	b.n	8004a0e <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b01      	cmp	r3, #1
 80049f0:	d108      	bne.n	8004a04 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	461a      	mov	r2, r3
 80049f8:	68b9      	ldr	r1, [r7, #8]
 80049fa:	68f8      	ldr	r0, [r7, #12]
 80049fc:	f000 fb8e 	bl	800511c <xQueueCreateCountingSemaphoreStatic>
 8004a00:	61f8      	str	r0, [r7, #28]
 8004a02:	e004      	b.n	8004a0e <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004a04:	68b9      	ldr	r1, [r7, #8]
 8004a06:	68f8      	ldr	r0, [r7, #12]
 8004a08:	f000 fbbf 	bl	800518a <xQueueCreateCountingSemaphore>
 8004a0c:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00c      	beq.n	8004a2e <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	e001      	b.n	8004a26 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004a26:	6979      	ldr	r1, [r7, #20]
 8004a28:	69f8      	ldr	r0, [r7, #28]
 8004a2a:	f001 f9bf 	bl	8005dac <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3720      	adds	r7, #32
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
 8004a40:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004a4a:	693b      	ldr	r3, [r7, #16]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d103      	bne.n	8004a58 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004a50:	f06f 0303 	mvn.w	r3, #3
 8004a54:	617b      	str	r3, [r7, #20]
 8004a56:	e039      	b.n	8004acc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a58:	f3ef 8305 	mrs	r3, IPSR
 8004a5c:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a5e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d022      	beq.n	8004aaa <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004a6a:	f06f 0303 	mvn.w	r3, #3
 8004a6e:	617b      	str	r3, [r7, #20]
 8004a70:	e02c      	b.n	8004acc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004a76:	f107 0308 	add.w	r3, r7, #8
 8004a7a:	461a      	mov	r2, r3
 8004a7c:	2100      	movs	r1, #0
 8004a7e:	6938      	ldr	r0, [r7, #16]
 8004a80:	f000 ffc8 	bl	8005a14 <xQueueReceiveFromISR>
 8004a84:	4603      	mov	r3, r0
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d003      	beq.n	8004a92 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004a8a:	f06f 0302 	mvn.w	r3, #2
 8004a8e:	617b      	str	r3, [r7, #20]
 8004a90:	e01c      	b.n	8004acc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d019      	beq.n	8004acc <osSemaphoreAcquire+0x94>
 8004a98:	4b0f      	ldr	r3, [pc, #60]	; (8004ad8 <osSemaphoreAcquire+0xa0>)
 8004a9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a9e:	601a      	str	r2, [r3, #0]
 8004aa0:	f3bf 8f4f 	dsb	sy
 8004aa4:	f3bf 8f6f 	isb	sy
 8004aa8:	e010      	b.n	8004acc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004aaa:	6839      	ldr	r1, [r7, #0]
 8004aac:	6938      	ldr	r0, [r7, #16]
 8004aae:	f000 fea5 	bl	80057fc <xQueueSemaphoreTake>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d009      	beq.n	8004acc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004abe:	f06f 0301 	mvn.w	r3, #1
 8004ac2:	617b      	str	r3, [r7, #20]
 8004ac4:	e002      	b.n	8004acc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004ac6:	f06f 0302 	mvn.w	r3, #2
 8004aca:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004acc:	697b      	ldr	r3, [r7, #20]
}
 8004ace:	4618      	mov	r0, r3
 8004ad0:	3718      	adds	r7, #24
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}
 8004ad6:	bf00      	nop
 8004ad8:	e000ed04 	.word	0xe000ed04

08004adc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004adc:	b580      	push	{r7, lr}
 8004ade:	b086      	sub	sp, #24
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004ae8:	2300      	movs	r3, #0
 8004aea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d103      	bne.n	8004afa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004af2:	f06f 0303 	mvn.w	r3, #3
 8004af6:	617b      	str	r3, [r7, #20]
 8004af8:	e02c      	b.n	8004b54 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004afa:	f3ef 8305 	mrs	r3, IPSR
 8004afe:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b00:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d01a      	beq.n	8004b3c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004b06:	2300      	movs	r3, #0
 8004b08:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004b0a:	f107 0308 	add.w	r3, r7, #8
 8004b0e:	4619      	mov	r1, r3
 8004b10:	6938      	ldr	r0, [r7, #16]
 8004b12:	f000 fd06 	bl	8005522 <xQueueGiveFromISR>
 8004b16:	4603      	mov	r3, r0
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d003      	beq.n	8004b24 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004b1c:	f06f 0302 	mvn.w	r3, #2
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e017      	b.n	8004b54 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004b24:	68bb      	ldr	r3, [r7, #8]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d014      	beq.n	8004b54 <osSemaphoreRelease+0x78>
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	; (8004b60 <osSemaphoreRelease+0x84>)
 8004b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b30:	601a      	str	r2, [r3, #0]
 8004b32:	f3bf 8f4f 	dsb	sy
 8004b36:	f3bf 8f6f 	isb	sy
 8004b3a:	e00b      	b.n	8004b54 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	2200      	movs	r2, #0
 8004b40:	2100      	movs	r1, #0
 8004b42:	6938      	ldr	r0, [r7, #16]
 8004b44:	f000 fb54 	bl	80051f0 <xQueueGenericSend>
 8004b48:	4603      	mov	r3, r0
 8004b4a:	2b01      	cmp	r3, #1
 8004b4c:	d002      	beq.n	8004b54 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004b4e:	f06f 0302 	mvn.w	r3, #2
 8004b52:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004b54:	697b      	ldr	r3, [r7, #20]
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3718      	adds	r7, #24
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	bf00      	nop
 8004b60:	e000ed04 	.word	0xe000ed04

08004b64 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004b64:	b480      	push	{r7}
 8004b66:	b085      	sub	sp, #20
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4a07      	ldr	r2, [pc, #28]	; (8004b90 <vApplicationGetIdleTaskMemory+0x2c>)
 8004b74:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	4a06      	ldr	r2, [pc, #24]	; (8004b94 <vApplicationGetIdleTaskMemory+0x30>)
 8004b7a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	2280      	movs	r2, #128	; 0x80
 8004b80:	601a      	str	r2, [r3, #0]
}
 8004b82:	bf00      	nop
 8004b84:	3714      	adds	r7, #20
 8004b86:	46bd      	mov	sp, r7
 8004b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8c:	4770      	bx	lr
 8004b8e:	bf00      	nop
 8004b90:	200001f4 	.word	0x200001f4
 8004b94:	2000029c 	.word	0x2000029c

08004b98 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004ba8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	4a06      	ldr	r2, [pc, #24]	; (8004bc8 <vApplicationGetTimerTaskMemory+0x30>)
 8004bae:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bb6:	601a      	str	r2, [r3, #0]
}
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	2000049c 	.word	0x2000049c
 8004bc8:	20000544 	.word	0x20000544

08004bcc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b083      	sub	sp, #12
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f103 0208 	add.w	r2, r3, #8
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004be4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	f103 0208 	add.w	r2, r3, #8
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f103 0208 	add.w	r2, r3, #8
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c00:	bf00      	nop
 8004c02:	370c      	adds	r7, #12
 8004c04:	46bd      	mov	sp, r7
 8004c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0a:	4770      	bx	lr

08004c0c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c0c:	b480      	push	{r7}
 8004c0e:	b083      	sub	sp, #12
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2200      	movs	r2, #0
 8004c18:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c1a:	bf00      	nop
 8004c1c:	370c      	adds	r7, #12
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c24:	4770      	bx	lr

08004c26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c26:	b480      	push	{r7}
 8004c28:	b085      	sub	sp, #20
 8004c2a:	af00      	add	r7, sp, #0
 8004c2c:	6078      	str	r0, [r7, #4]
 8004c2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	68fa      	ldr	r2, [r7, #12]
 8004c3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	689a      	ldr	r2, [r3, #8]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	689b      	ldr	r3, [r3, #8]
 8004c48:	683a      	ldr	r2, [r7, #0]
 8004c4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	683a      	ldr	r2, [r7, #0]
 8004c50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	1c5a      	adds	r2, r3, #1
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	601a      	str	r2, [r3, #0]
}
 8004c62:	bf00      	nop
 8004c64:	3714      	adds	r7, #20
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr

08004c6e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c6e:	b480      	push	{r7}
 8004c70:	b085      	sub	sp, #20
 8004c72:	af00      	add	r7, sp, #0
 8004c74:	6078      	str	r0, [r7, #4]
 8004c76:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c84:	d103      	bne.n	8004c8e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	60fb      	str	r3, [r7, #12]
 8004c8c:	e00c      	b.n	8004ca8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	3308      	adds	r3, #8
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e002      	b.n	8004c9c <vListInsert+0x2e>
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	685b      	ldr	r3, [r3, #4]
 8004c9a:	60fb      	str	r3, [r7, #12]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	429a      	cmp	r2, r3
 8004ca6:	d2f6      	bcs.n	8004c96 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	683b      	ldr	r3, [r7, #0]
 8004cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	683a      	ldr	r2, [r7, #0]
 8004cb6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	683a      	ldr	r2, [r7, #0]
 8004cc2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	1c5a      	adds	r2, r3, #1
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	601a      	str	r2, [r3, #0]
}
 8004cd4:	bf00      	nop
 8004cd6:	3714      	adds	r7, #20
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cde:	4770      	bx	lr

08004ce0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b085      	sub	sp, #20
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	691b      	ldr	r3, [r3, #16]
 8004cec:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	687a      	ldr	r2, [r7, #4]
 8004cf4:	6892      	ldr	r2, [r2, #8]
 8004cf6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	6852      	ldr	r2, [r2, #4]
 8004d00:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d103      	bne.n	8004d14 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	689a      	ldr	r2, [r3, #8]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	1e5a      	subs	r2, r3, #1
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b084      	sub	sp, #16
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d10a      	bne.n	8004d5e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4c:	f383 8811 	msr	BASEPRI, r3
 8004d50:	f3bf 8f6f 	isb	sy
 8004d54:	f3bf 8f4f 	dsb	sy
 8004d58:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d5a:	bf00      	nop
 8004d5c:	e7fe      	b.n	8004d5c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d5e:	f002 fe41 	bl	80079e4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681a      	ldr	r2, [r3, #0]
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d6a:	68f9      	ldr	r1, [r7, #12]
 8004d6c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d6e:	fb01 f303 	mul.w	r3, r1, r3
 8004d72:	441a      	add	r2, r3
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8e:	3b01      	subs	r3, #1
 8004d90:	68f9      	ldr	r1, [r7, #12]
 8004d92:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004d94:	fb01 f303 	mul.w	r3, r1, r3
 8004d98:	441a      	add	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	22ff      	movs	r2, #255	; 0xff
 8004da2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	22ff      	movs	r2, #255	; 0xff
 8004daa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dae:	683b      	ldr	r3, [r7, #0]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d114      	bne.n	8004dde <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d01a      	beq.n	8004df2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	3310      	adds	r3, #16
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f001 fd01 	bl	80067c8 <xTaskRemoveFromEventList>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d012      	beq.n	8004df2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004dcc:	4b0c      	ldr	r3, [pc, #48]	; (8004e00 <xQueueGenericReset+0xcc>)
 8004dce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd2:	601a      	str	r2, [r3, #0]
 8004dd4:	f3bf 8f4f 	dsb	sy
 8004dd8:	f3bf 8f6f 	isb	sy
 8004ddc:	e009      	b.n	8004df2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	3310      	adds	r3, #16
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7ff fef2 	bl	8004bcc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	3324      	adds	r3, #36	; 0x24
 8004dec:	4618      	mov	r0, r3
 8004dee:	f7ff feed 	bl	8004bcc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004df2:	f002 fe27 	bl	8007a44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004df6:	2301      	movs	r3, #1
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3710      	adds	r7, #16
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	e000ed04 	.word	0xe000ed04

08004e04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b08e      	sub	sp, #56	; 0x38
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
 8004e10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d10a      	bne.n	8004e2e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e1c:	f383 8811 	msr	BASEPRI, r3
 8004e20:	f3bf 8f6f 	isb	sy
 8004e24:	f3bf 8f4f 	dsb	sy
 8004e28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e2a:	bf00      	nop
 8004e2c:	e7fe      	b.n	8004e2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d10a      	bne.n	8004e4a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e38:	f383 8811 	msr	BASEPRI, r3
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	f3bf 8f4f 	dsb	sy
 8004e44:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e46:	bf00      	nop
 8004e48:	e7fe      	b.n	8004e48 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d002      	beq.n	8004e56 <xQueueGenericCreateStatic+0x52>
 8004e50:	68bb      	ldr	r3, [r7, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d001      	beq.n	8004e5a <xQueueGenericCreateStatic+0x56>
 8004e56:	2301      	movs	r3, #1
 8004e58:	e000      	b.n	8004e5c <xQueueGenericCreateStatic+0x58>
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	623b      	str	r3, [r7, #32]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d102      	bne.n	8004e82 <xQueueGenericCreateStatic+0x7e>
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d101      	bne.n	8004e86 <xQueueGenericCreateStatic+0x82>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <xQueueGenericCreateStatic+0x84>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d10a      	bne.n	8004ea2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e90:	f383 8811 	msr	BASEPRI, r3
 8004e94:	f3bf 8f6f 	isb	sy
 8004e98:	f3bf 8f4f 	dsb	sy
 8004e9c:	61fb      	str	r3, [r7, #28]
}
 8004e9e:	bf00      	nop
 8004ea0:	e7fe      	b.n	8004ea0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ea2:	2350      	movs	r3, #80	; 0x50
 8004ea4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b50      	cmp	r3, #80	; 0x50
 8004eaa:	d00a      	beq.n	8004ec2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb0:	f383 8811 	msr	BASEPRI, r3
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	f3bf 8f4f 	dsb	sy
 8004ebc:	61bb      	str	r3, [r7, #24]
}
 8004ebe:	bf00      	nop
 8004ec0:	e7fe      	b.n	8004ec0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ec2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00d      	beq.n	8004eea <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed0:	2201      	movs	r2, #1
 8004ed2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ed6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	9300      	str	r3, [sp, #0]
 8004ede:	4613      	mov	r3, r2
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	68b9      	ldr	r1, [r7, #8]
 8004ee4:	68f8      	ldr	r0, [r7, #12]
 8004ee6:	f000 f83f 	bl	8004f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004eea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004eec:	4618      	mov	r0, r3
 8004eee:	3730      	adds	r7, #48	; 0x30
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	bd80      	pop	{r7, pc}

08004ef4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b08a      	sub	sp, #40	; 0x28
 8004ef8:	af02      	add	r7, sp, #8
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	4613      	mov	r3, r2
 8004f00:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d10a      	bne.n	8004f1e <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f0c:	f383 8811 	msr	BASEPRI, r3
 8004f10:	f3bf 8f6f 	isb	sy
 8004f14:	f3bf 8f4f 	dsb	sy
 8004f18:	613b      	str	r3, [r7, #16]
}
 8004f1a:	bf00      	nop
 8004f1c:	e7fe      	b.n	8004f1c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	68ba      	ldr	r2, [r7, #8]
 8004f22:	fb02 f303 	mul.w	r3, r2, r3
 8004f26:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	3350      	adds	r3, #80	; 0x50
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f002 fe7b 	bl	8007c28 <pvPortMalloc>
 8004f32:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d011      	beq.n	8004f5e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	3350      	adds	r3, #80	; 0x50
 8004f42:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	2200      	movs	r2, #0
 8004f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f4c:	79fa      	ldrb	r2, [r7, #7]
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	9300      	str	r3, [sp, #0]
 8004f52:	4613      	mov	r3, r2
 8004f54:	697a      	ldr	r2, [r7, #20]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	68f8      	ldr	r0, [r7, #12]
 8004f5a:	f000 f805 	bl	8004f68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f5e:	69bb      	ldr	r3, [r7, #24]
	}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3720      	adds	r7, #32
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b084      	sub	sp, #16
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	60f8      	str	r0, [r7, #12]
 8004f70:	60b9      	str	r1, [r7, #8]
 8004f72:	607a      	str	r2, [r7, #4]
 8004f74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d103      	bne.n	8004f84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	601a      	str	r2, [r3, #0]
 8004f82:	e002      	b.n	8004f8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	68fa      	ldr	r2, [r7, #12]
 8004f8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	68ba      	ldr	r2, [r7, #8]
 8004f94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004f96:	2101      	movs	r1, #1
 8004f98:	69b8      	ldr	r0, [r7, #24]
 8004f9a:	f7ff fecb 	bl	8004d34 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	78fa      	ldrb	r2, [r7, #3]
 8004fa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004fae:	b580      	push	{r7, lr}
 8004fb0:	b082      	sub	sp, #8
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00e      	beq.n	8004fda <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2200      	movs	r2, #0
 8004fcc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004fce:	2300      	movs	r3, #0
 8004fd0:	2200      	movs	r2, #0
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f000 f90b 	bl	80051f0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004fda:	bf00      	nop
 8004fdc:	3708      	adds	r7, #8
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}

08004fe2 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004fe2:	b580      	push	{r7, lr}
 8004fe4:	b086      	sub	sp, #24
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	4603      	mov	r3, r0
 8004fea:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004fec:	2301      	movs	r3, #1
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004ff4:	79fb      	ldrb	r3, [r7, #7]
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	6939      	ldr	r1, [r7, #16]
 8004ffa:	6978      	ldr	r0, [r7, #20]
 8004ffc:	f7ff ff7a 	bl	8004ef4 <xQueueGenericCreate>
 8005000:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005002:	68f8      	ldr	r0, [r7, #12]
 8005004:	f7ff ffd3 	bl	8004fae <prvInitialiseMutex>

		return xNewQueue;
 8005008:	68fb      	ldr	r3, [r7, #12]
	}
 800500a:	4618      	mov	r0, r3
 800500c:	3718      	adds	r7, #24
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}

08005012 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8005012:	b580      	push	{r7, lr}
 8005014:	b088      	sub	sp, #32
 8005016:	af02      	add	r7, sp, #8
 8005018:	4603      	mov	r3, r0
 800501a:	6039      	str	r1, [r7, #0]
 800501c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800501e:	2301      	movs	r3, #1
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	2300      	movs	r3, #0
 8005024:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005026:	79fb      	ldrb	r3, [r7, #7]
 8005028:	9300      	str	r3, [sp, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	2200      	movs	r2, #0
 800502e:	6939      	ldr	r1, [r7, #16]
 8005030:	6978      	ldr	r0, [r7, #20]
 8005032:	f7ff fee7 	bl	8004e04 <xQueueGenericCreateStatic>
 8005036:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005038:	68f8      	ldr	r0, [r7, #12]
 800503a:	f7ff ffb8 	bl	8004fae <prvInitialiseMutex>

		return xNewQueue;
 800503e:	68fb      	ldr	r3, [r7, #12]
	}
 8005040:	4618      	mov	r0, r3
 8005042:	3718      	adds	r7, #24
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}

08005048 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b087      	sub	sp, #28
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d10a      	bne.n	8005070 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800505a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800505e:	f383 8811 	msr	BASEPRI, r3
 8005062:	f3bf 8f6f 	isb	sy
 8005066:	f3bf 8f4f 	dsb	sy
 800506a:	60fb      	str	r3, [r7, #12]
}
 800506c:	bf00      	nop
 800506e:	e7fe      	b.n	800506e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	689c      	ldr	r4, [r3, #8]
 8005074:	f001 fd6a 	bl	8006b4c <xTaskGetCurrentTaskHandle>
 8005078:	4603      	mov	r3, r0
 800507a:	429c      	cmp	r4, r3
 800507c:	d111      	bne.n	80050a2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	1e5a      	subs	r2, r3, #1
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8005088:	693b      	ldr	r3, [r7, #16]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d105      	bne.n	800509c <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8005090:	2300      	movs	r3, #0
 8005092:	2200      	movs	r2, #0
 8005094:	2100      	movs	r1, #0
 8005096:	6938      	ldr	r0, [r7, #16]
 8005098:	f000 f8aa 	bl	80051f0 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800509c:	2301      	movs	r3, #1
 800509e:	617b      	str	r3, [r7, #20]
 80050a0:	e001      	b.n	80050a6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80050a2:	2300      	movs	r3, #0
 80050a4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80050a6:	697b      	ldr	r3, [r7, #20]
	}
 80050a8:	4618      	mov	r0, r3
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd90      	pop	{r4, r7, pc}

080050b0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d10a      	bne.n	80050da <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80050c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c8:	f383 8811 	msr	BASEPRI, r3
 80050cc:	f3bf 8f6f 	isb	sy
 80050d0:	f3bf 8f4f 	dsb	sy
 80050d4:	60fb      	str	r3, [r7, #12]
}
 80050d6:	bf00      	nop
 80050d8:	e7fe      	b.n	80050d8 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	689c      	ldr	r4, [r3, #8]
 80050de:	f001 fd35 	bl	8006b4c <xTaskGetCurrentTaskHandle>
 80050e2:	4603      	mov	r3, r0
 80050e4:	429c      	cmp	r4, r3
 80050e6:	d107      	bne.n	80050f8 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80050f2:	2301      	movs	r3, #1
 80050f4:	617b      	str	r3, [r7, #20]
 80050f6:	e00c      	b.n	8005112 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80050f8:	6839      	ldr	r1, [r7, #0]
 80050fa:	6938      	ldr	r0, [r7, #16]
 80050fc:	f000 fb7e 	bl	80057fc <xQueueSemaphoreTake>
 8005100:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d004      	beq.n	8005112 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8005112:	697b      	ldr	r3, [r7, #20]
	}
 8005114:	4618      	mov	r0, r3
 8005116:	371c      	adds	r7, #28
 8005118:	46bd      	mov	sp, r7
 800511a:	bd90      	pop	{r4, r7, pc}

0800511c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b08a      	sub	sp, #40	; 0x28
 8005120:	af02      	add	r7, sp, #8
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d10a      	bne.n	8005144 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800512e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005132:	f383 8811 	msr	BASEPRI, r3
 8005136:	f3bf 8f6f 	isb	sy
 800513a:	f3bf 8f4f 	dsb	sy
 800513e:	61bb      	str	r3, [r7, #24]
}
 8005140:	bf00      	nop
 8005142:	e7fe      	b.n	8005142 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005144:	68ba      	ldr	r2, [r7, #8]
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	429a      	cmp	r2, r3
 800514a:	d90a      	bls.n	8005162 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800514c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005150:	f383 8811 	msr	BASEPRI, r3
 8005154:	f3bf 8f6f 	isb	sy
 8005158:	f3bf 8f4f 	dsb	sy
 800515c:	617b      	str	r3, [r7, #20]
}
 800515e:	bf00      	nop
 8005160:	e7fe      	b.n	8005160 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8005162:	2302      	movs	r3, #2
 8005164:	9300      	str	r3, [sp, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2200      	movs	r2, #0
 800516a:	2100      	movs	r1, #0
 800516c:	68f8      	ldr	r0, [r7, #12]
 800516e:	f7ff fe49 	bl	8004e04 <xQueueGenericCreateStatic>
 8005172:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8005174:	69fb      	ldr	r3, [r7, #28]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d002      	beq.n	8005180 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005180:	69fb      	ldr	r3, [r7, #28]
	}
 8005182:	4618      	mov	r0, r3
 8005184:	3720      	adds	r7, #32
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800518a:	b580      	push	{r7, lr}
 800518c:	b086      	sub	sp, #24
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
 8005192:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10a      	bne.n	80051b0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800519a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519e:	f383 8811 	msr	BASEPRI, r3
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	f3bf 8f4f 	dsb	sy
 80051aa:	613b      	str	r3, [r7, #16]
}
 80051ac:	bf00      	nop
 80051ae:	e7fe      	b.n	80051ae <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d90a      	bls.n	80051ce <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80051b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051bc:	f383 8811 	msr	BASEPRI, r3
 80051c0:	f3bf 8f6f 	isb	sy
 80051c4:	f3bf 8f4f 	dsb	sy
 80051c8:	60fb      	str	r3, [r7, #12]
}
 80051ca:	bf00      	nop
 80051cc:	e7fe      	b.n	80051cc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80051ce:	2202      	movs	r2, #2
 80051d0:	2100      	movs	r1, #0
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f7ff fe8e 	bl	8004ef4 <xQueueGenericCreate>
 80051d8:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80051da:	697b      	ldr	r3, [r7, #20]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d002      	beq.n	80051e6 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80051e6:	697b      	ldr	r3, [r7, #20]
	}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3718      	adds	r7, #24
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08e      	sub	sp, #56	; 0x38
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80051fe:	2300      	movs	r3, #0
 8005200:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	2b00      	cmp	r3, #0
 800520a:	d10a      	bne.n	8005222 <xQueueGenericSend+0x32>
	__asm volatile
 800520c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005210:	f383 8811 	msr	BASEPRI, r3
 8005214:	f3bf 8f6f 	isb	sy
 8005218:	f3bf 8f4f 	dsb	sy
 800521c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800521e:	bf00      	nop
 8005220:	e7fe      	b.n	8005220 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <xQueueGenericSend+0x40>
 8005228:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <xQueueGenericSend+0x44>
 8005230:	2301      	movs	r3, #1
 8005232:	e000      	b.n	8005236 <xQueueGenericSend+0x46>
 8005234:	2300      	movs	r3, #0
 8005236:	2b00      	cmp	r3, #0
 8005238:	d10a      	bne.n	8005250 <xQueueGenericSend+0x60>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800524c:	bf00      	nop
 800524e:	e7fe      	b.n	800524e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d103      	bne.n	800525e <xQueueGenericSend+0x6e>
 8005256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800525a:	2b01      	cmp	r3, #1
 800525c:	d101      	bne.n	8005262 <xQueueGenericSend+0x72>
 800525e:	2301      	movs	r3, #1
 8005260:	e000      	b.n	8005264 <xQueueGenericSend+0x74>
 8005262:	2300      	movs	r3, #0
 8005264:	2b00      	cmp	r3, #0
 8005266:	d10a      	bne.n	800527e <xQueueGenericSend+0x8e>
	__asm volatile
 8005268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526c:	f383 8811 	msr	BASEPRI, r3
 8005270:	f3bf 8f6f 	isb	sy
 8005274:	f3bf 8f4f 	dsb	sy
 8005278:	623b      	str	r3, [r7, #32]
}
 800527a:	bf00      	nop
 800527c:	e7fe      	b.n	800527c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800527e:	f001 fc75 	bl	8006b6c <xTaskGetSchedulerState>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d102      	bne.n	800528e <xQueueGenericSend+0x9e>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d101      	bne.n	8005292 <xQueueGenericSend+0xa2>
 800528e:	2301      	movs	r3, #1
 8005290:	e000      	b.n	8005294 <xQueueGenericSend+0xa4>
 8005292:	2300      	movs	r3, #0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d10a      	bne.n	80052ae <xQueueGenericSend+0xbe>
	__asm volatile
 8005298:	f04f 0350 	mov.w	r3, #80	; 0x50
 800529c:	f383 8811 	msr	BASEPRI, r3
 80052a0:	f3bf 8f6f 	isb	sy
 80052a4:	f3bf 8f4f 	dsb	sy
 80052a8:	61fb      	str	r3, [r7, #28]
}
 80052aa:	bf00      	nop
 80052ac:	e7fe      	b.n	80052ac <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052ae:	f002 fb99 	bl	80079e4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d302      	bcc.n	80052c4 <xQueueGenericSend+0xd4>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b02      	cmp	r3, #2
 80052c2:	d129      	bne.n	8005318 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052ca:	f000 fc5e 	bl	8005b8a <prvCopyDataToQueue>
 80052ce:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80052d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d010      	beq.n	80052fa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80052d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052da:	3324      	adds	r3, #36	; 0x24
 80052dc:	4618      	mov	r0, r3
 80052de:	f001 fa73 	bl	80067c8 <xTaskRemoveFromEventList>
 80052e2:	4603      	mov	r3, r0
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d013      	beq.n	8005310 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80052e8:	4b3f      	ldr	r3, [pc, #252]	; (80053e8 <xQueueGenericSend+0x1f8>)
 80052ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ee:	601a      	str	r2, [r3, #0]
 80052f0:	f3bf 8f4f 	dsb	sy
 80052f4:	f3bf 8f6f 	isb	sy
 80052f8:	e00a      	b.n	8005310 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80052fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d007      	beq.n	8005310 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005300:	4b39      	ldr	r3, [pc, #228]	; (80053e8 <xQueueGenericSend+0x1f8>)
 8005302:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005306:	601a      	str	r2, [r3, #0]
 8005308:	f3bf 8f4f 	dsb	sy
 800530c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005310:	f002 fb98 	bl	8007a44 <vPortExitCritical>
				return pdPASS;
 8005314:	2301      	movs	r3, #1
 8005316:	e063      	b.n	80053e0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d103      	bne.n	8005326 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800531e:	f002 fb91 	bl	8007a44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005322:	2300      	movs	r3, #0
 8005324:	e05c      	b.n	80053e0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005328:	2b00      	cmp	r3, #0
 800532a:	d106      	bne.n	800533a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800532c:	f107 0314 	add.w	r3, r7, #20
 8005330:	4618      	mov	r0, r3
 8005332:	f001 faad 	bl	8006890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005336:	2301      	movs	r3, #1
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800533a:	f002 fb83 	bl	8007a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800533e:	f001 f819 	bl	8006374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005342:	f002 fb4f 	bl	80079e4 <vPortEnterCritical>
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800534c:	b25b      	sxtb	r3, r3
 800534e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005352:	d103      	bne.n	800535c <xQueueGenericSend+0x16c>
 8005354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005356:	2200      	movs	r2, #0
 8005358:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005362:	b25b      	sxtb	r3, r3
 8005364:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005368:	d103      	bne.n	8005372 <xQueueGenericSend+0x182>
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	2200      	movs	r2, #0
 800536e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005372:	f002 fb67 	bl	8007a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005376:	1d3a      	adds	r2, r7, #4
 8005378:	f107 0314 	add.w	r3, r7, #20
 800537c:	4611      	mov	r1, r2
 800537e:	4618      	mov	r0, r3
 8005380:	f001 fa9c 	bl	80068bc <xTaskCheckForTimeOut>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d124      	bne.n	80053d4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800538a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800538c:	f000 fcf5 	bl	8005d7a <prvIsQueueFull>
 8005390:	4603      	mov	r3, r0
 8005392:	2b00      	cmp	r3, #0
 8005394:	d018      	beq.n	80053c8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005398:	3310      	adds	r3, #16
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	4611      	mov	r1, r2
 800539e:	4618      	mov	r0, r3
 80053a0:	f001 f9c2 	bl	8006728 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053a6:	f000 fc80 	bl	8005caa <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053aa:	f000 fff1 	bl	8006390 <xTaskResumeAll>
 80053ae:	4603      	mov	r3, r0
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	f47f af7c 	bne.w	80052ae <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053b6:	4b0c      	ldr	r3, [pc, #48]	; (80053e8 <xQueueGenericSend+0x1f8>)
 80053b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	e772      	b.n	80052ae <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80053c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053ca:	f000 fc6e 	bl	8005caa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ce:	f000 ffdf 	bl	8006390 <xTaskResumeAll>
 80053d2:	e76c      	b.n	80052ae <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80053d4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053d6:	f000 fc68 	bl	8005caa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053da:	f000 ffd9 	bl	8006390 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80053de:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3738      	adds	r7, #56	; 0x38
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bd80      	pop	{r7, pc}
 80053e8:	e000ed04 	.word	0xe000ed04

080053ec <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b090      	sub	sp, #64	; 0x40
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	607a      	str	r2, [r7, #4]
 80053f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80053fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d103      	bne.n	8005428 <xQueueGenericSendFromISR+0x3c>
 8005420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005424:	2b00      	cmp	r3, #0
 8005426:	d101      	bne.n	800542c <xQueueGenericSendFromISR+0x40>
 8005428:	2301      	movs	r3, #1
 800542a:	e000      	b.n	800542e <xQueueGenericSendFromISR+0x42>
 800542c:	2300      	movs	r3, #0
 800542e:	2b00      	cmp	r3, #0
 8005430:	d10a      	bne.n	8005448 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005436:	f383 8811 	msr	BASEPRI, r3
 800543a:	f3bf 8f6f 	isb	sy
 800543e:	f3bf 8f4f 	dsb	sy
 8005442:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005444:	bf00      	nop
 8005446:	e7fe      	b.n	8005446 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d103      	bne.n	8005456 <xQueueGenericSendFromISR+0x6a>
 800544e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005452:	2b01      	cmp	r3, #1
 8005454:	d101      	bne.n	800545a <xQueueGenericSendFromISR+0x6e>
 8005456:	2301      	movs	r3, #1
 8005458:	e000      	b.n	800545c <xQueueGenericSendFromISR+0x70>
 800545a:	2300      	movs	r3, #0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d10a      	bne.n	8005476 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	623b      	str	r3, [r7, #32]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005476:	f002 fb97 	bl	8007ba8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800547a:	f3ef 8211 	mrs	r2, BASEPRI
 800547e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005482:	f383 8811 	msr	BASEPRI, r3
 8005486:	f3bf 8f6f 	isb	sy
 800548a:	f3bf 8f4f 	dsb	sy
 800548e:	61fa      	str	r2, [r7, #28]
 8005490:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005492:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005494:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800549a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800549c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549e:	429a      	cmp	r2, r3
 80054a0:	d302      	bcc.n	80054a8 <xQueueGenericSendFromISR+0xbc>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d12f      	bne.n	8005508 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054be:	f000 fb64 	bl	8005b8a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054c2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80054c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ca:	d112      	bne.n	80054f2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d016      	beq.n	8005502 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80054d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d6:	3324      	adds	r3, #36	; 0x24
 80054d8:	4618      	mov	r0, r3
 80054da:	f001 f975 	bl	80067c8 <xTaskRemoveFromEventList>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d00e      	beq.n	8005502 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d00b      	beq.n	8005502 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]
 80054f0:	e007      	b.n	8005502 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80054f2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80054f6:	3301      	adds	r3, #1
 80054f8:	b2db      	uxtb	r3, r3
 80054fa:	b25a      	sxtb	r2, r3
 80054fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005502:	2301      	movs	r3, #1
 8005504:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005506:	e001      	b.n	800550c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005508:	2300      	movs	r3, #0
 800550a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800550c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800550e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005516:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005518:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800551a:	4618      	mov	r0, r3
 800551c:	3740      	adds	r7, #64	; 0x40
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}

08005522 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005522:	b580      	push	{r7, lr}
 8005524:	b08e      	sub	sp, #56	; 0x38
 8005526:	af00      	add	r7, sp, #0
 8005528:	6078      	str	r0, [r7, #4]
 800552a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005532:	2b00      	cmp	r3, #0
 8005534:	d10a      	bne.n	800554c <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005536:	f04f 0350 	mov.w	r3, #80	; 0x50
 800553a:	f383 8811 	msr	BASEPRI, r3
 800553e:	f3bf 8f6f 	isb	sy
 8005542:	f3bf 8f4f 	dsb	sy
 8005546:	623b      	str	r3, [r7, #32]
}
 8005548:	bf00      	nop
 800554a:	e7fe      	b.n	800554a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800554c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <xQueueGiveFromISR+0x48>
	__asm volatile
 8005554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005558:	f383 8811 	msr	BASEPRI, r3
 800555c:	f3bf 8f6f 	isb	sy
 8005560:	f3bf 8f4f 	dsb	sy
 8005564:	61fb      	str	r3, [r7, #28]
}
 8005566:	bf00      	nop
 8005568:	e7fe      	b.n	8005568 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800556a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d103      	bne.n	800557a <xQueueGiveFromISR+0x58>
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d101      	bne.n	800557e <xQueueGiveFromISR+0x5c>
 800557a:	2301      	movs	r3, #1
 800557c:	e000      	b.n	8005580 <xQueueGiveFromISR+0x5e>
 800557e:	2300      	movs	r3, #0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d10a      	bne.n	800559a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005588:	f383 8811 	msr	BASEPRI, r3
 800558c:	f3bf 8f6f 	isb	sy
 8005590:	f3bf 8f4f 	dsb	sy
 8005594:	61bb      	str	r3, [r7, #24]
}
 8005596:	bf00      	nop
 8005598:	e7fe      	b.n	8005598 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800559a:	f002 fb05 	bl	8007ba8 <vPortValidateInterruptPriority>
	__asm volatile
 800559e:	f3ef 8211 	mrs	r2, BASEPRI
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	617a      	str	r2, [r7, #20]
 80055b4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80055b6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055be:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80055c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d22b      	bcs.n	8005622 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80055ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055cc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055d6:	1c5a      	adds	r2, r3, #1
 80055d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055da:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80055dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80055e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055e4:	d112      	bne.n	800560c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80055e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d016      	beq.n	800561c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80055ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f0:	3324      	adds	r3, #36	; 0x24
 80055f2:	4618      	mov	r0, r3
 80055f4:	f001 f8e8 	bl	80067c8 <xTaskRemoveFromEventList>
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00e      	beq.n	800561c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d00b      	beq.n	800561c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	2201      	movs	r2, #1
 8005608:	601a      	str	r2, [r3, #0]
 800560a:	e007      	b.n	800561c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800560c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005610:	3301      	adds	r3, #1
 8005612:	b2db      	uxtb	r3, r3
 8005614:	b25a      	sxtb	r2, r3
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800561c:	2301      	movs	r3, #1
 800561e:	637b      	str	r3, [r7, #52]	; 0x34
 8005620:	e001      	b.n	8005626 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005622:	2300      	movs	r3, #0
 8005624:	637b      	str	r3, [r7, #52]	; 0x34
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	f383 8811 	msr	BASEPRI, r3
}
 8005630:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005634:	4618      	mov	r0, r3
 8005636:	3738      	adds	r7, #56	; 0x38
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800563c:	b580      	push	{r7, lr}
 800563e:	b08c      	sub	sp, #48	; 0x30
 8005640:	af00      	add	r7, sp, #0
 8005642:	60f8      	str	r0, [r7, #12]
 8005644:	60b9      	str	r1, [r7, #8]
 8005646:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005648:	2300      	movs	r3, #0
 800564a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	2b00      	cmp	r3, #0
 8005654:	d10a      	bne.n	800566c <xQueueReceive+0x30>
	__asm volatile
 8005656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800565a:	f383 8811 	msr	BASEPRI, r3
 800565e:	f3bf 8f6f 	isb	sy
 8005662:	f3bf 8f4f 	dsb	sy
 8005666:	623b      	str	r3, [r7, #32]
}
 8005668:	bf00      	nop
 800566a:	e7fe      	b.n	800566a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d103      	bne.n	800567a <xQueueReceive+0x3e>
 8005672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <xQueueReceive+0x42>
 800567a:	2301      	movs	r3, #1
 800567c:	e000      	b.n	8005680 <xQueueReceive+0x44>
 800567e:	2300      	movs	r3, #0
 8005680:	2b00      	cmp	r3, #0
 8005682:	d10a      	bne.n	800569a <xQueueReceive+0x5e>
	__asm volatile
 8005684:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005688:	f383 8811 	msr	BASEPRI, r3
 800568c:	f3bf 8f6f 	isb	sy
 8005690:	f3bf 8f4f 	dsb	sy
 8005694:	61fb      	str	r3, [r7, #28]
}
 8005696:	bf00      	nop
 8005698:	e7fe      	b.n	8005698 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800569a:	f001 fa67 	bl	8006b6c <xTaskGetSchedulerState>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <xQueueReceive+0x6e>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d101      	bne.n	80056ae <xQueueReceive+0x72>
 80056aa:	2301      	movs	r3, #1
 80056ac:	e000      	b.n	80056b0 <xQueueReceive+0x74>
 80056ae:	2300      	movs	r3, #0
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d10a      	bne.n	80056ca <xQueueReceive+0x8e>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	61bb      	str	r3, [r7, #24]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80056ca:	f002 f98b 	bl	80079e4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d01f      	beq.n	800571a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80056da:	68b9      	ldr	r1, [r7, #8]
 80056dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056de:	f000 fabe 	bl	8005c5e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80056e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e4:	1e5a      	subs	r2, r3, #1
 80056e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ec:	691b      	ldr	r3, [r3, #16]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d00f      	beq.n	8005712 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056f4:	3310      	adds	r3, #16
 80056f6:	4618      	mov	r0, r3
 80056f8:	f001 f866 	bl	80067c8 <xTaskRemoveFromEventList>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d007      	beq.n	8005712 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005702:	4b3d      	ldr	r3, [pc, #244]	; (80057f8 <xQueueReceive+0x1bc>)
 8005704:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005708:	601a      	str	r2, [r3, #0]
 800570a:	f3bf 8f4f 	dsb	sy
 800570e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005712:	f002 f997 	bl	8007a44 <vPortExitCritical>
				return pdPASS;
 8005716:	2301      	movs	r3, #1
 8005718:	e069      	b.n	80057ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d103      	bne.n	8005728 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005720:	f002 f990 	bl	8007a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005724:	2300      	movs	r3, #0
 8005726:	e062      	b.n	80057ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d106      	bne.n	800573c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800572e:	f107 0310 	add.w	r3, r7, #16
 8005732:	4618      	mov	r0, r3
 8005734:	f001 f8ac 	bl	8006890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005738:	2301      	movs	r3, #1
 800573a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800573c:	f002 f982 	bl	8007a44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005740:	f000 fe18 	bl	8006374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005744:	f002 f94e 	bl	80079e4 <vPortEnterCritical>
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800574e:	b25b      	sxtb	r3, r3
 8005750:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005754:	d103      	bne.n	800575e <xQueueReceive+0x122>
 8005756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005758:	2200      	movs	r2, #0
 800575a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800575e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005760:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005764:	b25b      	sxtb	r3, r3
 8005766:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800576a:	d103      	bne.n	8005774 <xQueueReceive+0x138>
 800576c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576e:	2200      	movs	r2, #0
 8005770:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005774:	f002 f966 	bl	8007a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005778:	1d3a      	adds	r2, r7, #4
 800577a:	f107 0310 	add.w	r3, r7, #16
 800577e:	4611      	mov	r1, r2
 8005780:	4618      	mov	r0, r3
 8005782:	f001 f89b 	bl	80068bc <xTaskCheckForTimeOut>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d123      	bne.n	80057d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800578c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800578e:	f000 fade 	bl	8005d4e <prvIsQueueEmpty>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d017      	beq.n	80057c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579a:	3324      	adds	r3, #36	; 0x24
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	4611      	mov	r1, r2
 80057a0:	4618      	mov	r0, r3
 80057a2:	f000 ffc1 	bl	8006728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057a8:	f000 fa7f 	bl	8005caa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057ac:	f000 fdf0 	bl	8006390 <xTaskResumeAll>
 80057b0:	4603      	mov	r3, r0
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d189      	bne.n	80056ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <xQueueReceive+0x1bc>)
 80057b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057bc:	601a      	str	r2, [r3, #0]
 80057be:	f3bf 8f4f 	dsb	sy
 80057c2:	f3bf 8f6f 	isb	sy
 80057c6:	e780      	b.n	80056ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80057c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ca:	f000 fa6e 	bl	8005caa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80057ce:	f000 fddf 	bl	8006390 <xTaskResumeAll>
 80057d2:	e77a      	b.n	80056ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80057d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d6:	f000 fa68 	bl	8005caa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80057da:	f000 fdd9 	bl	8006390 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e0:	f000 fab5 	bl	8005d4e <prvIsQueueEmpty>
 80057e4:	4603      	mov	r3, r0
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	f43f af6f 	beq.w	80056ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80057ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3730      	adds	r7, #48	; 0x30
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	e000ed04 	.word	0xe000ed04

080057fc <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b08e      	sub	sp, #56	; 0x38
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
 8005804:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005806:	2300      	movs	r3, #0
 8005808:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800580e:	2300      	movs	r3, #0
 8005810:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005814:	2b00      	cmp	r3, #0
 8005816:	d10a      	bne.n	800582e <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800581c:	f383 8811 	msr	BASEPRI, r3
 8005820:	f3bf 8f6f 	isb	sy
 8005824:	f3bf 8f4f 	dsb	sy
 8005828:	623b      	str	r3, [r7, #32]
}
 800582a:	bf00      	nop
 800582c:	e7fe      	b.n	800582c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800582e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800583a:	f383 8811 	msr	BASEPRI, r3
 800583e:	f3bf 8f6f 	isb	sy
 8005842:	f3bf 8f4f 	dsb	sy
 8005846:	61fb      	str	r3, [r7, #28]
}
 8005848:	bf00      	nop
 800584a:	e7fe      	b.n	800584a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800584c:	f001 f98e 	bl	8006b6c <xTaskGetSchedulerState>
 8005850:	4603      	mov	r3, r0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d102      	bne.n	800585c <xQueueSemaphoreTake+0x60>
 8005856:	683b      	ldr	r3, [r7, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d101      	bne.n	8005860 <xQueueSemaphoreTake+0x64>
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <xQueueSemaphoreTake+0x66>
 8005860:	2300      	movs	r3, #0
 8005862:	2b00      	cmp	r3, #0
 8005864:	d10a      	bne.n	800587c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800586a:	f383 8811 	msr	BASEPRI, r3
 800586e:	f3bf 8f6f 	isb	sy
 8005872:	f3bf 8f4f 	dsb	sy
 8005876:	61bb      	str	r3, [r7, #24]
}
 8005878:	bf00      	nop
 800587a:	e7fe      	b.n	800587a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800587c:	f002 f8b2 	bl	80079e4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005884:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	2b00      	cmp	r3, #0
 800588a:	d024      	beq.n	80058d6 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800588c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588e:	1e5a      	subs	r2, r3, #1
 8005890:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005892:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d104      	bne.n	80058a6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800589c:	f001 fadc 	bl	8006e58 <pvTaskIncrementMutexHeldCount>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d00f      	beq.n	80058ce <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b0:	3310      	adds	r3, #16
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 ff88 	bl	80067c8 <xTaskRemoveFromEventList>
 80058b8:	4603      	mov	r3, r0
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d007      	beq.n	80058ce <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058be:	4b54      	ldr	r3, [pc, #336]	; (8005a10 <xQueueSemaphoreTake+0x214>)
 80058c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058c4:	601a      	str	r2, [r3, #0]
 80058c6:	f3bf 8f4f 	dsb	sy
 80058ca:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80058ce:	f002 f8b9 	bl	8007a44 <vPortExitCritical>
				return pdPASS;
 80058d2:	2301      	movs	r3, #1
 80058d4:	e097      	b.n	8005a06 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d111      	bne.n	8005900 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00a      	beq.n	80058f8 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	617b      	str	r3, [r7, #20]
}
 80058f4:	bf00      	nop
 80058f6:	e7fe      	b.n	80058f6 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80058f8:	f002 f8a4 	bl	8007a44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80058fc:	2300      	movs	r3, #0
 80058fe:	e082      	b.n	8005a06 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005902:	2b00      	cmp	r3, #0
 8005904:	d106      	bne.n	8005914 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005906:	f107 030c 	add.w	r3, r7, #12
 800590a:	4618      	mov	r0, r3
 800590c:	f000 ffc0 	bl	8006890 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005910:	2301      	movs	r3, #1
 8005912:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005914:	f002 f896 	bl	8007a44 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005918:	f000 fd2c 	bl	8006374 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800591c:	f002 f862 	bl	80079e4 <vPortEnterCritical>
 8005920:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005922:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005926:	b25b      	sxtb	r3, r3
 8005928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800592c:	d103      	bne.n	8005936 <xQueueSemaphoreTake+0x13a>
 800592e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005930:	2200      	movs	r2, #0
 8005932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800593c:	b25b      	sxtb	r3, r3
 800593e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005942:	d103      	bne.n	800594c <xQueueSemaphoreTake+0x150>
 8005944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005946:	2200      	movs	r2, #0
 8005948:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800594c:	f002 f87a 	bl	8007a44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005950:	463a      	mov	r2, r7
 8005952:	f107 030c 	add.w	r3, r7, #12
 8005956:	4611      	mov	r1, r2
 8005958:	4618      	mov	r0, r3
 800595a:	f000 ffaf 	bl	80068bc <xTaskCheckForTimeOut>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d132      	bne.n	80059ca <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005964:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005966:	f000 f9f2 	bl	8005d4e <prvIsQueueEmpty>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d026      	beq.n	80059be <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2b00      	cmp	r3, #0
 8005976:	d109      	bne.n	800598c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005978:	f002 f834 	bl	80079e4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800597c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4618      	mov	r0, r3
 8005982:	f001 f911 	bl	8006ba8 <xTaskPriorityInherit>
 8005986:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005988:	f002 f85c 	bl	8007a44 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800598c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598e:	3324      	adds	r3, #36	; 0x24
 8005990:	683a      	ldr	r2, [r7, #0]
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f000 fec7 	bl	8006728 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800599a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800599c:	f000 f985 	bl	8005caa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059a0:	f000 fcf6 	bl	8006390 <xTaskResumeAll>
 80059a4:	4603      	mov	r3, r0
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f47f af68 	bne.w	800587c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80059ac:	4b18      	ldr	r3, [pc, #96]	; (8005a10 <xQueueSemaphoreTake+0x214>)
 80059ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059b2:	601a      	str	r2, [r3, #0]
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	f3bf 8f6f 	isb	sy
 80059bc:	e75e      	b.n	800587c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80059be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059c0:	f000 f973 	bl	8005caa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80059c4:	f000 fce4 	bl	8006390 <xTaskResumeAll>
 80059c8:	e758      	b.n	800587c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80059ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059cc:	f000 f96d 	bl	8005caa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80059d0:	f000 fcde 	bl	8006390 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059d6:	f000 f9ba 	bl	8005d4e <prvIsQueueEmpty>
 80059da:	4603      	mov	r3, r0
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f43f af4d 	beq.w	800587c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80059e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00d      	beq.n	8005a04 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80059e8:	f001 fffc 	bl	80079e4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80059ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059ee:	f000 f8b4 	bl	8005b5a <prvGetDisinheritPriorityAfterTimeout>
 80059f2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80059f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059fa:	4618      	mov	r0, r3
 80059fc:	f001 f9aa 	bl	8006d54 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a00:	f002 f820 	bl	8007a44 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3738      	adds	r7, #56	; 0x38
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	e000ed04 	.word	0xe000ed04

08005a14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a14:	b580      	push	{r7, lr}
 8005a16:	b08e      	sub	sp, #56	; 0x38
 8005a18:	af00      	add	r7, sp, #0
 8005a1a:	60f8      	str	r0, [r7, #12]
 8005a1c:	60b9      	str	r1, [r7, #8]
 8005a1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d10a      	bne.n	8005a40 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2e:	f383 8811 	msr	BASEPRI, r3
 8005a32:	f3bf 8f6f 	isb	sy
 8005a36:	f3bf 8f4f 	dsb	sy
 8005a3a:	623b      	str	r3, [r7, #32]
}
 8005a3c:	bf00      	nop
 8005a3e:	e7fe      	b.n	8005a3e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d103      	bne.n	8005a4e <xQueueReceiveFromISR+0x3a>
 8005a46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <xQueueReceiveFromISR+0x3e>
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <xQueueReceiveFromISR+0x40>
 8005a52:	2300      	movs	r3, #0
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10a      	bne.n	8005a6e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005a58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a5c:	f383 8811 	msr	BASEPRI, r3
 8005a60:	f3bf 8f6f 	isb	sy
 8005a64:	f3bf 8f4f 	dsb	sy
 8005a68:	61fb      	str	r3, [r7, #28]
}
 8005a6a:	bf00      	nop
 8005a6c:	e7fe      	b.n	8005a6c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005a6e:	f002 f89b 	bl	8007ba8 <vPortValidateInterruptPriority>
	__asm volatile
 8005a72:	f3ef 8211 	mrs	r2, BASEPRI
 8005a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a7a:	f383 8811 	msr	BASEPRI, r3
 8005a7e:	f3bf 8f6f 	isb	sy
 8005a82:	f3bf 8f4f 	dsb	sy
 8005a86:	61ba      	str	r2, [r7, #24]
 8005a88:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005a8a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a92:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d02f      	beq.n	8005afa <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005a9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005aa4:	68b9      	ldr	r1, [r7, #8]
 8005aa6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005aa8:	f000 f8d9 	bl	8005c5e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005aac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aae:	1e5a      	subs	r2, r3, #1
 8005ab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ab2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005ab4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005abc:	d112      	bne.n	8005ae4 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d016      	beq.n	8005af4 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	3310      	adds	r3, #16
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fe7c 	bl	80067c8 <xTaskRemoveFromEventList>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00e      	beq.n	8005af4 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d00b      	beq.n	8005af4 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2201      	movs	r2, #1
 8005ae0:	601a      	str	r2, [r3, #0]
 8005ae2:	e007      	b.n	8005af4 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005ae4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005ae8:	3301      	adds	r3, #1
 8005aea:	b2db      	uxtb	r3, r3
 8005aec:	b25a      	sxtb	r2, r3
 8005aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005af0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005af4:	2301      	movs	r3, #1
 8005af6:	637b      	str	r3, [r7, #52]	; 0x34
 8005af8:	e001      	b.n	8005afe <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005afa:	2300      	movs	r3, #0
 8005afc:	637b      	str	r3, [r7, #52]	; 0x34
 8005afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b00:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f383 8811 	msr	BASEPRI, r3
}
 8005b08:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3738      	adds	r7, #56	; 0x38
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b084      	sub	sp, #16
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d10a      	bne.n	8005b3c <vQueueDelete+0x28>
	__asm volatile
 8005b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b2a:	f383 8811 	msr	BASEPRI, r3
 8005b2e:	f3bf 8f6f 	isb	sy
 8005b32:	f3bf 8f4f 	dsb	sy
 8005b36:	60bb      	str	r3, [r7, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	e7fe      	b.n	8005b3a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f000 f95f 	bl	8005e00 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d102      	bne.n	8005b52 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005b4c:	68f8      	ldr	r0, [r7, #12]
 8005b4e:	f002 f937 	bl	8007dc0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b52:	bf00      	nop
 8005b54:	3710      	adds	r7, #16
 8005b56:	46bd      	mov	sp, r7
 8005b58:	bd80      	pop	{r7, pc}

08005b5a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b5a:	b480      	push	{r7}
 8005b5c:	b085      	sub	sp, #20
 8005b5e:	af00      	add	r7, sp, #0
 8005b60:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d006      	beq.n	8005b78 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005b74:	60fb      	str	r3, [r7, #12]
 8005b76:	e001      	b.n	8005b7c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005b78:	2300      	movs	r3, #0
 8005b7a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
	}
 8005b7e:	4618      	mov	r0, r3
 8005b80:	3714      	adds	r7, #20
 8005b82:	46bd      	mov	sp, r7
 8005b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b88:	4770      	bx	lr

08005b8a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b086      	sub	sp, #24
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005b96:	2300      	movs	r3, #0
 8005b98:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10d      	bne.n	8005bc4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d14d      	bne.n	8005c4c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	f001 f85f 	bl	8006c78 <xTaskPriorityDisinherit>
 8005bba:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2200      	movs	r2, #0
 8005bc0:	609a      	str	r2, [r3, #8]
 8005bc2:	e043      	b.n	8005c4c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d119      	bne.n	8005bfe <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	6858      	ldr	r0, [r3, #4]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	68b9      	ldr	r1, [r7, #8]
 8005bd6:	f002 fbdc 	bl	8008392 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	685a      	ldr	r2, [r3, #4]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be2:	441a      	add	r2, r3
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	429a      	cmp	r2, r3
 8005bf2:	d32b      	bcc.n	8005c4c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	605a      	str	r2, [r3, #4]
 8005bfc:	e026      	b.n	8005c4c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	68d8      	ldr	r0, [r3, #12]
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c06:	461a      	mov	r2, r3
 8005c08:	68b9      	ldr	r1, [r7, #8]
 8005c0a:	f002 fbc2 	bl	8008392 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	68da      	ldr	r2, [r3, #12]
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c16:	425b      	negs	r3, r3
 8005c18:	441a      	add	r2, r3
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	68da      	ldr	r2, [r3, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d207      	bcs.n	8005c3a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c32:	425b      	negs	r3, r3
 8005c34:	441a      	add	r2, r3
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2b02      	cmp	r3, #2
 8005c3e:	d105      	bne.n	8005c4c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d002      	beq.n	8005c4c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	3b01      	subs	r3, #1
 8005c4a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c54:	697b      	ldr	r3, [r7, #20]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3718      	adds	r7, #24
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b082      	sub	sp, #8
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d018      	beq.n	8005ca2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	68da      	ldr	r2, [r3, #12]
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c78:	441a      	add	r2, r3
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68da      	ldr	r2, [r3, #12]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	429a      	cmp	r2, r3
 8005c88:	d303      	bcc.n	8005c92 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681a      	ldr	r2, [r3, #0]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	68d9      	ldr	r1, [r3, #12]
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	6838      	ldr	r0, [r7, #0]
 8005c9e:	f002 fb78 	bl	8008392 <memcpy>
	}
}
 8005ca2:	bf00      	nop
 8005ca4:	3708      	adds	r7, #8
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	bd80      	pop	{r7, pc}

08005caa <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005caa:	b580      	push	{r7, lr}
 8005cac:	b084      	sub	sp, #16
 8005cae:	af00      	add	r7, sp, #0
 8005cb0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cb2:	f001 fe97 	bl	80079e4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cbc:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cbe:	e011      	b.n	8005ce4 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d012      	beq.n	8005cee <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	3324      	adds	r3, #36	; 0x24
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 fd7b 	bl	80067c8 <xTaskRemoveFromEventList>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d001      	beq.n	8005cdc <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005cd8:	f000 fe52 	bl	8006980 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005cdc:	7bfb      	ldrb	r3, [r7, #15]
 8005cde:	3b01      	subs	r3, #1
 8005ce0:	b2db      	uxtb	r3, r3
 8005ce2:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ce4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	dce9      	bgt.n	8005cc0 <prvUnlockQueue+0x16>
 8005cec:	e000      	b.n	8005cf0 <prvUnlockQueue+0x46>
					break;
 8005cee:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	22ff      	movs	r2, #255	; 0xff
 8005cf4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005cf8:	f001 fea4 	bl	8007a44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005cfc:	f001 fe72 	bl	80079e4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d06:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d08:	e011      	b.n	8005d2e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	691b      	ldr	r3, [r3, #16]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d012      	beq.n	8005d38 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	3310      	adds	r3, #16
 8005d16:	4618      	mov	r0, r3
 8005d18:	f000 fd56 	bl	80067c8 <xTaskRemoveFromEventList>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d001      	beq.n	8005d26 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d22:	f000 fe2d 	bl	8006980 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d26:	7bbb      	ldrb	r3, [r7, #14]
 8005d28:	3b01      	subs	r3, #1
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d2e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	dce9      	bgt.n	8005d0a <prvUnlockQueue+0x60>
 8005d36:	e000      	b.n	8005d3a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d38:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	22ff      	movs	r2, #255	; 0xff
 8005d3e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d42:	f001 fe7f 	bl	8007a44 <vPortExitCritical>
}
 8005d46:	bf00      	nop
 8005d48:	3710      	adds	r7, #16
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}

08005d4e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b084      	sub	sp, #16
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d56:	f001 fe45 	bl	80079e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d102      	bne.n	8005d68 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d62:	2301      	movs	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]
 8005d66:	e001      	b.n	8005d6c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005d68:	2300      	movs	r3, #0
 8005d6a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d6c:	f001 fe6a 	bl	8007a44 <vPortExitCritical>

	return xReturn;
 8005d70:	68fb      	ldr	r3, [r7, #12]
}
 8005d72:	4618      	mov	r0, r3
 8005d74:	3710      	adds	r7, #16
 8005d76:	46bd      	mov	sp, r7
 8005d78:	bd80      	pop	{r7, pc}

08005d7a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005d7a:	b580      	push	{r7, lr}
 8005d7c:	b084      	sub	sp, #16
 8005d7e:	af00      	add	r7, sp, #0
 8005d80:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d82:	f001 fe2f 	bl	80079e4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d102      	bne.n	8005d98 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005d92:	2301      	movs	r3, #1
 8005d94:	60fb      	str	r3, [r7, #12]
 8005d96:	e001      	b.n	8005d9c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005d9c:	f001 fe52 	bl	8007a44 <vPortExitCritical>

	return xReturn;
 8005da0:	68fb      	ldr	r3, [r7, #12]
}
 8005da2:	4618      	mov	r0, r3
 8005da4:	3710      	adds	r7, #16
 8005da6:	46bd      	mov	sp, r7
 8005da8:	bd80      	pop	{r7, pc}
	...

08005dac <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005dac:	b480      	push	{r7}
 8005dae:	b085      	sub	sp, #20
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	e014      	b.n	8005de6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005dbc:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <vQueueAddToRegistry+0x50>)
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d10b      	bne.n	8005de0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005dc8:	490c      	ldr	r1, [pc, #48]	; (8005dfc <vQueueAddToRegistry+0x50>)
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005dd2:	4a0a      	ldr	r2, [pc, #40]	; (8005dfc <vQueueAddToRegistry+0x50>)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	00db      	lsls	r3, r3, #3
 8005dd8:	4413      	add	r3, r2
 8005dda:	687a      	ldr	r2, [r7, #4]
 8005ddc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005dde:	e006      	b.n	8005dee <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	3301      	adds	r3, #1
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	2b07      	cmp	r3, #7
 8005dea:	d9e7      	bls.n	8005dbc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005dec:	bf00      	nop
 8005dee:	bf00      	nop
 8005df0:	3714      	adds	r7, #20
 8005df2:	46bd      	mov	sp, r7
 8005df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df8:	4770      	bx	lr
 8005dfa:	bf00      	nop
 8005dfc:	20000944 	.word	0x20000944

08005e00 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005e00:	b480      	push	{r7}
 8005e02:	b085      	sub	sp, #20
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e08:	2300      	movs	r3, #0
 8005e0a:	60fb      	str	r3, [r7, #12]
 8005e0c:	e016      	b.n	8005e3c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005e0e:	4a10      	ldr	r2, [pc, #64]	; (8005e50 <vQueueUnregisterQueue+0x50>)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4413      	add	r3, r2
 8005e16:	685b      	ldr	r3, [r3, #4]
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d10b      	bne.n	8005e36 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005e1e:	4a0c      	ldr	r2, [pc, #48]	; (8005e50 <vQueueUnregisterQueue+0x50>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2100      	movs	r1, #0
 8005e24:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005e28:	4a09      	ldr	r2, [pc, #36]	; (8005e50 <vQueueUnregisterQueue+0x50>)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	00db      	lsls	r3, r3, #3
 8005e2e:	4413      	add	r3, r2
 8005e30:	2200      	movs	r2, #0
 8005e32:	605a      	str	r2, [r3, #4]
				break;
 8005e34:	e006      	b.n	8005e44 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	60fb      	str	r3, [r7, #12]
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	2b07      	cmp	r3, #7
 8005e40:	d9e5      	bls.n	8005e0e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e42:	bf00      	nop
 8005e44:	bf00      	nop
 8005e46:	3714      	adds	r7, #20
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr
 8005e50:	20000944 	.word	0x20000944

08005e54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b086      	sub	sp, #24
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e64:	f001 fdbe 	bl	80079e4 <vPortEnterCritical>
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e6e:	b25b      	sxtb	r3, r3
 8005e70:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e74:	d103      	bne.n	8005e7e <vQueueWaitForMessageRestricted+0x2a>
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e84:	b25b      	sxtb	r3, r3
 8005e86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e8a:	d103      	bne.n	8005e94 <vQueueWaitForMessageRestricted+0x40>
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	2200      	movs	r2, #0
 8005e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e94:	f001 fdd6 	bl	8007a44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	3324      	adds	r3, #36	; 0x24
 8005ea4:	687a      	ldr	r2, [r7, #4]
 8005ea6:	68b9      	ldr	r1, [r7, #8]
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	f000 fc61 	bl	8006770 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eae:	6978      	ldr	r0, [r7, #20]
 8005eb0:	f7ff fefb 	bl	8005caa <prvUnlockQueue>
	}
 8005eb4:	bf00      	nop
 8005eb6:	3718      	adds	r7, #24
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	bd80      	pop	{r7, pc}

08005ebc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b08e      	sub	sp, #56	; 0x38
 8005ec0:	af04      	add	r7, sp, #16
 8005ec2:	60f8      	str	r0, [r7, #12]
 8005ec4:	60b9      	str	r1, [r7, #8]
 8005ec6:	607a      	str	r2, [r7, #4]
 8005ec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005eca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d10a      	bne.n	8005ee6 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed4:	f383 8811 	msr	BASEPRI, r3
 8005ed8:	f3bf 8f6f 	isb	sy
 8005edc:	f3bf 8f4f 	dsb	sy
 8005ee0:	623b      	str	r3, [r7, #32]
}
 8005ee2:	bf00      	nop
 8005ee4:	e7fe      	b.n	8005ee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ee6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d10a      	bne.n	8005f02 <xTaskCreateStatic+0x46>
	__asm volatile
 8005eec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef0:	f383 8811 	msr	BASEPRI, r3
 8005ef4:	f3bf 8f6f 	isb	sy
 8005ef8:	f3bf 8f4f 	dsb	sy
 8005efc:	61fb      	str	r3, [r7, #28]
}
 8005efe:	bf00      	nop
 8005f00:	e7fe      	b.n	8005f00 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f02:	23a8      	movs	r3, #168	; 0xa8
 8005f04:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	2ba8      	cmp	r3, #168	; 0xa8
 8005f0a:	d00a      	beq.n	8005f22 <xTaskCreateStatic+0x66>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	61bb      	str	r3, [r7, #24]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f22:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d01e      	beq.n	8005f68 <xTaskCreateStatic+0xac>
 8005f2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d01b      	beq.n	8005f68 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f38:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f3c:	2202      	movs	r2, #2
 8005f3e:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f42:	2300      	movs	r3, #0
 8005f44:	9303      	str	r3, [sp, #12]
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f48:	9302      	str	r3, [sp, #8]
 8005f4a:	f107 0314 	add.w	r3, r7, #20
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	683b      	ldr	r3, [r7, #0]
 8005f56:	687a      	ldr	r2, [r7, #4]
 8005f58:	68b9      	ldr	r1, [r7, #8]
 8005f5a:	68f8      	ldr	r0, [r7, #12]
 8005f5c:	f000 f850 	bl	8006000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f62:	f000 f8f3 	bl	800614c <prvAddNewTaskToReadyList>
 8005f66:	e001      	b.n	8005f6c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f6c:	697b      	ldr	r3, [r7, #20]
	}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3728      	adds	r7, #40	; 0x28
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f76:	b580      	push	{r7, lr}
 8005f78:	b08c      	sub	sp, #48	; 0x30
 8005f7a:	af04      	add	r7, sp, #16
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	603b      	str	r3, [r7, #0]
 8005f82:	4613      	mov	r3, r2
 8005f84:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f86:	88fb      	ldrh	r3, [r7, #6]
 8005f88:	009b      	lsls	r3, r3, #2
 8005f8a:	4618      	mov	r0, r3
 8005f8c:	f001 fe4c 	bl	8007c28 <pvPortMalloc>
 8005f90:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d00e      	beq.n	8005fb6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f98:	20a8      	movs	r0, #168	; 0xa8
 8005f9a:	f001 fe45 	bl	8007c28 <pvPortMalloc>
 8005f9e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d003      	beq.n	8005fae <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fa6:	69fb      	ldr	r3, [r7, #28]
 8005fa8:	697a      	ldr	r2, [r7, #20]
 8005faa:	631a      	str	r2, [r3, #48]	; 0x30
 8005fac:	e005      	b.n	8005fba <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fae:	6978      	ldr	r0, [r7, #20]
 8005fb0:	f001 ff06 	bl	8007dc0 <vPortFree>
 8005fb4:	e001      	b.n	8005fba <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d017      	beq.n	8005ff0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fc8:	88fa      	ldrh	r2, [r7, #6]
 8005fca:	2300      	movs	r3, #0
 8005fcc:	9303      	str	r3, [sp, #12]
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	9302      	str	r3, [sp, #8]
 8005fd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fd4:	9301      	str	r3, [sp, #4]
 8005fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd8:	9300      	str	r3, [sp, #0]
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	68b9      	ldr	r1, [r7, #8]
 8005fde:	68f8      	ldr	r0, [r7, #12]
 8005fe0:	f000 f80e 	bl	8006000 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fe4:	69f8      	ldr	r0, [r7, #28]
 8005fe6:	f000 f8b1 	bl	800614c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fea:	2301      	movs	r3, #1
 8005fec:	61bb      	str	r3, [r7, #24]
 8005fee:	e002      	b.n	8005ff6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005ff0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005ff4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005ff6:	69bb      	ldr	r3, [r7, #24]
	}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3720      	adds	r7, #32
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006000:	b580      	push	{r7, lr}
 8006002:	b088      	sub	sp, #32
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	607a      	str	r2, [r7, #4]
 800600c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	461a      	mov	r2, r3
 8006018:	21a5      	movs	r1, #165	; 0xa5
 800601a:	f002 f92f 	bl	800827c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800601e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006020:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006028:	3b01      	subs	r3, #1
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f023 0307 	bic.w	r3, r3, #7
 8006036:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	f003 0307 	and.w	r3, r3, #7
 800603e:	2b00      	cmp	r3, #0
 8006040:	d00a      	beq.n	8006058 <prvInitialiseNewTask+0x58>
	__asm volatile
 8006042:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006046:	f383 8811 	msr	BASEPRI, r3
 800604a:	f3bf 8f6f 	isb	sy
 800604e:	f3bf 8f4f 	dsb	sy
 8006052:	617b      	str	r3, [r7, #20]
}
 8006054:	bf00      	nop
 8006056:	e7fe      	b.n	8006056 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d01f      	beq.n	800609e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
 8006062:	e012      	b.n	800608a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006064:	68ba      	ldr	r2, [r7, #8]
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	7819      	ldrb	r1, [r3, #0]
 800606c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	4413      	add	r3, r2
 8006072:	3334      	adds	r3, #52	; 0x34
 8006074:	460a      	mov	r2, r1
 8006076:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	4413      	add	r3, r2
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d006      	beq.n	8006092 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	3301      	adds	r3, #1
 8006088:	61fb      	str	r3, [r7, #28]
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	2b0f      	cmp	r3, #15
 800608e:	d9e9      	bls.n	8006064 <prvInitialiseNewTask+0x64>
 8006090:	e000      	b.n	8006094 <prvInitialiseNewTask+0x94>
			{
				break;
 8006092:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006096:	2200      	movs	r2, #0
 8006098:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800609c:	e003      	b.n	80060a6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800609e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060a0:	2200      	movs	r2, #0
 80060a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a8:	2b37      	cmp	r3, #55	; 0x37
 80060aa:	d901      	bls.n	80060b0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060ac:	2337      	movs	r3, #55	; 0x37
 80060ae:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ba:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060be:	2200      	movs	r2, #0
 80060c0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	3304      	adds	r3, #4
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fe fda0 	bl	8004c0c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ce:	3318      	adds	r3, #24
 80060d0:	4618      	mov	r0, r3
 80060d2:	f7fe fd9b 	bl	8004c0c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060da:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060de:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060ea:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	2200      	movs	r2, #0
 80060f0:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	2200      	movs	r2, #0
 80060f8:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fe:	3354      	adds	r3, #84	; 0x54
 8006100:	224c      	movs	r2, #76	; 0x4c
 8006102:	2100      	movs	r1, #0
 8006104:	4618      	mov	r0, r3
 8006106:	f002 f8b9 	bl	800827c <memset>
 800610a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610c:	4a0c      	ldr	r2, [pc, #48]	; (8006140 <prvInitialiseNewTask+0x140>)
 800610e:	659a      	str	r2, [r3, #88]	; 0x58
 8006110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006112:	4a0c      	ldr	r2, [pc, #48]	; (8006144 <prvInitialiseNewTask+0x144>)
 8006114:	65da      	str	r2, [r3, #92]	; 0x5c
 8006116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006118:	4a0b      	ldr	r2, [pc, #44]	; (8006148 <prvInitialiseNewTask+0x148>)
 800611a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800611c:	683a      	ldr	r2, [r7, #0]
 800611e:	68f9      	ldr	r1, [r7, #12]
 8006120:	69b8      	ldr	r0, [r7, #24]
 8006122:	f001 fb33 	bl	800778c <pxPortInitialiseStack>
 8006126:	4602      	mov	r2, r0
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800612c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612e:	2b00      	cmp	r3, #0
 8006130:	d002      	beq.n	8006138 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006136:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006138:	bf00      	nop
 800613a:	3720      	adds	r7, #32
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20004a70 	.word	0x20004a70
 8006144:	20004ad8 	.word	0x20004ad8
 8006148:	20004b40 	.word	0x20004b40

0800614c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006154:	f001 fc46 	bl	80079e4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006158:	4b2d      	ldr	r3, [pc, #180]	; (8006210 <prvAddNewTaskToReadyList+0xc4>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	3301      	adds	r3, #1
 800615e:	4a2c      	ldr	r2, [pc, #176]	; (8006210 <prvAddNewTaskToReadyList+0xc4>)
 8006160:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006162:	4b2c      	ldr	r3, [pc, #176]	; (8006214 <prvAddNewTaskToReadyList+0xc8>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d109      	bne.n	800617e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800616a:	4a2a      	ldr	r2, [pc, #168]	; (8006214 <prvAddNewTaskToReadyList+0xc8>)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006170:	4b27      	ldr	r3, [pc, #156]	; (8006210 <prvAddNewTaskToReadyList+0xc4>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2b01      	cmp	r3, #1
 8006176:	d110      	bne.n	800619a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006178:	f000 fc26 	bl	80069c8 <prvInitialiseTaskLists>
 800617c:	e00d      	b.n	800619a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800617e:	4b26      	ldr	r3, [pc, #152]	; (8006218 <prvAddNewTaskToReadyList+0xcc>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d109      	bne.n	800619a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006186:	4b23      	ldr	r3, [pc, #140]	; (8006214 <prvAddNewTaskToReadyList+0xc8>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006190:	429a      	cmp	r2, r3
 8006192:	d802      	bhi.n	800619a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006194:	4a1f      	ldr	r2, [pc, #124]	; (8006214 <prvAddNewTaskToReadyList+0xc8>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800619a:	4b20      	ldr	r3, [pc, #128]	; (800621c <prvAddNewTaskToReadyList+0xd0>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	3301      	adds	r3, #1
 80061a0:	4a1e      	ldr	r2, [pc, #120]	; (800621c <prvAddNewTaskToReadyList+0xd0>)
 80061a2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061a4:	4b1d      	ldr	r3, [pc, #116]	; (800621c <prvAddNewTaskToReadyList+0xd0>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b0:	4b1b      	ldr	r3, [pc, #108]	; (8006220 <prvAddNewTaskToReadyList+0xd4>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	429a      	cmp	r2, r3
 80061b6:	d903      	bls.n	80061c0 <prvAddNewTaskToReadyList+0x74>
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061bc:	4a18      	ldr	r2, [pc, #96]	; (8006220 <prvAddNewTaskToReadyList+0xd4>)
 80061be:	6013      	str	r3, [r2, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c4:	4613      	mov	r3, r2
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4a15      	ldr	r2, [pc, #84]	; (8006224 <prvAddNewTaskToReadyList+0xd8>)
 80061ce:	441a      	add	r2, r3
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	3304      	adds	r3, #4
 80061d4:	4619      	mov	r1, r3
 80061d6:	4610      	mov	r0, r2
 80061d8:	f7fe fd25 	bl	8004c26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061dc:	f001 fc32 	bl	8007a44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061e0:	4b0d      	ldr	r3, [pc, #52]	; (8006218 <prvAddNewTaskToReadyList+0xcc>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00e      	beq.n	8006206 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061e8:	4b0a      	ldr	r3, [pc, #40]	; (8006214 <prvAddNewTaskToReadyList+0xc8>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d207      	bcs.n	8006206 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061f6:	4b0c      	ldr	r3, [pc, #48]	; (8006228 <prvAddNewTaskToReadyList+0xdc>)
 80061f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006206:	bf00      	nop
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
 800620e:	bf00      	nop
 8006210:	20000e58 	.word	0x20000e58
 8006214:	20000984 	.word	0x20000984
 8006218:	20000e64 	.word	0x20000e64
 800621c:	20000e74 	.word	0x20000e74
 8006220:	20000e60 	.word	0x20000e60
 8006224:	20000988 	.word	0x20000988
 8006228:	e000ed04 	.word	0xe000ed04

0800622c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006234:	2300      	movs	r3, #0
 8006236:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d017      	beq.n	800626e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800623e:	4b13      	ldr	r3, [pc, #76]	; (800628c <vTaskDelay+0x60>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00a      	beq.n	800625c <vTaskDelay+0x30>
	__asm volatile
 8006246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800624a:	f383 8811 	msr	BASEPRI, r3
 800624e:	f3bf 8f6f 	isb	sy
 8006252:	f3bf 8f4f 	dsb	sy
 8006256:	60bb      	str	r3, [r7, #8]
}
 8006258:	bf00      	nop
 800625a:	e7fe      	b.n	800625a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800625c:	f000 f88a 	bl	8006374 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006260:	2100      	movs	r1, #0
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 fe0c 	bl	8006e80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006268:	f000 f892 	bl	8006390 <xTaskResumeAll>
 800626c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d107      	bne.n	8006284 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006274:	4b06      	ldr	r3, [pc, #24]	; (8006290 <vTaskDelay+0x64>)
 8006276:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800627a:	601a      	str	r2, [r3, #0]
 800627c:	f3bf 8f4f 	dsb	sy
 8006280:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006284:	bf00      	nop
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000e80 	.word	0x20000e80
 8006290:	e000ed04 	.word	0xe000ed04

08006294 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b08a      	sub	sp, #40	; 0x28
 8006298:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800629a:	2300      	movs	r3, #0
 800629c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800629e:	2300      	movs	r3, #0
 80062a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062a2:	463a      	mov	r2, r7
 80062a4:	1d39      	adds	r1, r7, #4
 80062a6:	f107 0308 	add.w	r3, r7, #8
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7fe fc5a 	bl	8004b64 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062b0:	6839      	ldr	r1, [r7, #0]
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	68ba      	ldr	r2, [r7, #8]
 80062b6:	9202      	str	r2, [sp, #8]
 80062b8:	9301      	str	r3, [sp, #4]
 80062ba:	2300      	movs	r3, #0
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	2300      	movs	r3, #0
 80062c0:	460a      	mov	r2, r1
 80062c2:	4924      	ldr	r1, [pc, #144]	; (8006354 <vTaskStartScheduler+0xc0>)
 80062c4:	4824      	ldr	r0, [pc, #144]	; (8006358 <vTaskStartScheduler+0xc4>)
 80062c6:	f7ff fdf9 	bl	8005ebc <xTaskCreateStatic>
 80062ca:	4603      	mov	r3, r0
 80062cc:	4a23      	ldr	r2, [pc, #140]	; (800635c <vTaskStartScheduler+0xc8>)
 80062ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062d0:	4b22      	ldr	r3, [pc, #136]	; (800635c <vTaskStartScheduler+0xc8>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d002      	beq.n	80062de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062d8:	2301      	movs	r3, #1
 80062da:	617b      	str	r3, [r7, #20]
 80062dc:	e001      	b.n	80062e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062de:	2300      	movs	r3, #0
 80062e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062e2:	697b      	ldr	r3, [r7, #20]
 80062e4:	2b01      	cmp	r3, #1
 80062e6:	d102      	bne.n	80062ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062e8:	f000 fe1e 	bl	8006f28 <xTimerCreateTimerTask>
 80062ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062ee:	697b      	ldr	r3, [r7, #20]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d11b      	bne.n	800632c <vTaskStartScheduler+0x98>
	__asm volatile
 80062f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f8:	f383 8811 	msr	BASEPRI, r3
 80062fc:	f3bf 8f6f 	isb	sy
 8006300:	f3bf 8f4f 	dsb	sy
 8006304:	613b      	str	r3, [r7, #16]
}
 8006306:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006308:	4b15      	ldr	r3, [pc, #84]	; (8006360 <vTaskStartScheduler+0xcc>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	3354      	adds	r3, #84	; 0x54
 800630e:	4a15      	ldr	r2, [pc, #84]	; (8006364 <vTaskStartScheduler+0xd0>)
 8006310:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006312:	4b15      	ldr	r3, [pc, #84]	; (8006368 <vTaskStartScheduler+0xd4>)
 8006314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006318:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800631a:	4b14      	ldr	r3, [pc, #80]	; (800636c <vTaskStartScheduler+0xd8>)
 800631c:	2201      	movs	r2, #1
 800631e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006320:	4b13      	ldr	r3, [pc, #76]	; (8006370 <vTaskStartScheduler+0xdc>)
 8006322:	2200      	movs	r2, #0
 8006324:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006326:	f001 fabb 	bl	80078a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800632a:	e00e      	b.n	800634a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006332:	d10a      	bne.n	800634a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006338:	f383 8811 	msr	BASEPRI, r3
 800633c:	f3bf 8f6f 	isb	sy
 8006340:	f3bf 8f4f 	dsb	sy
 8006344:	60fb      	str	r3, [r7, #12]
}
 8006346:	bf00      	nop
 8006348:	e7fe      	b.n	8006348 <vTaskStartScheduler+0xb4>
}
 800634a:	bf00      	nop
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	0800922c 	.word	0x0800922c
 8006358:	08006999 	.word	0x08006999
 800635c:	20000e7c 	.word	0x20000e7c
 8006360:	20000984 	.word	0x20000984
 8006364:	2000006c 	.word	0x2000006c
 8006368:	20000e78 	.word	0x20000e78
 800636c:	20000e64 	.word	0x20000e64
 8006370:	20000e5c 	.word	0x20000e5c

08006374 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006374:	b480      	push	{r7}
 8006376:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006378:	4b04      	ldr	r3, [pc, #16]	; (800638c <vTaskSuspendAll+0x18>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	3301      	adds	r3, #1
 800637e:	4a03      	ldr	r2, [pc, #12]	; (800638c <vTaskSuspendAll+0x18>)
 8006380:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006382:	bf00      	nop
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr
 800638c:	20000e80 	.word	0x20000e80

08006390 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006396:	2300      	movs	r3, #0
 8006398:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800639a:	2300      	movs	r3, #0
 800639c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800639e:	4b42      	ldr	r3, [pc, #264]	; (80064a8 <xTaskResumeAll+0x118>)
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d10a      	bne.n	80063bc <xTaskResumeAll+0x2c>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	603b      	str	r3, [r7, #0]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063bc:	f001 fb12 	bl	80079e4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063c0:	4b39      	ldr	r3, [pc, #228]	; (80064a8 <xTaskResumeAll+0x118>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	3b01      	subs	r3, #1
 80063c6:	4a38      	ldr	r2, [pc, #224]	; (80064a8 <xTaskResumeAll+0x118>)
 80063c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ca:	4b37      	ldr	r3, [pc, #220]	; (80064a8 <xTaskResumeAll+0x118>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d162      	bne.n	8006498 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063d2:	4b36      	ldr	r3, [pc, #216]	; (80064ac <xTaskResumeAll+0x11c>)
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d05e      	beq.n	8006498 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063da:	e02f      	b.n	800643c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063dc:	4b34      	ldr	r3, [pc, #208]	; (80064b0 <xTaskResumeAll+0x120>)
 80063de:	68db      	ldr	r3, [r3, #12]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	3318      	adds	r3, #24
 80063e8:	4618      	mov	r0, r3
 80063ea:	f7fe fc79 	bl	8004ce0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	3304      	adds	r3, #4
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fc74 	bl	8004ce0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063fc:	4b2d      	ldr	r3, [pc, #180]	; (80064b4 <xTaskResumeAll+0x124>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d903      	bls.n	800640c <xTaskResumeAll+0x7c>
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006408:	4a2a      	ldr	r2, [pc, #168]	; (80064b4 <xTaskResumeAll+0x124>)
 800640a:	6013      	str	r3, [r2, #0]
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006410:	4613      	mov	r3, r2
 8006412:	009b      	lsls	r3, r3, #2
 8006414:	4413      	add	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4a27      	ldr	r2, [pc, #156]	; (80064b8 <xTaskResumeAll+0x128>)
 800641a:	441a      	add	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	3304      	adds	r3, #4
 8006420:	4619      	mov	r1, r3
 8006422:	4610      	mov	r0, r2
 8006424:	f7fe fbff 	bl	8004c26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642c:	4b23      	ldr	r3, [pc, #140]	; (80064bc <xTaskResumeAll+0x12c>)
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006432:	429a      	cmp	r2, r3
 8006434:	d302      	bcc.n	800643c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006436:	4b22      	ldr	r3, [pc, #136]	; (80064c0 <xTaskResumeAll+0x130>)
 8006438:	2201      	movs	r2, #1
 800643a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800643c:	4b1c      	ldr	r3, [pc, #112]	; (80064b0 <xTaskResumeAll+0x120>)
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d1cb      	bne.n	80063dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d001      	beq.n	800644e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800644a:	f000 fb5f 	bl	8006b0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800644e:	4b1d      	ldr	r3, [pc, #116]	; (80064c4 <xTaskResumeAll+0x134>)
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2b00      	cmp	r3, #0
 8006458:	d010      	beq.n	800647c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800645a:	f000 f847 	bl	80064ec <xTaskIncrementTick>
 800645e:	4603      	mov	r3, r0
 8006460:	2b00      	cmp	r3, #0
 8006462:	d002      	beq.n	800646a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006464:	4b16      	ldr	r3, [pc, #88]	; (80064c0 <xTaskResumeAll+0x130>)
 8006466:	2201      	movs	r2, #1
 8006468:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	3b01      	subs	r3, #1
 800646e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d1f1      	bne.n	800645a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006476:	4b13      	ldr	r3, [pc, #76]	; (80064c4 <xTaskResumeAll+0x134>)
 8006478:	2200      	movs	r2, #0
 800647a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800647c:	4b10      	ldr	r3, [pc, #64]	; (80064c0 <xTaskResumeAll+0x130>)
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d009      	beq.n	8006498 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006484:	2301      	movs	r3, #1
 8006486:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006488:	4b0f      	ldr	r3, [pc, #60]	; (80064c8 <xTaskResumeAll+0x138>)
 800648a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800648e:	601a      	str	r2, [r3, #0]
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006498:	f001 fad4 	bl	8007a44 <vPortExitCritical>

	return xAlreadyYielded;
 800649c:	68bb      	ldr	r3, [r7, #8]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3710      	adds	r7, #16
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bd80      	pop	{r7, pc}
 80064a6:	bf00      	nop
 80064a8:	20000e80 	.word	0x20000e80
 80064ac:	20000e58 	.word	0x20000e58
 80064b0:	20000e18 	.word	0x20000e18
 80064b4:	20000e60 	.word	0x20000e60
 80064b8:	20000988 	.word	0x20000988
 80064bc:	20000984 	.word	0x20000984
 80064c0:	20000e6c 	.word	0x20000e6c
 80064c4:	20000e68 	.word	0x20000e68
 80064c8:	e000ed04 	.word	0xe000ed04

080064cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064cc:	b480      	push	{r7}
 80064ce:	b083      	sub	sp, #12
 80064d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064d2:	4b05      	ldr	r3, [pc, #20]	; (80064e8 <xTaskGetTickCount+0x1c>)
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064d8:	687b      	ldr	r3, [r7, #4]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	370c      	adds	r7, #12
 80064de:	46bd      	mov	sp, r7
 80064e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e4:	4770      	bx	lr
 80064e6:	bf00      	nop
 80064e8:	20000e5c 	.word	0x20000e5c

080064ec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b086      	sub	sp, #24
 80064f0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064f2:	2300      	movs	r3, #0
 80064f4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064f6:	4b4f      	ldr	r3, [pc, #316]	; (8006634 <xTaskIncrementTick+0x148>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	f040 808f 	bne.w	800661e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006500:	4b4d      	ldr	r3, [pc, #308]	; (8006638 <xTaskIncrementTick+0x14c>)
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	3301      	adds	r3, #1
 8006506:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006508:	4a4b      	ldr	r2, [pc, #300]	; (8006638 <xTaskIncrementTick+0x14c>)
 800650a:	693b      	ldr	r3, [r7, #16]
 800650c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800650e:	693b      	ldr	r3, [r7, #16]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d120      	bne.n	8006556 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006514:	4b49      	ldr	r3, [pc, #292]	; (800663c <xTaskIncrementTick+0x150>)
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <xTaskIncrementTick+0x48>
	__asm volatile
 800651e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006522:	f383 8811 	msr	BASEPRI, r3
 8006526:	f3bf 8f6f 	isb	sy
 800652a:	f3bf 8f4f 	dsb	sy
 800652e:	603b      	str	r3, [r7, #0]
}
 8006530:	bf00      	nop
 8006532:	e7fe      	b.n	8006532 <xTaskIncrementTick+0x46>
 8006534:	4b41      	ldr	r3, [pc, #260]	; (800663c <xTaskIncrementTick+0x150>)
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	60fb      	str	r3, [r7, #12]
 800653a:	4b41      	ldr	r3, [pc, #260]	; (8006640 <xTaskIncrementTick+0x154>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a3f      	ldr	r2, [pc, #252]	; (800663c <xTaskIncrementTick+0x150>)
 8006540:	6013      	str	r3, [r2, #0]
 8006542:	4a3f      	ldr	r2, [pc, #252]	; (8006640 <xTaskIncrementTick+0x154>)
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	6013      	str	r3, [r2, #0]
 8006548:	4b3e      	ldr	r3, [pc, #248]	; (8006644 <xTaskIncrementTick+0x158>)
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	3301      	adds	r3, #1
 800654e:	4a3d      	ldr	r2, [pc, #244]	; (8006644 <xTaskIncrementTick+0x158>)
 8006550:	6013      	str	r3, [r2, #0]
 8006552:	f000 fadb 	bl	8006b0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006556:	4b3c      	ldr	r3, [pc, #240]	; (8006648 <xTaskIncrementTick+0x15c>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	693a      	ldr	r2, [r7, #16]
 800655c:	429a      	cmp	r2, r3
 800655e:	d349      	bcc.n	80065f4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006560:	4b36      	ldr	r3, [pc, #216]	; (800663c <xTaskIncrementTick+0x150>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d104      	bne.n	8006574 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800656a:	4b37      	ldr	r3, [pc, #220]	; (8006648 <xTaskIncrementTick+0x15c>)
 800656c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006570:	601a      	str	r2, [r3, #0]
					break;
 8006572:	e03f      	b.n	80065f4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006574:	4b31      	ldr	r3, [pc, #196]	; (800663c <xTaskIncrementTick+0x150>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	68db      	ldr	r3, [r3, #12]
 800657c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006584:	693a      	ldr	r2, [r7, #16]
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	429a      	cmp	r2, r3
 800658a:	d203      	bcs.n	8006594 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800658c:	4a2e      	ldr	r2, [pc, #184]	; (8006648 <xTaskIncrementTick+0x15c>)
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006592:	e02f      	b.n	80065f4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006594:	68bb      	ldr	r3, [r7, #8]
 8006596:	3304      	adds	r3, #4
 8006598:	4618      	mov	r0, r3
 800659a:	f7fe fba1 	bl	8004ce0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d004      	beq.n	80065b0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	3318      	adds	r3, #24
 80065aa:	4618      	mov	r0, r3
 80065ac:	f7fe fb98 	bl	8004ce0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b4:	4b25      	ldr	r3, [pc, #148]	; (800664c <xTaskIncrementTick+0x160>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	429a      	cmp	r2, r3
 80065ba:	d903      	bls.n	80065c4 <xTaskIncrementTick+0xd8>
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	4a22      	ldr	r2, [pc, #136]	; (800664c <xTaskIncrementTick+0x160>)
 80065c2:	6013      	str	r3, [r2, #0]
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	009b      	lsls	r3, r3, #2
 80065d0:	4a1f      	ldr	r2, [pc, #124]	; (8006650 <xTaskIncrementTick+0x164>)
 80065d2:	441a      	add	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	3304      	adds	r3, #4
 80065d8:	4619      	mov	r1, r3
 80065da:	4610      	mov	r0, r2
 80065dc:	f7fe fb23 	bl	8004c26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e4:	4b1b      	ldr	r3, [pc, #108]	; (8006654 <xTaskIncrementTick+0x168>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d3b8      	bcc.n	8006560 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80065ee:	2301      	movs	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065f2:	e7b5      	b.n	8006560 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065f4:	4b17      	ldr	r3, [pc, #92]	; (8006654 <xTaskIncrementTick+0x168>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065fa:	4915      	ldr	r1, [pc, #84]	; (8006650 <xTaskIncrementTick+0x164>)
 80065fc:	4613      	mov	r3, r2
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	4413      	add	r3, r2
 8006602:	009b      	lsls	r3, r3, #2
 8006604:	440b      	add	r3, r1
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d901      	bls.n	8006610 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800660c:	2301      	movs	r3, #1
 800660e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006610:	4b11      	ldr	r3, [pc, #68]	; (8006658 <xTaskIncrementTick+0x16c>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d007      	beq.n	8006628 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]
 800661c:	e004      	b.n	8006628 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800661e:	4b0f      	ldr	r3, [pc, #60]	; (800665c <xTaskIncrementTick+0x170>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3301      	adds	r3, #1
 8006624:	4a0d      	ldr	r2, [pc, #52]	; (800665c <xTaskIncrementTick+0x170>)
 8006626:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006628:	697b      	ldr	r3, [r7, #20]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000e80 	.word	0x20000e80
 8006638:	20000e5c 	.word	0x20000e5c
 800663c:	20000e10 	.word	0x20000e10
 8006640:	20000e14 	.word	0x20000e14
 8006644:	20000e70 	.word	0x20000e70
 8006648:	20000e78 	.word	0x20000e78
 800664c:	20000e60 	.word	0x20000e60
 8006650:	20000988 	.word	0x20000988
 8006654:	20000984 	.word	0x20000984
 8006658:	20000e6c 	.word	0x20000e6c
 800665c:	20000e68 	.word	0x20000e68

08006660 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006660:	b480      	push	{r7}
 8006662:	b085      	sub	sp, #20
 8006664:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006666:	4b2a      	ldr	r3, [pc, #168]	; (8006710 <vTaskSwitchContext+0xb0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800666e:	4b29      	ldr	r3, [pc, #164]	; (8006714 <vTaskSwitchContext+0xb4>)
 8006670:	2201      	movs	r2, #1
 8006672:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006674:	e046      	b.n	8006704 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006676:	4b27      	ldr	r3, [pc, #156]	; (8006714 <vTaskSwitchContext+0xb4>)
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800667c:	4b26      	ldr	r3, [pc, #152]	; (8006718 <vTaskSwitchContext+0xb8>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	60fb      	str	r3, [r7, #12]
 8006682:	e010      	b.n	80066a6 <vTaskSwitchContext+0x46>
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d10a      	bne.n	80066a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800668a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668e:	f383 8811 	msr	BASEPRI, r3
 8006692:	f3bf 8f6f 	isb	sy
 8006696:	f3bf 8f4f 	dsb	sy
 800669a:	607b      	str	r3, [r7, #4]
}
 800669c:	bf00      	nop
 800669e:	e7fe      	b.n	800669e <vTaskSwitchContext+0x3e>
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	3b01      	subs	r3, #1
 80066a4:	60fb      	str	r3, [r7, #12]
 80066a6:	491d      	ldr	r1, [pc, #116]	; (800671c <vTaskSwitchContext+0xbc>)
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4613      	mov	r3, r2
 80066ac:	009b      	lsls	r3, r3, #2
 80066ae:	4413      	add	r3, r2
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	440b      	add	r3, r1
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d0e4      	beq.n	8006684 <vTaskSwitchContext+0x24>
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	4613      	mov	r3, r2
 80066be:	009b      	lsls	r3, r3, #2
 80066c0:	4413      	add	r3, r2
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	4a15      	ldr	r2, [pc, #84]	; (800671c <vTaskSwitchContext+0xbc>)
 80066c6:	4413      	add	r3, r2
 80066c8:	60bb      	str	r3, [r7, #8]
 80066ca:	68bb      	ldr	r3, [r7, #8]
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	605a      	str	r2, [r3, #4]
 80066d4:	68bb      	ldr	r3, [r7, #8]
 80066d6:	685a      	ldr	r2, [r3, #4]
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	3308      	adds	r3, #8
 80066dc:	429a      	cmp	r2, r3
 80066de:	d104      	bne.n	80066ea <vTaskSwitchContext+0x8a>
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	685a      	ldr	r2, [r3, #4]
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	605a      	str	r2, [r3, #4]
 80066ea:	68bb      	ldr	r3, [r7, #8]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	4a0b      	ldr	r2, [pc, #44]	; (8006720 <vTaskSwitchContext+0xc0>)
 80066f2:	6013      	str	r3, [r2, #0]
 80066f4:	4a08      	ldr	r2, [pc, #32]	; (8006718 <vTaskSwitchContext+0xb8>)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066fa:	4b09      	ldr	r3, [pc, #36]	; (8006720 <vTaskSwitchContext+0xc0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3354      	adds	r3, #84	; 0x54
 8006700:	4a08      	ldr	r2, [pc, #32]	; (8006724 <vTaskSwitchContext+0xc4>)
 8006702:	6013      	str	r3, [r2, #0]
}
 8006704:	bf00      	nop
 8006706:	3714      	adds	r7, #20
 8006708:	46bd      	mov	sp, r7
 800670a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670e:	4770      	bx	lr
 8006710:	20000e80 	.word	0x20000e80
 8006714:	20000e6c 	.word	0x20000e6c
 8006718:	20000e60 	.word	0x20000e60
 800671c:	20000988 	.word	0x20000988
 8006720:	20000984 	.word	0x20000984
 8006724:	2000006c 	.word	0x2000006c

08006728 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b084      	sub	sp, #16
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
 8006730:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2b00      	cmp	r3, #0
 8006736:	d10a      	bne.n	800674e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800673c:	f383 8811 	msr	BASEPRI, r3
 8006740:	f3bf 8f6f 	isb	sy
 8006744:	f3bf 8f4f 	dsb	sy
 8006748:	60fb      	str	r3, [r7, #12]
}
 800674a:	bf00      	nop
 800674c:	e7fe      	b.n	800674c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800674e:	4b07      	ldr	r3, [pc, #28]	; (800676c <vTaskPlaceOnEventList+0x44>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3318      	adds	r3, #24
 8006754:	4619      	mov	r1, r3
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f7fe fa89 	bl	8004c6e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800675c:	2101      	movs	r1, #1
 800675e:	6838      	ldr	r0, [r7, #0]
 8006760:	f000 fb8e 	bl	8006e80 <prvAddCurrentTaskToDelayedList>
}
 8006764:	bf00      	nop
 8006766:	3710      	adds	r7, #16
 8006768:	46bd      	mov	sp, r7
 800676a:	bd80      	pop	{r7, pc}
 800676c:	20000984 	.word	0x20000984

08006770 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006770:	b580      	push	{r7, lr}
 8006772:	b086      	sub	sp, #24
 8006774:	af00      	add	r7, sp, #0
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d10a      	bne.n	8006798 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	617b      	str	r3, [r7, #20]
}
 8006794:	bf00      	nop
 8006796:	e7fe      	b.n	8006796 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006798:	4b0a      	ldr	r3, [pc, #40]	; (80067c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	3318      	adds	r3, #24
 800679e:	4619      	mov	r1, r3
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f7fe fa40 	bl	8004c26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d002      	beq.n	80067b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067b2:	6879      	ldr	r1, [r7, #4]
 80067b4:	68b8      	ldr	r0, [r7, #8]
 80067b6:	f000 fb63 	bl	8006e80 <prvAddCurrentTaskToDelayedList>
	}
 80067ba:	bf00      	nop
 80067bc:	3718      	adds	r7, #24
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000984 	.word	0x20000984

080067c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b086      	sub	sp, #24
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067d8:	693b      	ldr	r3, [r7, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	60fb      	str	r3, [r7, #12]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	3318      	adds	r3, #24
 80067f8:	4618      	mov	r0, r3
 80067fa:	f7fe fa71 	bl	8004ce0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067fe:	4b1e      	ldr	r3, [pc, #120]	; (8006878 <xTaskRemoveFromEventList+0xb0>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d11d      	bne.n	8006842 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	3304      	adds	r3, #4
 800680a:	4618      	mov	r0, r3
 800680c:	f7fe fa68 	bl	8004ce0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006810:	693b      	ldr	r3, [r7, #16]
 8006812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006814:	4b19      	ldr	r3, [pc, #100]	; (800687c <xTaskRemoveFromEventList+0xb4>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	429a      	cmp	r2, r3
 800681a:	d903      	bls.n	8006824 <xTaskRemoveFromEventList+0x5c>
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006820:	4a16      	ldr	r2, [pc, #88]	; (800687c <xTaskRemoveFromEventList+0xb4>)
 8006822:	6013      	str	r3, [r2, #0]
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	4a13      	ldr	r2, [pc, #76]	; (8006880 <xTaskRemoveFromEventList+0xb8>)
 8006832:	441a      	add	r2, r3
 8006834:	693b      	ldr	r3, [r7, #16]
 8006836:	3304      	adds	r3, #4
 8006838:	4619      	mov	r1, r3
 800683a:	4610      	mov	r0, r2
 800683c:	f7fe f9f3 	bl	8004c26 <vListInsertEnd>
 8006840:	e005      	b.n	800684e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	3318      	adds	r3, #24
 8006846:	4619      	mov	r1, r3
 8006848:	480e      	ldr	r0, [pc, #56]	; (8006884 <xTaskRemoveFromEventList+0xbc>)
 800684a:	f7fe f9ec 	bl	8004c26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800684e:	693b      	ldr	r3, [r7, #16]
 8006850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006852:	4b0d      	ldr	r3, [pc, #52]	; (8006888 <xTaskRemoveFromEventList+0xc0>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006858:	429a      	cmp	r2, r3
 800685a:	d905      	bls.n	8006868 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800685c:	2301      	movs	r3, #1
 800685e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006860:	4b0a      	ldr	r3, [pc, #40]	; (800688c <xTaskRemoveFromEventList+0xc4>)
 8006862:	2201      	movs	r2, #1
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	e001      	b.n	800686c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006868:	2300      	movs	r3, #0
 800686a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800686c:	697b      	ldr	r3, [r7, #20]
}
 800686e:	4618      	mov	r0, r3
 8006870:	3718      	adds	r7, #24
 8006872:	46bd      	mov	sp, r7
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	20000e80 	.word	0x20000e80
 800687c:	20000e60 	.word	0x20000e60
 8006880:	20000988 	.word	0x20000988
 8006884:	20000e18 	.word	0x20000e18
 8006888:	20000984 	.word	0x20000984
 800688c:	20000e6c 	.word	0x20000e6c

08006890 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006898:	4b06      	ldr	r3, [pc, #24]	; (80068b4 <vTaskInternalSetTimeOutState+0x24>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068a0:	4b05      	ldr	r3, [pc, #20]	; (80068b8 <vTaskInternalSetTimeOutState+0x28>)
 80068a2:	681a      	ldr	r2, [r3, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	605a      	str	r2, [r3, #4]
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	20000e70 	.word	0x20000e70
 80068b8:	20000e5c 	.word	0x20000e5c

080068bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d10a      	bne.n	80068e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068d0:	f383 8811 	msr	BASEPRI, r3
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	f3bf 8f4f 	dsb	sy
 80068dc:	613b      	str	r3, [r7, #16]
}
 80068de:	bf00      	nop
 80068e0:	e7fe      	b.n	80068e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d10a      	bne.n	80068fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	60fb      	str	r3, [r7, #12]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80068fe:	f001 f871 	bl	80079e4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006902:	4b1d      	ldr	r3, [pc, #116]	; (8006978 <xTaskCheckForTimeOut+0xbc>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	1ad3      	subs	r3, r2, r3
 8006910:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800691a:	d102      	bne.n	8006922 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800691c:	2300      	movs	r3, #0
 800691e:	61fb      	str	r3, [r7, #28]
 8006920:	e023      	b.n	800696a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681a      	ldr	r2, [r3, #0]
 8006926:	4b15      	ldr	r3, [pc, #84]	; (800697c <xTaskCheckForTimeOut+0xc0>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	429a      	cmp	r2, r3
 800692c:	d007      	beq.n	800693e <xTaskCheckForTimeOut+0x82>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	69ba      	ldr	r2, [r7, #24]
 8006934:	429a      	cmp	r2, r3
 8006936:	d302      	bcc.n	800693e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006938:	2301      	movs	r3, #1
 800693a:	61fb      	str	r3, [r7, #28]
 800693c:	e015      	b.n	800696a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	697a      	ldr	r2, [r7, #20]
 8006944:	429a      	cmp	r2, r3
 8006946:	d20b      	bcs.n	8006960 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	681a      	ldr	r2, [r3, #0]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	1ad2      	subs	r2, r2, r3
 8006950:	683b      	ldr	r3, [r7, #0]
 8006952:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006954:	6878      	ldr	r0, [r7, #4]
 8006956:	f7ff ff9b 	bl	8006890 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800695a:	2300      	movs	r3, #0
 800695c:	61fb      	str	r3, [r7, #28]
 800695e:	e004      	b.n	800696a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	2200      	movs	r2, #0
 8006964:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006966:	2301      	movs	r3, #1
 8006968:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800696a:	f001 f86b 	bl	8007a44 <vPortExitCritical>

	return xReturn;
 800696e:	69fb      	ldr	r3, [r7, #28]
}
 8006970:	4618      	mov	r0, r3
 8006972:	3720      	adds	r7, #32
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	20000e5c 	.word	0x20000e5c
 800697c:	20000e70 	.word	0x20000e70

08006980 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006984:	4b03      	ldr	r3, [pc, #12]	; (8006994 <vTaskMissedYield+0x14>)
 8006986:	2201      	movs	r2, #1
 8006988:	601a      	str	r2, [r3, #0]
}
 800698a:	bf00      	nop
 800698c:	46bd      	mov	sp, r7
 800698e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006992:	4770      	bx	lr
 8006994:	20000e6c 	.word	0x20000e6c

08006998 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b082      	sub	sp, #8
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069a0:	f000 f852 	bl	8006a48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069a4:	4b06      	ldr	r3, [pc, #24]	; (80069c0 <prvIdleTask+0x28>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	2b01      	cmp	r3, #1
 80069aa:	d9f9      	bls.n	80069a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069ac:	4b05      	ldr	r3, [pc, #20]	; (80069c4 <prvIdleTask+0x2c>)
 80069ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069b2:	601a      	str	r2, [r3, #0]
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069bc:	e7f0      	b.n	80069a0 <prvIdleTask+0x8>
 80069be:	bf00      	nop
 80069c0:	20000988 	.word	0x20000988
 80069c4:	e000ed04 	.word	0xe000ed04

080069c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069ce:	2300      	movs	r3, #0
 80069d0:	607b      	str	r3, [r7, #4]
 80069d2:	e00c      	b.n	80069ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069d4:	687a      	ldr	r2, [r7, #4]
 80069d6:	4613      	mov	r3, r2
 80069d8:	009b      	lsls	r3, r3, #2
 80069da:	4413      	add	r3, r2
 80069dc:	009b      	lsls	r3, r3, #2
 80069de:	4a12      	ldr	r2, [pc, #72]	; (8006a28 <prvInitialiseTaskLists+0x60>)
 80069e0:	4413      	add	r3, r2
 80069e2:	4618      	mov	r0, r3
 80069e4:	f7fe f8f2 	bl	8004bcc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	3301      	adds	r3, #1
 80069ec:	607b      	str	r3, [r7, #4]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2b37      	cmp	r3, #55	; 0x37
 80069f2:	d9ef      	bls.n	80069d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069f4:	480d      	ldr	r0, [pc, #52]	; (8006a2c <prvInitialiseTaskLists+0x64>)
 80069f6:	f7fe f8e9 	bl	8004bcc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069fa:	480d      	ldr	r0, [pc, #52]	; (8006a30 <prvInitialiseTaskLists+0x68>)
 80069fc:	f7fe f8e6 	bl	8004bcc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a00:	480c      	ldr	r0, [pc, #48]	; (8006a34 <prvInitialiseTaskLists+0x6c>)
 8006a02:	f7fe f8e3 	bl	8004bcc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a06:	480c      	ldr	r0, [pc, #48]	; (8006a38 <prvInitialiseTaskLists+0x70>)
 8006a08:	f7fe f8e0 	bl	8004bcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a0c:	480b      	ldr	r0, [pc, #44]	; (8006a3c <prvInitialiseTaskLists+0x74>)
 8006a0e:	f7fe f8dd 	bl	8004bcc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a12:	4b0b      	ldr	r3, [pc, #44]	; (8006a40 <prvInitialiseTaskLists+0x78>)
 8006a14:	4a05      	ldr	r2, [pc, #20]	; (8006a2c <prvInitialiseTaskLists+0x64>)
 8006a16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a18:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <prvInitialiseTaskLists+0x7c>)
 8006a1a:	4a05      	ldr	r2, [pc, #20]	; (8006a30 <prvInitialiseTaskLists+0x68>)
 8006a1c:	601a      	str	r2, [r3, #0]
}
 8006a1e:	bf00      	nop
 8006a20:	3708      	adds	r7, #8
 8006a22:	46bd      	mov	sp, r7
 8006a24:	bd80      	pop	{r7, pc}
 8006a26:	bf00      	nop
 8006a28:	20000988 	.word	0x20000988
 8006a2c:	20000de8 	.word	0x20000de8
 8006a30:	20000dfc 	.word	0x20000dfc
 8006a34:	20000e18 	.word	0x20000e18
 8006a38:	20000e2c 	.word	0x20000e2c
 8006a3c:	20000e44 	.word	0x20000e44
 8006a40:	20000e10 	.word	0x20000e10
 8006a44:	20000e14 	.word	0x20000e14

08006a48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b082      	sub	sp, #8
 8006a4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a4e:	e019      	b.n	8006a84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a50:	f000 ffc8 	bl	80079e4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a54:	4b10      	ldr	r3, [pc, #64]	; (8006a98 <prvCheckTasksWaitingTermination+0x50>)
 8006a56:	68db      	ldr	r3, [r3, #12]
 8006a58:	68db      	ldr	r3, [r3, #12]
 8006a5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	3304      	adds	r3, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f7fe f93d 	bl	8004ce0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a66:	4b0d      	ldr	r3, [pc, #52]	; (8006a9c <prvCheckTasksWaitingTermination+0x54>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	3b01      	subs	r3, #1
 8006a6c:	4a0b      	ldr	r2, [pc, #44]	; (8006a9c <prvCheckTasksWaitingTermination+0x54>)
 8006a6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a70:	4b0b      	ldr	r3, [pc, #44]	; (8006aa0 <prvCheckTasksWaitingTermination+0x58>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3b01      	subs	r3, #1
 8006a76:	4a0a      	ldr	r2, [pc, #40]	; (8006aa0 <prvCheckTasksWaitingTermination+0x58>)
 8006a78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a7a:	f000 ffe3 	bl	8007a44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a7e:	6878      	ldr	r0, [r7, #4]
 8006a80:	f000 f810 	bl	8006aa4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a84:	4b06      	ldr	r3, [pc, #24]	; (8006aa0 <prvCheckTasksWaitingTermination+0x58>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d1e1      	bne.n	8006a50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a8c:	bf00      	nop
 8006a8e:	bf00      	nop
 8006a90:	3708      	adds	r7, #8
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	20000e2c 	.word	0x20000e2c
 8006a9c:	20000e58 	.word	0x20000e58
 8006aa0:	20000e40 	.word	0x20000e40

08006aa4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	3354      	adds	r3, #84	; 0x54
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f001 fbeb 	bl	800828c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d108      	bne.n	8006ad2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	f001 f97b 	bl	8007dc0 <vPortFree>
				vPortFree( pxTCB );
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 f978 	bl	8007dc0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ad0:	e018      	b.n	8006b04 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d103      	bne.n	8006ae4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006adc:	6878      	ldr	r0, [r7, #4]
 8006ade:	f001 f96f 	bl	8007dc0 <vPortFree>
	}
 8006ae2:	e00f      	b.n	8006b04 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006aea:	2b02      	cmp	r3, #2
 8006aec:	d00a      	beq.n	8006b04 <prvDeleteTCB+0x60>
	__asm volatile
 8006aee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af2:	f383 8811 	msr	BASEPRI, r3
 8006af6:	f3bf 8f6f 	isb	sy
 8006afa:	f3bf 8f4f 	dsb	sy
 8006afe:	60fb      	str	r3, [r7, #12]
}
 8006b00:	bf00      	nop
 8006b02:	e7fe      	b.n	8006b02 <prvDeleteTCB+0x5e>
	}
 8006b04:	bf00      	nop
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b083      	sub	sp, #12
 8006b10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b12:	4b0c      	ldr	r3, [pc, #48]	; (8006b44 <prvResetNextTaskUnblockTime+0x38>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d104      	bne.n	8006b26 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b1c:	4b0a      	ldr	r3, [pc, #40]	; (8006b48 <prvResetNextTaskUnblockTime+0x3c>)
 8006b1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b22:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b24:	e008      	b.n	8006b38 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b26:	4b07      	ldr	r3, [pc, #28]	; (8006b44 <prvResetNextTaskUnblockTime+0x38>)
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	68db      	ldr	r3, [r3, #12]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	4a04      	ldr	r2, [pc, #16]	; (8006b48 <prvResetNextTaskUnblockTime+0x3c>)
 8006b36:	6013      	str	r3, [r2, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr
 8006b44:	20000e10 	.word	0x20000e10
 8006b48:	20000e78 	.word	0x20000e78

08006b4c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b083      	sub	sp, #12
 8006b50:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006b52:	4b05      	ldr	r3, [pc, #20]	; (8006b68 <xTaskGetCurrentTaskHandle+0x1c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006b58:	687b      	ldr	r3, [r7, #4]
	}
 8006b5a:	4618      	mov	r0, r3
 8006b5c:	370c      	adds	r7, #12
 8006b5e:	46bd      	mov	sp, r7
 8006b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b64:	4770      	bx	lr
 8006b66:	bf00      	nop
 8006b68:	20000984 	.word	0x20000984

08006b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b72:	4b0b      	ldr	r3, [pc, #44]	; (8006ba0 <xTaskGetSchedulerState+0x34>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d102      	bne.n	8006b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b7a:	2301      	movs	r3, #1
 8006b7c:	607b      	str	r3, [r7, #4]
 8006b7e:	e008      	b.n	8006b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b80:	4b08      	ldr	r3, [pc, #32]	; (8006ba4 <xTaskGetSchedulerState+0x38>)
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d102      	bne.n	8006b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	607b      	str	r3, [r7, #4]
 8006b8c:	e001      	b.n	8006b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b8e:	2300      	movs	r3, #0
 8006b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b92:	687b      	ldr	r3, [r7, #4]
	}
 8006b94:	4618      	mov	r0, r3
 8006b96:	370c      	adds	r7, #12
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9e:	4770      	bx	lr
 8006ba0:	20000e64 	.word	0x20000e64
 8006ba4:	20000e80 	.word	0x20000e80

08006ba8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b084      	sub	sp, #16
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d051      	beq.n	8006c62 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bc2:	4b2a      	ldr	r3, [pc, #168]	; (8006c6c <xTaskPriorityInherit+0xc4>)
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d241      	bcs.n	8006c50 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	699b      	ldr	r3, [r3, #24]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	db06      	blt.n	8006be2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006bd4:	4b25      	ldr	r3, [pc, #148]	; (8006c6c <xTaskPriorityInherit+0xc4>)
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	6959      	ldr	r1, [r3, #20]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bea:	4613      	mov	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4413      	add	r3, r2
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4a1f      	ldr	r2, [pc, #124]	; (8006c70 <xTaskPriorityInherit+0xc8>)
 8006bf4:	4413      	add	r3, r2
 8006bf6:	4299      	cmp	r1, r3
 8006bf8:	d122      	bne.n	8006c40 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	3304      	adds	r3, #4
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7fe f86e 	bl	8004ce0 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c04:	4b19      	ldr	r3, [pc, #100]	; (8006c6c <xTaskPriorityInherit+0xc4>)
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c0a:	68bb      	ldr	r3, [r7, #8]
 8006c0c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c0e:	68bb      	ldr	r3, [r7, #8]
 8006c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c12:	4b18      	ldr	r3, [pc, #96]	; (8006c74 <xTaskPriorityInherit+0xcc>)
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	429a      	cmp	r2, r3
 8006c18:	d903      	bls.n	8006c22 <xTaskPriorityInherit+0x7a>
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c1e:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <xTaskPriorityInherit+0xcc>)
 8006c20:	6013      	str	r3, [r2, #0]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c26:	4613      	mov	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4a10      	ldr	r2, [pc, #64]	; (8006c70 <xTaskPriorityInherit+0xc8>)
 8006c30:	441a      	add	r2, r3
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	3304      	adds	r3, #4
 8006c36:	4619      	mov	r1, r3
 8006c38:	4610      	mov	r0, r2
 8006c3a:	f7fd fff4 	bl	8004c26 <vListInsertEnd>
 8006c3e:	e004      	b.n	8006c4a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c40:	4b0a      	ldr	r3, [pc, #40]	; (8006c6c <xTaskPriorityInherit+0xc4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c4a:	2301      	movs	r3, #1
 8006c4c:	60fb      	str	r3, [r7, #12]
 8006c4e:	e008      	b.n	8006c62 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c54:	4b05      	ldr	r3, [pc, #20]	; (8006c6c <xTaskPriorityInherit+0xc4>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	d201      	bcs.n	8006c62 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006c5e:	2301      	movs	r3, #1
 8006c60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c62:	68fb      	ldr	r3, [r7, #12]
	}
 8006c64:	4618      	mov	r0, r3
 8006c66:	3710      	adds	r7, #16
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}
 8006c6c:	20000984 	.word	0x20000984
 8006c70:	20000988 	.word	0x20000988
 8006c74:	20000e60 	.word	0x20000e60

08006c78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b086      	sub	sp, #24
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006c84:	2300      	movs	r3, #0
 8006c86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d056      	beq.n	8006d3c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006c8e:	4b2e      	ldr	r3, [pc, #184]	; (8006d48 <xTaskPriorityDisinherit+0xd0>)
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	693a      	ldr	r2, [r7, #16]
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d00a      	beq.n	8006cae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	60fb      	str	r3, [r7, #12]
}
 8006caa:	bf00      	nop
 8006cac:	e7fe      	b.n	8006cac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10a      	bne.n	8006ccc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60bb      	str	r3, [r7, #8]
}
 8006cc8:	bf00      	nop
 8006cca:	e7fe      	b.n	8006cca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006ccc:	693b      	ldr	r3, [r7, #16]
 8006cce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cd0:	1e5a      	subs	r2, r3, #1
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d02c      	beq.n	8006d3c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d128      	bne.n	8006d3c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	3304      	adds	r3, #4
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fd fff6 	bl	8004ce0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006cf4:	693b      	ldr	r3, [r7, #16]
 8006cf6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cfc:	693b      	ldr	r3, [r7, #16]
 8006cfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d00:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d0c:	4b0f      	ldr	r3, [pc, #60]	; (8006d4c <xTaskPriorityDisinherit+0xd4>)
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	d903      	bls.n	8006d1c <xTaskPriorityDisinherit+0xa4>
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d18:	4a0c      	ldr	r2, [pc, #48]	; (8006d4c <xTaskPriorityDisinherit+0xd4>)
 8006d1a:	6013      	str	r3, [r2, #0]
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d20:	4613      	mov	r3, r2
 8006d22:	009b      	lsls	r3, r3, #2
 8006d24:	4413      	add	r3, r2
 8006d26:	009b      	lsls	r3, r3, #2
 8006d28:	4a09      	ldr	r2, [pc, #36]	; (8006d50 <xTaskPriorityDisinherit+0xd8>)
 8006d2a:	441a      	add	r2, r3
 8006d2c:	693b      	ldr	r3, [r7, #16]
 8006d2e:	3304      	adds	r3, #4
 8006d30:	4619      	mov	r1, r3
 8006d32:	4610      	mov	r0, r2
 8006d34:	f7fd ff77 	bl	8004c26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d3c:	697b      	ldr	r3, [r7, #20]
	}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3718      	adds	r7, #24
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20000984 	.word	0x20000984
 8006d4c:	20000e60 	.word	0x20000e60
 8006d50:	20000988 	.word	0x20000988

08006d54 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af00      	add	r7, sp, #0
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d62:	2301      	movs	r3, #1
 8006d64:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d06a      	beq.n	8006e42 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006d6c:	69bb      	ldr	r3, [r7, #24]
 8006d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d10a      	bne.n	8006d8a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006d74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d78:	f383 8811 	msr	BASEPRI, r3
 8006d7c:	f3bf 8f6f 	isb	sy
 8006d80:	f3bf 8f4f 	dsb	sy
 8006d84:	60fb      	str	r3, [r7, #12]
}
 8006d86:	bf00      	nop
 8006d88:	e7fe      	b.n	8006d88 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006d8a:	69bb      	ldr	r3, [r7, #24]
 8006d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	429a      	cmp	r2, r3
 8006d92:	d902      	bls.n	8006d9a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	61fb      	str	r3, [r7, #28]
 8006d98:	e002      	b.n	8006da0 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006d9a:	69bb      	ldr	r3, [r7, #24]
 8006d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d9e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006da0:	69bb      	ldr	r3, [r7, #24]
 8006da2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da4:	69fa      	ldr	r2, [r7, #28]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d04b      	beq.n	8006e42 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006daa:	69bb      	ldr	r3, [r7, #24]
 8006dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dae:	697a      	ldr	r2, [r7, #20]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d146      	bne.n	8006e42 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006db4:	4b25      	ldr	r3, [pc, #148]	; (8006e4c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	69ba      	ldr	r2, [r7, #24]
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d10a      	bne.n	8006dd4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dc2:	f383 8811 	msr	BASEPRI, r3
 8006dc6:	f3bf 8f6f 	isb	sy
 8006dca:	f3bf 8f4f 	dsb	sy
 8006dce:	60bb      	str	r3, [r7, #8]
}
 8006dd0:	bf00      	nop
 8006dd2:	e7fe      	b.n	8006dd2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006dd4:	69bb      	ldr	r3, [r7, #24]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006dda:	69bb      	ldr	r3, [r7, #24]
 8006ddc:	69fa      	ldr	r2, [r7, #28]
 8006dde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006de0:	69bb      	ldr	r3, [r7, #24]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	db04      	blt.n	8006df2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006dee:	69bb      	ldr	r3, [r7, #24]
 8006df0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006df2:	69bb      	ldr	r3, [r7, #24]
 8006df4:	6959      	ldr	r1, [r3, #20]
 8006df6:	693a      	ldr	r2, [r7, #16]
 8006df8:	4613      	mov	r3, r2
 8006dfa:	009b      	lsls	r3, r3, #2
 8006dfc:	4413      	add	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4a13      	ldr	r2, [pc, #76]	; (8006e50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e02:	4413      	add	r3, r2
 8006e04:	4299      	cmp	r1, r3
 8006e06:	d11c      	bne.n	8006e42 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f7fd ff67 	bl	8004ce0 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e12:	69bb      	ldr	r3, [r7, #24]
 8006e14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e16:	4b0f      	ldr	r3, [pc, #60]	; (8006e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	429a      	cmp	r2, r3
 8006e1c:	d903      	bls.n	8006e26 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006e1e:	69bb      	ldr	r3, [r7, #24]
 8006e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e22:	4a0c      	ldr	r2, [pc, #48]	; (8006e54 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e24:	6013      	str	r3, [r2, #0]
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e2a:	4613      	mov	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4413      	add	r3, r2
 8006e30:	009b      	lsls	r3, r3, #2
 8006e32:	4a07      	ldr	r2, [pc, #28]	; (8006e50 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e34:	441a      	add	r2, r3
 8006e36:	69bb      	ldr	r3, [r7, #24]
 8006e38:	3304      	adds	r3, #4
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	4610      	mov	r0, r2
 8006e3e:	f7fd fef2 	bl	8004c26 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e42:	bf00      	nop
 8006e44:	3720      	adds	r7, #32
 8006e46:	46bd      	mov	sp, r7
 8006e48:	bd80      	pop	{r7, pc}
 8006e4a:	bf00      	nop
 8006e4c:	20000984 	.word	0x20000984
 8006e50:	20000988 	.word	0x20000988
 8006e54:	20000e60 	.word	0x20000e60

08006e58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e58:	b480      	push	{r7}
 8006e5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e5c:	4b07      	ldr	r3, [pc, #28]	; (8006e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d004      	beq.n	8006e6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006e64:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006e6a:	3201      	adds	r2, #1
 8006e6c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006e6e:	4b03      	ldr	r3, [pc, #12]	; (8006e7c <pvTaskIncrementMutexHeldCount+0x24>)
 8006e70:	681b      	ldr	r3, [r3, #0]
	}
 8006e72:	4618      	mov	r0, r3
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr
 8006e7c:	20000984 	.word	0x20000984

08006e80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b084      	sub	sp, #16
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
 8006e88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006e8a:	4b21      	ldr	r3, [pc, #132]	; (8006f10 <prvAddCurrentTaskToDelayedList+0x90>)
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e90:	4b20      	ldr	r3, [pc, #128]	; (8006f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	3304      	adds	r3, #4
 8006e96:	4618      	mov	r0, r3
 8006e98:	f7fd ff22 	bl	8004ce0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006ea2:	d10a      	bne.n	8006eba <prvAddCurrentTaskToDelayedList+0x3a>
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d007      	beq.n	8006eba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006eaa:	4b1a      	ldr	r3, [pc, #104]	; (8006f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	3304      	adds	r3, #4
 8006eb0:	4619      	mov	r1, r3
 8006eb2:	4819      	ldr	r0, [pc, #100]	; (8006f18 <prvAddCurrentTaskToDelayedList+0x98>)
 8006eb4:	f7fd feb7 	bl	8004c26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006eb8:	e026      	b.n	8006f08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006eba:	68fa      	ldr	r2, [r7, #12]
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4413      	add	r3, r2
 8006ec0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006ec2:	4b14      	ldr	r3, [pc, #80]	; (8006f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	429a      	cmp	r2, r3
 8006ed0:	d209      	bcs.n	8006ee6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ed2:	4b12      	ldr	r3, [pc, #72]	; (8006f1c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ed4:	681a      	ldr	r2, [r3, #0]
 8006ed6:	4b0f      	ldr	r3, [pc, #60]	; (8006f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	3304      	adds	r3, #4
 8006edc:	4619      	mov	r1, r3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	f7fd fec5 	bl	8004c6e <vListInsert>
}
 8006ee4:	e010      	b.n	8006f08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ee6:	4b0e      	ldr	r3, [pc, #56]	; (8006f20 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	4b0a      	ldr	r3, [pc, #40]	; (8006f14 <prvAddCurrentTaskToDelayedList+0x94>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	3304      	adds	r3, #4
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	4610      	mov	r0, r2
 8006ef4:	f7fd febb 	bl	8004c6e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ef8:	4b0a      	ldr	r3, [pc, #40]	; (8006f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	68ba      	ldr	r2, [r7, #8]
 8006efe:	429a      	cmp	r2, r3
 8006f00:	d202      	bcs.n	8006f08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006f02:	4a08      	ldr	r2, [pc, #32]	; (8006f24 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	6013      	str	r3, [r2, #0]
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000e5c 	.word	0x20000e5c
 8006f14:	20000984 	.word	0x20000984
 8006f18:	20000e44 	.word	0x20000e44
 8006f1c:	20000e14 	.word	0x20000e14
 8006f20:	20000e10 	.word	0x20000e10
 8006f24:	20000e78 	.word	0x20000e78

08006f28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	; 0x28
 8006f2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006f32:	f000 fba1 	bl	8007678 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006f36:	4b1c      	ldr	r3, [pc, #112]	; (8006fa8 <xTimerCreateTimerTask+0x80>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d021      	beq.n	8006f82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006f42:	2300      	movs	r3, #0
 8006f44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006f46:	1d3a      	adds	r2, r7, #4
 8006f48:	f107 0108 	add.w	r1, r7, #8
 8006f4c:	f107 030c 	add.w	r3, r7, #12
 8006f50:	4618      	mov	r0, r3
 8006f52:	f7fd fe21 	bl	8004b98 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	68fa      	ldr	r2, [r7, #12]
 8006f5c:	9202      	str	r2, [sp, #8]
 8006f5e:	9301      	str	r3, [sp, #4]
 8006f60:	2302      	movs	r3, #2
 8006f62:	9300      	str	r3, [sp, #0]
 8006f64:	2300      	movs	r3, #0
 8006f66:	460a      	mov	r2, r1
 8006f68:	4910      	ldr	r1, [pc, #64]	; (8006fac <xTimerCreateTimerTask+0x84>)
 8006f6a:	4811      	ldr	r0, [pc, #68]	; (8006fb0 <xTimerCreateTimerTask+0x88>)
 8006f6c:	f7fe ffa6 	bl	8005ebc <xTaskCreateStatic>
 8006f70:	4603      	mov	r3, r0
 8006f72:	4a10      	ldr	r2, [pc, #64]	; (8006fb4 <xTimerCreateTimerTask+0x8c>)
 8006f74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006f76:	4b0f      	ldr	r3, [pc, #60]	; (8006fb4 <xTimerCreateTimerTask+0x8c>)
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d001      	beq.n	8006f82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006f7e:	2301      	movs	r3, #1
 8006f80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006f82:	697b      	ldr	r3, [r7, #20]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10a      	bne.n	8006f9e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f8c:	f383 8811 	msr	BASEPRI, r3
 8006f90:	f3bf 8f6f 	isb	sy
 8006f94:	f3bf 8f4f 	dsb	sy
 8006f98:	613b      	str	r3, [r7, #16]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006f9e:	697b      	ldr	r3, [r7, #20]
}
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	3718      	adds	r7, #24
 8006fa4:	46bd      	mov	sp, r7
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	20000eb4 	.word	0x20000eb4
 8006fac:	08009234 	.word	0x08009234
 8006fb0:	08007221 	.word	0x08007221
 8006fb4:	20000eb8 	.word	0x20000eb8

08006fb8 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af02      	add	r7, sp, #8
 8006fbe:	60f8      	str	r0, [r7, #12]
 8006fc0:	60b9      	str	r1, [r7, #8]
 8006fc2:	607a      	str	r2, [r7, #4]
 8006fc4:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006fc6:	202c      	movs	r0, #44	; 0x2c
 8006fc8:	f000 fe2e 	bl	8007c28 <pvPortMalloc>
 8006fcc:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006fce:	697b      	ldr	r3, [r7, #20]
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d00d      	beq.n	8006ff0 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006fd4:	697b      	ldr	r3, [r7, #20]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	9301      	str	r3, [sp, #4]
 8006fe0:	6a3b      	ldr	r3, [r7, #32]
 8006fe2:	9300      	str	r3, [sp, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	687a      	ldr	r2, [r7, #4]
 8006fe8:	68b9      	ldr	r1, [r7, #8]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 f843 	bl	8007076 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006ff0:	697b      	ldr	r3, [r7, #20]
	}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3718      	adds	r7, #24
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}

08006ffa <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b08a      	sub	sp, #40	; 0x28
 8006ffe:	af02      	add	r7, sp, #8
 8007000:	60f8      	str	r0, [r7, #12]
 8007002:	60b9      	str	r1, [r7, #8]
 8007004:	607a      	str	r2, [r7, #4]
 8007006:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8007008:	232c      	movs	r3, #44	; 0x2c
 800700a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2b2c      	cmp	r3, #44	; 0x2c
 8007010:	d00a      	beq.n	8007028 <xTimerCreateStatic+0x2e>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	61bb      	str	r3, [r7, #24]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007028:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <xTimerCreateStatic+0x4c>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	617b      	str	r3, [r7, #20]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00d      	beq.n	800706c <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007050:	69fb      	ldr	r3, [r7, #28]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	9301      	str	r3, [sp, #4]
 800705c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705e:	9300      	str	r3, [sp, #0]
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	687a      	ldr	r2, [r7, #4]
 8007064:	68b9      	ldr	r1, [r7, #8]
 8007066:	68f8      	ldr	r0, [r7, #12]
 8007068:	f000 f805 	bl	8007076 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800706c:	69fb      	ldr	r3, [r7, #28]
	}
 800706e:	4618      	mov	r0, r3
 8007070:	3720      	adds	r7, #32
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b086      	sub	sp, #24
 800707a:	af00      	add	r7, sp, #0
 800707c:	60f8      	str	r0, [r7, #12]
 800707e:	60b9      	str	r1, [r7, #8]
 8007080:	607a      	str	r2, [r7, #4]
 8007082:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007084:	68bb      	ldr	r3, [r7, #8]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d10a      	bne.n	80070a0 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800708a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800708e:	f383 8811 	msr	BASEPRI, r3
 8007092:	f3bf 8f6f 	isb	sy
 8007096:	f3bf 8f4f 	dsb	sy
 800709a:	617b      	str	r3, [r7, #20]
}
 800709c:	bf00      	nop
 800709e:	e7fe      	b.n	800709e <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80070a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01e      	beq.n	80070e4 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80070a6:	f000 fae7 	bl	8007678 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80070aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070ac:	68fa      	ldr	r2, [r7, #12]
 80070ae:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80070b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070b8:	683a      	ldr	r2, [r7, #0]
 80070ba:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80070bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070be:	6a3a      	ldr	r2, [r7, #32]
 80070c0:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80070c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070c4:	3304      	adds	r3, #4
 80070c6:	4618      	mov	r0, r3
 80070c8:	f7fd fda0 	bl	8004c0c <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d008      	beq.n	80070e4 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80070d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070d8:	f043 0304 	orr.w	r3, r3, #4
 80070dc:	b2da      	uxtb	r2, r3
 80070de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80070e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80070e4:	bf00      	nop
 80070e6:	3718      	adds	r7, #24
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b08a      	sub	sp, #40	; 0x28
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	60f8      	str	r0, [r7, #12]
 80070f4:	60b9      	str	r1, [r7, #8]
 80070f6:	607a      	str	r2, [r7, #4]
 80070f8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	2b00      	cmp	r3, #0
 8007102:	d10a      	bne.n	800711a <xTimerGenericCommand+0x2e>
	__asm volatile
 8007104:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007108:	f383 8811 	msr	BASEPRI, r3
 800710c:	f3bf 8f6f 	isb	sy
 8007110:	f3bf 8f4f 	dsb	sy
 8007114:	623b      	str	r3, [r7, #32]
}
 8007116:	bf00      	nop
 8007118:	e7fe      	b.n	8007118 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800711a:	4b1a      	ldr	r3, [pc, #104]	; (8007184 <xTimerGenericCommand+0x98>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d02a      	beq.n	8007178 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	2b05      	cmp	r3, #5
 8007132:	dc18      	bgt.n	8007166 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007134:	f7ff fd1a 	bl	8006b6c <xTaskGetSchedulerState>
 8007138:	4603      	mov	r3, r0
 800713a:	2b02      	cmp	r3, #2
 800713c:	d109      	bne.n	8007152 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800713e:	4b11      	ldr	r3, [pc, #68]	; (8007184 <xTimerGenericCommand+0x98>)
 8007140:	6818      	ldr	r0, [r3, #0]
 8007142:	f107 0110 	add.w	r1, r7, #16
 8007146:	2300      	movs	r3, #0
 8007148:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800714a:	f7fe f851 	bl	80051f0 <xQueueGenericSend>
 800714e:	6278      	str	r0, [r7, #36]	; 0x24
 8007150:	e012      	b.n	8007178 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007152:	4b0c      	ldr	r3, [pc, #48]	; (8007184 <xTimerGenericCommand+0x98>)
 8007154:	6818      	ldr	r0, [r3, #0]
 8007156:	f107 0110 	add.w	r1, r7, #16
 800715a:	2300      	movs	r3, #0
 800715c:	2200      	movs	r2, #0
 800715e:	f7fe f847 	bl	80051f0 <xQueueGenericSend>
 8007162:	6278      	str	r0, [r7, #36]	; 0x24
 8007164:	e008      	b.n	8007178 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007166:	4b07      	ldr	r3, [pc, #28]	; (8007184 <xTimerGenericCommand+0x98>)
 8007168:	6818      	ldr	r0, [r3, #0]
 800716a:	f107 0110 	add.w	r1, r7, #16
 800716e:	2300      	movs	r3, #0
 8007170:	683a      	ldr	r2, [r7, #0]
 8007172:	f7fe f93b 	bl	80053ec <xQueueGenericSendFromISR>
 8007176:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800717a:	4618      	mov	r0, r3
 800717c:	3728      	adds	r7, #40	; 0x28
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	20000eb4 	.word	0x20000eb4

08007188 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af02      	add	r7, sp, #8
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007192:	4b22      	ldr	r3, [pc, #136]	; (800721c <prvProcessExpiredTimer+0x94>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	68db      	ldr	r3, [r3, #12]
 8007198:	68db      	ldr	r3, [r3, #12]
 800719a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800719c:	697b      	ldr	r3, [r7, #20]
 800719e:	3304      	adds	r3, #4
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7fd fd9d 	bl	8004ce0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ac:	f003 0304 	and.w	r3, r3, #4
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d022      	beq.n	80071fa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	699a      	ldr	r2, [r3, #24]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	18d1      	adds	r1, r2, r3
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	683a      	ldr	r2, [r7, #0]
 80071c0:	6978      	ldr	r0, [r7, #20]
 80071c2:	f000 f8d1 	bl	8007368 <prvInsertTimerInActiveList>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01f      	beq.n	800720c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071cc:	2300      	movs	r3, #0
 80071ce:	9300      	str	r3, [sp, #0]
 80071d0:	2300      	movs	r3, #0
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	2100      	movs	r1, #0
 80071d6:	6978      	ldr	r0, [r7, #20]
 80071d8:	f7ff ff88 	bl	80070ec <xTimerGenericCommand>
 80071dc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d113      	bne.n	800720c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80071e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e8:	f383 8811 	msr	BASEPRI, r3
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f3bf 8f4f 	dsb	sy
 80071f4:	60fb      	str	r3, [r7, #12]
}
 80071f6:	bf00      	nop
 80071f8:	e7fe      	b.n	80071f8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071fa:	697b      	ldr	r3, [r7, #20]
 80071fc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007200:	f023 0301 	bic.w	r3, r3, #1
 8007204:	b2da      	uxtb	r2, r3
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	6a1b      	ldr	r3, [r3, #32]
 8007210:	6978      	ldr	r0, [r7, #20]
 8007212:	4798      	blx	r3
}
 8007214:	bf00      	nop
 8007216:	3718      	adds	r7, #24
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	20000eac 	.word	0x20000eac

08007220 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b084      	sub	sp, #16
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007228:	f107 0308 	add.w	r3, r7, #8
 800722c:	4618      	mov	r0, r3
 800722e:	f000 f857 	bl	80072e0 <prvGetNextExpireTime>
 8007232:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	4619      	mov	r1, r3
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f803 	bl	8007244 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800723e:	f000 f8d5 	bl	80073ec <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007242:	e7f1      	b.n	8007228 <prvTimerTask+0x8>

08007244 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b084      	sub	sp, #16
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
 800724c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800724e:	f7ff f891 	bl	8006374 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007252:	f107 0308 	add.w	r3, r7, #8
 8007256:	4618      	mov	r0, r3
 8007258:	f000 f866 	bl	8007328 <prvSampleTimeNow>
 800725c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	2b00      	cmp	r3, #0
 8007262:	d130      	bne.n	80072c6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <prvProcessTimerOrBlockTask+0x3c>
 800726a:	687a      	ldr	r2, [r7, #4]
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	429a      	cmp	r2, r3
 8007270:	d806      	bhi.n	8007280 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007272:	f7ff f88d 	bl	8006390 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007276:	68f9      	ldr	r1, [r7, #12]
 8007278:	6878      	ldr	r0, [r7, #4]
 800727a:	f7ff ff85 	bl	8007188 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800727e:	e024      	b.n	80072ca <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d008      	beq.n	8007298 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007286:	4b13      	ldr	r3, [pc, #76]	; (80072d4 <prvProcessTimerOrBlockTask+0x90>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <prvProcessTimerOrBlockTask+0x50>
 8007290:	2301      	movs	r3, #1
 8007292:	e000      	b.n	8007296 <prvProcessTimerOrBlockTask+0x52>
 8007294:	2300      	movs	r3, #0
 8007296:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007298:	4b0f      	ldr	r3, [pc, #60]	; (80072d8 <prvProcessTimerOrBlockTask+0x94>)
 800729a:	6818      	ldr	r0, [r3, #0]
 800729c:	687a      	ldr	r2, [r7, #4]
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	683a      	ldr	r2, [r7, #0]
 80072a4:	4619      	mov	r1, r3
 80072a6:	f7fe fdd5 	bl	8005e54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80072aa:	f7ff f871 	bl	8006390 <xTaskResumeAll>
 80072ae:	4603      	mov	r3, r0
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d10a      	bne.n	80072ca <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80072b4:	4b09      	ldr	r3, [pc, #36]	; (80072dc <prvProcessTimerOrBlockTask+0x98>)
 80072b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072ba:	601a      	str	r2, [r3, #0]
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	f3bf 8f6f 	isb	sy
}
 80072c4:	e001      	b.n	80072ca <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80072c6:	f7ff f863 	bl	8006390 <xTaskResumeAll>
}
 80072ca:	bf00      	nop
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	20000eb0 	.word	0x20000eb0
 80072d8:	20000eb4 	.word	0x20000eb4
 80072dc:	e000ed04 	.word	0xe000ed04

080072e0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072e0:	b480      	push	{r7}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072e8:	4b0e      	ldr	r3, [pc, #56]	; (8007324 <prvGetNextExpireTime+0x44>)
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d101      	bne.n	80072f6 <prvGetNextExpireTime+0x16>
 80072f2:	2201      	movs	r2, #1
 80072f4:	e000      	b.n	80072f8 <prvGetNextExpireTime+0x18>
 80072f6:	2200      	movs	r2, #0
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	2b00      	cmp	r3, #0
 8007302:	d105      	bne.n	8007310 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007304:	4b07      	ldr	r3, [pc, #28]	; (8007324 <prvGetNextExpireTime+0x44>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	68db      	ldr	r3, [r3, #12]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	60fb      	str	r3, [r7, #12]
 800730e:	e001      	b.n	8007314 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007314:	68fb      	ldr	r3, [r7, #12]
}
 8007316:	4618      	mov	r0, r3
 8007318:	3714      	adds	r7, #20
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
 8007322:	bf00      	nop
 8007324:	20000eac 	.word	0x20000eac

08007328 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007328:	b580      	push	{r7, lr}
 800732a:	b084      	sub	sp, #16
 800732c:	af00      	add	r7, sp, #0
 800732e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007330:	f7ff f8cc 	bl	80064cc <xTaskGetTickCount>
 8007334:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007336:	4b0b      	ldr	r3, [pc, #44]	; (8007364 <prvSampleTimeNow+0x3c>)
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	429a      	cmp	r2, r3
 800733e:	d205      	bcs.n	800734c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007340:	f000 f936 	bl	80075b0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	601a      	str	r2, [r3, #0]
 800734a:	e002      	b.n	8007352 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007352:	4a04      	ldr	r2, [pc, #16]	; (8007364 <prvSampleTimeNow+0x3c>)
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007358:	68fb      	ldr	r3, [r7, #12]
}
 800735a:	4618      	mov	r0, r3
 800735c:	3710      	adds	r7, #16
 800735e:	46bd      	mov	sp, r7
 8007360:	bd80      	pop	{r7, pc}
 8007362:	bf00      	nop
 8007364:	20000ebc 	.word	0x20000ebc

08007368 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b086      	sub	sp, #24
 800736c:	af00      	add	r7, sp, #0
 800736e:	60f8      	str	r0, [r7, #12]
 8007370:	60b9      	str	r1, [r7, #8]
 8007372:	607a      	str	r2, [r7, #4]
 8007374:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007376:	2300      	movs	r3, #0
 8007378:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68ba      	ldr	r2, [r7, #8]
 800737e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	68fa      	ldr	r2, [r7, #12]
 8007384:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007386:	68ba      	ldr	r2, [r7, #8]
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	429a      	cmp	r2, r3
 800738c:	d812      	bhi.n	80073b4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	683b      	ldr	r3, [r7, #0]
 8007392:	1ad2      	subs	r2, r2, r3
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	699b      	ldr	r3, [r3, #24]
 8007398:	429a      	cmp	r2, r3
 800739a:	d302      	bcc.n	80073a2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800739c:	2301      	movs	r3, #1
 800739e:	617b      	str	r3, [r7, #20]
 80073a0:	e01b      	b.n	80073da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80073a2:	4b10      	ldr	r3, [pc, #64]	; (80073e4 <prvInsertTimerInActiveList+0x7c>)
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	3304      	adds	r3, #4
 80073aa:	4619      	mov	r1, r3
 80073ac:	4610      	mov	r0, r2
 80073ae:	f7fd fc5e 	bl	8004c6e <vListInsert>
 80073b2:	e012      	b.n	80073da <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80073b4:	687a      	ldr	r2, [r7, #4]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	429a      	cmp	r2, r3
 80073ba:	d206      	bcs.n	80073ca <prvInsertTimerInActiveList+0x62>
 80073bc:	68ba      	ldr	r2, [r7, #8]
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d302      	bcc.n	80073ca <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80073c4:	2301      	movs	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	e007      	b.n	80073da <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80073ca:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <prvInsertTimerInActiveList+0x80>)
 80073cc:	681a      	ldr	r2, [r3, #0]
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	3304      	adds	r3, #4
 80073d2:	4619      	mov	r1, r3
 80073d4:	4610      	mov	r0, r2
 80073d6:	f7fd fc4a 	bl	8004c6e <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073da:	697b      	ldr	r3, [r7, #20]
}
 80073dc:	4618      	mov	r0, r3
 80073de:	3718      	adds	r7, #24
 80073e0:	46bd      	mov	sp, r7
 80073e2:	bd80      	pop	{r7, pc}
 80073e4:	20000eb0 	.word	0x20000eb0
 80073e8:	20000eac 	.word	0x20000eac

080073ec <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b08e      	sub	sp, #56	; 0x38
 80073f0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073f2:	e0ca      	b.n	800758a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	da18      	bge.n	800742c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073fa:	1d3b      	adds	r3, r7, #4
 80073fc:	3304      	adds	r3, #4
 80073fe:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007400:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007402:	2b00      	cmp	r3, #0
 8007404:	d10a      	bne.n	800741c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800740a:	f383 8811 	msr	BASEPRI, r3
 800740e:	f3bf 8f6f 	isb	sy
 8007412:	f3bf 8f4f 	dsb	sy
 8007416:	61fb      	str	r3, [r7, #28]
}
 8007418:	bf00      	nop
 800741a:	e7fe      	b.n	800741a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800741c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007422:	6850      	ldr	r0, [r2, #4]
 8007424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007426:	6892      	ldr	r2, [r2, #8]
 8007428:	4611      	mov	r1, r2
 800742a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2b00      	cmp	r3, #0
 8007430:	f2c0 80ab 	blt.w	800758a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800743a:	695b      	ldr	r3, [r3, #20]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d004      	beq.n	800744a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007442:	3304      	adds	r3, #4
 8007444:	4618      	mov	r0, r3
 8007446:	f7fd fc4b 	bl	8004ce0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800744a:	463b      	mov	r3, r7
 800744c:	4618      	mov	r0, r3
 800744e:	f7ff ff6b 	bl	8007328 <prvSampleTimeNow>
 8007452:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2b09      	cmp	r3, #9
 8007458:	f200 8096 	bhi.w	8007588 <prvProcessReceivedCommands+0x19c>
 800745c:	a201      	add	r2, pc, #4	; (adr r2, 8007464 <prvProcessReceivedCommands+0x78>)
 800745e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007462:	bf00      	nop
 8007464:	0800748d 	.word	0x0800748d
 8007468:	0800748d 	.word	0x0800748d
 800746c:	0800748d 	.word	0x0800748d
 8007470:	08007501 	.word	0x08007501
 8007474:	08007515 	.word	0x08007515
 8007478:	0800755f 	.word	0x0800755f
 800747c:	0800748d 	.word	0x0800748d
 8007480:	0800748d 	.word	0x0800748d
 8007484:	08007501 	.word	0x08007501
 8007488:	08007515 	.word	0x08007515
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800748c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800748e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007492:	f043 0301 	orr.w	r3, r3, #1
 8007496:	b2da      	uxtb	r2, r3
 8007498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800749a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074a2:	699b      	ldr	r3, [r3, #24]
 80074a4:	18d1      	adds	r1, r2, r3
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074ac:	f7ff ff5c 	bl	8007368 <prvInsertTimerInActiveList>
 80074b0:	4603      	mov	r3, r0
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d069      	beq.n	800758a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074bc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80074be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c4:	f003 0304 	and.w	r3, r3, #4
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d05e      	beq.n	800758a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074d0:	699b      	ldr	r3, [r3, #24]
 80074d2:	441a      	add	r2, r3
 80074d4:	2300      	movs	r3, #0
 80074d6:	9300      	str	r3, [sp, #0]
 80074d8:	2300      	movs	r3, #0
 80074da:	2100      	movs	r1, #0
 80074dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80074de:	f7ff fe05 	bl	80070ec <xTimerGenericCommand>
 80074e2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074e4:	6a3b      	ldr	r3, [r7, #32]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d14f      	bne.n	800758a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80074ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ee:	f383 8811 	msr	BASEPRI, r3
 80074f2:	f3bf 8f6f 	isb	sy
 80074f6:	f3bf 8f4f 	dsb	sy
 80074fa:	61bb      	str	r3, [r7, #24]
}
 80074fc:	bf00      	nop
 80074fe:	e7fe      	b.n	80074fe <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007500:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007502:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007506:	f023 0301 	bic.w	r3, r3, #1
 800750a:	b2da      	uxtb	r2, r3
 800750c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800750e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007512:	e03a      	b.n	800758a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007516:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800751a:	f043 0301 	orr.w	r3, r3, #1
 800751e:	b2da      	uxtb	r2, r3
 8007520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007522:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007526:	68ba      	ldr	r2, [r7, #8]
 8007528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800752c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10a      	bne.n	800754a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	617b      	str	r3, [r7, #20]
}
 8007546:	bf00      	nop
 8007548:	e7fe      	b.n	8007548 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800754a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800754c:	699a      	ldr	r2, [r3, #24]
 800754e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007550:	18d1      	adds	r1, r2, r3
 8007552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007554:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007556:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007558:	f7ff ff06 	bl	8007368 <prvInsertTimerInActiveList>
					break;
 800755c:	e015      	b.n	800758a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800755e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007560:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007564:	f003 0302 	and.w	r3, r3, #2
 8007568:	2b00      	cmp	r3, #0
 800756a:	d103      	bne.n	8007574 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800756c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800756e:	f000 fc27 	bl	8007dc0 <vPortFree>
 8007572:	e00a      	b.n	800758a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007576:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800757a:	f023 0301 	bic.w	r3, r3, #1
 800757e:	b2da      	uxtb	r2, r3
 8007580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007582:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007586:	e000      	b.n	800758a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007588:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800758a:	4b08      	ldr	r3, [pc, #32]	; (80075ac <prvProcessReceivedCommands+0x1c0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	1d39      	adds	r1, r7, #4
 8007590:	2200      	movs	r2, #0
 8007592:	4618      	mov	r0, r3
 8007594:	f7fe f852 	bl	800563c <xQueueReceive>
 8007598:	4603      	mov	r3, r0
 800759a:	2b00      	cmp	r3, #0
 800759c:	f47f af2a 	bne.w	80073f4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80075a0:	bf00      	nop
 80075a2:	bf00      	nop
 80075a4:	3730      	adds	r7, #48	; 0x30
 80075a6:	46bd      	mov	sp, r7
 80075a8:	bd80      	pop	{r7, pc}
 80075aa:	bf00      	nop
 80075ac:	20000eb4 	.word	0x20000eb4

080075b0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80075b0:	b580      	push	{r7, lr}
 80075b2:	b088      	sub	sp, #32
 80075b4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80075b6:	e048      	b.n	800764a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075b8:	4b2d      	ldr	r3, [pc, #180]	; (8007670 <prvSwitchTimerLists+0xc0>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	68db      	ldr	r3, [r3, #12]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c2:	4b2b      	ldr	r3, [pc, #172]	; (8007670 <prvSwitchTimerLists+0xc0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fd fb85 	bl	8004ce0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	6a1b      	ldr	r3, [r3, #32]
 80075da:	68f8      	ldr	r0, [r7, #12]
 80075dc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d02e      	beq.n	800764a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	699b      	ldr	r3, [r3, #24]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	4413      	add	r3, r2
 80075f4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075f6:	68ba      	ldr	r2, [r7, #8]
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d90e      	bls.n	800761c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	68ba      	ldr	r2, [r7, #8]
 8007602:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800760a:	4b19      	ldr	r3, [pc, #100]	; (8007670 <prvSwitchTimerLists+0xc0>)
 800760c:	681a      	ldr	r2, [r3, #0]
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	3304      	adds	r3, #4
 8007612:	4619      	mov	r1, r3
 8007614:	4610      	mov	r0, r2
 8007616:	f7fd fb2a 	bl	8004c6e <vListInsert>
 800761a:	e016      	b.n	800764a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800761c:	2300      	movs	r3, #0
 800761e:	9300      	str	r3, [sp, #0]
 8007620:	2300      	movs	r3, #0
 8007622:	693a      	ldr	r2, [r7, #16]
 8007624:	2100      	movs	r1, #0
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f7ff fd60 	bl	80070ec <xTimerGenericCommand>
 800762c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d10a      	bne.n	800764a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007638:	f383 8811 	msr	BASEPRI, r3
 800763c:	f3bf 8f6f 	isb	sy
 8007640:	f3bf 8f4f 	dsb	sy
 8007644:	603b      	str	r3, [r7, #0]
}
 8007646:	bf00      	nop
 8007648:	e7fe      	b.n	8007648 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800764a:	4b09      	ldr	r3, [pc, #36]	; (8007670 <prvSwitchTimerLists+0xc0>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	2b00      	cmp	r3, #0
 8007652:	d1b1      	bne.n	80075b8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007654:	4b06      	ldr	r3, [pc, #24]	; (8007670 <prvSwitchTimerLists+0xc0>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800765a:	4b06      	ldr	r3, [pc, #24]	; (8007674 <prvSwitchTimerLists+0xc4>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	4a04      	ldr	r2, [pc, #16]	; (8007670 <prvSwitchTimerLists+0xc0>)
 8007660:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007662:	4a04      	ldr	r2, [pc, #16]	; (8007674 <prvSwitchTimerLists+0xc4>)
 8007664:	697b      	ldr	r3, [r7, #20]
 8007666:	6013      	str	r3, [r2, #0]
}
 8007668:	bf00      	nop
 800766a:	3718      	adds	r7, #24
 800766c:	46bd      	mov	sp, r7
 800766e:	bd80      	pop	{r7, pc}
 8007670:	20000eac 	.word	0x20000eac
 8007674:	20000eb0 	.word	0x20000eb0

08007678 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b082      	sub	sp, #8
 800767c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800767e:	f000 f9b1 	bl	80079e4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007682:	4b15      	ldr	r3, [pc, #84]	; (80076d8 <prvCheckForValidListAndQueue+0x60>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d120      	bne.n	80076cc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800768a:	4814      	ldr	r0, [pc, #80]	; (80076dc <prvCheckForValidListAndQueue+0x64>)
 800768c:	f7fd fa9e 	bl	8004bcc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007690:	4813      	ldr	r0, [pc, #76]	; (80076e0 <prvCheckForValidListAndQueue+0x68>)
 8007692:	f7fd fa9b 	bl	8004bcc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007696:	4b13      	ldr	r3, [pc, #76]	; (80076e4 <prvCheckForValidListAndQueue+0x6c>)
 8007698:	4a10      	ldr	r2, [pc, #64]	; (80076dc <prvCheckForValidListAndQueue+0x64>)
 800769a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800769c:	4b12      	ldr	r3, [pc, #72]	; (80076e8 <prvCheckForValidListAndQueue+0x70>)
 800769e:	4a10      	ldr	r2, [pc, #64]	; (80076e0 <prvCheckForValidListAndQueue+0x68>)
 80076a0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80076a2:	2300      	movs	r3, #0
 80076a4:	9300      	str	r3, [sp, #0]
 80076a6:	4b11      	ldr	r3, [pc, #68]	; (80076ec <prvCheckForValidListAndQueue+0x74>)
 80076a8:	4a11      	ldr	r2, [pc, #68]	; (80076f0 <prvCheckForValidListAndQueue+0x78>)
 80076aa:	2110      	movs	r1, #16
 80076ac:	200a      	movs	r0, #10
 80076ae:	f7fd fba9 	bl	8004e04 <xQueueGenericCreateStatic>
 80076b2:	4603      	mov	r3, r0
 80076b4:	4a08      	ldr	r2, [pc, #32]	; (80076d8 <prvCheckForValidListAndQueue+0x60>)
 80076b6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80076b8:	4b07      	ldr	r3, [pc, #28]	; (80076d8 <prvCheckForValidListAndQueue+0x60>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d005      	beq.n	80076cc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80076c0:	4b05      	ldr	r3, [pc, #20]	; (80076d8 <prvCheckForValidListAndQueue+0x60>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	490b      	ldr	r1, [pc, #44]	; (80076f4 <prvCheckForValidListAndQueue+0x7c>)
 80076c6:	4618      	mov	r0, r3
 80076c8:	f7fe fb70 	bl	8005dac <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076cc:	f000 f9ba 	bl	8007a44 <vPortExitCritical>
}
 80076d0:	bf00      	nop
 80076d2:	46bd      	mov	sp, r7
 80076d4:	bd80      	pop	{r7, pc}
 80076d6:	bf00      	nop
 80076d8:	20000eb4 	.word	0x20000eb4
 80076dc:	20000e84 	.word	0x20000e84
 80076e0:	20000e98 	.word	0x20000e98
 80076e4:	20000eac 	.word	0x20000eac
 80076e8:	20000eb0 	.word	0x20000eb0
 80076ec:	20000f60 	.word	0x20000f60
 80076f0:	20000ec0 	.word	0x20000ec0
 80076f4:	0800923c 	.word	0x0800923c

080076f8 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d10a      	bne.n	8007720 <xTimerIsTimerActive+0x28>
	__asm volatile
 800770a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800770e:	f383 8811 	msr	BASEPRI, r3
 8007712:	f3bf 8f6f 	isb	sy
 8007716:	f3bf 8f4f 	dsb	sy
 800771a:	60fb      	str	r3, [r7, #12]
}
 800771c:	bf00      	nop
 800771e:	e7fe      	b.n	800771e <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8007720:	f000 f960 	bl	80079e4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800772a:	f003 0301 	and.w	r3, r3, #1
 800772e:	2b00      	cmp	r3, #0
 8007730:	d102      	bne.n	8007738 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 8007732:	2300      	movs	r3, #0
 8007734:	617b      	str	r3, [r7, #20]
 8007736:	e001      	b.n	800773c <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8007738:	2301      	movs	r3, #1
 800773a:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800773c:	f000 f982 	bl	8007a44 <vPortExitCritical>

	return xReturn;
 8007740:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8007742:	4618      	mov	r0, r3
 8007744:	3718      	adds	r7, #24
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}

0800774a <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 800774a:	b580      	push	{r7, lr}
 800774c:	b086      	sub	sp, #24
 800774e:	af00      	add	r7, sp, #0
 8007750:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	2b00      	cmp	r3, #0
 800775a:	d10a      	bne.n	8007772 <pvTimerGetTimerID+0x28>
	__asm volatile
 800775c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007760:	f383 8811 	msr	BASEPRI, r3
 8007764:	f3bf 8f6f 	isb	sy
 8007768:	f3bf 8f4f 	dsb	sy
 800776c:	60fb      	str	r3, [r7, #12]
}
 800776e:	bf00      	nop
 8007770:	e7fe      	b.n	8007770 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007772:	f000 f937 	bl	80079e4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	69db      	ldr	r3, [r3, #28]
 800777a:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 800777c:	f000 f962 	bl	8007a44 <vPortExitCritical>

	return pvReturn;
 8007780:	693b      	ldr	r3, [r7, #16]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3718      	adds	r7, #24
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}
	...

0800778c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	60b9      	str	r1, [r7, #8]
 8007796:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	3b04      	subs	r3, #4
 800779c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80077a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	3b04      	subs	r3, #4
 80077aa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	f023 0201 	bic.w	r2, r3, #1
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	3b04      	subs	r3, #4
 80077ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077bc:	4a0c      	ldr	r2, [pc, #48]	; (80077f0 <pxPortInitialiseStack+0x64>)
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3b14      	subs	r3, #20
 80077c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077c8:	687a      	ldr	r2, [r7, #4]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3b04      	subs	r3, #4
 80077d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	f06f 0202 	mvn.w	r2, #2
 80077da:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3b20      	subs	r3, #32
 80077e0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077e2:	68fb      	ldr	r3, [r7, #12]
}
 80077e4:	4618      	mov	r0, r3
 80077e6:	3714      	adds	r7, #20
 80077e8:	46bd      	mov	sp, r7
 80077ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ee:	4770      	bx	lr
 80077f0:	080077f5 	.word	0x080077f5

080077f4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80077fa:	2300      	movs	r3, #0
 80077fc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80077fe:	4b12      	ldr	r3, [pc, #72]	; (8007848 <prvTaskExitError+0x54>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007806:	d00a      	beq.n	800781e <prvTaskExitError+0x2a>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	60fb      	str	r3, [r7, #12]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <prvTaskExitError+0x28>
	__asm volatile
 800781e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007822:	f383 8811 	msr	BASEPRI, r3
 8007826:	f3bf 8f6f 	isb	sy
 800782a:	f3bf 8f4f 	dsb	sy
 800782e:	60bb      	str	r3, [r7, #8]
}
 8007830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007832:	bf00      	nop
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d0fc      	beq.n	8007834 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800783a:	bf00      	nop
 800783c:	bf00      	nop
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	20000010 	.word	0x20000010
 800784c:	00000000 	.word	0x00000000

08007850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007850:	4b07      	ldr	r3, [pc, #28]	; (8007870 <pxCurrentTCBConst2>)
 8007852:	6819      	ldr	r1, [r3, #0]
 8007854:	6808      	ldr	r0, [r1, #0]
 8007856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800785a:	f380 8809 	msr	PSP, r0
 800785e:	f3bf 8f6f 	isb	sy
 8007862:	f04f 0000 	mov.w	r0, #0
 8007866:	f380 8811 	msr	BASEPRI, r0
 800786a:	4770      	bx	lr
 800786c:	f3af 8000 	nop.w

08007870 <pxCurrentTCBConst2>:
 8007870:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007874:	bf00      	nop
 8007876:	bf00      	nop

08007878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007878:	4808      	ldr	r0, [pc, #32]	; (800789c <prvPortStartFirstTask+0x24>)
 800787a:	6800      	ldr	r0, [r0, #0]
 800787c:	6800      	ldr	r0, [r0, #0]
 800787e:	f380 8808 	msr	MSP, r0
 8007882:	f04f 0000 	mov.w	r0, #0
 8007886:	f380 8814 	msr	CONTROL, r0
 800788a:	b662      	cpsie	i
 800788c:	b661      	cpsie	f
 800788e:	f3bf 8f4f 	dsb	sy
 8007892:	f3bf 8f6f 	isb	sy
 8007896:	df00      	svc	0
 8007898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800789a:	bf00      	nop
 800789c:	e000ed08 	.word	0xe000ed08

080078a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078a6:	4b46      	ldr	r3, [pc, #280]	; (80079c0 <xPortStartScheduler+0x120>)
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4a46      	ldr	r2, [pc, #280]	; (80079c4 <xPortStartScheduler+0x124>)
 80078ac:	4293      	cmp	r3, r2
 80078ae:	d10a      	bne.n	80078c6 <xPortStartScheduler+0x26>
	__asm volatile
 80078b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078b4:	f383 8811 	msr	BASEPRI, r3
 80078b8:	f3bf 8f6f 	isb	sy
 80078bc:	f3bf 8f4f 	dsb	sy
 80078c0:	613b      	str	r3, [r7, #16]
}
 80078c2:	bf00      	nop
 80078c4:	e7fe      	b.n	80078c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078c6:	4b3e      	ldr	r3, [pc, #248]	; (80079c0 <xPortStartScheduler+0x120>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a3f      	ldr	r2, [pc, #252]	; (80079c8 <xPortStartScheduler+0x128>)
 80078cc:	4293      	cmp	r3, r2
 80078ce:	d10a      	bne.n	80078e6 <xPortStartScheduler+0x46>
	__asm volatile
 80078d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d4:	f383 8811 	msr	BASEPRI, r3
 80078d8:	f3bf 8f6f 	isb	sy
 80078dc:	f3bf 8f4f 	dsb	sy
 80078e0:	60fb      	str	r3, [r7, #12]
}
 80078e2:	bf00      	nop
 80078e4:	e7fe      	b.n	80078e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078e6:	4b39      	ldr	r3, [pc, #228]	; (80079cc <xPortStartScheduler+0x12c>)
 80078e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	781b      	ldrb	r3, [r3, #0]
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80078f2:	697b      	ldr	r3, [r7, #20]
 80078f4:	22ff      	movs	r2, #255	; 0xff
 80078f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	781b      	ldrb	r3, [r3, #0]
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007900:	78fb      	ldrb	r3, [r7, #3]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007908:	b2da      	uxtb	r2, r3
 800790a:	4b31      	ldr	r3, [pc, #196]	; (80079d0 <xPortStartScheduler+0x130>)
 800790c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800790e:	4b31      	ldr	r3, [pc, #196]	; (80079d4 <xPortStartScheduler+0x134>)
 8007910:	2207      	movs	r2, #7
 8007912:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007914:	e009      	b.n	800792a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007916:	4b2f      	ldr	r3, [pc, #188]	; (80079d4 <xPortStartScheduler+0x134>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	3b01      	subs	r3, #1
 800791c:	4a2d      	ldr	r2, [pc, #180]	; (80079d4 <xPortStartScheduler+0x134>)
 800791e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007920:	78fb      	ldrb	r3, [r7, #3]
 8007922:	b2db      	uxtb	r3, r3
 8007924:	005b      	lsls	r3, r3, #1
 8007926:	b2db      	uxtb	r3, r3
 8007928:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800792a:	78fb      	ldrb	r3, [r7, #3]
 800792c:	b2db      	uxtb	r3, r3
 800792e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007932:	2b80      	cmp	r3, #128	; 0x80
 8007934:	d0ef      	beq.n	8007916 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007936:	4b27      	ldr	r3, [pc, #156]	; (80079d4 <xPortStartScheduler+0x134>)
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	f1c3 0307 	rsb	r3, r3, #7
 800793e:	2b04      	cmp	r3, #4
 8007940:	d00a      	beq.n	8007958 <xPortStartScheduler+0xb8>
	__asm volatile
 8007942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007946:	f383 8811 	msr	BASEPRI, r3
 800794a:	f3bf 8f6f 	isb	sy
 800794e:	f3bf 8f4f 	dsb	sy
 8007952:	60bb      	str	r3, [r7, #8]
}
 8007954:	bf00      	nop
 8007956:	e7fe      	b.n	8007956 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007958:	4b1e      	ldr	r3, [pc, #120]	; (80079d4 <xPortStartScheduler+0x134>)
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	021b      	lsls	r3, r3, #8
 800795e:	4a1d      	ldr	r2, [pc, #116]	; (80079d4 <xPortStartScheduler+0x134>)
 8007960:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007962:	4b1c      	ldr	r3, [pc, #112]	; (80079d4 <xPortStartScheduler+0x134>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800796a:	4a1a      	ldr	r2, [pc, #104]	; (80079d4 <xPortStartScheduler+0x134>)
 800796c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	b2da      	uxtb	r2, r3
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007976:	4b18      	ldr	r3, [pc, #96]	; (80079d8 <xPortStartScheduler+0x138>)
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a17      	ldr	r2, [pc, #92]	; (80079d8 <xPortStartScheduler+0x138>)
 800797c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007980:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007982:	4b15      	ldr	r3, [pc, #84]	; (80079d8 <xPortStartScheduler+0x138>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a14      	ldr	r2, [pc, #80]	; (80079d8 <xPortStartScheduler+0x138>)
 8007988:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800798c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800798e:	f000 f8dd 	bl	8007b4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007992:	4b12      	ldr	r3, [pc, #72]	; (80079dc <xPortStartScheduler+0x13c>)
 8007994:	2200      	movs	r2, #0
 8007996:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007998:	f000 f8fc 	bl	8007b94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800799c:	4b10      	ldr	r3, [pc, #64]	; (80079e0 <xPortStartScheduler+0x140>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a0f      	ldr	r2, [pc, #60]	; (80079e0 <xPortStartScheduler+0x140>)
 80079a2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80079a6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079a8:	f7ff ff66 	bl	8007878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079ac:	f7fe fe58 	bl	8006660 <vTaskSwitchContext>
	prvTaskExitError();
 80079b0:	f7ff ff20 	bl	80077f4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079b4:	2300      	movs	r3, #0
}
 80079b6:	4618      	mov	r0, r3
 80079b8:	3718      	adds	r7, #24
 80079ba:	46bd      	mov	sp, r7
 80079bc:	bd80      	pop	{r7, pc}
 80079be:	bf00      	nop
 80079c0:	e000ed00 	.word	0xe000ed00
 80079c4:	410fc271 	.word	0x410fc271
 80079c8:	410fc270 	.word	0x410fc270
 80079cc:	e000e400 	.word	0xe000e400
 80079d0:	20000fb0 	.word	0x20000fb0
 80079d4:	20000fb4 	.word	0x20000fb4
 80079d8:	e000ed20 	.word	0xe000ed20
 80079dc:	20000010 	.word	0x20000010
 80079e0:	e000ef34 	.word	0xe000ef34

080079e4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079e4:	b480      	push	{r7}
 80079e6:	b083      	sub	sp, #12
 80079e8:	af00      	add	r7, sp, #0
	__asm volatile
 80079ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ee:	f383 8811 	msr	BASEPRI, r3
 80079f2:	f3bf 8f6f 	isb	sy
 80079f6:	f3bf 8f4f 	dsb	sy
 80079fa:	607b      	str	r3, [r7, #4]
}
 80079fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80079fe:	4b0f      	ldr	r3, [pc, #60]	; (8007a3c <vPortEnterCritical+0x58>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	3301      	adds	r3, #1
 8007a04:	4a0d      	ldr	r2, [pc, #52]	; (8007a3c <vPortEnterCritical+0x58>)
 8007a06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a08:	4b0c      	ldr	r3, [pc, #48]	; (8007a3c <vPortEnterCritical+0x58>)
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	2b01      	cmp	r3, #1
 8007a0e:	d10f      	bne.n	8007a30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a10:	4b0b      	ldr	r3, [pc, #44]	; (8007a40 <vPortEnterCritical+0x5c>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	b2db      	uxtb	r3, r3
 8007a16:	2b00      	cmp	r3, #0
 8007a18:	d00a      	beq.n	8007a30 <vPortEnterCritical+0x4c>
	__asm volatile
 8007a1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a1e:	f383 8811 	msr	BASEPRI, r3
 8007a22:	f3bf 8f6f 	isb	sy
 8007a26:	f3bf 8f4f 	dsb	sy
 8007a2a:	603b      	str	r3, [r7, #0]
}
 8007a2c:	bf00      	nop
 8007a2e:	e7fe      	b.n	8007a2e <vPortEnterCritical+0x4a>
	}
}
 8007a30:	bf00      	nop
 8007a32:	370c      	adds	r7, #12
 8007a34:	46bd      	mov	sp, r7
 8007a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a3a:	4770      	bx	lr
 8007a3c:	20000010 	.word	0x20000010
 8007a40:	e000ed04 	.word	0xe000ed04

08007a44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a44:	b480      	push	{r7}
 8007a46:	b083      	sub	sp, #12
 8007a48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a4a:	4b12      	ldr	r3, [pc, #72]	; (8007a94 <vPortExitCritical+0x50>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d10a      	bne.n	8007a68 <vPortExitCritical+0x24>
	__asm volatile
 8007a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a56:	f383 8811 	msr	BASEPRI, r3
 8007a5a:	f3bf 8f6f 	isb	sy
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	607b      	str	r3, [r7, #4]
}
 8007a64:	bf00      	nop
 8007a66:	e7fe      	b.n	8007a66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a68:	4b0a      	ldr	r3, [pc, #40]	; (8007a94 <vPortExitCritical+0x50>)
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	4a09      	ldr	r2, [pc, #36]	; (8007a94 <vPortExitCritical+0x50>)
 8007a70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a72:	4b08      	ldr	r3, [pc, #32]	; (8007a94 <vPortExitCritical+0x50>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d105      	bne.n	8007a86 <vPortExitCritical+0x42>
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a7e:	683b      	ldr	r3, [r7, #0]
 8007a80:	f383 8811 	msr	BASEPRI, r3
}
 8007a84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	20000010 	.word	0x20000010
	...

08007aa0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007aa0:	f3ef 8009 	mrs	r0, PSP
 8007aa4:	f3bf 8f6f 	isb	sy
 8007aa8:	4b15      	ldr	r3, [pc, #84]	; (8007b00 <pxCurrentTCBConst>)
 8007aaa:	681a      	ldr	r2, [r3, #0]
 8007aac:	f01e 0f10 	tst.w	lr, #16
 8007ab0:	bf08      	it	eq
 8007ab2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ab6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aba:	6010      	str	r0, [r2, #0]
 8007abc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ac0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007ac4:	f380 8811 	msr	BASEPRI, r0
 8007ac8:	f3bf 8f4f 	dsb	sy
 8007acc:	f3bf 8f6f 	isb	sy
 8007ad0:	f7fe fdc6 	bl	8006660 <vTaskSwitchContext>
 8007ad4:	f04f 0000 	mov.w	r0, #0
 8007ad8:	f380 8811 	msr	BASEPRI, r0
 8007adc:	bc09      	pop	{r0, r3}
 8007ade:	6819      	ldr	r1, [r3, #0]
 8007ae0:	6808      	ldr	r0, [r1, #0]
 8007ae2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ae6:	f01e 0f10 	tst.w	lr, #16
 8007aea:	bf08      	it	eq
 8007aec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007af0:	f380 8809 	msr	PSP, r0
 8007af4:	f3bf 8f6f 	isb	sy
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	f3af 8000 	nop.w

08007b00 <pxCurrentTCBConst>:
 8007b00:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b04:	bf00      	nop
 8007b06:	bf00      	nop

08007b08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b082      	sub	sp, #8
 8007b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	607b      	str	r3, [r7, #4]
}
 8007b20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b22:	f7fe fce3 	bl	80064ec <xTaskIncrementTick>
 8007b26:	4603      	mov	r3, r0
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d003      	beq.n	8007b34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b2c:	4b06      	ldr	r3, [pc, #24]	; (8007b48 <xPortSysTickHandler+0x40>)
 8007b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b32:	601a      	str	r2, [r3, #0]
 8007b34:	2300      	movs	r3, #0
 8007b36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b38:	683b      	ldr	r3, [r7, #0]
 8007b3a:	f383 8811 	msr	BASEPRI, r3
}
 8007b3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b40:	bf00      	nop
 8007b42:	3708      	adds	r7, #8
 8007b44:	46bd      	mov	sp, r7
 8007b46:	bd80      	pop	{r7, pc}
 8007b48:	e000ed04 	.word	0xe000ed04

08007b4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b50:	4b0b      	ldr	r3, [pc, #44]	; (8007b80 <vPortSetupTimerInterrupt+0x34>)
 8007b52:	2200      	movs	r2, #0
 8007b54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b56:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <vPortSetupTimerInterrupt+0x38>)
 8007b58:	2200      	movs	r2, #0
 8007b5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b5c:	4b0a      	ldr	r3, [pc, #40]	; (8007b88 <vPortSetupTimerInterrupt+0x3c>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a0a      	ldr	r2, [pc, #40]	; (8007b8c <vPortSetupTimerInterrupt+0x40>)
 8007b62:	fba2 2303 	umull	r2, r3, r2, r3
 8007b66:	099b      	lsrs	r3, r3, #6
 8007b68:	4a09      	ldr	r2, [pc, #36]	; (8007b90 <vPortSetupTimerInterrupt+0x44>)
 8007b6a:	3b01      	subs	r3, #1
 8007b6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b6e:	4b04      	ldr	r3, [pc, #16]	; (8007b80 <vPortSetupTimerInterrupt+0x34>)
 8007b70:	2207      	movs	r2, #7
 8007b72:	601a      	str	r2, [r3, #0]
}
 8007b74:	bf00      	nop
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
 8007b7e:	bf00      	nop
 8007b80:	e000e010 	.word	0xe000e010
 8007b84:	e000e018 	.word	0xe000e018
 8007b88:	20000004 	.word	0x20000004
 8007b8c:	10624dd3 	.word	0x10624dd3
 8007b90:	e000e014 	.word	0xe000e014

08007b94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007b94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007ba4 <vPortEnableVFP+0x10>
 8007b98:	6801      	ldr	r1, [r0, #0]
 8007b9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007b9e:	6001      	str	r1, [r0, #0]
 8007ba0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ba2:	bf00      	nop
 8007ba4:	e000ed88 	.word	0xe000ed88

08007ba8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ba8:	b480      	push	{r7}
 8007baa:	b085      	sub	sp, #20
 8007bac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bae:	f3ef 8305 	mrs	r3, IPSR
 8007bb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2b0f      	cmp	r3, #15
 8007bb8:	d914      	bls.n	8007be4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bba:	4a17      	ldr	r2, [pc, #92]	; (8007c18 <vPortValidateInterruptPriority+0x70>)
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	781b      	ldrb	r3, [r3, #0]
 8007bc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bc4:	4b15      	ldr	r3, [pc, #84]	; (8007c1c <vPortValidateInterruptPriority+0x74>)
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	7afa      	ldrb	r2, [r7, #11]
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d20a      	bcs.n	8007be4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	607b      	str	r3, [r7, #4]
}
 8007be0:	bf00      	nop
 8007be2:	e7fe      	b.n	8007be2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007be4:	4b0e      	ldr	r3, [pc, #56]	; (8007c20 <vPortValidateInterruptPriority+0x78>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007bec:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <vPortValidateInterruptPriority+0x7c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	429a      	cmp	r2, r3
 8007bf2:	d90a      	bls.n	8007c0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bf8:	f383 8811 	msr	BASEPRI, r3
 8007bfc:	f3bf 8f6f 	isb	sy
 8007c00:	f3bf 8f4f 	dsb	sy
 8007c04:	603b      	str	r3, [r7, #0]
}
 8007c06:	bf00      	nop
 8007c08:	e7fe      	b.n	8007c08 <vPortValidateInterruptPriority+0x60>
	}
 8007c0a:	bf00      	nop
 8007c0c:	3714      	adds	r7, #20
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	e000e3f0 	.word	0xe000e3f0
 8007c1c:	20000fb0 	.word	0x20000fb0
 8007c20:	e000ed0c 	.word	0xe000ed0c
 8007c24:	20000fb4 	.word	0x20000fb4

08007c28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c28:	b580      	push	{r7, lr}
 8007c2a:	b08a      	sub	sp, #40	; 0x28
 8007c2c:	af00      	add	r7, sp, #0
 8007c2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c30:	2300      	movs	r3, #0
 8007c32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c34:	f7fe fb9e 	bl	8006374 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c38:	4b5b      	ldr	r3, [pc, #364]	; (8007da8 <pvPortMalloc+0x180>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d101      	bne.n	8007c44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c40:	f000 f920 	bl	8007e84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c44:	4b59      	ldr	r3, [pc, #356]	; (8007dac <pvPortMalloc+0x184>)
 8007c46:	681a      	ldr	r2, [r3, #0]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	4013      	ands	r3, r2
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f040 8093 	bne.w	8007d78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d01d      	beq.n	8007c94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007c58:	2208      	movs	r2, #8
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	4413      	add	r3, r2
 8007c5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	f003 0307 	and.w	r3, r3, #7
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d014      	beq.n	8007c94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	f023 0307 	bic.w	r3, r3, #7
 8007c70:	3308      	adds	r3, #8
 8007c72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d00a      	beq.n	8007c94 <pvPortMalloc+0x6c>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	617b      	str	r3, [r7, #20]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d06e      	beq.n	8007d78 <pvPortMalloc+0x150>
 8007c9a:	4b45      	ldr	r3, [pc, #276]	; (8007db0 <pvPortMalloc+0x188>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	687a      	ldr	r2, [r7, #4]
 8007ca0:	429a      	cmp	r2, r3
 8007ca2:	d869      	bhi.n	8007d78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007ca4:	4b43      	ldr	r3, [pc, #268]	; (8007db4 <pvPortMalloc+0x18c>)
 8007ca6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007ca8:	4b42      	ldr	r3, [pc, #264]	; (8007db4 <pvPortMalloc+0x18c>)
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cae:	e004      	b.n	8007cba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	687a      	ldr	r2, [r7, #4]
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d903      	bls.n	8007ccc <pvPortMalloc+0xa4>
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d1f1      	bne.n	8007cb0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ccc:	4b36      	ldr	r3, [pc, #216]	; (8007da8 <pvPortMalloc+0x180>)
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cd2:	429a      	cmp	r2, r3
 8007cd4:	d050      	beq.n	8007d78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cd6:	6a3b      	ldr	r3, [r7, #32]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2208      	movs	r2, #8
 8007cdc:	4413      	add	r3, r2
 8007cde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	6a3b      	ldr	r3, [r7, #32]
 8007ce6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cea:	685a      	ldr	r2, [r3, #4]
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	1ad2      	subs	r2, r2, r3
 8007cf0:	2308      	movs	r3, #8
 8007cf2:	005b      	lsls	r3, r3, #1
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d91f      	bls.n	8007d38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007cf8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	4413      	add	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	f003 0307 	and.w	r3, r3, #7
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d00a      	beq.n	8007d20 <pvPortMalloc+0xf8>
	__asm volatile
 8007d0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d0e:	f383 8811 	msr	BASEPRI, r3
 8007d12:	f3bf 8f6f 	isb	sy
 8007d16:	f3bf 8f4f 	dsb	sy
 8007d1a:	613b      	str	r3, [r7, #16]
}
 8007d1c:	bf00      	nop
 8007d1e:	e7fe      	b.n	8007d1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d22:	685a      	ldr	r2, [r3, #4]
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	1ad2      	subs	r2, r2, r3
 8007d28:	69bb      	ldr	r3, [r7, #24]
 8007d2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d2e:	687a      	ldr	r2, [r7, #4]
 8007d30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d32:	69b8      	ldr	r0, [r7, #24]
 8007d34:	f000 f908 	bl	8007f48 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d38:	4b1d      	ldr	r3, [pc, #116]	; (8007db0 <pvPortMalloc+0x188>)
 8007d3a:	681a      	ldr	r2, [r3, #0]
 8007d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d3e:	685b      	ldr	r3, [r3, #4]
 8007d40:	1ad3      	subs	r3, r2, r3
 8007d42:	4a1b      	ldr	r2, [pc, #108]	; (8007db0 <pvPortMalloc+0x188>)
 8007d44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d46:	4b1a      	ldr	r3, [pc, #104]	; (8007db0 <pvPortMalloc+0x188>)
 8007d48:	681a      	ldr	r2, [r3, #0]
 8007d4a:	4b1b      	ldr	r3, [pc, #108]	; (8007db8 <pvPortMalloc+0x190>)
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d203      	bcs.n	8007d5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d52:	4b17      	ldr	r3, [pc, #92]	; (8007db0 <pvPortMalloc+0x188>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a18      	ldr	r2, [pc, #96]	; (8007db8 <pvPortMalloc+0x190>)
 8007d58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d5c:	685a      	ldr	r2, [r3, #4]
 8007d5e:	4b13      	ldr	r3, [pc, #76]	; (8007dac <pvPortMalloc+0x184>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	431a      	orrs	r2, r3
 8007d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d6a:	2200      	movs	r2, #0
 8007d6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d6e:	4b13      	ldr	r3, [pc, #76]	; (8007dbc <pvPortMalloc+0x194>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3301      	adds	r3, #1
 8007d74:	4a11      	ldr	r2, [pc, #68]	; (8007dbc <pvPortMalloc+0x194>)
 8007d76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d78:	f7fe fb0a 	bl	8006390 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d7c:	69fb      	ldr	r3, [r7, #28]
 8007d7e:	f003 0307 	and.w	r3, r3, #7
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d00a      	beq.n	8007d9c <pvPortMalloc+0x174>
	__asm volatile
 8007d86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d8a:	f383 8811 	msr	BASEPRI, r3
 8007d8e:	f3bf 8f6f 	isb	sy
 8007d92:	f3bf 8f4f 	dsb	sy
 8007d96:	60fb      	str	r3, [r7, #12]
}
 8007d98:	bf00      	nop
 8007d9a:	e7fe      	b.n	8007d9a <pvPortMalloc+0x172>
	return pvReturn;
 8007d9c:	69fb      	ldr	r3, [r7, #28]
}
 8007d9e:	4618      	mov	r0, r3
 8007da0:	3728      	adds	r7, #40	; 0x28
 8007da2:	46bd      	mov	sp, r7
 8007da4:	bd80      	pop	{r7, pc}
 8007da6:	bf00      	nop
 8007da8:	20004a58 	.word	0x20004a58
 8007dac:	20004a6c 	.word	0x20004a6c
 8007db0:	20004a5c 	.word	0x20004a5c
 8007db4:	20004a50 	.word	0x20004a50
 8007db8:	20004a60 	.word	0x20004a60
 8007dbc:	20004a64 	.word	0x20004a64

08007dc0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b086      	sub	sp, #24
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d04d      	beq.n	8007e6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dd2:	2308      	movs	r3, #8
 8007dd4:	425b      	negs	r3, r3
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4413      	add	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	4b24      	ldr	r3, [pc, #144]	; (8007e78 <vPortFree+0xb8>)
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	4013      	ands	r3, r2
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d10a      	bne.n	8007e04 <vPortFree+0x44>
	__asm volatile
 8007dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df2:	f383 8811 	msr	BASEPRI, r3
 8007df6:	f3bf 8f6f 	isb	sy
 8007dfa:	f3bf 8f4f 	dsb	sy
 8007dfe:	60fb      	str	r3, [r7, #12]
}
 8007e00:	bf00      	nop
 8007e02:	e7fe      	b.n	8007e02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e04:	693b      	ldr	r3, [r7, #16]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00a      	beq.n	8007e22 <vPortFree+0x62>
	__asm volatile
 8007e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e10:	f383 8811 	msr	BASEPRI, r3
 8007e14:	f3bf 8f6f 	isb	sy
 8007e18:	f3bf 8f4f 	dsb	sy
 8007e1c:	60bb      	str	r3, [r7, #8]
}
 8007e1e:	bf00      	nop
 8007e20:	e7fe      	b.n	8007e20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e22:	693b      	ldr	r3, [r7, #16]
 8007e24:	685a      	ldr	r2, [r3, #4]
 8007e26:	4b14      	ldr	r3, [pc, #80]	; (8007e78 <vPortFree+0xb8>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	4013      	ands	r3, r2
 8007e2c:	2b00      	cmp	r3, #0
 8007e2e:	d01e      	beq.n	8007e6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d11a      	bne.n	8007e6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e38:	693b      	ldr	r3, [r7, #16]
 8007e3a:	685a      	ldr	r2, [r3, #4]
 8007e3c:	4b0e      	ldr	r3, [pc, #56]	; (8007e78 <vPortFree+0xb8>)
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	43db      	mvns	r3, r3
 8007e42:	401a      	ands	r2, r3
 8007e44:	693b      	ldr	r3, [r7, #16]
 8007e46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e48:	f7fe fa94 	bl	8006374 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	685a      	ldr	r2, [r3, #4]
 8007e50:	4b0a      	ldr	r3, [pc, #40]	; (8007e7c <vPortFree+0xbc>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4413      	add	r3, r2
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <vPortFree+0xbc>)
 8007e58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e5a:	6938      	ldr	r0, [r7, #16]
 8007e5c:	f000 f874 	bl	8007f48 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e60:	4b07      	ldr	r3, [pc, #28]	; (8007e80 <vPortFree+0xc0>)
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	3301      	adds	r3, #1
 8007e66:	4a06      	ldr	r2, [pc, #24]	; (8007e80 <vPortFree+0xc0>)
 8007e68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e6a:	f7fe fa91 	bl	8006390 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e6e:	bf00      	nop
 8007e70:	3718      	adds	r7, #24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	20004a6c 	.word	0x20004a6c
 8007e7c:	20004a5c 	.word	0x20004a5c
 8007e80:	20004a68 	.word	0x20004a68

08007e84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007e84:	b480      	push	{r7}
 8007e86:	b085      	sub	sp, #20
 8007e88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007e8a:	f643 2398 	movw	r3, #15000	; 0x3a98
 8007e8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007e90:	4b27      	ldr	r3, [pc, #156]	; (8007f30 <prvHeapInit+0xac>)
 8007e92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f003 0307 	and.w	r3, r3, #7
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d00c      	beq.n	8007eb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3307      	adds	r3, #7
 8007ea2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f023 0307 	bic.w	r3, r3, #7
 8007eaa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007eac:	68ba      	ldr	r2, [r7, #8]
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	4a1f      	ldr	r2, [pc, #124]	; (8007f30 <prvHeapInit+0xac>)
 8007eb4:	4413      	add	r3, r2
 8007eb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ebc:	4a1d      	ldr	r2, [pc, #116]	; (8007f34 <prvHeapInit+0xb0>)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ec2:	4b1c      	ldr	r3, [pc, #112]	; (8007f34 <prvHeapInit+0xb0>)
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	68ba      	ldr	r2, [r7, #8]
 8007ecc:	4413      	add	r3, r2
 8007ece:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ed0:	2208      	movs	r2, #8
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	1a9b      	subs	r3, r3, r2
 8007ed6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ed8:	68fb      	ldr	r3, [r7, #12]
 8007eda:	f023 0307 	bic.w	r3, r3, #7
 8007ede:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	4a15      	ldr	r2, [pc, #84]	; (8007f38 <prvHeapInit+0xb4>)
 8007ee4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ee6:	4b14      	ldr	r3, [pc, #80]	; (8007f38 <prvHeapInit+0xb4>)
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	2200      	movs	r2, #0
 8007eec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007eee:	4b12      	ldr	r3, [pc, #72]	; (8007f38 <prvHeapInit+0xb4>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007efa:	683b      	ldr	r3, [r7, #0]
 8007efc:	68fa      	ldr	r2, [r7, #12]
 8007efe:	1ad2      	subs	r2, r2, r3
 8007f00:	683b      	ldr	r3, [r7, #0]
 8007f02:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f04:	4b0c      	ldr	r3, [pc, #48]	; (8007f38 <prvHeapInit+0xb4>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	4a0a      	ldr	r2, [pc, #40]	; (8007f3c <prvHeapInit+0xb8>)
 8007f12:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	685b      	ldr	r3, [r3, #4]
 8007f18:	4a09      	ldr	r2, [pc, #36]	; (8007f40 <prvHeapInit+0xbc>)
 8007f1a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f1c:	4b09      	ldr	r3, [pc, #36]	; (8007f44 <prvHeapInit+0xc0>)
 8007f1e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr
 8007f30:	20000fb8 	.word	0x20000fb8
 8007f34:	20004a50 	.word	0x20004a50
 8007f38:	20004a58 	.word	0x20004a58
 8007f3c:	20004a60 	.word	0x20004a60
 8007f40:	20004a5c 	.word	0x20004a5c
 8007f44:	20004a6c 	.word	0x20004a6c

08007f48 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f48:	b480      	push	{r7}
 8007f4a:	b085      	sub	sp, #20
 8007f4c:	af00      	add	r7, sp, #0
 8007f4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f50:	4b28      	ldr	r3, [pc, #160]	; (8007ff4 <prvInsertBlockIntoFreeList+0xac>)
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e002      	b.n	8007f5c <prvInsertBlockIntoFreeList+0x14>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	60fb      	str	r3, [r7, #12]
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	687a      	ldr	r2, [r7, #4]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d8f7      	bhi.n	8007f56 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	685b      	ldr	r3, [r3, #4]
 8007f6e:	68ba      	ldr	r2, [r7, #8]
 8007f70:	4413      	add	r3, r2
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d108      	bne.n	8007f8a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	685a      	ldr	r2, [r3, #4]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	441a      	add	r2, r3
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685b      	ldr	r3, [r3, #4]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	441a      	add	r2, r3
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d118      	bne.n	8007fd0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	4b15      	ldr	r3, [pc, #84]	; (8007ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	429a      	cmp	r2, r3
 8007fa8:	d00d      	beq.n	8007fc6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	68fb      	ldr	r3, [r7, #12]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	441a      	add	r2, r3
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	681a      	ldr	r2, [r3, #0]
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	601a      	str	r2, [r3, #0]
 8007fc4:	e008      	b.n	8007fd8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fc6:	4b0c      	ldr	r3, [pc, #48]	; (8007ff8 <prvInsertBlockIntoFreeList+0xb0>)
 8007fc8:	681a      	ldr	r2, [r3, #0]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	601a      	str	r2, [r3, #0]
 8007fce:	e003      	b.n	8007fd8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	429a      	cmp	r2, r3
 8007fde:	d002      	beq.n	8007fe6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	687a      	ldr	r2, [r7, #4]
 8007fe4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007fe6:	bf00      	nop
 8007fe8:	3714      	adds	r7, #20
 8007fea:	46bd      	mov	sp, r7
 8007fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff0:	4770      	bx	lr
 8007ff2:	bf00      	nop
 8007ff4:	20004a50 	.word	0x20004a50
 8007ff8:	20004a58 	.word	0x20004a58

08007ffc <srand>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4b10      	ldr	r3, [pc, #64]	; (8008040 <srand+0x44>)
 8008000:	681d      	ldr	r5, [r3, #0]
 8008002:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008004:	4604      	mov	r4, r0
 8008006:	b9b3      	cbnz	r3, 8008036 <srand+0x3a>
 8008008:	2018      	movs	r0, #24
 800800a:	f000 fb7f 	bl	800870c <malloc>
 800800e:	4602      	mov	r2, r0
 8008010:	6328      	str	r0, [r5, #48]	; 0x30
 8008012:	b920      	cbnz	r0, 800801e <srand+0x22>
 8008014:	4b0b      	ldr	r3, [pc, #44]	; (8008044 <srand+0x48>)
 8008016:	480c      	ldr	r0, [pc, #48]	; (8008048 <srand+0x4c>)
 8008018:	2146      	movs	r1, #70	; 0x46
 800801a:	f000 f9c9 	bl	80083b0 <__assert_func>
 800801e:	490b      	ldr	r1, [pc, #44]	; (800804c <srand+0x50>)
 8008020:	4b0b      	ldr	r3, [pc, #44]	; (8008050 <srand+0x54>)
 8008022:	e9c0 1300 	strd	r1, r3, [r0]
 8008026:	4b0b      	ldr	r3, [pc, #44]	; (8008054 <srand+0x58>)
 8008028:	6083      	str	r3, [r0, #8]
 800802a:	230b      	movs	r3, #11
 800802c:	8183      	strh	r3, [r0, #12]
 800802e:	2100      	movs	r1, #0
 8008030:	2001      	movs	r0, #1
 8008032:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008036:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8008038:	2200      	movs	r2, #0
 800803a:	611c      	str	r4, [r3, #16]
 800803c:	615a      	str	r2, [r3, #20]
 800803e:	bd38      	pop	{r3, r4, r5, pc}
 8008040:	2000006c 	.word	0x2000006c
 8008044:	080093f8 	.word	0x080093f8
 8008048:	0800940f 	.word	0x0800940f
 800804c:	abcd330e 	.word	0xabcd330e
 8008050:	e66d1234 	.word	0xe66d1234
 8008054:	0005deec 	.word	0x0005deec

08008058 <rand>:
 8008058:	4b16      	ldr	r3, [pc, #88]	; (80080b4 <rand+0x5c>)
 800805a:	b510      	push	{r4, lr}
 800805c:	681c      	ldr	r4, [r3, #0]
 800805e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008060:	b9b3      	cbnz	r3, 8008090 <rand+0x38>
 8008062:	2018      	movs	r0, #24
 8008064:	f000 fb52 	bl	800870c <malloc>
 8008068:	4602      	mov	r2, r0
 800806a:	6320      	str	r0, [r4, #48]	; 0x30
 800806c:	b920      	cbnz	r0, 8008078 <rand+0x20>
 800806e:	4b12      	ldr	r3, [pc, #72]	; (80080b8 <rand+0x60>)
 8008070:	4812      	ldr	r0, [pc, #72]	; (80080bc <rand+0x64>)
 8008072:	2152      	movs	r1, #82	; 0x52
 8008074:	f000 f99c 	bl	80083b0 <__assert_func>
 8008078:	4911      	ldr	r1, [pc, #68]	; (80080c0 <rand+0x68>)
 800807a:	4b12      	ldr	r3, [pc, #72]	; (80080c4 <rand+0x6c>)
 800807c:	e9c0 1300 	strd	r1, r3, [r0]
 8008080:	4b11      	ldr	r3, [pc, #68]	; (80080c8 <rand+0x70>)
 8008082:	6083      	str	r3, [r0, #8]
 8008084:	230b      	movs	r3, #11
 8008086:	8183      	strh	r3, [r0, #12]
 8008088:	2100      	movs	r1, #0
 800808a:	2001      	movs	r0, #1
 800808c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008090:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008092:	480e      	ldr	r0, [pc, #56]	; (80080cc <rand+0x74>)
 8008094:	690b      	ldr	r3, [r1, #16]
 8008096:	694c      	ldr	r4, [r1, #20]
 8008098:	4a0d      	ldr	r2, [pc, #52]	; (80080d0 <rand+0x78>)
 800809a:	4358      	muls	r0, r3
 800809c:	fb02 0004 	mla	r0, r2, r4, r0
 80080a0:	fba3 3202 	umull	r3, r2, r3, r2
 80080a4:	3301      	adds	r3, #1
 80080a6:	eb40 0002 	adc.w	r0, r0, r2
 80080aa:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80080ae:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80080b2:	bd10      	pop	{r4, pc}
 80080b4:	2000006c 	.word	0x2000006c
 80080b8:	080093f8 	.word	0x080093f8
 80080bc:	0800940f 	.word	0x0800940f
 80080c0:	abcd330e 	.word	0xabcd330e
 80080c4:	e66d1234 	.word	0xe66d1234
 80080c8:	0005deec 	.word	0x0005deec
 80080cc:	5851f42d 	.word	0x5851f42d
 80080d0:	4c957f2d 	.word	0x4c957f2d

080080d4 <std>:
 80080d4:	2300      	movs	r3, #0
 80080d6:	b510      	push	{r4, lr}
 80080d8:	4604      	mov	r4, r0
 80080da:	e9c0 3300 	strd	r3, r3, [r0]
 80080de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80080e2:	6083      	str	r3, [r0, #8]
 80080e4:	8181      	strh	r1, [r0, #12]
 80080e6:	6643      	str	r3, [r0, #100]	; 0x64
 80080e8:	81c2      	strh	r2, [r0, #14]
 80080ea:	6183      	str	r3, [r0, #24]
 80080ec:	4619      	mov	r1, r3
 80080ee:	2208      	movs	r2, #8
 80080f0:	305c      	adds	r0, #92	; 0x5c
 80080f2:	f000 f8c3 	bl	800827c <memset>
 80080f6:	4b0d      	ldr	r3, [pc, #52]	; (800812c <std+0x58>)
 80080f8:	6263      	str	r3, [r4, #36]	; 0x24
 80080fa:	4b0d      	ldr	r3, [pc, #52]	; (8008130 <std+0x5c>)
 80080fc:	62a3      	str	r3, [r4, #40]	; 0x28
 80080fe:	4b0d      	ldr	r3, [pc, #52]	; (8008134 <std+0x60>)
 8008100:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008102:	4b0d      	ldr	r3, [pc, #52]	; (8008138 <std+0x64>)
 8008104:	6323      	str	r3, [r4, #48]	; 0x30
 8008106:	4b0d      	ldr	r3, [pc, #52]	; (800813c <std+0x68>)
 8008108:	6224      	str	r4, [r4, #32]
 800810a:	429c      	cmp	r4, r3
 800810c:	d006      	beq.n	800811c <std+0x48>
 800810e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8008112:	4294      	cmp	r4, r2
 8008114:	d002      	beq.n	800811c <std+0x48>
 8008116:	33d0      	adds	r3, #208	; 0xd0
 8008118:	429c      	cmp	r4, r3
 800811a:	d105      	bne.n	8008128 <std+0x54>
 800811c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008124:	f000 b932 	b.w	800838c <__retarget_lock_init_recursive>
 8008128:	bd10      	pop	{r4, pc}
 800812a:	bf00      	nop
 800812c:	08008cf1 	.word	0x08008cf1
 8008130:	08008d13 	.word	0x08008d13
 8008134:	08008d4b 	.word	0x08008d4b
 8008138:	08008d6f 	.word	0x08008d6f
 800813c:	20004a70 	.word	0x20004a70

08008140 <stdio_exit_handler>:
 8008140:	4a02      	ldr	r2, [pc, #8]	; (800814c <stdio_exit_handler+0xc>)
 8008142:	4903      	ldr	r1, [pc, #12]	; (8008150 <stdio_exit_handler+0x10>)
 8008144:	4803      	ldr	r0, [pc, #12]	; (8008154 <stdio_exit_handler+0x14>)
 8008146:	f000 b869 	b.w	800821c <_fwalk_sglue>
 800814a:	bf00      	nop
 800814c:	20000014 	.word	0x20000014
 8008150:	08008c89 	.word	0x08008c89
 8008154:	20000020 	.word	0x20000020

08008158 <cleanup_stdio>:
 8008158:	6841      	ldr	r1, [r0, #4]
 800815a:	4b0c      	ldr	r3, [pc, #48]	; (800818c <cleanup_stdio+0x34>)
 800815c:	4299      	cmp	r1, r3
 800815e:	b510      	push	{r4, lr}
 8008160:	4604      	mov	r4, r0
 8008162:	d001      	beq.n	8008168 <cleanup_stdio+0x10>
 8008164:	f000 fd90 	bl	8008c88 <_fflush_r>
 8008168:	68a1      	ldr	r1, [r4, #8]
 800816a:	4b09      	ldr	r3, [pc, #36]	; (8008190 <cleanup_stdio+0x38>)
 800816c:	4299      	cmp	r1, r3
 800816e:	d002      	beq.n	8008176 <cleanup_stdio+0x1e>
 8008170:	4620      	mov	r0, r4
 8008172:	f000 fd89 	bl	8008c88 <_fflush_r>
 8008176:	68e1      	ldr	r1, [r4, #12]
 8008178:	4b06      	ldr	r3, [pc, #24]	; (8008194 <cleanup_stdio+0x3c>)
 800817a:	4299      	cmp	r1, r3
 800817c:	d004      	beq.n	8008188 <cleanup_stdio+0x30>
 800817e:	4620      	mov	r0, r4
 8008180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008184:	f000 bd80 	b.w	8008c88 <_fflush_r>
 8008188:	bd10      	pop	{r4, pc}
 800818a:	bf00      	nop
 800818c:	20004a70 	.word	0x20004a70
 8008190:	20004ad8 	.word	0x20004ad8
 8008194:	20004b40 	.word	0x20004b40

08008198 <global_stdio_init.part.0>:
 8008198:	b510      	push	{r4, lr}
 800819a:	4b0b      	ldr	r3, [pc, #44]	; (80081c8 <global_stdio_init.part.0+0x30>)
 800819c:	4c0b      	ldr	r4, [pc, #44]	; (80081cc <global_stdio_init.part.0+0x34>)
 800819e:	4a0c      	ldr	r2, [pc, #48]	; (80081d0 <global_stdio_init.part.0+0x38>)
 80081a0:	601a      	str	r2, [r3, #0]
 80081a2:	4620      	mov	r0, r4
 80081a4:	2200      	movs	r2, #0
 80081a6:	2104      	movs	r1, #4
 80081a8:	f7ff ff94 	bl	80080d4 <std>
 80081ac:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80081b0:	2201      	movs	r2, #1
 80081b2:	2109      	movs	r1, #9
 80081b4:	f7ff ff8e 	bl	80080d4 <std>
 80081b8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80081bc:	2202      	movs	r2, #2
 80081be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081c2:	2112      	movs	r1, #18
 80081c4:	f7ff bf86 	b.w	80080d4 <std>
 80081c8:	20004ba8 	.word	0x20004ba8
 80081cc:	20004a70 	.word	0x20004a70
 80081d0:	08008141 	.word	0x08008141

080081d4 <__sfp_lock_acquire>:
 80081d4:	4801      	ldr	r0, [pc, #4]	; (80081dc <__sfp_lock_acquire+0x8>)
 80081d6:	f000 b8da 	b.w	800838e <__retarget_lock_acquire_recursive>
 80081da:	bf00      	nop
 80081dc:	20004bb1 	.word	0x20004bb1

080081e0 <__sfp_lock_release>:
 80081e0:	4801      	ldr	r0, [pc, #4]	; (80081e8 <__sfp_lock_release+0x8>)
 80081e2:	f000 b8d5 	b.w	8008390 <__retarget_lock_release_recursive>
 80081e6:	bf00      	nop
 80081e8:	20004bb1 	.word	0x20004bb1

080081ec <__sinit>:
 80081ec:	b510      	push	{r4, lr}
 80081ee:	4604      	mov	r4, r0
 80081f0:	f7ff fff0 	bl	80081d4 <__sfp_lock_acquire>
 80081f4:	6a23      	ldr	r3, [r4, #32]
 80081f6:	b11b      	cbz	r3, 8008200 <__sinit+0x14>
 80081f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081fc:	f7ff bff0 	b.w	80081e0 <__sfp_lock_release>
 8008200:	4b04      	ldr	r3, [pc, #16]	; (8008214 <__sinit+0x28>)
 8008202:	6223      	str	r3, [r4, #32]
 8008204:	4b04      	ldr	r3, [pc, #16]	; (8008218 <__sinit+0x2c>)
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1f5      	bne.n	80081f8 <__sinit+0xc>
 800820c:	f7ff ffc4 	bl	8008198 <global_stdio_init.part.0>
 8008210:	e7f2      	b.n	80081f8 <__sinit+0xc>
 8008212:	bf00      	nop
 8008214:	08008159 	.word	0x08008159
 8008218:	20004ba8 	.word	0x20004ba8

0800821c <_fwalk_sglue>:
 800821c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008220:	4607      	mov	r7, r0
 8008222:	4688      	mov	r8, r1
 8008224:	4614      	mov	r4, r2
 8008226:	2600      	movs	r6, #0
 8008228:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800822c:	f1b9 0901 	subs.w	r9, r9, #1
 8008230:	d505      	bpl.n	800823e <_fwalk_sglue+0x22>
 8008232:	6824      	ldr	r4, [r4, #0]
 8008234:	2c00      	cmp	r4, #0
 8008236:	d1f7      	bne.n	8008228 <_fwalk_sglue+0xc>
 8008238:	4630      	mov	r0, r6
 800823a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800823e:	89ab      	ldrh	r3, [r5, #12]
 8008240:	2b01      	cmp	r3, #1
 8008242:	d907      	bls.n	8008254 <_fwalk_sglue+0x38>
 8008244:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008248:	3301      	adds	r3, #1
 800824a:	d003      	beq.n	8008254 <_fwalk_sglue+0x38>
 800824c:	4629      	mov	r1, r5
 800824e:	4638      	mov	r0, r7
 8008250:	47c0      	blx	r8
 8008252:	4306      	orrs	r6, r0
 8008254:	3568      	adds	r5, #104	; 0x68
 8008256:	e7e9      	b.n	800822c <_fwalk_sglue+0x10>

08008258 <iprintf>:
 8008258:	b40f      	push	{r0, r1, r2, r3}
 800825a:	b507      	push	{r0, r1, r2, lr}
 800825c:	4906      	ldr	r1, [pc, #24]	; (8008278 <iprintf+0x20>)
 800825e:	ab04      	add	r3, sp, #16
 8008260:	6808      	ldr	r0, [r1, #0]
 8008262:	f853 2b04 	ldr.w	r2, [r3], #4
 8008266:	6881      	ldr	r1, [r0, #8]
 8008268:	9301      	str	r3, [sp, #4]
 800826a:	f000 f935 	bl	80084d8 <_vfiprintf_r>
 800826e:	b003      	add	sp, #12
 8008270:	f85d eb04 	ldr.w	lr, [sp], #4
 8008274:	b004      	add	sp, #16
 8008276:	4770      	bx	lr
 8008278:	2000006c 	.word	0x2000006c

0800827c <memset>:
 800827c:	4402      	add	r2, r0
 800827e:	4603      	mov	r3, r0
 8008280:	4293      	cmp	r3, r2
 8008282:	d100      	bne.n	8008286 <memset+0xa>
 8008284:	4770      	bx	lr
 8008286:	f803 1b01 	strb.w	r1, [r3], #1
 800828a:	e7f9      	b.n	8008280 <memset+0x4>

0800828c <_reclaim_reent>:
 800828c:	4b29      	ldr	r3, [pc, #164]	; (8008334 <_reclaim_reent+0xa8>)
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	4283      	cmp	r3, r0
 8008292:	b570      	push	{r4, r5, r6, lr}
 8008294:	4604      	mov	r4, r0
 8008296:	d04b      	beq.n	8008330 <_reclaim_reent+0xa4>
 8008298:	69c3      	ldr	r3, [r0, #28]
 800829a:	b143      	cbz	r3, 80082ae <_reclaim_reent+0x22>
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d144      	bne.n	800832c <_reclaim_reent+0xa0>
 80082a2:	69e3      	ldr	r3, [r4, #28]
 80082a4:	6819      	ldr	r1, [r3, #0]
 80082a6:	b111      	cbz	r1, 80082ae <_reclaim_reent+0x22>
 80082a8:	4620      	mov	r0, r4
 80082aa:	f000 f89f 	bl	80083ec <_free_r>
 80082ae:	6961      	ldr	r1, [r4, #20]
 80082b0:	b111      	cbz	r1, 80082b8 <_reclaim_reent+0x2c>
 80082b2:	4620      	mov	r0, r4
 80082b4:	f000 f89a 	bl	80083ec <_free_r>
 80082b8:	69e1      	ldr	r1, [r4, #28]
 80082ba:	b111      	cbz	r1, 80082c2 <_reclaim_reent+0x36>
 80082bc:	4620      	mov	r0, r4
 80082be:	f000 f895 	bl	80083ec <_free_r>
 80082c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80082c4:	b111      	cbz	r1, 80082cc <_reclaim_reent+0x40>
 80082c6:	4620      	mov	r0, r4
 80082c8:	f000 f890 	bl	80083ec <_free_r>
 80082cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80082ce:	b111      	cbz	r1, 80082d6 <_reclaim_reent+0x4a>
 80082d0:	4620      	mov	r0, r4
 80082d2:	f000 f88b 	bl	80083ec <_free_r>
 80082d6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80082d8:	b111      	cbz	r1, 80082e0 <_reclaim_reent+0x54>
 80082da:	4620      	mov	r0, r4
 80082dc:	f000 f886 	bl	80083ec <_free_r>
 80082e0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80082e2:	b111      	cbz	r1, 80082ea <_reclaim_reent+0x5e>
 80082e4:	4620      	mov	r0, r4
 80082e6:	f000 f881 	bl	80083ec <_free_r>
 80082ea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80082ec:	b111      	cbz	r1, 80082f4 <_reclaim_reent+0x68>
 80082ee:	4620      	mov	r0, r4
 80082f0:	f000 f87c 	bl	80083ec <_free_r>
 80082f4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80082f6:	b111      	cbz	r1, 80082fe <_reclaim_reent+0x72>
 80082f8:	4620      	mov	r0, r4
 80082fa:	f000 f877 	bl	80083ec <_free_r>
 80082fe:	6a23      	ldr	r3, [r4, #32]
 8008300:	b1b3      	cbz	r3, 8008330 <_reclaim_reent+0xa4>
 8008302:	4620      	mov	r0, r4
 8008304:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008308:	4718      	bx	r3
 800830a:	5949      	ldr	r1, [r1, r5]
 800830c:	b941      	cbnz	r1, 8008320 <_reclaim_reent+0x94>
 800830e:	3504      	adds	r5, #4
 8008310:	69e3      	ldr	r3, [r4, #28]
 8008312:	2d80      	cmp	r5, #128	; 0x80
 8008314:	68d9      	ldr	r1, [r3, #12]
 8008316:	d1f8      	bne.n	800830a <_reclaim_reent+0x7e>
 8008318:	4620      	mov	r0, r4
 800831a:	f000 f867 	bl	80083ec <_free_r>
 800831e:	e7c0      	b.n	80082a2 <_reclaim_reent+0x16>
 8008320:	680e      	ldr	r6, [r1, #0]
 8008322:	4620      	mov	r0, r4
 8008324:	f000 f862 	bl	80083ec <_free_r>
 8008328:	4631      	mov	r1, r6
 800832a:	e7ef      	b.n	800830c <_reclaim_reent+0x80>
 800832c:	2500      	movs	r5, #0
 800832e:	e7ef      	b.n	8008310 <_reclaim_reent+0x84>
 8008330:	bd70      	pop	{r4, r5, r6, pc}
 8008332:	bf00      	nop
 8008334:	2000006c 	.word	0x2000006c

08008338 <__errno>:
 8008338:	4b01      	ldr	r3, [pc, #4]	; (8008340 <__errno+0x8>)
 800833a:	6818      	ldr	r0, [r3, #0]
 800833c:	4770      	bx	lr
 800833e:	bf00      	nop
 8008340:	2000006c 	.word	0x2000006c

08008344 <__libc_init_array>:
 8008344:	b570      	push	{r4, r5, r6, lr}
 8008346:	4d0d      	ldr	r5, [pc, #52]	; (800837c <__libc_init_array+0x38>)
 8008348:	4c0d      	ldr	r4, [pc, #52]	; (8008380 <__libc_init_array+0x3c>)
 800834a:	1b64      	subs	r4, r4, r5
 800834c:	10a4      	asrs	r4, r4, #2
 800834e:	2600      	movs	r6, #0
 8008350:	42a6      	cmp	r6, r4
 8008352:	d109      	bne.n	8008368 <__libc_init_array+0x24>
 8008354:	4d0b      	ldr	r5, [pc, #44]	; (8008384 <__libc_init_array+0x40>)
 8008356:	4c0c      	ldr	r4, [pc, #48]	; (8008388 <__libc_init_array+0x44>)
 8008358:	f000 fedc 	bl	8009114 <_init>
 800835c:	1b64      	subs	r4, r4, r5
 800835e:	10a4      	asrs	r4, r4, #2
 8008360:	2600      	movs	r6, #0
 8008362:	42a6      	cmp	r6, r4
 8008364:	d105      	bne.n	8008372 <__libc_init_array+0x2e>
 8008366:	bd70      	pop	{r4, r5, r6, pc}
 8008368:	f855 3b04 	ldr.w	r3, [r5], #4
 800836c:	4798      	blx	r3
 800836e:	3601      	adds	r6, #1
 8008370:	e7ee      	b.n	8008350 <__libc_init_array+0xc>
 8008372:	f855 3b04 	ldr.w	r3, [r5], #4
 8008376:	4798      	blx	r3
 8008378:	3601      	adds	r6, #1
 800837a:	e7f2      	b.n	8008362 <__libc_init_array+0x1e>
 800837c:	080094e0 	.word	0x080094e0
 8008380:	080094e0 	.word	0x080094e0
 8008384:	080094e0 	.word	0x080094e0
 8008388:	080094e4 	.word	0x080094e4

0800838c <__retarget_lock_init_recursive>:
 800838c:	4770      	bx	lr

0800838e <__retarget_lock_acquire_recursive>:
 800838e:	4770      	bx	lr

08008390 <__retarget_lock_release_recursive>:
 8008390:	4770      	bx	lr

08008392 <memcpy>:
 8008392:	440a      	add	r2, r1
 8008394:	4291      	cmp	r1, r2
 8008396:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800839a:	d100      	bne.n	800839e <memcpy+0xc>
 800839c:	4770      	bx	lr
 800839e:	b510      	push	{r4, lr}
 80083a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083a4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083a8:	4291      	cmp	r1, r2
 80083aa:	d1f9      	bne.n	80083a0 <memcpy+0xe>
 80083ac:	bd10      	pop	{r4, pc}
	...

080083b0 <__assert_func>:
 80083b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083b2:	4614      	mov	r4, r2
 80083b4:	461a      	mov	r2, r3
 80083b6:	4b09      	ldr	r3, [pc, #36]	; (80083dc <__assert_func+0x2c>)
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4605      	mov	r5, r0
 80083bc:	68d8      	ldr	r0, [r3, #12]
 80083be:	b14c      	cbz	r4, 80083d4 <__assert_func+0x24>
 80083c0:	4b07      	ldr	r3, [pc, #28]	; (80083e0 <__assert_func+0x30>)
 80083c2:	9100      	str	r1, [sp, #0]
 80083c4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80083c8:	4906      	ldr	r1, [pc, #24]	; (80083e4 <__assert_func+0x34>)
 80083ca:	462b      	mov	r3, r5
 80083cc:	f000 fcd4 	bl	8008d78 <fiprintf>
 80083d0:	f000 fe54 	bl	800907c <abort>
 80083d4:	4b04      	ldr	r3, [pc, #16]	; (80083e8 <__assert_func+0x38>)
 80083d6:	461c      	mov	r4, r3
 80083d8:	e7f3      	b.n	80083c2 <__assert_func+0x12>
 80083da:	bf00      	nop
 80083dc:	2000006c 	.word	0x2000006c
 80083e0:	08009467 	.word	0x08009467
 80083e4:	08009474 	.word	0x08009474
 80083e8:	080094a2 	.word	0x080094a2

080083ec <_free_r>:
 80083ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80083ee:	2900      	cmp	r1, #0
 80083f0:	d044      	beq.n	800847c <_free_r+0x90>
 80083f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083f6:	9001      	str	r0, [sp, #4]
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	f1a1 0404 	sub.w	r4, r1, #4
 80083fe:	bfb8      	it	lt
 8008400:	18e4      	addlt	r4, r4, r3
 8008402:	f000 fc69 	bl	8008cd8 <__malloc_lock>
 8008406:	4a1e      	ldr	r2, [pc, #120]	; (8008480 <_free_r+0x94>)
 8008408:	9801      	ldr	r0, [sp, #4]
 800840a:	6813      	ldr	r3, [r2, #0]
 800840c:	b933      	cbnz	r3, 800841c <_free_r+0x30>
 800840e:	6063      	str	r3, [r4, #4]
 8008410:	6014      	str	r4, [r2, #0]
 8008412:	b003      	add	sp, #12
 8008414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008418:	f000 bc64 	b.w	8008ce4 <__malloc_unlock>
 800841c:	42a3      	cmp	r3, r4
 800841e:	d908      	bls.n	8008432 <_free_r+0x46>
 8008420:	6825      	ldr	r5, [r4, #0]
 8008422:	1961      	adds	r1, r4, r5
 8008424:	428b      	cmp	r3, r1
 8008426:	bf01      	itttt	eq
 8008428:	6819      	ldreq	r1, [r3, #0]
 800842a:	685b      	ldreq	r3, [r3, #4]
 800842c:	1949      	addeq	r1, r1, r5
 800842e:	6021      	streq	r1, [r4, #0]
 8008430:	e7ed      	b.n	800840e <_free_r+0x22>
 8008432:	461a      	mov	r2, r3
 8008434:	685b      	ldr	r3, [r3, #4]
 8008436:	b10b      	cbz	r3, 800843c <_free_r+0x50>
 8008438:	42a3      	cmp	r3, r4
 800843a:	d9fa      	bls.n	8008432 <_free_r+0x46>
 800843c:	6811      	ldr	r1, [r2, #0]
 800843e:	1855      	adds	r5, r2, r1
 8008440:	42a5      	cmp	r5, r4
 8008442:	d10b      	bne.n	800845c <_free_r+0x70>
 8008444:	6824      	ldr	r4, [r4, #0]
 8008446:	4421      	add	r1, r4
 8008448:	1854      	adds	r4, r2, r1
 800844a:	42a3      	cmp	r3, r4
 800844c:	6011      	str	r1, [r2, #0]
 800844e:	d1e0      	bne.n	8008412 <_free_r+0x26>
 8008450:	681c      	ldr	r4, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	6053      	str	r3, [r2, #4]
 8008456:	440c      	add	r4, r1
 8008458:	6014      	str	r4, [r2, #0]
 800845a:	e7da      	b.n	8008412 <_free_r+0x26>
 800845c:	d902      	bls.n	8008464 <_free_r+0x78>
 800845e:	230c      	movs	r3, #12
 8008460:	6003      	str	r3, [r0, #0]
 8008462:	e7d6      	b.n	8008412 <_free_r+0x26>
 8008464:	6825      	ldr	r5, [r4, #0]
 8008466:	1961      	adds	r1, r4, r5
 8008468:	428b      	cmp	r3, r1
 800846a:	bf04      	itt	eq
 800846c:	6819      	ldreq	r1, [r3, #0]
 800846e:	685b      	ldreq	r3, [r3, #4]
 8008470:	6063      	str	r3, [r4, #4]
 8008472:	bf04      	itt	eq
 8008474:	1949      	addeq	r1, r1, r5
 8008476:	6021      	streq	r1, [r4, #0]
 8008478:	6054      	str	r4, [r2, #4]
 800847a:	e7ca      	b.n	8008412 <_free_r+0x26>
 800847c:	b003      	add	sp, #12
 800847e:	bd30      	pop	{r4, r5, pc}
 8008480:	20004bb4 	.word	0x20004bb4

08008484 <__sfputc_r>:
 8008484:	6893      	ldr	r3, [r2, #8]
 8008486:	3b01      	subs	r3, #1
 8008488:	2b00      	cmp	r3, #0
 800848a:	b410      	push	{r4}
 800848c:	6093      	str	r3, [r2, #8]
 800848e:	da08      	bge.n	80084a2 <__sfputc_r+0x1e>
 8008490:	6994      	ldr	r4, [r2, #24]
 8008492:	42a3      	cmp	r3, r4
 8008494:	db01      	blt.n	800849a <__sfputc_r+0x16>
 8008496:	290a      	cmp	r1, #10
 8008498:	d103      	bne.n	80084a2 <__sfputc_r+0x1e>
 800849a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800849e:	f000 bc7d 	b.w	8008d9c <__swbuf_r>
 80084a2:	6813      	ldr	r3, [r2, #0]
 80084a4:	1c58      	adds	r0, r3, #1
 80084a6:	6010      	str	r0, [r2, #0]
 80084a8:	7019      	strb	r1, [r3, #0]
 80084aa:	4608      	mov	r0, r1
 80084ac:	f85d 4b04 	ldr.w	r4, [sp], #4
 80084b0:	4770      	bx	lr

080084b2 <__sfputs_r>:
 80084b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b4:	4606      	mov	r6, r0
 80084b6:	460f      	mov	r7, r1
 80084b8:	4614      	mov	r4, r2
 80084ba:	18d5      	adds	r5, r2, r3
 80084bc:	42ac      	cmp	r4, r5
 80084be:	d101      	bne.n	80084c4 <__sfputs_r+0x12>
 80084c0:	2000      	movs	r0, #0
 80084c2:	e007      	b.n	80084d4 <__sfputs_r+0x22>
 80084c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084c8:	463a      	mov	r2, r7
 80084ca:	4630      	mov	r0, r6
 80084cc:	f7ff ffda 	bl	8008484 <__sfputc_r>
 80084d0:	1c43      	adds	r3, r0, #1
 80084d2:	d1f3      	bne.n	80084bc <__sfputs_r+0xa>
 80084d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080084d8 <_vfiprintf_r>:
 80084d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80084dc:	460d      	mov	r5, r1
 80084de:	b09d      	sub	sp, #116	; 0x74
 80084e0:	4614      	mov	r4, r2
 80084e2:	4698      	mov	r8, r3
 80084e4:	4606      	mov	r6, r0
 80084e6:	b118      	cbz	r0, 80084f0 <_vfiprintf_r+0x18>
 80084e8:	6a03      	ldr	r3, [r0, #32]
 80084ea:	b90b      	cbnz	r3, 80084f0 <_vfiprintf_r+0x18>
 80084ec:	f7ff fe7e 	bl	80081ec <__sinit>
 80084f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80084f2:	07d9      	lsls	r1, r3, #31
 80084f4:	d405      	bmi.n	8008502 <_vfiprintf_r+0x2a>
 80084f6:	89ab      	ldrh	r3, [r5, #12]
 80084f8:	059a      	lsls	r2, r3, #22
 80084fa:	d402      	bmi.n	8008502 <_vfiprintf_r+0x2a>
 80084fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80084fe:	f7ff ff46 	bl	800838e <__retarget_lock_acquire_recursive>
 8008502:	89ab      	ldrh	r3, [r5, #12]
 8008504:	071b      	lsls	r3, r3, #28
 8008506:	d501      	bpl.n	800850c <_vfiprintf_r+0x34>
 8008508:	692b      	ldr	r3, [r5, #16]
 800850a:	b99b      	cbnz	r3, 8008534 <_vfiprintf_r+0x5c>
 800850c:	4629      	mov	r1, r5
 800850e:	4630      	mov	r0, r6
 8008510:	f000 fc82 	bl	8008e18 <__swsetup_r>
 8008514:	b170      	cbz	r0, 8008534 <_vfiprintf_r+0x5c>
 8008516:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008518:	07dc      	lsls	r4, r3, #31
 800851a:	d504      	bpl.n	8008526 <_vfiprintf_r+0x4e>
 800851c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008520:	b01d      	add	sp, #116	; 0x74
 8008522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008526:	89ab      	ldrh	r3, [r5, #12]
 8008528:	0598      	lsls	r0, r3, #22
 800852a:	d4f7      	bmi.n	800851c <_vfiprintf_r+0x44>
 800852c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800852e:	f7ff ff2f 	bl	8008390 <__retarget_lock_release_recursive>
 8008532:	e7f3      	b.n	800851c <_vfiprintf_r+0x44>
 8008534:	2300      	movs	r3, #0
 8008536:	9309      	str	r3, [sp, #36]	; 0x24
 8008538:	2320      	movs	r3, #32
 800853a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800853e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008542:	2330      	movs	r3, #48	; 0x30
 8008544:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80086f8 <_vfiprintf_r+0x220>
 8008548:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800854c:	f04f 0901 	mov.w	r9, #1
 8008550:	4623      	mov	r3, r4
 8008552:	469a      	mov	sl, r3
 8008554:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008558:	b10a      	cbz	r2, 800855e <_vfiprintf_r+0x86>
 800855a:	2a25      	cmp	r2, #37	; 0x25
 800855c:	d1f9      	bne.n	8008552 <_vfiprintf_r+0x7a>
 800855e:	ebba 0b04 	subs.w	fp, sl, r4
 8008562:	d00b      	beq.n	800857c <_vfiprintf_r+0xa4>
 8008564:	465b      	mov	r3, fp
 8008566:	4622      	mov	r2, r4
 8008568:	4629      	mov	r1, r5
 800856a:	4630      	mov	r0, r6
 800856c:	f7ff ffa1 	bl	80084b2 <__sfputs_r>
 8008570:	3001      	adds	r0, #1
 8008572:	f000 80a9 	beq.w	80086c8 <_vfiprintf_r+0x1f0>
 8008576:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008578:	445a      	add	r2, fp
 800857a:	9209      	str	r2, [sp, #36]	; 0x24
 800857c:	f89a 3000 	ldrb.w	r3, [sl]
 8008580:	2b00      	cmp	r3, #0
 8008582:	f000 80a1 	beq.w	80086c8 <_vfiprintf_r+0x1f0>
 8008586:	2300      	movs	r3, #0
 8008588:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800858c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008590:	f10a 0a01 	add.w	sl, sl, #1
 8008594:	9304      	str	r3, [sp, #16]
 8008596:	9307      	str	r3, [sp, #28]
 8008598:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800859c:	931a      	str	r3, [sp, #104]	; 0x68
 800859e:	4654      	mov	r4, sl
 80085a0:	2205      	movs	r2, #5
 80085a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a6:	4854      	ldr	r0, [pc, #336]	; (80086f8 <_vfiprintf_r+0x220>)
 80085a8:	f7f7 fe12 	bl	80001d0 <memchr>
 80085ac:	9a04      	ldr	r2, [sp, #16]
 80085ae:	b9d8      	cbnz	r0, 80085e8 <_vfiprintf_r+0x110>
 80085b0:	06d1      	lsls	r1, r2, #27
 80085b2:	bf44      	itt	mi
 80085b4:	2320      	movmi	r3, #32
 80085b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085ba:	0713      	lsls	r3, r2, #28
 80085bc:	bf44      	itt	mi
 80085be:	232b      	movmi	r3, #43	; 0x2b
 80085c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c4:	f89a 3000 	ldrb.w	r3, [sl]
 80085c8:	2b2a      	cmp	r3, #42	; 0x2a
 80085ca:	d015      	beq.n	80085f8 <_vfiprintf_r+0x120>
 80085cc:	9a07      	ldr	r2, [sp, #28]
 80085ce:	4654      	mov	r4, sl
 80085d0:	2000      	movs	r0, #0
 80085d2:	f04f 0c0a 	mov.w	ip, #10
 80085d6:	4621      	mov	r1, r4
 80085d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085dc:	3b30      	subs	r3, #48	; 0x30
 80085de:	2b09      	cmp	r3, #9
 80085e0:	d94d      	bls.n	800867e <_vfiprintf_r+0x1a6>
 80085e2:	b1b0      	cbz	r0, 8008612 <_vfiprintf_r+0x13a>
 80085e4:	9207      	str	r2, [sp, #28]
 80085e6:	e014      	b.n	8008612 <_vfiprintf_r+0x13a>
 80085e8:	eba0 0308 	sub.w	r3, r0, r8
 80085ec:	fa09 f303 	lsl.w	r3, r9, r3
 80085f0:	4313      	orrs	r3, r2
 80085f2:	9304      	str	r3, [sp, #16]
 80085f4:	46a2      	mov	sl, r4
 80085f6:	e7d2      	b.n	800859e <_vfiprintf_r+0xc6>
 80085f8:	9b03      	ldr	r3, [sp, #12]
 80085fa:	1d19      	adds	r1, r3, #4
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	9103      	str	r1, [sp, #12]
 8008600:	2b00      	cmp	r3, #0
 8008602:	bfbb      	ittet	lt
 8008604:	425b      	neglt	r3, r3
 8008606:	f042 0202 	orrlt.w	r2, r2, #2
 800860a:	9307      	strge	r3, [sp, #28]
 800860c:	9307      	strlt	r3, [sp, #28]
 800860e:	bfb8      	it	lt
 8008610:	9204      	strlt	r2, [sp, #16]
 8008612:	7823      	ldrb	r3, [r4, #0]
 8008614:	2b2e      	cmp	r3, #46	; 0x2e
 8008616:	d10c      	bne.n	8008632 <_vfiprintf_r+0x15a>
 8008618:	7863      	ldrb	r3, [r4, #1]
 800861a:	2b2a      	cmp	r3, #42	; 0x2a
 800861c:	d134      	bne.n	8008688 <_vfiprintf_r+0x1b0>
 800861e:	9b03      	ldr	r3, [sp, #12]
 8008620:	1d1a      	adds	r2, r3, #4
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	9203      	str	r2, [sp, #12]
 8008626:	2b00      	cmp	r3, #0
 8008628:	bfb8      	it	lt
 800862a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800862e:	3402      	adds	r4, #2
 8008630:	9305      	str	r3, [sp, #20]
 8008632:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008708 <_vfiprintf_r+0x230>
 8008636:	7821      	ldrb	r1, [r4, #0]
 8008638:	2203      	movs	r2, #3
 800863a:	4650      	mov	r0, sl
 800863c:	f7f7 fdc8 	bl	80001d0 <memchr>
 8008640:	b138      	cbz	r0, 8008652 <_vfiprintf_r+0x17a>
 8008642:	9b04      	ldr	r3, [sp, #16]
 8008644:	eba0 000a 	sub.w	r0, r0, sl
 8008648:	2240      	movs	r2, #64	; 0x40
 800864a:	4082      	lsls	r2, r0
 800864c:	4313      	orrs	r3, r2
 800864e:	3401      	adds	r4, #1
 8008650:	9304      	str	r3, [sp, #16]
 8008652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008656:	4829      	ldr	r0, [pc, #164]	; (80086fc <_vfiprintf_r+0x224>)
 8008658:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800865c:	2206      	movs	r2, #6
 800865e:	f7f7 fdb7 	bl	80001d0 <memchr>
 8008662:	2800      	cmp	r0, #0
 8008664:	d03f      	beq.n	80086e6 <_vfiprintf_r+0x20e>
 8008666:	4b26      	ldr	r3, [pc, #152]	; (8008700 <_vfiprintf_r+0x228>)
 8008668:	bb1b      	cbnz	r3, 80086b2 <_vfiprintf_r+0x1da>
 800866a:	9b03      	ldr	r3, [sp, #12]
 800866c:	3307      	adds	r3, #7
 800866e:	f023 0307 	bic.w	r3, r3, #7
 8008672:	3308      	adds	r3, #8
 8008674:	9303      	str	r3, [sp, #12]
 8008676:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008678:	443b      	add	r3, r7
 800867a:	9309      	str	r3, [sp, #36]	; 0x24
 800867c:	e768      	b.n	8008550 <_vfiprintf_r+0x78>
 800867e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008682:	460c      	mov	r4, r1
 8008684:	2001      	movs	r0, #1
 8008686:	e7a6      	b.n	80085d6 <_vfiprintf_r+0xfe>
 8008688:	2300      	movs	r3, #0
 800868a:	3401      	adds	r4, #1
 800868c:	9305      	str	r3, [sp, #20]
 800868e:	4619      	mov	r1, r3
 8008690:	f04f 0c0a 	mov.w	ip, #10
 8008694:	4620      	mov	r0, r4
 8008696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800869a:	3a30      	subs	r2, #48	; 0x30
 800869c:	2a09      	cmp	r2, #9
 800869e:	d903      	bls.n	80086a8 <_vfiprintf_r+0x1d0>
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d0c6      	beq.n	8008632 <_vfiprintf_r+0x15a>
 80086a4:	9105      	str	r1, [sp, #20]
 80086a6:	e7c4      	b.n	8008632 <_vfiprintf_r+0x15a>
 80086a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80086ac:	4604      	mov	r4, r0
 80086ae:	2301      	movs	r3, #1
 80086b0:	e7f0      	b.n	8008694 <_vfiprintf_r+0x1bc>
 80086b2:	ab03      	add	r3, sp, #12
 80086b4:	9300      	str	r3, [sp, #0]
 80086b6:	462a      	mov	r2, r5
 80086b8:	4b12      	ldr	r3, [pc, #72]	; (8008704 <_vfiprintf_r+0x22c>)
 80086ba:	a904      	add	r1, sp, #16
 80086bc:	4630      	mov	r0, r6
 80086be:	f3af 8000 	nop.w
 80086c2:	4607      	mov	r7, r0
 80086c4:	1c78      	adds	r0, r7, #1
 80086c6:	d1d6      	bne.n	8008676 <_vfiprintf_r+0x19e>
 80086c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80086ca:	07d9      	lsls	r1, r3, #31
 80086cc:	d405      	bmi.n	80086da <_vfiprintf_r+0x202>
 80086ce:	89ab      	ldrh	r3, [r5, #12]
 80086d0:	059a      	lsls	r2, r3, #22
 80086d2:	d402      	bmi.n	80086da <_vfiprintf_r+0x202>
 80086d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80086d6:	f7ff fe5b 	bl	8008390 <__retarget_lock_release_recursive>
 80086da:	89ab      	ldrh	r3, [r5, #12]
 80086dc:	065b      	lsls	r3, r3, #25
 80086de:	f53f af1d 	bmi.w	800851c <_vfiprintf_r+0x44>
 80086e2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086e4:	e71c      	b.n	8008520 <_vfiprintf_r+0x48>
 80086e6:	ab03      	add	r3, sp, #12
 80086e8:	9300      	str	r3, [sp, #0]
 80086ea:	462a      	mov	r2, r5
 80086ec:	4b05      	ldr	r3, [pc, #20]	; (8008704 <_vfiprintf_r+0x22c>)
 80086ee:	a904      	add	r1, sp, #16
 80086f0:	4630      	mov	r0, r6
 80086f2:	f000 f921 	bl	8008938 <_printf_i>
 80086f6:	e7e4      	b.n	80086c2 <_vfiprintf_r+0x1ea>
 80086f8:	080094a3 	.word	0x080094a3
 80086fc:	080094ad 	.word	0x080094ad
 8008700:	00000000 	.word	0x00000000
 8008704:	080084b3 	.word	0x080084b3
 8008708:	080094a9 	.word	0x080094a9

0800870c <malloc>:
 800870c:	4b02      	ldr	r3, [pc, #8]	; (8008718 <malloc+0xc>)
 800870e:	4601      	mov	r1, r0
 8008710:	6818      	ldr	r0, [r3, #0]
 8008712:	f000 b823 	b.w	800875c <_malloc_r>
 8008716:	bf00      	nop
 8008718:	2000006c 	.word	0x2000006c

0800871c <sbrk_aligned>:
 800871c:	b570      	push	{r4, r5, r6, lr}
 800871e:	4e0e      	ldr	r6, [pc, #56]	; (8008758 <sbrk_aligned+0x3c>)
 8008720:	460c      	mov	r4, r1
 8008722:	6831      	ldr	r1, [r6, #0]
 8008724:	4605      	mov	r5, r0
 8008726:	b911      	cbnz	r1, 800872e <sbrk_aligned+0x12>
 8008728:	f000 fc86 	bl	8009038 <_sbrk_r>
 800872c:	6030      	str	r0, [r6, #0]
 800872e:	4621      	mov	r1, r4
 8008730:	4628      	mov	r0, r5
 8008732:	f000 fc81 	bl	8009038 <_sbrk_r>
 8008736:	1c43      	adds	r3, r0, #1
 8008738:	d00a      	beq.n	8008750 <sbrk_aligned+0x34>
 800873a:	1cc4      	adds	r4, r0, #3
 800873c:	f024 0403 	bic.w	r4, r4, #3
 8008740:	42a0      	cmp	r0, r4
 8008742:	d007      	beq.n	8008754 <sbrk_aligned+0x38>
 8008744:	1a21      	subs	r1, r4, r0
 8008746:	4628      	mov	r0, r5
 8008748:	f000 fc76 	bl	8009038 <_sbrk_r>
 800874c:	3001      	adds	r0, #1
 800874e:	d101      	bne.n	8008754 <sbrk_aligned+0x38>
 8008750:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008754:	4620      	mov	r0, r4
 8008756:	bd70      	pop	{r4, r5, r6, pc}
 8008758:	20004bb8 	.word	0x20004bb8

0800875c <_malloc_r>:
 800875c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008760:	1ccd      	adds	r5, r1, #3
 8008762:	f025 0503 	bic.w	r5, r5, #3
 8008766:	3508      	adds	r5, #8
 8008768:	2d0c      	cmp	r5, #12
 800876a:	bf38      	it	cc
 800876c:	250c      	movcc	r5, #12
 800876e:	2d00      	cmp	r5, #0
 8008770:	4607      	mov	r7, r0
 8008772:	db01      	blt.n	8008778 <_malloc_r+0x1c>
 8008774:	42a9      	cmp	r1, r5
 8008776:	d905      	bls.n	8008784 <_malloc_r+0x28>
 8008778:	230c      	movs	r3, #12
 800877a:	603b      	str	r3, [r7, #0]
 800877c:	2600      	movs	r6, #0
 800877e:	4630      	mov	r0, r6
 8008780:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008784:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008858 <_malloc_r+0xfc>
 8008788:	f000 faa6 	bl	8008cd8 <__malloc_lock>
 800878c:	f8d8 3000 	ldr.w	r3, [r8]
 8008790:	461c      	mov	r4, r3
 8008792:	bb5c      	cbnz	r4, 80087ec <_malloc_r+0x90>
 8008794:	4629      	mov	r1, r5
 8008796:	4638      	mov	r0, r7
 8008798:	f7ff ffc0 	bl	800871c <sbrk_aligned>
 800879c:	1c43      	adds	r3, r0, #1
 800879e:	4604      	mov	r4, r0
 80087a0:	d155      	bne.n	800884e <_malloc_r+0xf2>
 80087a2:	f8d8 4000 	ldr.w	r4, [r8]
 80087a6:	4626      	mov	r6, r4
 80087a8:	2e00      	cmp	r6, #0
 80087aa:	d145      	bne.n	8008838 <_malloc_r+0xdc>
 80087ac:	2c00      	cmp	r4, #0
 80087ae:	d048      	beq.n	8008842 <_malloc_r+0xe6>
 80087b0:	6823      	ldr	r3, [r4, #0]
 80087b2:	4631      	mov	r1, r6
 80087b4:	4638      	mov	r0, r7
 80087b6:	eb04 0903 	add.w	r9, r4, r3
 80087ba:	f000 fc3d 	bl	8009038 <_sbrk_r>
 80087be:	4581      	cmp	r9, r0
 80087c0:	d13f      	bne.n	8008842 <_malloc_r+0xe6>
 80087c2:	6821      	ldr	r1, [r4, #0]
 80087c4:	1a6d      	subs	r5, r5, r1
 80087c6:	4629      	mov	r1, r5
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7ff ffa7 	bl	800871c <sbrk_aligned>
 80087ce:	3001      	adds	r0, #1
 80087d0:	d037      	beq.n	8008842 <_malloc_r+0xe6>
 80087d2:	6823      	ldr	r3, [r4, #0]
 80087d4:	442b      	add	r3, r5
 80087d6:	6023      	str	r3, [r4, #0]
 80087d8:	f8d8 3000 	ldr.w	r3, [r8]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d038      	beq.n	8008852 <_malloc_r+0xf6>
 80087e0:	685a      	ldr	r2, [r3, #4]
 80087e2:	42a2      	cmp	r2, r4
 80087e4:	d12b      	bne.n	800883e <_malloc_r+0xe2>
 80087e6:	2200      	movs	r2, #0
 80087e8:	605a      	str	r2, [r3, #4]
 80087ea:	e00f      	b.n	800880c <_malloc_r+0xb0>
 80087ec:	6822      	ldr	r2, [r4, #0]
 80087ee:	1b52      	subs	r2, r2, r5
 80087f0:	d41f      	bmi.n	8008832 <_malloc_r+0xd6>
 80087f2:	2a0b      	cmp	r2, #11
 80087f4:	d917      	bls.n	8008826 <_malloc_r+0xca>
 80087f6:	1961      	adds	r1, r4, r5
 80087f8:	42a3      	cmp	r3, r4
 80087fa:	6025      	str	r5, [r4, #0]
 80087fc:	bf18      	it	ne
 80087fe:	6059      	strne	r1, [r3, #4]
 8008800:	6863      	ldr	r3, [r4, #4]
 8008802:	bf08      	it	eq
 8008804:	f8c8 1000 	streq.w	r1, [r8]
 8008808:	5162      	str	r2, [r4, r5]
 800880a:	604b      	str	r3, [r1, #4]
 800880c:	4638      	mov	r0, r7
 800880e:	f104 060b 	add.w	r6, r4, #11
 8008812:	f000 fa67 	bl	8008ce4 <__malloc_unlock>
 8008816:	f026 0607 	bic.w	r6, r6, #7
 800881a:	1d23      	adds	r3, r4, #4
 800881c:	1af2      	subs	r2, r6, r3
 800881e:	d0ae      	beq.n	800877e <_malloc_r+0x22>
 8008820:	1b9b      	subs	r3, r3, r6
 8008822:	50a3      	str	r3, [r4, r2]
 8008824:	e7ab      	b.n	800877e <_malloc_r+0x22>
 8008826:	42a3      	cmp	r3, r4
 8008828:	6862      	ldr	r2, [r4, #4]
 800882a:	d1dd      	bne.n	80087e8 <_malloc_r+0x8c>
 800882c:	f8c8 2000 	str.w	r2, [r8]
 8008830:	e7ec      	b.n	800880c <_malloc_r+0xb0>
 8008832:	4623      	mov	r3, r4
 8008834:	6864      	ldr	r4, [r4, #4]
 8008836:	e7ac      	b.n	8008792 <_malloc_r+0x36>
 8008838:	4634      	mov	r4, r6
 800883a:	6876      	ldr	r6, [r6, #4]
 800883c:	e7b4      	b.n	80087a8 <_malloc_r+0x4c>
 800883e:	4613      	mov	r3, r2
 8008840:	e7cc      	b.n	80087dc <_malloc_r+0x80>
 8008842:	230c      	movs	r3, #12
 8008844:	603b      	str	r3, [r7, #0]
 8008846:	4638      	mov	r0, r7
 8008848:	f000 fa4c 	bl	8008ce4 <__malloc_unlock>
 800884c:	e797      	b.n	800877e <_malloc_r+0x22>
 800884e:	6025      	str	r5, [r4, #0]
 8008850:	e7dc      	b.n	800880c <_malloc_r+0xb0>
 8008852:	605b      	str	r3, [r3, #4]
 8008854:	deff      	udf	#255	; 0xff
 8008856:	bf00      	nop
 8008858:	20004bb4 	.word	0x20004bb4

0800885c <_printf_common>:
 800885c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008860:	4616      	mov	r6, r2
 8008862:	4699      	mov	r9, r3
 8008864:	688a      	ldr	r2, [r1, #8]
 8008866:	690b      	ldr	r3, [r1, #16]
 8008868:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800886c:	4293      	cmp	r3, r2
 800886e:	bfb8      	it	lt
 8008870:	4613      	movlt	r3, r2
 8008872:	6033      	str	r3, [r6, #0]
 8008874:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008878:	4607      	mov	r7, r0
 800887a:	460c      	mov	r4, r1
 800887c:	b10a      	cbz	r2, 8008882 <_printf_common+0x26>
 800887e:	3301      	adds	r3, #1
 8008880:	6033      	str	r3, [r6, #0]
 8008882:	6823      	ldr	r3, [r4, #0]
 8008884:	0699      	lsls	r1, r3, #26
 8008886:	bf42      	ittt	mi
 8008888:	6833      	ldrmi	r3, [r6, #0]
 800888a:	3302      	addmi	r3, #2
 800888c:	6033      	strmi	r3, [r6, #0]
 800888e:	6825      	ldr	r5, [r4, #0]
 8008890:	f015 0506 	ands.w	r5, r5, #6
 8008894:	d106      	bne.n	80088a4 <_printf_common+0x48>
 8008896:	f104 0a19 	add.w	sl, r4, #25
 800889a:	68e3      	ldr	r3, [r4, #12]
 800889c:	6832      	ldr	r2, [r6, #0]
 800889e:	1a9b      	subs	r3, r3, r2
 80088a0:	42ab      	cmp	r3, r5
 80088a2:	dc26      	bgt.n	80088f2 <_printf_common+0x96>
 80088a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80088a8:	1e13      	subs	r3, r2, #0
 80088aa:	6822      	ldr	r2, [r4, #0]
 80088ac:	bf18      	it	ne
 80088ae:	2301      	movne	r3, #1
 80088b0:	0692      	lsls	r2, r2, #26
 80088b2:	d42b      	bmi.n	800890c <_printf_common+0xb0>
 80088b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80088b8:	4649      	mov	r1, r9
 80088ba:	4638      	mov	r0, r7
 80088bc:	47c0      	blx	r8
 80088be:	3001      	adds	r0, #1
 80088c0:	d01e      	beq.n	8008900 <_printf_common+0xa4>
 80088c2:	6823      	ldr	r3, [r4, #0]
 80088c4:	6922      	ldr	r2, [r4, #16]
 80088c6:	f003 0306 	and.w	r3, r3, #6
 80088ca:	2b04      	cmp	r3, #4
 80088cc:	bf02      	ittt	eq
 80088ce:	68e5      	ldreq	r5, [r4, #12]
 80088d0:	6833      	ldreq	r3, [r6, #0]
 80088d2:	1aed      	subeq	r5, r5, r3
 80088d4:	68a3      	ldr	r3, [r4, #8]
 80088d6:	bf0c      	ite	eq
 80088d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80088dc:	2500      	movne	r5, #0
 80088de:	4293      	cmp	r3, r2
 80088e0:	bfc4      	itt	gt
 80088e2:	1a9b      	subgt	r3, r3, r2
 80088e4:	18ed      	addgt	r5, r5, r3
 80088e6:	2600      	movs	r6, #0
 80088e8:	341a      	adds	r4, #26
 80088ea:	42b5      	cmp	r5, r6
 80088ec:	d11a      	bne.n	8008924 <_printf_common+0xc8>
 80088ee:	2000      	movs	r0, #0
 80088f0:	e008      	b.n	8008904 <_printf_common+0xa8>
 80088f2:	2301      	movs	r3, #1
 80088f4:	4652      	mov	r2, sl
 80088f6:	4649      	mov	r1, r9
 80088f8:	4638      	mov	r0, r7
 80088fa:	47c0      	blx	r8
 80088fc:	3001      	adds	r0, #1
 80088fe:	d103      	bne.n	8008908 <_printf_common+0xac>
 8008900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008908:	3501      	adds	r5, #1
 800890a:	e7c6      	b.n	800889a <_printf_common+0x3e>
 800890c:	18e1      	adds	r1, r4, r3
 800890e:	1c5a      	adds	r2, r3, #1
 8008910:	2030      	movs	r0, #48	; 0x30
 8008912:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008916:	4422      	add	r2, r4
 8008918:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800891c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008920:	3302      	adds	r3, #2
 8008922:	e7c7      	b.n	80088b4 <_printf_common+0x58>
 8008924:	2301      	movs	r3, #1
 8008926:	4622      	mov	r2, r4
 8008928:	4649      	mov	r1, r9
 800892a:	4638      	mov	r0, r7
 800892c:	47c0      	blx	r8
 800892e:	3001      	adds	r0, #1
 8008930:	d0e6      	beq.n	8008900 <_printf_common+0xa4>
 8008932:	3601      	adds	r6, #1
 8008934:	e7d9      	b.n	80088ea <_printf_common+0x8e>
	...

08008938 <_printf_i>:
 8008938:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800893c:	7e0f      	ldrb	r7, [r1, #24]
 800893e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008940:	2f78      	cmp	r7, #120	; 0x78
 8008942:	4691      	mov	r9, r2
 8008944:	4680      	mov	r8, r0
 8008946:	460c      	mov	r4, r1
 8008948:	469a      	mov	sl, r3
 800894a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800894e:	d807      	bhi.n	8008960 <_printf_i+0x28>
 8008950:	2f62      	cmp	r7, #98	; 0x62
 8008952:	d80a      	bhi.n	800896a <_printf_i+0x32>
 8008954:	2f00      	cmp	r7, #0
 8008956:	f000 80d4 	beq.w	8008b02 <_printf_i+0x1ca>
 800895a:	2f58      	cmp	r7, #88	; 0x58
 800895c:	f000 80c0 	beq.w	8008ae0 <_printf_i+0x1a8>
 8008960:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008964:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008968:	e03a      	b.n	80089e0 <_printf_i+0xa8>
 800896a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800896e:	2b15      	cmp	r3, #21
 8008970:	d8f6      	bhi.n	8008960 <_printf_i+0x28>
 8008972:	a101      	add	r1, pc, #4	; (adr r1, 8008978 <_printf_i+0x40>)
 8008974:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008978:	080089d1 	.word	0x080089d1
 800897c:	080089e5 	.word	0x080089e5
 8008980:	08008961 	.word	0x08008961
 8008984:	08008961 	.word	0x08008961
 8008988:	08008961 	.word	0x08008961
 800898c:	08008961 	.word	0x08008961
 8008990:	080089e5 	.word	0x080089e5
 8008994:	08008961 	.word	0x08008961
 8008998:	08008961 	.word	0x08008961
 800899c:	08008961 	.word	0x08008961
 80089a0:	08008961 	.word	0x08008961
 80089a4:	08008ae9 	.word	0x08008ae9
 80089a8:	08008a11 	.word	0x08008a11
 80089ac:	08008aa3 	.word	0x08008aa3
 80089b0:	08008961 	.word	0x08008961
 80089b4:	08008961 	.word	0x08008961
 80089b8:	08008b0b 	.word	0x08008b0b
 80089bc:	08008961 	.word	0x08008961
 80089c0:	08008a11 	.word	0x08008a11
 80089c4:	08008961 	.word	0x08008961
 80089c8:	08008961 	.word	0x08008961
 80089cc:	08008aab 	.word	0x08008aab
 80089d0:	682b      	ldr	r3, [r5, #0]
 80089d2:	1d1a      	adds	r2, r3, #4
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	602a      	str	r2, [r5, #0]
 80089d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80089e0:	2301      	movs	r3, #1
 80089e2:	e09f      	b.n	8008b24 <_printf_i+0x1ec>
 80089e4:	6820      	ldr	r0, [r4, #0]
 80089e6:	682b      	ldr	r3, [r5, #0]
 80089e8:	0607      	lsls	r7, r0, #24
 80089ea:	f103 0104 	add.w	r1, r3, #4
 80089ee:	6029      	str	r1, [r5, #0]
 80089f0:	d501      	bpl.n	80089f6 <_printf_i+0xbe>
 80089f2:	681e      	ldr	r6, [r3, #0]
 80089f4:	e003      	b.n	80089fe <_printf_i+0xc6>
 80089f6:	0646      	lsls	r6, r0, #25
 80089f8:	d5fb      	bpl.n	80089f2 <_printf_i+0xba>
 80089fa:	f9b3 6000 	ldrsh.w	r6, [r3]
 80089fe:	2e00      	cmp	r6, #0
 8008a00:	da03      	bge.n	8008a0a <_printf_i+0xd2>
 8008a02:	232d      	movs	r3, #45	; 0x2d
 8008a04:	4276      	negs	r6, r6
 8008a06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a0a:	485a      	ldr	r0, [pc, #360]	; (8008b74 <_printf_i+0x23c>)
 8008a0c:	230a      	movs	r3, #10
 8008a0e:	e012      	b.n	8008a36 <_printf_i+0xfe>
 8008a10:	682b      	ldr	r3, [r5, #0]
 8008a12:	6820      	ldr	r0, [r4, #0]
 8008a14:	1d19      	adds	r1, r3, #4
 8008a16:	6029      	str	r1, [r5, #0]
 8008a18:	0605      	lsls	r5, r0, #24
 8008a1a:	d501      	bpl.n	8008a20 <_printf_i+0xe8>
 8008a1c:	681e      	ldr	r6, [r3, #0]
 8008a1e:	e002      	b.n	8008a26 <_printf_i+0xee>
 8008a20:	0641      	lsls	r1, r0, #25
 8008a22:	d5fb      	bpl.n	8008a1c <_printf_i+0xe4>
 8008a24:	881e      	ldrh	r6, [r3, #0]
 8008a26:	4853      	ldr	r0, [pc, #332]	; (8008b74 <_printf_i+0x23c>)
 8008a28:	2f6f      	cmp	r7, #111	; 0x6f
 8008a2a:	bf0c      	ite	eq
 8008a2c:	2308      	moveq	r3, #8
 8008a2e:	230a      	movne	r3, #10
 8008a30:	2100      	movs	r1, #0
 8008a32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008a36:	6865      	ldr	r5, [r4, #4]
 8008a38:	60a5      	str	r5, [r4, #8]
 8008a3a:	2d00      	cmp	r5, #0
 8008a3c:	bfa2      	ittt	ge
 8008a3e:	6821      	ldrge	r1, [r4, #0]
 8008a40:	f021 0104 	bicge.w	r1, r1, #4
 8008a44:	6021      	strge	r1, [r4, #0]
 8008a46:	b90e      	cbnz	r6, 8008a4c <_printf_i+0x114>
 8008a48:	2d00      	cmp	r5, #0
 8008a4a:	d04b      	beq.n	8008ae4 <_printf_i+0x1ac>
 8008a4c:	4615      	mov	r5, r2
 8008a4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008a52:	fb03 6711 	mls	r7, r3, r1, r6
 8008a56:	5dc7      	ldrb	r7, [r0, r7]
 8008a58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008a5c:	4637      	mov	r7, r6
 8008a5e:	42bb      	cmp	r3, r7
 8008a60:	460e      	mov	r6, r1
 8008a62:	d9f4      	bls.n	8008a4e <_printf_i+0x116>
 8008a64:	2b08      	cmp	r3, #8
 8008a66:	d10b      	bne.n	8008a80 <_printf_i+0x148>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	07de      	lsls	r6, r3, #31
 8008a6c:	d508      	bpl.n	8008a80 <_printf_i+0x148>
 8008a6e:	6923      	ldr	r3, [r4, #16]
 8008a70:	6861      	ldr	r1, [r4, #4]
 8008a72:	4299      	cmp	r1, r3
 8008a74:	bfde      	ittt	le
 8008a76:	2330      	movle	r3, #48	; 0x30
 8008a78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a7c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008a80:	1b52      	subs	r2, r2, r5
 8008a82:	6122      	str	r2, [r4, #16]
 8008a84:	f8cd a000 	str.w	sl, [sp]
 8008a88:	464b      	mov	r3, r9
 8008a8a:	aa03      	add	r2, sp, #12
 8008a8c:	4621      	mov	r1, r4
 8008a8e:	4640      	mov	r0, r8
 8008a90:	f7ff fee4 	bl	800885c <_printf_common>
 8008a94:	3001      	adds	r0, #1
 8008a96:	d14a      	bne.n	8008b2e <_printf_i+0x1f6>
 8008a98:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a9c:	b004      	add	sp, #16
 8008a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	f043 0320 	orr.w	r3, r3, #32
 8008aa8:	6023      	str	r3, [r4, #0]
 8008aaa:	4833      	ldr	r0, [pc, #204]	; (8008b78 <_printf_i+0x240>)
 8008aac:	2778      	movs	r7, #120	; 0x78
 8008aae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008ab2:	6823      	ldr	r3, [r4, #0]
 8008ab4:	6829      	ldr	r1, [r5, #0]
 8008ab6:	061f      	lsls	r7, r3, #24
 8008ab8:	f851 6b04 	ldr.w	r6, [r1], #4
 8008abc:	d402      	bmi.n	8008ac4 <_printf_i+0x18c>
 8008abe:	065f      	lsls	r7, r3, #25
 8008ac0:	bf48      	it	mi
 8008ac2:	b2b6      	uxthmi	r6, r6
 8008ac4:	07df      	lsls	r7, r3, #31
 8008ac6:	bf48      	it	mi
 8008ac8:	f043 0320 	orrmi.w	r3, r3, #32
 8008acc:	6029      	str	r1, [r5, #0]
 8008ace:	bf48      	it	mi
 8008ad0:	6023      	strmi	r3, [r4, #0]
 8008ad2:	b91e      	cbnz	r6, 8008adc <_printf_i+0x1a4>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	f023 0320 	bic.w	r3, r3, #32
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	2310      	movs	r3, #16
 8008ade:	e7a7      	b.n	8008a30 <_printf_i+0xf8>
 8008ae0:	4824      	ldr	r0, [pc, #144]	; (8008b74 <_printf_i+0x23c>)
 8008ae2:	e7e4      	b.n	8008aae <_printf_i+0x176>
 8008ae4:	4615      	mov	r5, r2
 8008ae6:	e7bd      	b.n	8008a64 <_printf_i+0x12c>
 8008ae8:	682b      	ldr	r3, [r5, #0]
 8008aea:	6826      	ldr	r6, [r4, #0]
 8008aec:	6961      	ldr	r1, [r4, #20]
 8008aee:	1d18      	adds	r0, r3, #4
 8008af0:	6028      	str	r0, [r5, #0]
 8008af2:	0635      	lsls	r5, r6, #24
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	d501      	bpl.n	8008afc <_printf_i+0x1c4>
 8008af8:	6019      	str	r1, [r3, #0]
 8008afa:	e002      	b.n	8008b02 <_printf_i+0x1ca>
 8008afc:	0670      	lsls	r0, r6, #25
 8008afe:	d5fb      	bpl.n	8008af8 <_printf_i+0x1c0>
 8008b00:	8019      	strh	r1, [r3, #0]
 8008b02:	2300      	movs	r3, #0
 8008b04:	6123      	str	r3, [r4, #16]
 8008b06:	4615      	mov	r5, r2
 8008b08:	e7bc      	b.n	8008a84 <_printf_i+0x14c>
 8008b0a:	682b      	ldr	r3, [r5, #0]
 8008b0c:	1d1a      	adds	r2, r3, #4
 8008b0e:	602a      	str	r2, [r5, #0]
 8008b10:	681d      	ldr	r5, [r3, #0]
 8008b12:	6862      	ldr	r2, [r4, #4]
 8008b14:	2100      	movs	r1, #0
 8008b16:	4628      	mov	r0, r5
 8008b18:	f7f7 fb5a 	bl	80001d0 <memchr>
 8008b1c:	b108      	cbz	r0, 8008b22 <_printf_i+0x1ea>
 8008b1e:	1b40      	subs	r0, r0, r5
 8008b20:	6060      	str	r0, [r4, #4]
 8008b22:	6863      	ldr	r3, [r4, #4]
 8008b24:	6123      	str	r3, [r4, #16]
 8008b26:	2300      	movs	r3, #0
 8008b28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008b2c:	e7aa      	b.n	8008a84 <_printf_i+0x14c>
 8008b2e:	6923      	ldr	r3, [r4, #16]
 8008b30:	462a      	mov	r2, r5
 8008b32:	4649      	mov	r1, r9
 8008b34:	4640      	mov	r0, r8
 8008b36:	47d0      	blx	sl
 8008b38:	3001      	adds	r0, #1
 8008b3a:	d0ad      	beq.n	8008a98 <_printf_i+0x160>
 8008b3c:	6823      	ldr	r3, [r4, #0]
 8008b3e:	079b      	lsls	r3, r3, #30
 8008b40:	d413      	bmi.n	8008b6a <_printf_i+0x232>
 8008b42:	68e0      	ldr	r0, [r4, #12]
 8008b44:	9b03      	ldr	r3, [sp, #12]
 8008b46:	4298      	cmp	r0, r3
 8008b48:	bfb8      	it	lt
 8008b4a:	4618      	movlt	r0, r3
 8008b4c:	e7a6      	b.n	8008a9c <_printf_i+0x164>
 8008b4e:	2301      	movs	r3, #1
 8008b50:	4632      	mov	r2, r6
 8008b52:	4649      	mov	r1, r9
 8008b54:	4640      	mov	r0, r8
 8008b56:	47d0      	blx	sl
 8008b58:	3001      	adds	r0, #1
 8008b5a:	d09d      	beq.n	8008a98 <_printf_i+0x160>
 8008b5c:	3501      	adds	r5, #1
 8008b5e:	68e3      	ldr	r3, [r4, #12]
 8008b60:	9903      	ldr	r1, [sp, #12]
 8008b62:	1a5b      	subs	r3, r3, r1
 8008b64:	42ab      	cmp	r3, r5
 8008b66:	dcf2      	bgt.n	8008b4e <_printf_i+0x216>
 8008b68:	e7eb      	b.n	8008b42 <_printf_i+0x20a>
 8008b6a:	2500      	movs	r5, #0
 8008b6c:	f104 0619 	add.w	r6, r4, #25
 8008b70:	e7f5      	b.n	8008b5e <_printf_i+0x226>
 8008b72:	bf00      	nop
 8008b74:	080094b4 	.word	0x080094b4
 8008b78:	080094c5 	.word	0x080094c5

08008b7c <__sflush_r>:
 8008b7c:	898a      	ldrh	r2, [r1, #12]
 8008b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b82:	4605      	mov	r5, r0
 8008b84:	0710      	lsls	r0, r2, #28
 8008b86:	460c      	mov	r4, r1
 8008b88:	d458      	bmi.n	8008c3c <__sflush_r+0xc0>
 8008b8a:	684b      	ldr	r3, [r1, #4]
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	dc05      	bgt.n	8008b9c <__sflush_r+0x20>
 8008b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	dc02      	bgt.n	8008b9c <__sflush_r+0x20>
 8008b96:	2000      	movs	r0, #0
 8008b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b9e:	2e00      	cmp	r6, #0
 8008ba0:	d0f9      	beq.n	8008b96 <__sflush_r+0x1a>
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ba8:	682f      	ldr	r7, [r5, #0]
 8008baa:	6a21      	ldr	r1, [r4, #32]
 8008bac:	602b      	str	r3, [r5, #0]
 8008bae:	d032      	beq.n	8008c16 <__sflush_r+0x9a>
 8008bb0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bb2:	89a3      	ldrh	r3, [r4, #12]
 8008bb4:	075a      	lsls	r2, r3, #29
 8008bb6:	d505      	bpl.n	8008bc4 <__sflush_r+0x48>
 8008bb8:	6863      	ldr	r3, [r4, #4]
 8008bba:	1ac0      	subs	r0, r0, r3
 8008bbc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008bbe:	b10b      	cbz	r3, 8008bc4 <__sflush_r+0x48>
 8008bc0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008bc2:	1ac0      	subs	r0, r0, r3
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	4602      	mov	r2, r0
 8008bc8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bca:	6a21      	ldr	r1, [r4, #32]
 8008bcc:	4628      	mov	r0, r5
 8008bce:	47b0      	blx	r6
 8008bd0:	1c43      	adds	r3, r0, #1
 8008bd2:	89a3      	ldrh	r3, [r4, #12]
 8008bd4:	d106      	bne.n	8008be4 <__sflush_r+0x68>
 8008bd6:	6829      	ldr	r1, [r5, #0]
 8008bd8:	291d      	cmp	r1, #29
 8008bda:	d82b      	bhi.n	8008c34 <__sflush_r+0xb8>
 8008bdc:	4a29      	ldr	r2, [pc, #164]	; (8008c84 <__sflush_r+0x108>)
 8008bde:	410a      	asrs	r2, r1
 8008be0:	07d6      	lsls	r6, r2, #31
 8008be2:	d427      	bmi.n	8008c34 <__sflush_r+0xb8>
 8008be4:	2200      	movs	r2, #0
 8008be6:	6062      	str	r2, [r4, #4]
 8008be8:	04d9      	lsls	r1, r3, #19
 8008bea:	6922      	ldr	r2, [r4, #16]
 8008bec:	6022      	str	r2, [r4, #0]
 8008bee:	d504      	bpl.n	8008bfa <__sflush_r+0x7e>
 8008bf0:	1c42      	adds	r2, r0, #1
 8008bf2:	d101      	bne.n	8008bf8 <__sflush_r+0x7c>
 8008bf4:	682b      	ldr	r3, [r5, #0]
 8008bf6:	b903      	cbnz	r3, 8008bfa <__sflush_r+0x7e>
 8008bf8:	6560      	str	r0, [r4, #84]	; 0x54
 8008bfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008bfc:	602f      	str	r7, [r5, #0]
 8008bfe:	2900      	cmp	r1, #0
 8008c00:	d0c9      	beq.n	8008b96 <__sflush_r+0x1a>
 8008c02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c06:	4299      	cmp	r1, r3
 8008c08:	d002      	beq.n	8008c10 <__sflush_r+0x94>
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	f7ff fbee 	bl	80083ec <_free_r>
 8008c10:	2000      	movs	r0, #0
 8008c12:	6360      	str	r0, [r4, #52]	; 0x34
 8008c14:	e7c0      	b.n	8008b98 <__sflush_r+0x1c>
 8008c16:	2301      	movs	r3, #1
 8008c18:	4628      	mov	r0, r5
 8008c1a:	47b0      	blx	r6
 8008c1c:	1c41      	adds	r1, r0, #1
 8008c1e:	d1c8      	bne.n	8008bb2 <__sflush_r+0x36>
 8008c20:	682b      	ldr	r3, [r5, #0]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d0c5      	beq.n	8008bb2 <__sflush_r+0x36>
 8008c26:	2b1d      	cmp	r3, #29
 8008c28:	d001      	beq.n	8008c2e <__sflush_r+0xb2>
 8008c2a:	2b16      	cmp	r3, #22
 8008c2c:	d101      	bne.n	8008c32 <__sflush_r+0xb6>
 8008c2e:	602f      	str	r7, [r5, #0]
 8008c30:	e7b1      	b.n	8008b96 <__sflush_r+0x1a>
 8008c32:	89a3      	ldrh	r3, [r4, #12]
 8008c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c38:	81a3      	strh	r3, [r4, #12]
 8008c3a:	e7ad      	b.n	8008b98 <__sflush_r+0x1c>
 8008c3c:	690f      	ldr	r7, [r1, #16]
 8008c3e:	2f00      	cmp	r7, #0
 8008c40:	d0a9      	beq.n	8008b96 <__sflush_r+0x1a>
 8008c42:	0793      	lsls	r3, r2, #30
 8008c44:	680e      	ldr	r6, [r1, #0]
 8008c46:	bf08      	it	eq
 8008c48:	694b      	ldreq	r3, [r1, #20]
 8008c4a:	600f      	str	r7, [r1, #0]
 8008c4c:	bf18      	it	ne
 8008c4e:	2300      	movne	r3, #0
 8008c50:	eba6 0807 	sub.w	r8, r6, r7
 8008c54:	608b      	str	r3, [r1, #8]
 8008c56:	f1b8 0f00 	cmp.w	r8, #0
 8008c5a:	dd9c      	ble.n	8008b96 <__sflush_r+0x1a>
 8008c5c:	6a21      	ldr	r1, [r4, #32]
 8008c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c60:	4643      	mov	r3, r8
 8008c62:	463a      	mov	r2, r7
 8008c64:	4628      	mov	r0, r5
 8008c66:	47b0      	blx	r6
 8008c68:	2800      	cmp	r0, #0
 8008c6a:	dc06      	bgt.n	8008c7a <__sflush_r+0xfe>
 8008c6c:	89a3      	ldrh	r3, [r4, #12]
 8008c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c72:	81a3      	strh	r3, [r4, #12]
 8008c74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008c78:	e78e      	b.n	8008b98 <__sflush_r+0x1c>
 8008c7a:	4407      	add	r7, r0
 8008c7c:	eba8 0800 	sub.w	r8, r8, r0
 8008c80:	e7e9      	b.n	8008c56 <__sflush_r+0xda>
 8008c82:	bf00      	nop
 8008c84:	dfbffffe 	.word	0xdfbffffe

08008c88 <_fflush_r>:
 8008c88:	b538      	push	{r3, r4, r5, lr}
 8008c8a:	690b      	ldr	r3, [r1, #16]
 8008c8c:	4605      	mov	r5, r0
 8008c8e:	460c      	mov	r4, r1
 8008c90:	b913      	cbnz	r3, 8008c98 <_fflush_r+0x10>
 8008c92:	2500      	movs	r5, #0
 8008c94:	4628      	mov	r0, r5
 8008c96:	bd38      	pop	{r3, r4, r5, pc}
 8008c98:	b118      	cbz	r0, 8008ca2 <_fflush_r+0x1a>
 8008c9a:	6a03      	ldr	r3, [r0, #32]
 8008c9c:	b90b      	cbnz	r3, 8008ca2 <_fflush_r+0x1a>
 8008c9e:	f7ff faa5 	bl	80081ec <__sinit>
 8008ca2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d0f3      	beq.n	8008c92 <_fflush_r+0xa>
 8008caa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cac:	07d0      	lsls	r0, r2, #31
 8008cae:	d404      	bmi.n	8008cba <_fflush_r+0x32>
 8008cb0:	0599      	lsls	r1, r3, #22
 8008cb2:	d402      	bmi.n	8008cba <_fflush_r+0x32>
 8008cb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cb6:	f7ff fb6a 	bl	800838e <__retarget_lock_acquire_recursive>
 8008cba:	4628      	mov	r0, r5
 8008cbc:	4621      	mov	r1, r4
 8008cbe:	f7ff ff5d 	bl	8008b7c <__sflush_r>
 8008cc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cc4:	07da      	lsls	r2, r3, #31
 8008cc6:	4605      	mov	r5, r0
 8008cc8:	d4e4      	bmi.n	8008c94 <_fflush_r+0xc>
 8008cca:	89a3      	ldrh	r3, [r4, #12]
 8008ccc:	059b      	lsls	r3, r3, #22
 8008cce:	d4e1      	bmi.n	8008c94 <_fflush_r+0xc>
 8008cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cd2:	f7ff fb5d 	bl	8008390 <__retarget_lock_release_recursive>
 8008cd6:	e7dd      	b.n	8008c94 <_fflush_r+0xc>

08008cd8 <__malloc_lock>:
 8008cd8:	4801      	ldr	r0, [pc, #4]	; (8008ce0 <__malloc_lock+0x8>)
 8008cda:	f7ff bb58 	b.w	800838e <__retarget_lock_acquire_recursive>
 8008cde:	bf00      	nop
 8008ce0:	20004bb0 	.word	0x20004bb0

08008ce4 <__malloc_unlock>:
 8008ce4:	4801      	ldr	r0, [pc, #4]	; (8008cec <__malloc_unlock+0x8>)
 8008ce6:	f7ff bb53 	b.w	8008390 <__retarget_lock_release_recursive>
 8008cea:	bf00      	nop
 8008cec:	20004bb0 	.word	0x20004bb0

08008cf0 <__sread>:
 8008cf0:	b510      	push	{r4, lr}
 8008cf2:	460c      	mov	r4, r1
 8008cf4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cf8:	f000 f98c 	bl	8009014 <_read_r>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	bfab      	itete	ge
 8008d00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008d02:	89a3      	ldrhlt	r3, [r4, #12]
 8008d04:	181b      	addge	r3, r3, r0
 8008d06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008d0a:	bfac      	ite	ge
 8008d0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008d0e:	81a3      	strhlt	r3, [r4, #12]
 8008d10:	bd10      	pop	{r4, pc}

08008d12 <__swrite>:
 8008d12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d16:	461f      	mov	r7, r3
 8008d18:	898b      	ldrh	r3, [r1, #12]
 8008d1a:	05db      	lsls	r3, r3, #23
 8008d1c:	4605      	mov	r5, r0
 8008d1e:	460c      	mov	r4, r1
 8008d20:	4616      	mov	r6, r2
 8008d22:	d505      	bpl.n	8008d30 <__swrite+0x1e>
 8008d24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d28:	2302      	movs	r3, #2
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f000 f960 	bl	8008ff0 <_lseek_r>
 8008d30:	89a3      	ldrh	r3, [r4, #12]
 8008d32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d3a:	81a3      	strh	r3, [r4, #12]
 8008d3c:	4632      	mov	r2, r6
 8008d3e:	463b      	mov	r3, r7
 8008d40:	4628      	mov	r0, r5
 8008d42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008d46:	f000 b987 	b.w	8009058 <_write_r>

08008d4a <__sseek>:
 8008d4a:	b510      	push	{r4, lr}
 8008d4c:	460c      	mov	r4, r1
 8008d4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d52:	f000 f94d 	bl	8008ff0 <_lseek_r>
 8008d56:	1c43      	adds	r3, r0, #1
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	bf15      	itete	ne
 8008d5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8008d5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008d62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008d66:	81a3      	strheq	r3, [r4, #12]
 8008d68:	bf18      	it	ne
 8008d6a:	81a3      	strhne	r3, [r4, #12]
 8008d6c:	bd10      	pop	{r4, pc}

08008d6e <__sclose>:
 8008d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d72:	f000 b90b 	b.w	8008f8c <_close_r>
	...

08008d78 <fiprintf>:
 8008d78:	b40e      	push	{r1, r2, r3}
 8008d7a:	b503      	push	{r0, r1, lr}
 8008d7c:	4601      	mov	r1, r0
 8008d7e:	ab03      	add	r3, sp, #12
 8008d80:	4805      	ldr	r0, [pc, #20]	; (8008d98 <fiprintf+0x20>)
 8008d82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d86:	6800      	ldr	r0, [r0, #0]
 8008d88:	9301      	str	r3, [sp, #4]
 8008d8a:	f7ff fba5 	bl	80084d8 <_vfiprintf_r>
 8008d8e:	b002      	add	sp, #8
 8008d90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d94:	b003      	add	sp, #12
 8008d96:	4770      	bx	lr
 8008d98:	2000006c 	.word	0x2000006c

08008d9c <__swbuf_r>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	460e      	mov	r6, r1
 8008da0:	4614      	mov	r4, r2
 8008da2:	4605      	mov	r5, r0
 8008da4:	b118      	cbz	r0, 8008dae <__swbuf_r+0x12>
 8008da6:	6a03      	ldr	r3, [r0, #32]
 8008da8:	b90b      	cbnz	r3, 8008dae <__swbuf_r+0x12>
 8008daa:	f7ff fa1f 	bl	80081ec <__sinit>
 8008dae:	69a3      	ldr	r3, [r4, #24]
 8008db0:	60a3      	str	r3, [r4, #8]
 8008db2:	89a3      	ldrh	r3, [r4, #12]
 8008db4:	071a      	lsls	r2, r3, #28
 8008db6:	d525      	bpl.n	8008e04 <__swbuf_r+0x68>
 8008db8:	6923      	ldr	r3, [r4, #16]
 8008dba:	b31b      	cbz	r3, 8008e04 <__swbuf_r+0x68>
 8008dbc:	6823      	ldr	r3, [r4, #0]
 8008dbe:	6922      	ldr	r2, [r4, #16]
 8008dc0:	1a98      	subs	r0, r3, r2
 8008dc2:	6963      	ldr	r3, [r4, #20]
 8008dc4:	b2f6      	uxtb	r6, r6
 8008dc6:	4283      	cmp	r3, r0
 8008dc8:	4637      	mov	r7, r6
 8008dca:	dc04      	bgt.n	8008dd6 <__swbuf_r+0x3a>
 8008dcc:	4621      	mov	r1, r4
 8008dce:	4628      	mov	r0, r5
 8008dd0:	f7ff ff5a 	bl	8008c88 <_fflush_r>
 8008dd4:	b9e0      	cbnz	r0, 8008e10 <__swbuf_r+0x74>
 8008dd6:	68a3      	ldr	r3, [r4, #8]
 8008dd8:	3b01      	subs	r3, #1
 8008dda:	60a3      	str	r3, [r4, #8]
 8008ddc:	6823      	ldr	r3, [r4, #0]
 8008dde:	1c5a      	adds	r2, r3, #1
 8008de0:	6022      	str	r2, [r4, #0]
 8008de2:	701e      	strb	r6, [r3, #0]
 8008de4:	6962      	ldr	r2, [r4, #20]
 8008de6:	1c43      	adds	r3, r0, #1
 8008de8:	429a      	cmp	r2, r3
 8008dea:	d004      	beq.n	8008df6 <__swbuf_r+0x5a>
 8008dec:	89a3      	ldrh	r3, [r4, #12]
 8008dee:	07db      	lsls	r3, r3, #31
 8008df0:	d506      	bpl.n	8008e00 <__swbuf_r+0x64>
 8008df2:	2e0a      	cmp	r6, #10
 8008df4:	d104      	bne.n	8008e00 <__swbuf_r+0x64>
 8008df6:	4621      	mov	r1, r4
 8008df8:	4628      	mov	r0, r5
 8008dfa:	f7ff ff45 	bl	8008c88 <_fflush_r>
 8008dfe:	b938      	cbnz	r0, 8008e10 <__swbuf_r+0x74>
 8008e00:	4638      	mov	r0, r7
 8008e02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008e04:	4621      	mov	r1, r4
 8008e06:	4628      	mov	r0, r5
 8008e08:	f000 f806 	bl	8008e18 <__swsetup_r>
 8008e0c:	2800      	cmp	r0, #0
 8008e0e:	d0d5      	beq.n	8008dbc <__swbuf_r+0x20>
 8008e10:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008e14:	e7f4      	b.n	8008e00 <__swbuf_r+0x64>
	...

08008e18 <__swsetup_r>:
 8008e18:	b538      	push	{r3, r4, r5, lr}
 8008e1a:	4b2a      	ldr	r3, [pc, #168]	; (8008ec4 <__swsetup_r+0xac>)
 8008e1c:	4605      	mov	r5, r0
 8008e1e:	6818      	ldr	r0, [r3, #0]
 8008e20:	460c      	mov	r4, r1
 8008e22:	b118      	cbz	r0, 8008e2c <__swsetup_r+0x14>
 8008e24:	6a03      	ldr	r3, [r0, #32]
 8008e26:	b90b      	cbnz	r3, 8008e2c <__swsetup_r+0x14>
 8008e28:	f7ff f9e0 	bl	80081ec <__sinit>
 8008e2c:	89a3      	ldrh	r3, [r4, #12]
 8008e2e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e32:	0718      	lsls	r0, r3, #28
 8008e34:	d422      	bmi.n	8008e7c <__swsetup_r+0x64>
 8008e36:	06d9      	lsls	r1, r3, #27
 8008e38:	d407      	bmi.n	8008e4a <__swsetup_r+0x32>
 8008e3a:	2309      	movs	r3, #9
 8008e3c:	602b      	str	r3, [r5, #0]
 8008e3e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008e42:	81a3      	strh	r3, [r4, #12]
 8008e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008e48:	e034      	b.n	8008eb4 <__swsetup_r+0x9c>
 8008e4a:	0758      	lsls	r0, r3, #29
 8008e4c:	d512      	bpl.n	8008e74 <__swsetup_r+0x5c>
 8008e4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e50:	b141      	cbz	r1, 8008e64 <__swsetup_r+0x4c>
 8008e52:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e56:	4299      	cmp	r1, r3
 8008e58:	d002      	beq.n	8008e60 <__swsetup_r+0x48>
 8008e5a:	4628      	mov	r0, r5
 8008e5c:	f7ff fac6 	bl	80083ec <_free_r>
 8008e60:	2300      	movs	r3, #0
 8008e62:	6363      	str	r3, [r4, #52]	; 0x34
 8008e64:	89a3      	ldrh	r3, [r4, #12]
 8008e66:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008e6a:	81a3      	strh	r3, [r4, #12]
 8008e6c:	2300      	movs	r3, #0
 8008e6e:	6063      	str	r3, [r4, #4]
 8008e70:	6923      	ldr	r3, [r4, #16]
 8008e72:	6023      	str	r3, [r4, #0]
 8008e74:	89a3      	ldrh	r3, [r4, #12]
 8008e76:	f043 0308 	orr.w	r3, r3, #8
 8008e7a:	81a3      	strh	r3, [r4, #12]
 8008e7c:	6923      	ldr	r3, [r4, #16]
 8008e7e:	b94b      	cbnz	r3, 8008e94 <__swsetup_r+0x7c>
 8008e80:	89a3      	ldrh	r3, [r4, #12]
 8008e82:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008e86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008e8a:	d003      	beq.n	8008e94 <__swsetup_r+0x7c>
 8008e8c:	4621      	mov	r1, r4
 8008e8e:	4628      	mov	r0, r5
 8008e90:	f000 f840 	bl	8008f14 <__smakebuf_r>
 8008e94:	89a0      	ldrh	r0, [r4, #12]
 8008e96:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008e9a:	f010 0301 	ands.w	r3, r0, #1
 8008e9e:	d00a      	beq.n	8008eb6 <__swsetup_r+0x9e>
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	60a3      	str	r3, [r4, #8]
 8008ea4:	6963      	ldr	r3, [r4, #20]
 8008ea6:	425b      	negs	r3, r3
 8008ea8:	61a3      	str	r3, [r4, #24]
 8008eaa:	6923      	ldr	r3, [r4, #16]
 8008eac:	b943      	cbnz	r3, 8008ec0 <__swsetup_r+0xa8>
 8008eae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008eb2:	d1c4      	bne.n	8008e3e <__swsetup_r+0x26>
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	0781      	lsls	r1, r0, #30
 8008eb8:	bf58      	it	pl
 8008eba:	6963      	ldrpl	r3, [r4, #20]
 8008ebc:	60a3      	str	r3, [r4, #8]
 8008ebe:	e7f4      	b.n	8008eaa <__swsetup_r+0x92>
 8008ec0:	2000      	movs	r0, #0
 8008ec2:	e7f7      	b.n	8008eb4 <__swsetup_r+0x9c>
 8008ec4:	2000006c 	.word	0x2000006c

08008ec8 <__swhatbuf_r>:
 8008ec8:	b570      	push	{r4, r5, r6, lr}
 8008eca:	460c      	mov	r4, r1
 8008ecc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ed0:	2900      	cmp	r1, #0
 8008ed2:	b096      	sub	sp, #88	; 0x58
 8008ed4:	4615      	mov	r5, r2
 8008ed6:	461e      	mov	r6, r3
 8008ed8:	da0d      	bge.n	8008ef6 <__swhatbuf_r+0x2e>
 8008eda:	89a3      	ldrh	r3, [r4, #12]
 8008edc:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008ee0:	f04f 0100 	mov.w	r1, #0
 8008ee4:	bf0c      	ite	eq
 8008ee6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008eea:	2340      	movne	r3, #64	; 0x40
 8008eec:	2000      	movs	r0, #0
 8008eee:	6031      	str	r1, [r6, #0]
 8008ef0:	602b      	str	r3, [r5, #0]
 8008ef2:	b016      	add	sp, #88	; 0x58
 8008ef4:	bd70      	pop	{r4, r5, r6, pc}
 8008ef6:	466a      	mov	r2, sp
 8008ef8:	f000 f858 	bl	8008fac <_fstat_r>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	dbec      	blt.n	8008eda <__swhatbuf_r+0x12>
 8008f00:	9901      	ldr	r1, [sp, #4]
 8008f02:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008f06:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008f0a:	4259      	negs	r1, r3
 8008f0c:	4159      	adcs	r1, r3
 8008f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f12:	e7eb      	b.n	8008eec <__swhatbuf_r+0x24>

08008f14 <__smakebuf_r>:
 8008f14:	898b      	ldrh	r3, [r1, #12]
 8008f16:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f18:	079d      	lsls	r5, r3, #30
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	460c      	mov	r4, r1
 8008f1e:	d507      	bpl.n	8008f30 <__smakebuf_r+0x1c>
 8008f20:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f24:	6023      	str	r3, [r4, #0]
 8008f26:	6123      	str	r3, [r4, #16]
 8008f28:	2301      	movs	r3, #1
 8008f2a:	6163      	str	r3, [r4, #20]
 8008f2c:	b002      	add	sp, #8
 8008f2e:	bd70      	pop	{r4, r5, r6, pc}
 8008f30:	ab01      	add	r3, sp, #4
 8008f32:	466a      	mov	r2, sp
 8008f34:	f7ff ffc8 	bl	8008ec8 <__swhatbuf_r>
 8008f38:	9900      	ldr	r1, [sp, #0]
 8008f3a:	4605      	mov	r5, r0
 8008f3c:	4630      	mov	r0, r6
 8008f3e:	f7ff fc0d 	bl	800875c <_malloc_r>
 8008f42:	b948      	cbnz	r0, 8008f58 <__smakebuf_r+0x44>
 8008f44:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f48:	059a      	lsls	r2, r3, #22
 8008f4a:	d4ef      	bmi.n	8008f2c <__smakebuf_r+0x18>
 8008f4c:	f023 0303 	bic.w	r3, r3, #3
 8008f50:	f043 0302 	orr.w	r3, r3, #2
 8008f54:	81a3      	strh	r3, [r4, #12]
 8008f56:	e7e3      	b.n	8008f20 <__smakebuf_r+0xc>
 8008f58:	89a3      	ldrh	r3, [r4, #12]
 8008f5a:	6020      	str	r0, [r4, #0]
 8008f5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f60:	81a3      	strh	r3, [r4, #12]
 8008f62:	9b00      	ldr	r3, [sp, #0]
 8008f64:	6163      	str	r3, [r4, #20]
 8008f66:	9b01      	ldr	r3, [sp, #4]
 8008f68:	6120      	str	r0, [r4, #16]
 8008f6a:	b15b      	cbz	r3, 8008f84 <__smakebuf_r+0x70>
 8008f6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f70:	4630      	mov	r0, r6
 8008f72:	f000 f82d 	bl	8008fd0 <_isatty_r>
 8008f76:	b128      	cbz	r0, 8008f84 <__smakebuf_r+0x70>
 8008f78:	89a3      	ldrh	r3, [r4, #12]
 8008f7a:	f023 0303 	bic.w	r3, r3, #3
 8008f7e:	f043 0301 	orr.w	r3, r3, #1
 8008f82:	81a3      	strh	r3, [r4, #12]
 8008f84:	89a3      	ldrh	r3, [r4, #12]
 8008f86:	431d      	orrs	r5, r3
 8008f88:	81a5      	strh	r5, [r4, #12]
 8008f8a:	e7cf      	b.n	8008f2c <__smakebuf_r+0x18>

08008f8c <_close_r>:
 8008f8c:	b538      	push	{r3, r4, r5, lr}
 8008f8e:	4d06      	ldr	r5, [pc, #24]	; (8008fa8 <_close_r+0x1c>)
 8008f90:	2300      	movs	r3, #0
 8008f92:	4604      	mov	r4, r0
 8008f94:	4608      	mov	r0, r1
 8008f96:	602b      	str	r3, [r5, #0]
 8008f98:	f7f8 fa0b 	bl	80013b2 <_close>
 8008f9c:	1c43      	adds	r3, r0, #1
 8008f9e:	d102      	bne.n	8008fa6 <_close_r+0x1a>
 8008fa0:	682b      	ldr	r3, [r5, #0]
 8008fa2:	b103      	cbz	r3, 8008fa6 <_close_r+0x1a>
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	bd38      	pop	{r3, r4, r5, pc}
 8008fa8:	20004bac 	.word	0x20004bac

08008fac <_fstat_r>:
 8008fac:	b538      	push	{r3, r4, r5, lr}
 8008fae:	4d07      	ldr	r5, [pc, #28]	; (8008fcc <_fstat_r+0x20>)
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	4604      	mov	r4, r0
 8008fb4:	4608      	mov	r0, r1
 8008fb6:	4611      	mov	r1, r2
 8008fb8:	602b      	str	r3, [r5, #0]
 8008fba:	f7f8 fa06 	bl	80013ca <_fstat>
 8008fbe:	1c43      	adds	r3, r0, #1
 8008fc0:	d102      	bne.n	8008fc8 <_fstat_r+0x1c>
 8008fc2:	682b      	ldr	r3, [r5, #0]
 8008fc4:	b103      	cbz	r3, 8008fc8 <_fstat_r+0x1c>
 8008fc6:	6023      	str	r3, [r4, #0]
 8008fc8:	bd38      	pop	{r3, r4, r5, pc}
 8008fca:	bf00      	nop
 8008fcc:	20004bac 	.word	0x20004bac

08008fd0 <_isatty_r>:
 8008fd0:	b538      	push	{r3, r4, r5, lr}
 8008fd2:	4d06      	ldr	r5, [pc, #24]	; (8008fec <_isatty_r+0x1c>)
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	4604      	mov	r4, r0
 8008fd8:	4608      	mov	r0, r1
 8008fda:	602b      	str	r3, [r5, #0]
 8008fdc:	f7f8 fa05 	bl	80013ea <_isatty>
 8008fe0:	1c43      	adds	r3, r0, #1
 8008fe2:	d102      	bne.n	8008fea <_isatty_r+0x1a>
 8008fe4:	682b      	ldr	r3, [r5, #0]
 8008fe6:	b103      	cbz	r3, 8008fea <_isatty_r+0x1a>
 8008fe8:	6023      	str	r3, [r4, #0]
 8008fea:	bd38      	pop	{r3, r4, r5, pc}
 8008fec:	20004bac 	.word	0x20004bac

08008ff0 <_lseek_r>:
 8008ff0:	b538      	push	{r3, r4, r5, lr}
 8008ff2:	4d07      	ldr	r5, [pc, #28]	; (8009010 <_lseek_r+0x20>)
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	4608      	mov	r0, r1
 8008ff8:	4611      	mov	r1, r2
 8008ffa:	2200      	movs	r2, #0
 8008ffc:	602a      	str	r2, [r5, #0]
 8008ffe:	461a      	mov	r2, r3
 8009000:	f7f8 f9fe 	bl	8001400 <_lseek>
 8009004:	1c43      	adds	r3, r0, #1
 8009006:	d102      	bne.n	800900e <_lseek_r+0x1e>
 8009008:	682b      	ldr	r3, [r5, #0]
 800900a:	b103      	cbz	r3, 800900e <_lseek_r+0x1e>
 800900c:	6023      	str	r3, [r4, #0]
 800900e:	bd38      	pop	{r3, r4, r5, pc}
 8009010:	20004bac 	.word	0x20004bac

08009014 <_read_r>:
 8009014:	b538      	push	{r3, r4, r5, lr}
 8009016:	4d07      	ldr	r5, [pc, #28]	; (8009034 <_read_r+0x20>)
 8009018:	4604      	mov	r4, r0
 800901a:	4608      	mov	r0, r1
 800901c:	4611      	mov	r1, r2
 800901e:	2200      	movs	r2, #0
 8009020:	602a      	str	r2, [r5, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	f7f8 f98c 	bl	8001340 <_read>
 8009028:	1c43      	adds	r3, r0, #1
 800902a:	d102      	bne.n	8009032 <_read_r+0x1e>
 800902c:	682b      	ldr	r3, [r5, #0]
 800902e:	b103      	cbz	r3, 8009032 <_read_r+0x1e>
 8009030:	6023      	str	r3, [r4, #0]
 8009032:	bd38      	pop	{r3, r4, r5, pc}
 8009034:	20004bac 	.word	0x20004bac

08009038 <_sbrk_r>:
 8009038:	b538      	push	{r3, r4, r5, lr}
 800903a:	4d06      	ldr	r5, [pc, #24]	; (8009054 <_sbrk_r+0x1c>)
 800903c:	2300      	movs	r3, #0
 800903e:	4604      	mov	r4, r0
 8009040:	4608      	mov	r0, r1
 8009042:	602b      	str	r3, [r5, #0]
 8009044:	f7f8 f9ea 	bl	800141c <_sbrk>
 8009048:	1c43      	adds	r3, r0, #1
 800904a:	d102      	bne.n	8009052 <_sbrk_r+0x1a>
 800904c:	682b      	ldr	r3, [r5, #0]
 800904e:	b103      	cbz	r3, 8009052 <_sbrk_r+0x1a>
 8009050:	6023      	str	r3, [r4, #0]
 8009052:	bd38      	pop	{r3, r4, r5, pc}
 8009054:	20004bac 	.word	0x20004bac

08009058 <_write_r>:
 8009058:	b538      	push	{r3, r4, r5, lr}
 800905a:	4d07      	ldr	r5, [pc, #28]	; (8009078 <_write_r+0x20>)
 800905c:	4604      	mov	r4, r0
 800905e:	4608      	mov	r0, r1
 8009060:	4611      	mov	r1, r2
 8009062:	2200      	movs	r2, #0
 8009064:	602a      	str	r2, [r5, #0]
 8009066:	461a      	mov	r2, r3
 8009068:	f7f8 f987 	bl	800137a <_write>
 800906c:	1c43      	adds	r3, r0, #1
 800906e:	d102      	bne.n	8009076 <_write_r+0x1e>
 8009070:	682b      	ldr	r3, [r5, #0]
 8009072:	b103      	cbz	r3, 8009076 <_write_r+0x1e>
 8009074:	6023      	str	r3, [r4, #0]
 8009076:	bd38      	pop	{r3, r4, r5, pc}
 8009078:	20004bac 	.word	0x20004bac

0800907c <abort>:
 800907c:	b508      	push	{r3, lr}
 800907e:	2006      	movs	r0, #6
 8009080:	f000 f82c 	bl	80090dc <raise>
 8009084:	2001      	movs	r0, #1
 8009086:	f7f8 f951 	bl	800132c <_exit>

0800908a <_raise_r>:
 800908a:	291f      	cmp	r1, #31
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4604      	mov	r4, r0
 8009090:	460d      	mov	r5, r1
 8009092:	d904      	bls.n	800909e <_raise_r+0x14>
 8009094:	2316      	movs	r3, #22
 8009096:	6003      	str	r3, [r0, #0]
 8009098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800909c:	bd38      	pop	{r3, r4, r5, pc}
 800909e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80090a0:	b112      	cbz	r2, 80090a8 <_raise_r+0x1e>
 80090a2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80090a6:	b94b      	cbnz	r3, 80090bc <_raise_r+0x32>
 80090a8:	4620      	mov	r0, r4
 80090aa:	f000 f831 	bl	8009110 <_getpid_r>
 80090ae:	462a      	mov	r2, r5
 80090b0:	4601      	mov	r1, r0
 80090b2:	4620      	mov	r0, r4
 80090b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090b8:	f000 b818 	b.w	80090ec <_kill_r>
 80090bc:	2b01      	cmp	r3, #1
 80090be:	d00a      	beq.n	80090d6 <_raise_r+0x4c>
 80090c0:	1c59      	adds	r1, r3, #1
 80090c2:	d103      	bne.n	80090cc <_raise_r+0x42>
 80090c4:	2316      	movs	r3, #22
 80090c6:	6003      	str	r3, [r0, #0]
 80090c8:	2001      	movs	r0, #1
 80090ca:	e7e7      	b.n	800909c <_raise_r+0x12>
 80090cc:	2400      	movs	r4, #0
 80090ce:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80090d2:	4628      	mov	r0, r5
 80090d4:	4798      	blx	r3
 80090d6:	2000      	movs	r0, #0
 80090d8:	e7e0      	b.n	800909c <_raise_r+0x12>
	...

080090dc <raise>:
 80090dc:	4b02      	ldr	r3, [pc, #8]	; (80090e8 <raise+0xc>)
 80090de:	4601      	mov	r1, r0
 80090e0:	6818      	ldr	r0, [r3, #0]
 80090e2:	f7ff bfd2 	b.w	800908a <_raise_r>
 80090e6:	bf00      	nop
 80090e8:	2000006c 	.word	0x2000006c

080090ec <_kill_r>:
 80090ec:	b538      	push	{r3, r4, r5, lr}
 80090ee:	4d07      	ldr	r5, [pc, #28]	; (800910c <_kill_r+0x20>)
 80090f0:	2300      	movs	r3, #0
 80090f2:	4604      	mov	r4, r0
 80090f4:	4608      	mov	r0, r1
 80090f6:	4611      	mov	r1, r2
 80090f8:	602b      	str	r3, [r5, #0]
 80090fa:	f7f8 f907 	bl	800130c <_kill>
 80090fe:	1c43      	adds	r3, r0, #1
 8009100:	d102      	bne.n	8009108 <_kill_r+0x1c>
 8009102:	682b      	ldr	r3, [r5, #0]
 8009104:	b103      	cbz	r3, 8009108 <_kill_r+0x1c>
 8009106:	6023      	str	r3, [r4, #0]
 8009108:	bd38      	pop	{r3, r4, r5, pc}
 800910a:	bf00      	nop
 800910c:	20004bac 	.word	0x20004bac

08009110 <_getpid_r>:
 8009110:	f7f8 b8f4 	b.w	80012fc <_getpid>

08009114 <_init>:
 8009114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009116:	bf00      	nop
 8009118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800911a:	bc08      	pop	{r3}
 800911c:	469e      	mov	lr, r3
 800911e:	4770      	bx	lr

08009120 <_fini>:
 8009120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009122:	bf00      	nop
 8009124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009126:	bc08      	pop	{r3}
 8009128:	469e      	mov	lr, r3
 800912a:	4770      	bx	lr
