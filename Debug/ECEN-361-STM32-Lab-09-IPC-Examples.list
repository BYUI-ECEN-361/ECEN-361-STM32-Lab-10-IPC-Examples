
ECEN-361-STM32-Lab-09-IPC-Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000898c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  08008b1c  08008b1c  00018b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d20  08008d20  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008d20  08008d20  00018d20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d28  08008d28  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d28  08008d28  00018d28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d2c  08008d2c  00018d2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008d30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b34  20000070  08008da0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ba4  08008da0  00024ba4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c315  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a7b  00000000  00000000  0003c3f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e8  00000000  00000000  0003fe78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001286  00000000  00000000  00041660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029678  00000000  00000000  000428e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001abfe  00000000  00000000  0006bf5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff8fb  00000000  00000000  00086b5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bc4  00000000  00000000  00186458  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0018d01c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008b04 	.word	0x08008b04

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008b04 	.word	0x08008b04

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 fa35 	bl	8001a0c <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 fa24 	bl	8001a0c <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fa19 	bl	8001a0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 fa13 	bl	8001a0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 fa0d 	bl	8001a0c <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MultiFunctionShield_Single_Digit_Display>:
* @param digit: 1..4, pick the digit to write to
* @param value: 0..9, pick the value to display
* @retval None
*/
void MultiFunctionShield_Single_Digit_Display (int digit, int8_t value)
	{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	if (value <0) //then blank a digit
 8000614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000618:	2b00      	cmp	r3, #0
 800061a:	da06      	bge.n	800062a <MultiFunctionShield_Single_Digit_Display+0x22>
		{
		SEGMENT_VALUE[4-digit] = SEGMENT_BLANK;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f1c3 0304 	rsb	r3, r3, #4
 8000622:	21ff      	movs	r1, #255	; 0xff
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000626:	54d1      	strb	r1, [r2, r3]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
			}
		}
	}
 8000628:	e039      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
		value = (value & 0b1111) % 10 ;
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f003 020f 	and.w	r2, r3, #15
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 8000632:	fb83 1302 	smull	r1, r3, r3, r2
 8000636:	1099      	asrs	r1, r3, #2
 8000638:	17d3      	asrs	r3, r2, #31
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	460b      	mov	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1ad1      	subs	r1, r2, r3
 8000646:	460b      	mov	r3, r1
 8000648:	70fb      	strb	r3, [r7, #3]
		if ((digit <=4 ) && (digit >=0))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b04      	cmp	r3, #4
 800064e:	dc1a      	bgt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db17      	blt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
			SEGMENT_VALUE[4-digit] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000656:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 800065c:	fb83 1302 	smull	r1, r3, r3, r2
 8000660:	1099      	asrs	r1, r3, #2
 8000662:	17d3      	asrs	r3, r2, #31
 8000664:	1ac9      	subs	r1, r1, r3
 8000666:	460b      	mov	r3, r1
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f1c3 0304 	rsb	r3, r3, #4
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <MultiFunctionShield_Single_Digit_Display+0xac>)
 800067e:	5c51      	ldrb	r1, [r2, r1]
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000682:	54d1      	strb	r1, [r2, r3]
	}
 8000684:	e00b      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
			SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000686:	22bf      	movs	r2, #191	; 0xbf
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800068a:	701a      	strb	r2, [r3, #0]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
 800068c:	22bf      	movs	r2, #191	; 0xbf
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000690:	705a      	strb	r2, [r3, #1]
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000692:	22bf      	movs	r2, #191	; 0xbf
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000696:	709a      	strb	r2, [r3, #2]
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000698:	22bf      	movs	r2, #191	; 0xbf
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800069c:	70da      	strb	r2, [r3, #3]
	}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000090 	.word	0x20000090
 80006b0:	66666667 	.word	0x66666667
 80006b4:	08008be8 	.word	0x08008be8

080006b8 <MultiFunctionShield_Display>:
	SEGMENT_VALUE[0] = 0x0e;    // Letter F
	}


void MultiFunctionShield_Display (int16_t value)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	80fb      	strh	r3, [r7, #6]
  if ((value > 9999) || (value < -999))   // out of range
 80006c2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006c6:	f242 720f 	movw	r2, #9999	; 0x270f
 80006ca:	4293      	cmp	r3, r2
 80006cc:	dc04      	bgt.n	80006d8 <MultiFunctionShield_Display+0x20>
 80006ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d2:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 80006d6:	dc0c      	bgt.n	80006f2 <MultiFunctionShield_Display+0x3a>
  {
    SEGMENT_VALUE[0] = SEGMENT_MINUS;
 80006d8:	22bf      	movs	r2, #191	; 0xbf
 80006da:	4b7f      	ldr	r3, [pc, #508]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80006dc:	701a      	strb	r2, [r3, #0]
    SEGMENT_VALUE[1] = SEGMENT_MINUS;
 80006de:	22bf      	movs	r2, #191	; 0xbf
 80006e0:	4b7d      	ldr	r3, [pc, #500]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80006e2:	705a      	strb	r2, [r3, #1]
    SEGMENT_VALUE[2] = SEGMENT_MINUS;
 80006e4:	22bf      	movs	r2, #191	; 0xbf
 80006e6:	4b7c      	ldr	r3, [pc, #496]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80006e8:	709a      	strb	r2, [r3, #2]
    SEGMENT_VALUE[3] = SEGMENT_MINUS;
 80006ea:	22bf      	movs	r2, #191	; 0xbf
 80006ec:	4b7a      	ldr	r3, [pc, #488]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80006ee:	70da      	strb	r2, [r3, #3]
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;

      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
    }
  }
}
 80006f0:	e0ec      	b.n	80008cc <MultiFunctionShield_Display+0x214>
    if (value > 0)   // positive values
 80006f2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	dd72      	ble.n	80007e0 <MultiFunctionShield_Display+0x128>
      if (value > 999)
 80006fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006fe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000702:	db0f      	blt.n	8000724 <MultiFunctionShield_Display+0x6c>
        SEGMENT_VALUE[0] = SEGMENT_MAP [(uint8_t) (value / 1000)];
 8000704:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000708:	4a74      	ldr	r2, [pc, #464]	; (80008dc <MultiFunctionShield_Display+0x224>)
 800070a:	fb82 1203 	smull	r1, r2, r2, r3
 800070e:	1192      	asrs	r2, r2, #6
 8000710:	17db      	asrs	r3, r3, #31
 8000712:	1ad3      	subs	r3, r2, r3
 8000714:	b21b      	sxth	r3, r3
 8000716:	b2db      	uxtb	r3, r3
 8000718:	461a      	mov	r2, r3
 800071a:	4b71      	ldr	r3, [pc, #452]	; (80008e0 <MultiFunctionShield_Display+0x228>)
 800071c:	5c9a      	ldrb	r2, [r3, r2]
 800071e:	4b6e      	ldr	r3, [pc, #440]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 8000720:	701a      	strb	r2, [r3, #0]
 8000722:	e002      	b.n	800072a <MultiFunctionShield_Display+0x72>
        SEGMENT_VALUE[0] = BLANK_OR_ZERO_FILL;
 8000724:	22c0      	movs	r2, #192	; 0xc0
 8000726:	4b6c      	ldr	r3, [pc, #432]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 8000728:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 800072a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800072e:	2b63      	cmp	r3, #99	; 0x63
 8000730:	dd1b      	ble.n	800076a <MultiFunctionShield_Display+0xb2>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000732:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000736:	4a6b      	ldr	r2, [pc, #428]	; (80008e4 <MultiFunctionShield_Display+0x22c>)
 8000738:	fb82 1203 	smull	r1, r2, r2, r3
 800073c:	1152      	asrs	r2, r2, #5
 800073e:	17db      	asrs	r3, r3, #31
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	b21a      	sxth	r2, r3
 8000744:	4b68      	ldr	r3, [pc, #416]	; (80008e8 <MultiFunctionShield_Display+0x230>)
 8000746:	fb83 1302 	smull	r1, r3, r3, r2
 800074a:	1099      	asrs	r1, r3, #2
 800074c:	17d3      	asrs	r3, r2, #31
 800074e:	1ac9      	subs	r1, r1, r3
 8000750:	460b      	mov	r3, r1
 8000752:	009b      	lsls	r3, r3, #2
 8000754:	440b      	add	r3, r1
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	1ad3      	subs	r3, r2, r3
 800075a:	b21b      	sxth	r3, r3
 800075c:	b2db      	uxtb	r3, r3
 800075e:	461a      	mov	r2, r3
 8000760:	4b5f      	ldr	r3, [pc, #380]	; (80008e0 <MultiFunctionShield_Display+0x228>)
 8000762:	5c9a      	ldrb	r2, [r3, r2]
 8000764:	4b5c      	ldr	r3, [pc, #368]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 8000766:	705a      	strb	r2, [r3, #1]
 8000768:	e002      	b.n	8000770 <MultiFunctionShield_Display+0xb8>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 800076a:	22c0      	movs	r2, #192	; 0xc0
 800076c:	4b5a      	ldr	r3, [pc, #360]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 800076e:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 8000770:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000774:	2b09      	cmp	r3, #9
 8000776:	dd1b      	ble.n	80007b0 <MultiFunctionShield_Display+0xf8>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 8000778:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800077c:	4a5a      	ldr	r2, [pc, #360]	; (80008e8 <MultiFunctionShield_Display+0x230>)
 800077e:	fb82 1203 	smull	r1, r2, r2, r3
 8000782:	1092      	asrs	r2, r2, #2
 8000784:	17db      	asrs	r3, r3, #31
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	b21a      	sxth	r2, r3
 800078a:	4b57      	ldr	r3, [pc, #348]	; (80008e8 <MultiFunctionShield_Display+0x230>)
 800078c:	fb83 1302 	smull	r1, r3, r3, r2
 8000790:	1099      	asrs	r1, r3, #2
 8000792:	17d3      	asrs	r3, r2, #31
 8000794:	1ac9      	subs	r1, r1, r3
 8000796:	460b      	mov	r3, r1
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	440b      	add	r3, r1
 800079c:	005b      	lsls	r3, r3, #1
 800079e:	1ad3      	subs	r3, r2, r3
 80007a0:	b21b      	sxth	r3, r3
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	461a      	mov	r2, r3
 80007a6:	4b4e      	ldr	r3, [pc, #312]	; (80008e0 <MultiFunctionShield_Display+0x228>)
 80007a8:	5c9a      	ldrb	r2, [r3, r2]
 80007aa:	4b4b      	ldr	r3, [pc, #300]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80007ac:	709a      	strb	r2, [r3, #2]
 80007ae:	e002      	b.n	80007b6 <MultiFunctionShield_Display+0xfe>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 80007b0:	22c0      	movs	r2, #192	; 0xc0
 80007b2:	4b49      	ldr	r3, [pc, #292]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80007b4:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 80007b6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007ba:	4b4b      	ldr	r3, [pc, #300]	; (80008e8 <MultiFunctionShield_Display+0x230>)
 80007bc:	fb83 1302 	smull	r1, r3, r3, r2
 80007c0:	1099      	asrs	r1, r3, #2
 80007c2:	17d3      	asrs	r3, r2, #31
 80007c4:	1ac9      	subs	r1, r1, r3
 80007c6:	460b      	mov	r3, r1
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	440b      	add	r3, r1
 80007cc:	005b      	lsls	r3, r3, #1
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	461a      	mov	r2, r3
 80007d6:	4b42      	ldr	r3, [pc, #264]	; (80008e0 <MultiFunctionShield_Display+0x228>)
 80007d8:	5c9a      	ldrb	r2, [r3, r2]
 80007da:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80007dc:	70da      	strb	r2, [r3, #3]
}
 80007de:	e075      	b.n	80008cc <MultiFunctionShield_Display+0x214>
    else if (value == 0)   // positive values
 80007e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d10c      	bne.n	8000802 <MultiFunctionShield_Display+0x14a>
		SEGMENT_VALUE[0] = SEGMENT_MAP[0];
 80007e8:	22c0      	movs	r2, #192	; 0xc0
 80007ea:	4b3b      	ldr	r3, [pc, #236]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80007ec:	701a      	strb	r2, [r3, #0]
		SEGMENT_VALUE[1] = SEGMENT_MAP[0];
 80007ee:	22c0      	movs	r2, #192	; 0xc0
 80007f0:	4b39      	ldr	r3, [pc, #228]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80007f2:	705a      	strb	r2, [r3, #1]
		SEGMENT_VALUE[2] = SEGMENT_MAP[0];
 80007f4:	22c0      	movs	r2, #192	; 0xc0
 80007f6:	4b38      	ldr	r3, [pc, #224]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80007f8:	709a      	strb	r2, [r3, #2]
		SEGMENT_VALUE[3] = SEGMENT_MAP[0];
 80007fa:	22c0      	movs	r2, #192	; 0xc0
 80007fc:	4b36      	ldr	r3, [pc, #216]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80007fe:	70da      	strb	r2, [r3, #3]
}
 8000800:	e064      	b.n	80008cc <MultiFunctionShield_Display+0x214>
    else if (value < 0)      // negative values: "-" left
 8000802:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000806:	2b00      	cmp	r3, #0
 8000808:	da60      	bge.n	80008cc <MultiFunctionShield_Display+0x214>
      value *= -1;
 800080a:	88fb      	ldrh	r3, [r7, #6]
 800080c:	425b      	negs	r3, r3
 800080e:	b29b      	uxth	r3, r3
 8000810:	80fb      	strh	r3, [r7, #6]
      SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000812:	22bf      	movs	r2, #191	; 0xbf
 8000814:	4b30      	ldr	r3, [pc, #192]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 8000816:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 8000818:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800081c:	2b63      	cmp	r3, #99	; 0x63
 800081e:	dd1b      	ble.n	8000858 <MultiFunctionShield_Display+0x1a0>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 8000820:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000824:	4a2f      	ldr	r2, [pc, #188]	; (80008e4 <MultiFunctionShield_Display+0x22c>)
 8000826:	fb82 1203 	smull	r1, r2, r2, r3
 800082a:	1152      	asrs	r2, r2, #5
 800082c:	17db      	asrs	r3, r3, #31
 800082e:	1ad3      	subs	r3, r2, r3
 8000830:	b21a      	sxth	r2, r3
 8000832:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MultiFunctionShield_Display+0x230>)
 8000834:	fb83 1302 	smull	r1, r3, r3, r2
 8000838:	1099      	asrs	r1, r3, #2
 800083a:	17d3      	asrs	r3, r2, #31
 800083c:	1ac9      	subs	r1, r1, r3
 800083e:	460b      	mov	r3, r1
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	440b      	add	r3, r1
 8000844:	005b      	lsls	r3, r3, #1
 8000846:	1ad3      	subs	r3, r2, r3
 8000848:	b21b      	sxth	r3, r3
 800084a:	b2db      	uxtb	r3, r3
 800084c:	461a      	mov	r2, r3
 800084e:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <MultiFunctionShield_Display+0x228>)
 8000850:	5c9a      	ldrb	r2, [r3, r2]
 8000852:	4b21      	ldr	r3, [pc, #132]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 8000854:	705a      	strb	r2, [r3, #1]
 8000856:	e002      	b.n	800085e <MultiFunctionShield_Display+0x1a6>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 8000858:	22c0      	movs	r2, #192	; 0xc0
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 800085c:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 800085e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000862:	2b09      	cmp	r3, #9
 8000864:	dd1b      	ble.n	800089e <MultiFunctionShield_Display+0x1e6>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 8000866:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800086a:	4a1f      	ldr	r2, [pc, #124]	; (80008e8 <MultiFunctionShield_Display+0x230>)
 800086c:	fb82 1203 	smull	r1, r2, r2, r3
 8000870:	1092      	asrs	r2, r2, #2
 8000872:	17db      	asrs	r3, r3, #31
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	b21a      	sxth	r2, r3
 8000878:	4b1b      	ldr	r3, [pc, #108]	; (80008e8 <MultiFunctionShield_Display+0x230>)
 800087a:	fb83 1302 	smull	r1, r3, r3, r2
 800087e:	1099      	asrs	r1, r3, #2
 8000880:	17d3      	asrs	r3, r2, #31
 8000882:	1ac9      	subs	r1, r1, r3
 8000884:	460b      	mov	r3, r1
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	440b      	add	r3, r1
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	1ad3      	subs	r3, r2, r3
 800088e:	b21b      	sxth	r3, r3
 8000890:	b2db      	uxtb	r3, r3
 8000892:	461a      	mov	r2, r3
 8000894:	4b12      	ldr	r3, [pc, #72]	; (80008e0 <MultiFunctionShield_Display+0x228>)
 8000896:	5c9a      	ldrb	r2, [r3, r2]
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 800089a:	709a      	strb	r2, [r3, #2]
 800089c:	e002      	b.n	80008a4 <MultiFunctionShield_Display+0x1ec>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 800089e:	22c0      	movs	r2, #192	; 0xc0
 80008a0:	4b0d      	ldr	r3, [pc, #52]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80008a2:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 80008a4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80008a8:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <MultiFunctionShield_Display+0x230>)
 80008aa:	fb83 1302 	smull	r1, r3, r3, r2
 80008ae:	1099      	asrs	r1, r3, #2
 80008b0:	17d3      	asrs	r3, r2, #31
 80008b2:	1ac9      	subs	r1, r1, r3
 80008b4:	460b      	mov	r3, r1
 80008b6:	009b      	lsls	r3, r3, #2
 80008b8:	440b      	add	r3, r1
 80008ba:	005b      	lsls	r3, r3, #1
 80008bc:	1ad3      	subs	r3, r2, r3
 80008be:	b21b      	sxth	r3, r3
 80008c0:	b2db      	uxtb	r3, r3
 80008c2:	461a      	mov	r2, r3
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <MultiFunctionShield_Display+0x228>)
 80008c6:	5c9a      	ldrb	r2, [r3, r2]
 80008c8:	4b03      	ldr	r3, [pc, #12]	; (80008d8 <MultiFunctionShield_Display+0x220>)
 80008ca:	70da      	strb	r2, [r3, #3]
}
 80008cc:	bf00      	nop
 80008ce:	370c      	adds	r7, #12
 80008d0:	46bd      	mov	sp, r7
 80008d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d6:	4770      	bx	lr
 80008d8:	20000090 	.word	0x20000090
 80008dc:	10624dd3 	.word	0x10624dd3
 80008e0:	08008be8 	.word	0x08008be8
 80008e4:	51eb851f 	.word	0x51eb851f
 80008e8:	66666667 	.word	0x66666667

080008ec <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 80008f0:	2201      	movs	r2, #1
 80008f2:	2180      	movs	r1, #128	; 0x80
 80008f4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008f8:	f001 f888 	bl	8001a0c <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 80008fc:	2201      	movs	r2, #1
 80008fe:	2140      	movs	r1, #64	; 0x40
 8000900:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000904:	f001 f882 	bl	8001a0c <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000908:	2201      	movs	r2, #1
 800090a:	2140      	movs	r1, #64	; 0x40
 800090c:	4805      	ldr	r0, [pc, #20]	; (8000924 <Clear_LEDs+0x38>)
 800090e:	f001 f87d 	bl	8001a0c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000912:	2201      	movs	r2, #1
 8000914:	2120      	movs	r1, #32
 8000916:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800091a:	f001 f877 	bl	8001a0c <HAL_GPIO_WritePin>
#endif
}
 800091e:	bf00      	nop
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	48000400 	.word	0x48000400

08000928 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000928:	b480      	push	{r7}
 800092a:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 800092c:	22ff      	movs	r2, #255	; 0xff
 800092e:	4b08      	ldr	r3, [pc, #32]	; (8000950 <MultiFunctionShield_Clear+0x28>)
 8000930:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000932:	22ff      	movs	r2, #255	; 0xff
 8000934:	4b06      	ldr	r3, [pc, #24]	; (8000950 <MultiFunctionShield_Clear+0x28>)
 8000936:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000938:	22ff      	movs	r2, #255	; 0xff
 800093a:	4b05      	ldr	r3, [pc, #20]	; (8000950 <MultiFunctionShield_Clear+0x28>)
 800093c:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 800093e:	22ff      	movs	r2, #255	; 0xff
 8000940:	4b03      	ldr	r3, [pc, #12]	; (8000950 <MultiFunctionShield_Clear+0x28>)
 8000942:	70da      	strb	r2, [r3, #3]
}
 8000944:	bf00      	nop
 8000946:	46bd      	mov	sp, r7
 8000948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094c:	4770      	bx	lr
 800094e:	bf00      	nop
 8000950:	20000090 	.word	0x20000090

08000954 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af02      	add	r7, sp, #8
 800095a:	4603      	mov	r3, r0
 800095c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 800095e:	2200      	movs	r2, #0
 8000960:	2120      	movs	r1, #32
 8000962:	4816      	ldr	r0, [pc, #88]	; (80009bc <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000964:	f001 f852 	bl	8001a0c <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000968:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 800096a:	4a15      	ldr	r2, [pc, #84]	; (80009c0 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 800096c:	5cd3      	ldrb	r3, [r2, r3]
 800096e:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	2301      	movs	r3, #1
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	f44f 7380 	mov.w	r3, #256	; 0x100
 800097a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800097e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000982:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000986:	f7ff fdf1 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800098a:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 800098c:	4a0d      	ldr	r2, [pc, #52]	; (80009c4 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 800098e:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000990:	9301      	str	r3, [sp, #4]
 8000992:	2301      	movs	r3, #1
 8000994:	9300      	str	r3, [sp, #0]
 8000996:	f44f 7380 	mov.w	r3, #256	; 0x100
 800099a:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800099e:	f44f 7100 	mov.w	r1, #512	; 0x200
 80009a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009a6:	f7ff fde1 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2120      	movs	r1, #32
 80009ae:	4803      	ldr	r0, [pc, #12]	; (80009bc <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80009b0:	f001 f82c 	bl	8001a0c <HAL_GPIO_WritePin>
	}
 80009b4:	bf00      	nop
 80009b6:	3708      	adds	r7, #8
 80009b8:	46bd      	mov	sp, r7
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	48000400 	.word	0x48000400
 80009c0:	20000090 	.word	0x20000090
 80009c4:	08008bf4 	.word	0x08008bf4

080009c8 <MultiFunctionShield__ISRFunc>:
	}



void MultiFunctionShield__ISRFunc(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 80009cc:	4b16      	ldr	r3, [pc, #88]	; (8000a28 <MultiFunctionShield__ISRFunc+0x60>)
 80009ce:	781b      	ldrb	r3, [r3, #0]
 80009d0:	b2db      	uxtb	r3, r3
 80009d2:	3301      	adds	r3, #1
 80009d4:	b2da      	uxtb	r2, r3
 80009d6:	4b14      	ldr	r3, [pc, #80]	; (8000a28 <MultiFunctionShield__ISRFunc+0x60>)
 80009d8:	4611      	mov	r1, r2
 80009da:	7019      	strb	r1, [r3, #0]
 80009dc:	4613      	mov	r3, r2
 80009de:	3b01      	subs	r3, #1
 80009e0:	2b03      	cmp	r3, #3
 80009e2:	d81e      	bhi.n	8000a22 <MultiFunctionShield__ISRFunc+0x5a>
 80009e4:	a201      	add	r2, pc, #4	; (adr r2, 80009ec <MultiFunctionShield__ISRFunc+0x24>)
 80009e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ea:	bf00      	nop
 80009ec:	080009fd 	.word	0x080009fd
 80009f0:	08000a05 	.word	0x08000a05
 80009f4:	08000a0d 	.word	0x08000a0d
 80009f8:	08000a15 	.word	0x08000a15
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 80009fc:	2000      	movs	r0, #0
 80009fe:	f7ff ffa9 	bl	8000954 <MultiFunctionShield_WriteNumberToSegment>
 8000a02:	e00e      	b.n	8000a22 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000a04:	2001      	movs	r0, #1
 8000a06:	f7ff ffa5 	bl	8000954 <MultiFunctionShield_WriteNumberToSegment>
 8000a0a:	e00a      	b.n	8000a22 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 8000a0c:	2002      	movs	r0, #2
 8000a0e:	f7ff ffa1 	bl	8000954 <MultiFunctionShield_WriteNumberToSegment>
 8000a12:	e006      	b.n	8000a22 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000a14:	2003      	movs	r0, #3
 8000a16:	f7ff ff9d 	bl	8000954 <MultiFunctionShield_WriteNumberToSegment>
 8000a1a:	4b03      	ldr	r3, [pc, #12]	; (8000a28 <MultiFunctionShield__ISRFunc+0x60>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	701a      	strb	r2, [r3, #0]
 8000a20:	bf00      	nop
  }
}
 8000a22:	bf00      	nop
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	bf00      	nop
 8000a28:	2000008c 	.word	0x2000008c

08000a2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a30:	f000 fd20 	bl	8001474 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a34:	f000 f87c 	bl	8000b30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a38:	f000 f922 	bl	8000c80 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a3c:	f000 f8f0 	bl	8000c20 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 8000a40:	f000 f8c8 	bl	8000bd4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  printf("\033\143"); printf("Welcome to ECEN-361 Lab-09\n\r");
 8000a44:	4825      	ldr	r0, [pc, #148]	; (8000adc <main+0xb0>)
 8000a46:	f007 f983 	bl	8007d50 <iprintf>
 8000a4a:	4825      	ldr	r0, [pc, #148]	; (8000ae0 <main+0xb4>)
 8000a4c:	f007 f980 	bl	8007d50 <iprintf>
	// Start timer
	MultiFunctionShield_Clear();							// Clear the 7-seg display
 8000a50:	f7ff ff6a 	bl	8000928 <MultiFunctionShield_Clear>
	HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 8000a54:	4823      	ldr	r0, [pc, #140]	; (8000ae4 <main+0xb8>)
 8000a56:	f002 fbcd 	bl	80031f4 <HAL_TIM_Base_Start_IT>

	Clear_LEDs();
 8000a5a:	f7ff ff47 	bl	80008ec <Clear_LEDs>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a5e:	f003 fc05 	bl	800426c <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Button_1_Semaphore_Binary */
  Button_1_Semaphore_BinaryHandle = osSemaphoreNew(1, 1, &Button_1_Semaphore_Binary_attributes);
 8000a62:	4a21      	ldr	r2, [pc, #132]	; (8000ae8 <main+0xbc>)
 8000a64:	2101      	movs	r1, #1
 8000a66:	2001      	movs	r0, #1
 8000a68:	f003 fe09 	bl	800467e <osSemaphoreNew>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <main+0xc0>)
 8000a70:	6013      	str	r3, [r2, #0]

  /* creation of Button_2_Semaphore_Binary */
  Button_2_Semaphore_BinaryHandle = osSemaphoreNew(1, 1, &Button_2_Semaphore_Binary_attributes);
 8000a72:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <main+0xc4>)
 8000a74:	2101      	movs	r1, #1
 8000a76:	2001      	movs	r0, #1
 8000a78:	f003 fe01 	bl	800467e <osSemaphoreNew>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4a1d      	ldr	r2, [pc, #116]	; (8000af4 <main+0xc8>)
 8000a80:	6013      	str	r3, [r2, #0]

  /* creation of Button_3_Semaphore_Counting */
  Button_3_Semaphore_CountingHandle = osSemaphoreNew(31, 31, &Button_3_Semaphore_Counting_attributes);
 8000a82:	4a1d      	ldr	r2, [pc, #116]	; (8000af8 <main+0xcc>)
 8000a84:	211f      	movs	r1, #31
 8000a86:	201f      	movs	r0, #31
 8000a88:	f003 fdf9 	bl	800467e <osSemaphoreNew>
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <main+0xd0>)
 8000a90:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SW_Timer_7Seg */
  SW_Timer_7SegHandle = osTimerNew(SW_Timer_Countdown, osTimerPeriodic, NULL, &SW_Timer_7Seg_attributes);
 8000a92:	4b1b      	ldr	r3, [pc, #108]	; (8000b00 <main+0xd4>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	2101      	movs	r1, #1
 8000a98:	481a      	ldr	r0, [pc, #104]	; (8000b04 <main+0xd8>)
 8000a9a:	f003 fcf3 	bl	8004484 <osTimerNew>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a19      	ldr	r2, [pc, #100]	; (8000b08 <main+0xdc>)
 8000aa2:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SemaphoreToggle */
  SemaphoreToggleHandle = osThreadNew(Semaphore_Toggle_Task, NULL, &SemaphoreToggle_attributes);
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <main+0xe0>)
 8000aa6:	2100      	movs	r1, #0
 8000aa8:	4819      	ldr	r0, [pc, #100]	; (8000b10 <main+0xe4>)
 8000aaa:	f003 fc29 	bl	8004300 <osThreadNew>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	4a18      	ldr	r2, [pc, #96]	; (8000b14 <main+0xe8>)
 8000ab2:	6013      	str	r3, [r2, #0]

  /* creation of NotifToggle */
  NotifToggleHandle = osThreadNew(NotifyToggleTask, NULL, &NotifToggle_attributes);
 8000ab4:	4a18      	ldr	r2, [pc, #96]	; (8000b18 <main+0xec>)
 8000ab6:	2100      	movs	r1, #0
 8000ab8:	4818      	ldr	r0, [pc, #96]	; (8000b1c <main+0xf0>)
 8000aba:	f003 fc21 	bl	8004300 <osThreadNew>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	4a17      	ldr	r2, [pc, #92]	; (8000b20 <main+0xf4>)
 8000ac2:	6013      	str	r3, [r2, #0]

  /* creation of SW_Timer_Toggle */
  SW_Timer_ToggleHandle = osThreadNew(SW_Timer_Task, NULL, &SW_Timer_Toggle_attributes);
 8000ac4:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <main+0xf8>)
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	4817      	ldr	r0, [pc, #92]	; (8000b28 <main+0xfc>)
 8000aca:	f003 fc19 	bl	8004300 <osThreadNew>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <main+0x100>)
 8000ad2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000ad4:	f003 fbee 	bl	80042b4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <main+0xac>
 8000ada:	bf00      	nop
 8000adc:	08008bac 	.word	0x08008bac
 8000ae0:	08008bb0 	.word	0x08008bb0
 8000ae4:	20000094 	.word	0x20000094
 8000ae8:	08008c74 	.word	0x08008c74
 8000aec:	20000178 	.word	0x20000178
 8000af0:	08008c84 	.word	0x08008c84
 8000af4:	2000017c 	.word	0x2000017c
 8000af8:	08008c94 	.word	0x08008c94
 8000afc:	20000180 	.word	0x20000180
 8000b00:	08008c64 	.word	0x08008c64
 8000b04:	08000f49 	.word	0x08000f49
 8000b08:	20000174 	.word	0x20000174
 8000b0c:	08008bf8 	.word	0x08008bf8
 8000b10:	08000eb9 	.word	0x08000eb9
 8000b14:	20000168 	.word	0x20000168
 8000b18:	08008c1c 	.word	0x08008c1c
 8000b1c:	08000ee9 	.word	0x08000ee9
 8000b20:	2000016c 	.word	0x2000016c
 8000b24:	08008c40 	.word	0x08008c40
 8000b28:	08000ef9 	.word	0x08000ef9
 8000b2c:	20000170 	.word	0x20000170

08000b30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b096      	sub	sp, #88	; 0x58
 8000b34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	2244      	movs	r2, #68	; 0x44
 8000b3c:	2100      	movs	r1, #0
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f007 f95b 	bl	8007dfa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b44:	463b      	mov	r3, r7
 8000b46:	2200      	movs	r2, #0
 8000b48:	601a      	str	r2, [r3, #0]
 8000b4a:	605a      	str	r2, [r3, #4]
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	60da      	str	r2, [r3, #12]
 8000b50:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000b52:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000b56:	f000 ffb1 	bl	8001abc <HAL_PWREx_ControlVoltageScaling>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000b60:	f000 fa3e 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b64:	2302      	movs	r3, #2
 8000b66:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b68:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b6c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b6e:	2310      	movs	r3, #16
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b72:	2302      	movs	r3, #2
 8000b74:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b76:	2302      	movs	r3, #2
 8000b78:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000b7e:	230a      	movs	r3, #10
 8000b80:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000b82:	2307      	movs	r3, #7
 8000b84:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b86:	2302      	movs	r3, #2
 8000b88:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b8e:	f107 0314 	add.w	r3, r7, #20
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 ffe8 	bl	8001b68 <HAL_RCC_OscConfig>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	d001      	beq.n	8000ba2 <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000b9e:	f000 fa1f 	bl	8000fe0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ba2:	230f      	movs	r3, #15
 8000ba4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ba6:	2303      	movs	r3, #3
 8000ba8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000baa:	2300      	movs	r3, #0
 8000bac:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bb6:	463b      	mov	r3, r7
 8000bb8:	2104      	movs	r1, #4
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f001 fbb0 	bl	8002320 <HAL_RCC_ClockConfig>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bc6:	f000 fa0b 	bl	8000fe0 <Error_Handler>
  }
}
 8000bca:	bf00      	nop
 8000bcc:	3758      	adds	r7, #88	; 0x58
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000bd8:	4b0f      	ldr	r3, [pc, #60]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000bda:	4a10      	ldr	r2, [pc, #64]	; (8000c1c <MX_TIM17_Init+0x48>)
 8000bdc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000bde:	4b0e      	ldr	r3, [pc, #56]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000be0:	f240 321f 	movw	r2, #799	; 0x31f
 8000be4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be6:	4b0c      	ldr	r3, [pc, #48]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000bec:	4b0a      	ldr	r3, [pc, #40]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000bee:	2264      	movs	r2, #100	; 0x64
 8000bf0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf2:	4b09      	ldr	r3, [pc, #36]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000bf8:	4b07      	ldr	r3, [pc, #28]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000c04:	4804      	ldr	r0, [pc, #16]	; (8000c18 <MX_TIM17_Init+0x44>)
 8000c06:	f002 fa9d 	bl	8003144 <HAL_TIM_Base_Init>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000c10:	f000 f9e6 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000c14:	bf00      	nop
 8000c16:	bd80      	pop	{r7, pc}
 8000c18:	20000094 	.word	0x20000094
 8000c1c:	40014800 	.word	0x40014800

08000c20 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c24:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c26:	4a15      	ldr	r2, [pc, #84]	; (8000c7c <MX_USART2_UART_Init+0x5c>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b11      	ldr	r3, [pc, #68]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_USART2_UART_Init+0x58>)
 8000c64:	f002 fd18 	bl	8003698 <HAL_UART_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000c6e:	f000 f9b7 	bl	8000fe0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200000e0 	.word	0x200000e0
 8000c7c:	40004400 	.word	0x40004400

08000c80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b08a      	sub	sp, #40	; 0x28
 8000c84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c86:	f107 0314 	add.w	r3, r7, #20
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	601a      	str	r2, [r3, #0]
 8000c8e:	605a      	str	r2, [r3, #4]
 8000c90:	609a      	str	r2, [r3, #8]
 8000c92:	60da      	str	r2, [r3, #12]
 8000c94:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c96:	4b6a      	ldr	r3, [pc, #424]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c9a:	4a69      	ldr	r2, [pc, #420]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000c9c:	f043 0304 	orr.w	r3, r3, #4
 8000ca0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ca2:	4b67      	ldr	r3, [pc, #412]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000ca4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ca6:	f003 0304 	and.w	r3, r3, #4
 8000caa:	613b      	str	r3, [r7, #16]
 8000cac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cae:	4b64      	ldr	r3, [pc, #400]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000cb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cb2:	4a63      	ldr	r2, [pc, #396]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000cb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cba:	4b61      	ldr	r3, [pc, #388]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000cbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc6:	4b5e      	ldr	r3, [pc, #376]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000cc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cca:	4a5d      	ldr	r2, [pc, #372]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000ccc:	f043 0301 	orr.w	r3, r3, #1
 8000cd0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cd2:	4b5b      	ldr	r3, [pc, #364]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000cd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cde:	4b58      	ldr	r3, [pc, #352]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000ce0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce2:	4a57      	ldr	r2, [pc, #348]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000ce4:	f043 0302 	orr.w	r3, r3, #2
 8000ce8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cea:	4b55      	ldr	r3, [pc, #340]	; (8000e40 <MX_GPIO_Init+0x1c0>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	f003 0302 	and.w	r3, r3, #2
 8000cf2:	607b      	str	r3, [r7, #4]
 8000cf4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000cfc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d00:	f000 fe84 	bl	8001a0c <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2160      	movs	r1, #96	; 0x60
 8000d08:	484e      	ldr	r0, [pc, #312]	; (8000e44 <MX_GPIO_Init+0x1c4>)
 8000d0a:	f000 fe7f 	bl	8001a0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000d1e:	f107 0314 	add.w	r3, r7, #20
 8000d22:	4619      	mov	r1, r3
 8000d24:	4848      	ldr	r0, [pc, #288]	; (8000e48 <MX_GPIO_Init+0x1c8>)
 8000d26:	f000 fcc7 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000d2a:	2302      	movs	r3, #2
 8000d2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d2e:	230b      	movs	r3, #11
 8000d30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000d36:	f107 0314 	add.w	r3, r7, #20
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	4842      	ldr	r0, [pc, #264]	; (8000e48 <MX_GPIO_Init+0x1c8>)
 8000d3e:	f000 fcbb 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d42:	2301      	movs	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000d46:	230b      	movs	r3, #11
 8000d48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 0314 	add.w	r3, r7, #20
 8000d52:	4619      	mov	r1, r3
 8000d54:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d58:	f000 fcae 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000d5c:	2312      	movs	r3, #18
 8000d5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d60:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d6a:	f107 0314 	add.w	r3, r7, #20
 8000d6e:	4619      	mov	r1, r3
 8000d70:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d74:	f000 fca0 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin;
 8000d78:	23e0      	movs	r3, #224	; 0xe0
 8000d7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000d7c:	2311      	movs	r3, #17
 8000d7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d80:	2301      	movs	r3, #1
 8000d82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d92:	f000 fc91 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000d96:	2301      	movs	r3, #1
 8000d98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000d9a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000d9e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4826      	ldr	r0, [pc, #152]	; (8000e44 <MX_GPIO_Init+0x1c4>)
 8000dac:	f000 fc84 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin;
 8000db0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000db4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000db6:	2301      	movs	r3, #1
 8000db8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 0314 	add.w	r3, r7, #20
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000dcc:	f000 fc74 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000dd0:	2320      	movs	r3, #32
 8000dd2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	4619      	mov	r1, r3
 8000de6:	4817      	ldr	r0, [pc, #92]	; (8000e44 <MX_GPIO_Init+0x1c4>)
 8000de8:	f000 fc66 	bl	80016b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000dec:	2340      	movs	r3, #64	; 0x40
 8000dee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000df0:	2311      	movs	r3, #17
 8000df2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000df4:	2301      	movs	r3, #1
 8000df6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000dfc:	f107 0314 	add.w	r3, r7, #20
 8000e00:	4619      	mov	r1, r3
 8000e02:	4810      	ldr	r0, [pc, #64]	; (8000e44 <MX_GPIO_Init+0x1c4>)
 8000e04:	f000 fc58 	bl	80016b8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000e08:	2200      	movs	r2, #0
 8000e0a:	2105      	movs	r1, #5
 8000e0c:	2006      	movs	r0, #6
 8000e0e:	f000 fc29 	bl	8001664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000e12:	2006      	movs	r0, #6
 8000e14:	f000 fc42 	bl	800169c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	2007      	movs	r0, #7
 8000e1e:	f000 fc21 	bl	8001664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e22:	2007      	movs	r0, #7
 8000e24:	f000 fc3a 	bl	800169c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	2105      	movs	r1, #5
 8000e2c:	200a      	movs	r0, #10
 8000e2e:	f000 fc19 	bl	8001664 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000e32:	200a      	movs	r0, #10
 8000e34:	f000 fc32 	bl	800169c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e38:	bf00      	nop
 8000e3a:	3728      	adds	r7, #40	; 0x28
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	40021000 	.word	0x40021000
 8000e44:	48000400 	.word	0x48000400
 8000e48:	48000800 	.word	0x48000800

08000e4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	4603      	mov	r3, r0
 8000e54:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8000e56:	88fb      	ldrh	r3, [r7, #6]
 8000e58:	2b10      	cmp	r3, #16
 8000e5a:	d00b      	beq.n	8000e74 <HAL_GPIO_EXTI_Callback+0x28>
 8000e5c:	2b10      	cmp	r3, #16
 8000e5e:	dc10      	bgt.n	8000e82 <HAL_GPIO_EXTI_Callback+0x36>
 8000e60:	2b01      	cmp	r3, #1
 8000e62:	d00d      	beq.n	8000e80 <HAL_GPIO_EXTI_Callback+0x34>
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d10c      	bne.n	8000e82 <HAL_GPIO_EXTI_Callback+0x36>
		{
		case Button_1_Pin:
			// Got the pin -- Give the semaphore
			osSemaphoreRelease(Button_1_Semaphore_BinaryHandle);
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <HAL_GPIO_EXTI_Callback+0x40>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	f003 fce1 	bl	8004834 <osSemaphoreRelease>
			break;
 8000e72:	e006      	b.n	8000e82 <HAL_GPIO_EXTI_Callback+0x36>

		case Button_2_Pin:
			osSemaphoreRelease(Button_2_Semaphore_BinaryHandle);
 8000e74:	4b06      	ldr	r3, [pc, #24]	; (8000e90 <HAL_GPIO_EXTI_Callback+0x44>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f003 fcdb 	bl	8004834 <osSemaphoreRelease>
			break;
 8000e7e:	e000      	b.n	8000e82 <HAL_GPIO_EXTI_Callback+0x36>

		case Button_3_Pin:
			break;
 8000e80:	bf00      	nop
		}

	}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	bf00      	nop
 8000e8c:	20000178 	.word	0x20000178
 8000e90:	2000017c 	.word	0x2000017c

08000e94 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000e9c:	1d39      	adds	r1, r7, #4
 8000e9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ea2:	2201      	movs	r2, #1
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <__io_putchar+0x20>)
 8000ea6:	f002 fc45 	bl	8003734 <HAL_UART_Transmit>

  return ch;
 8000eaa:	687b      	ldr	r3, [r7, #4]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3708      	adds	r7, #8
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	200000e0 	.word	0x200000e0

08000eb8 <Semaphore_Toggle_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Semaphore_Toggle_Task */
void Semaphore_Toggle_Task(void *argument)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

	  /* USER CODE BEGIN SemaphoreToggle_Task */
	  /* Infinite loop */
	  for(;;)
	  {
		osSemaphoreAcquire(Button_1_Semaphore_BinaryHandle,100000);
 8000ec0:	4b06      	ldr	r3, [pc, #24]	; (8000edc <Semaphore_Toggle_Task+0x24>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	4906      	ldr	r1, [pc, #24]	; (8000ee0 <Semaphore_Toggle_Task+0x28>)
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f003 fc62 	bl	8004790 <osSemaphoreAcquire>
		HAL_GPIO_TogglePin(LED_D4_GPIO_Port , LED_D4_Pin);
 8000ecc:	2140      	movs	r1, #64	; 0x40
 8000ece:	4805      	ldr	r0, [pc, #20]	; (8000ee4 <Semaphore_Toggle_Task+0x2c>)
 8000ed0:	f000 fdb4 	bl	8001a3c <HAL_GPIO_TogglePin>
		osDelay(1);
 8000ed4:	2001      	movs	r0, #1
 8000ed6:	f003 faa5 	bl	8004424 <osDelay>
		osSemaphoreAcquire(Button_1_Semaphore_BinaryHandle,100000);
 8000eda:	e7f1      	b.n	8000ec0 <Semaphore_Toggle_Task+0x8>
 8000edc:	20000178 	.word	0x20000178
 8000ee0:	000186a0 	.word	0x000186a0
 8000ee4:	48000400 	.word	0x48000400

08000ee8 <NotifyToggleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NotifyToggleTask */
void NotifyToggleTask(void *argument)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b082      	sub	sp, #8
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NotifyToggleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ef0:	2001      	movs	r0, #1
 8000ef2:	f003 fa97 	bl	8004424 <osDelay>
 8000ef6:	e7fb      	b.n	8000ef0 <NotifyToggleTask+0x8>

08000ef8 <SW_Timer_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SW_Timer_Task */
void SW_Timer_Task(void *argument)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SW_Timer_Task */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Button_2_Semaphore_BinaryHandle,100000);
 8000f00:	4b0e      	ldr	r3, [pc, #56]	; (8000f3c <SW_Timer_Task+0x44>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	490e      	ldr	r1, [pc, #56]	; (8000f40 <SW_Timer_Task+0x48>)
 8000f06:	4618      	mov	r0, r3
 8000f08:	f003 fc42 	bl	8004790 <osSemaphoreAcquire>
	  // A button push starts or stops the SW Timer
	  // Button push is indicated by the semaphore
	if (osTimerIsRunning(SW_Timer_7SegHandle))
 8000f0c:	4b0d      	ldr	r3, [pc, #52]	; (8000f44 <SW_Timer_Task+0x4c>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4618      	mov	r0, r3
 8000f12:	f003 fb98 	bl	8004646 <osTimerIsRunning>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d005      	beq.n	8000f28 <SW_Timer_Task+0x30>
		osTimerStop(SW_Timer_7SegHandle );
 8000f1c:	4b09      	ldr	r3, [pc, #36]	; (8000f44 <SW_Timer_Task+0x4c>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f003 fb59 	bl	80045d8 <osTimerStop>
 8000f26:	e005      	b.n	8000f34 <SW_Timer_Task+0x3c>
	else
		osTimerStart(SW_Timer_7SegHandle , 200);
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <SW_Timer_Task+0x4c>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	21c8      	movs	r1, #200	; 0xc8
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fb24 	bl	800457c <osTimerStart>
    osDelay(1);
 8000f34:	2001      	movs	r0, #1
 8000f36:	f003 fa75 	bl	8004424 <osDelay>
	osSemaphoreAcquire(Button_2_Semaphore_BinaryHandle,100000);
 8000f3a:	e7e1      	b.n	8000f00 <SW_Timer_Task+0x8>
 8000f3c:	2000017c 	.word	0x2000017c
 8000f40:	000186a0 	.word	0x000186a0
 8000f44:	20000174 	.word	0x20000174

08000f48 <SW_Timer_Countdown>:
  /* USER CODE END SW_Timer_Task */
}

/* SW_Timer_Countdown function */
void SW_Timer_Countdown(void *argument)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	/*
	 * When the timer expires, decrement the Count and Display it
	 * on the 7-Seg Upper
	 */

	if (countdown_display == 0) countdown_display = 99;
 8000f50:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <SW_Timer_Countdown+0x60>)
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d103      	bne.n	8000f60 <SW_Timer_Countdown+0x18>
 8000f58:	4b13      	ldr	r3, [pc, #76]	; (8000fa8 <SW_Timer_Countdown+0x60>)
 8000f5a:	2263      	movs	r2, #99	; 0x63
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	e004      	b.n	8000f6a <SW_Timer_Countdown+0x22>
		else countdown_display--;
 8000f60:	4b11      	ldr	r3, [pc, #68]	; (8000fa8 <SW_Timer_Countdown+0x60>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	3b01      	subs	r3, #1
 8000f66:	4a10      	ldr	r2, [pc, #64]	; (8000fa8 <SW_Timer_Countdown+0x60>)
 8000f68:	6013      	str	r3, [r2, #0]

	MultiFunctionShield_Display(countdown_display * 100 );  // Put them on the left 2
 8000f6a:	4b0f      	ldr	r3, [pc, #60]	; (8000fa8 <SW_Timer_Countdown+0x60>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	461a      	mov	r2, r3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4413      	add	r3, r2
 8000f76:	461a      	mov	r2, r3
 8000f78:	0091      	lsls	r1, r2, #2
 8000f7a:	461a      	mov	r2, r3
 8000f7c:	460b      	mov	r3, r1
 8000f7e:	4413      	add	r3, r2
 8000f80:	009b      	lsls	r3, r3, #2
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	b21b      	sxth	r3, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f7ff fb96 	bl	80006b8 <MultiFunctionShield_Display>
	MultiFunctionShield_Single_Digit_Display(2, -1);//blank the bottom two
 8000f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000f90:	2002      	movs	r0, #2
 8000f92:	f7ff fb39 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	MultiFunctionShield_Single_Digit_Display(1, -1);
 8000f96:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9a:	2001      	movs	r0, #1
 8000f9c:	f7ff fb34 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>

  /* USER CODE END SW_Timer_Countdown */
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20000000 	.word	0x20000000

08000fac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d101      	bne.n	8000fc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000fbe:	f000 fa79 	bl	80014b4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim17 )
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	4a05      	ldr	r2, [pc, #20]	; (8000fdc <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d101      	bne.n	8000fce <HAL_TIM_PeriodElapsedCallback+0x22>
  {
	  MultiFunctionShield__ISRFunc();
 8000fca:	f7ff fcfd 	bl	80009c8 <MultiFunctionShield__ISRFunc>
  }

  /* USER CODE END Callback 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	3708      	adds	r7, #8
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40000400 	.word	0x40000400
 8000fdc:	20000094 	.word	0x20000094

08000fe0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe4:	b672      	cpsid	i
}
 8000fe6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <Error_Handler+0x8>
	...

08000fec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff2:	4b11      	ldr	r3, [pc, #68]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	4a10      	ldr	r2, [pc, #64]	; (8001038 <HAL_MspInit+0x4c>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffe:	4b0e      	ldr	r3, [pc, #56]	; (8001038 <HAL_MspInit+0x4c>)
 8001000:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800100a:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_MspInit+0x4c>)
 800100c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100e:	4a0a      	ldr	r2, [pc, #40]	; (8001038 <HAL_MspInit+0x4c>)
 8001010:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001014:	6593      	str	r3, [r2, #88]	; 0x58
 8001016:	4b08      	ldr	r3, [pc, #32]	; (8001038 <HAL_MspInit+0x4c>)
 8001018:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800101e:	603b      	str	r3, [r7, #0]
 8001020:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001022:	2200      	movs	r2, #0
 8001024:	210f      	movs	r1, #15
 8001026:	f06f 0001 	mvn.w	r0, #1
 800102a:	f000 fb1b 	bl	8001664 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40021000 	.word	0x40021000

0800103c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	; (8001080 <HAL_TIM_Base_MspInit+0x44>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d113      	bne.n	8001076 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 800104e:	4b0d      	ldr	r3, [pc, #52]	; (8001084 <HAL_TIM_Base_MspInit+0x48>)
 8001050:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001052:	4a0c      	ldr	r2, [pc, #48]	; (8001084 <HAL_TIM_Base_MspInit+0x48>)
 8001054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001058:	6613      	str	r3, [r2, #96]	; 0x60
 800105a:	4b0a      	ldr	r3, [pc, #40]	; (8001084 <HAL_TIM_Base_MspInit+0x48>)
 800105c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800105e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001062:	60fb      	str	r3, [r7, #12]
 8001064:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2105      	movs	r1, #5
 800106a:	201a      	movs	r0, #26
 800106c:	f000 fafa 	bl	8001664 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8001070:	201a      	movs	r0, #26
 8001072:	f000 fb13 	bl	800169c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8001076:	bf00      	nop
 8001078:	3710      	adds	r7, #16
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40014800 	.word	0x40014800
 8001084:	40021000 	.word	0x40021000

08001088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b0ac      	sub	sp, #176	; 0xb0
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001090:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	60da      	str	r2, [r3, #12]
 800109e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80010a0:	f107 0314 	add.w	r3, r7, #20
 80010a4:	2288      	movs	r2, #136	; 0x88
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f006 fea6 	bl	8007dfa <memset>
  if(huart->Instance==USART2)
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a21      	ldr	r2, [pc, #132]	; (8001138 <HAL_UART_MspInit+0xb0>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d13b      	bne.n	8001130 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80010b8:	2302      	movs	r3, #2
 80010ba:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80010bc:	2300      	movs	r3, #0
 80010be:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80010c0:	f107 0314 	add.w	r3, r7, #20
 80010c4:	4618      	mov	r0, r3
 80010c6:	f001 fb81 	bl	80027cc <HAL_RCCEx_PeriphCLKConfig>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80010d0:	f7ff ff86 	bl	8000fe0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010d4:	4b19      	ldr	r3, [pc, #100]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010d8:	4a18      	ldr	r2, [pc, #96]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010de:	6593      	str	r3, [r2, #88]	; 0x58
 80010e0:	4b16      	ldr	r3, [pc, #88]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	613b      	str	r3, [r7, #16]
 80010ea:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ec:	4b13      	ldr	r3, [pc, #76]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f0:	4a12      	ldr	r2, [pc, #72]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010f2:	f043 0301 	orr.w	r3, r3, #1
 80010f6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <HAL_UART_MspInit+0xb4>)
 80010fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
 8001102:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001104:	230c      	movs	r3, #12
 8001106:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800110a:	2302      	movs	r3, #2
 800110c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001110:	2300      	movs	r3, #0
 8001112:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001116:	2303      	movs	r3, #3
 8001118:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800111c:	2307      	movs	r3, #7
 800111e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001122:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001126:	4619      	mov	r1, r3
 8001128:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800112c:	f000 fac4 	bl	80016b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001130:	bf00      	nop
 8001132:	37b0      	adds	r7, #176	; 0xb0
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40004400 	.word	0x40004400
 800113c:	40021000 	.word	0x40021000

08001140 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b08e      	sub	sp, #56	; 0x38
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8001148:	2300      	movs	r3, #0
 800114a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 800114e:	4b34      	ldr	r3, [pc, #208]	; (8001220 <HAL_InitTick+0xe0>)
 8001150:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001152:	4a33      	ldr	r2, [pc, #204]	; (8001220 <HAL_InitTick+0xe0>)
 8001154:	f043 0302 	orr.w	r3, r3, #2
 8001158:	6593      	str	r3, [r2, #88]	; 0x58
 800115a:	4b31      	ldr	r3, [pc, #196]	; (8001220 <HAL_InitTick+0xe0>)
 800115c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115e:	f003 0302 	and.w	r3, r3, #2
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001166:	f107 0210 	add.w	r2, r7, #16
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4611      	mov	r1, r2
 8001170:	4618      	mov	r0, r3
 8001172:	f001 fa99 	bl	80026a8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001176:	6a3b      	ldr	r3, [r7, #32]
 8001178:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800117a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800117c:	2b00      	cmp	r3, #0
 800117e:	d103      	bne.n	8001188 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001180:	f001 fa66 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 8001184:	6378      	str	r0, [r7, #52]	; 0x34
 8001186:	e004      	b.n	8001192 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001188:	f001 fa62 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 800118c:	4603      	mov	r3, r0
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001192:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001194:	4a23      	ldr	r2, [pc, #140]	; (8001224 <HAL_InitTick+0xe4>)
 8001196:	fba2 2303 	umull	r2, r3, r2, r3
 800119a:	0c9b      	lsrs	r3, r3, #18
 800119c:	3b01      	subs	r3, #1
 800119e:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 80011a0:	4b21      	ldr	r3, [pc, #132]	; (8001228 <HAL_InitTick+0xe8>)
 80011a2:	4a22      	ldr	r2, [pc, #136]	; (800122c <HAL_InitTick+0xec>)
 80011a4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 80011a6:	4b20      	ldr	r3, [pc, #128]	; (8001228 <HAL_InitTick+0xe8>)
 80011a8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011ac:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 80011ae:	4a1e      	ldr	r2, [pc, #120]	; (8001228 <HAL_InitTick+0xe8>)
 80011b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80011b2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 80011b4:	4b1c      	ldr	r3, [pc, #112]	; (8001228 <HAL_InitTick+0xe8>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_InitTick+0xe8>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011c0:	4b19      	ldr	r3, [pc, #100]	; (8001228 <HAL_InitTick+0xe8>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 80011c6:	4818      	ldr	r0, [pc, #96]	; (8001228 <HAL_InitTick+0xe8>)
 80011c8:	f001 ffbc 	bl	8003144 <HAL_TIM_Base_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80011d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d11b      	bne.n	8001212 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 80011da:	4813      	ldr	r0, [pc, #76]	; (8001228 <HAL_InitTick+0xe8>)
 80011dc:	f002 f80a 	bl	80031f4 <HAL_TIM_Base_Start_IT>
 80011e0:	4603      	mov	r3, r0
 80011e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80011e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d111      	bne.n	8001212 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80011ee:	201d      	movs	r0, #29
 80011f0:	f000 fa54 	bl	800169c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b0f      	cmp	r3, #15
 80011f8:	d808      	bhi.n	800120c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 80011fa:	2200      	movs	r2, #0
 80011fc:	6879      	ldr	r1, [r7, #4]
 80011fe:	201d      	movs	r0, #29
 8001200:	f000 fa30 	bl	8001664 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001204:	4a0a      	ldr	r2, [pc, #40]	; (8001230 <HAL_InitTick+0xf0>)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6013      	str	r3, [r2, #0]
 800120a:	e002      	b.n	8001212 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001212:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8001216:	4618      	mov	r0, r3
 8001218:	3738      	adds	r7, #56	; 0x38
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	40021000 	.word	0x40021000
 8001224:	431bde83 	.word	0x431bde83
 8001228:	20000184 	.word	0x20000184
 800122c:	40000400 	.word	0x40000400
 8001230:	20000008 	.word	0x20000008

08001234 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001238:	e7fe      	b.n	8001238 <NMI_Handler+0x4>

0800123a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800123e:	e7fe      	b.n	800123e <HardFault_Handler+0x4>

08001240 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001244:	e7fe      	b.n	8001244 <MemManage_Handler+0x4>

08001246 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001246:	b480      	push	{r7}
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800124a:	e7fe      	b.n	800124a <BusFault_Handler+0x4>

0800124c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001250:	e7fe      	b.n	8001250 <UsageFault_Handler+0x4>

08001252 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001252:	b480      	push	{r7}
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8001264:	2001      	movs	r0, #1
 8001266:	f000 fc03 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}

0800126e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8001272:	2002      	movs	r0, #2
 8001274:	f000 fbfc 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	bd80      	pop	{r7, pc}

0800127c <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8001280:	2010      	movs	r0, #16
 8001282:	f000 fbf5 	bl	8001a70 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001292:	f002 f81f 	bl	80032d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	20000094 	.word	0x20000094

080012a0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <TIM3_IRQHandler+0x10>)
 80012a6:	f002 f815 	bl	80032d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000184 	.word	0x20000184

080012b4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b086      	sub	sp, #24
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012c0:	2300      	movs	r3, #0
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e00a      	b.n	80012dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80012c6:	f3af 8000 	nop.w
 80012ca:	4601      	mov	r1, r0
 80012cc:	68bb      	ldr	r3, [r7, #8]
 80012ce:	1c5a      	adds	r2, r3, #1
 80012d0:	60ba      	str	r2, [r7, #8]
 80012d2:	b2ca      	uxtb	r2, r1
 80012d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	3301      	adds	r3, #1
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbf0      	blt.n	80012c6 <_read+0x12>
  }

  return len;
 80012e4:	687b      	ldr	r3, [r7, #4]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}

080012ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ee:	b580      	push	{r7, lr}
 80012f0:	b086      	sub	sp, #24
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	60f8      	str	r0, [r7, #12]
 80012f6:	60b9      	str	r1, [r7, #8]
 80012f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e009      	b.n	8001314 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	1c5a      	adds	r2, r3, #1
 8001304:	60ba      	str	r2, [r7, #8]
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fdc3 	bl	8000e94 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130e:	697b      	ldr	r3, [r7, #20]
 8001310:	3301      	adds	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
 8001314:	697a      	ldr	r2, [r7, #20]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	429a      	cmp	r2, r3
 800131a:	dbf1      	blt.n	8001300 <_write+0x12>
  }
  return len;
 800131c:	687b      	ldr	r3, [r7, #4]
}
 800131e:	4618      	mov	r0, r3
 8001320:	3718      	adds	r7, #24
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <_close>:

int _close(int file)
{
 8001326:	b480      	push	{r7}
 8001328:	b083      	sub	sp, #12
 800132a:	af00      	add	r7, sp, #0
 800132c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001332:	4618      	mov	r0, r3
 8001334:	370c      	adds	r7, #12
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr

0800133e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800133e:	b480      	push	{r7}
 8001340:	b083      	sub	sp, #12
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800134e:	605a      	str	r2, [r3, #4]
  return 0;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	370c      	adds	r7, #12
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr

0800135e <_isatty>:

int _isatty(int file)
{
 800135e:	b480      	push	{r7}
 8001360:	b083      	sub	sp, #12
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001366:	2301      	movs	r3, #1
}
 8001368:	4618      	mov	r0, r3
 800136a:	370c      	adds	r7, #12
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001374:	b480      	push	{r7}
 8001376:	b085      	sub	sp, #20
 8001378:	af00      	add	r7, sp, #0
 800137a:	60f8      	str	r0, [r7, #12]
 800137c:	60b9      	str	r1, [r7, #8]
 800137e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3714      	adds	r7, #20
 8001386:	46bd      	mov	sp, r7
 8001388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138c:	4770      	bx	lr
	...

08001390 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b086      	sub	sp, #24
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001398:	4a14      	ldr	r2, [pc, #80]	; (80013ec <_sbrk+0x5c>)
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <_sbrk+0x60>)
 800139c:	1ad3      	subs	r3, r2, r3
 800139e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <_sbrk+0x64>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d102      	bne.n	80013b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <_sbrk+0x64>)
 80013ae:	4a12      	ldr	r2, [pc, #72]	; (80013f8 <_sbrk+0x68>)
 80013b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <_sbrk+0x64>)
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	4413      	add	r3, r2
 80013ba:	693a      	ldr	r2, [r7, #16]
 80013bc:	429a      	cmp	r2, r3
 80013be:	d207      	bcs.n	80013d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80013c0:	f006 fdc0 	bl	8007f44 <__errno>
 80013c4:	4603      	mov	r3, r0
 80013c6:	220c      	movs	r2, #12
 80013c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80013ca:	f04f 33ff 	mov.w	r3, #4294967295
 80013ce:	e009      	b.n	80013e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80013d0:	4b08      	ldr	r3, [pc, #32]	; (80013f4 <_sbrk+0x64>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80013d6:	4b07      	ldr	r3, [pc, #28]	; (80013f4 <_sbrk+0x64>)
 80013d8:	681a      	ldr	r2, [r3, #0]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	4413      	add	r3, r2
 80013de:	4a05      	ldr	r2, [pc, #20]	; (80013f4 <_sbrk+0x64>)
 80013e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013e2:	68fb      	ldr	r3, [r7, #12]
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}
 80013ec:	20018000 	.word	0x20018000
 80013f0:	00000400 	.word	0x00000400
 80013f4:	200001d0 	.word	0x200001d0
 80013f8:	20004ba8 	.word	0x20004ba8

080013fc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <SystemInit+0x20>)
 8001402:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001406:	4a05      	ldr	r2, [pc, #20]	; (800141c <SystemInit+0x20>)
 8001408:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800140c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	e000ed00 	.word	0xe000ed00

08001420 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001458 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001424:	f7ff ffea 	bl	80013fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001428:	480c      	ldr	r0, [pc, #48]	; (800145c <LoopForever+0x6>)
  ldr r1, =_edata
 800142a:	490d      	ldr	r1, [pc, #52]	; (8001460 <LoopForever+0xa>)
  ldr r2, =_sidata
 800142c:	4a0d      	ldr	r2, [pc, #52]	; (8001464 <LoopForever+0xe>)
  movs r3, #0
 800142e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001430:	e002      	b.n	8001438 <LoopCopyDataInit>

08001432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001436:	3304      	adds	r3, #4

08001438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800143a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800143c:	d3f9      	bcc.n	8001432 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800143e:	4a0a      	ldr	r2, [pc, #40]	; (8001468 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001440:	4c0a      	ldr	r4, [pc, #40]	; (800146c <LoopForever+0x16>)
  movs r3, #0
 8001442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001444:	e001      	b.n	800144a <LoopFillZerobss>

08001446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001448:	3204      	adds	r2, #4

0800144a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800144a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800144c:	d3fb      	bcc.n	8001446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800144e:	f006 fd7f 	bl	8007f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001452:	f7ff faeb 	bl	8000a2c <main>

08001456 <LoopForever>:

LoopForever:
    b LoopForever
 8001456:	e7fe      	b.n	8001456 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001458:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800145c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001460:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001464:	08008d30 	.word	0x08008d30
  ldr r2, =_sbss
 8001468:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800146c:	20004ba4 	.word	0x20004ba4

08001470 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001470:	e7fe      	b.n	8001470 <ADC1_2_IRQHandler>
	...

08001474 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800147a:	2300      	movs	r3, #0
 800147c:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800147e:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_Init+0x3c>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4a0b      	ldr	r2, [pc, #44]	; (80014b0 <HAL_Init+0x3c>)
 8001484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001488:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800148a:	2003      	movs	r0, #3
 800148c:	f000 f8df 	bl	800164e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001490:	200f      	movs	r0, #15
 8001492:	f7ff fe55 	bl	8001140 <HAL_InitTick>
 8001496:	4603      	mov	r3, r0
 8001498:	2b00      	cmp	r3, #0
 800149a:	d002      	beq.n	80014a2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	71fb      	strb	r3, [r7, #7]
 80014a0:	e001      	b.n	80014a6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80014a2:	f7ff fda3 	bl	8000fec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80014a6:	79fb      	ldrb	r3, [r7, #7]
}
 80014a8:	4618      	mov	r0, r3
 80014aa:	3708      	adds	r7, #8
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd80      	pop	{r7, pc}
 80014b0:	40022000 	.word	0x40022000

080014b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80014b4:	b480      	push	{r7}
 80014b6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80014b8:	4b06      	ldr	r3, [pc, #24]	; (80014d4 <HAL_IncTick+0x20>)
 80014ba:	781b      	ldrb	r3, [r3, #0]
 80014bc:	461a      	mov	r2, r3
 80014be:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_IncTick+0x24>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4413      	add	r3, r2
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_IncTick+0x24>)
 80014c6:	6013      	str	r3, [r2, #0]
}
 80014c8:	bf00      	nop
 80014ca:	46bd      	mov	sp, r7
 80014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d0:	4770      	bx	lr
 80014d2:	bf00      	nop
 80014d4:	2000000c 	.word	0x2000000c
 80014d8:	200001d4 	.word	0x200001d4

080014dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return uwTick;
 80014e0:	4b03      	ldr	r3, [pc, #12]	; (80014f0 <HAL_GetTick+0x14>)
 80014e2:	681b      	ldr	r3, [r3, #0]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	200001d4 	.word	0x200001d4

080014f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f003 0307 	and.w	r3, r3, #7
 8001502:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001504:	4b0c      	ldr	r3, [pc, #48]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001506:	68db      	ldr	r3, [r3, #12]
 8001508:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800150a:	68ba      	ldr	r2, [r7, #8]
 800150c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001510:	4013      	ands	r3, r2
 8001512:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800151c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001520:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001524:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001526:	4a04      	ldr	r2, [pc, #16]	; (8001538 <__NVIC_SetPriorityGrouping+0x44>)
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	60d3      	str	r3, [r2, #12]
}
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr
 8001538:	e000ed00 	.word	0xe000ed00

0800153c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001540:	4b04      	ldr	r3, [pc, #16]	; (8001554 <__NVIC_GetPriorityGrouping+0x18>)
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	0a1b      	lsrs	r3, r3, #8
 8001546:	f003 0307 	and.w	r3, r3, #7
}
 800154a:	4618      	mov	r0, r3
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000ed00 	.word	0xe000ed00

08001558 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001558:	b480      	push	{r7}
 800155a:	b083      	sub	sp, #12
 800155c:	af00      	add	r7, sp, #0
 800155e:	4603      	mov	r3, r0
 8001560:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	2b00      	cmp	r3, #0
 8001568:	db0b      	blt.n	8001582 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	f003 021f 	and.w	r2, r3, #31
 8001570:	4907      	ldr	r1, [pc, #28]	; (8001590 <__NVIC_EnableIRQ+0x38>)
 8001572:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001576:	095b      	lsrs	r3, r3, #5
 8001578:	2001      	movs	r0, #1
 800157a:	fa00 f202 	lsl.w	r2, r0, r2
 800157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001582:	bf00      	nop
 8001584:	370c      	adds	r7, #12
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	e000e100 	.word	0xe000e100

08001594 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	4603      	mov	r3, r0
 800159c:	6039      	str	r1, [r7, #0]
 800159e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	db0a      	blt.n	80015be <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	b2da      	uxtb	r2, r3
 80015ac:	490c      	ldr	r1, [pc, #48]	; (80015e0 <__NVIC_SetPriority+0x4c>)
 80015ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b2:	0112      	lsls	r2, r2, #4
 80015b4:	b2d2      	uxtb	r2, r2
 80015b6:	440b      	add	r3, r1
 80015b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015bc:	e00a      	b.n	80015d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	4908      	ldr	r1, [pc, #32]	; (80015e4 <__NVIC_SetPriority+0x50>)
 80015c4:	79fb      	ldrb	r3, [r7, #7]
 80015c6:	f003 030f 	and.w	r3, r3, #15
 80015ca:	3b04      	subs	r3, #4
 80015cc:	0112      	lsls	r2, r2, #4
 80015ce:	b2d2      	uxtb	r2, r2
 80015d0:	440b      	add	r3, r1
 80015d2:	761a      	strb	r2, [r3, #24]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	e000e100 	.word	0xe000e100
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b089      	sub	sp, #36	; 0x24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	f003 0307 	and.w	r3, r3, #7
 80015fa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015fc:	69fb      	ldr	r3, [r7, #28]
 80015fe:	f1c3 0307 	rsb	r3, r3, #7
 8001602:	2b04      	cmp	r3, #4
 8001604:	bf28      	it	cs
 8001606:	2304      	movcs	r3, #4
 8001608:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800160a:	69fb      	ldr	r3, [r7, #28]
 800160c:	3304      	adds	r3, #4
 800160e:	2b06      	cmp	r3, #6
 8001610:	d902      	bls.n	8001618 <NVIC_EncodePriority+0x30>
 8001612:	69fb      	ldr	r3, [r7, #28]
 8001614:	3b03      	subs	r3, #3
 8001616:	e000      	b.n	800161a <NVIC_EncodePriority+0x32>
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800161c:	f04f 32ff 	mov.w	r2, #4294967295
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	fa02 f303 	lsl.w	r3, r2, r3
 8001626:	43da      	mvns	r2, r3
 8001628:	68bb      	ldr	r3, [r7, #8]
 800162a:	401a      	ands	r2, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001630:	f04f 31ff 	mov.w	r1, #4294967295
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	fa01 f303 	lsl.w	r3, r1, r3
 800163a:	43d9      	mvns	r1, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001640:	4313      	orrs	r3, r2
         );
}
 8001642:	4618      	mov	r0, r3
 8001644:	3724      	adds	r7, #36	; 0x24
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr

0800164e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001656:	6878      	ldr	r0, [r7, #4]
 8001658:	f7ff ff4c 	bl	80014f4 <__NVIC_SetPriorityGrouping>
}
 800165c:	bf00      	nop
 800165e:	3708      	adds	r7, #8
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	60b9      	str	r1, [r7, #8]
 800166e:	607a      	str	r2, [r7, #4]
 8001670:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001672:	2300      	movs	r3, #0
 8001674:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001676:	f7ff ff61 	bl	800153c <__NVIC_GetPriorityGrouping>
 800167a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	68b9      	ldr	r1, [r7, #8]
 8001680:	6978      	ldr	r0, [r7, #20]
 8001682:	f7ff ffb1 	bl	80015e8 <NVIC_EncodePriority>
 8001686:	4602      	mov	r2, r0
 8001688:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168c:	4611      	mov	r1, r2
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff80 	bl	8001594 <__NVIC_SetPriority>
}
 8001694:	bf00      	nop
 8001696:	3718      	adds	r7, #24
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	4603      	mov	r3, r0
 80016a4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7ff ff54 	bl	8001558 <__NVIC_EnableIRQ>
}
 80016b0:	bf00      	nop
 80016b2:	3708      	adds	r7, #8
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b8:	b480      	push	{r7}
 80016ba:	b087      	sub	sp, #28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
 80016c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016c2:	2300      	movs	r3, #0
 80016c4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c6:	e17f      	b.n	80019c8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2101      	movs	r1, #1
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	fa01 f303 	lsl.w	r3, r1, r3
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	f000 8171 	beq.w	80019c2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d005      	beq.n	80016f8 <HAL_GPIO_Init+0x40>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 0303 	and.w	r3, r3, #3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d130      	bne.n	800175a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	005b      	lsls	r3, r3, #1
 8001702:	2203      	movs	r2, #3
 8001704:	fa02 f303 	lsl.w	r3, r2, r3
 8001708:	43db      	mvns	r3, r3
 800170a:	693a      	ldr	r2, [r7, #16]
 800170c:	4013      	ands	r3, r2
 800170e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	68da      	ldr	r2, [r3, #12]
 8001714:	697b      	ldr	r3, [r7, #20]
 8001716:	005b      	lsls	r3, r3, #1
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	693a      	ldr	r2, [r7, #16]
 800171e:	4313      	orrs	r3, r2
 8001720:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	693a      	ldr	r2, [r7, #16]
 8001726:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800172e:	2201      	movs	r2, #1
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	fa02 f303 	lsl.w	r3, r2, r3
 8001736:	43db      	mvns	r3, r3
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	091b      	lsrs	r3, r3, #4
 8001744:	f003 0201 	and.w	r2, r3, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	693a      	ldr	r2, [r7, #16]
 8001750:	4313      	orrs	r3, r2
 8001752:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	693a      	ldr	r2, [r7, #16]
 8001758:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 0303 	and.w	r3, r3, #3
 8001762:	2b03      	cmp	r3, #3
 8001764:	d118      	bne.n	8001798 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800176a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 800176c:	2201      	movs	r2, #1
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	08db      	lsrs	r3, r3, #3
 8001782:	f003 0201 	and.w	r2, r3, #1
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fa02 f303 	lsl.w	r3, r2, r3
 800178c:	693a      	ldr	r2, [r7, #16]
 800178e:	4313      	orrs	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	693a      	ldr	r2, [r7, #16]
 8001796:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b03      	cmp	r3, #3
 80017a2:	d017      	beq.n	80017d4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017aa:	697b      	ldr	r3, [r7, #20]
 80017ac:	005b      	lsls	r3, r3, #1
 80017ae:	2203      	movs	r2, #3
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	689a      	ldr	r2, [r3, #8]
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	005b      	lsls	r3, r3, #1
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	4313      	orrs	r3, r2
 80017cc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	693a      	ldr	r2, [r7, #16]
 80017d2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f003 0303 	and.w	r3, r3, #3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d123      	bne.n	8001828 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	08da      	lsrs	r2, r3, #3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	3208      	adds	r2, #8
 80017e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017ec:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	f003 0307 	and.w	r3, r3, #7
 80017f4:	009b      	lsls	r3, r3, #2
 80017f6:	220f      	movs	r2, #15
 80017f8:	fa02 f303 	lsl.w	r3, r2, r3
 80017fc:	43db      	mvns	r3, r3
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4013      	ands	r3, r2
 8001802:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	691a      	ldr	r2, [r3, #16]
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	f003 0307 	and.w	r3, r3, #7
 800180e:	009b      	lsls	r3, r3, #2
 8001810:	fa02 f303 	lsl.w	r3, r2, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4313      	orrs	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	08da      	lsrs	r2, r3, #3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	3208      	adds	r2, #8
 8001822:	6939      	ldr	r1, [r7, #16]
 8001824:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800182e:	697b      	ldr	r3, [r7, #20]
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	2203      	movs	r2, #3
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	693a      	ldr	r2, [r7, #16]
 800183c:	4013      	ands	r3, r2
 800183e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f003 0203 	and.w	r2, r3, #3
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	005b      	lsls	r3, r3, #1
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	693a      	ldr	r2, [r7, #16]
 8001852:	4313      	orrs	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	693a      	ldr	r2, [r7, #16]
 800185a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001864:	2b00      	cmp	r3, #0
 8001866:	f000 80ac 	beq.w	80019c2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800186a:	4b5f      	ldr	r3, [pc, #380]	; (80019e8 <HAL_GPIO_Init+0x330>)
 800186c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800186e:	4a5e      	ldr	r2, [pc, #376]	; (80019e8 <HAL_GPIO_Init+0x330>)
 8001870:	f043 0301 	orr.w	r3, r3, #1
 8001874:	6613      	str	r3, [r2, #96]	; 0x60
 8001876:	4b5c      	ldr	r3, [pc, #368]	; (80019e8 <HAL_GPIO_Init+0x330>)
 8001878:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	60bb      	str	r3, [r7, #8]
 8001880:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001882:	4a5a      	ldr	r2, [pc, #360]	; (80019ec <HAL_GPIO_Init+0x334>)
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	089b      	lsrs	r3, r3, #2
 8001888:	3302      	adds	r3, #2
 800188a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800188e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	f003 0303 	and.w	r3, r3, #3
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	220f      	movs	r2, #15
 800189a:	fa02 f303 	lsl.w	r3, r2, r3
 800189e:	43db      	mvns	r3, r3
 80018a0:	693a      	ldr	r2, [r7, #16]
 80018a2:	4013      	ands	r3, r2
 80018a4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80018ac:	d025      	beq.n	80018fa <HAL_GPIO_Init+0x242>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4f      	ldr	r2, [pc, #316]	; (80019f0 <HAL_GPIO_Init+0x338>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d01f      	beq.n	80018f6 <HAL_GPIO_Init+0x23e>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4e      	ldr	r2, [pc, #312]	; (80019f4 <HAL_GPIO_Init+0x33c>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d019      	beq.n	80018f2 <HAL_GPIO_Init+0x23a>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4d      	ldr	r2, [pc, #308]	; (80019f8 <HAL_GPIO_Init+0x340>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d013      	beq.n	80018ee <HAL_GPIO_Init+0x236>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a4c      	ldr	r2, [pc, #304]	; (80019fc <HAL_GPIO_Init+0x344>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00d      	beq.n	80018ea <HAL_GPIO_Init+0x232>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a4b      	ldr	r2, [pc, #300]	; (8001a00 <HAL_GPIO_Init+0x348>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d007      	beq.n	80018e6 <HAL_GPIO_Init+0x22e>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a4a      	ldr	r2, [pc, #296]	; (8001a04 <HAL_GPIO_Init+0x34c>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d101      	bne.n	80018e2 <HAL_GPIO_Init+0x22a>
 80018de:	2306      	movs	r3, #6
 80018e0:	e00c      	b.n	80018fc <HAL_GPIO_Init+0x244>
 80018e2:	2307      	movs	r3, #7
 80018e4:	e00a      	b.n	80018fc <HAL_GPIO_Init+0x244>
 80018e6:	2305      	movs	r3, #5
 80018e8:	e008      	b.n	80018fc <HAL_GPIO_Init+0x244>
 80018ea:	2304      	movs	r3, #4
 80018ec:	e006      	b.n	80018fc <HAL_GPIO_Init+0x244>
 80018ee:	2303      	movs	r3, #3
 80018f0:	e004      	b.n	80018fc <HAL_GPIO_Init+0x244>
 80018f2:	2302      	movs	r3, #2
 80018f4:	e002      	b.n	80018fc <HAL_GPIO_Init+0x244>
 80018f6:	2301      	movs	r3, #1
 80018f8:	e000      	b.n	80018fc <HAL_GPIO_Init+0x244>
 80018fa:	2300      	movs	r3, #0
 80018fc:	697a      	ldr	r2, [r7, #20]
 80018fe:	f002 0203 	and.w	r2, r2, #3
 8001902:	0092      	lsls	r2, r2, #2
 8001904:	4093      	lsls	r3, r2
 8001906:	693a      	ldr	r2, [r7, #16]
 8001908:	4313      	orrs	r3, r2
 800190a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800190c:	4937      	ldr	r1, [pc, #220]	; (80019ec <HAL_GPIO_Init+0x334>)
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	089b      	lsrs	r3, r3, #2
 8001912:	3302      	adds	r3, #2
 8001914:	693a      	ldr	r2, [r7, #16]
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800191a:	4b3b      	ldr	r3, [pc, #236]	; (8001a08 <HAL_GPIO_Init+0x350>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	43db      	mvns	r3, r3
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4013      	ands	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	685b      	ldr	r3, [r3, #4]
 800192e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d003      	beq.n	800193e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001936:	693a      	ldr	r2, [r7, #16]
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	4313      	orrs	r3, r2
 800193c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800193e:	4a32      	ldr	r2, [pc, #200]	; (8001a08 <HAL_GPIO_Init+0x350>)
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001944:	4b30      	ldr	r3, [pc, #192]	; (8001a08 <HAL_GPIO_Init+0x350>)
 8001946:	68db      	ldr	r3, [r3, #12]
 8001948:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	43db      	mvns	r3, r3
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d003      	beq.n	8001968 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	4313      	orrs	r3, r2
 8001966:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001968:	4a27      	ldr	r2, [pc, #156]	; (8001a08 <HAL_GPIO_Init+0x350>)
 800196a:	693b      	ldr	r3, [r7, #16]
 800196c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800196e:	4b26      	ldr	r3, [pc, #152]	; (8001a08 <HAL_GPIO_Init+0x350>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	43db      	mvns	r3, r3
 8001978:	693a      	ldr	r2, [r7, #16]
 800197a:	4013      	ands	r3, r2
 800197c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d003      	beq.n	8001992 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4313      	orrs	r3, r2
 8001990:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001992:	4a1d      	ldr	r2, [pc, #116]	; (8001a08 <HAL_GPIO_Init+0x350>)
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001998:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <HAL_GPIO_Init+0x350>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	43db      	mvns	r3, r3
 80019a2:	693a      	ldr	r2, [r7, #16]
 80019a4:	4013      	ands	r3, r2
 80019a6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80019b4:	693a      	ldr	r2, [r7, #16]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4313      	orrs	r3, r2
 80019ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019bc:	4a12      	ldr	r2, [pc, #72]	; (8001a08 <HAL_GPIO_Init+0x350>)
 80019be:	693b      	ldr	r3, [r7, #16]
 80019c0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	3301      	adds	r3, #1
 80019c6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	681a      	ldr	r2, [r3, #0]
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa22 f303 	lsr.w	r3, r2, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f47f ae78 	bne.w	80016c8 <HAL_GPIO_Init+0x10>
  }
}
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
 80019dc:	371c      	adds	r7, #28
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40021000 	.word	0x40021000
 80019ec:	40010000 	.word	0x40010000
 80019f0:	48000400 	.word	0x48000400
 80019f4:	48000800 	.word	0x48000800
 80019f8:	48000c00 	.word	0x48000c00
 80019fc:	48001000 	.word	0x48001000
 8001a00:	48001400 	.word	0x48001400
 8001a04:	48001800 	.word	0x48001800
 8001a08:	40010400 	.word	0x40010400

08001a0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
 8001a14:	460b      	mov	r3, r1
 8001a16:	807b      	strh	r3, [r7, #2]
 8001a18:	4613      	mov	r3, r2
 8001a1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a1c:	787b      	ldrb	r3, [r7, #1]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a22:	887a      	ldrh	r2, [r7, #2]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a28:	e002      	b.n	8001a30 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a2a:	887a      	ldrh	r2, [r7, #2]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	460b      	mov	r3, r1
 8001a46:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	695b      	ldr	r3, [r3, #20]
 8001a4c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001a4e:	887a      	ldrh	r2, [r7, #2]
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	4013      	ands	r3, r2
 8001a54:	041a      	lsls	r2, r3, #16
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	43d9      	mvns	r1, r3
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	400b      	ands	r3, r1
 8001a5e:	431a      	orrs	r2, r3
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	4603      	mov	r3, r0
 8001a78:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001a7a:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a7c:	695a      	ldr	r2, [r3, #20]
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4013      	ands	r3, r2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d006      	beq.n	8001a94 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a86:	4a05      	ldr	r2, [pc, #20]	; (8001a9c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a88:	88fb      	ldrh	r3, [r7, #6]
 8001a8a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a8c:	88fb      	ldrh	r3, [r7, #6]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7ff f9dc 	bl	8000e4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a94:	bf00      	nop
 8001a96:	3708      	adds	r7, #8
 8001a98:	46bd      	mov	sp, r7
 8001a9a:	bd80      	pop	{r7, pc}
 8001a9c:	40010400 	.word	0x40010400

08001aa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001aa4:	4b04      	ldr	r3, [pc, #16]	; (8001ab8 <HAL_PWREx_GetVoltageRange+0x18>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	40007000 	.word	0x40007000

08001abc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001aca:	d130      	bne.n	8001b2e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001acc:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ad4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ad8:	d038      	beq.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ada:	4b20      	ldr	r3, [pc, #128]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ae2:	4a1e      	ldr	r2, [pc, #120]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ae4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ae8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2232      	movs	r2, #50	; 0x32
 8001af0:	fb02 f303 	mul.w	r3, r2, r3
 8001af4:	4a1b      	ldr	r2, [pc, #108]	; (8001b64 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001af6:	fba2 2303 	umull	r2, r3, r2, r3
 8001afa:	0c9b      	lsrs	r3, r3, #18
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b00:	e002      	b.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3b01      	subs	r3, #1
 8001b06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b08:	4b14      	ldr	r3, [pc, #80]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b0a:	695b      	ldr	r3, [r3, #20]
 8001b0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b14:	d102      	bne.n	8001b1c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1f2      	bne.n	8001b02 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b1c:	4b0f      	ldr	r3, [pc, #60]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b28:	d110      	bne.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e00f      	b.n	8001b4e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b2e:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b3a:	d007      	beq.n	8001b4c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b3c:	4b07      	ldr	r3, [pc, #28]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001b44:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b4a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001b4c:	2300      	movs	r3, #0
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3714      	adds	r7, #20
 8001b52:	46bd      	mov	sp, r7
 8001b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b58:	4770      	bx	lr
 8001b5a:	bf00      	nop
 8001b5c:	40007000 	.word	0x40007000
 8001b60:	20000004 	.word	0x20000004
 8001b64:	431bde83 	.word	0x431bde83

08001b68 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d101      	bne.n	8001b7a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b76:	2301      	movs	r3, #1
 8001b78:	e3ca      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b7a:	4b97      	ldr	r3, [pc, #604]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	f003 030c 	and.w	r3, r3, #12
 8001b82:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b84:	4b94      	ldr	r3, [pc, #592]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001b86:	68db      	ldr	r3, [r3, #12]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0310 	and.w	r3, r3, #16
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	f000 80e4 	beq.w	8001d64 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001b9c:	69bb      	ldr	r3, [r7, #24]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d007      	beq.n	8001bb2 <HAL_RCC_OscConfig+0x4a>
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b0c      	cmp	r3, #12
 8001ba6:	f040 808b 	bne.w	8001cc0 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	f040 8087 	bne.w	8001cc0 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001bb2:	4b89      	ldr	r3, [pc, #548]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d005      	beq.n	8001bca <HAL_RCC_OscConfig+0x62>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e3a2      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1a      	ldr	r2, [r3, #32]
 8001bce:	4b82      	ldr	r3, [pc, #520]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 0308 	and.w	r3, r3, #8
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d004      	beq.n	8001be4 <HAL_RCC_OscConfig+0x7c>
 8001bda:	4b7f      	ldr	r3, [pc, #508]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001be2:	e005      	b.n	8001bf0 <HAL_RCC_OscConfig+0x88>
 8001be4:	4b7c      	ldr	r3, [pc, #496]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001be6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bea:	091b      	lsrs	r3, r3, #4
 8001bec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d223      	bcs.n	8001c3c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f000 fd87 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	e383      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a72      	ldr	r2, [pc, #456]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c0e:	f043 0308 	orr.w	r3, r3, #8
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b70      	ldr	r3, [pc, #448]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	496d      	ldr	r1, [pc, #436]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c22:	4313      	orrs	r3, r2
 8001c24:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c26:	4b6c      	ldr	r3, [pc, #432]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69db      	ldr	r3, [r3, #28]
 8001c32:	021b      	lsls	r3, r3, #8
 8001c34:	4968      	ldr	r1, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	604b      	str	r3, [r1, #4]
 8001c3a:	e025      	b.n	8001c88 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c3c:	4b66      	ldr	r3, [pc, #408]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a65      	ldr	r2, [pc, #404]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	4b63      	ldr	r3, [pc, #396]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6a1b      	ldr	r3, [r3, #32]
 8001c54:	4960      	ldr	r1, [pc, #384]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c56:	4313      	orrs	r3, r2
 8001c58:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5a:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69db      	ldr	r3, [r3, #28]
 8001c66:	021b      	lsls	r3, r3, #8
 8001c68:	495b      	ldr	r1, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	6a1b      	ldr	r3, [r3, #32]
 8001c78:	4618      	mov	r0, r3
 8001c7a:	f000 fd47 	bl	800270c <RCC_SetFlashLatencyFromMSIRange>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001c84:	2301      	movs	r3, #1
 8001c86:	e343      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c88:	f000 fc4a 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8001c8c:	4602      	mov	r2, r0
 8001c8e:	4b52      	ldr	r3, [pc, #328]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	091b      	lsrs	r3, r3, #4
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	4950      	ldr	r1, [pc, #320]	; (8001ddc <HAL_RCC_OscConfig+0x274>)
 8001c9a:	5ccb      	ldrb	r3, [r1, r3]
 8001c9c:	f003 031f 	and.w	r3, r3, #31
 8001ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca4:	4a4e      	ldr	r2, [pc, #312]	; (8001de0 <HAL_RCC_OscConfig+0x278>)
 8001ca6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001ca8:	4b4e      	ldr	r3, [pc, #312]	; (8001de4 <HAL_RCC_OscConfig+0x27c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff fa47 	bl	8001140 <HAL_InitTick>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001cb6:	7bfb      	ldrb	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d052      	beq.n	8001d62 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	e327      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	699b      	ldr	r3, [r3, #24]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d032      	beq.n	8001d2e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001cc8:	4b43      	ldr	r3, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	4a42      	ldr	r2, [pc, #264]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cd4:	f7ff fc02 	bl	80014dc <HAL_GetTick>
 8001cd8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cdc:	f7ff fbfe 	bl	80014dc <HAL_GetTick>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	693b      	ldr	r3, [r7, #16]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e310      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cee:	4b3a      	ldr	r3, [pc, #232]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0302 	and.w	r3, r3, #2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d0f0      	beq.n	8001cdc <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cfa:	4b37      	ldr	r3, [pc, #220]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a36      	ldr	r2, [pc, #216]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d00:	f043 0308 	orr.w	r3, r3, #8
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	6a1b      	ldr	r3, [r3, #32]
 8001d12:	4931      	ldr	r1, [pc, #196]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d14:	4313      	orrs	r3, r2
 8001d16:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d18:	4b2f      	ldr	r3, [pc, #188]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	69db      	ldr	r3, [r3, #28]
 8001d24:	021b      	lsls	r3, r3, #8
 8001d26:	492c      	ldr	r1, [pc, #176]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d28:	4313      	orrs	r3, r2
 8001d2a:	604b      	str	r3, [r1, #4]
 8001d2c:	e01a      	b.n	8001d64 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d2e:	4b2a      	ldr	r3, [pc, #168]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a29      	ldr	r2, [pc, #164]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d34:	f023 0301 	bic.w	r3, r3, #1
 8001d38:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d3a:	f7ff fbcf 	bl	80014dc <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d42:	f7ff fbcb 	bl	80014dc <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e2dd      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001d54:	4b20      	ldr	r3, [pc, #128]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d1f0      	bne.n	8001d42 <HAL_RCC_OscConfig+0x1da>
 8001d60:	e000      	b.n	8001d64 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001d62:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f003 0301 	and.w	r3, r3, #1
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d074      	beq.n	8001e5a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	2b08      	cmp	r3, #8
 8001d74:	d005      	beq.n	8001d82 <HAL_RCC_OscConfig+0x21a>
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	2b0c      	cmp	r3, #12
 8001d7a:	d10e      	bne.n	8001d9a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b03      	cmp	r3, #3
 8001d80:	d10b      	bne.n	8001d9a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d82:	4b15      	ldr	r3, [pc, #84]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d064      	beq.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d160      	bne.n	8001e58 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e2ba      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001da2:	d106      	bne.n	8001db2 <HAL_RCC_OscConfig+0x24a>
 8001da4:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a0b      	ldr	r2, [pc, #44]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001daa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dae:	6013      	str	r3, [r2, #0]
 8001db0:	e026      	b.n	8001e00 <HAL_RCC_OscConfig+0x298>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dba:	d115      	bne.n	8001de8 <HAL_RCC_OscConfig+0x280>
 8001dbc:	4b06      	ldr	r3, [pc, #24]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a05      	ldr	r2, [pc, #20]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b03      	ldr	r3, [pc, #12]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a02      	ldr	r2, [pc, #8]	; (8001dd8 <HAL_RCC_OscConfig+0x270>)
 8001dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dd2:	6013      	str	r3, [r2, #0]
 8001dd4:	e014      	b.n	8001e00 <HAL_RCC_OscConfig+0x298>
 8001dd6:	bf00      	nop
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	08008ca4 	.word	0x08008ca4
 8001de0:	20000004 	.word	0x20000004
 8001de4:	20000008 	.word	0x20000008
 8001de8:	4ba0      	ldr	r3, [pc, #640]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a9f      	ldr	r2, [pc, #636]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df2:	6013      	str	r3, [r2, #0]
 8001df4:	4b9d      	ldr	r3, [pc, #628]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a9c      	ldr	r2, [pc, #624]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d013      	beq.n	8001e30 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff fb68 	bl	80014dc <HAL_GetTick>
 8001e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e10:	f7ff fb64 	bl	80014dc <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b64      	cmp	r3, #100	; 0x64
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e276      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e22:	4b92      	ldr	r3, [pc, #584]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d0f0      	beq.n	8001e10 <HAL_RCC_OscConfig+0x2a8>
 8001e2e:	e014      	b.n	8001e5a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e30:	f7ff fb54 	bl	80014dc <HAL_GetTick>
 8001e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e36:	e008      	b.n	8001e4a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e38:	f7ff fb50 	bl	80014dc <HAL_GetTick>
 8001e3c:	4602      	mov	r2, r0
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	1ad3      	subs	r3, r2, r3
 8001e42:	2b64      	cmp	r3, #100	; 0x64
 8001e44:	d901      	bls.n	8001e4a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001e46:	2303      	movs	r3, #3
 8001e48:	e262      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001e4a:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d1f0      	bne.n	8001e38 <HAL_RCC_OscConfig+0x2d0>
 8001e56:	e000      	b.n	8001e5a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0302 	and.w	r3, r3, #2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d060      	beq.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001e66:	69bb      	ldr	r3, [r7, #24]
 8001e68:	2b04      	cmp	r3, #4
 8001e6a:	d005      	beq.n	8001e78 <HAL_RCC_OscConfig+0x310>
 8001e6c:	69bb      	ldr	r3, [r7, #24]
 8001e6e:	2b0c      	cmp	r3, #12
 8001e70:	d119      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d116      	bne.n	8001ea6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e78:	4b7c      	ldr	r3, [pc, #496]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d005      	beq.n	8001e90 <HAL_RCC_OscConfig+0x328>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e23f      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e90:	4b76      	ldr	r3, [pc, #472]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	691b      	ldr	r3, [r3, #16]
 8001e9c:	061b      	lsls	r3, r3, #24
 8001e9e:	4973      	ldr	r1, [pc, #460]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ea4:	e040      	b.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d023      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001eae:	4b6f      	ldr	r3, [pc, #444]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a6e      	ldr	r2, [pc, #440]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001eb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7ff fb0f 	bl	80014dc <HAL_GetTick>
 8001ebe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ec0:	e008      	b.n	8001ed4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec2:	f7ff fb0b 	bl	80014dc <HAL_GetTick>
 8001ec6:	4602      	mov	r2, r0
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	1ad3      	subs	r3, r2, r3
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d901      	bls.n	8001ed4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e21d      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed4:	4b65      	ldr	r3, [pc, #404]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d0f0      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ee0:	4b62      	ldr	r3, [pc, #392]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ee2:	685b      	ldr	r3, [r3, #4]
 8001ee4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	061b      	lsls	r3, r3, #24
 8001eee:	495f      	ldr	r1, [pc, #380]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ef0:	4313      	orrs	r3, r2
 8001ef2:	604b      	str	r3, [r1, #4]
 8001ef4:	e018      	b.n	8001f28 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	4b5d      	ldr	r3, [pc, #372]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a5c      	ldr	r2, [pc, #368]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001efc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7ff faeb 	bl	80014dc <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0a:	f7ff fae7 	bl	80014dc <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e1f9      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f1c:	4b53      	ldr	r3, [pc, #332]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0308 	and.w	r3, r3, #8
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d03c      	beq.n	8001fae <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	695b      	ldr	r3, [r3, #20]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d01c      	beq.n	8001f76 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f3c:	4b4b      	ldr	r3, [pc, #300]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f42:	4a4a      	ldr	r2, [pc, #296]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fac6 	bl	80014dc <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f54:	f7ff fac2 	bl	80014dc <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e1d4      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f66:	4b41      	ldr	r3, [pc, #260]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d0ef      	beq.n	8001f54 <HAL_RCC_OscConfig+0x3ec>
 8001f74:	e01b      	b.n	8001fae <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f76:	4b3d      	ldr	r3, [pc, #244]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f7c:	4a3b      	ldr	r2, [pc, #236]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001f7e:	f023 0301 	bic.w	r3, r3, #1
 8001f82:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f86:	f7ff faa9 	bl	80014dc <HAL_GetTick>
 8001f8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f8c:	e008      	b.n	8001fa0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f8e:	f7ff faa5 	bl	80014dc <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d901      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001f9c:	2303      	movs	r3, #3
 8001f9e:	e1b7      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fa0:	4b32      	ldr	r3, [pc, #200]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fa2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d1ef      	bne.n	8001f8e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 0304 	and.w	r3, r3, #4
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	f000 80a6 	beq.w	8002108 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001fc0:	4b2a      	ldr	r3, [pc, #168]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10d      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fcc:	4b27      	ldr	r3, [pc, #156]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fd0:	4a26      	ldr	r2, [pc, #152]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	6593      	str	r3, [r2, #88]	; 0x58
 8001fd8:	4b24      	ldr	r3, [pc, #144]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8001fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	60bb      	str	r3, [r7, #8]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <HAL_RCC_OscConfig+0x508>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d118      	bne.n	8002026 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ff4:	4b1e      	ldr	r3, [pc, #120]	; (8002070 <HAL_RCC_OscConfig+0x508>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	4a1d      	ldr	r2, [pc, #116]	; (8002070 <HAL_RCC_OscConfig+0x508>)
 8001ffa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ffe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002000:	f7ff fa6c 	bl	80014dc <HAL_GetTick>
 8002004:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002006:	e008      	b.n	800201a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002008:	f7ff fa68 	bl	80014dc <HAL_GetTick>
 800200c:	4602      	mov	r2, r0
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	2b02      	cmp	r3, #2
 8002014:	d901      	bls.n	800201a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002016:	2303      	movs	r3, #3
 8002018:	e17a      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800201a:	4b15      	ldr	r3, [pc, #84]	; (8002070 <HAL_RCC_OscConfig+0x508>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0f0      	beq.n	8002008 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b01      	cmp	r3, #1
 800202c:	d108      	bne.n	8002040 <HAL_RCC_OscConfig+0x4d8>
 800202e:	4b0f      	ldr	r3, [pc, #60]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	4a0d      	ldr	r2, [pc, #52]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8002036:	f043 0301 	orr.w	r3, r3, #1
 800203a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800203e:	e029      	b.n	8002094 <HAL_RCC_OscConfig+0x52c>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	2b05      	cmp	r3, #5
 8002046:	d115      	bne.n	8002074 <HAL_RCC_OscConfig+0x50c>
 8002048:	4b08      	ldr	r3, [pc, #32]	; (800206c <HAL_RCC_OscConfig+0x504>)
 800204a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204e:	4a07      	ldr	r2, [pc, #28]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8002050:	f043 0304 	orr.w	r3, r3, #4
 8002054:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002058:	4b04      	ldr	r3, [pc, #16]	; (800206c <HAL_RCC_OscConfig+0x504>)
 800205a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800205e:	4a03      	ldr	r2, [pc, #12]	; (800206c <HAL_RCC_OscConfig+0x504>)
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002068:	e014      	b.n	8002094 <HAL_RCC_OscConfig+0x52c>
 800206a:	bf00      	nop
 800206c:	40021000 	.word	0x40021000
 8002070:	40007000 	.word	0x40007000
 8002074:	4b9c      	ldr	r3, [pc, #624]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800207a:	4a9b      	ldr	r2, [pc, #620]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800207c:	f023 0301 	bic.w	r3, r3, #1
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002084:	4b98      	ldr	r3, [pc, #608]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	4a97      	ldr	r2, [pc, #604]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800208c:	f023 0304 	bic.w	r3, r3, #4
 8002090:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	689b      	ldr	r3, [r3, #8]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d016      	beq.n	80020ca <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800209c:	f7ff fa1e 	bl	80014dc <HAL_GetTick>
 80020a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020a2:	e00a      	b.n	80020ba <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020a4:	f7ff fa1a 	bl	80014dc <HAL_GetTick>
 80020a8:	4602      	mov	r2, r0
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	1ad3      	subs	r3, r2, r3
 80020ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d901      	bls.n	80020ba <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80020b6:	2303      	movs	r3, #3
 80020b8:	e12a      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ba:	4b8b      	ldr	r3, [pc, #556]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80020bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020c0:	f003 0302 	and.w	r3, r3, #2
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d0ed      	beq.n	80020a4 <HAL_RCC_OscConfig+0x53c>
 80020c8:	e015      	b.n	80020f6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7ff fa07 	bl	80014dc <HAL_GetTick>
 80020ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020d0:	e00a      	b.n	80020e8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d2:	f7ff fa03 	bl	80014dc <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d901      	bls.n	80020e8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80020e4:	2303      	movs	r3, #3
 80020e6:	e113      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020e8:	4b7f      	ldr	r3, [pc, #508]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1ed      	bne.n	80020d2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f6:	7ffb      	ldrb	r3, [r7, #31]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d105      	bne.n	8002108 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fc:	4b7a      	ldr	r3, [pc, #488]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80020fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002100:	4a79      	ldr	r2, [pc, #484]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002102:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002106:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80fe 	beq.w	800230e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002116:	2b02      	cmp	r3, #2
 8002118:	f040 80d0 	bne.w	80022bc <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800211c:	4b72      	ldr	r3, [pc, #456]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f003 0203 	and.w	r2, r3, #3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	429a      	cmp	r2, r3
 800212e:	d130      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	3b01      	subs	r3, #1
 800213c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800213e:	429a      	cmp	r2, r3
 8002140:	d127      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800214e:	429a      	cmp	r2, r3
 8002150:	d11f      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800215c:	2a07      	cmp	r2, #7
 800215e:	bf14      	ite	ne
 8002160:	2201      	movne	r2, #1
 8002162:	2200      	moveq	r2, #0
 8002164:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002166:	4293      	cmp	r3, r2
 8002168:	d113      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002174:	085b      	lsrs	r3, r3, #1
 8002176:	3b01      	subs	r3, #1
 8002178:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800217a:	429a      	cmp	r2, r3
 800217c:	d109      	bne.n	8002192 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002188:	085b      	lsrs	r3, r3, #1
 800218a:	3b01      	subs	r3, #1
 800218c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800218e:	429a      	cmp	r2, r3
 8002190:	d06e      	beq.n	8002270 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	2b0c      	cmp	r3, #12
 8002196:	d069      	beq.n	800226c <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002198:	4b53      	ldr	r3, [pc, #332]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d105      	bne.n	80021b0 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80021a4:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e0ad      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80021b4:	4b4c      	ldr	r3, [pc, #304]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a4b      	ldr	r2, [pc, #300]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021be:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80021c0:	f7ff f98c 	bl	80014dc <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff f988 	bl	80014dc <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e09a      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021da:	4b43      	ldr	r3, [pc, #268]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021e6:	4b40      	ldr	r3, [pc, #256]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80021e8:	68da      	ldr	r2, [r3, #12]
 80021ea:	4b40      	ldr	r3, [pc, #256]	; (80022ec <HAL_RCC_OscConfig+0x784>)
 80021ec:	4013      	ands	r3, r2
 80021ee:	687a      	ldr	r2, [r7, #4]
 80021f0:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021f6:	3a01      	subs	r2, #1
 80021f8:	0112      	lsls	r2, r2, #4
 80021fa:	4311      	orrs	r1, r2
 80021fc:	687a      	ldr	r2, [r7, #4]
 80021fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002200:	0212      	lsls	r2, r2, #8
 8002202:	4311      	orrs	r1, r2
 8002204:	687a      	ldr	r2, [r7, #4]
 8002206:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002208:	0852      	lsrs	r2, r2, #1
 800220a:	3a01      	subs	r2, #1
 800220c:	0552      	lsls	r2, r2, #21
 800220e:	4311      	orrs	r1, r2
 8002210:	687a      	ldr	r2, [r7, #4]
 8002212:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002214:	0852      	lsrs	r2, r2, #1
 8002216:	3a01      	subs	r2, #1
 8002218:	0652      	lsls	r2, r2, #25
 800221a:	4311      	orrs	r1, r2
 800221c:	687a      	ldr	r2, [r7, #4]
 800221e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002220:	0912      	lsrs	r2, r2, #4
 8002222:	0452      	lsls	r2, r2, #17
 8002224:	430a      	orrs	r2, r1
 8002226:	4930      	ldr	r1, [pc, #192]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002228:	4313      	orrs	r3, r2
 800222a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800222c:	4b2e      	ldr	r3, [pc, #184]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a2d      	ldr	r2, [pc, #180]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002232:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002236:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002238:	4b2b      	ldr	r3, [pc, #172]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	4a2a      	ldr	r2, [pc, #168]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800223e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002242:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002244:	f7ff f94a 	bl	80014dc <HAL_GetTick>
 8002248:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800224a:	e008      	b.n	800225e <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800224c:	f7ff f946 	bl	80014dc <HAL_GetTick>
 8002250:	4602      	mov	r2, r0
 8002252:	693b      	ldr	r3, [r7, #16]
 8002254:	1ad3      	subs	r3, r2, r3
 8002256:	2b02      	cmp	r3, #2
 8002258:	d901      	bls.n	800225e <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 800225a:	2303      	movs	r3, #3
 800225c:	e058      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800225e:	4b22      	ldr	r3, [pc, #136]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d0f0      	beq.n	800224c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800226a:	e050      	b.n	800230e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e04f      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002270:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d148      	bne.n	800230e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800227c:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a19      	ldr	r2, [pc, #100]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 8002282:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002288:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	4a16      	ldr	r2, [pc, #88]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 800228e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002292:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002294:	f7ff f922 	bl	80014dc <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff f91e 	bl	80014dc <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e030      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022ae:	4b0e      	ldr	r3, [pc, #56]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x734>
 80022ba:	e028      	b.n	800230e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	2b0c      	cmp	r3, #12
 80022c0:	d023      	beq.n	800230a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a08      	ldr	r2, [pc, #32]	; (80022e8 <HAL_RCC_OscConfig+0x780>)
 80022c8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80022cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ce:	f7ff f905 	bl	80014dc <HAL_GetTick>
 80022d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d4:	e00c      	b.n	80022f0 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022d6:	f7ff f901 	bl	80014dc <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d905      	bls.n	80022f0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e013      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
 80022e8:	40021000 	.word	0x40021000
 80022ec:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_OscConfig+0x7b0>)
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d1ec      	bne.n	80022d6 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80022fc:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_RCC_OscConfig+0x7b0>)
 80022fe:	68da      	ldr	r2, [r3, #12]
 8002300:	4905      	ldr	r1, [pc, #20]	; (8002318 <HAL_RCC_OscConfig+0x7b0>)
 8002302:	4b06      	ldr	r3, [pc, #24]	; (800231c <HAL_RCC_OscConfig+0x7b4>)
 8002304:	4013      	ands	r3, r2
 8002306:	60cb      	str	r3, [r1, #12]
 8002308:	e001      	b.n	800230e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3720      	adds	r7, #32
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}
 8002318:	40021000 	.word	0x40021000
 800231c:	feeefffc 	.word	0xfeeefffc

08002320 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b084      	sub	sp, #16
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d101      	bne.n	8002334 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e0e7      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002334:	4b75      	ldr	r3, [pc, #468]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0307 	and.w	r3, r3, #7
 800233c:	683a      	ldr	r2, [r7, #0]
 800233e:	429a      	cmp	r2, r3
 8002340:	d910      	bls.n	8002364 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002342:	4b72      	ldr	r3, [pc, #456]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f023 0207 	bic.w	r2, r3, #7
 800234a:	4970      	ldr	r1, [pc, #448]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	4313      	orrs	r3, r2
 8002350:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002352:	4b6e      	ldr	r3, [pc, #440]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0307 	and.w	r3, r3, #7
 800235a:	683a      	ldr	r2, [r7, #0]
 800235c:	429a      	cmp	r2, r3
 800235e:	d001      	beq.n	8002364 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002360:	2301      	movs	r3, #1
 8002362:	e0cf      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0302 	and.w	r3, r3, #2
 800236c:	2b00      	cmp	r3, #0
 800236e:	d010      	beq.n	8002392 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	689a      	ldr	r2, [r3, #8]
 8002374:	4b66      	ldr	r3, [pc, #408]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237c:	429a      	cmp	r2, r3
 800237e:	d908      	bls.n	8002392 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002380:	4b63      	ldr	r3, [pc, #396]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	4960      	ldr	r1, [pc, #384]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 800238e:	4313      	orrs	r3, r2
 8002390:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	d04c      	beq.n	8002438 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	2b03      	cmp	r3, #3
 80023a4:	d107      	bne.n	80023b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023a6:	4b5a      	ldr	r3, [pc, #360]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d121      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e0a6      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d107      	bne.n	80023ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80023be:	4b54      	ldr	r3, [pc, #336]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d115      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e09a      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d107      	bne.n	80023e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80023d6:	4b4e      	ldr	r3, [pc, #312]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d109      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e08e      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023e6:	4b4a      	ldr	r3, [pc, #296]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d101      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e086      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023f6:	4b46      	ldr	r3, [pc, #280]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	f023 0203 	bic.w	r2, r3, #3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4943      	ldr	r1, [pc, #268]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002404:	4313      	orrs	r3, r2
 8002406:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002408:	f7ff f868 	bl	80014dc <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7ff f864 	bl	80014dc <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e06e      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	4b3a      	ldr	r3, [pc, #232]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 020c 	and.w	r2, r3, #12
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	009b      	lsls	r3, r3, #2
 8002434:	429a      	cmp	r2, r3
 8002436:	d1eb      	bne.n	8002410 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 0302 	and.w	r3, r3, #2
 8002440:	2b00      	cmp	r3, #0
 8002442:	d010      	beq.n	8002466 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689a      	ldr	r2, [r3, #8]
 8002448:	4b31      	ldr	r3, [pc, #196]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002450:	429a      	cmp	r2, r3
 8002452:	d208      	bcs.n	8002466 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002454:	4b2e      	ldr	r3, [pc, #184]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	492b      	ldr	r1, [pc, #172]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 8002462:	4313      	orrs	r3, r2
 8002464:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002466:	4b29      	ldr	r3, [pc, #164]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d210      	bcs.n	8002496 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002474:	4b25      	ldr	r3, [pc, #148]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f023 0207 	bic.w	r2, r3, #7
 800247c:	4923      	ldr	r1, [pc, #140]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	4313      	orrs	r3, r2
 8002482:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002484:	4b21      	ldr	r3, [pc, #132]	; (800250c <HAL_RCC_ClockConfig+0x1ec>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0307 	and.w	r3, r3, #7
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	429a      	cmp	r2, r3
 8002490:	d001      	beq.n	8002496 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e036      	b.n	8002504 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 0304 	and.w	r3, r3, #4
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d008      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024a2:	4b1b      	ldr	r3, [pc, #108]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024a4:	689b      	ldr	r3, [r3, #8]
 80024a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	68db      	ldr	r3, [r3, #12]
 80024ae:	4918      	ldr	r1, [pc, #96]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	4313      	orrs	r3, r2
 80024b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 0308 	and.w	r3, r3, #8
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d009      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024c0:	4b13      	ldr	r3, [pc, #76]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	4910      	ldr	r1, [pc, #64]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80024d4:	f000 f824 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 80024d8:	4602      	mov	r2, r0
 80024da:	4b0d      	ldr	r3, [pc, #52]	; (8002510 <HAL_RCC_ClockConfig+0x1f0>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	091b      	lsrs	r3, r3, #4
 80024e0:	f003 030f 	and.w	r3, r3, #15
 80024e4:	490b      	ldr	r1, [pc, #44]	; (8002514 <HAL_RCC_ClockConfig+0x1f4>)
 80024e6:	5ccb      	ldrb	r3, [r1, r3]
 80024e8:	f003 031f 	and.w	r3, r3, #31
 80024ec:	fa22 f303 	lsr.w	r3, r2, r3
 80024f0:	4a09      	ldr	r2, [pc, #36]	; (8002518 <HAL_RCC_ClockConfig+0x1f8>)
 80024f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <HAL_RCC_ClockConfig+0x1fc>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4618      	mov	r0, r3
 80024fa:	f7fe fe21 	bl	8001140 <HAL_InitTick>
 80024fe:	4603      	mov	r3, r0
 8002500:	72fb      	strb	r3, [r7, #11]

  return status;
 8002502:	7afb      	ldrb	r3, [r7, #11]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3710      	adds	r7, #16
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	40022000 	.word	0x40022000
 8002510:	40021000 	.word	0x40021000
 8002514:	08008ca4 	.word	0x08008ca4
 8002518:	20000004 	.word	0x20000004
 800251c:	20000008 	.word	0x20000008

08002520 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002520:	b480      	push	{r7}
 8002522:	b089      	sub	sp, #36	; 0x24
 8002524:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002526:	2300      	movs	r3, #0
 8002528:	61fb      	str	r3, [r7, #28]
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800252e:	4b3e      	ldr	r3, [pc, #248]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	f003 030c 	and.w	r3, r3, #12
 8002536:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002538:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 800253a:	68db      	ldr	r3, [r3, #12]
 800253c:	f003 0303 	and.w	r3, r3, #3
 8002540:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d005      	beq.n	8002554 <HAL_RCC_GetSysClockFreq+0x34>
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	2b0c      	cmp	r3, #12
 800254c:	d121      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	2b01      	cmp	r3, #1
 8002552:	d11e      	bne.n	8002592 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f003 0308 	and.w	r3, r3, #8
 800255c:	2b00      	cmp	r3, #0
 800255e:	d107      	bne.n	8002570 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002560:	4b31      	ldr	r3, [pc, #196]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002562:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002566:	0a1b      	lsrs	r3, r3, #8
 8002568:	f003 030f 	and.w	r3, r3, #15
 800256c:	61fb      	str	r3, [r7, #28]
 800256e:	e005      	b.n	800257c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002570:	4b2d      	ldr	r3, [pc, #180]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	091b      	lsrs	r3, r3, #4
 8002576:	f003 030f 	and.w	r3, r3, #15
 800257a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800257c:	4a2b      	ldr	r2, [pc, #172]	; (800262c <HAL_RCC_GetSysClockFreq+0x10c>)
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002584:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002586:	693b      	ldr	r3, [r7, #16]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d10d      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002590:	e00a      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	2b04      	cmp	r3, #4
 8002596:	d102      	bne.n	800259e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002598:	4b25      	ldr	r3, [pc, #148]	; (8002630 <HAL_RCC_GetSysClockFreq+0x110>)
 800259a:	61bb      	str	r3, [r7, #24]
 800259c:	e004      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	2b08      	cmp	r3, #8
 80025a2:	d101      	bne.n	80025a8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025a4:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_RCC_GetSysClockFreq+0x114>)
 80025a6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	2b0c      	cmp	r3, #12
 80025ac:	d134      	bne.n	8002618 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80025ae:	4b1e      	ldr	r3, [pc, #120]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d003      	beq.n	80025c6 <HAL_RCC_GetSysClockFreq+0xa6>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d003      	beq.n	80025cc <HAL_RCC_GetSysClockFreq+0xac>
 80025c4:	e005      	b.n	80025d2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80025c6:	4b1a      	ldr	r3, [pc, #104]	; (8002630 <HAL_RCC_GetSysClockFreq+0x110>)
 80025c8:	617b      	str	r3, [r7, #20]
      break;
 80025ca:	e005      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80025cc:	4b19      	ldr	r3, [pc, #100]	; (8002634 <HAL_RCC_GetSysClockFreq+0x114>)
 80025ce:	617b      	str	r3, [r7, #20]
      break;
 80025d0:	e002      	b.n	80025d8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	617b      	str	r3, [r7, #20]
      break;
 80025d6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025d8:	4b13      	ldr	r3, [pc, #76]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	091b      	lsrs	r3, r3, #4
 80025de:	f003 0307 	and.w	r3, r3, #7
 80025e2:	3301      	adds	r3, #1
 80025e4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025e6:	4b10      	ldr	r3, [pc, #64]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 80025e8:	68db      	ldr	r3, [r3, #12]
 80025ea:	0a1b      	lsrs	r3, r3, #8
 80025ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	fb03 f202 	mul.w	r2, r3, r2
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025fc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025fe:	4b0a      	ldr	r3, [pc, #40]	; (8002628 <HAL_RCC_GetSysClockFreq+0x108>)
 8002600:	68db      	ldr	r3, [r3, #12]
 8002602:	0e5b      	lsrs	r3, r3, #25
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	3301      	adds	r3, #1
 800260a:	005b      	lsls	r3, r3, #1
 800260c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	fbb2 f3f3 	udiv	r3, r2, r3
 8002616:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002618:	69bb      	ldr	r3, [r7, #24]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3724      	adds	r7, #36	; 0x24
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
 8002626:	bf00      	nop
 8002628:	40021000 	.word	0x40021000
 800262c:	08008cbc 	.word	0x08008cbc
 8002630:	00f42400 	.word	0x00f42400
 8002634:	007a1200 	.word	0x007a1200

08002638 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800263c:	4b03      	ldr	r3, [pc, #12]	; (800264c <HAL_RCC_GetHCLKFreq+0x14>)
 800263e:	681b      	ldr	r3, [r3, #0]
}
 8002640:	4618      	mov	r0, r3
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	20000004 	.word	0x20000004

08002650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002654:	f7ff fff0 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002658:	4602      	mov	r2, r0
 800265a:	4b06      	ldr	r3, [pc, #24]	; (8002674 <HAL_RCC_GetPCLK1Freq+0x24>)
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	0a1b      	lsrs	r3, r3, #8
 8002660:	f003 0307 	and.w	r3, r3, #7
 8002664:	4904      	ldr	r1, [pc, #16]	; (8002678 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002670:	4618      	mov	r0, r3
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	08008cb4 	.word	0x08008cb4

0800267c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002680:	f7ff ffda 	bl	8002638 <HAL_RCC_GetHCLKFreq>
 8002684:	4602      	mov	r2, r0
 8002686:	4b06      	ldr	r3, [pc, #24]	; (80026a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	0adb      	lsrs	r3, r3, #11
 800268c:	f003 0307 	and.w	r3, r3, #7
 8002690:	4904      	ldr	r1, [pc, #16]	; (80026a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002692:	5ccb      	ldrb	r3, [r1, r3]
 8002694:	f003 031f 	and.w	r3, r3, #31
 8002698:	fa22 f303 	lsr.w	r3, r2, r3
}
 800269c:	4618      	mov	r0, r3
 800269e:	bd80      	pop	{r7, pc}
 80026a0:	40021000 	.word	0x40021000
 80026a4:	08008cb4 	.word	0x08008cb4

080026a8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	220f      	movs	r2, #15
 80026b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80026b8:	4b12      	ldr	r3, [pc, #72]	; (8002704 <HAL_RCC_GetClockConfig+0x5c>)
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f003 0203 	and.w	r2, r3, #3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80026c4:	4b0f      	ldr	r3, [pc, #60]	; (8002704 <HAL_RCC_GetClockConfig+0x5c>)
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80026d0:	4b0c      	ldr	r3, [pc, #48]	; (8002704 <HAL_RCC_GetClockConfig+0x5c>)
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026dc:	4b09      	ldr	r3, [pc, #36]	; (8002704 <HAL_RCC_GetClockConfig+0x5c>)
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	08db      	lsrs	r3, r3, #3
 80026e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026ea:	4b07      	ldr	r3, [pc, #28]	; (8002708 <HAL_RCC_GetClockConfig+0x60>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0207 	and.w	r2, r3, #7
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	601a      	str	r2, [r3, #0]
}
 80026f6:	bf00      	nop
 80026f8:	370c      	adds	r7, #12
 80026fa:	46bd      	mov	sp, r7
 80026fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002700:	4770      	bx	lr
 8002702:	bf00      	nop
 8002704:	40021000 	.word	0x40021000
 8002708:	40022000 	.word	0x40022000

0800270c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b086      	sub	sp, #24
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002714:	2300      	movs	r3, #0
 8002716:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002718:	4b2a      	ldr	r3, [pc, #168]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800271a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800271c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002720:	2b00      	cmp	r3, #0
 8002722:	d003      	beq.n	800272c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002724:	f7ff f9bc 	bl	8001aa0 <HAL_PWREx_GetVoltageRange>
 8002728:	6178      	str	r0, [r7, #20]
 800272a:	e014      	b.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800272c:	4b25      	ldr	r3, [pc, #148]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800272e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002736:	6593      	str	r3, [r2, #88]	; 0x58
 8002738:	4b22      	ldr	r3, [pc, #136]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800273a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800273c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002740:	60fb      	str	r3, [r7, #12]
 8002742:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002744:	f7ff f9ac 	bl	8001aa0 <HAL_PWREx_GetVoltageRange>
 8002748:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800274a:	4b1e      	ldr	r3, [pc, #120]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	4a1d      	ldr	r2, [pc, #116]	; (80027c4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002750:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002754:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275c:	d10b      	bne.n	8002776 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2b80      	cmp	r3, #128	; 0x80
 8002762:	d919      	bls.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2ba0      	cmp	r3, #160	; 0xa0
 8002768:	d902      	bls.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800276a:	2302      	movs	r3, #2
 800276c:	613b      	str	r3, [r7, #16]
 800276e:	e013      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002770:	2301      	movs	r3, #1
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	e010      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2b80      	cmp	r3, #128	; 0x80
 800277a:	d902      	bls.n	8002782 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800277c:	2303      	movs	r3, #3
 800277e:	613b      	str	r3, [r7, #16]
 8002780:	e00a      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b80      	cmp	r3, #128	; 0x80
 8002786:	d102      	bne.n	800278e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002788:	2302      	movs	r3, #2
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	e004      	b.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2b70      	cmp	r3, #112	; 0x70
 8002792:	d101      	bne.n	8002798 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002794:	2301      	movs	r3, #1
 8002796:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002798:	4b0b      	ldr	r3, [pc, #44]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f023 0207 	bic.w	r2, r3, #7
 80027a0:	4909      	ldr	r1, [pc, #36]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	4313      	orrs	r3, r2
 80027a6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80027a8:	4b07      	ldr	r3, [pc, #28]	; (80027c8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f003 0307 	and.w	r3, r3, #7
 80027b0:	693a      	ldr	r2, [r7, #16]
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d001      	beq.n	80027ba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80027b6:	2301      	movs	r3, #1
 80027b8:	e000      	b.n	80027bc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80027ba:	2300      	movs	r3, #0
}
 80027bc:	4618      	mov	r0, r3
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40021000 	.word	0x40021000
 80027c8:	40022000 	.word	0x40022000

080027cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80027d4:	2300      	movs	r3, #0
 80027d6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80027d8:	2300      	movs	r3, #0
 80027da:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d041      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027ec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027f0:	d02a      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80027f2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027f6:	d824      	bhi.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80027f8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027fc:	d008      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027fe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002802:	d81e      	bhi.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002804:	2b00      	cmp	r3, #0
 8002806:	d00a      	beq.n	800281e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002808:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800280c:	d010      	beq.n	8002830 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800280e:	e018      	b.n	8002842 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002810:	4b86      	ldr	r3, [pc, #536]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002812:	68db      	ldr	r3, [r3, #12]
 8002814:	4a85      	ldr	r2, [pc, #532]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002816:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800281a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800281c:	e015      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	3304      	adds	r3, #4
 8002822:	2100      	movs	r1, #0
 8002824:	4618      	mov	r0, r3
 8002826:	f000 fabb 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 800282a:	4603      	mov	r3, r0
 800282c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800282e:	e00c      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	3320      	adds	r3, #32
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f000 fba6 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002840:	e003      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002842:	2301      	movs	r3, #1
 8002844:	74fb      	strb	r3, [r7, #19]
      break;
 8002846:	e000      	b.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002848:	bf00      	nop
    }

    if(ret == HAL_OK)
 800284a:	7cfb      	ldrb	r3, [r7, #19]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d10b      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002850:	4b76      	ldr	r3, [pc, #472]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800285e:	4973      	ldr	r1, [pc, #460]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002866:	e001      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002868:	7cfb      	ldrb	r3, [r7, #19]
 800286a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d041      	beq.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800287c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002880:	d02a      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8002882:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002886:	d824      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002888:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800288c:	d008      	beq.n	80028a0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800288e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002892:	d81e      	bhi.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002894:	2b00      	cmp	r3, #0
 8002896:	d00a      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002898:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800289c:	d010      	beq.n	80028c0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800289e:	e018      	b.n	80028d2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028a0:	4b62      	ldr	r3, [pc, #392]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	4a61      	ldr	r2, [pc, #388]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028aa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028ac:	e015      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	3304      	adds	r3, #4
 80028b2:	2100      	movs	r1, #0
 80028b4:	4618      	mov	r0, r3
 80028b6:	f000 fa73 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028be:	e00c      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	3320      	adds	r3, #32
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f000 fb5e 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 80028cc:	4603      	mov	r3, r0
 80028ce:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80028d0:	e003      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	74fb      	strb	r3, [r7, #19]
      break;
 80028d6:	e000      	b.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80028d8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80028da:	7cfb      	ldrb	r3, [r7, #19]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d10b      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80028e0:	4b52      	ldr	r3, [pc, #328]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80028ee:	494f      	ldr	r1, [pc, #316]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80028f6:	e001      	b.n	80028fc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028f8:	7cfb      	ldrb	r3, [r7, #19]
 80028fa:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002904:	2b00      	cmp	r3, #0
 8002906:	f000 80a0 	beq.w	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800290a:	2300      	movs	r3, #0
 800290c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800290e:	4b47      	ldr	r3, [pc, #284]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002910:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002912:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002924:	4b41      	ldr	r3, [pc, #260]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002928:	4a40      	ldr	r2, [pc, #256]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800292a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800292e:	6593      	str	r3, [r2, #88]	; 0x58
 8002930:	4b3e      	ldr	r3, [pc, #248]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002932:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002938:	60bb      	str	r3, [r7, #8]
 800293a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800293c:	2301      	movs	r3, #1
 800293e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002940:	4b3b      	ldr	r3, [pc, #236]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a3a      	ldr	r2, [pc, #232]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002946:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800294a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800294c:	f7fe fdc6 	bl	80014dc <HAL_GetTick>
 8002950:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002952:	e009      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002954:	f7fe fdc2 	bl	80014dc <HAL_GetTick>
 8002958:	4602      	mov	r2, r0
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	1ad3      	subs	r3, r2, r3
 800295e:	2b02      	cmp	r3, #2
 8002960:	d902      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	74fb      	strb	r3, [r7, #19]
        break;
 8002966:	e005      	b.n	8002974 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002968:	4b31      	ldr	r3, [pc, #196]	; (8002a30 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ef      	beq.n	8002954 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002974:	7cfb      	ldrb	r3, [r7, #19]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d15c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800297a:	4b2c      	ldr	r3, [pc, #176]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800297c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002980:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002984:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002986:	697b      	ldr	r3, [r7, #20]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d01f      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x200>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	429a      	cmp	r2, r3
 8002996:	d019      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002998:	4b24      	ldr	r3, [pc, #144]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800299a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800299e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029a2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029a4:	4b21      	ldr	r3, [pc, #132]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029aa:	4a20      	ldr	r2, [pc, #128]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029b4:	4b1d      	ldr	r3, [pc, #116]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ba:	4a1c      	ldr	r2, [pc, #112]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029bc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d016      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d6:	f7fe fd81 	bl	80014dc <HAL_GetTick>
 80029da:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029dc:	e00b      	b.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80029de:	f7fe fd7d 	bl	80014dc <HAL_GetTick>
 80029e2:	4602      	mov	r2, r0
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	1ad3      	subs	r3, r2, r3
 80029e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d902      	bls.n	80029f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	74fb      	strb	r3, [r7, #19]
            break;
 80029f4:	e006      	b.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029f6:	4b0d      	ldr	r3, [pc, #52]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fc:	f003 0302 	and.w	r3, r3, #2
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d0ec      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002a04:	7cfb      	ldrb	r3, [r7, #19]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d10c      	bne.n	8002a24 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a10:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a1a:	4904      	ldr	r1, [pc, #16]	; (8002a2c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a1c:	4313      	orrs	r3, r2
 8002a1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a22:	e009      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a24:	7cfb      	ldrb	r3, [r7, #19]
 8002a26:	74bb      	strb	r3, [r7, #18]
 8002a28:	e006      	b.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002a2a:	bf00      	nop
 8002a2c:	40021000 	.word	0x40021000
 8002a30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a34:	7cfb      	ldrb	r3, [r7, #19]
 8002a36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a38:	7c7b      	ldrb	r3, [r7, #17]
 8002a3a:	2b01      	cmp	r3, #1
 8002a3c:	d105      	bne.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a3e:	4b9e      	ldr	r3, [pc, #632]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a42:	4a9d      	ldr	r2, [pc, #628]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00a      	beq.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a56:	4b98      	ldr	r3, [pc, #608]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5c:	f023 0203 	bic.w	r2, r3, #3
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a64:	4994      	ldr	r1, [pc, #592]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	4313      	orrs	r3, r2
 8002a68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d00a      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a78:	4b8f      	ldr	r3, [pc, #572]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a7e:	f023 020c 	bic.w	r2, r3, #12
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	498c      	ldr	r1, [pc, #560]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a88:	4313      	orrs	r3, r2
 8002a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f003 0304 	and.w	r3, r3, #4
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d00a      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002a9a:	4b87      	ldr	r3, [pc, #540]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa8:	4983      	ldr	r1, [pc, #524]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f003 0308 	and.w	r3, r3, #8
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d00a      	beq.n	8002ad2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002abc:	4b7e      	ldr	r3, [pc, #504]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002abe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aca:	497b      	ldr	r1, [pc, #492]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002acc:	4313      	orrs	r3, r2
 8002ace:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0310 	and.w	r3, r3, #16
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00a      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ade:	4b76      	ldr	r3, [pc, #472]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ae0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002aec:	4972      	ldr	r1, [pc, #456]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0320 	and.w	r3, r3, #32
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d00a      	beq.n	8002b16 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b00:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b06:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b0e:	496a      	ldr	r1, [pc, #424]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b10:	4313      	orrs	r3, r2
 8002b12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d00a      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b22:	4b65      	ldr	r3, [pc, #404]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b28:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b30:	4961      	ldr	r1, [pc, #388]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b32:	4313      	orrs	r3, r2
 8002b34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d00a      	beq.n	8002b5a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b44:	4b5c      	ldr	r3, [pc, #368]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b4a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	4959      	ldr	r1, [pc, #356]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b54:	4313      	orrs	r3, r2
 8002b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d00a      	beq.n	8002b7c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b66:	4b54      	ldr	r3, [pc, #336]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b74:	4950      	ldr	r1, [pc, #320]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00a      	beq.n	8002b9e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b88:	4b4b      	ldr	r3, [pc, #300]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b96:	4948      	ldr	r1, [pc, #288]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b98:	4313      	orrs	r3, r2
 8002b9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00a      	beq.n	8002bc0 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002baa:	4b43      	ldr	r3, [pc, #268]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bb0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002bb8:	493f      	ldr	r1, [pc, #252]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d028      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002bcc:	4b3a      	ldr	r3, [pc, #232]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bd2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bda:	4937      	ldr	r1, [pc, #220]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002be6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002bea:	d106      	bne.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002bec:	4b32      	ldr	r3, [pc, #200]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	4a31      	ldr	r2, [pc, #196]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf6:	60d3      	str	r3, [r2, #12]
 8002bf8:	e011      	b.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002bfe:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c02:	d10c      	bne.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	3304      	adds	r3, #4
 8002c08:	2101      	movs	r1, #1
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	f000 f8c8 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002c10:	4603      	mov	r3, r0
 8002c12:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002c14:	7cfb      	ldrb	r3, [r7, #19]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d001      	beq.n	8002c1e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002c1a:	7cfb      	ldrb	r3, [r7, #19]
 8002c1c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d028      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002c2a:	4b23      	ldr	r3, [pc, #140]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c30:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	491f      	ldr	r1, [pc, #124]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c48:	d106      	bne.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c4a:	4b1b      	ldr	r3, [pc, #108]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	4a1a      	ldr	r2, [pc, #104]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c50:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c54:	60d3      	str	r3, [r2, #12]
 8002c56:	e011      	b.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002c60:	d10c      	bne.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2101      	movs	r1, #1
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f000 f899 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002c72:	7cfb      	ldrb	r3, [r7, #19]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d001      	beq.n	8002c7c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002c78:	7cfb      	ldrb	r3, [r7, #19]
 8002c7a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d02b      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c8e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c96:	4908      	ldr	r1, [pc, #32]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c98:	4313      	orrs	r3, r2
 8002c9a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ca2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ca6:	d109      	bne.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ca8:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002caa:	68db      	ldr	r3, [r3, #12]
 8002cac:	4a02      	ldr	r2, [pc, #8]	; (8002cb8 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cae:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cb2:	60d3      	str	r3, [r2, #12]
 8002cb4:	e014      	b.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002cb6:	bf00      	nop
 8002cb8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002cc0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	3304      	adds	r3, #4
 8002cca:	2101      	movs	r1, #1
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f000 f867 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002cd6:	7cfb      	ldrb	r3, [r7, #19]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002cdc:	7cfb      	ldrb	r3, [r7, #19]
 8002cde:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d02f      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002cec:	4b2b      	ldr	r3, [pc, #172]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002cfa:	4928      	ldr	r1, [pc, #160]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d06:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d0a:	d10d      	bne.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	3304      	adds	r3, #4
 8002d10:	2102      	movs	r1, #2
 8002d12:	4618      	mov	r0, r3
 8002d14:	f000 f844 	bl	8002da0 <RCCEx_PLLSAI1_Config>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d014      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d22:	7cfb      	ldrb	r3, [r7, #19]
 8002d24:	74bb      	strb	r3, [r7, #18]
 8002d26:	e011      	b.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d30:	d10c      	bne.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	3320      	adds	r3, #32
 8002d36:	2102      	movs	r1, #2
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f000 f925 	bl	8002f88 <RCCEx_PLLSAI2_Config>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d42:	7cfb      	ldrb	r3, [r7, #19]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d001      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002d48:	7cfb      	ldrb	r3, [r7, #19]
 8002d4a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d00a      	beq.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002d58:	4b10      	ldr	r3, [pc, #64]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002d66:	490d      	ldr	r1, [pc, #52]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00b      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002d7a:	4b08      	ldr	r3, [pc, #32]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d8a:	4904      	ldr	r1, [pc, #16]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002d92:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	40021000 	.word	0x40021000

08002da0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002daa:	2300      	movs	r3, #0
 8002dac:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002dae:	4b75      	ldr	r3, [pc, #468]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002db0:	68db      	ldr	r3, [r3, #12]
 8002db2:	f003 0303 	and.w	r3, r3, #3
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d018      	beq.n	8002dec <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002dba:	4b72      	ldr	r3, [pc, #456]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dbc:	68db      	ldr	r3, [r3, #12]
 8002dbe:	f003 0203 	and.w	r2, r3, #3
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d10d      	bne.n	8002de6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
       ||
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002dd2:	4b6c      	ldr	r3, [pc, #432]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	091b      	lsrs	r3, r3, #4
 8002dd8:	f003 0307 	and.w	r3, r3, #7
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
       ||
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d047      	beq.n	8002e76 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002de6:	2301      	movs	r3, #1
 8002de8:	73fb      	strb	r3, [r7, #15]
 8002dea:	e044      	b.n	8002e76 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2b03      	cmp	r3, #3
 8002df2:	d018      	beq.n	8002e26 <RCCEx_PLLSAI1_Config+0x86>
 8002df4:	2b03      	cmp	r3, #3
 8002df6:	d825      	bhi.n	8002e44 <RCCEx_PLLSAI1_Config+0xa4>
 8002df8:	2b01      	cmp	r3, #1
 8002dfa:	d002      	beq.n	8002e02 <RCCEx_PLLSAI1_Config+0x62>
 8002dfc:	2b02      	cmp	r3, #2
 8002dfe:	d009      	beq.n	8002e14 <RCCEx_PLLSAI1_Config+0x74>
 8002e00:	e020      	b.n	8002e44 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002e02:	4b60      	ldr	r3, [pc, #384]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d11d      	bne.n	8002e4a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e12:	e01a      	b.n	8002e4a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002e14:	4b5b      	ldr	r3, [pc, #364]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d116      	bne.n	8002e4e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002e24:	e013      	b.n	8002e4e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002e26:	4b57      	ldr	r3, [pc, #348]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d10f      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002e32:	4b54      	ldr	r3, [pc, #336]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d109      	bne.n	8002e52 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002e42:	e006      	b.n	8002e52 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	73fb      	strb	r3, [r7, #15]
      break;
 8002e48:	e004      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4a:	bf00      	nop
 8002e4c:	e002      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e4e:	bf00      	nop
 8002e50:	e000      	b.n	8002e54 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002e52:	bf00      	nop
    }

    if(status == HAL_OK)
 8002e54:	7bfb      	ldrb	r3, [r7, #15]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d10d      	bne.n	8002e76 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002e5a:	4b4a      	ldr	r3, [pc, #296]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6819      	ldr	r1, [r3, #0]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	011b      	lsls	r3, r3, #4
 8002e6e:	430b      	orrs	r3, r1
 8002e70:	4944      	ldr	r1, [pc, #272]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e76:	7bfb      	ldrb	r3, [r7, #15]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d17d      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002e7c:	4b41      	ldr	r3, [pc, #260]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4a40      	ldr	r2, [pc, #256]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002e86:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e88:	f7fe fb28 	bl	80014dc <HAL_GetTick>
 8002e8c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002e8e:	e009      	b.n	8002ea4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002e90:	f7fe fb24 	bl	80014dc <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b02      	cmp	r3, #2
 8002e9c:	d902      	bls.n	8002ea4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	73fb      	strb	r3, [r7, #15]
        break;
 8002ea2:	e005      	b.n	8002eb0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ea4:	4b37      	ldr	r3, [pc, #220]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1ef      	bne.n	8002e90 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002eb0:	7bfb      	ldrb	r3, [r7, #15]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d160      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d111      	bne.n	8002ee0 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ebc:	4b31      	ldr	r3, [pc, #196]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002ec4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec8:	687a      	ldr	r2, [r7, #4]
 8002eca:	6892      	ldr	r2, [r2, #8]
 8002ecc:	0211      	lsls	r1, r2, #8
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	0912      	lsrs	r2, r2, #4
 8002ed4:	0452      	lsls	r2, r2, #17
 8002ed6:	430a      	orrs	r2, r1
 8002ed8:	492a      	ldr	r1, [pc, #168]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002eda:	4313      	orrs	r3, r2
 8002edc:	610b      	str	r3, [r1, #16]
 8002ede:	e027      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	2b01      	cmp	r3, #1
 8002ee4:	d112      	bne.n	8002f0c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ee6:	4b27      	ldr	r3, [pc, #156]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ee8:	691b      	ldr	r3, [r3, #16]
 8002eea:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002eee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002ef2:	687a      	ldr	r2, [r7, #4]
 8002ef4:	6892      	ldr	r2, [r2, #8]
 8002ef6:	0211      	lsls	r1, r2, #8
 8002ef8:	687a      	ldr	r2, [r7, #4]
 8002efa:	6912      	ldr	r2, [r2, #16]
 8002efc:	0852      	lsrs	r2, r2, #1
 8002efe:	3a01      	subs	r2, #1
 8002f00:	0552      	lsls	r2, r2, #21
 8002f02:	430a      	orrs	r2, r1
 8002f04:	491f      	ldr	r1, [pc, #124]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	610b      	str	r3, [r1, #16]
 8002f0a:	e011      	b.n	8002f30 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f0c:	4b1d      	ldr	r3, [pc, #116]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f0e:	691b      	ldr	r3, [r3, #16]
 8002f10:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002f14:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002f18:	687a      	ldr	r2, [r7, #4]
 8002f1a:	6892      	ldr	r2, [r2, #8]
 8002f1c:	0211      	lsls	r1, r2, #8
 8002f1e:	687a      	ldr	r2, [r7, #4]
 8002f20:	6952      	ldr	r2, [r2, #20]
 8002f22:	0852      	lsrs	r2, r2, #1
 8002f24:	3a01      	subs	r2, #1
 8002f26:	0652      	lsls	r2, r2, #25
 8002f28:	430a      	orrs	r2, r1
 8002f2a:	4916      	ldr	r1, [pc, #88]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002f30:	4b14      	ldr	r3, [pc, #80]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a13      	ldr	r2, [pc, #76]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002f3a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f3c:	f7fe face 	bl	80014dc <HAL_GetTick>
 8002f40:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f42:	e009      	b.n	8002f58 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f44:	f7fe faca 	bl	80014dc <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d902      	bls.n	8002f58 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	73fb      	strb	r3, [r7, #15]
          break;
 8002f56:	e005      	b.n	8002f64 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002f58:	4b0a      	ldr	r3, [pc, #40]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d0ef      	beq.n	8002f44 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002f64:	7bfb      	ldrb	r3, [r7, #15]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d106      	bne.n	8002f78 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002f6a:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6c:	691a      	ldr	r2, [r3, #16]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	4904      	ldr	r1, [pc, #16]	; (8002f84 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f74:	4313      	orrs	r3, r2
 8002f76:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40021000 	.word	0x40021000

08002f88 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b084      	sub	sp, #16
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
 8002f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f96:	4b6a      	ldr	r3, [pc, #424]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	f003 0303 	and.w	r3, r3, #3
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d018      	beq.n	8002fd4 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002fa2:	4b67      	ldr	r3, [pc, #412]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	f003 0203 	and.w	r2, r3, #3
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	429a      	cmp	r2, r3
 8002fb0:	d10d      	bne.n	8002fce <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
       ||
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d009      	beq.n	8002fce <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002fba:	4b61      	ldr	r3, [pc, #388]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fbc:	68db      	ldr	r3, [r3, #12]
 8002fbe:	091b      	lsrs	r3, r3, #4
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	1c5a      	adds	r2, r3, #1
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
       ||
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d047      	beq.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	73fb      	strb	r3, [r7, #15]
 8002fd2:	e044      	b.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d018      	beq.n	800300e <RCCEx_PLLSAI2_Config+0x86>
 8002fdc:	2b03      	cmp	r3, #3
 8002fde:	d825      	bhi.n	800302c <RCCEx_PLLSAI2_Config+0xa4>
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d002      	beq.n	8002fea <RCCEx_PLLSAI2_Config+0x62>
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	d009      	beq.n	8002ffc <RCCEx_PLLSAI2_Config+0x74>
 8002fe8:	e020      	b.n	800302c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fea:	4b55      	ldr	r3, [pc, #340]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d11d      	bne.n	8003032 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ffa:	e01a      	b.n	8003032 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ffc:	4b50      	ldr	r3, [pc, #320]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003004:	2b00      	cmp	r3, #0
 8003006:	d116      	bne.n	8003036 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800300c:	e013      	b.n	8003036 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800300e:	4b4c      	ldr	r3, [pc, #304]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10f      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800301a:	4b49      	ldr	r3, [pc, #292]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d109      	bne.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800302a:	e006      	b.n	800303a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 800302c:	2301      	movs	r3, #1
 800302e:	73fb      	strb	r3, [r7, #15]
      break;
 8003030:	e004      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003032:	bf00      	nop
 8003034:	e002      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003036:	bf00      	nop
 8003038:	e000      	b.n	800303c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800303a:	bf00      	nop
    }

    if(status == HAL_OK)
 800303c:	7bfb      	ldrb	r3, [r7, #15]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10d      	bne.n	800305e <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8003042:	4b3f      	ldr	r3, [pc, #252]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003044:	68db      	ldr	r3, [r3, #12]
 8003046:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6819      	ldr	r1, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	430b      	orrs	r3, r1
 8003058:	4939      	ldr	r1, [pc, #228]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800305a:	4313      	orrs	r3, r2
 800305c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800305e:	7bfb      	ldrb	r3, [r7, #15]
 8003060:	2b00      	cmp	r3, #0
 8003062:	d167      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003064:	4b36      	ldr	r3, [pc, #216]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a35      	ldr	r2, [pc, #212]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800306e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003070:	f7fe fa34 	bl	80014dc <HAL_GetTick>
 8003074:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003076:	e009      	b.n	800308c <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003078:	f7fe fa30 	bl	80014dc <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b02      	cmp	r3, #2
 8003084:	d902      	bls.n	800308c <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	73fb      	strb	r3, [r7, #15]
        break;
 800308a:	e005      	b.n	8003098 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800308c:	4b2c      	ldr	r3, [pc, #176]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d1ef      	bne.n	8003078 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003098:	7bfb      	ldrb	r3, [r7, #15]
 800309a:	2b00      	cmp	r3, #0
 800309c:	d14a      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800309e:	683b      	ldr	r3, [r7, #0]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d111      	bne.n	80030c8 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030a4:	4b26      	ldr	r3, [pc, #152]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030a6:	695b      	ldr	r3, [r3, #20]
 80030a8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80030ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6892      	ldr	r2, [r2, #8]
 80030b4:	0211      	lsls	r1, r2, #8
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68d2      	ldr	r2, [r2, #12]
 80030ba:	0912      	lsrs	r2, r2, #4
 80030bc:	0452      	lsls	r2, r2, #17
 80030be:	430a      	orrs	r2, r1
 80030c0:	491f      	ldr	r1, [pc, #124]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c2:	4313      	orrs	r3, r2
 80030c4:	614b      	str	r3, [r1, #20]
 80030c6:	e011      	b.n	80030ec <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80030c8:	4b1d      	ldr	r3, [pc, #116]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030d0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6892      	ldr	r2, [r2, #8]
 80030d8:	0211      	lsls	r1, r2, #8
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6912      	ldr	r2, [r2, #16]
 80030de:	0852      	lsrs	r2, r2, #1
 80030e0:	3a01      	subs	r2, #1
 80030e2:	0652      	lsls	r2, r2, #25
 80030e4:	430a      	orrs	r2, r1
 80030e6:	4916      	ldr	r1, [pc, #88]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80030ec:	4b14      	ldr	r3, [pc, #80]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a13      	ldr	r2, [pc, #76]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030f6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030f8:	f7fe f9f0 	bl	80014dc <HAL_GetTick>
 80030fc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80030fe:	e009      	b.n	8003114 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003100:	f7fe f9ec 	bl	80014dc <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68bb      	ldr	r3, [r7, #8]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	2b02      	cmp	r3, #2
 800310c:	d902      	bls.n	8003114 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800310e:	2303      	movs	r3, #3
 8003110:	73fb      	strb	r3, [r7, #15]
          break;
 8003112:	e005      	b.n	8003120 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003114:	4b0a      	ldr	r3, [pc, #40]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800311c:	2b00      	cmp	r3, #0
 800311e:	d0ef      	beq.n	8003100 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003128:	695a      	ldr	r2, [r3, #20]
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4904      	ldr	r1, [pc, #16]	; (8003140 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003130:	4313      	orrs	r3, r2
 8003132:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
 800313e:	bf00      	nop
 8003140:	40021000 	.word	0x40021000

08003144 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b082      	sub	sp, #8
 8003148:	af00      	add	r7, sp, #0
 800314a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2b00      	cmp	r3, #0
 8003150:	d101      	bne.n	8003156 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	e049      	b.n	80031ea <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b00      	cmp	r3, #0
 8003160:	d106      	bne.n	8003170 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800316a:	6878      	ldr	r0, [r7, #4]
 800316c:	f7fd ff66 	bl	800103c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	2202      	movs	r2, #2
 8003174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681a      	ldr	r2, [r3, #0]
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	3304      	adds	r3, #4
 8003180:	4619      	mov	r1, r3
 8003182:	4610      	mov	r0, r2
 8003184:	f000 f9d0 	bl	8003528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2201      	movs	r2, #1
 80031cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2201      	movs	r2, #1
 80031e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
	...

080031f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b085      	sub	sp, #20
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b01      	cmp	r3, #1
 8003206:	d001      	beq.n	800320c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e04f      	b.n	80032ac <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2202      	movs	r2, #2
 8003210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f042 0201 	orr.w	r2, r2, #1
 8003222:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a23      	ldr	r2, [pc, #140]	; (80032b8 <HAL_TIM_Base_Start_IT+0xc4>)
 800322a:	4293      	cmp	r3, r2
 800322c:	d01d      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003236:	d018      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a1f      	ldr	r2, [pc, #124]	; (80032bc <HAL_TIM_Base_Start_IT+0xc8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d013      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4a1e      	ldr	r2, [pc, #120]	; (80032c0 <HAL_TIM_Base_Start_IT+0xcc>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d00e      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a1c      	ldr	r2, [pc, #112]	; (80032c4 <HAL_TIM_Base_Start_IT+0xd0>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d009      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4a1b      	ldr	r2, [pc, #108]	; (80032c8 <HAL_TIM_Base_Start_IT+0xd4>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d004      	beq.n	800326a <HAL_TIM_Base_Start_IT+0x76>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a19      	ldr	r2, [pc, #100]	; (80032cc <HAL_TIM_Base_Start_IT+0xd8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d115      	bne.n	8003296 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	4b17      	ldr	r3, [pc, #92]	; (80032d0 <HAL_TIM_Base_Start_IT+0xdc>)
 8003272:	4013      	ands	r3, r2
 8003274:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b06      	cmp	r3, #6
 800327a:	d015      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0xb4>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003282:	d011      	beq.n	80032a8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f042 0201 	orr.w	r2, r2, #1
 8003292:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003294:	e008      	b.n	80032a8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f042 0201 	orr.w	r2, r2, #1
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	e000      	b.n	80032aa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80032aa:	2300      	movs	r3, #0
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3714      	adds	r7, #20
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr
 80032b8:	40012c00 	.word	0x40012c00
 80032bc:	40000400 	.word	0x40000400
 80032c0:	40000800 	.word	0x40000800
 80032c4:	40000c00 	.word	0x40000c00
 80032c8:	40013400 	.word	0x40013400
 80032cc:	40014000 	.word	0x40014000
 80032d0:	00010007 	.word	0x00010007

080032d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68db      	ldr	r3, [r3, #12]
 80032e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	691b      	ldr	r3, [r3, #16]
 80032ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0302 	and.w	r3, r3, #2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d020      	beq.n	8003338 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0302 	and.w	r3, r3, #2
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01b      	beq.n	8003338 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0202 	mvn.w	r2, #2
 8003308:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f003 0303 	and.w	r3, r3, #3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f8e4 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 f8d6 	bl	80034d8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8e7 	bl	8003500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0304 	and.w	r3, r3, #4
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0304 	and.w	r3, r3, #4
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0204 	mvn.w	r2, #4
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2202      	movs	r2, #2
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699b      	ldr	r3, [r3, #24]
 8003362:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 f8be 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 f8b0 	bl	80034d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 f8c1 	bl	8003500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0308 	and.w	r3, r3, #8
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0208 	mvn.w	r2, #8
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2204      	movs	r2, #4
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f003 0303 	and.w	r3, r3, #3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 f898 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f88a 	bl	80034d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f89b 	bl	8003500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0310 	and.w	r3, r3, #16
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d020      	beq.n	800341c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0310 	and.w	r3, r3, #16
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d01b      	beq.n	800341c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0210 	mvn.w	r2, #16
 80033ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2208      	movs	r2, #8
 80033f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003402:	6878      	ldr	r0, [r7, #4]
 8003404:	f000 f872 	bl	80034ec <HAL_TIM_IC_CaptureCallback>
 8003408:	e005      	b.n	8003416 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f000 f864 	bl	80034d8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003410:	6878      	ldr	r0, [r7, #4]
 8003412:	f000 f875 	bl	8003500 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2200      	movs	r2, #0
 800341a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00c      	beq.n	8003440 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	f003 0301 	and.w	r3, r3, #1
 800342c:	2b00      	cmp	r3, #0
 800342e:	d007      	beq.n	8003440 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f06f 0201 	mvn.w	r2, #1
 8003438:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f7fd fdb6 	bl	8000fac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003440:	68bb      	ldr	r3, [r7, #8]
 8003442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003446:	2b00      	cmp	r3, #0
 8003448:	d00c      	beq.n	8003464 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003450:	2b00      	cmp	r3, #0
 8003452:	d007      	beq.n	8003464 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800345c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800345e:	6878      	ldr	r0, [r7, #4]
 8003460:	f000 f906 	bl	8003670 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800346a:	2b00      	cmp	r3, #0
 800346c:	d00c      	beq.n	8003488 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003474:	2b00      	cmp	r3, #0
 8003476:	d007      	beq.n	8003488 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003480:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f000 f8fe 	bl	8003684 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00c      	beq.n	80034ac <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003498:	2b00      	cmp	r3, #0
 800349a:	d007      	beq.n	80034ac <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80034a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 f834 	bl	8003514 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0320 	and.w	r3, r3, #32
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d00c      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d007      	beq.n	80034d0 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0220 	mvn.w	r2, #32
 80034c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f8c6 	bl	800365c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034d0:	bf00      	nop
 80034d2:	3710      	adds	r7, #16
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b083      	sub	sp, #12
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034f4:	bf00      	nop
 80034f6:	370c      	adds	r7, #12
 80034f8:	46bd      	mov	sp, r7
 80034fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fe:	4770      	bx	lr

08003500 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b480      	push	{r7}
 8003502:	b083      	sub	sp, #12
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003508:	bf00      	nop
 800350a:	370c      	adds	r7, #12
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr

08003514 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	4a40      	ldr	r2, [pc, #256]	; (800363c <TIM_Base_SetConfig+0x114>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d013      	beq.n	8003568 <TIM_Base_SetConfig+0x40>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003546:	d00f      	beq.n	8003568 <TIM_Base_SetConfig+0x40>
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4a3d      	ldr	r2, [pc, #244]	; (8003640 <TIM_Base_SetConfig+0x118>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d00b      	beq.n	8003568 <TIM_Base_SetConfig+0x40>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	4a3c      	ldr	r2, [pc, #240]	; (8003644 <TIM_Base_SetConfig+0x11c>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d007      	beq.n	8003568 <TIM_Base_SetConfig+0x40>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	4a3b      	ldr	r2, [pc, #236]	; (8003648 <TIM_Base_SetConfig+0x120>)
 800355c:	4293      	cmp	r3, r2
 800355e:	d003      	beq.n	8003568 <TIM_Base_SetConfig+0x40>
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a3a      	ldr	r2, [pc, #232]	; (800364c <TIM_Base_SetConfig+0x124>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d108      	bne.n	800357a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800356e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	68fa      	ldr	r2, [r7, #12]
 8003576:	4313      	orrs	r3, r2
 8003578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a2f      	ldr	r2, [pc, #188]	; (800363c <TIM_Base_SetConfig+0x114>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d01f      	beq.n	80035c2 <TIM_Base_SetConfig+0x9a>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003588:	d01b      	beq.n	80035c2 <TIM_Base_SetConfig+0x9a>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2c      	ldr	r2, [pc, #176]	; (8003640 <TIM_Base_SetConfig+0x118>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d017      	beq.n	80035c2 <TIM_Base_SetConfig+0x9a>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a2b      	ldr	r2, [pc, #172]	; (8003644 <TIM_Base_SetConfig+0x11c>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d013      	beq.n	80035c2 <TIM_Base_SetConfig+0x9a>
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	4a2a      	ldr	r2, [pc, #168]	; (8003648 <TIM_Base_SetConfig+0x120>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d00f      	beq.n	80035c2 <TIM_Base_SetConfig+0x9a>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	4a29      	ldr	r2, [pc, #164]	; (800364c <TIM_Base_SetConfig+0x124>)
 80035a6:	4293      	cmp	r3, r2
 80035a8:	d00b      	beq.n	80035c2 <TIM_Base_SetConfig+0x9a>
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4a28      	ldr	r2, [pc, #160]	; (8003650 <TIM_Base_SetConfig+0x128>)
 80035ae:	4293      	cmp	r3, r2
 80035b0:	d007      	beq.n	80035c2 <TIM_Base_SetConfig+0x9a>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a27      	ldr	r2, [pc, #156]	; (8003654 <TIM_Base_SetConfig+0x12c>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d003      	beq.n	80035c2 <TIM_Base_SetConfig+0x9a>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a26      	ldr	r2, [pc, #152]	; (8003658 <TIM_Base_SetConfig+0x130>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d108      	bne.n	80035d4 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	68fa      	ldr	r2, [r7, #12]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035da:	683b      	ldr	r3, [r7, #0]
 80035dc:	695b      	ldr	r3, [r3, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68fa      	ldr	r2, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	689a      	ldr	r2, [r3, #8]
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	4a10      	ldr	r2, [pc, #64]	; (800363c <TIM_Base_SetConfig+0x114>)
 80035fc:	4293      	cmp	r3, r2
 80035fe:	d00f      	beq.n	8003620 <TIM_Base_SetConfig+0xf8>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a12      	ldr	r2, [pc, #72]	; (800364c <TIM_Base_SetConfig+0x124>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d00b      	beq.n	8003620 <TIM_Base_SetConfig+0xf8>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a11      	ldr	r2, [pc, #68]	; (8003650 <TIM_Base_SetConfig+0x128>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d007      	beq.n	8003620 <TIM_Base_SetConfig+0xf8>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a10      	ldr	r2, [pc, #64]	; (8003654 <TIM_Base_SetConfig+0x12c>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d003      	beq.n	8003620 <TIM_Base_SetConfig+0xf8>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a0f      	ldr	r2, [pc, #60]	; (8003658 <TIM_Base_SetConfig+0x130>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d103      	bne.n	8003628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	691a      	ldr	r2, [r3, #16]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2201      	movs	r2, #1
 800362c:	615a      	str	r2, [r3, #20]
}
 800362e:	bf00      	nop
 8003630:	3714      	adds	r7, #20
 8003632:	46bd      	mov	sp, r7
 8003634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003638:	4770      	bx	lr
 800363a:	bf00      	nop
 800363c:	40012c00 	.word	0x40012c00
 8003640:	40000400 	.word	0x40000400
 8003644:	40000800 	.word	0x40000800
 8003648:	40000c00 	.word	0x40000c00
 800364c:	40013400 	.word	0x40013400
 8003650:	40014000 	.word	0x40014000
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800

0800365c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003678:	bf00      	nop
 800367a:	370c      	adds	r7, #12
 800367c:	46bd      	mov	sp, r7
 800367e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003682:	4770      	bx	lr

08003684 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800368c:	bf00      	nop
 800368e:	370c      	adds	r7, #12
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b082      	sub	sp, #8
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e040      	b.n	800372c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d106      	bne.n	80036c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80036ba:	6878      	ldr	r0, [r7, #4]
 80036bc:	f7fd fce4 	bl	8001088 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2224      	movs	r2, #36	; 0x24
 80036c4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f022 0201 	bic.w	r2, r2, #1
 80036d4:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d002      	beq.n	80036e4 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 fb6a 	bl	8003db8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 f8af 	bl	8003848 <UART_SetConfig>
 80036ea:	4603      	mov	r3, r0
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e01b      	b.n	800372c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003702:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003712:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f042 0201 	orr.w	r2, r2, #1
 8003722:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 fbe9 	bl	8003efc <UART_CheckIdleState>
 800372a:	4603      	mov	r3, r0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3708      	adds	r7, #8
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b08a      	sub	sp, #40	; 0x28
 8003738:	af02      	add	r7, sp, #8
 800373a:	60f8      	str	r0, [r7, #12]
 800373c:	60b9      	str	r1, [r7, #8]
 800373e:	603b      	str	r3, [r7, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003748:	2b20      	cmp	r3, #32
 800374a:	d178      	bne.n	800383e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_UART_Transmit+0x24>
 8003752:	88fb      	ldrh	r3, [r7, #6]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e071      	b.n	8003840 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	2200      	movs	r2, #0
 8003760:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2221      	movs	r2, #33	; 0x21
 8003768:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800376a:	f7fd feb7 	bl	80014dc <HAL_GetTick>
 800376e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	88fa      	ldrh	r2, [r7, #6]
 8003774:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	88fa      	ldrh	r2, [r7, #6]
 800377c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003788:	d108      	bne.n	800379c <HAL_UART_Transmit+0x68>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	691b      	ldr	r3, [r3, #16]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d104      	bne.n	800379c <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	61bb      	str	r3, [r7, #24]
 800379a:	e003      	b.n	80037a4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037a0:	2300      	movs	r3, #0
 80037a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037a4:	e030      	b.n	8003808 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037a6:	683b      	ldr	r3, [r7, #0]
 80037a8:	9300      	str	r3, [sp, #0]
 80037aa:	697b      	ldr	r3, [r7, #20]
 80037ac:	2200      	movs	r2, #0
 80037ae:	2180      	movs	r1, #128	; 0x80
 80037b0:	68f8      	ldr	r0, [r7, #12]
 80037b2:	f000 fc4b 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d004      	beq.n	80037c6 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e03c      	b.n	8003840 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 80037c6:	69fb      	ldr	r3, [r7, #28]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d10b      	bne.n	80037e4 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037cc:	69bb      	ldr	r3, [r7, #24]
 80037ce:	881a      	ldrh	r2, [r3, #0]
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80037d8:	b292      	uxth	r2, r2
 80037da:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	3302      	adds	r3, #2
 80037e0:	61bb      	str	r3, [r7, #24]
 80037e2:	e008      	b.n	80037f6 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80037e4:	69fb      	ldr	r3, [r7, #28]
 80037e6:	781a      	ldrb	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	b292      	uxth	r2, r2
 80037ee:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80037f0:	69fb      	ldr	r3, [r7, #28]
 80037f2:	3301      	adds	r3, #1
 80037f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80037fc:	b29b      	uxth	r3, r3
 80037fe:	3b01      	subs	r3, #1
 8003800:	b29a      	uxth	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800380e:	b29b      	uxth	r3, r3
 8003810:	2b00      	cmp	r3, #0
 8003812:	d1c8      	bne.n	80037a6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	9300      	str	r3, [sp, #0]
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	2200      	movs	r2, #0
 800381c:	2140      	movs	r1, #64	; 0x40
 800381e:	68f8      	ldr	r0, [r7, #12]
 8003820:	f000 fc14 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003824:	4603      	mov	r3, r0
 8003826:	2b00      	cmp	r3, #0
 8003828:	d004      	beq.n	8003834 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	2220      	movs	r2, #32
 800382e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e005      	b.n	8003840 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2220      	movs	r2, #32
 8003838:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800383a:	2300      	movs	r3, #0
 800383c:	e000      	b.n	8003840 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800383e:	2302      	movs	r3, #2
  }
}
 8003840:	4618      	mov	r0, r3
 8003842:	3720      	adds	r7, #32
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}

08003848 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003848:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800384c:	b08a      	sub	sp, #40	; 0x28
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003852:	2300      	movs	r3, #0
 8003854:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	431a      	orrs	r2, r3
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	695b      	ldr	r3, [r3, #20]
 8003866:	431a      	orrs	r2, r3
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	4313      	orrs	r3, r2
 800386e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	681a      	ldr	r2, [r3, #0]
 8003876:	4ba4      	ldr	r3, [pc, #656]	; (8003b08 <UART_SetConfig+0x2c0>)
 8003878:	4013      	ands	r3, r2
 800387a:	68fa      	ldr	r2, [r7, #12]
 800387c:	6812      	ldr	r2, [r2, #0]
 800387e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003880:	430b      	orrs	r3, r1
 8003882:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4a99      	ldr	r2, [pc, #612]	; (8003b0c <UART_SetConfig+0x2c4>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d004      	beq.n	80038b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	6a1b      	ldr	r3, [r3, #32]
 80038ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b0:	4313      	orrs	r3, r2
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038c4:	430a      	orrs	r2, r1
 80038c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4a90      	ldr	r2, [pc, #576]	; (8003b10 <UART_SetConfig+0x2c8>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d126      	bne.n	8003920 <UART_SetConfig+0xd8>
 80038d2:	4b90      	ldr	r3, [pc, #576]	; (8003b14 <UART_SetConfig+0x2cc>)
 80038d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d8:	f003 0303 	and.w	r3, r3, #3
 80038dc:	2b03      	cmp	r3, #3
 80038de:	d81b      	bhi.n	8003918 <UART_SetConfig+0xd0>
 80038e0:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <UART_SetConfig+0xa0>)
 80038e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e6:	bf00      	nop
 80038e8:	080038f9 	.word	0x080038f9
 80038ec:	08003909 	.word	0x08003909
 80038f0:	08003901 	.word	0x08003901
 80038f4:	08003911 	.word	0x08003911
 80038f8:	2301      	movs	r3, #1
 80038fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038fe:	e116      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003900:	2302      	movs	r3, #2
 8003902:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003906:	e112      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003908:	2304      	movs	r3, #4
 800390a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800390e:	e10e      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003910:	2308      	movs	r3, #8
 8003912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003916:	e10a      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003918:	2310      	movs	r3, #16
 800391a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800391e:	e106      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a7c      	ldr	r2, [pc, #496]	; (8003b18 <UART_SetConfig+0x2d0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d138      	bne.n	800399c <UART_SetConfig+0x154>
 800392a:	4b7a      	ldr	r3, [pc, #488]	; (8003b14 <UART_SetConfig+0x2cc>)
 800392c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b0c      	cmp	r3, #12
 8003936:	d82d      	bhi.n	8003994 <UART_SetConfig+0x14c>
 8003938:	a201      	add	r2, pc, #4	; (adr r2, 8003940 <UART_SetConfig+0xf8>)
 800393a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800393e:	bf00      	nop
 8003940:	08003975 	.word	0x08003975
 8003944:	08003995 	.word	0x08003995
 8003948:	08003995 	.word	0x08003995
 800394c:	08003995 	.word	0x08003995
 8003950:	08003985 	.word	0x08003985
 8003954:	08003995 	.word	0x08003995
 8003958:	08003995 	.word	0x08003995
 800395c:	08003995 	.word	0x08003995
 8003960:	0800397d 	.word	0x0800397d
 8003964:	08003995 	.word	0x08003995
 8003968:	08003995 	.word	0x08003995
 800396c:	08003995 	.word	0x08003995
 8003970:	0800398d 	.word	0x0800398d
 8003974:	2300      	movs	r3, #0
 8003976:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800397a:	e0d8      	b.n	8003b2e <UART_SetConfig+0x2e6>
 800397c:	2302      	movs	r3, #2
 800397e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003982:	e0d4      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003984:	2304      	movs	r3, #4
 8003986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800398a:	e0d0      	b.n	8003b2e <UART_SetConfig+0x2e6>
 800398c:	2308      	movs	r3, #8
 800398e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003992:	e0cc      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003994:	2310      	movs	r3, #16
 8003996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800399a:	e0c8      	b.n	8003b2e <UART_SetConfig+0x2e6>
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	4a5e      	ldr	r2, [pc, #376]	; (8003b1c <UART_SetConfig+0x2d4>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d125      	bne.n	80039f2 <UART_SetConfig+0x1aa>
 80039a6:	4b5b      	ldr	r3, [pc, #364]	; (8003b14 <UART_SetConfig+0x2cc>)
 80039a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80039b0:	2b30      	cmp	r3, #48	; 0x30
 80039b2:	d016      	beq.n	80039e2 <UART_SetConfig+0x19a>
 80039b4:	2b30      	cmp	r3, #48	; 0x30
 80039b6:	d818      	bhi.n	80039ea <UART_SetConfig+0x1a2>
 80039b8:	2b20      	cmp	r3, #32
 80039ba:	d00a      	beq.n	80039d2 <UART_SetConfig+0x18a>
 80039bc:	2b20      	cmp	r3, #32
 80039be:	d814      	bhi.n	80039ea <UART_SetConfig+0x1a2>
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <UART_SetConfig+0x182>
 80039c4:	2b10      	cmp	r3, #16
 80039c6:	d008      	beq.n	80039da <UART_SetConfig+0x192>
 80039c8:	e00f      	b.n	80039ea <UART_SetConfig+0x1a2>
 80039ca:	2300      	movs	r3, #0
 80039cc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d0:	e0ad      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039d2:	2302      	movs	r3, #2
 80039d4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d8:	e0a9      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039da:	2304      	movs	r3, #4
 80039dc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e0:	e0a5      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039e2:	2308      	movs	r3, #8
 80039e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e8:	e0a1      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039ea:	2310      	movs	r3, #16
 80039ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039f0:	e09d      	b.n	8003b2e <UART_SetConfig+0x2e6>
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	4a4a      	ldr	r2, [pc, #296]	; (8003b20 <UART_SetConfig+0x2d8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d125      	bne.n	8003a48 <UART_SetConfig+0x200>
 80039fc:	4b45      	ldr	r3, [pc, #276]	; (8003b14 <UART_SetConfig+0x2cc>)
 80039fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a02:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003a06:	2bc0      	cmp	r3, #192	; 0xc0
 8003a08:	d016      	beq.n	8003a38 <UART_SetConfig+0x1f0>
 8003a0a:	2bc0      	cmp	r3, #192	; 0xc0
 8003a0c:	d818      	bhi.n	8003a40 <UART_SetConfig+0x1f8>
 8003a0e:	2b80      	cmp	r3, #128	; 0x80
 8003a10:	d00a      	beq.n	8003a28 <UART_SetConfig+0x1e0>
 8003a12:	2b80      	cmp	r3, #128	; 0x80
 8003a14:	d814      	bhi.n	8003a40 <UART_SetConfig+0x1f8>
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d002      	beq.n	8003a20 <UART_SetConfig+0x1d8>
 8003a1a:	2b40      	cmp	r3, #64	; 0x40
 8003a1c:	d008      	beq.n	8003a30 <UART_SetConfig+0x1e8>
 8003a1e:	e00f      	b.n	8003a40 <UART_SetConfig+0x1f8>
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a26:	e082      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a28:	2302      	movs	r3, #2
 8003a2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a2e:	e07e      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a30:	2304      	movs	r3, #4
 8003a32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a36:	e07a      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a38:	2308      	movs	r3, #8
 8003a3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a3e:	e076      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a40:	2310      	movs	r3, #16
 8003a42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a46:	e072      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a35      	ldr	r2, [pc, #212]	; (8003b24 <UART_SetConfig+0x2dc>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d12a      	bne.n	8003aa8 <UART_SetConfig+0x260>
 8003a52:	4b30      	ldr	r3, [pc, #192]	; (8003b14 <UART_SetConfig+0x2cc>)
 8003a54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a60:	d01a      	beq.n	8003a98 <UART_SetConfig+0x250>
 8003a62:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003a66:	d81b      	bhi.n	8003aa0 <UART_SetConfig+0x258>
 8003a68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a6c:	d00c      	beq.n	8003a88 <UART_SetConfig+0x240>
 8003a6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003a72:	d815      	bhi.n	8003aa0 <UART_SetConfig+0x258>
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d003      	beq.n	8003a80 <UART_SetConfig+0x238>
 8003a78:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a7c:	d008      	beq.n	8003a90 <UART_SetConfig+0x248>
 8003a7e:	e00f      	b.n	8003aa0 <UART_SetConfig+0x258>
 8003a80:	2300      	movs	r3, #0
 8003a82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a86:	e052      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a88:	2302      	movs	r3, #2
 8003a8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a8e:	e04e      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a90:	2304      	movs	r3, #4
 8003a92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a96:	e04a      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003a98:	2308      	movs	r3, #8
 8003a9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a9e:	e046      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003aa0:	2310      	movs	r3, #16
 8003aa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa6:	e042      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	4a17      	ldr	r2, [pc, #92]	; (8003b0c <UART_SetConfig+0x2c4>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d13a      	bne.n	8003b28 <UART_SetConfig+0x2e0>
 8003ab2:	4b18      	ldr	r3, [pc, #96]	; (8003b14 <UART_SetConfig+0x2cc>)
 8003ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003abc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac0:	d01a      	beq.n	8003af8 <UART_SetConfig+0x2b0>
 8003ac2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ac6:	d81b      	bhi.n	8003b00 <UART_SetConfig+0x2b8>
 8003ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003acc:	d00c      	beq.n	8003ae8 <UART_SetConfig+0x2a0>
 8003ace:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ad2:	d815      	bhi.n	8003b00 <UART_SetConfig+0x2b8>
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d003      	beq.n	8003ae0 <UART_SetConfig+0x298>
 8003ad8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003adc:	d008      	beq.n	8003af0 <UART_SetConfig+0x2a8>
 8003ade:	e00f      	b.n	8003b00 <UART_SetConfig+0x2b8>
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae6:	e022      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e01e      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003af0:	2304      	movs	r3, #4
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af6:	e01a      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003af8:	2308      	movs	r3, #8
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afe:	e016      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003b00:	2310      	movs	r3, #16
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b06:	e012      	b.n	8003b2e <UART_SetConfig+0x2e6>
 8003b08:	efff69f3 	.word	0xefff69f3
 8003b0c:	40008000 	.word	0x40008000
 8003b10:	40013800 	.word	0x40013800
 8003b14:	40021000 	.word	0x40021000
 8003b18:	40004400 	.word	0x40004400
 8003b1c:	40004800 	.word	0x40004800
 8003b20:	40004c00 	.word	0x40004c00
 8003b24:	40005000 	.word	0x40005000
 8003b28:	2310      	movs	r3, #16
 8003b2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a9f      	ldr	r2, [pc, #636]	; (8003db0 <UART_SetConfig+0x568>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d17a      	bne.n	8003c2e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b3c:	2b08      	cmp	r3, #8
 8003b3e:	d824      	bhi.n	8003b8a <UART_SetConfig+0x342>
 8003b40:	a201      	add	r2, pc, #4	; (adr r2, 8003b48 <UART_SetConfig+0x300>)
 8003b42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b46:	bf00      	nop
 8003b48:	08003b6d 	.word	0x08003b6d
 8003b4c:	08003b8b 	.word	0x08003b8b
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b8b 	.word	0x08003b8b
 8003b58:	08003b7b 	.word	0x08003b7b
 8003b5c:	08003b8b 	.word	0x08003b8b
 8003b60:	08003b8b 	.word	0x08003b8b
 8003b64:	08003b8b 	.word	0x08003b8b
 8003b68:	08003b83 	.word	0x08003b83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b6c:	f7fe fd70 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 8003b70:	61f8      	str	r0, [r7, #28]
        break;
 8003b72:	e010      	b.n	8003b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b74:	4b8f      	ldr	r3, [pc, #572]	; (8003db4 <UART_SetConfig+0x56c>)
 8003b76:	61fb      	str	r3, [r7, #28]
        break;
 8003b78:	e00d      	b.n	8003b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b7a:	f7fe fcd1 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8003b7e:	61f8      	str	r0, [r7, #28]
        break;
 8003b80:	e009      	b.n	8003b96 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b86:	61fb      	str	r3, [r7, #28]
        break;
 8003b88:	e005      	b.n	8003b96 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b94:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	f000 80fb 	beq.w	8003d94 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	005b      	lsls	r3, r3, #1
 8003ba6:	4413      	add	r3, r2
 8003ba8:	69fa      	ldr	r2, [r7, #28]
 8003baa:	429a      	cmp	r2, r3
 8003bac:	d305      	bcc.n	8003bba <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d903      	bls.n	8003bc2 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bc0:	e0e8      	b.n	8003d94 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bc2:	69fb      	ldr	r3, [r7, #28]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	461c      	mov	r4, r3
 8003bc8:	4615      	mov	r5, r2
 8003bca:	f04f 0200 	mov.w	r2, #0
 8003bce:	f04f 0300 	mov.w	r3, #0
 8003bd2:	022b      	lsls	r3, r5, #8
 8003bd4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003bd8:	0222      	lsls	r2, r4, #8
 8003bda:	68f9      	ldr	r1, [r7, #12]
 8003bdc:	6849      	ldr	r1, [r1, #4]
 8003bde:	0849      	lsrs	r1, r1, #1
 8003be0:	2000      	movs	r0, #0
 8003be2:	4688      	mov	r8, r1
 8003be4:	4681      	mov	r9, r0
 8003be6:	eb12 0a08 	adds.w	sl, r2, r8
 8003bea:	eb43 0b09 	adc.w	fp, r3, r9
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	603b      	str	r3, [r7, #0]
 8003bf6:	607a      	str	r2, [r7, #4]
 8003bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003bfc:	4650      	mov	r0, sl
 8003bfe:	4659      	mov	r1, fp
 8003c00:	f7fc fb36 	bl	8000270 <__aeabi_uldivmod>
 8003c04:	4602      	mov	r2, r0
 8003c06:	460b      	mov	r3, r1
 8003c08:	4613      	mov	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c12:	d308      	bcc.n	8003c26 <UART_SetConfig+0x3de>
 8003c14:	69bb      	ldr	r3, [r7, #24]
 8003c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c1a:	d204      	bcs.n	8003c26 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	69ba      	ldr	r2, [r7, #24]
 8003c22:	60da      	str	r2, [r3, #12]
 8003c24:	e0b6      	b.n	8003d94 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c2c:	e0b2      	b.n	8003d94 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	69db      	ldr	r3, [r3, #28]
 8003c32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c36:	d15e      	bne.n	8003cf6 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003c38:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d828      	bhi.n	8003c92 <UART_SetConfig+0x44a>
 8003c40:	a201      	add	r2, pc, #4	; (adr r2, 8003c48 <UART_SetConfig+0x400>)
 8003c42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c46:	bf00      	nop
 8003c48:	08003c6d 	.word	0x08003c6d
 8003c4c:	08003c75 	.word	0x08003c75
 8003c50:	08003c7d 	.word	0x08003c7d
 8003c54:	08003c93 	.word	0x08003c93
 8003c58:	08003c83 	.word	0x08003c83
 8003c5c:	08003c93 	.word	0x08003c93
 8003c60:	08003c93 	.word	0x08003c93
 8003c64:	08003c93 	.word	0x08003c93
 8003c68:	08003c8b 	.word	0x08003c8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c6c:	f7fe fcf0 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 8003c70:	61f8      	str	r0, [r7, #28]
        break;
 8003c72:	e014      	b.n	8003c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c74:	f7fe fd02 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8003c78:	61f8      	str	r0, [r7, #28]
        break;
 8003c7a:	e010      	b.n	8003c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c7c:	4b4d      	ldr	r3, [pc, #308]	; (8003db4 <UART_SetConfig+0x56c>)
 8003c7e:	61fb      	str	r3, [r7, #28]
        break;
 8003c80:	e00d      	b.n	8003c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c82:	f7fe fc4d 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8003c86:	61f8      	str	r0, [r7, #28]
        break;
 8003c88:	e009      	b.n	8003c9e <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c8e:	61fb      	str	r3, [r7, #28]
        break;
 8003c90:	e005      	b.n	8003c9e <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003c92:	2300      	movs	r3, #0
 8003c94:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c96:	2301      	movs	r3, #1
 8003c98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c9c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d077      	beq.n	8003d94 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003ca4:	69fb      	ldr	r3, [r7, #28]
 8003ca6:	005a      	lsls	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	085b      	lsrs	r3, r3, #1
 8003cae:	441a      	add	r2, r3
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cb8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003cba:	69bb      	ldr	r3, [r7, #24]
 8003cbc:	2b0f      	cmp	r3, #15
 8003cbe:	d916      	bls.n	8003cee <UART_SetConfig+0x4a6>
 8003cc0:	69bb      	ldr	r3, [r7, #24]
 8003cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cc6:	d212      	bcs.n	8003cee <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	f023 030f 	bic.w	r3, r3, #15
 8003cd0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	085b      	lsrs	r3, r3, #1
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	f003 0307 	and.w	r3, r3, #7
 8003cdc:	b29a      	uxth	r2, r3
 8003cde:	8afb      	ldrh	r3, [r7, #22]
 8003ce0:	4313      	orrs	r3, r2
 8003ce2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	8afa      	ldrh	r2, [r7, #22]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e052      	b.n	8003d94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cf4:	e04e      	b.n	8003d94 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cf6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cfa:	2b08      	cmp	r3, #8
 8003cfc:	d827      	bhi.n	8003d4e <UART_SetConfig+0x506>
 8003cfe:	a201      	add	r2, pc, #4	; (adr r2, 8003d04 <UART_SetConfig+0x4bc>)
 8003d00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d04:	08003d29 	.word	0x08003d29
 8003d08:	08003d31 	.word	0x08003d31
 8003d0c:	08003d39 	.word	0x08003d39
 8003d10:	08003d4f 	.word	0x08003d4f
 8003d14:	08003d3f 	.word	0x08003d3f
 8003d18:	08003d4f 	.word	0x08003d4f
 8003d1c:	08003d4f 	.word	0x08003d4f
 8003d20:	08003d4f 	.word	0x08003d4f
 8003d24:	08003d47 	.word	0x08003d47
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d28:	f7fe fc92 	bl	8002650 <HAL_RCC_GetPCLK1Freq>
 8003d2c:	61f8      	str	r0, [r7, #28]
        break;
 8003d2e:	e014      	b.n	8003d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d30:	f7fe fca4 	bl	800267c <HAL_RCC_GetPCLK2Freq>
 8003d34:	61f8      	str	r0, [r7, #28]
        break;
 8003d36:	e010      	b.n	8003d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d38:	4b1e      	ldr	r3, [pc, #120]	; (8003db4 <UART_SetConfig+0x56c>)
 8003d3a:	61fb      	str	r3, [r7, #28]
        break;
 8003d3c:	e00d      	b.n	8003d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d3e:	f7fe fbef 	bl	8002520 <HAL_RCC_GetSysClockFreq>
 8003d42:	61f8      	str	r0, [r7, #28]
        break;
 8003d44:	e009      	b.n	8003d5a <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d4a:	61fb      	str	r3, [r7, #28]
        break;
 8003d4c:	e005      	b.n	8003d5a <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d52:	2301      	movs	r3, #1
 8003d54:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d58:	bf00      	nop
    }

    if (pclk != 0U)
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d019      	beq.n	8003d94 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	085a      	lsrs	r2, r3, #1
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	441a      	add	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d72:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	2b0f      	cmp	r3, #15
 8003d78:	d909      	bls.n	8003d8e <UART_SetConfig+0x546>
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d80:	d205      	bcs.n	8003d8e <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	60da      	str	r2, [r3, #12]
 8003d8c:	e002      	b.n	8003d94 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	2200      	movs	r2, #0
 8003d98:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003da0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3728      	adds	r7, #40	; 0x28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dae:	bf00      	nop
 8003db0:	40008000 	.word	0x40008000
 8003db4:	00f42400 	.word	0x00f42400

08003db8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db8:	b480      	push	{r7}
 8003dba:	b083      	sub	sp, #12
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc4:	f003 0308 	and.w	r3, r3, #8
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00a      	beq.n	8003de2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	685b      	ldr	r3, [r3, #4]
 8003dd2:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	430a      	orrs	r2, r1
 8003de0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00a      	beq.n	8003e04 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f003 0304 	and.w	r3, r3, #4
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	f003 0310 	and.w	r3, r3, #16
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	689b      	ldr	r3, [r3, #8]
 8003e5a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0320 	and.w	r3, r3, #32
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d01a      	beq.n	8003ece <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003eb6:	d10a      	bne.n	8003ece <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00a      	beq.n	8003ef0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	605a      	str	r2, [r3, #4]
  }
}
 8003ef0:	bf00      	nop
 8003ef2:	370c      	adds	r7, #12
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efa:	4770      	bx	lr

08003efc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b098      	sub	sp, #96	; 0x60
 8003f00:	af02      	add	r7, sp, #8
 8003f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2200      	movs	r2, #0
 8003f08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f0c:	f7fd fae6 	bl	80014dc <HAL_GetTick>
 8003f10:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 0308 	and.w	r3, r3, #8
 8003f1c:	2b08      	cmp	r3, #8
 8003f1e:	d12e      	bne.n	8003f7e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f24:	9300      	str	r3, [sp, #0]
 8003f26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f28:	2200      	movs	r2, #0
 8003f2a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f88c 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d021      	beq.n	8003f7e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f42:	e853 3f00 	ldrex	r3, [r3]
 8003f46:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003f48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f4a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f4e:	653b      	str	r3, [r7, #80]	; 0x50
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003f58:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f5c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003f60:	e841 2300 	strex	r3, r2, [r1]
 8003f64:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003f66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d1e6      	bne.n	8003f3a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2220      	movs	r2, #32
 8003f70:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	2200      	movs	r2, #0
 8003f76:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e062      	b.n	8004044 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d149      	bne.n	8004020 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f8c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003f94:	2200      	movs	r2, #0
 8003f96:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f9a:	6878      	ldr	r0, [r7, #4]
 8003f9c:	f000 f856 	bl	800404c <UART_WaitOnFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d03c      	beq.n	8004020 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fae:	e853 3f00 	ldrex	r3, [r3]
 8003fb2:	623b      	str	r3, [r7, #32]
   return(result);
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003fba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003fc4:	633b      	str	r3, [r7, #48]	; 0x30
 8003fc6:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fc8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fcc:	e841 2300 	strex	r3, r2, [r1]
 8003fd0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003fd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d1e6      	bne.n	8003fa6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	3308      	adds	r3, #8
 8003fde:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	e853 3f00 	ldrex	r3, [r3]
 8003fe6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	f023 0301 	bic.w	r3, r3, #1
 8003fee:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	3308      	adds	r3, #8
 8003ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ff8:	61fa      	str	r2, [r7, #28]
 8003ffa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ffc:	69b9      	ldr	r1, [r7, #24]
 8003ffe:	69fa      	ldr	r2, [r7, #28]
 8004000:	e841 2300 	strex	r3, r2, [r1]
 8004004:	617b      	str	r3, [r7, #20]
   return(result);
 8004006:	697b      	ldr	r3, [r7, #20]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1e5      	bne.n	8003fd8 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800401c:	2303      	movs	r3, #3
 800401e:	e011      	b.n	8004044 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2220      	movs	r2, #32
 8004024:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2220      	movs	r2, #32
 800402a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2200      	movs	r2, #0
 8004038:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004042:	2300      	movs	r3, #0
}
 8004044:	4618      	mov	r0, r3
 8004046:	3758      	adds	r7, #88	; 0x58
 8004048:	46bd      	mov	sp, r7
 800404a:	bd80      	pop	{r7, pc}

0800404c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	603b      	str	r3, [r7, #0]
 8004058:	4613      	mov	r3, r2
 800405a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800405c:	e049      	b.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004064:	d045      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004066:	f7fd fa39 	bl	80014dc <HAL_GetTick>
 800406a:	4602      	mov	r2, r0
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	1ad3      	subs	r3, r2, r3
 8004070:	69ba      	ldr	r2, [r7, #24]
 8004072:	429a      	cmp	r2, r3
 8004074:	d302      	bcc.n	800407c <UART_WaitOnFlagUntilTimeout+0x30>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e048      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b00      	cmp	r3, #0
 800408c:	d031      	beq.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	f003 0308 	and.w	r3, r3, #8
 8004098:	2b08      	cmp	r3, #8
 800409a:	d110      	bne.n	80040be <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2208      	movs	r2, #8
 80040a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f000 f838 	bl	800411a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2208      	movs	r2, #8
 80040ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e029      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	69db      	ldr	r3, [r3, #28]
 80040c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80040c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040cc:	d111      	bne.n	80040f2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f000 f81e 	bl	800411a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2220      	movs	r2, #32
 80040e2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e00f      	b.n	8004112 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	69da      	ldr	r2, [r3, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	4013      	ands	r3, r2
 80040fc:	68ba      	ldr	r2, [r7, #8]
 80040fe:	429a      	cmp	r2, r3
 8004100:	bf0c      	ite	eq
 8004102:	2301      	moveq	r3, #1
 8004104:	2300      	movne	r3, #0
 8004106:	b2db      	uxtb	r3, r3
 8004108:	461a      	mov	r2, r3
 800410a:	79fb      	ldrb	r3, [r7, #7]
 800410c:	429a      	cmp	r2, r3
 800410e:	d0a6      	beq.n	800405e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004110:	2300      	movs	r3, #0
}
 8004112:	4618      	mov	r0, r3
 8004114:	3710      	adds	r7, #16
 8004116:	46bd      	mov	sp, r7
 8004118:	bd80      	pop	{r7, pc}

0800411a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800411a:	b480      	push	{r7}
 800411c:	b095      	sub	sp, #84	; 0x54
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004128:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800412a:	e853 3f00 	ldrex	r3, [r3]
 800412e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004136:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	461a      	mov	r2, r3
 800413e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004140:	643b      	str	r3, [r7, #64]	; 0x40
 8004142:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004144:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004146:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004148:	e841 2300 	strex	r3, r2, [r1]
 800414c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800414e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e6      	bne.n	8004122 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	3308      	adds	r3, #8
 800415a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	e853 3f00 	ldrex	r3, [r3]
 8004162:	61fb      	str	r3, [r7, #28]
   return(result);
 8004164:	69fb      	ldr	r3, [r7, #28]
 8004166:	f023 0301 	bic.w	r3, r3, #1
 800416a:	64bb      	str	r3, [r7, #72]	; 0x48
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	3308      	adds	r3, #8
 8004172:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004174:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004178:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800417a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800417c:	e841 2300 	strex	r3, r2, [r1]
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d1e5      	bne.n	8004154 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800418c:	2b01      	cmp	r3, #1
 800418e:	d118      	bne.n	80041c2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	e853 3f00 	ldrex	r3, [r3]
 800419c:	60bb      	str	r3, [r7, #8]
   return(result);
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	f023 0310 	bic.w	r3, r3, #16
 80041a4:	647b      	str	r3, [r7, #68]	; 0x44
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	461a      	mov	r2, r3
 80041ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80041ae:	61bb      	str	r3, [r7, #24]
 80041b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041b2:	6979      	ldr	r1, [r7, #20]
 80041b4:	69ba      	ldr	r2, [r7, #24]
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	613b      	str	r3, [r7, #16]
   return(result);
 80041bc:	693b      	ldr	r3, [r7, #16]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d1e6      	bne.n	8004190 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80041d6:	bf00      	nop
 80041d8:	3754      	adds	r7, #84	; 0x54
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
	...

080041e4 <__NVIC_SetPriority>:
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	4603      	mov	r3, r0
 80041ec:	6039      	str	r1, [r7, #0]
 80041ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80041f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	db0a      	blt.n	800420e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	b2da      	uxtb	r2, r3
 80041fc:	490c      	ldr	r1, [pc, #48]	; (8004230 <__NVIC_SetPriority+0x4c>)
 80041fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004202:	0112      	lsls	r2, r2, #4
 8004204:	b2d2      	uxtb	r2, r2
 8004206:	440b      	add	r3, r1
 8004208:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800420c:	e00a      	b.n	8004224 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	b2da      	uxtb	r2, r3
 8004212:	4908      	ldr	r1, [pc, #32]	; (8004234 <__NVIC_SetPriority+0x50>)
 8004214:	79fb      	ldrb	r3, [r7, #7]
 8004216:	f003 030f 	and.w	r3, r3, #15
 800421a:	3b04      	subs	r3, #4
 800421c:	0112      	lsls	r2, r2, #4
 800421e:	b2d2      	uxtb	r2, r2
 8004220:	440b      	add	r3, r1
 8004222:	761a      	strb	r2, [r3, #24]
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000e100 	.word	0xe000e100
 8004234:	e000ed00 	.word	0xe000ed00

08004238 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004238:	b580      	push	{r7, lr}
 800423a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <SysTick_Handler+0x1c>)
 800423e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004240:	f002 fa7a 	bl	8006738 <xTaskGetSchedulerState>
 8004244:	4603      	mov	r3, r0
 8004246:	2b01      	cmp	r3, #1
 8004248:	d001      	beq.n	800424e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800424a:	f003 fa45 	bl	80076d8 <xPortSysTickHandler>
  }
}
 800424e:	bf00      	nop
 8004250:	bd80      	pop	{r7, pc}
 8004252:	bf00      	nop
 8004254:	e000e010 	.word	0xe000e010

08004258 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004258:	b580      	push	{r7, lr}
 800425a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800425c:	2100      	movs	r1, #0
 800425e:	f06f 0004 	mvn.w	r0, #4
 8004262:	f7ff ffbf 	bl	80041e4 <__NVIC_SetPriority>
#endif
}
 8004266:	bf00      	nop
 8004268:	bd80      	pop	{r7, pc}
	...

0800426c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004272:	f3ef 8305 	mrs	r3, IPSR
 8004276:	603b      	str	r3, [r7, #0]
  return(result);
 8004278:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800427e:	f06f 0305 	mvn.w	r3, #5
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	e00c      	b.n	80042a0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004286:	4b0a      	ldr	r3, [pc, #40]	; (80042b0 <osKernelInitialize+0x44>)
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d105      	bne.n	800429a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800428e:	4b08      	ldr	r3, [pc, #32]	; (80042b0 <osKernelInitialize+0x44>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004294:	2300      	movs	r3, #0
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	e002      	b.n	80042a0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800429a:	f04f 33ff 	mov.w	r3, #4294967295
 800429e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042a0:	687b      	ldr	r3, [r7, #4]
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	370c      	adds	r7, #12
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	200001d8 	.word	0x200001d8

080042b4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042ba:	f3ef 8305 	mrs	r3, IPSR
 80042be:	603b      	str	r3, [r7, #0]
  return(result);
 80042c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d003      	beq.n	80042ce <osKernelStart+0x1a>
    stat = osErrorISR;
 80042c6:	f06f 0305 	mvn.w	r3, #5
 80042ca:	607b      	str	r3, [r7, #4]
 80042cc:	e010      	b.n	80042f0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80042ce:	4b0b      	ldr	r3, [pc, #44]	; (80042fc <osKernelStart+0x48>)
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d109      	bne.n	80042ea <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80042d6:	f7ff ffbf 	bl	8004258 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80042da:	4b08      	ldr	r3, [pc, #32]	; (80042fc <osKernelStart+0x48>)
 80042dc:	2202      	movs	r2, #2
 80042de:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80042e0:	f001 fdce 	bl	8005e80 <vTaskStartScheduler>
      stat = osOK;
 80042e4:	2300      	movs	r3, #0
 80042e6:	607b      	str	r3, [r7, #4]
 80042e8:	e002      	b.n	80042f0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80042ea:	f04f 33ff 	mov.w	r3, #4294967295
 80042ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80042f0:	687b      	ldr	r3, [r7, #4]
}
 80042f2:	4618      	mov	r0, r3
 80042f4:	3708      	adds	r7, #8
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}
 80042fa:	bf00      	nop
 80042fc:	200001d8 	.word	0x200001d8

08004300 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004300:	b580      	push	{r7, lr}
 8004302:	b08e      	sub	sp, #56	; 0x38
 8004304:	af04      	add	r7, sp, #16
 8004306:	60f8      	str	r0, [r7, #12]
 8004308:	60b9      	str	r1, [r7, #8]
 800430a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800430c:	2300      	movs	r3, #0
 800430e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004310:	f3ef 8305 	mrs	r3, IPSR
 8004314:	617b      	str	r3, [r7, #20]
  return(result);
 8004316:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004318:	2b00      	cmp	r3, #0
 800431a:	d17e      	bne.n	800441a <osThreadNew+0x11a>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d07b      	beq.n	800441a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004322:	2380      	movs	r3, #128	; 0x80
 8004324:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004326:	2318      	movs	r3, #24
 8004328:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800432a:	2300      	movs	r3, #0
 800432c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800432e:	f04f 33ff 	mov.w	r3, #4294967295
 8004332:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d045      	beq.n	80043c6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d002      	beq.n	8004348 <osThreadNew+0x48>
        name = attr->name;
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d002      	beq.n	8004356 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004356:	69fb      	ldr	r3, [r7, #28]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <osThreadNew+0x6e>
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	2b38      	cmp	r3, #56	; 0x38
 8004360:	d805      	bhi.n	800436e <osThreadNew+0x6e>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <osThreadNew+0x72>
        return (NULL);
 800436e:	2300      	movs	r3, #0
 8004370:	e054      	b.n	800441c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695b      	ldr	r3, [r3, #20]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	089b      	lsrs	r3, r3, #2
 8004380:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	689b      	ldr	r3, [r3, #8]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00e      	beq.n	80043a8 <osThreadNew+0xa8>
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	2ba7      	cmp	r3, #167	; 0xa7
 8004390:	d90a      	bls.n	80043a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004396:	2b00      	cmp	r3, #0
 8004398:	d006      	beq.n	80043a8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d002      	beq.n	80043a8 <osThreadNew+0xa8>
        mem = 1;
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e010      	b.n	80043ca <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d10c      	bne.n	80043ca <osThreadNew+0xca>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d108      	bne.n	80043ca <osThreadNew+0xca>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	691b      	ldr	r3, [r3, #16]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d104      	bne.n	80043ca <osThreadNew+0xca>
          mem = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
 80043c4:	e001      	b.n	80043ca <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80043c6:	2300      	movs	r3, #0
 80043c8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80043ca:	69bb      	ldr	r3, [r7, #24]
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	d110      	bne.n	80043f2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80043d4:	687a      	ldr	r2, [r7, #4]
 80043d6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80043d8:	9202      	str	r2, [sp, #8]
 80043da:	9301      	str	r3, [sp, #4]
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	6a3a      	ldr	r2, [r7, #32]
 80043e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80043e6:	68f8      	ldr	r0, [r7, #12]
 80043e8:	f001 fb5e 	bl	8005aa8 <xTaskCreateStatic>
 80043ec:	4603      	mov	r3, r0
 80043ee:	613b      	str	r3, [r7, #16]
 80043f0:	e013      	b.n	800441a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d110      	bne.n	800441a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80043f8:	6a3b      	ldr	r3, [r7, #32]
 80043fa:	b29a      	uxth	r2, r3
 80043fc:	f107 0310 	add.w	r3, r7, #16
 8004400:	9301      	str	r3, [sp, #4]
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	9300      	str	r3, [sp, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800440a:	68f8      	ldr	r0, [r7, #12]
 800440c:	f001 fba9 	bl	8005b62 <xTaskCreate>
 8004410:	4603      	mov	r3, r0
 8004412:	2b01      	cmp	r3, #1
 8004414:	d001      	beq.n	800441a <osThreadNew+0x11a>
            hTask = NULL;
 8004416:	2300      	movs	r3, #0
 8004418:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800441a:	693b      	ldr	r3, [r7, #16]
}
 800441c:	4618      	mov	r0, r3
 800441e:	3728      	adds	r7, #40	; 0x28
 8004420:	46bd      	mov	sp, r7
 8004422:	bd80      	pop	{r7, pc}

08004424 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800442c:	f3ef 8305 	mrs	r3, IPSR
 8004430:	60bb      	str	r3, [r7, #8]
  return(result);
 8004432:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004434:	2b00      	cmp	r3, #0
 8004436:	d003      	beq.n	8004440 <osDelay+0x1c>
    stat = osErrorISR;
 8004438:	f06f 0305 	mvn.w	r3, #5
 800443c:	60fb      	str	r3, [r7, #12]
 800443e:	e007      	b.n	8004450 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d002      	beq.n	8004450 <osDelay+0x2c>
      vTaskDelay(ticks);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f001 fce4 	bl	8005e18 <vTaskDelay>
    }
  }

  return (stat);
 8004450:	68fb      	ldr	r3, [r7, #12]
}
 8004452:	4618      	mov	r0, r3
 8004454:	3710      	adds	r7, #16
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}

0800445a <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 800445a:	b580      	push	{r7, lr}
 800445c:	b084      	sub	sp, #16
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004462:	6878      	ldr	r0, [r7, #4]
 8004464:	f002 ff57 	bl	8007316 <pvTimerGetTimerID>
 8004468:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d005      	beq.n	800447c <TimerCallback+0x22>
    callb->func (callb->arg);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	68fa      	ldr	r2, [r7, #12]
 8004476:	6852      	ldr	r2, [r2, #4]
 8004478:	4610      	mov	r0, r2
 800447a:	4798      	blx	r3
  }
}
 800447c:	bf00      	nop
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}

08004484 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b08c      	sub	sp, #48	; 0x30
 8004488:	af02      	add	r7, sp, #8
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
 8004490:	460b      	mov	r3, r1
 8004492:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004494:	2300      	movs	r3, #0
 8004496:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004498:	f3ef 8305 	mrs	r3, IPSR
 800449c:	613b      	str	r3, [r7, #16]
  return(result);
 800449e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d163      	bne.n	800456c <osTimerNew+0xe8>
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d060      	beq.n	800456c <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80044aa:	2008      	movs	r0, #8
 80044ac:	f003 f9a4 	bl	80077f8 <pvPortMalloc>
 80044b0:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d059      	beq.n	800456c <osTimerNew+0xe8>
      callb->func = func;
 80044b8:	697b      	ldr	r3, [r7, #20]
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 80044c4:	7afb      	ldrb	r3, [r7, #11]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d102      	bne.n	80044d0 <osTimerNew+0x4c>
        reload = pdFALSE;
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	e001      	b.n	80044d4 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 80044d0:	2301      	movs	r3, #1
 80044d2:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 80044d4:	f04f 33ff 	mov.w	r3, #4294967295
 80044d8:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80044da:	2300      	movs	r3, #0
 80044dc:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d01c      	beq.n	800451e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d002      	beq.n	80044f2 <osTimerNew+0x6e>
          name = attr->name;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80044f2:	683b      	ldr	r3, [r7, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d006      	beq.n	8004508 <osTimerNew+0x84>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	2b2b      	cmp	r3, #43	; 0x2b
 8004500:	d902      	bls.n	8004508 <osTimerNew+0x84>
          mem = 1;
 8004502:	2301      	movs	r3, #1
 8004504:	61bb      	str	r3, [r7, #24]
 8004506:	e00c      	b.n	8004522 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004508:	683b      	ldr	r3, [r7, #0]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d108      	bne.n	8004522 <osTimerNew+0x9e>
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d104      	bne.n	8004522 <osTimerNew+0x9e>
            mem = 0;
 8004518:	2300      	movs	r3, #0
 800451a:	61bb      	str	r3, [r7, #24]
 800451c:	e001      	b.n	8004522 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800451e:	2300      	movs	r3, #0
 8004520:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004522:	69bb      	ldr	r3, [r7, #24]
 8004524:	2b01      	cmp	r3, #1
 8004526:	d10c      	bne.n	8004542 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004528:	683b      	ldr	r3, [r7, #0]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	9301      	str	r3, [sp, #4]
 800452e:	4b12      	ldr	r3, [pc, #72]	; (8004578 <osTimerNew+0xf4>)
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	697b      	ldr	r3, [r7, #20]
 8004534:	69fa      	ldr	r2, [r7, #28]
 8004536:	2101      	movs	r1, #1
 8004538:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800453a:	f002 fb44 	bl	8006bc6 <xTimerCreateStatic>
 800453e:	6238      	str	r0, [r7, #32]
 8004540:	e00b      	b.n	800455a <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004542:	69bb      	ldr	r3, [r7, #24]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d108      	bne.n	800455a <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <osTimerNew+0xf4>)
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	69fa      	ldr	r2, [r7, #28]
 8004550:	2101      	movs	r1, #1
 8004552:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004554:	f002 fb16 	bl	8006b84 <xTimerCreate>
 8004558:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 800455a:	6a3b      	ldr	r3, [r7, #32]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d105      	bne.n	800456c <osTimerNew+0xe8>
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d002      	beq.n	800456c <osTimerNew+0xe8>
        vPortFree (callb);
 8004566:	6978      	ldr	r0, [r7, #20]
 8004568:	f003 fa12 	bl	8007990 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 800456c:	6a3b      	ldr	r3, [r7, #32]
}
 800456e:	4618      	mov	r0, r3
 8004570:	3728      	adds	r7, #40	; 0x28
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
 8004576:	bf00      	nop
 8004578:	0800445b 	.word	0x0800445b

0800457c <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 800457c:	b580      	push	{r7, lr}
 800457e:	b088      	sub	sp, #32
 8004580:	af02      	add	r7, sp, #8
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800458a:	f3ef 8305 	mrs	r3, IPSR
 800458e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004590:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <osTimerStart+0x22>
    stat = osErrorISR;
 8004596:	f06f 0305 	mvn.w	r3, #5
 800459a:	617b      	str	r3, [r7, #20]
 800459c:	e017      	b.n	80045ce <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 800459e:	693b      	ldr	r3, [r7, #16]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <osTimerStart+0x30>
    stat = osErrorParameter;
 80045a4:	f06f 0303 	mvn.w	r3, #3
 80045a8:	617b      	str	r3, [r7, #20]
 80045aa:	e010      	b.n	80045ce <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 80045ac:	2300      	movs	r3, #0
 80045ae:	9300      	str	r3, [sp, #0]
 80045b0:	2300      	movs	r3, #0
 80045b2:	683a      	ldr	r2, [r7, #0]
 80045b4:	2104      	movs	r1, #4
 80045b6:	6938      	ldr	r0, [r7, #16]
 80045b8:	f002 fb7e 	bl	8006cb8 <xTimerGenericCommand>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d102      	bne.n	80045c8 <osTimerStart+0x4c>
      stat = osOK;
 80045c2:	2300      	movs	r3, #0
 80045c4:	617b      	str	r3, [r7, #20]
 80045c6:	e002      	b.n	80045ce <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 80045c8:	f06f 0302 	mvn.w	r3, #2
 80045cc:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80045ce:	697b      	ldr	r3, [r7, #20]
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3718      	adds	r7, #24
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 80045d8:	b580      	push	{r7, lr}
 80045da:	b088      	sub	sp, #32
 80045dc:	af02      	add	r7, sp, #8
 80045de:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045e4:	f3ef 8305 	mrs	r3, IPSR
 80045e8:	60fb      	str	r3, [r7, #12]
  return(result);
 80045ea:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <osTimerStop+0x20>
    stat = osErrorISR;
 80045f0:	f06f 0305 	mvn.w	r3, #5
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	e021      	b.n	800463c <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d103      	bne.n	8004606 <osTimerStop+0x2e>
    stat = osErrorParameter;
 80045fe:	f06f 0303 	mvn.w	r3, #3
 8004602:	617b      	str	r3, [r7, #20]
 8004604:	e01a      	b.n	800463c <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 8004606:	6938      	ldr	r0, [r7, #16]
 8004608:	f002 fe5c 	bl	80072c4 <xTimerIsTimerActive>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d103      	bne.n	800461a <osTimerStop+0x42>
      stat = osErrorResource;
 8004612:	f06f 0302 	mvn.w	r3, #2
 8004616:	617b      	str	r3, [r7, #20]
 8004618:	e010      	b.n	800463c <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 800461a:	2300      	movs	r3, #0
 800461c:	9300      	str	r3, [sp, #0]
 800461e:	2300      	movs	r3, #0
 8004620:	2200      	movs	r2, #0
 8004622:	2103      	movs	r1, #3
 8004624:	6938      	ldr	r0, [r7, #16]
 8004626:	f002 fb47 	bl	8006cb8 <xTimerGenericCommand>
 800462a:	4603      	mov	r3, r0
 800462c:	2b01      	cmp	r3, #1
 800462e:	d102      	bne.n	8004636 <osTimerStop+0x5e>
        stat = osOK;
 8004630:	2300      	movs	r3, #0
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	e002      	b.n	800463c <osTimerStop+0x64>
      } else {
        stat = osError;
 8004636:	f04f 33ff 	mov.w	r3, #4294967295
 800463a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800463c:	697b      	ldr	r3, [r7, #20]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004652:	f3ef 8305 	mrs	r3, IPSR
 8004656:	60fb      	str	r3, [r7, #12]
  return(result);
 8004658:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 800465a:	2b00      	cmp	r3, #0
 800465c:	d102      	bne.n	8004664 <osTimerIsRunning+0x1e>
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d102      	bne.n	800466a <osTimerIsRunning+0x24>
    running = 0U;
 8004664:	2300      	movs	r3, #0
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e004      	b.n	8004674 <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 800466a:	6938      	ldr	r0, [r7, #16]
 800466c:	f002 fe2a 	bl	80072c4 <xTimerIsTimerActive>
 8004670:	4603      	mov	r3, r0
 8004672:	617b      	str	r3, [r7, #20]
  }

  return (running);
 8004674:	697b      	ldr	r3, [r7, #20]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800467e:	b580      	push	{r7, lr}
 8004680:	b08a      	sub	sp, #40	; 0x28
 8004682:	af02      	add	r7, sp, #8
 8004684:	60f8      	str	r0, [r7, #12]
 8004686:	60b9      	str	r1, [r7, #8]
 8004688:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800468a:	2300      	movs	r3, #0
 800468c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800468e:	f3ef 8305 	mrs	r3, IPSR
 8004692:	613b      	str	r3, [r7, #16]
  return(result);
 8004694:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8004696:	2b00      	cmp	r3, #0
 8004698:	d175      	bne.n	8004786 <osSemaphoreNew+0x108>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d072      	beq.n	8004786 <osSemaphoreNew+0x108>
 80046a0:	68ba      	ldr	r2, [r7, #8]
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d86e      	bhi.n	8004786 <osSemaphoreNew+0x108>
    mem = -1;
 80046a8:	f04f 33ff 	mov.w	r3, #4294967295
 80046ac:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d015      	beq.n	80046e0 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d006      	beq.n	80046ca <osSemaphoreNew+0x4c>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	2b4f      	cmp	r3, #79	; 0x4f
 80046c2:	d902      	bls.n	80046ca <osSemaphoreNew+0x4c>
        mem = 1;
 80046c4:	2301      	movs	r3, #1
 80046c6:	61bb      	str	r3, [r7, #24]
 80046c8:	e00c      	b.n	80046e4 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d108      	bne.n	80046e4 <osSemaphoreNew+0x66>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d104      	bne.n	80046e4 <osSemaphoreNew+0x66>
          mem = 0;
 80046da:	2300      	movs	r3, #0
 80046dc:	61bb      	str	r3, [r7, #24]
 80046de:	e001      	b.n	80046e4 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80046e0:	2300      	movs	r3, #0
 80046e2:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80046e4:	69bb      	ldr	r3, [r7, #24]
 80046e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ea:	d04c      	beq.n	8004786 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d128      	bne.n	8004744 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80046f2:	69bb      	ldr	r3, [r7, #24]
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d10a      	bne.n	800470e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	689b      	ldr	r3, [r3, #8]
 80046fc:	2203      	movs	r2, #3
 80046fe:	9200      	str	r2, [sp, #0]
 8004700:	2200      	movs	r2, #0
 8004702:	2100      	movs	r1, #0
 8004704:	2001      	movs	r0, #1
 8004706:	f000 fa29 	bl	8004b5c <xQueueGenericCreateStatic>
 800470a:	61f8      	str	r0, [r7, #28]
 800470c:	e005      	b.n	800471a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800470e:	2203      	movs	r2, #3
 8004710:	2100      	movs	r1, #0
 8004712:	2001      	movs	r0, #1
 8004714:	f000 fa9a 	bl	8004c4c <xQueueGenericCreate>
 8004718:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800471a:	69fb      	ldr	r3, [r7, #28]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d022      	beq.n	8004766 <osSemaphoreNew+0xe8>
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d01f      	beq.n	8004766 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004726:	2300      	movs	r3, #0
 8004728:	2200      	movs	r2, #0
 800472a:	2100      	movs	r1, #0
 800472c:	69f8      	ldr	r0, [r7, #28]
 800472e:	f000 fb55 	bl	8004ddc <xQueueGenericSend>
 8004732:	4603      	mov	r3, r0
 8004734:	2b01      	cmp	r3, #1
 8004736:	d016      	beq.n	8004766 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004738:	69f8      	ldr	r0, [r7, #28]
 800473a:	f000 ffe1 	bl	8005700 <vQueueDelete>
            hSemaphore = NULL;
 800473e:	2300      	movs	r3, #0
 8004740:	61fb      	str	r3, [r7, #28]
 8004742:	e010      	b.n	8004766 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	2b01      	cmp	r3, #1
 8004748:	d108      	bne.n	800475c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	461a      	mov	r2, r3
 8004750:	68b9      	ldr	r1, [r7, #8]
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f000 fad7 	bl	8004d06 <xQueueCreateCountingSemaphoreStatic>
 8004758:	61f8      	str	r0, [r7, #28]
 800475a:	e004      	b.n	8004766 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800475c:	68b9      	ldr	r1, [r7, #8]
 800475e:	68f8      	ldr	r0, [r7, #12]
 8004760:	f000 fb08 	bl	8004d74 <xQueueCreateCountingSemaphore>
 8004764:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004766:	69fb      	ldr	r3, [r7, #28]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00c      	beq.n	8004786 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <osSemaphoreNew+0xfc>
          name = attr->name;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	617b      	str	r3, [r7, #20]
 8004778:	e001      	b.n	800477e <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800477e:	6979      	ldr	r1, [r7, #20]
 8004780:	69f8      	ldr	r0, [r7, #28]
 8004782:	f001 f909 	bl	8005998 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004786:	69fb      	ldr	r3, [r7, #28]
}
 8004788:	4618      	mov	r0, r3
 800478a:	3720      	adds	r7, #32
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
 8004798:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800479e:	2300      	movs	r3, #0
 80047a0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d103      	bne.n	80047b0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80047a8:	f06f 0303 	mvn.w	r3, #3
 80047ac:	617b      	str	r3, [r7, #20]
 80047ae:	e039      	b.n	8004824 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80047b0:	f3ef 8305 	mrs	r3, IPSR
 80047b4:	60fb      	str	r3, [r7, #12]
  return(result);
 80047b6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d022      	beq.n	8004802 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80047c2:	f06f 0303 	mvn.w	r3, #3
 80047c6:	617b      	str	r3, [r7, #20]
 80047c8:	e02c      	b.n	8004824 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 80047ca:	2300      	movs	r3, #0
 80047cc:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 80047ce:	f107 0308 	add.w	r3, r7, #8
 80047d2:	461a      	mov	r2, r3
 80047d4:	2100      	movs	r1, #0
 80047d6:	6938      	ldr	r0, [r7, #16]
 80047d8:	f000 ff12 	bl	8005600 <xQueueReceiveFromISR>
 80047dc:	4603      	mov	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d003      	beq.n	80047ea <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80047e2:	f06f 0302 	mvn.w	r3, #2
 80047e6:	617b      	str	r3, [r7, #20]
 80047e8:	e01c      	b.n	8004824 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d019      	beq.n	8004824 <osSemaphoreAcquire+0x94>
 80047f0:	4b0f      	ldr	r3, [pc, #60]	; (8004830 <osSemaphoreAcquire+0xa0>)
 80047f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047f6:	601a      	str	r2, [r3, #0]
 80047f8:	f3bf 8f4f 	dsb	sy
 80047fc:	f3bf 8f6f 	isb	sy
 8004800:	e010      	b.n	8004824 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004802:	6839      	ldr	r1, [r7, #0]
 8004804:	6938      	ldr	r0, [r7, #16]
 8004806:	f000 fdef 	bl	80053e8 <xQueueSemaphoreTake>
 800480a:	4603      	mov	r3, r0
 800480c:	2b01      	cmp	r3, #1
 800480e:	d009      	beq.n	8004824 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004816:	f06f 0301 	mvn.w	r3, #1
 800481a:	617b      	str	r3, [r7, #20]
 800481c:	e002      	b.n	8004824 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800481e:	f06f 0302 	mvn.w	r3, #2
 8004822:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004824:	697b      	ldr	r3, [r7, #20]
}
 8004826:	4618      	mov	r0, r3
 8004828:	3718      	adds	r7, #24
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	e000ed04 	.word	0xe000ed04

08004834 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004834:	b580      	push	{r7, lr}
 8004836:	b086      	sub	sp, #24
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004840:	2300      	movs	r3, #0
 8004842:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d103      	bne.n	8004852 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800484a:	f06f 0303 	mvn.w	r3, #3
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	e02c      	b.n	80048ac <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004852:	f3ef 8305 	mrs	r3, IPSR
 8004856:	60fb      	str	r3, [r7, #12]
  return(result);
 8004858:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800485a:	2b00      	cmp	r3, #0
 800485c:	d01a      	beq.n	8004894 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800485e:	2300      	movs	r3, #0
 8004860:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004862:	f107 0308 	add.w	r3, r7, #8
 8004866:	4619      	mov	r1, r3
 8004868:	6938      	ldr	r0, [r7, #16]
 800486a:	f000 fc50 	bl	800510e <xQueueGiveFromISR>
 800486e:	4603      	mov	r3, r0
 8004870:	2b01      	cmp	r3, #1
 8004872:	d003      	beq.n	800487c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004874:	f06f 0302 	mvn.w	r3, #2
 8004878:	617b      	str	r3, [r7, #20]
 800487a:	e017      	b.n	80048ac <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d014      	beq.n	80048ac <osSemaphoreRelease+0x78>
 8004882:	4b0d      	ldr	r3, [pc, #52]	; (80048b8 <osSemaphoreRelease+0x84>)
 8004884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	f3bf 8f4f 	dsb	sy
 800488e:	f3bf 8f6f 	isb	sy
 8004892:	e00b      	b.n	80048ac <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004894:	2300      	movs	r3, #0
 8004896:	2200      	movs	r2, #0
 8004898:	2100      	movs	r1, #0
 800489a:	6938      	ldr	r0, [r7, #16]
 800489c:	f000 fa9e 	bl	8004ddc <xQueueGenericSend>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d002      	beq.n	80048ac <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80048a6:	f06f 0302 	mvn.w	r3, #2
 80048aa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80048ac:	697b      	ldr	r3, [r7, #20]
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3718      	adds	r7, #24
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	e000ed04 	.word	0xe000ed04

080048bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048bc:	b480      	push	{r7}
 80048be:	b085      	sub	sp, #20
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4a07      	ldr	r2, [pc, #28]	; (80048e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80048cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048ce:	68bb      	ldr	r3, [r7, #8]
 80048d0:	4a06      	ldr	r2, [pc, #24]	; (80048ec <vApplicationGetIdleTaskMemory+0x30>)
 80048d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2280      	movs	r2, #128	; 0x80
 80048d8:	601a      	str	r2, [r3, #0]
}
 80048da:	bf00      	nop
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr
 80048e6:	bf00      	nop
 80048e8:	200001dc 	.word	0x200001dc
 80048ec:	20000284 	.word	0x20000284

080048f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048f0:	b480      	push	{r7}
 80048f2:	b085      	sub	sp, #20
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	60f8      	str	r0, [r7, #12]
 80048f8:	60b9      	str	r1, [r7, #8]
 80048fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	4a07      	ldr	r2, [pc, #28]	; (800491c <vApplicationGetTimerTaskMemory+0x2c>)
 8004900:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	4a06      	ldr	r2, [pc, #24]	; (8004920 <vApplicationGetTimerTaskMemory+0x30>)
 8004906:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800490e:	601a      	str	r2, [r3, #0]
}
 8004910:	bf00      	nop
 8004912:	3714      	adds	r7, #20
 8004914:	46bd      	mov	sp, r7
 8004916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491a:	4770      	bx	lr
 800491c:	20000484 	.word	0x20000484
 8004920:	2000052c 	.word	0x2000052c

08004924 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004924:	b480      	push	{r7}
 8004926:	b083      	sub	sp, #12
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	f103 0208 	add.w	r2, r3, #8
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f04f 32ff 	mov.w	r2, #4294967295
 800493c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f103 0208 	add.w	r2, r3, #8
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	f103 0208 	add.w	r2, r3, #8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2200      	movs	r2, #0
 8004956:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004958:	bf00      	nop
 800495a:	370c      	adds	r7, #12
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr

08004964 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004964:	b480      	push	{r7}
 8004966:	b083      	sub	sp, #12
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004972:	bf00      	nop
 8004974:	370c      	adds	r7, #12
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800497e:	b480      	push	{r7}
 8004980:	b085      	sub	sp, #20
 8004982:	af00      	add	r7, sp, #0
 8004984:	6078      	str	r0, [r7, #4]
 8004986:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	689a      	ldr	r2, [r3, #8]
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	689b      	ldr	r3, [r3, #8]
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	683a      	ldr	r2, [r7, #0]
 80049a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	687a      	ldr	r2, [r7, #4]
 80049ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	1c5a      	adds	r2, r3, #1
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	601a      	str	r2, [r3, #0]
}
 80049ba:	bf00      	nop
 80049bc:	3714      	adds	r7, #20
 80049be:	46bd      	mov	sp, r7
 80049c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c4:	4770      	bx	lr

080049c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049c6:	b480      	push	{r7}
 80049c8:	b085      	sub	sp, #20
 80049ca:	af00      	add	r7, sp, #0
 80049cc:	6078      	str	r0, [r7, #4]
 80049ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049dc:	d103      	bne.n	80049e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e00c      	b.n	8004a00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	3308      	adds	r3, #8
 80049ea:	60fb      	str	r3, [r7, #12]
 80049ec:	e002      	b.n	80049f4 <vListInsert+0x2e>
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d2f6      	bcs.n	80049ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	685a      	ldr	r2, [r3, #4]
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	683a      	ldr	r2, [r7, #0]
 8004a0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	683a      	ldr	r2, [r7, #0]
 8004a1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	1c5a      	adds	r2, r3, #1
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	601a      	str	r2, [r3, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr

08004a38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b085      	sub	sp, #20
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	691b      	ldr	r3, [r3, #16]
 8004a44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	687a      	ldr	r2, [r7, #4]
 8004a4c:	6892      	ldr	r2, [r2, #8]
 8004a4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	689b      	ldr	r3, [r3, #8]
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6852      	ldr	r2, [r2, #4]
 8004a58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	429a      	cmp	r2, r3
 8004a62:	d103      	bne.n	8004a6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689a      	ldr	r2, [r3, #8]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	1e5a      	subs	r2, r3, #1
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
}
 8004a80:	4618      	mov	r0, r3
 8004a82:	3714      	adds	r7, #20
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b084      	sub	sp, #16
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa4:	f383 8811 	msr	BASEPRI, r3
 8004aa8:	f3bf 8f6f 	isb	sy
 8004aac:	f3bf 8f4f 	dsb	sy
 8004ab0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004ab2:	bf00      	nop
 8004ab4:	e7fe      	b.n	8004ab4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004ab6:	f002 fd7d 	bl	80075b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ac6:	fb01 f303 	mul.w	r3, r1, r3
 8004aca:	441a      	add	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	3b01      	subs	r3, #1
 8004ae8:	68f9      	ldr	r1, [r7, #12]
 8004aea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aec:	fb01 f303 	mul.w	r3, r1, r3
 8004af0:	441a      	add	r2, r3
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	22ff      	movs	r2, #255	; 0xff
 8004afa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	22ff      	movs	r2, #255	; 0xff
 8004b02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004b06:	683b      	ldr	r3, [r7, #0]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d114      	bne.n	8004b36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	691b      	ldr	r3, [r3, #16]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d01a      	beq.n	8004b4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3310      	adds	r3, #16
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fc4b 	bl	80063b4 <xTaskRemoveFromEventList>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d012      	beq.n	8004b4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b24:	4b0c      	ldr	r3, [pc, #48]	; (8004b58 <xQueueGenericReset+0xcc>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	e009      	b.n	8004b4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3310      	adds	r3, #16
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	f7ff fef2 	bl	8004924 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	3324      	adds	r3, #36	; 0x24
 8004b44:	4618      	mov	r0, r3
 8004b46:	f7ff feed 	bl	8004924 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b4a:	f002 fd63 	bl	8007614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b4e:	2301      	movs	r3, #1
}
 8004b50:	4618      	mov	r0, r3
 8004b52:	3710      	adds	r7, #16
 8004b54:	46bd      	mov	sp, r7
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	e000ed04 	.word	0xe000ed04

08004b5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b08e      	sub	sp, #56	; 0x38
 8004b60:	af02      	add	r7, sp, #8
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d10a      	bne.n	8004b86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b74:	f383 8811 	msr	BASEPRI, r3
 8004b78:	f3bf 8f6f 	isb	sy
 8004b7c:	f3bf 8f4f 	dsb	sy
 8004b80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b82:	bf00      	nop
 8004b84:	e7fe      	b.n	8004b84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10a      	bne.n	8004ba2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b9e:	bf00      	nop
 8004ba0:	e7fe      	b.n	8004ba0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d002      	beq.n	8004bae <xQueueGenericCreateStatic+0x52>
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d001      	beq.n	8004bb2 <xQueueGenericCreateStatic+0x56>
 8004bae:	2301      	movs	r3, #1
 8004bb0:	e000      	b.n	8004bb4 <xQueueGenericCreateStatic+0x58>
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10a      	bne.n	8004bce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004bb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bbc:	f383 8811 	msr	BASEPRI, r3
 8004bc0:	f3bf 8f6f 	isb	sy
 8004bc4:	f3bf 8f4f 	dsb	sy
 8004bc8:	623b      	str	r3, [r7, #32]
}
 8004bca:	bf00      	nop
 8004bcc:	e7fe      	b.n	8004bcc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d102      	bne.n	8004bda <xQueueGenericCreateStatic+0x7e>
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d101      	bne.n	8004bde <xQueueGenericCreateStatic+0x82>
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e000      	b.n	8004be0 <xQueueGenericCreateStatic+0x84>
 8004bde:	2300      	movs	r3, #0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d10a      	bne.n	8004bfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be8:	f383 8811 	msr	BASEPRI, r3
 8004bec:	f3bf 8f6f 	isb	sy
 8004bf0:	f3bf 8f4f 	dsb	sy
 8004bf4:	61fb      	str	r3, [r7, #28]
}
 8004bf6:	bf00      	nop
 8004bf8:	e7fe      	b.n	8004bf8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bfa:	2350      	movs	r3, #80	; 0x50
 8004bfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bfe:	697b      	ldr	r3, [r7, #20]
 8004c00:	2b50      	cmp	r3, #80	; 0x50
 8004c02:	d00a      	beq.n	8004c1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	61bb      	str	r3, [r7, #24]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d00d      	beq.n	8004c42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c28:	2201      	movs	r2, #1
 8004c2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c34:	9300      	str	r3, [sp, #0]
 8004c36:	4613      	mov	r3, r2
 8004c38:	687a      	ldr	r2, [r7, #4]
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 f83f 	bl	8004cc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c44:	4618      	mov	r0, r3
 8004c46:	3730      	adds	r7, #48	; 0x30
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	bd80      	pop	{r7, pc}

08004c4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b08a      	sub	sp, #40	; 0x28
 8004c50:	af02      	add	r7, sp, #8
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10a      	bne.n	8004c76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c64:	f383 8811 	msr	BASEPRI, r3
 8004c68:	f3bf 8f6f 	isb	sy
 8004c6c:	f3bf 8f4f 	dsb	sy
 8004c70:	613b      	str	r3, [r7, #16]
}
 8004c72:	bf00      	nop
 8004c74:	e7fe      	b.n	8004c74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	fb02 f303 	mul.w	r3, r2, r3
 8004c7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	3350      	adds	r3, #80	; 0x50
 8004c84:	4618      	mov	r0, r3
 8004c86:	f002 fdb7 	bl	80077f8 <pvPortMalloc>
 8004c8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d011      	beq.n	8004cb6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c92:	69bb      	ldr	r3, [r7, #24]
 8004c94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	3350      	adds	r3, #80	; 0x50
 8004c9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ca4:	79fa      	ldrb	r2, [r7, #7]
 8004ca6:	69bb      	ldr	r3, [r7, #24]
 8004ca8:	9300      	str	r3, [sp, #0]
 8004caa:	4613      	mov	r3, r2
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	68b9      	ldr	r1, [r7, #8]
 8004cb0:	68f8      	ldr	r0, [r7, #12]
 8004cb2:	f000 f805 	bl	8004cc0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004cb6:	69bb      	ldr	r3, [r7, #24]
	}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3720      	adds	r7, #32
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}

08004cc0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004cc0:	b580      	push	{r7, lr}
 8004cc2:	b084      	sub	sp, #16
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	607a      	str	r2, [r7, #4]
 8004ccc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d103      	bne.n	8004cdc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	69ba      	ldr	r2, [r7, #24]
 8004cd8:	601a      	str	r2, [r3, #0]
 8004cda:	e002      	b.n	8004ce2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ce2:	69bb      	ldr	r3, [r7, #24]
 8004ce4:	68fa      	ldr	r2, [r7, #12]
 8004ce6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ce8:	69bb      	ldr	r3, [r7, #24]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cee:	2101      	movs	r1, #1
 8004cf0:	69b8      	ldr	r0, [r7, #24]
 8004cf2:	f7ff fecb 	bl	8004a8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cfe:	bf00      	nop
 8004d00:	3710      	adds	r7, #16
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}

08004d06 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004d06:	b580      	push	{r7, lr}
 8004d08:	b08a      	sub	sp, #40	; 0x28
 8004d0a:	af02      	add	r7, sp, #8
 8004d0c:	60f8      	str	r0, [r7, #12]
 8004d0e:	60b9      	str	r1, [r7, #8]
 8004d10:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d1c:	f383 8811 	msr	BASEPRI, r3
 8004d20:	f3bf 8f6f 	isb	sy
 8004d24:	f3bf 8f4f 	dsb	sy
 8004d28:	61bb      	str	r3, [r7, #24]
}
 8004d2a:	bf00      	nop
 8004d2c:	e7fe      	b.n	8004d2c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d2e:	68ba      	ldr	r2, [r7, #8]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d90a      	bls.n	8004d4c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d3a:	f383 8811 	msr	BASEPRI, r3
 8004d3e:	f3bf 8f6f 	isb	sy
 8004d42:	f3bf 8f4f 	dsb	sy
 8004d46:	617b      	str	r3, [r7, #20]
}
 8004d48:	bf00      	nop
 8004d4a:	e7fe      	b.n	8004d4a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d4c:	2302      	movs	r3, #2
 8004d4e:	9300      	str	r3, [sp, #0]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	2100      	movs	r1, #0
 8004d56:	68f8      	ldr	r0, [r7, #12]
 8004d58:	f7ff ff00 	bl	8004b5c <xQueueGenericCreateStatic>
 8004d5c:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004d6a:	69fb      	ldr	r3, [r7, #28]
	}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3720      	adds	r7, #32
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}

08004d74 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b086      	sub	sp, #24
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
 8004d7c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	613b      	str	r3, [r7, #16]
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004d9a:	683a      	ldr	r2, [r7, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	429a      	cmp	r2, r3
 8004da0:	d90a      	bls.n	8004db8 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da6:	f383 8811 	msr	BASEPRI, r3
 8004daa:	f3bf 8f6f 	isb	sy
 8004dae:	f3bf 8f4f 	dsb	sy
 8004db2:	60fb      	str	r3, [r7, #12]
}
 8004db4:	bf00      	nop
 8004db6:	e7fe      	b.n	8004db6 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004db8:	2202      	movs	r2, #2
 8004dba:	2100      	movs	r1, #0
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f7ff ff45 	bl	8004c4c <xQueueGenericCreate>
 8004dc2:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d002      	beq.n	8004dd0 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004dd0:	697b      	ldr	r3, [r7, #20]
	}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
	...

08004ddc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b08e      	sub	sp, #56	; 0x38
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004dea:	2300      	movs	r3, #0
 8004dec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004df2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d10a      	bne.n	8004e0e <xQueueGenericSend+0x32>
	__asm volatile
 8004df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfc:	f383 8811 	msr	BASEPRI, r3
 8004e00:	f3bf 8f6f 	isb	sy
 8004e04:	f3bf 8f4f 	dsb	sy
 8004e08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e0a:	bf00      	nop
 8004e0c:	e7fe      	b.n	8004e0c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004e0e:	68bb      	ldr	r3, [r7, #8]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d103      	bne.n	8004e1c <xQueueGenericSend+0x40>
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d101      	bne.n	8004e20 <xQueueGenericSend+0x44>
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e000      	b.n	8004e22 <xQueueGenericSend+0x46>
 8004e20:	2300      	movs	r3, #0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d10a      	bne.n	8004e3c <xQueueGenericSend+0x60>
	__asm volatile
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e38:	bf00      	nop
 8004e3a:	e7fe      	b.n	8004e3a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d103      	bne.n	8004e4a <xQueueGenericSend+0x6e>
 8004e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <xQueueGenericSend+0x72>
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e000      	b.n	8004e50 <xQueueGenericSend+0x74>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xQueueGenericSend+0x8e>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	623b      	str	r3, [r7, #32]
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004e6a:	f001 fc65 	bl	8006738 <xTaskGetSchedulerState>
 8004e6e:	4603      	mov	r3, r0
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d102      	bne.n	8004e7a <xQueueGenericSend+0x9e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <xQueueGenericSend+0xa2>
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e000      	b.n	8004e80 <xQueueGenericSend+0xa4>
 8004e7e:	2300      	movs	r3, #0
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d10a      	bne.n	8004e9a <xQueueGenericSend+0xbe>
	__asm volatile
 8004e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e88:	f383 8811 	msr	BASEPRI, r3
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f3bf 8f4f 	dsb	sy
 8004e94:	61fb      	str	r3, [r7, #28]
}
 8004e96:	bf00      	nop
 8004e98:	e7fe      	b.n	8004e98 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004e9a:	f002 fb8b 	bl	80075b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea6:	429a      	cmp	r2, r3
 8004ea8:	d302      	bcc.n	8004eb0 <xQueueGenericSend+0xd4>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b02      	cmp	r3, #2
 8004eae:	d129      	bne.n	8004f04 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004eb0:	683a      	ldr	r2, [r7, #0]
 8004eb2:	68b9      	ldr	r1, [r7, #8]
 8004eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eb6:	f000 fc5e 	bl	8005776 <prvCopyDataToQueue>
 8004eba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d010      	beq.n	8004ee6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ec6:	3324      	adds	r3, #36	; 0x24
 8004ec8:	4618      	mov	r0, r3
 8004eca:	f001 fa73 	bl	80063b4 <xTaskRemoveFromEventList>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d013      	beq.n	8004efc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ed4:	4b3f      	ldr	r3, [pc, #252]	; (8004fd4 <xQueueGenericSend+0x1f8>)
 8004ed6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	f3bf 8f6f 	isb	sy
 8004ee4:	e00a      	b.n	8004efc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d007      	beq.n	8004efc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004eec:	4b39      	ldr	r3, [pc, #228]	; (8004fd4 <xQueueGenericSend+0x1f8>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004efc:	f002 fb8a 	bl	8007614 <vPortExitCritical>
				return pdPASS;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e063      	b.n	8004fcc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d103      	bne.n	8004f12 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f0a:	f002 fb83 	bl	8007614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004f0e:	2300      	movs	r3, #0
 8004f10:	e05c      	b.n	8004fcc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d106      	bne.n	8004f26 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f18:	f107 0314 	add.w	r3, r7, #20
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	f001 faad 	bl	800647c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f22:	2301      	movs	r3, #1
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f26:	f002 fb75 	bl	8007614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f2a:	f001 f819 	bl	8005f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f2e:	f002 fb41 	bl	80075b4 <vPortEnterCritical>
 8004f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f34:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f38:	b25b      	sxtb	r3, r3
 8004f3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3e:	d103      	bne.n	8004f48 <xQueueGenericSend+0x16c>
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	2200      	movs	r2, #0
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f4a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f4e:	b25b      	sxtb	r3, r3
 8004f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f54:	d103      	bne.n	8004f5e <xQueueGenericSend+0x182>
 8004f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f5e:	f002 fb59 	bl	8007614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004f62:	1d3a      	adds	r2, r7, #4
 8004f64:	f107 0314 	add.w	r3, r7, #20
 8004f68:	4611      	mov	r1, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	f001 fa9c 	bl	80064a8 <xTaskCheckForTimeOut>
 8004f70:	4603      	mov	r3, r0
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d124      	bne.n	8004fc0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004f76:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f78:	f000 fcf5 	bl	8005966 <prvIsQueueFull>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d018      	beq.n	8004fb4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f84:	3310      	adds	r3, #16
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f001 f9c2 	bl	8006314 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004f90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f92:	f000 fc80 	bl	8005896 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004f96:	f000 fff1 	bl	8005f7c <xTaskResumeAll>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f47f af7c 	bne.w	8004e9a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004fa2:	4b0c      	ldr	r3, [pc, #48]	; (8004fd4 <xQueueGenericSend+0x1f8>)
 8004fa4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004fa8:	601a      	str	r2, [r3, #0]
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	f3bf 8f6f 	isb	sy
 8004fb2:	e772      	b.n	8004e9a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004fb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fb6:	f000 fc6e 	bl	8005896 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004fba:	f000 ffdf 	bl	8005f7c <xTaskResumeAll>
 8004fbe:	e76c      	b.n	8004e9a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004fc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fc2:	f000 fc68 	bl	8005896 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004fc6:	f000 ffd9 	bl	8005f7c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004fca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	3738      	adds	r7, #56	; 0x38
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	bd80      	pop	{r7, pc}
 8004fd4:	e000ed04 	.word	0xe000ed04

08004fd8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b090      	sub	sp, #64	; 0x40
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	607a      	str	r2, [r7, #4]
 8004fe4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d10a      	bne.n	8005006 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ff4:	f383 8811 	msr	BASEPRI, r3
 8004ff8:	f3bf 8f6f 	isb	sy
 8004ffc:	f3bf 8f4f 	dsb	sy
 8005000:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005002:	bf00      	nop
 8005004:	e7fe      	b.n	8005004 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d103      	bne.n	8005014 <xQueueGenericSendFromISR+0x3c>
 800500c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <xQueueGenericSendFromISR+0x40>
 8005014:	2301      	movs	r3, #1
 8005016:	e000      	b.n	800501a <xQueueGenericSendFromISR+0x42>
 8005018:	2300      	movs	r3, #0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d10a      	bne.n	8005034 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800501e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005022:	f383 8811 	msr	BASEPRI, r3
 8005026:	f3bf 8f6f 	isb	sy
 800502a:	f3bf 8f4f 	dsb	sy
 800502e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005030:	bf00      	nop
 8005032:	e7fe      	b.n	8005032 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005034:	683b      	ldr	r3, [r7, #0]
 8005036:	2b02      	cmp	r3, #2
 8005038:	d103      	bne.n	8005042 <xQueueGenericSendFromISR+0x6a>
 800503a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800503c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800503e:	2b01      	cmp	r3, #1
 8005040:	d101      	bne.n	8005046 <xQueueGenericSendFromISR+0x6e>
 8005042:	2301      	movs	r3, #1
 8005044:	e000      	b.n	8005048 <xQueueGenericSendFromISR+0x70>
 8005046:	2300      	movs	r3, #0
 8005048:	2b00      	cmp	r3, #0
 800504a:	d10a      	bne.n	8005062 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800504c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005050:	f383 8811 	msr	BASEPRI, r3
 8005054:	f3bf 8f6f 	isb	sy
 8005058:	f3bf 8f4f 	dsb	sy
 800505c:	623b      	str	r3, [r7, #32]
}
 800505e:	bf00      	nop
 8005060:	e7fe      	b.n	8005060 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005062:	f002 fb89 	bl	8007778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005066:	f3ef 8211 	mrs	r2, BASEPRI
 800506a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800506e:	f383 8811 	msr	BASEPRI, r3
 8005072:	f3bf 8f6f 	isb	sy
 8005076:	f3bf 8f4f 	dsb	sy
 800507a:	61fa      	str	r2, [r7, #28]
 800507c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800507e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005080:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005084:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800508a:	429a      	cmp	r2, r3
 800508c:	d302      	bcc.n	8005094 <xQueueGenericSendFromISR+0xbc>
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	2b02      	cmp	r3, #2
 8005092:	d12f      	bne.n	80050f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005094:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005096:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800509a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80050a4:	683a      	ldr	r2, [r7, #0]
 80050a6:	68b9      	ldr	r1, [r7, #8]
 80050a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80050aa:	f000 fb64 	bl	8005776 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80050b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050b6:	d112      	bne.n	80050de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d016      	beq.n	80050ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	3324      	adds	r3, #36	; 0x24
 80050c4:	4618      	mov	r0, r3
 80050c6:	f001 f975 	bl	80063b4 <xTaskRemoveFromEventList>
 80050ca:	4603      	mov	r3, r0
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00e      	beq.n	80050ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00b      	beq.n	80050ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	601a      	str	r2, [r3, #0]
 80050dc:	e007      	b.n	80050ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80050de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80050e2:	3301      	adds	r3, #1
 80050e4:	b2db      	uxtb	r3, r3
 80050e6:	b25a      	sxtb	r2, r3
 80050e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80050ee:	2301      	movs	r3, #1
 80050f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80050f2:	e001      	b.n	80050f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80050f4:	2300      	movs	r3, #0
 80050f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80050f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80050fc:	697b      	ldr	r3, [r7, #20]
 80050fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005102:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005106:	4618      	mov	r0, r3
 8005108:	3740      	adds	r7, #64	; 0x40
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}

0800510e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800510e:	b580      	push	{r7, lr}
 8005110:	b08e      	sub	sp, #56	; 0x38
 8005112:	af00      	add	r7, sp, #0
 8005114:	6078      	str	r0, [r7, #4]
 8005116:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800511c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10a      	bne.n	8005138 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	623b      	str	r3, [r7, #32]
}
 8005134:	bf00      	nop
 8005136:	e7fe      	b.n	8005136 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00a      	beq.n	8005156 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005140:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005144:	f383 8811 	msr	BASEPRI, r3
 8005148:	f3bf 8f6f 	isb	sy
 800514c:	f3bf 8f4f 	dsb	sy
 8005150:	61fb      	str	r3, [r7, #28]
}
 8005152:	bf00      	nop
 8005154:	e7fe      	b.n	8005154 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d103      	bne.n	8005166 <xQueueGiveFromISR+0x58>
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d101      	bne.n	800516a <xQueueGiveFromISR+0x5c>
 8005166:	2301      	movs	r3, #1
 8005168:	e000      	b.n	800516c <xQueueGiveFromISR+0x5e>
 800516a:	2300      	movs	r3, #0
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10a      	bne.n	8005186 <xQueueGiveFromISR+0x78>
	__asm volatile
 8005170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005174:	f383 8811 	msr	BASEPRI, r3
 8005178:	f3bf 8f6f 	isb	sy
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	61bb      	str	r3, [r7, #24]
}
 8005182:	bf00      	nop
 8005184:	e7fe      	b.n	8005184 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005186:	f002 faf7 	bl	8007778 <vPortValidateInterruptPriority>
	__asm volatile
 800518a:	f3ef 8211 	mrs	r2, BASEPRI
 800518e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005192:	f383 8811 	msr	BASEPRI, r3
 8005196:	f3bf 8f6f 	isb	sy
 800519a:	f3bf 8f4f 	dsb	sy
 800519e:	617a      	str	r2, [r7, #20]
 80051a0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80051a2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051aa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80051ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d22b      	bcs.n	800520e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80051c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c2:	1c5a      	adds	r2, r3, #1
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051c8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80051cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d0:	d112      	bne.n	80051f8 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d016      	beq.n	8005208 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051dc:	3324      	adds	r3, #36	; 0x24
 80051de:	4618      	mov	r0, r3
 80051e0:	f001 f8e8 	bl	80063b4 <xTaskRemoveFromEventList>
 80051e4:	4603      	mov	r3, r0
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00e      	beq.n	8005208 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d00b      	beq.n	8005208 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2201      	movs	r2, #1
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	e007      	b.n	8005208 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80051f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80051fc:	3301      	adds	r3, #1
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	b25a      	sxtb	r2, r3
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005208:	2301      	movs	r3, #1
 800520a:	637b      	str	r3, [r7, #52]	; 0x34
 800520c:	e001      	b.n	8005212 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800520e:	2300      	movs	r3, #0
 8005210:	637b      	str	r3, [r7, #52]	; 0x34
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	f383 8811 	msr	BASEPRI, r3
}
 800521c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800521e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005220:	4618      	mov	r0, r3
 8005222:	3738      	adds	r7, #56	; 0x38
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}

08005228 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b08c      	sub	sp, #48	; 0x30
 800522c:	af00      	add	r7, sp, #0
 800522e:	60f8      	str	r0, [r7, #12]
 8005230:	60b9      	str	r1, [r7, #8]
 8005232:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005234:	2300      	movs	r3, #0
 8005236:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <xQueueReceive+0x30>
	__asm volatile
 8005242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005246:	f383 8811 	msr	BASEPRI, r3
 800524a:	f3bf 8f6f 	isb	sy
 800524e:	f3bf 8f4f 	dsb	sy
 8005252:	623b      	str	r3, [r7, #32]
}
 8005254:	bf00      	nop
 8005256:	e7fe      	b.n	8005256 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005258:	68bb      	ldr	r3, [r7, #8]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d103      	bne.n	8005266 <xQueueReceive+0x3e>
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <xQueueReceive+0x42>
 8005266:	2301      	movs	r3, #1
 8005268:	e000      	b.n	800526c <xQueueReceive+0x44>
 800526a:	2300      	movs	r3, #0
 800526c:	2b00      	cmp	r3, #0
 800526e:	d10a      	bne.n	8005286 <xQueueReceive+0x5e>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61fb      	str	r3, [r7, #28]
}
 8005282:	bf00      	nop
 8005284:	e7fe      	b.n	8005284 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005286:	f001 fa57 	bl	8006738 <xTaskGetSchedulerState>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d102      	bne.n	8005296 <xQueueReceive+0x6e>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d101      	bne.n	800529a <xQueueReceive+0x72>
 8005296:	2301      	movs	r3, #1
 8005298:	e000      	b.n	800529c <xQueueReceive+0x74>
 800529a:	2300      	movs	r3, #0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d10a      	bne.n	80052b6 <xQueueReceive+0x8e>
	__asm volatile
 80052a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a4:	f383 8811 	msr	BASEPRI, r3
 80052a8:	f3bf 8f6f 	isb	sy
 80052ac:	f3bf 8f4f 	dsb	sy
 80052b0:	61bb      	str	r3, [r7, #24]
}
 80052b2:	bf00      	nop
 80052b4:	e7fe      	b.n	80052b4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052b6:	f002 f97d 	bl	80075b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052be:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d01f      	beq.n	8005306 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052c6:	68b9      	ldr	r1, [r7, #8]
 80052c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ca:	f000 fabe 	bl	800584a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	1e5a      	subs	r2, r3, #1
 80052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00f      	beq.n	80052fe <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e0:	3310      	adds	r3, #16
 80052e2:	4618      	mov	r0, r3
 80052e4:	f001 f866 	bl	80063b4 <xTaskRemoveFromEventList>
 80052e8:	4603      	mov	r3, r0
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80052ee:	4b3d      	ldr	r3, [pc, #244]	; (80053e4 <xQueueReceive+0x1bc>)
 80052f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052f4:	601a      	str	r2, [r3, #0]
 80052f6:	f3bf 8f4f 	dsb	sy
 80052fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80052fe:	f002 f989 	bl	8007614 <vPortExitCritical>
				return pdPASS;
 8005302:	2301      	movs	r3, #1
 8005304:	e069      	b.n	80053da <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d103      	bne.n	8005314 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800530c:	f002 f982 	bl	8007614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005310:	2300      	movs	r3, #0
 8005312:	e062      	b.n	80053da <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005314:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005316:	2b00      	cmp	r3, #0
 8005318:	d106      	bne.n	8005328 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800531a:	f107 0310 	add.w	r3, r7, #16
 800531e:	4618      	mov	r0, r3
 8005320:	f001 f8ac 	bl	800647c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005324:	2301      	movs	r3, #1
 8005326:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005328:	f002 f974 	bl	8007614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800532c:	f000 fe18 	bl	8005f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005330:	f002 f940 	bl	80075b4 <vPortEnterCritical>
 8005334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005336:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800533a:	b25b      	sxtb	r3, r3
 800533c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005340:	d103      	bne.n	800534a <xQueueReceive+0x122>
 8005342:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005344:	2200      	movs	r2, #0
 8005346:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800534a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005350:	b25b      	sxtb	r3, r3
 8005352:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005356:	d103      	bne.n	8005360 <xQueueReceive+0x138>
 8005358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800535a:	2200      	movs	r2, #0
 800535c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005360:	f002 f958 	bl	8007614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005364:	1d3a      	adds	r2, r7, #4
 8005366:	f107 0310 	add.w	r3, r7, #16
 800536a:	4611      	mov	r1, r2
 800536c:	4618      	mov	r0, r3
 800536e:	f001 f89b 	bl	80064a8 <xTaskCheckForTimeOut>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d123      	bne.n	80053c0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800537a:	f000 fade 	bl	800593a <prvIsQueueEmpty>
 800537e:	4603      	mov	r3, r0
 8005380:	2b00      	cmp	r3, #0
 8005382:	d017      	beq.n	80053b4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005386:	3324      	adds	r3, #36	; 0x24
 8005388:	687a      	ldr	r2, [r7, #4]
 800538a:	4611      	mov	r1, r2
 800538c:	4618      	mov	r0, r3
 800538e:	f000 ffc1 	bl	8006314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005392:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005394:	f000 fa7f 	bl	8005896 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005398:	f000 fdf0 	bl	8005f7c <xTaskResumeAll>
 800539c:	4603      	mov	r3, r0
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d189      	bne.n	80052b6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80053a2:	4b10      	ldr	r3, [pc, #64]	; (80053e4 <xQueueReceive+0x1bc>)
 80053a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	f3bf 8f4f 	dsb	sy
 80053ae:	f3bf 8f6f 	isb	sy
 80053b2:	e780      	b.n	80052b6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053b6:	f000 fa6e 	bl	8005896 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ba:	f000 fddf 	bl	8005f7c <xTaskResumeAll>
 80053be:	e77a      	b.n	80052b6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053c2:	f000 fa68 	bl	8005896 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053c6:	f000 fdd9 	bl	8005f7c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053cc:	f000 fab5 	bl	800593a <prvIsQueueEmpty>
 80053d0:	4603      	mov	r3, r0
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f43f af6f 	beq.w	80052b6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053d8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3730      	adds	r7, #48	; 0x30
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	e000ed04 	.word	0xe000ed04

080053e8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	b08e      	sub	sp, #56	; 0x38
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80053f2:	2300      	movs	r3, #0
 80053f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80053fa:	2300      	movs	r3, #0
 80053fc:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005400:	2b00      	cmp	r3, #0
 8005402:	d10a      	bne.n	800541a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	623b      	str	r3, [r7, #32]
}
 8005416:	bf00      	nop
 8005418:	e7fe      	b.n	8005418 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800541a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00a      	beq.n	8005438 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005426:	f383 8811 	msr	BASEPRI, r3
 800542a:	f3bf 8f6f 	isb	sy
 800542e:	f3bf 8f4f 	dsb	sy
 8005432:	61fb      	str	r3, [r7, #28]
}
 8005434:	bf00      	nop
 8005436:	e7fe      	b.n	8005436 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005438:	f001 f97e 	bl	8006738 <xTaskGetSchedulerState>
 800543c:	4603      	mov	r3, r0
 800543e:	2b00      	cmp	r3, #0
 8005440:	d102      	bne.n	8005448 <xQueueSemaphoreTake+0x60>
 8005442:	683b      	ldr	r3, [r7, #0]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d101      	bne.n	800544c <xQueueSemaphoreTake+0x64>
 8005448:	2301      	movs	r3, #1
 800544a:	e000      	b.n	800544e <xQueueSemaphoreTake+0x66>
 800544c:	2300      	movs	r3, #0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d10a      	bne.n	8005468 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8005452:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005456:	f383 8811 	msr	BASEPRI, r3
 800545a:	f3bf 8f6f 	isb	sy
 800545e:	f3bf 8f4f 	dsb	sy
 8005462:	61bb      	str	r3, [r7, #24]
}
 8005464:	bf00      	nop
 8005466:	e7fe      	b.n	8005466 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005468:	f002 f8a4 	bl	80075b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800546c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005470:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005474:	2b00      	cmp	r3, #0
 8005476:	d024      	beq.n	80054c2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005478:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547a:	1e5a      	subs	r2, r3, #1
 800547c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	2b00      	cmp	r3, #0
 8005486:	d104      	bne.n	8005492 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005488:	f001 facc 	bl	8006a24 <pvTaskIncrementMutexHeldCount>
 800548c:	4602      	mov	r2, r0
 800548e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005490:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	2b00      	cmp	r3, #0
 8005498:	d00f      	beq.n	80054ba <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800549a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800549c:	3310      	adds	r3, #16
 800549e:	4618      	mov	r0, r3
 80054a0:	f000 ff88 	bl	80063b4 <xTaskRemoveFromEventList>
 80054a4:	4603      	mov	r3, r0
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d007      	beq.n	80054ba <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80054aa:	4b54      	ldr	r3, [pc, #336]	; (80055fc <xQueueSemaphoreTake+0x214>)
 80054ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054b0:	601a      	str	r2, [r3, #0]
 80054b2:	f3bf 8f4f 	dsb	sy
 80054b6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80054ba:	f002 f8ab 	bl	8007614 <vPortExitCritical>
				return pdPASS;
 80054be:	2301      	movs	r3, #1
 80054c0:	e097      	b.n	80055f2 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054c2:	683b      	ldr	r3, [r7, #0]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d111      	bne.n	80054ec <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80054c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80054ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d2:	f383 8811 	msr	BASEPRI, r3
 80054d6:	f3bf 8f6f 	isb	sy
 80054da:	f3bf 8f4f 	dsb	sy
 80054de:	617b      	str	r3, [r7, #20]
}
 80054e0:	bf00      	nop
 80054e2:	e7fe      	b.n	80054e2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80054e4:	f002 f896 	bl	8007614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054e8:	2300      	movs	r3, #0
 80054ea:	e082      	b.n	80055f2 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d106      	bne.n	8005500 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054f2:	f107 030c 	add.w	r3, r7, #12
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 ffc0 	bl	800647c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054fc:	2301      	movs	r3, #1
 80054fe:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005500:	f002 f888 	bl	8007614 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005504:	f000 fd2c 	bl	8005f60 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005508:	f002 f854 	bl	80075b4 <vPortEnterCritical>
 800550c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005512:	b25b      	sxtb	r3, r3
 8005514:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005518:	d103      	bne.n	8005522 <xQueueSemaphoreTake+0x13a>
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	2200      	movs	r2, #0
 800551e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005524:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005528:	b25b      	sxtb	r3, r3
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552e:	d103      	bne.n	8005538 <xQueueSemaphoreTake+0x150>
 8005530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005532:	2200      	movs	r2, #0
 8005534:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005538:	f002 f86c 	bl	8007614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800553c:	463a      	mov	r2, r7
 800553e:	f107 030c 	add.w	r3, r7, #12
 8005542:	4611      	mov	r1, r2
 8005544:	4618      	mov	r0, r3
 8005546:	f000 ffaf 	bl	80064a8 <xTaskCheckForTimeOut>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	d132      	bne.n	80055b6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005550:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005552:	f000 f9f2 	bl	800593a <prvIsQueueEmpty>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d026      	beq.n	80055aa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800555c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d109      	bne.n	8005578 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005564:	f002 f826 	bl	80075b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	689b      	ldr	r3, [r3, #8]
 800556c:	4618      	mov	r0, r3
 800556e:	f001 f901 	bl	8006774 <xTaskPriorityInherit>
 8005572:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005574:	f002 f84e 	bl	8007614 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800557a:	3324      	adds	r3, #36	; 0x24
 800557c:	683a      	ldr	r2, [r7, #0]
 800557e:	4611      	mov	r1, r2
 8005580:	4618      	mov	r0, r3
 8005582:	f000 fec7 	bl	8006314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005586:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005588:	f000 f985 	bl	8005896 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800558c:	f000 fcf6 	bl	8005f7c <xTaskResumeAll>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	f47f af68 	bne.w	8005468 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8005598:	4b18      	ldr	r3, [pc, #96]	; (80055fc <xQueueSemaphoreTake+0x214>)
 800559a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800559e:	601a      	str	r2, [r3, #0]
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	e75e      	b.n	8005468 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80055aa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055ac:	f000 f973 	bl	8005896 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80055b0:	f000 fce4 	bl	8005f7c <xTaskResumeAll>
 80055b4:	e758      	b.n	8005468 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80055b6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055b8:	f000 f96d 	bl	8005896 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80055bc:	f000 fcde 	bl	8005f7c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055c2:	f000 f9ba 	bl	800593a <prvIsQueueEmpty>
 80055c6:	4603      	mov	r3, r0
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f43f af4d 	beq.w	8005468 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80055ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d00d      	beq.n	80055f0 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80055d4:	f001 ffee 	bl	80075b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80055d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055da:	f000 f8b4 	bl	8005746 <prvGetDisinheritPriorityAfterTimeout>
 80055de:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80055e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80055e6:	4618      	mov	r0, r3
 80055e8:	f001 f99a 	bl	8006920 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80055ec:	f002 f812 	bl	8007614 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80055f0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80055f2:	4618      	mov	r0, r3
 80055f4:	3738      	adds	r7, #56	; 0x38
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	e000ed04 	.word	0xe000ed04

08005600 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b08e      	sub	sp, #56	; 0x38
 8005604:	af00      	add	r7, sp, #0
 8005606:	60f8      	str	r0, [r7, #12]
 8005608:	60b9      	str	r1, [r7, #8]
 800560a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	2b00      	cmp	r3, #0
 8005614:	d10a      	bne.n	800562c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800561a:	f383 8811 	msr	BASEPRI, r3
 800561e:	f3bf 8f6f 	isb	sy
 8005622:	f3bf 8f4f 	dsb	sy
 8005626:	623b      	str	r3, [r7, #32]
}
 8005628:	bf00      	nop
 800562a:	e7fe      	b.n	800562a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d103      	bne.n	800563a <xQueueReceiveFromISR+0x3a>
 8005632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	2b00      	cmp	r3, #0
 8005638:	d101      	bne.n	800563e <xQueueReceiveFromISR+0x3e>
 800563a:	2301      	movs	r3, #1
 800563c:	e000      	b.n	8005640 <xQueueReceiveFromISR+0x40>
 800563e:	2300      	movs	r3, #0
 8005640:	2b00      	cmp	r3, #0
 8005642:	d10a      	bne.n	800565a <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005648:	f383 8811 	msr	BASEPRI, r3
 800564c:	f3bf 8f6f 	isb	sy
 8005650:	f3bf 8f4f 	dsb	sy
 8005654:	61fb      	str	r3, [r7, #28]
}
 8005656:	bf00      	nop
 8005658:	e7fe      	b.n	8005658 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800565a:	f002 f88d 	bl	8007778 <vPortValidateInterruptPriority>
	__asm volatile
 800565e:	f3ef 8211 	mrs	r2, BASEPRI
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	61ba      	str	r2, [r7, #24]
 8005674:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005676:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005678:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800567a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800567c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800567e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005682:	2b00      	cmp	r3, #0
 8005684:	d02f      	beq.n	80056e6 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005688:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800568c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005690:	68b9      	ldr	r1, [r7, #8]
 8005692:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005694:	f000 f8d9 	bl	800584a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800569a:	1e5a      	subs	r2, r3, #1
 800569c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800569e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80056a0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d112      	bne.n	80056d0 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056ac:	691b      	ldr	r3, [r3, #16]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d016      	beq.n	80056e0 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b4:	3310      	adds	r3, #16
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fe7c 	bl	80063b4 <xTaskRemoveFromEventList>
 80056bc:	4603      	mov	r3, r0
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d00e      	beq.n	80056e0 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d00b      	beq.n	80056e0 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
 80056ce:	e007      	b.n	80056e0 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80056d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80056d4:	3301      	adds	r3, #1
 80056d6:	b2db      	uxtb	r3, r3
 80056d8:	b25a      	sxtb	r2, r3
 80056da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80056e0:	2301      	movs	r3, #1
 80056e2:	637b      	str	r3, [r7, #52]	; 0x34
 80056e4:	e001      	b.n	80056ea <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80056e6:	2300      	movs	r3, #0
 80056e8:	637b      	str	r3, [r7, #52]	; 0x34
 80056ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056ec:	613b      	str	r3, [r7, #16]
	__asm volatile
 80056ee:	693b      	ldr	r3, [r7, #16]
 80056f0:	f383 8811 	msr	BASEPRI, r3
}
 80056f4:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3738      	adds	r7, #56	; 0x38
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d10a      	bne.n	8005728 <vQueueDelete+0x28>
	__asm volatile
 8005712:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005716:	f383 8811 	msr	BASEPRI, r3
 800571a:	f3bf 8f6f 	isb	sy
 800571e:	f3bf 8f4f 	dsb	sy
 8005722:	60bb      	str	r3, [r7, #8]
}
 8005724:	bf00      	nop
 8005726:	e7fe      	b.n	8005726 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 f95f 	bl	80059ec <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005734:	2b00      	cmp	r3, #0
 8005736:	d102      	bne.n	800573e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005738:	68f8      	ldr	r0, [r7, #12]
 800573a:	f002 f929 	bl	8007990 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800573e:	bf00      	nop
 8005740:	3710      	adds	r7, #16
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005746:	b480      	push	{r7}
 8005748:	b085      	sub	sp, #20
 800574a:	af00      	add	r7, sp, #0
 800574c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005752:	2b00      	cmp	r3, #0
 8005754:	d006      	beq.n	8005764 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005760:	60fb      	str	r3, [r7, #12]
 8005762:	e001      	b.n	8005768 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005764:	2300      	movs	r3, #0
 8005766:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005768:	68fb      	ldr	r3, [r7, #12]
	}
 800576a:	4618      	mov	r0, r3
 800576c:	3714      	adds	r7, #20
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr

08005776 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005776:	b580      	push	{r7, lr}
 8005778:	b086      	sub	sp, #24
 800577a:	af00      	add	r7, sp, #0
 800577c:	60f8      	str	r0, [r7, #12]
 800577e:	60b9      	str	r1, [r7, #8]
 8005780:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005782:	2300      	movs	r3, #0
 8005784:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005790:	2b00      	cmp	r3, #0
 8005792:	d10d      	bne.n	80057b0 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d14d      	bne.n	8005838 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	4618      	mov	r0, r3
 80057a2:	f001 f84f 	bl	8006844 <xTaskPriorityDisinherit>
 80057a6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	2200      	movs	r2, #0
 80057ac:	609a      	str	r2, [r3, #8]
 80057ae:	e043      	b.n	8005838 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d119      	bne.n	80057ea <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	6858      	ldr	r0, [r3, #4]
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057be:	461a      	mov	r2, r3
 80057c0:	68b9      	ldr	r1, [r7, #8]
 80057c2:	f002 fbec 	bl	8007f9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	685a      	ldr	r2, [r3, #4]
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057ce:	441a      	add	r2, r3
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	685a      	ldr	r2, [r3, #4]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	429a      	cmp	r2, r3
 80057de:	d32b      	bcc.n	8005838 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	681a      	ldr	r2, [r3, #0]
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	605a      	str	r2, [r3, #4]
 80057e8:	e026      	b.n	8005838 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	68d8      	ldr	r0, [r3, #12]
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057f2:	461a      	mov	r2, r3
 80057f4:	68b9      	ldr	r1, [r7, #8]
 80057f6:	f002 fbd2 	bl	8007f9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	68da      	ldr	r2, [r3, #12]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005802:	425b      	negs	r3, r3
 8005804:	441a      	add	r2, r3
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	68da      	ldr	r2, [r3, #12]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d207      	bcs.n	8005826 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800581e:	425b      	negs	r3, r3
 8005820:	441a      	add	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2b02      	cmp	r3, #2
 800582a:	d105      	bne.n	8005838 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	2b00      	cmp	r3, #0
 8005830:	d002      	beq.n	8005838 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3b01      	subs	r3, #1
 8005836:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005838:	693b      	ldr	r3, [r7, #16]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005840:	697b      	ldr	r3, [r7, #20]
}
 8005842:	4618      	mov	r0, r3
 8005844:	3718      	adds	r7, #24
 8005846:	46bd      	mov	sp, r7
 8005848:	bd80      	pop	{r7, pc}

0800584a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800584a:	b580      	push	{r7, lr}
 800584c:	b082      	sub	sp, #8
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
 8005852:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005858:	2b00      	cmp	r3, #0
 800585a:	d018      	beq.n	800588e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	68da      	ldr	r2, [r3, #12]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005864:	441a      	add	r2, r3
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	68da      	ldr	r2, [r3, #12]
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	689b      	ldr	r3, [r3, #8]
 8005872:	429a      	cmp	r2, r3
 8005874:	d303      	bcc.n	800587e <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681a      	ldr	r2, [r3, #0]
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68d9      	ldr	r1, [r3, #12]
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005886:	461a      	mov	r2, r3
 8005888:	6838      	ldr	r0, [r7, #0]
 800588a:	f002 fb88 	bl	8007f9e <memcpy>
	}
}
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800589e:	f001 fe89 	bl	80075b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80058a8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058aa:	e011      	b.n	80058d0 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d012      	beq.n	80058da <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	3324      	adds	r3, #36	; 0x24
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fd7b 	bl	80063b4 <xTaskRemoveFromEventList>
 80058be:	4603      	mov	r3, r0
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d001      	beq.n	80058c8 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80058c4:	f000 fe52 	bl	800656c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80058c8:	7bfb      	ldrb	r3, [r7, #15]
 80058ca:	3b01      	subs	r3, #1
 80058cc:	b2db      	uxtb	r3, r3
 80058ce:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80058d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	dce9      	bgt.n	80058ac <prvUnlockQueue+0x16>
 80058d8:	e000      	b.n	80058dc <prvUnlockQueue+0x46>
					break;
 80058da:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	22ff      	movs	r2, #255	; 0xff
 80058e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80058e4:	f001 fe96 	bl	8007614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80058e8:	f001 fe64 	bl	80075b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80058f2:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80058f4:	e011      	b.n	800591a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	691b      	ldr	r3, [r3, #16]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d012      	beq.n	8005924 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	3310      	adds	r3, #16
 8005902:	4618      	mov	r0, r3
 8005904:	f000 fd56 	bl	80063b4 <xTaskRemoveFromEventList>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d001      	beq.n	8005912 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800590e:	f000 fe2d 	bl	800656c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005912:	7bbb      	ldrb	r3, [r7, #14]
 8005914:	3b01      	subs	r3, #1
 8005916:	b2db      	uxtb	r3, r3
 8005918:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800591a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800591e:	2b00      	cmp	r3, #0
 8005920:	dce9      	bgt.n	80058f6 <prvUnlockQueue+0x60>
 8005922:	e000      	b.n	8005926 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005924:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	22ff      	movs	r2, #255	; 0xff
 800592a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800592e:	f001 fe71 	bl	8007614 <vPortExitCritical>
}
 8005932:	bf00      	nop
 8005934:	3710      	adds	r7, #16
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005942:	f001 fe37 	bl	80075b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594a:	2b00      	cmp	r3, #0
 800594c:	d102      	bne.n	8005954 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800594e:	2301      	movs	r3, #1
 8005950:	60fb      	str	r3, [r7, #12]
 8005952:	e001      	b.n	8005958 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005954:	2300      	movs	r3, #0
 8005956:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005958:	f001 fe5c 	bl	8007614 <vPortExitCritical>

	return xReturn;
 800595c:	68fb      	ldr	r3, [r7, #12]
}
 800595e:	4618      	mov	r0, r3
 8005960:	3710      	adds	r7, #16
 8005962:	46bd      	mov	sp, r7
 8005964:	bd80      	pop	{r7, pc}

08005966 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005966:	b580      	push	{r7, lr}
 8005968:	b084      	sub	sp, #16
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800596e:	f001 fe21 	bl	80075b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800597a:	429a      	cmp	r2, r3
 800597c:	d102      	bne.n	8005984 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800597e:	2301      	movs	r3, #1
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e001      	b.n	8005988 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005984:	2300      	movs	r3, #0
 8005986:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005988:	f001 fe44 	bl	8007614 <vPortExitCritical>

	return xReturn;
 800598c:	68fb      	ldr	r3, [r7, #12]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
	...

08005998 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005998:	b480      	push	{r7}
 800599a:	b085      	sub	sp, #20
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059a2:	2300      	movs	r3, #0
 80059a4:	60fb      	str	r3, [r7, #12]
 80059a6:	e014      	b.n	80059d2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80059a8:	4a0f      	ldr	r2, [pc, #60]	; (80059e8 <vQueueAddToRegistry+0x50>)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d10b      	bne.n	80059cc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80059b4:	490c      	ldr	r1, [pc, #48]	; (80059e8 <vQueueAddToRegistry+0x50>)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80059be:	4a0a      	ldr	r2, [pc, #40]	; (80059e8 <vQueueAddToRegistry+0x50>)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	00db      	lsls	r3, r3, #3
 80059c4:	4413      	add	r3, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80059ca:	e006      	b.n	80059da <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	3301      	adds	r3, #1
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b07      	cmp	r3, #7
 80059d6:	d9e7      	bls.n	80059a8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80059d8:	bf00      	nop
 80059da:	bf00      	nop
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr
 80059e6:	bf00      	nop
 80059e8:	2000092c 	.word	0x2000092c

080059ec <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80059f4:	2300      	movs	r3, #0
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e016      	b.n	8005a28 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 80059fa:	4a10      	ldr	r2, [pc, #64]	; (8005a3c <vQueueUnregisterQueue+0x50>)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	00db      	lsls	r3, r3, #3
 8005a00:	4413      	add	r3, r2
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	687a      	ldr	r2, [r7, #4]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d10b      	bne.n	8005a22 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005a0a:	4a0c      	ldr	r2, [pc, #48]	; (8005a3c <vQueueUnregisterQueue+0x50>)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2100      	movs	r1, #0
 8005a10:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005a14:	4a09      	ldr	r2, [pc, #36]	; (8005a3c <vQueueUnregisterQueue+0x50>)
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	00db      	lsls	r3, r3, #3
 8005a1a:	4413      	add	r3, r2
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	605a      	str	r2, [r3, #4]
				break;
 8005a20:	e006      	b.n	8005a30 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	3301      	adds	r3, #1
 8005a26:	60fb      	str	r3, [r7, #12]
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2b07      	cmp	r3, #7
 8005a2c:	d9e5      	bls.n	80059fa <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005a2e:	bf00      	nop
 8005a30:	bf00      	nop
 8005a32:	3714      	adds	r7, #20
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr
 8005a3c:	2000092c 	.word	0x2000092c

08005a40 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005a50:	f001 fdb0 	bl	80075b4 <vPortEnterCritical>
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005a5a:	b25b      	sxtb	r3, r3
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d103      	bne.n	8005a6a <vQueueWaitForMessageRestricted+0x2a>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a70:	b25b      	sxtb	r3, r3
 8005a72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a76:	d103      	bne.n	8005a80 <vQueueWaitForMessageRestricted+0x40>
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005a80:	f001 fdc8 	bl	8007614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d106      	bne.n	8005a9a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005a8c:	697b      	ldr	r3, [r7, #20]
 8005a8e:	3324      	adds	r3, #36	; 0x24
 8005a90:	687a      	ldr	r2, [r7, #4]
 8005a92:	68b9      	ldr	r1, [r7, #8]
 8005a94:	4618      	mov	r0, r3
 8005a96:	f000 fc61 	bl	800635c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005a9a:	6978      	ldr	r0, [r7, #20]
 8005a9c:	f7ff fefb 	bl	8005896 <prvUnlockQueue>
	}
 8005aa0:	bf00      	nop
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b08e      	sub	sp, #56	; 0x38
 8005aac:	af04      	add	r7, sp, #16
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
 8005ab4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ab6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d10a      	bne.n	8005ad2 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005abc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ac0:	f383 8811 	msr	BASEPRI, r3
 8005ac4:	f3bf 8f6f 	isb	sy
 8005ac8:	f3bf 8f4f 	dsb	sy
 8005acc:	623b      	str	r3, [r7, #32]
}
 8005ace:	bf00      	nop
 8005ad0:	e7fe      	b.n	8005ad0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d10a      	bne.n	8005aee <xTaskCreateStatic+0x46>
	__asm volatile
 8005ad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005adc:	f383 8811 	msr	BASEPRI, r3
 8005ae0:	f3bf 8f6f 	isb	sy
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	61fb      	str	r3, [r7, #28]
}
 8005aea:	bf00      	nop
 8005aec:	e7fe      	b.n	8005aec <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005aee:	23a8      	movs	r3, #168	; 0xa8
 8005af0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005af2:	693b      	ldr	r3, [r7, #16]
 8005af4:	2ba8      	cmp	r3, #168	; 0xa8
 8005af6:	d00a      	beq.n	8005b0e <xTaskCreateStatic+0x66>
	__asm volatile
 8005af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005afc:	f383 8811 	msr	BASEPRI, r3
 8005b00:	f3bf 8f6f 	isb	sy
 8005b04:	f3bf 8f4f 	dsb	sy
 8005b08:	61bb      	str	r3, [r7, #24]
}
 8005b0a:	bf00      	nop
 8005b0c:	e7fe      	b.n	8005b0c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005b0e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d01e      	beq.n	8005b54 <xTaskCreateStatic+0xac>
 8005b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d01b      	beq.n	8005b54 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b24:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	2202      	movs	r2, #2
 8005b2a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005b2e:	2300      	movs	r3, #0
 8005b30:	9303      	str	r3, [sp, #12]
 8005b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b34:	9302      	str	r3, [sp, #8]
 8005b36:	f107 0314 	add.w	r3, r7, #20
 8005b3a:	9301      	str	r3, [sp, #4]
 8005b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3e:	9300      	str	r3, [sp, #0]
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	687a      	ldr	r2, [r7, #4]
 8005b44:	68b9      	ldr	r1, [r7, #8]
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f000 f850 	bl	8005bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005b4e:	f000 f8f3 	bl	8005d38 <prvAddNewTaskToReadyList>
 8005b52:	e001      	b.n	8005b58 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005b58:	697b      	ldr	r3, [r7, #20]
	}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3728      	adds	r7, #40	; 0x28
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}

08005b62 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b08c      	sub	sp, #48	; 0x30
 8005b66:	af04      	add	r7, sp, #16
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	603b      	str	r3, [r7, #0]
 8005b6e:	4613      	mov	r3, r2
 8005b70:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005b72:	88fb      	ldrh	r3, [r7, #6]
 8005b74:	009b      	lsls	r3, r3, #2
 8005b76:	4618      	mov	r0, r3
 8005b78:	f001 fe3e 	bl	80077f8 <pvPortMalloc>
 8005b7c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d00e      	beq.n	8005ba2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005b84:	20a8      	movs	r0, #168	; 0xa8
 8005b86:	f001 fe37 	bl	80077f8 <pvPortMalloc>
 8005b8a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005b8c:	69fb      	ldr	r3, [r7, #28]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d003      	beq.n	8005b9a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005b92:	69fb      	ldr	r3, [r7, #28]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	631a      	str	r2, [r3, #48]	; 0x30
 8005b98:	e005      	b.n	8005ba6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005b9a:	6978      	ldr	r0, [r7, #20]
 8005b9c:	f001 fef8 	bl	8007990 <vPortFree>
 8005ba0:	e001      	b.n	8005ba6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d017      	beq.n	8005bdc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005bac:	69fb      	ldr	r3, [r7, #28]
 8005bae:	2200      	movs	r2, #0
 8005bb0:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005bb4:	88fa      	ldrh	r2, [r7, #6]
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	9303      	str	r3, [sp, #12]
 8005bba:	69fb      	ldr	r3, [r7, #28]
 8005bbc:	9302      	str	r3, [sp, #8]
 8005bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bc0:	9301      	str	r3, [sp, #4]
 8005bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bc4:	9300      	str	r3, [sp, #0]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	68b9      	ldr	r1, [r7, #8]
 8005bca:	68f8      	ldr	r0, [r7, #12]
 8005bcc:	f000 f80e 	bl	8005bec <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bd0:	69f8      	ldr	r0, [r7, #28]
 8005bd2:	f000 f8b1 	bl	8005d38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	e002      	b.n	8005be2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005bdc:	f04f 33ff 	mov.w	r3, #4294967295
 8005be0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005be2:	69bb      	ldr	r3, [r7, #24]
	}
 8005be4:	4618      	mov	r0, r3
 8005be6:	3720      	adds	r7, #32
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b088      	sub	sp, #32
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
 8005bf8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	461a      	mov	r2, r3
 8005c04:	21a5      	movs	r1, #165	; 0xa5
 8005c06:	f002 f8f8 	bl	8007dfa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005c14:	3b01      	subs	r3, #1
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	4413      	add	r3, r2
 8005c1a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005c1c:	69bb      	ldr	r3, [r7, #24]
 8005c1e:	f023 0307 	bic.w	r3, r3, #7
 8005c22:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005c24:	69bb      	ldr	r3, [r7, #24]
 8005c26:	f003 0307 	and.w	r3, r3, #7
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d00a      	beq.n	8005c44 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c32:	f383 8811 	msr	BASEPRI, r3
 8005c36:	f3bf 8f6f 	isb	sy
 8005c3a:	f3bf 8f4f 	dsb	sy
 8005c3e:	617b      	str	r3, [r7, #20]
}
 8005c40:	bf00      	nop
 8005c42:	e7fe      	b.n	8005c42 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d01f      	beq.n	8005c8a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
 8005c4e:	e012      	b.n	8005c76 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005c50:	68ba      	ldr	r2, [r7, #8]
 8005c52:	69fb      	ldr	r3, [r7, #28]
 8005c54:	4413      	add	r3, r2
 8005c56:	7819      	ldrb	r1, [r3, #0]
 8005c58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c5a:	69fb      	ldr	r3, [r7, #28]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	3334      	adds	r3, #52	; 0x34
 8005c60:	460a      	mov	r2, r1
 8005c62:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	69fb      	ldr	r3, [r7, #28]
 8005c68:	4413      	add	r3, r2
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d006      	beq.n	8005c7e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	3301      	adds	r3, #1
 8005c74:	61fb      	str	r3, [r7, #28]
 8005c76:	69fb      	ldr	r3, [r7, #28]
 8005c78:	2b0f      	cmp	r3, #15
 8005c7a:	d9e9      	bls.n	8005c50 <prvInitialiseNewTask+0x64>
 8005c7c:	e000      	b.n	8005c80 <prvInitialiseNewTask+0x94>
			{
				break;
 8005c7e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005c80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c82:	2200      	movs	r2, #0
 8005c84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c88:	e003      	b.n	8005c92 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c94:	2b37      	cmp	r3, #55	; 0x37
 8005c96:	d901      	bls.n	8005c9c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005c98:	2337      	movs	r3, #55	; 0x37
 8005c9a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005ca2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005ca6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005caa:	2200      	movs	r2, #0
 8005cac:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	3304      	adds	r3, #4
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f7fe fe56 	bl	8004964 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cba:	3318      	adds	r3, #24
 8005cbc:	4618      	mov	r0, r3
 8005cbe:	f7fe fe51 	bl	8004964 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005cc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cc6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cd4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cd6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ce0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ce8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cea:	3354      	adds	r3, #84	; 0x54
 8005cec:	224c      	movs	r2, #76	; 0x4c
 8005cee:	2100      	movs	r1, #0
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	f002 f882 	bl	8007dfa <memset>
 8005cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cf8:	4a0c      	ldr	r2, [pc, #48]	; (8005d2c <prvInitialiseNewTask+0x140>)
 8005cfa:	659a      	str	r2, [r3, #88]	; 0x58
 8005cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cfe:	4a0c      	ldr	r2, [pc, #48]	; (8005d30 <prvInitialiseNewTask+0x144>)
 8005d00:	65da      	str	r2, [r3, #92]	; 0x5c
 8005d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d04:	4a0b      	ldr	r2, [pc, #44]	; (8005d34 <prvInitialiseNewTask+0x148>)
 8005d06:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	68f9      	ldr	r1, [r7, #12]
 8005d0c:	69b8      	ldr	r0, [r7, #24]
 8005d0e:	f001 fb23 	bl	8007358 <pxPortInitialiseStack>
 8005d12:	4602      	mov	r2, r0
 8005d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d16:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d002      	beq.n	8005d24 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d22:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d24:	bf00      	nop
 8005d26:	3720      	adds	r7, #32
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	20004a58 	.word	0x20004a58
 8005d30:	20004ac0 	.word	0x20004ac0
 8005d34:	20004b28 	.word	0x20004b28

08005d38 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005d40:	f001 fc38 	bl	80075b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005d44:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <prvAddNewTaskToReadyList+0xc4>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	3301      	adds	r3, #1
 8005d4a:	4a2c      	ldr	r2, [pc, #176]	; (8005dfc <prvAddNewTaskToReadyList+0xc4>)
 8005d4c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005d4e:	4b2c      	ldr	r3, [pc, #176]	; (8005e00 <prvAddNewTaskToReadyList+0xc8>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d109      	bne.n	8005d6a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005d56:	4a2a      	ldr	r2, [pc, #168]	; (8005e00 <prvAddNewTaskToReadyList+0xc8>)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005d5c:	4b27      	ldr	r3, [pc, #156]	; (8005dfc <prvAddNewTaskToReadyList+0xc4>)
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	2b01      	cmp	r3, #1
 8005d62:	d110      	bne.n	8005d86 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005d64:	f000 fc26 	bl	80065b4 <prvInitialiseTaskLists>
 8005d68:	e00d      	b.n	8005d86 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005d6a:	4b26      	ldr	r3, [pc, #152]	; (8005e04 <prvAddNewTaskToReadyList+0xcc>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d109      	bne.n	8005d86 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005d72:	4b23      	ldr	r3, [pc, #140]	; (8005e00 <prvAddNewTaskToReadyList+0xc8>)
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d7c:	429a      	cmp	r2, r3
 8005d7e:	d802      	bhi.n	8005d86 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005d80:	4a1f      	ldr	r2, [pc, #124]	; (8005e00 <prvAddNewTaskToReadyList+0xc8>)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005d86:	4b20      	ldr	r3, [pc, #128]	; (8005e08 <prvAddNewTaskToReadyList+0xd0>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	3301      	adds	r3, #1
 8005d8c:	4a1e      	ldr	r2, [pc, #120]	; (8005e08 <prvAddNewTaskToReadyList+0xd0>)
 8005d8e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005d90:	4b1d      	ldr	r3, [pc, #116]	; (8005e08 <prvAddNewTaskToReadyList+0xd0>)
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d9c:	4b1b      	ldr	r3, [pc, #108]	; (8005e0c <prvAddNewTaskToReadyList+0xd4>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d903      	bls.n	8005dac <prvAddNewTaskToReadyList+0x74>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005da8:	4a18      	ldr	r2, [pc, #96]	; (8005e0c <prvAddNewTaskToReadyList+0xd4>)
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	4a15      	ldr	r2, [pc, #84]	; (8005e10 <prvAddNewTaskToReadyList+0xd8>)
 8005dba:	441a      	add	r2, r3
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	3304      	adds	r3, #4
 8005dc0:	4619      	mov	r1, r3
 8005dc2:	4610      	mov	r0, r2
 8005dc4:	f7fe fddb 	bl	800497e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005dc8:	f001 fc24 	bl	8007614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005dcc:	4b0d      	ldr	r3, [pc, #52]	; (8005e04 <prvAddNewTaskToReadyList+0xcc>)
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00e      	beq.n	8005df2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005dd4:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <prvAddNewTaskToReadyList+0xc8>)
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dde:	429a      	cmp	r2, r3
 8005de0:	d207      	bcs.n	8005df2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005de2:	4b0c      	ldr	r3, [pc, #48]	; (8005e14 <prvAddNewTaskToReadyList+0xdc>)
 8005de4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	f3bf 8f4f 	dsb	sy
 8005dee:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005df2:	bf00      	nop
 8005df4:	3708      	adds	r7, #8
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	20000e40 	.word	0x20000e40
 8005e00:	2000096c 	.word	0x2000096c
 8005e04:	20000e4c 	.word	0x20000e4c
 8005e08:	20000e5c 	.word	0x20000e5c
 8005e0c:	20000e48 	.word	0x20000e48
 8005e10:	20000970 	.word	0x20000970
 8005e14:	e000ed04 	.word	0xe000ed04

08005e18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005e20:	2300      	movs	r3, #0
 8005e22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d017      	beq.n	8005e5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005e2a:	4b13      	ldr	r3, [pc, #76]	; (8005e78 <vTaskDelay+0x60>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <vTaskDelay+0x30>
	__asm volatile
 8005e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e36:	f383 8811 	msr	BASEPRI, r3
 8005e3a:	f3bf 8f6f 	isb	sy
 8005e3e:	f3bf 8f4f 	dsb	sy
 8005e42:	60bb      	str	r3, [r7, #8]
}
 8005e44:	bf00      	nop
 8005e46:	e7fe      	b.n	8005e46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005e48:	f000 f88a 	bl	8005f60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005e4c:	2100      	movs	r1, #0
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fdfc 	bl	8006a4c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005e54:	f000 f892 	bl	8005f7c <xTaskResumeAll>
 8005e58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d107      	bne.n	8005e70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005e60:	4b06      	ldr	r3, [pc, #24]	; (8005e7c <vTaskDelay+0x64>)
 8005e62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e66:	601a      	str	r2, [r3, #0]
 8005e68:	f3bf 8f4f 	dsb	sy
 8005e6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000e68 	.word	0x20000e68
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b08a      	sub	sp, #40	; 0x28
 8005e84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005e86:	2300      	movs	r3, #0
 8005e88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005e8e:	463a      	mov	r2, r7
 8005e90:	1d39      	adds	r1, r7, #4
 8005e92:	f107 0308 	add.w	r3, r7, #8
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe fd10 	bl	80048bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005e9c:	6839      	ldr	r1, [r7, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	68ba      	ldr	r2, [r7, #8]
 8005ea2:	9202      	str	r2, [sp, #8]
 8005ea4:	9301      	str	r3, [sp, #4]
 8005ea6:	2300      	movs	r3, #0
 8005ea8:	9300      	str	r3, [sp, #0]
 8005eaa:	2300      	movs	r3, #0
 8005eac:	460a      	mov	r2, r1
 8005eae:	4924      	ldr	r1, [pc, #144]	; (8005f40 <vTaskStartScheduler+0xc0>)
 8005eb0:	4824      	ldr	r0, [pc, #144]	; (8005f44 <vTaskStartScheduler+0xc4>)
 8005eb2:	f7ff fdf9 	bl	8005aa8 <xTaskCreateStatic>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	4a23      	ldr	r2, [pc, #140]	; (8005f48 <vTaskStartScheduler+0xc8>)
 8005eba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ebc:	4b22      	ldr	r3, [pc, #136]	; (8005f48 <vTaskStartScheduler+0xc8>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d002      	beq.n	8005eca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	617b      	str	r3, [r7, #20]
 8005ec8:	e001      	b.n	8005ece <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d102      	bne.n	8005eda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ed4:	f000 fe0e 	bl	8006af4 <xTimerCreateTimerTask>
 8005ed8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	2b01      	cmp	r3, #1
 8005ede:	d11b      	bne.n	8005f18 <vTaskStartScheduler+0x98>
	__asm volatile
 8005ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee4:	f383 8811 	msr	BASEPRI, r3
 8005ee8:	f3bf 8f6f 	isb	sy
 8005eec:	f3bf 8f4f 	dsb	sy
 8005ef0:	613b      	str	r3, [r7, #16]
}
 8005ef2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005ef4:	4b15      	ldr	r3, [pc, #84]	; (8005f4c <vTaskStartScheduler+0xcc>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3354      	adds	r3, #84	; 0x54
 8005efa:	4a15      	ldr	r2, [pc, #84]	; (8005f50 <vTaskStartScheduler+0xd0>)
 8005efc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005efe:	4b15      	ldr	r3, [pc, #84]	; (8005f54 <vTaskStartScheduler+0xd4>)
 8005f00:	f04f 32ff 	mov.w	r2, #4294967295
 8005f04:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f06:	4b14      	ldr	r3, [pc, #80]	; (8005f58 <vTaskStartScheduler+0xd8>)
 8005f08:	2201      	movs	r2, #1
 8005f0a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f0c:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <vTaskStartScheduler+0xdc>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f12:	f001 faad 	bl	8007470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f16:	e00e      	b.n	8005f36 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f1e:	d10a      	bne.n	8005f36 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f24:	f383 8811 	msr	BASEPRI, r3
 8005f28:	f3bf 8f6f 	isb	sy
 8005f2c:	f3bf 8f4f 	dsb	sy
 8005f30:	60fb      	str	r3, [r7, #12]
}
 8005f32:	bf00      	nop
 8005f34:	e7fe      	b.n	8005f34 <vTaskStartScheduler+0xb4>
}
 8005f36:	bf00      	nop
 8005f38:	3718      	adds	r7, #24
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}
 8005f3e:	bf00      	nop
 8005f40:	08008bd0 	.word	0x08008bd0
 8005f44:	08006585 	.word	0x08006585
 8005f48:	20000e64 	.word	0x20000e64
 8005f4c:	2000096c 	.word	0x2000096c
 8005f50:	2000006c 	.word	0x2000006c
 8005f54:	20000e60 	.word	0x20000e60
 8005f58:	20000e4c 	.word	0x20000e4c
 8005f5c:	20000e44 	.word	0x20000e44

08005f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005f60:	b480      	push	{r7}
 8005f62:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005f64:	4b04      	ldr	r3, [pc, #16]	; (8005f78 <vTaskSuspendAll+0x18>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	4a03      	ldr	r2, [pc, #12]	; (8005f78 <vTaskSuspendAll+0x18>)
 8005f6c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005f6e:	bf00      	nop
 8005f70:	46bd      	mov	sp, r7
 8005f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f76:	4770      	bx	lr
 8005f78:	20000e68 	.word	0x20000e68

08005f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	b084      	sub	sp, #16
 8005f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005f82:	2300      	movs	r3, #0
 8005f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005f8a:	4b42      	ldr	r3, [pc, #264]	; (8006094 <xTaskResumeAll+0x118>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10a      	bne.n	8005fa8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	603b      	str	r3, [r7, #0]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fa8:	f001 fb04 	bl	80075b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fac:	4b39      	ldr	r3, [pc, #228]	; (8006094 <xTaskResumeAll+0x118>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	4a38      	ldr	r2, [pc, #224]	; (8006094 <xTaskResumeAll+0x118>)
 8005fb4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fb6:	4b37      	ldr	r3, [pc, #220]	; (8006094 <xTaskResumeAll+0x118>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d162      	bne.n	8006084 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005fbe:	4b36      	ldr	r3, [pc, #216]	; (8006098 <xTaskResumeAll+0x11c>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d05e      	beq.n	8006084 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005fc6:	e02f      	b.n	8006028 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fc8:	4b34      	ldr	r3, [pc, #208]	; (800609c <xTaskResumeAll+0x120>)
 8005fca:	68db      	ldr	r3, [r3, #12]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	3318      	adds	r3, #24
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f7fe fd2f 	bl	8004a38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	3304      	adds	r3, #4
 8005fde:	4618      	mov	r0, r3
 8005fe0:	f7fe fd2a 	bl	8004a38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe8:	4b2d      	ldr	r3, [pc, #180]	; (80060a0 <xTaskResumeAll+0x124>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	429a      	cmp	r2, r3
 8005fee:	d903      	bls.n	8005ff8 <xTaskResumeAll+0x7c>
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ff4:	4a2a      	ldr	r2, [pc, #168]	; (80060a0 <xTaskResumeAll+0x124>)
 8005ff6:	6013      	str	r3, [r2, #0]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4a27      	ldr	r2, [pc, #156]	; (80060a4 <xTaskResumeAll+0x128>)
 8006006:	441a      	add	r2, r3
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	3304      	adds	r3, #4
 800600c:	4619      	mov	r1, r3
 800600e:	4610      	mov	r0, r2
 8006010:	f7fe fcb5 	bl	800497e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006018:	4b23      	ldr	r3, [pc, #140]	; (80060a8 <xTaskResumeAll+0x12c>)
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800601e:	429a      	cmp	r2, r3
 8006020:	d302      	bcc.n	8006028 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006022:	4b22      	ldr	r3, [pc, #136]	; (80060ac <xTaskResumeAll+0x130>)
 8006024:	2201      	movs	r2, #1
 8006026:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006028:	4b1c      	ldr	r3, [pc, #112]	; (800609c <xTaskResumeAll+0x120>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	2b00      	cmp	r3, #0
 800602e:	d1cb      	bne.n	8005fc8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2b00      	cmp	r3, #0
 8006034:	d001      	beq.n	800603a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006036:	f000 fb5f 	bl	80066f8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800603a:	4b1d      	ldr	r3, [pc, #116]	; (80060b0 <xTaskResumeAll+0x134>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d010      	beq.n	8006068 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006046:	f000 f847 	bl	80060d8 <xTaskIncrementTick>
 800604a:	4603      	mov	r3, r0
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006050:	4b16      	ldr	r3, [pc, #88]	; (80060ac <xTaskResumeAll+0x130>)
 8006052:	2201      	movs	r2, #1
 8006054:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	3b01      	subs	r3, #1
 800605a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d1f1      	bne.n	8006046 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006062:	4b13      	ldr	r3, [pc, #76]	; (80060b0 <xTaskResumeAll+0x134>)
 8006064:	2200      	movs	r2, #0
 8006066:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006068:	4b10      	ldr	r3, [pc, #64]	; (80060ac <xTaskResumeAll+0x130>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d009      	beq.n	8006084 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006070:	2301      	movs	r3, #1
 8006072:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006074:	4b0f      	ldr	r3, [pc, #60]	; (80060b4 <xTaskResumeAll+0x138>)
 8006076:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006084:	f001 fac6 	bl	8007614 <vPortExitCritical>

	return xAlreadyYielded;
 8006088:	68bb      	ldr	r3, [r7, #8]
}
 800608a:	4618      	mov	r0, r3
 800608c:	3710      	adds	r7, #16
 800608e:	46bd      	mov	sp, r7
 8006090:	bd80      	pop	{r7, pc}
 8006092:	bf00      	nop
 8006094:	20000e68 	.word	0x20000e68
 8006098:	20000e40 	.word	0x20000e40
 800609c:	20000e00 	.word	0x20000e00
 80060a0:	20000e48 	.word	0x20000e48
 80060a4:	20000970 	.word	0x20000970
 80060a8:	2000096c 	.word	0x2000096c
 80060ac:	20000e54 	.word	0x20000e54
 80060b0:	20000e50 	.word	0x20000e50
 80060b4:	e000ed04 	.word	0xe000ed04

080060b8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060be:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <xTaskGetTickCount+0x1c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060c4:	687b      	ldr	r3, [r7, #4]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	370c      	adds	r7, #12
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	20000e44 	.word	0x20000e44

080060d8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80060d8:	b580      	push	{r7, lr}
 80060da:	b086      	sub	sp, #24
 80060dc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80060de:	2300      	movs	r3, #0
 80060e0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80060e2:	4b4f      	ldr	r3, [pc, #316]	; (8006220 <xTaskIncrementTick+0x148>)
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	f040 808f 	bne.w	800620a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80060ec:	4b4d      	ldr	r3, [pc, #308]	; (8006224 <xTaskIncrementTick+0x14c>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80060f4:	4a4b      	ldr	r2, [pc, #300]	; (8006224 <xTaskIncrementTick+0x14c>)
 80060f6:	693b      	ldr	r3, [r7, #16]
 80060f8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d120      	bne.n	8006142 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006100:	4b49      	ldr	r3, [pc, #292]	; (8006228 <xTaskIncrementTick+0x150>)
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b00      	cmp	r3, #0
 8006108:	d00a      	beq.n	8006120 <xTaskIncrementTick+0x48>
	__asm volatile
 800610a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610e:	f383 8811 	msr	BASEPRI, r3
 8006112:	f3bf 8f6f 	isb	sy
 8006116:	f3bf 8f4f 	dsb	sy
 800611a:	603b      	str	r3, [r7, #0]
}
 800611c:	bf00      	nop
 800611e:	e7fe      	b.n	800611e <xTaskIncrementTick+0x46>
 8006120:	4b41      	ldr	r3, [pc, #260]	; (8006228 <xTaskIncrementTick+0x150>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	60fb      	str	r3, [r7, #12]
 8006126:	4b41      	ldr	r3, [pc, #260]	; (800622c <xTaskIncrementTick+0x154>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	4a3f      	ldr	r2, [pc, #252]	; (8006228 <xTaskIncrementTick+0x150>)
 800612c:	6013      	str	r3, [r2, #0]
 800612e:	4a3f      	ldr	r2, [pc, #252]	; (800622c <xTaskIncrementTick+0x154>)
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	6013      	str	r3, [r2, #0]
 8006134:	4b3e      	ldr	r3, [pc, #248]	; (8006230 <xTaskIncrementTick+0x158>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	4a3d      	ldr	r2, [pc, #244]	; (8006230 <xTaskIncrementTick+0x158>)
 800613c:	6013      	str	r3, [r2, #0]
 800613e:	f000 fadb 	bl	80066f8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006142:	4b3c      	ldr	r3, [pc, #240]	; (8006234 <xTaskIncrementTick+0x15c>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	693a      	ldr	r2, [r7, #16]
 8006148:	429a      	cmp	r2, r3
 800614a:	d349      	bcc.n	80061e0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800614c:	4b36      	ldr	r3, [pc, #216]	; (8006228 <xTaskIncrementTick+0x150>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d104      	bne.n	8006160 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006156:	4b37      	ldr	r3, [pc, #220]	; (8006234 <xTaskIncrementTick+0x15c>)
 8006158:	f04f 32ff 	mov.w	r2, #4294967295
 800615c:	601a      	str	r2, [r3, #0]
					break;
 800615e:	e03f      	b.n	80061e0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006160:	4b31      	ldr	r3, [pc, #196]	; (8006228 <xTaskIncrementTick+0x150>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	68db      	ldr	r3, [r3, #12]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006170:	693a      	ldr	r2, [r7, #16]
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d203      	bcs.n	8006180 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006178:	4a2e      	ldr	r2, [pc, #184]	; (8006234 <xTaskIncrementTick+0x15c>)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800617e:	e02f      	b.n	80061e0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	3304      	adds	r3, #4
 8006184:	4618      	mov	r0, r3
 8006186:	f7fe fc57 	bl	8004a38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	2b00      	cmp	r3, #0
 8006190:	d004      	beq.n	800619c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	3318      	adds	r3, #24
 8006196:	4618      	mov	r0, r3
 8006198:	f7fe fc4e 	bl	8004a38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	4b25      	ldr	r3, [pc, #148]	; (8006238 <xTaskIncrementTick+0x160>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	429a      	cmp	r2, r3
 80061a6:	d903      	bls.n	80061b0 <xTaskIncrementTick+0xd8>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ac:	4a22      	ldr	r2, [pc, #136]	; (8006238 <xTaskIncrementTick+0x160>)
 80061ae:	6013      	str	r3, [r2, #0]
 80061b0:	68bb      	ldr	r3, [r7, #8]
 80061b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b4:	4613      	mov	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	4413      	add	r3, r2
 80061ba:	009b      	lsls	r3, r3, #2
 80061bc:	4a1f      	ldr	r2, [pc, #124]	; (800623c <xTaskIncrementTick+0x164>)
 80061be:	441a      	add	r2, r3
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	3304      	adds	r3, #4
 80061c4:	4619      	mov	r1, r3
 80061c6:	4610      	mov	r0, r2
 80061c8:	f7fe fbd9 	bl	800497e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061d0:	4b1b      	ldr	r3, [pc, #108]	; (8006240 <xTaskIncrementTick+0x168>)
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d3b8      	bcc.n	800614c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80061da:	2301      	movs	r3, #1
 80061dc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061de:	e7b5      	b.n	800614c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061e0:	4b17      	ldr	r3, [pc, #92]	; (8006240 <xTaskIncrementTick+0x168>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e6:	4915      	ldr	r1, [pc, #84]	; (800623c <xTaskIncrementTick+0x164>)
 80061e8:	4613      	mov	r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	4413      	add	r3, r2
 80061ee:	009b      	lsls	r3, r3, #2
 80061f0:	440b      	add	r3, r1
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d901      	bls.n	80061fc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80061f8:	2301      	movs	r3, #1
 80061fa:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80061fc:	4b11      	ldr	r3, [pc, #68]	; (8006244 <xTaskIncrementTick+0x16c>)
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d007      	beq.n	8006214 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006204:	2301      	movs	r3, #1
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	e004      	b.n	8006214 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800620a:	4b0f      	ldr	r3, [pc, #60]	; (8006248 <xTaskIncrementTick+0x170>)
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3301      	adds	r3, #1
 8006210:	4a0d      	ldr	r2, [pc, #52]	; (8006248 <xTaskIncrementTick+0x170>)
 8006212:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006214:	697b      	ldr	r3, [r7, #20]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3718      	adds	r7, #24
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000e68 	.word	0x20000e68
 8006224:	20000e44 	.word	0x20000e44
 8006228:	20000df8 	.word	0x20000df8
 800622c:	20000dfc 	.word	0x20000dfc
 8006230:	20000e58 	.word	0x20000e58
 8006234:	20000e60 	.word	0x20000e60
 8006238:	20000e48 	.word	0x20000e48
 800623c:	20000970 	.word	0x20000970
 8006240:	2000096c 	.word	0x2000096c
 8006244:	20000e54 	.word	0x20000e54
 8006248:	20000e50 	.word	0x20000e50

0800624c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800624c:	b480      	push	{r7}
 800624e:	b085      	sub	sp, #20
 8006250:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006252:	4b2a      	ldr	r3, [pc, #168]	; (80062fc <vTaskSwitchContext+0xb0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d003      	beq.n	8006262 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800625a:	4b29      	ldr	r3, [pc, #164]	; (8006300 <vTaskSwitchContext+0xb4>)
 800625c:	2201      	movs	r2, #1
 800625e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006260:	e046      	b.n	80062f0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006262:	4b27      	ldr	r3, [pc, #156]	; (8006300 <vTaskSwitchContext+0xb4>)
 8006264:	2200      	movs	r2, #0
 8006266:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006268:	4b26      	ldr	r3, [pc, #152]	; (8006304 <vTaskSwitchContext+0xb8>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	60fb      	str	r3, [r7, #12]
 800626e:	e010      	b.n	8006292 <vTaskSwitchContext+0x46>
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2b00      	cmp	r3, #0
 8006274:	d10a      	bne.n	800628c <vTaskSwitchContext+0x40>
	__asm volatile
 8006276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800627a:	f383 8811 	msr	BASEPRI, r3
 800627e:	f3bf 8f6f 	isb	sy
 8006282:	f3bf 8f4f 	dsb	sy
 8006286:	607b      	str	r3, [r7, #4]
}
 8006288:	bf00      	nop
 800628a:	e7fe      	b.n	800628a <vTaskSwitchContext+0x3e>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	3b01      	subs	r3, #1
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	491d      	ldr	r1, [pc, #116]	; (8006308 <vTaskSwitchContext+0xbc>)
 8006294:	68fa      	ldr	r2, [r7, #12]
 8006296:	4613      	mov	r3, r2
 8006298:	009b      	lsls	r3, r3, #2
 800629a:	4413      	add	r3, r2
 800629c:	009b      	lsls	r3, r3, #2
 800629e:	440b      	add	r3, r1
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0e4      	beq.n	8006270 <vTaskSwitchContext+0x24>
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4613      	mov	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4a15      	ldr	r2, [pc, #84]	; (8006308 <vTaskSwitchContext+0xbc>)
 80062b2:	4413      	add	r3, r2
 80062b4:	60bb      	str	r3, [r7, #8]
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	68bb      	ldr	r3, [r7, #8]
 80062be:	605a      	str	r2, [r3, #4]
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	3308      	adds	r3, #8
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d104      	bne.n	80062d6 <vTaskSwitchContext+0x8a>
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	68bb      	ldr	r3, [r7, #8]
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	68db      	ldr	r3, [r3, #12]
 80062dc:	4a0b      	ldr	r2, [pc, #44]	; (800630c <vTaskSwitchContext+0xc0>)
 80062de:	6013      	str	r3, [r2, #0]
 80062e0:	4a08      	ldr	r2, [pc, #32]	; (8006304 <vTaskSwitchContext+0xb8>)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <vTaskSwitchContext+0xc0>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3354      	adds	r3, #84	; 0x54
 80062ec:	4a08      	ldr	r2, [pc, #32]	; (8006310 <vTaskSwitchContext+0xc4>)
 80062ee:	6013      	str	r3, [r2, #0]
}
 80062f0:	bf00      	nop
 80062f2:	3714      	adds	r7, #20
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr
 80062fc:	20000e68 	.word	0x20000e68
 8006300:	20000e54 	.word	0x20000e54
 8006304:	20000e48 	.word	0x20000e48
 8006308:	20000970 	.word	0x20000970
 800630c:	2000096c 	.word	0x2000096c
 8006310:	2000006c 	.word	0x2000006c

08006314 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b084      	sub	sp, #16
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d10a      	bne.n	800633a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006328:	f383 8811 	msr	BASEPRI, r3
 800632c:	f3bf 8f6f 	isb	sy
 8006330:	f3bf 8f4f 	dsb	sy
 8006334:	60fb      	str	r3, [r7, #12]
}
 8006336:	bf00      	nop
 8006338:	e7fe      	b.n	8006338 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800633a:	4b07      	ldr	r3, [pc, #28]	; (8006358 <vTaskPlaceOnEventList+0x44>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	3318      	adds	r3, #24
 8006340:	4619      	mov	r1, r3
 8006342:	6878      	ldr	r0, [r7, #4]
 8006344:	f7fe fb3f 	bl	80049c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006348:	2101      	movs	r1, #1
 800634a:	6838      	ldr	r0, [r7, #0]
 800634c:	f000 fb7e 	bl	8006a4c <prvAddCurrentTaskToDelayedList>
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	2000096c 	.word	0x2000096c

0800635c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800635c:	b580      	push	{r7, lr}
 800635e:	b086      	sub	sp, #24
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d10a      	bne.n	8006384 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800636e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006372:	f383 8811 	msr	BASEPRI, r3
 8006376:	f3bf 8f6f 	isb	sy
 800637a:	f3bf 8f4f 	dsb	sy
 800637e:	617b      	str	r3, [r7, #20]
}
 8006380:	bf00      	nop
 8006382:	e7fe      	b.n	8006382 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006384:	4b0a      	ldr	r3, [pc, #40]	; (80063b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	3318      	adds	r3, #24
 800638a:	4619      	mov	r1, r3
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f7fe faf6 	bl	800497e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d002      	beq.n	800639e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006398:	f04f 33ff 	mov.w	r3, #4294967295
 800639c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800639e:	6879      	ldr	r1, [r7, #4]
 80063a0:	68b8      	ldr	r0, [r7, #8]
 80063a2:	f000 fb53 	bl	8006a4c <prvAddCurrentTaskToDelayedList>
	}
 80063a6:	bf00      	nop
 80063a8:	3718      	adds	r7, #24
 80063aa:	46bd      	mov	sp, r7
 80063ac:	bd80      	pop	{r7, pc}
 80063ae:	bf00      	nop
 80063b0:	2000096c 	.word	0x2000096c

080063b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b086      	sub	sp, #24
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	68db      	ldr	r3, [r3, #12]
 80063c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80063c4:	693b      	ldr	r3, [r7, #16]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d10a      	bne.n	80063e0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80063ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ce:	f383 8811 	msr	BASEPRI, r3
 80063d2:	f3bf 8f6f 	isb	sy
 80063d6:	f3bf 8f4f 	dsb	sy
 80063da:	60fb      	str	r3, [r7, #12]
}
 80063dc:	bf00      	nop
 80063de:	e7fe      	b.n	80063de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	3318      	adds	r3, #24
 80063e4:	4618      	mov	r0, r3
 80063e6:	f7fe fb27 	bl	8004a38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063ea:	4b1e      	ldr	r3, [pc, #120]	; (8006464 <xTaskRemoveFromEventList+0xb0>)
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d11d      	bne.n	800642e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	3304      	adds	r3, #4
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fe fb1e 	bl	8004a38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063fc:	693b      	ldr	r3, [r7, #16]
 80063fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006400:	4b19      	ldr	r3, [pc, #100]	; (8006468 <xTaskRemoveFromEventList+0xb4>)
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	429a      	cmp	r2, r3
 8006406:	d903      	bls.n	8006410 <xTaskRemoveFromEventList+0x5c>
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800640c:	4a16      	ldr	r2, [pc, #88]	; (8006468 <xTaskRemoveFromEventList+0xb4>)
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	693b      	ldr	r3, [r7, #16]
 8006412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	4a13      	ldr	r2, [pc, #76]	; (800646c <xTaskRemoveFromEventList+0xb8>)
 800641e:	441a      	add	r2, r3
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	3304      	adds	r3, #4
 8006424:	4619      	mov	r1, r3
 8006426:	4610      	mov	r0, r2
 8006428:	f7fe faa9 	bl	800497e <vListInsertEnd>
 800642c:	e005      	b.n	800643a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	3318      	adds	r3, #24
 8006432:	4619      	mov	r1, r3
 8006434:	480e      	ldr	r0, [pc, #56]	; (8006470 <xTaskRemoveFromEventList+0xbc>)
 8006436:	f7fe faa2 	bl	800497e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800643e:	4b0d      	ldr	r3, [pc, #52]	; (8006474 <xTaskRemoveFromEventList+0xc0>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	429a      	cmp	r2, r3
 8006446:	d905      	bls.n	8006454 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006448:	2301      	movs	r3, #1
 800644a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800644c:	4b0a      	ldr	r3, [pc, #40]	; (8006478 <xTaskRemoveFromEventList+0xc4>)
 800644e:	2201      	movs	r2, #1
 8006450:	601a      	str	r2, [r3, #0]
 8006452:	e001      	b.n	8006458 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006454:	2300      	movs	r3, #0
 8006456:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006458:	697b      	ldr	r3, [r7, #20]
}
 800645a:	4618      	mov	r0, r3
 800645c:	3718      	adds	r7, #24
 800645e:	46bd      	mov	sp, r7
 8006460:	bd80      	pop	{r7, pc}
 8006462:	bf00      	nop
 8006464:	20000e68 	.word	0x20000e68
 8006468:	20000e48 	.word	0x20000e48
 800646c:	20000970 	.word	0x20000970
 8006470:	20000e00 	.word	0x20000e00
 8006474:	2000096c 	.word	0x2000096c
 8006478:	20000e54 	.word	0x20000e54

0800647c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800647c:	b480      	push	{r7}
 800647e:	b083      	sub	sp, #12
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006484:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <vTaskInternalSetTimeOutState+0x24>)
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800648c:	4b05      	ldr	r3, [pc, #20]	; (80064a4 <vTaskInternalSetTimeOutState+0x28>)
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	605a      	str	r2, [r3, #4]
}
 8006494:	bf00      	nop
 8006496:	370c      	adds	r7, #12
 8006498:	46bd      	mov	sp, r7
 800649a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649e:	4770      	bx	lr
 80064a0:	20000e58 	.word	0x20000e58
 80064a4:	20000e44 	.word	0x20000e44

080064a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b088      	sub	sp, #32
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	d10a      	bne.n	80064ce <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80064b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064bc:	f383 8811 	msr	BASEPRI, r3
 80064c0:	f3bf 8f6f 	isb	sy
 80064c4:	f3bf 8f4f 	dsb	sy
 80064c8:	613b      	str	r3, [r7, #16]
}
 80064ca:	bf00      	nop
 80064cc:	e7fe      	b.n	80064cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80064ce:	683b      	ldr	r3, [r7, #0]
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d10a      	bne.n	80064ea <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80064d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d8:	f383 8811 	msr	BASEPRI, r3
 80064dc:	f3bf 8f6f 	isb	sy
 80064e0:	f3bf 8f4f 	dsb	sy
 80064e4:	60fb      	str	r3, [r7, #12]
}
 80064e6:	bf00      	nop
 80064e8:	e7fe      	b.n	80064e8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80064ea:	f001 f863 	bl	80075b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80064ee:	4b1d      	ldr	r3, [pc, #116]	; (8006564 <xTaskCheckForTimeOut+0xbc>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	1ad3      	subs	r3, r2, r3
 80064fc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d102      	bne.n	800650e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006508:	2300      	movs	r3, #0
 800650a:	61fb      	str	r3, [r7, #28]
 800650c:	e023      	b.n	8006556 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681a      	ldr	r2, [r3, #0]
 8006512:	4b15      	ldr	r3, [pc, #84]	; (8006568 <xTaskCheckForTimeOut+0xc0>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	429a      	cmp	r2, r3
 8006518:	d007      	beq.n	800652a <xTaskCheckForTimeOut+0x82>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	69ba      	ldr	r2, [r7, #24]
 8006520:	429a      	cmp	r2, r3
 8006522:	d302      	bcc.n	800652a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006524:	2301      	movs	r3, #1
 8006526:	61fb      	str	r3, [r7, #28]
 8006528:	e015      	b.n	8006556 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	429a      	cmp	r2, r3
 8006532:	d20b      	bcs.n	800654c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681a      	ldr	r2, [r3, #0]
 8006538:	697b      	ldr	r3, [r7, #20]
 800653a:	1ad2      	subs	r2, r2, r3
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7ff ff9b 	bl	800647c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006546:	2300      	movs	r3, #0
 8006548:	61fb      	str	r3, [r7, #28]
 800654a:	e004      	b.n	8006556 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800654c:	683b      	ldr	r3, [r7, #0]
 800654e:	2200      	movs	r2, #0
 8006550:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006552:	2301      	movs	r3, #1
 8006554:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006556:	f001 f85d 	bl	8007614 <vPortExitCritical>

	return xReturn;
 800655a:	69fb      	ldr	r3, [r7, #28]
}
 800655c:	4618      	mov	r0, r3
 800655e:	3720      	adds	r7, #32
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000e44 	.word	0x20000e44
 8006568:	20000e58 	.word	0x20000e58

0800656c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800656c:	b480      	push	{r7}
 800656e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006570:	4b03      	ldr	r3, [pc, #12]	; (8006580 <vTaskMissedYield+0x14>)
 8006572:	2201      	movs	r2, #1
 8006574:	601a      	str	r2, [r3, #0]
}
 8006576:	bf00      	nop
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	20000e54 	.word	0x20000e54

08006584 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b082      	sub	sp, #8
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800658c:	f000 f852 	bl	8006634 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006590:	4b06      	ldr	r3, [pc, #24]	; (80065ac <prvIdleTask+0x28>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	2b01      	cmp	r3, #1
 8006596:	d9f9      	bls.n	800658c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006598:	4b05      	ldr	r3, [pc, #20]	; (80065b0 <prvIdleTask+0x2c>)
 800659a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800659e:	601a      	str	r2, [r3, #0]
 80065a0:	f3bf 8f4f 	dsb	sy
 80065a4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80065a8:	e7f0      	b.n	800658c <prvIdleTask+0x8>
 80065aa:	bf00      	nop
 80065ac:	20000970 	.word	0x20000970
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b082      	sub	sp, #8
 80065b8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065ba:	2300      	movs	r3, #0
 80065bc:	607b      	str	r3, [r7, #4]
 80065be:	e00c      	b.n	80065da <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	4613      	mov	r3, r2
 80065c4:	009b      	lsls	r3, r3, #2
 80065c6:	4413      	add	r3, r2
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	4a12      	ldr	r2, [pc, #72]	; (8006614 <prvInitialiseTaskLists+0x60>)
 80065cc:	4413      	add	r3, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f7fe f9a8 	bl	8004924 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	3301      	adds	r3, #1
 80065d8:	607b      	str	r3, [r7, #4]
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2b37      	cmp	r3, #55	; 0x37
 80065de:	d9ef      	bls.n	80065c0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80065e0:	480d      	ldr	r0, [pc, #52]	; (8006618 <prvInitialiseTaskLists+0x64>)
 80065e2:	f7fe f99f 	bl	8004924 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80065e6:	480d      	ldr	r0, [pc, #52]	; (800661c <prvInitialiseTaskLists+0x68>)
 80065e8:	f7fe f99c 	bl	8004924 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80065ec:	480c      	ldr	r0, [pc, #48]	; (8006620 <prvInitialiseTaskLists+0x6c>)
 80065ee:	f7fe f999 	bl	8004924 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80065f2:	480c      	ldr	r0, [pc, #48]	; (8006624 <prvInitialiseTaskLists+0x70>)
 80065f4:	f7fe f996 	bl	8004924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80065f8:	480b      	ldr	r0, [pc, #44]	; (8006628 <prvInitialiseTaskLists+0x74>)
 80065fa:	f7fe f993 	bl	8004924 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065fe:	4b0b      	ldr	r3, [pc, #44]	; (800662c <prvInitialiseTaskLists+0x78>)
 8006600:	4a05      	ldr	r2, [pc, #20]	; (8006618 <prvInitialiseTaskLists+0x64>)
 8006602:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006604:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <prvInitialiseTaskLists+0x7c>)
 8006606:	4a05      	ldr	r2, [pc, #20]	; (800661c <prvInitialiseTaskLists+0x68>)
 8006608:	601a      	str	r2, [r3, #0]
}
 800660a:	bf00      	nop
 800660c:	3708      	adds	r7, #8
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	20000970 	.word	0x20000970
 8006618:	20000dd0 	.word	0x20000dd0
 800661c:	20000de4 	.word	0x20000de4
 8006620:	20000e00 	.word	0x20000e00
 8006624:	20000e14 	.word	0x20000e14
 8006628:	20000e2c 	.word	0x20000e2c
 800662c:	20000df8 	.word	0x20000df8
 8006630:	20000dfc 	.word	0x20000dfc

08006634 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800663a:	e019      	b.n	8006670 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800663c:	f000 ffba 	bl	80075b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006640:	4b10      	ldr	r3, [pc, #64]	; (8006684 <prvCheckTasksWaitingTermination+0x50>)
 8006642:	68db      	ldr	r3, [r3, #12]
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	3304      	adds	r3, #4
 800664c:	4618      	mov	r0, r3
 800664e:	f7fe f9f3 	bl	8004a38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006652:	4b0d      	ldr	r3, [pc, #52]	; (8006688 <prvCheckTasksWaitingTermination+0x54>)
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	3b01      	subs	r3, #1
 8006658:	4a0b      	ldr	r2, [pc, #44]	; (8006688 <prvCheckTasksWaitingTermination+0x54>)
 800665a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800665c:	4b0b      	ldr	r3, [pc, #44]	; (800668c <prvCheckTasksWaitingTermination+0x58>)
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3b01      	subs	r3, #1
 8006662:	4a0a      	ldr	r2, [pc, #40]	; (800668c <prvCheckTasksWaitingTermination+0x58>)
 8006664:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006666:	f000 ffd5 	bl	8007614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 f810 	bl	8006690 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <prvCheckTasksWaitingTermination+0x58>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d1e1      	bne.n	800663c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006678:	bf00      	nop
 800667a:	bf00      	nop
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000e14 	.word	0x20000e14
 8006688:	20000e40 	.word	0x20000e40
 800668c:	20000e28 	.word	0x20000e28

08006690 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006690:	b580      	push	{r7, lr}
 8006692:	b084      	sub	sp, #16
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	3354      	adds	r3, #84	; 0x54
 800669c:	4618      	mov	r0, r3
 800669e:	f001 fbc5 	bl	8007e2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d108      	bne.n	80066be <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b0:	4618      	mov	r0, r3
 80066b2:	f001 f96d 	bl	8007990 <vPortFree>
				vPortFree( pxTCB );
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f001 f96a 	bl	8007990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80066bc:	e018      	b.n	80066f0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d103      	bne.n	80066d0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f001 f961 	bl	8007990 <vPortFree>
	}
 80066ce:	e00f      	b.n	80066f0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80066d6:	2b02      	cmp	r3, #2
 80066d8:	d00a      	beq.n	80066f0 <prvDeleteTCB+0x60>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	60fb      	str	r3, [r7, #12]
}
 80066ec:	bf00      	nop
 80066ee:	e7fe      	b.n	80066ee <prvDeleteTCB+0x5e>
	}
 80066f0:	bf00      	nop
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80066fe:	4b0c      	ldr	r3, [pc, #48]	; (8006730 <prvResetNextTaskUnblockTime+0x38>)
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d104      	bne.n	8006712 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006708:	4b0a      	ldr	r3, [pc, #40]	; (8006734 <prvResetNextTaskUnblockTime+0x3c>)
 800670a:	f04f 32ff 	mov.w	r2, #4294967295
 800670e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006710:	e008      	b.n	8006724 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006712:	4b07      	ldr	r3, [pc, #28]	; (8006730 <prvResetNextTaskUnblockTime+0x38>)
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	68db      	ldr	r3, [r3, #12]
 800671a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	4a04      	ldr	r2, [pc, #16]	; (8006734 <prvResetNextTaskUnblockTime+0x3c>)
 8006722:	6013      	str	r3, [r2, #0]
}
 8006724:	bf00      	nop
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	20000df8 	.word	0x20000df8
 8006734:	20000e60 	.word	0x20000e60

08006738 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006738:	b480      	push	{r7}
 800673a:	b083      	sub	sp, #12
 800673c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800673e:	4b0b      	ldr	r3, [pc, #44]	; (800676c <xTaskGetSchedulerState+0x34>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d102      	bne.n	800674c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006746:	2301      	movs	r3, #1
 8006748:	607b      	str	r3, [r7, #4]
 800674a:	e008      	b.n	800675e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800674c:	4b08      	ldr	r3, [pc, #32]	; (8006770 <xTaskGetSchedulerState+0x38>)
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d102      	bne.n	800675a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006754:	2302      	movs	r3, #2
 8006756:	607b      	str	r3, [r7, #4]
 8006758:	e001      	b.n	800675e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800675a:	2300      	movs	r3, #0
 800675c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800675e:	687b      	ldr	r3, [r7, #4]
	}
 8006760:	4618      	mov	r0, r3
 8006762:	370c      	adds	r7, #12
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	20000e4c 	.word	0x20000e4c
 8006770:	20000e68 	.word	0x20000e68

08006774 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006780:	2300      	movs	r3, #0
 8006782:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d051      	beq.n	800682e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800678e:	4b2a      	ldr	r3, [pc, #168]	; (8006838 <xTaskPriorityInherit+0xc4>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006794:	429a      	cmp	r2, r3
 8006796:	d241      	bcs.n	800681c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b00      	cmp	r3, #0
 800679e:	db06      	blt.n	80067ae <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80067a0:	4b25      	ldr	r3, [pc, #148]	; (8006838 <xTaskPriorityInherit+0xc4>)
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80067aa:	68bb      	ldr	r3, [r7, #8]
 80067ac:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	6959      	ldr	r1, [r3, #20]
 80067b2:	68bb      	ldr	r3, [r7, #8]
 80067b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067b6:	4613      	mov	r3, r2
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	4413      	add	r3, r2
 80067bc:	009b      	lsls	r3, r3, #2
 80067be:	4a1f      	ldr	r2, [pc, #124]	; (800683c <xTaskPriorityInherit+0xc8>)
 80067c0:	4413      	add	r3, r2
 80067c2:	4299      	cmp	r1, r3
 80067c4:	d122      	bne.n	800680c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067c6:	68bb      	ldr	r3, [r7, #8]
 80067c8:	3304      	adds	r3, #4
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7fe f934 	bl	8004a38 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80067d0:	4b19      	ldr	r3, [pc, #100]	; (8006838 <xTaskPriorityInherit+0xc4>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80067da:	68bb      	ldr	r3, [r7, #8]
 80067dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067de:	4b18      	ldr	r3, [pc, #96]	; (8006840 <xTaskPriorityInherit+0xcc>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d903      	bls.n	80067ee <xTaskPriorityInherit+0x7a>
 80067e6:	68bb      	ldr	r3, [r7, #8]
 80067e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067ea:	4a15      	ldr	r2, [pc, #84]	; (8006840 <xTaskPriorityInherit+0xcc>)
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	68bb      	ldr	r3, [r7, #8]
 80067f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067f2:	4613      	mov	r3, r2
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	009b      	lsls	r3, r3, #2
 80067fa:	4a10      	ldr	r2, [pc, #64]	; (800683c <xTaskPriorityInherit+0xc8>)
 80067fc:	441a      	add	r2, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	3304      	adds	r3, #4
 8006802:	4619      	mov	r1, r3
 8006804:	4610      	mov	r0, r2
 8006806:	f7fe f8ba 	bl	800497e <vListInsertEnd>
 800680a:	e004      	b.n	8006816 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800680c:	4b0a      	ldr	r3, [pc, #40]	; (8006838 <xTaskPriorityInherit+0xc4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006816:	2301      	movs	r3, #1
 8006818:	60fb      	str	r3, [r7, #12]
 800681a:	e008      	b.n	800682e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006820:	4b05      	ldr	r3, [pc, #20]	; (8006838 <xTaskPriorityInherit+0xc4>)
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006826:	429a      	cmp	r2, r3
 8006828:	d201      	bcs.n	800682e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800682a:	2301      	movs	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800682e:	68fb      	ldr	r3, [r7, #12]
	}
 8006830:	4618      	mov	r0, r3
 8006832:	3710      	adds	r7, #16
 8006834:	46bd      	mov	sp, r7
 8006836:	bd80      	pop	{r7, pc}
 8006838:	2000096c 	.word	0x2000096c
 800683c:	20000970 	.word	0x20000970
 8006840:	20000e48 	.word	0x20000e48

08006844 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006850:	2300      	movs	r3, #0
 8006852:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d056      	beq.n	8006908 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800685a:	4b2e      	ldr	r3, [pc, #184]	; (8006914 <xTaskPriorityDisinherit+0xd0>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	693a      	ldr	r2, [r7, #16]
 8006860:	429a      	cmp	r2, r3
 8006862:	d00a      	beq.n	800687a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	60fb      	str	r3, [r7, #12]
}
 8006876:	bf00      	nop
 8006878:	e7fe      	b.n	8006878 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	60bb      	str	r3, [r7, #8]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800689c:	1e5a      	subs	r2, r3, #1
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80068a2:	693b      	ldr	r3, [r7, #16]
 80068a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068a6:	693b      	ldr	r3, [r7, #16]
 80068a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068aa:	429a      	cmp	r2, r3
 80068ac:	d02c      	beq.n	8006908 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d128      	bne.n	8006908 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80068b6:	693b      	ldr	r3, [r7, #16]
 80068b8:	3304      	adds	r3, #4
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7fe f8bc 	bl	8004a38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80068c0:	693b      	ldr	r3, [r7, #16]
 80068c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80068c8:	693b      	ldr	r3, [r7, #16]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80068d0:	693b      	ldr	r3, [r7, #16]
 80068d2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068d8:	4b0f      	ldr	r3, [pc, #60]	; (8006918 <xTaskPriorityDisinherit+0xd4>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	429a      	cmp	r2, r3
 80068de:	d903      	bls.n	80068e8 <xTaskPriorityDisinherit+0xa4>
 80068e0:	693b      	ldr	r3, [r7, #16]
 80068e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068e4:	4a0c      	ldr	r2, [pc, #48]	; (8006918 <xTaskPriorityDisinherit+0xd4>)
 80068e6:	6013      	str	r3, [r2, #0]
 80068e8:	693b      	ldr	r3, [r7, #16]
 80068ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068ec:	4613      	mov	r3, r2
 80068ee:	009b      	lsls	r3, r3, #2
 80068f0:	4413      	add	r3, r2
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	4a09      	ldr	r2, [pc, #36]	; (800691c <xTaskPriorityDisinherit+0xd8>)
 80068f6:	441a      	add	r2, r3
 80068f8:	693b      	ldr	r3, [r7, #16]
 80068fa:	3304      	adds	r3, #4
 80068fc:	4619      	mov	r1, r3
 80068fe:	4610      	mov	r0, r2
 8006900:	f7fe f83d 	bl	800497e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006904:	2301      	movs	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006908:	697b      	ldr	r3, [r7, #20]
	}
 800690a:	4618      	mov	r0, r3
 800690c:	3718      	adds	r7, #24
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}
 8006912:	bf00      	nop
 8006914:	2000096c 	.word	0x2000096c
 8006918:	20000e48 	.word	0x20000e48
 800691c:	20000970 	.word	0x20000970

08006920 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006920:	b580      	push	{r7, lr}
 8006922:	b088      	sub	sp, #32
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
 8006928:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800692e:	2301      	movs	r3, #1
 8006930:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d06a      	beq.n	8006a0e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800693c:	2b00      	cmp	r3, #0
 800693e:	d10a      	bne.n	8006956 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006940:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006944:	f383 8811 	msr	BASEPRI, r3
 8006948:	f3bf 8f6f 	isb	sy
 800694c:	f3bf 8f4f 	dsb	sy
 8006950:	60fb      	str	r3, [r7, #12]
}
 8006952:	bf00      	nop
 8006954:	e7fe      	b.n	8006954 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	429a      	cmp	r2, r3
 800695e:	d902      	bls.n	8006966 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006960:	683b      	ldr	r3, [r7, #0]
 8006962:	61fb      	str	r3, [r7, #28]
 8006964:	e002      	b.n	800696c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006966:	69bb      	ldr	r3, [r7, #24]
 8006968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800696a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006970:	69fa      	ldr	r2, [r7, #28]
 8006972:	429a      	cmp	r2, r3
 8006974:	d04b      	beq.n	8006a0e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800697a:	697a      	ldr	r2, [r7, #20]
 800697c:	429a      	cmp	r2, r3
 800697e:	d146      	bne.n	8006a0e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006980:	4b25      	ldr	r3, [pc, #148]	; (8006a18 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	69ba      	ldr	r2, [r7, #24]
 8006986:	429a      	cmp	r2, r3
 8006988:	d10a      	bne.n	80069a0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	60bb      	str	r3, [r7, #8]
}
 800699c:	bf00      	nop
 800699e:	e7fe      	b.n	800699e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80069a0:	69bb      	ldr	r3, [r7, #24]
 80069a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069a4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80069a6:	69bb      	ldr	r3, [r7, #24]
 80069a8:	69fa      	ldr	r2, [r7, #28]
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80069ac:	69bb      	ldr	r3, [r7, #24]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	db04      	blt.n	80069be <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80069b4:	69fb      	ldr	r3, [r7, #28]
 80069b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80069ba:	69bb      	ldr	r3, [r7, #24]
 80069bc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80069be:	69bb      	ldr	r3, [r7, #24]
 80069c0:	6959      	ldr	r1, [r3, #20]
 80069c2:	693a      	ldr	r2, [r7, #16]
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4a13      	ldr	r2, [pc, #76]	; (8006a1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80069ce:	4413      	add	r3, r2
 80069d0:	4299      	cmp	r1, r3
 80069d2:	d11c      	bne.n	8006a0e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d4:	69bb      	ldr	r3, [r7, #24]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4618      	mov	r0, r3
 80069da:	f7fe f82d 	bl	8004a38 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80069de:	69bb      	ldr	r3, [r7, #24]
 80069e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e2:	4b0f      	ldr	r3, [pc, #60]	; (8006a20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d903      	bls.n	80069f2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069ee:	4a0c      	ldr	r2, [pc, #48]	; (8006a20 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80069f0:	6013      	str	r3, [r2, #0]
 80069f2:	69bb      	ldr	r3, [r7, #24]
 80069f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069f6:	4613      	mov	r3, r2
 80069f8:	009b      	lsls	r3, r3, #2
 80069fa:	4413      	add	r3, r2
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	4a07      	ldr	r2, [pc, #28]	; (8006a1c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006a00:	441a      	add	r2, r3
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	3304      	adds	r3, #4
 8006a06:	4619      	mov	r1, r3
 8006a08:	4610      	mov	r0, r2
 8006a0a:	f7fd ffb8 	bl	800497e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006a0e:	bf00      	nop
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}
 8006a16:	bf00      	nop
 8006a18:	2000096c 	.word	0x2000096c
 8006a1c:	20000970 	.word	0x20000970
 8006a20:	20000e48 	.word	0x20000e48

08006a24 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006a24:	b480      	push	{r7}
 8006a26:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006a28:	4b07      	ldr	r3, [pc, #28]	; (8006a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d004      	beq.n	8006a3a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006a30:	4b05      	ldr	r3, [pc, #20]	; (8006a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006a36:	3201      	adds	r2, #1
 8006a38:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006a3a:	4b03      	ldr	r3, [pc, #12]	; (8006a48 <pvTaskIncrementMutexHeldCount+0x24>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
	}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr
 8006a48:	2000096c 	.word	0x2000096c

08006a4c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a4c:	b580      	push	{r7, lr}
 8006a4e:	b084      	sub	sp, #16
 8006a50:	af00      	add	r7, sp, #0
 8006a52:	6078      	str	r0, [r7, #4]
 8006a54:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a56:	4b21      	ldr	r3, [pc, #132]	; (8006adc <prvAddCurrentTaskToDelayedList+0x90>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a5c:	4b20      	ldr	r3, [pc, #128]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	3304      	adds	r3, #4
 8006a62:	4618      	mov	r0, r3
 8006a64:	f7fd ffe8 	bl	8004a38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a6e:	d10a      	bne.n	8006a86 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d007      	beq.n	8006a86 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a76:	4b1a      	ldr	r3, [pc, #104]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	3304      	adds	r3, #4
 8006a7c:	4619      	mov	r1, r3
 8006a7e:	4819      	ldr	r0, [pc, #100]	; (8006ae4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a80:	f7fd ff7d 	bl	800497e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a84:	e026      	b.n	8006ad4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a86:	68fa      	ldr	r2, [r7, #12]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a8e:	4b14      	ldr	r3, [pc, #80]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a96:	68ba      	ldr	r2, [r7, #8]
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d209      	bcs.n	8006ab2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a9e:	4b12      	ldr	r3, [pc, #72]	; (8006ae8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006aa0:	681a      	ldr	r2, [r3, #0]
 8006aa2:	4b0f      	ldr	r3, [pc, #60]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3304      	adds	r3, #4
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4610      	mov	r0, r2
 8006aac:	f7fd ff8b 	bl	80049c6 <vListInsert>
}
 8006ab0:	e010      	b.n	8006ad4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ab2:	4b0e      	ldr	r3, [pc, #56]	; (8006aec <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4b0a      	ldr	r3, [pc, #40]	; (8006ae0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	3304      	adds	r3, #4
 8006abc:	4619      	mov	r1, r3
 8006abe:	4610      	mov	r0, r2
 8006ac0:	f7fd ff81 	bl	80049c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ac4:	4b0a      	ldr	r3, [pc, #40]	; (8006af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	68ba      	ldr	r2, [r7, #8]
 8006aca:	429a      	cmp	r2, r3
 8006acc:	d202      	bcs.n	8006ad4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ace:	4a08      	ldr	r2, [pc, #32]	; (8006af0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	6013      	str	r3, [r2, #0]
}
 8006ad4:	bf00      	nop
 8006ad6:	3710      	adds	r7, #16
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	20000e44 	.word	0x20000e44
 8006ae0:	2000096c 	.word	0x2000096c
 8006ae4:	20000e2c 	.word	0x20000e2c
 8006ae8:	20000dfc 	.word	0x20000dfc
 8006aec:	20000df8 	.word	0x20000df8
 8006af0:	20000e60 	.word	0x20000e60

08006af4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b08a      	sub	sp, #40	; 0x28
 8006af8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006afe:	f000 fba1 	bl	8007244 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b02:	4b1c      	ldr	r3, [pc, #112]	; (8006b74 <xTimerCreateTimerTask+0x80>)
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d021      	beq.n	8006b4e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b12:	1d3a      	adds	r2, r7, #4
 8006b14:	f107 0108 	add.w	r1, r7, #8
 8006b18:	f107 030c 	add.w	r3, r7, #12
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7fd fee7 	bl	80048f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b22:	6879      	ldr	r1, [r7, #4]
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	9202      	str	r2, [sp, #8]
 8006b2a:	9301      	str	r3, [sp, #4]
 8006b2c:	2302      	movs	r3, #2
 8006b2e:	9300      	str	r3, [sp, #0]
 8006b30:	2300      	movs	r3, #0
 8006b32:	460a      	mov	r2, r1
 8006b34:	4910      	ldr	r1, [pc, #64]	; (8006b78 <xTimerCreateTimerTask+0x84>)
 8006b36:	4811      	ldr	r0, [pc, #68]	; (8006b7c <xTimerCreateTimerTask+0x88>)
 8006b38:	f7fe ffb6 	bl	8005aa8 <xTaskCreateStatic>
 8006b3c:	4603      	mov	r3, r0
 8006b3e:	4a10      	ldr	r2, [pc, #64]	; (8006b80 <xTimerCreateTimerTask+0x8c>)
 8006b40:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b42:	4b0f      	ldr	r3, [pc, #60]	; (8006b80 <xTimerCreateTimerTask+0x8c>)
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d001      	beq.n	8006b4e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b4e:	697b      	ldr	r3, [r7, #20]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	613b      	str	r3, [r7, #16]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b6a:	697b      	ldr	r3, [r7, #20]
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3718      	adds	r7, #24
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000e9c 	.word	0x20000e9c
 8006b78:	08008bd8 	.word	0x08008bd8
 8006b7c:	08006ded 	.word	0x08006ded
 8006b80:	20000ea0 	.word	0x20000ea0

08006b84 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006b92:	202c      	movs	r0, #44	; 0x2c
 8006b94:	f000 fe30 	bl	80077f8 <pvPortMalloc>
 8006b98:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	2b00      	cmp	r3, #0
 8006b9e:	d00d      	beq.n	8006bbc <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006ba8:	697b      	ldr	r3, [r7, #20]
 8006baa:	9301      	str	r3, [sp, #4]
 8006bac:	6a3b      	ldr	r3, [r7, #32]
 8006bae:	9300      	str	r3, [sp, #0]
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	68b9      	ldr	r1, [r7, #8]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f843 	bl	8006c42 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006bbc:	697b      	ldr	r3, [r7, #20]
	}
 8006bbe:	4618      	mov	r0, r3
 8006bc0:	3718      	adds	r7, #24
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	bd80      	pop	{r7, pc}

08006bc6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006bc6:	b580      	push	{r7, lr}
 8006bc8:	b08a      	sub	sp, #40	; 0x28
 8006bca:	af02      	add	r7, sp, #8
 8006bcc:	60f8      	str	r0, [r7, #12]
 8006bce:	60b9      	str	r1, [r7, #8]
 8006bd0:	607a      	str	r2, [r7, #4]
 8006bd2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006bd4:	232c      	movs	r3, #44	; 0x2c
 8006bd6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006bd8:	693b      	ldr	r3, [r7, #16]
 8006bda:	2b2c      	cmp	r3, #44	; 0x2c
 8006bdc:	d00a      	beq.n	8006bf4 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be2:	f383 8811 	msr	BASEPRI, r3
 8006be6:	f3bf 8f6f 	isb	sy
 8006bea:	f3bf 8f4f 	dsb	sy
 8006bee:	61bb      	str	r3, [r7, #24]
}
 8006bf0:	bf00      	nop
 8006bf2:	e7fe      	b.n	8006bf2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006bf4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006bf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d10a      	bne.n	8006c12 <xTimerCreateStatic+0x4c>
	__asm volatile
 8006bfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c00:	f383 8811 	msr	BASEPRI, r3
 8006c04:	f3bf 8f6f 	isb	sy
 8006c08:	f3bf 8f4f 	dsb	sy
 8006c0c:	617b      	str	r3, [r7, #20]
}
 8006c0e:	bf00      	nop
 8006c10:	e7fe      	b.n	8006c10 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c14:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d00d      	beq.n	8006c38 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2202      	movs	r2, #2
 8006c20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006c24:	69fb      	ldr	r3, [r7, #28]
 8006c26:	9301      	str	r3, [sp, #4]
 8006c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c2a:	9300      	str	r3, [sp, #0]
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	68f8      	ldr	r0, [r7, #12]
 8006c34:	f000 f805 	bl	8006c42 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006c38:	69fb      	ldr	r3, [r7, #28]
	}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3720      	adds	r7, #32
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b086      	sub	sp, #24
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	60f8      	str	r0, [r7, #12]
 8006c4a:	60b9      	str	r1, [r7, #8]
 8006c4c:	607a      	str	r2, [r7, #4]
 8006c4e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d10a      	bne.n	8006c6c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c5a:	f383 8811 	msr	BASEPRI, r3
 8006c5e:	f3bf 8f6f 	isb	sy
 8006c62:	f3bf 8f4f 	dsb	sy
 8006c66:	617b      	str	r3, [r7, #20]
}
 8006c68:	bf00      	nop
 8006c6a:	e7fe      	b.n	8006c6a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d01e      	beq.n	8006cb0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006c72:	f000 fae7 	bl	8007244 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006c76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c78:	68fa      	ldr	r2, [r7, #12]
 8006c7a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c7e:	68ba      	ldr	r2, [r7, #8]
 8006c80:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c84:	683a      	ldr	r2, [r7, #0]
 8006c86:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	6a3a      	ldr	r2, [r7, #32]
 8006c8c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c90:	3304      	adds	r3, #4
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7fd fe66 	bl	8004964 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d008      	beq.n	8006cb0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ca4:	f043 0304 	orr.w	r3, r3, #4
 8006ca8:	b2da      	uxtb	r2, r3
 8006caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cac:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006cb0:	bf00      	nop
 8006cb2:	3718      	adds	r7, #24
 8006cb4:	46bd      	mov	sp, r7
 8006cb6:	bd80      	pop	{r7, pc}

08006cb8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b08a      	sub	sp, #40	; 0x28
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
 8006cc4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006cd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd4:	f383 8811 	msr	BASEPRI, r3
 8006cd8:	f3bf 8f6f 	isb	sy
 8006cdc:	f3bf 8f4f 	dsb	sy
 8006ce0:	623b      	str	r3, [r7, #32]
}
 8006ce2:	bf00      	nop
 8006ce4:	e7fe      	b.n	8006ce4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <xTimerGenericCommand+0x98>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d02a      	beq.n	8006d44 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	2b05      	cmp	r3, #5
 8006cfe:	dc18      	bgt.n	8006d32 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006d00:	f7ff fd1a 	bl	8006738 <xTaskGetSchedulerState>
 8006d04:	4603      	mov	r3, r0
 8006d06:	2b02      	cmp	r3, #2
 8006d08:	d109      	bne.n	8006d1e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006d0a:	4b11      	ldr	r3, [pc, #68]	; (8006d50 <xTimerGenericCommand+0x98>)
 8006d0c:	6818      	ldr	r0, [r3, #0]
 8006d0e:	f107 0110 	add.w	r1, r7, #16
 8006d12:	2300      	movs	r3, #0
 8006d14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d16:	f7fe f861 	bl	8004ddc <xQueueGenericSend>
 8006d1a:	6278      	str	r0, [r7, #36]	; 0x24
 8006d1c:	e012      	b.n	8006d44 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006d1e:	4b0c      	ldr	r3, [pc, #48]	; (8006d50 <xTimerGenericCommand+0x98>)
 8006d20:	6818      	ldr	r0, [r3, #0]
 8006d22:	f107 0110 	add.w	r1, r7, #16
 8006d26:	2300      	movs	r3, #0
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f7fe f857 	bl	8004ddc <xQueueGenericSend>
 8006d2e:	6278      	str	r0, [r7, #36]	; 0x24
 8006d30:	e008      	b.n	8006d44 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006d32:	4b07      	ldr	r3, [pc, #28]	; (8006d50 <xTimerGenericCommand+0x98>)
 8006d34:	6818      	ldr	r0, [r3, #0]
 8006d36:	f107 0110 	add.w	r1, r7, #16
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	683a      	ldr	r2, [r7, #0]
 8006d3e:	f7fe f94b 	bl	8004fd8 <xQueueGenericSendFromISR>
 8006d42:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006d44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3728      	adds	r7, #40	; 0x28
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}
 8006d4e:	bf00      	nop
 8006d50:	20000e9c 	.word	0x20000e9c

08006d54 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006d54:	b580      	push	{r7, lr}
 8006d56:	b088      	sub	sp, #32
 8006d58:	af02      	add	r7, sp, #8
 8006d5a:	6078      	str	r0, [r7, #4]
 8006d5c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d5e:	4b22      	ldr	r3, [pc, #136]	; (8006de8 <prvProcessExpiredTimer+0x94>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	68db      	ldr	r3, [r3, #12]
 8006d64:	68db      	ldr	r3, [r3, #12]
 8006d66:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	f7fd fe63 	bl	8004a38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d78:	f003 0304 	and.w	r3, r3, #4
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d022      	beq.n	8006dc6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	699a      	ldr	r2, [r3, #24]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	18d1      	adds	r1, r2, r3
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	683a      	ldr	r2, [r7, #0]
 8006d8c:	6978      	ldr	r0, [r7, #20]
 8006d8e:	f000 f8d1 	bl	8006f34 <prvInsertTimerInActiveList>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d01f      	beq.n	8006dd8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d98:	2300      	movs	r3, #0
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	687a      	ldr	r2, [r7, #4]
 8006da0:	2100      	movs	r1, #0
 8006da2:	6978      	ldr	r0, [r7, #20]
 8006da4:	f7ff ff88 	bl	8006cb8 <xTimerGenericCommand>
 8006da8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006daa:	693b      	ldr	r3, [r7, #16]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d113      	bne.n	8006dd8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006dc6:	697b      	ldr	r3, [r7, #20]
 8006dc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006dcc:	f023 0301 	bic.w	r3, r3, #1
 8006dd0:	b2da      	uxtb	r2, r3
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	6a1b      	ldr	r3, [r3, #32]
 8006ddc:	6978      	ldr	r0, [r7, #20]
 8006dde:	4798      	blx	r3
}
 8006de0:	bf00      	nop
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	20000e94 	.word	0x20000e94

08006dec <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006dec:	b580      	push	{r7, lr}
 8006dee:	b084      	sub	sp, #16
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006df4:	f107 0308 	add.w	r3, r7, #8
 8006df8:	4618      	mov	r0, r3
 8006dfa:	f000 f857 	bl	8006eac <prvGetNextExpireTime>
 8006dfe:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	4619      	mov	r1, r3
 8006e04:	68f8      	ldr	r0, [r7, #12]
 8006e06:	f000 f803 	bl	8006e10 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006e0a:	f000 f8d5 	bl	8006fb8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006e0e:	e7f1      	b.n	8006df4 <prvTimerTask+0x8>

08006e10 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006e1a:	f7ff f8a1 	bl	8005f60 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e1e:	f107 0308 	add.w	r3, r7, #8
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f866 	bl	8006ef4 <prvSampleTimeNow>
 8006e28:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d130      	bne.n	8006e92 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d10a      	bne.n	8006e4c <prvProcessTimerOrBlockTask+0x3c>
 8006e36:	687a      	ldr	r2, [r7, #4]
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d806      	bhi.n	8006e4c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006e3e:	f7ff f89d 	bl	8005f7c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006e42:	68f9      	ldr	r1, [r7, #12]
 8006e44:	6878      	ldr	r0, [r7, #4]
 8006e46:	f7ff ff85 	bl	8006d54 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006e4a:	e024      	b.n	8006e96 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006e4c:	683b      	ldr	r3, [r7, #0]
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d008      	beq.n	8006e64 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006e52:	4b13      	ldr	r3, [pc, #76]	; (8006ea0 <prvProcessTimerOrBlockTask+0x90>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d101      	bne.n	8006e60 <prvProcessTimerOrBlockTask+0x50>
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	e000      	b.n	8006e62 <prvProcessTimerOrBlockTask+0x52>
 8006e60:	2300      	movs	r3, #0
 8006e62:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e64:	4b0f      	ldr	r3, [pc, #60]	; (8006ea4 <prvProcessTimerOrBlockTask+0x94>)
 8006e66:	6818      	ldr	r0, [r3, #0]
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	1ad3      	subs	r3, r2, r3
 8006e6e:	683a      	ldr	r2, [r7, #0]
 8006e70:	4619      	mov	r1, r3
 8006e72:	f7fe fde5 	bl	8005a40 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e76:	f7ff f881 	bl	8005f7c <xTaskResumeAll>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e80:	4b09      	ldr	r3, [pc, #36]	; (8006ea8 <prvProcessTimerOrBlockTask+0x98>)
 8006e82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006e86:	601a      	str	r2, [r3, #0]
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	f3bf 8f6f 	isb	sy
}
 8006e90:	e001      	b.n	8006e96 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e92:	f7ff f873 	bl	8005f7c <xTaskResumeAll>
}
 8006e96:	bf00      	nop
 8006e98:	3710      	adds	r7, #16
 8006e9a:	46bd      	mov	sp, r7
 8006e9c:	bd80      	pop	{r7, pc}
 8006e9e:	bf00      	nop
 8006ea0:	20000e98 	.word	0x20000e98
 8006ea4:	20000e9c 	.word	0x20000e9c
 8006ea8:	e000ed04 	.word	0xe000ed04

08006eac <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006eb4:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <prvGetNextExpireTime+0x44>)
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d101      	bne.n	8006ec2 <prvGetNextExpireTime+0x16>
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	e000      	b.n	8006ec4 <prvGetNextExpireTime+0x18>
 8006ec2:	2200      	movs	r2, #0
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d105      	bne.n	8006edc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ed0:	4b07      	ldr	r3, [pc, #28]	; (8006ef0 <prvGetNextExpireTime+0x44>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	68db      	ldr	r3, [r3, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	60fb      	str	r3, [r7, #12]
 8006eda:	e001      	b.n	8006ee0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	20000e94 	.word	0x20000e94

08006ef4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006efc:	f7ff f8dc 	bl	80060b8 <xTaskGetTickCount>
 8006f00:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006f02:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <prvSampleTimeNow+0x3c>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d205      	bcs.n	8006f18 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006f0c:	f000 f936 	bl	800717c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	2201      	movs	r2, #1
 8006f14:	601a      	str	r2, [r3, #0]
 8006f16:	e002      	b.n	8006f1e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2200      	movs	r2, #0
 8006f1c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006f1e:	4a04      	ldr	r2, [pc, #16]	; (8006f30 <prvSampleTimeNow+0x3c>)
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006f24:	68fb      	ldr	r3, [r7, #12]
}
 8006f26:	4618      	mov	r0, r3
 8006f28:	3710      	adds	r7, #16
 8006f2a:	46bd      	mov	sp, r7
 8006f2c:	bd80      	pop	{r7, pc}
 8006f2e:	bf00      	nop
 8006f30:	20000ea4 	.word	0x20000ea4

08006f34 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006f34:	b580      	push	{r7, lr}
 8006f36:	b086      	sub	sp, #24
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	60b9      	str	r1, [r7, #8]
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006f42:	2300      	movs	r3, #0
 8006f44:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	68ba      	ldr	r2, [r7, #8]
 8006f4a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d812      	bhi.n	8006f80 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	683b      	ldr	r3, [r7, #0]
 8006f5e:	1ad2      	subs	r2, r2, r3
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	699b      	ldr	r3, [r3, #24]
 8006f64:	429a      	cmp	r2, r3
 8006f66:	d302      	bcc.n	8006f6e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	e01b      	b.n	8006fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f6e:	4b10      	ldr	r3, [pc, #64]	; (8006fb0 <prvInsertTimerInActiveList+0x7c>)
 8006f70:	681a      	ldr	r2, [r3, #0]
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	3304      	adds	r3, #4
 8006f76:	4619      	mov	r1, r3
 8006f78:	4610      	mov	r0, r2
 8006f7a:	f7fd fd24 	bl	80049c6 <vListInsert>
 8006f7e:	e012      	b.n	8006fa6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f80:	687a      	ldr	r2, [r7, #4]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	429a      	cmp	r2, r3
 8006f86:	d206      	bcs.n	8006f96 <prvInsertTimerInActiveList+0x62>
 8006f88:	68ba      	ldr	r2, [r7, #8]
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	d302      	bcc.n	8006f96 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f90:	2301      	movs	r3, #1
 8006f92:	617b      	str	r3, [r7, #20]
 8006f94:	e007      	b.n	8006fa6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f96:	4b07      	ldr	r3, [pc, #28]	; (8006fb4 <prvInsertTimerInActiveList+0x80>)
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	3304      	adds	r3, #4
 8006f9e:	4619      	mov	r1, r3
 8006fa0:	4610      	mov	r0, r2
 8006fa2:	f7fd fd10 	bl	80049c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006fa6:	697b      	ldr	r3, [r7, #20]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3718      	adds	r7, #24
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}
 8006fb0:	20000e98 	.word	0x20000e98
 8006fb4:	20000e94 	.word	0x20000e94

08006fb8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b08e      	sub	sp, #56	; 0x38
 8006fbc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006fbe:	e0ca      	b.n	8007156 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	da18      	bge.n	8006ff8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006fc6:	1d3b      	adds	r3, r7, #4
 8006fc8:	3304      	adds	r3, #4
 8006fca:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d10a      	bne.n	8006fe8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	61fb      	str	r3, [r7, #28]
}
 8006fe4:	bf00      	nop
 8006fe6:	e7fe      	b.n	8006fe6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fee:	6850      	ldr	r0, [r2, #4]
 8006ff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ff2:	6892      	ldr	r2, [r2, #8]
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	f2c0 80ab 	blt.w	8007156 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	695b      	ldr	r3, [r3, #20]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d004      	beq.n	8007016 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800700c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800700e:	3304      	adds	r3, #4
 8007010:	4618      	mov	r0, r3
 8007012:	f7fd fd11 	bl	8004a38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007016:	463b      	mov	r3, r7
 8007018:	4618      	mov	r0, r3
 800701a:	f7ff ff6b 	bl	8006ef4 <prvSampleTimeNow>
 800701e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2b09      	cmp	r3, #9
 8007024:	f200 8096 	bhi.w	8007154 <prvProcessReceivedCommands+0x19c>
 8007028:	a201      	add	r2, pc, #4	; (adr r2, 8007030 <prvProcessReceivedCommands+0x78>)
 800702a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800702e:	bf00      	nop
 8007030:	08007059 	.word	0x08007059
 8007034:	08007059 	.word	0x08007059
 8007038:	08007059 	.word	0x08007059
 800703c:	080070cd 	.word	0x080070cd
 8007040:	080070e1 	.word	0x080070e1
 8007044:	0800712b 	.word	0x0800712b
 8007048:	08007059 	.word	0x08007059
 800704c:	08007059 	.word	0x08007059
 8007050:	080070cd 	.word	0x080070cd
 8007054:	080070e1 	.word	0x080070e1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007058:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800705a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800705e:	f043 0301 	orr.w	r3, r3, #1
 8007062:	b2da      	uxtb	r2, r3
 8007064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007066:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800706a:	68ba      	ldr	r2, [r7, #8]
 800706c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	18d1      	adds	r1, r2, r3
 8007072:	68bb      	ldr	r3, [r7, #8]
 8007074:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007076:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007078:	f7ff ff5c 	bl	8006f34 <prvInsertTimerInActiveList>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d069      	beq.n	8007156 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007084:	6a1b      	ldr	r3, [r3, #32]
 8007086:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007088:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800708a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800708c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007090:	f003 0304 	and.w	r3, r3, #4
 8007094:	2b00      	cmp	r3, #0
 8007096:	d05e      	beq.n	8007156 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007098:	68ba      	ldr	r2, [r7, #8]
 800709a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709c:	699b      	ldr	r3, [r3, #24]
 800709e:	441a      	add	r2, r3
 80070a0:	2300      	movs	r3, #0
 80070a2:	9300      	str	r3, [sp, #0]
 80070a4:	2300      	movs	r3, #0
 80070a6:	2100      	movs	r1, #0
 80070a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80070aa:	f7ff fe05 	bl	8006cb8 <xTimerGenericCommand>
 80070ae:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80070b0:	6a3b      	ldr	r3, [r7, #32]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d14f      	bne.n	8007156 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80070b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070ba:	f383 8811 	msr	BASEPRI, r3
 80070be:	f3bf 8f6f 	isb	sy
 80070c2:	f3bf 8f4f 	dsb	sy
 80070c6:	61bb      	str	r3, [r7, #24]
}
 80070c8:	bf00      	nop
 80070ca:	e7fe      	b.n	80070ca <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070d2:	f023 0301 	bic.w	r3, r3, #1
 80070d6:	b2da      	uxtb	r2, r3
 80070d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80070de:	e03a      	b.n	8007156 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070e6:	f043 0301 	orr.w	r3, r3, #1
 80070ea:	b2da      	uxtb	r2, r3
 80070ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80070f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070fa:	699b      	ldr	r3, [r3, #24]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d10a      	bne.n	8007116 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007104:	f383 8811 	msr	BASEPRI, r3
 8007108:	f3bf 8f6f 	isb	sy
 800710c:	f3bf 8f4f 	dsb	sy
 8007110:	617b      	str	r3, [r7, #20]
}
 8007112:	bf00      	nop
 8007114:	e7fe      	b.n	8007114 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007118:	699a      	ldr	r2, [r3, #24]
 800711a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800711c:	18d1      	adds	r1, r2, r3
 800711e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007120:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007122:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007124:	f7ff ff06 	bl	8006f34 <prvInsertTimerInActiveList>
					break;
 8007128:	e015      	b.n	8007156 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800712a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007130:	f003 0302 	and.w	r3, r3, #2
 8007134:	2b00      	cmp	r3, #0
 8007136:	d103      	bne.n	8007140 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800713a:	f000 fc29 	bl	8007990 <vPortFree>
 800713e:	e00a      	b.n	8007156 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007146:	f023 0301 	bic.w	r3, r3, #1
 800714a:	b2da      	uxtb	r2, r3
 800714c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007152:	e000      	b.n	8007156 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007154:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007156:	4b08      	ldr	r3, [pc, #32]	; (8007178 <prvProcessReceivedCommands+0x1c0>)
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	1d39      	adds	r1, r7, #4
 800715c:	2200      	movs	r2, #0
 800715e:	4618      	mov	r0, r3
 8007160:	f7fe f862 	bl	8005228 <xQueueReceive>
 8007164:	4603      	mov	r3, r0
 8007166:	2b00      	cmp	r3, #0
 8007168:	f47f af2a 	bne.w	8006fc0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	3730      	adds	r7, #48	; 0x30
 8007172:	46bd      	mov	sp, r7
 8007174:	bd80      	pop	{r7, pc}
 8007176:	bf00      	nop
 8007178:	20000e9c 	.word	0x20000e9c

0800717c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007182:	e048      	b.n	8007216 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007184:	4b2d      	ldr	r3, [pc, #180]	; (800723c <prvSwitchTimerLists+0xc0>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	68db      	ldr	r3, [r3, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800718e:	4b2b      	ldr	r3, [pc, #172]	; (800723c <prvSwitchTimerLists+0xc0>)
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	68db      	ldr	r3, [r3, #12]
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	3304      	adds	r3, #4
 800719c:	4618      	mov	r0, r3
 800719e:	f7fd fc4b 	bl	8004a38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	6a1b      	ldr	r3, [r3, #32]
 80071a6:	68f8      	ldr	r0, [r7, #12]
 80071a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071b0:	f003 0304 	and.w	r3, r3, #4
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d02e      	beq.n	8007216 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	699b      	ldr	r3, [r3, #24]
 80071bc:	693a      	ldr	r2, [r7, #16]
 80071be:	4413      	add	r3, r2
 80071c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80071c2:	68ba      	ldr	r2, [r7, #8]
 80071c4:	693b      	ldr	r3, [r7, #16]
 80071c6:	429a      	cmp	r2, r3
 80071c8:	d90e      	bls.n	80071e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	68ba      	ldr	r2, [r7, #8]
 80071ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80071d6:	4b19      	ldr	r3, [pc, #100]	; (800723c <prvSwitchTimerLists+0xc0>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	3304      	adds	r3, #4
 80071de:	4619      	mov	r1, r3
 80071e0:	4610      	mov	r0, r2
 80071e2:	f7fd fbf0 	bl	80049c6 <vListInsert>
 80071e6:	e016      	b.n	8007216 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80071e8:	2300      	movs	r3, #0
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	2300      	movs	r3, #0
 80071ee:	693a      	ldr	r2, [r7, #16]
 80071f0:	2100      	movs	r1, #0
 80071f2:	68f8      	ldr	r0, [r7, #12]
 80071f4:	f7ff fd60 	bl	8006cb8 <xTimerGenericCommand>
 80071f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10a      	bne.n	8007216 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007204:	f383 8811 	msr	BASEPRI, r3
 8007208:	f3bf 8f6f 	isb	sy
 800720c:	f3bf 8f4f 	dsb	sy
 8007210:	603b      	str	r3, [r7, #0]
}
 8007212:	bf00      	nop
 8007214:	e7fe      	b.n	8007214 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007216:	4b09      	ldr	r3, [pc, #36]	; (800723c <prvSwitchTimerLists+0xc0>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1b1      	bne.n	8007184 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007220:	4b06      	ldr	r3, [pc, #24]	; (800723c <prvSwitchTimerLists+0xc0>)
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007226:	4b06      	ldr	r3, [pc, #24]	; (8007240 <prvSwitchTimerLists+0xc4>)
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	4a04      	ldr	r2, [pc, #16]	; (800723c <prvSwitchTimerLists+0xc0>)
 800722c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800722e:	4a04      	ldr	r2, [pc, #16]	; (8007240 <prvSwitchTimerLists+0xc4>)
 8007230:	697b      	ldr	r3, [r7, #20]
 8007232:	6013      	str	r3, [r2, #0]
}
 8007234:	bf00      	nop
 8007236:	3718      	adds	r7, #24
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}
 800723c:	20000e94 	.word	0x20000e94
 8007240:	20000e98 	.word	0x20000e98

08007244 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007244:	b580      	push	{r7, lr}
 8007246:	b082      	sub	sp, #8
 8007248:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800724a:	f000 f9b3 	bl	80075b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800724e:	4b15      	ldr	r3, [pc, #84]	; (80072a4 <prvCheckForValidListAndQueue+0x60>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d120      	bne.n	8007298 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007256:	4814      	ldr	r0, [pc, #80]	; (80072a8 <prvCheckForValidListAndQueue+0x64>)
 8007258:	f7fd fb64 	bl	8004924 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800725c:	4813      	ldr	r0, [pc, #76]	; (80072ac <prvCheckForValidListAndQueue+0x68>)
 800725e:	f7fd fb61 	bl	8004924 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007262:	4b13      	ldr	r3, [pc, #76]	; (80072b0 <prvCheckForValidListAndQueue+0x6c>)
 8007264:	4a10      	ldr	r2, [pc, #64]	; (80072a8 <prvCheckForValidListAndQueue+0x64>)
 8007266:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007268:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <prvCheckForValidListAndQueue+0x70>)
 800726a:	4a10      	ldr	r2, [pc, #64]	; (80072ac <prvCheckForValidListAndQueue+0x68>)
 800726c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800726e:	2300      	movs	r3, #0
 8007270:	9300      	str	r3, [sp, #0]
 8007272:	4b11      	ldr	r3, [pc, #68]	; (80072b8 <prvCheckForValidListAndQueue+0x74>)
 8007274:	4a11      	ldr	r2, [pc, #68]	; (80072bc <prvCheckForValidListAndQueue+0x78>)
 8007276:	2110      	movs	r1, #16
 8007278:	200a      	movs	r0, #10
 800727a:	f7fd fc6f 	bl	8004b5c <xQueueGenericCreateStatic>
 800727e:	4603      	mov	r3, r0
 8007280:	4a08      	ldr	r2, [pc, #32]	; (80072a4 <prvCheckForValidListAndQueue+0x60>)
 8007282:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007284:	4b07      	ldr	r3, [pc, #28]	; (80072a4 <prvCheckForValidListAndQueue+0x60>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d005      	beq.n	8007298 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800728c:	4b05      	ldr	r3, [pc, #20]	; (80072a4 <prvCheckForValidListAndQueue+0x60>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	490b      	ldr	r1, [pc, #44]	; (80072c0 <prvCheckForValidListAndQueue+0x7c>)
 8007292:	4618      	mov	r0, r3
 8007294:	f7fe fb80 	bl	8005998 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007298:	f000 f9bc 	bl	8007614 <vPortExitCritical>
}
 800729c:	bf00      	nop
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}
 80072a2:	bf00      	nop
 80072a4:	20000e9c 	.word	0x20000e9c
 80072a8:	20000e6c 	.word	0x20000e6c
 80072ac:	20000e80 	.word	0x20000e80
 80072b0:	20000e94 	.word	0x20000e94
 80072b4:	20000e98 	.word	0x20000e98
 80072b8:	20000f48 	.word	0x20000f48
 80072bc:	20000ea8 	.word	0x20000ea8
 80072c0:	08008be0 	.word	0x08008be0

080072c4 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b086      	sub	sp, #24
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d10a      	bne.n	80072ec <xTimerIsTimerActive+0x28>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	60fb      	str	r3, [r7, #12]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80072ec:	f000 f962 	bl	80075b4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80072f0:	693b      	ldr	r3, [r7, #16]
 80072f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80072f6:	f003 0301 	and.w	r3, r3, #1
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d102      	bne.n	8007304 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 80072fe:	2300      	movs	r3, #0
 8007300:	617b      	str	r3, [r7, #20]
 8007302:	e001      	b.n	8007308 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8007304:	2301      	movs	r3, #1
 8007306:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007308:	f000 f984 	bl	8007614 <vPortExitCritical>

	return xReturn;
 800730c:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800730e:	4618      	mov	r0, r3
 8007310:	3718      	adds	r7, #24
 8007312:	46bd      	mov	sp, r7
 8007314:	bd80      	pop	{r7, pc}

08007316 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007316:	b580      	push	{r7, lr}
 8007318:	b086      	sub	sp, #24
 800731a:	af00      	add	r7, sp, #0
 800731c:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	d10a      	bne.n	800733e <pvTimerGetTimerID+0x28>
	__asm volatile
 8007328:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732c:	f383 8811 	msr	BASEPRI, r3
 8007330:	f3bf 8f6f 	isb	sy
 8007334:	f3bf 8f4f 	dsb	sy
 8007338:	60fb      	str	r3, [r7, #12]
}
 800733a:	bf00      	nop
 800733c:	e7fe      	b.n	800733c <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800733e:	f000 f939 	bl	80075b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	69db      	ldr	r3, [r3, #28]
 8007346:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007348:	f000 f964 	bl	8007614 <vPortExitCritical>

	return pvReturn;
 800734c:	693b      	ldr	r3, [r7, #16]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3718      	adds	r7, #24
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007358:	b480      	push	{r7}
 800735a:	b085      	sub	sp, #20
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	3b04      	subs	r3, #4
 8007368:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007370:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3b04      	subs	r3, #4
 8007376:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f023 0201 	bic.w	r2, r3, #1
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	3b04      	subs	r3, #4
 8007386:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007388:	4a0c      	ldr	r2, [pc, #48]	; (80073bc <pxPortInitialiseStack+0x64>)
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3b14      	subs	r3, #20
 8007392:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007394:	687a      	ldr	r2, [r7, #4]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3b04      	subs	r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f06f 0202 	mvn.w	r2, #2
 80073a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	3b20      	subs	r3, #32
 80073ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073ae:	68fb      	ldr	r3, [r7, #12]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr
 80073bc:	080073c1 	.word	0x080073c1

080073c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073c6:	2300      	movs	r3, #0
 80073c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073ca:	4b12      	ldr	r3, [pc, #72]	; (8007414 <prvTaskExitError+0x54>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d2:	d00a      	beq.n	80073ea <prvTaskExitError+0x2a>
	__asm volatile
 80073d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073d8:	f383 8811 	msr	BASEPRI, r3
 80073dc:	f3bf 8f6f 	isb	sy
 80073e0:	f3bf 8f4f 	dsb	sy
 80073e4:	60fb      	str	r3, [r7, #12]
}
 80073e6:	bf00      	nop
 80073e8:	e7fe      	b.n	80073e8 <prvTaskExitError+0x28>
	__asm volatile
 80073ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073ee:	f383 8811 	msr	BASEPRI, r3
 80073f2:	f3bf 8f6f 	isb	sy
 80073f6:	f3bf 8f4f 	dsb	sy
 80073fa:	60bb      	str	r3, [r7, #8]
}
 80073fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80073fe:	bf00      	nop
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d0fc      	beq.n	8007400 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr
 8007414:	20000010 	.word	0x20000010
	...

08007420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007420:	4b07      	ldr	r3, [pc, #28]	; (8007440 <pxCurrentTCBConst2>)
 8007422:	6819      	ldr	r1, [r3, #0]
 8007424:	6808      	ldr	r0, [r1, #0]
 8007426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742a:	f380 8809 	msr	PSP, r0
 800742e:	f3bf 8f6f 	isb	sy
 8007432:	f04f 0000 	mov.w	r0, #0
 8007436:	f380 8811 	msr	BASEPRI, r0
 800743a:	4770      	bx	lr
 800743c:	f3af 8000 	nop.w

08007440 <pxCurrentTCBConst2>:
 8007440:	2000096c 	.word	0x2000096c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007444:	bf00      	nop
 8007446:	bf00      	nop

08007448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007448:	4808      	ldr	r0, [pc, #32]	; (800746c <prvPortStartFirstTask+0x24>)
 800744a:	6800      	ldr	r0, [r0, #0]
 800744c:	6800      	ldr	r0, [r0, #0]
 800744e:	f380 8808 	msr	MSP, r0
 8007452:	f04f 0000 	mov.w	r0, #0
 8007456:	f380 8814 	msr	CONTROL, r0
 800745a:	b662      	cpsie	i
 800745c:	b661      	cpsie	f
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	f3bf 8f6f 	isb	sy
 8007466:	df00      	svc	0
 8007468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800746a:	bf00      	nop
 800746c:	e000ed08 	.word	0xe000ed08

08007470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b086      	sub	sp, #24
 8007474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007476:	4b46      	ldr	r3, [pc, #280]	; (8007590 <xPortStartScheduler+0x120>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a46      	ldr	r2, [pc, #280]	; (8007594 <xPortStartScheduler+0x124>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d10a      	bne.n	8007496 <xPortStartScheduler+0x26>
	__asm volatile
 8007480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007484:	f383 8811 	msr	BASEPRI, r3
 8007488:	f3bf 8f6f 	isb	sy
 800748c:	f3bf 8f4f 	dsb	sy
 8007490:	613b      	str	r3, [r7, #16]
}
 8007492:	bf00      	nop
 8007494:	e7fe      	b.n	8007494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007496:	4b3e      	ldr	r3, [pc, #248]	; (8007590 <xPortStartScheduler+0x120>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a3f      	ldr	r2, [pc, #252]	; (8007598 <xPortStartScheduler+0x128>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d10a      	bne.n	80074b6 <xPortStartScheduler+0x46>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	60fb      	str	r3, [r7, #12]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074b6:	4b39      	ldr	r3, [pc, #228]	; (800759c <xPortStartScheduler+0x12c>)
 80074b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074ba:	697b      	ldr	r3, [r7, #20]
 80074bc:	781b      	ldrb	r3, [r3, #0]
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074c2:	697b      	ldr	r3, [r7, #20]
 80074c4:	22ff      	movs	r2, #255	; 0xff
 80074c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074c8:	697b      	ldr	r3, [r7, #20]
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	b2db      	uxtb	r3, r3
 80074ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	4b31      	ldr	r3, [pc, #196]	; (80075a0 <xPortStartScheduler+0x130>)
 80074dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074de:	4b31      	ldr	r3, [pc, #196]	; (80075a4 <xPortStartScheduler+0x134>)
 80074e0:	2207      	movs	r2, #7
 80074e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074e4:	e009      	b.n	80074fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80074e6:	4b2f      	ldr	r3, [pc, #188]	; (80075a4 <xPortStartScheduler+0x134>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	4a2d      	ldr	r2, [pc, #180]	; (80075a4 <xPortStartScheduler+0x134>)
 80074ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	005b      	lsls	r3, r3, #1
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80074fa:	78fb      	ldrb	r3, [r7, #3]
 80074fc:	b2db      	uxtb	r3, r3
 80074fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007502:	2b80      	cmp	r3, #128	; 0x80
 8007504:	d0ef      	beq.n	80074e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007506:	4b27      	ldr	r3, [pc, #156]	; (80075a4 <xPortStartScheduler+0x134>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f1c3 0307 	rsb	r3, r3, #7
 800750e:	2b04      	cmp	r3, #4
 8007510:	d00a      	beq.n	8007528 <xPortStartScheduler+0xb8>
	__asm volatile
 8007512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007516:	f383 8811 	msr	BASEPRI, r3
 800751a:	f3bf 8f6f 	isb	sy
 800751e:	f3bf 8f4f 	dsb	sy
 8007522:	60bb      	str	r3, [r7, #8]
}
 8007524:	bf00      	nop
 8007526:	e7fe      	b.n	8007526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007528:	4b1e      	ldr	r3, [pc, #120]	; (80075a4 <xPortStartScheduler+0x134>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	021b      	lsls	r3, r3, #8
 800752e:	4a1d      	ldr	r2, [pc, #116]	; (80075a4 <xPortStartScheduler+0x134>)
 8007530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007532:	4b1c      	ldr	r3, [pc, #112]	; (80075a4 <xPortStartScheduler+0x134>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800753a:	4a1a      	ldr	r2, [pc, #104]	; (80075a4 <xPortStartScheduler+0x134>)
 800753c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	b2da      	uxtb	r2, r3
 8007542:	697b      	ldr	r3, [r7, #20]
 8007544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007546:	4b18      	ldr	r3, [pc, #96]	; (80075a8 <xPortStartScheduler+0x138>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a17      	ldr	r2, [pc, #92]	; (80075a8 <xPortStartScheduler+0x138>)
 800754c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007552:	4b15      	ldr	r3, [pc, #84]	; (80075a8 <xPortStartScheduler+0x138>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4a14      	ldr	r2, [pc, #80]	; (80075a8 <xPortStartScheduler+0x138>)
 8007558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800755c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800755e:	f000 f8dd 	bl	800771c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007562:	4b12      	ldr	r3, [pc, #72]	; (80075ac <xPortStartScheduler+0x13c>)
 8007564:	2200      	movs	r2, #0
 8007566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007568:	f000 f8fc 	bl	8007764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800756c:	4b10      	ldr	r3, [pc, #64]	; (80075b0 <xPortStartScheduler+0x140>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	4a0f      	ldr	r2, [pc, #60]	; (80075b0 <xPortStartScheduler+0x140>)
 8007572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007578:	f7ff ff66 	bl	8007448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800757c:	f7fe fe66 	bl	800624c <vTaskSwitchContext>
	prvTaskExitError();
 8007580:	f7ff ff1e 	bl	80073c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007584:	2300      	movs	r3, #0
}
 8007586:	4618      	mov	r0, r3
 8007588:	3718      	adds	r7, #24
 800758a:	46bd      	mov	sp, r7
 800758c:	bd80      	pop	{r7, pc}
 800758e:	bf00      	nop
 8007590:	e000ed00 	.word	0xe000ed00
 8007594:	410fc271 	.word	0x410fc271
 8007598:	410fc270 	.word	0x410fc270
 800759c:	e000e400 	.word	0xe000e400
 80075a0:	20000f98 	.word	0x20000f98
 80075a4:	20000f9c 	.word	0x20000f9c
 80075a8:	e000ed20 	.word	0xe000ed20
 80075ac:	20000010 	.word	0x20000010
 80075b0:	e000ef34 	.word	0xe000ef34

080075b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
	__asm volatile
 80075ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075be:	f383 8811 	msr	BASEPRI, r3
 80075c2:	f3bf 8f6f 	isb	sy
 80075c6:	f3bf 8f4f 	dsb	sy
 80075ca:	607b      	str	r3, [r7, #4]
}
 80075cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075ce:	4b0f      	ldr	r3, [pc, #60]	; (800760c <vPortEnterCritical+0x58>)
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	3301      	adds	r3, #1
 80075d4:	4a0d      	ldr	r2, [pc, #52]	; (800760c <vPortEnterCritical+0x58>)
 80075d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075d8:	4b0c      	ldr	r3, [pc, #48]	; (800760c <vPortEnterCritical+0x58>)
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	2b01      	cmp	r3, #1
 80075de:	d10f      	bne.n	8007600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80075e0:	4b0b      	ldr	r3, [pc, #44]	; (8007610 <vPortEnterCritical+0x5c>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	b2db      	uxtb	r3, r3
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00a      	beq.n	8007600 <vPortEnterCritical+0x4c>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	f383 8811 	msr	BASEPRI, r3
 80075f2:	f3bf 8f6f 	isb	sy
 80075f6:	f3bf 8f4f 	dsb	sy
 80075fa:	603b      	str	r3, [r7, #0]
}
 80075fc:	bf00      	nop
 80075fe:	e7fe      	b.n	80075fe <vPortEnterCritical+0x4a>
	}
}
 8007600:	bf00      	nop
 8007602:	370c      	adds	r7, #12
 8007604:	46bd      	mov	sp, r7
 8007606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800760a:	4770      	bx	lr
 800760c:	20000010 	.word	0x20000010
 8007610:	e000ed04 	.word	0xe000ed04

08007614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007614:	b480      	push	{r7}
 8007616:	b083      	sub	sp, #12
 8007618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800761a:	4b12      	ldr	r3, [pc, #72]	; (8007664 <vPortExitCritical+0x50>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d10a      	bne.n	8007638 <vPortExitCritical+0x24>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	607b      	str	r3, [r7, #4]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007638:	4b0a      	ldr	r3, [pc, #40]	; (8007664 <vPortExitCritical+0x50>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	3b01      	subs	r3, #1
 800763e:	4a09      	ldr	r2, [pc, #36]	; (8007664 <vPortExitCritical+0x50>)
 8007640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007642:	4b08      	ldr	r3, [pc, #32]	; (8007664 <vPortExitCritical+0x50>)
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d105      	bne.n	8007656 <vPortExitCritical+0x42>
 800764a:	2300      	movs	r3, #0
 800764c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800764e:	683b      	ldr	r3, [r7, #0]
 8007650:	f383 8811 	msr	BASEPRI, r3
}
 8007654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007656:	bf00      	nop
 8007658:	370c      	adds	r7, #12
 800765a:	46bd      	mov	sp, r7
 800765c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007660:	4770      	bx	lr
 8007662:	bf00      	nop
 8007664:	20000010 	.word	0x20000010
	...

08007670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007670:	f3ef 8009 	mrs	r0, PSP
 8007674:	f3bf 8f6f 	isb	sy
 8007678:	4b15      	ldr	r3, [pc, #84]	; (80076d0 <pxCurrentTCBConst>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	f01e 0f10 	tst.w	lr, #16
 8007680:	bf08      	it	eq
 8007682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800768a:	6010      	str	r0, [r2, #0]
 800768c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007694:	f380 8811 	msr	BASEPRI, r0
 8007698:	f3bf 8f4f 	dsb	sy
 800769c:	f3bf 8f6f 	isb	sy
 80076a0:	f7fe fdd4 	bl	800624c <vTaskSwitchContext>
 80076a4:	f04f 0000 	mov.w	r0, #0
 80076a8:	f380 8811 	msr	BASEPRI, r0
 80076ac:	bc09      	pop	{r0, r3}
 80076ae:	6819      	ldr	r1, [r3, #0]
 80076b0:	6808      	ldr	r0, [r1, #0]
 80076b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076b6:	f01e 0f10 	tst.w	lr, #16
 80076ba:	bf08      	it	eq
 80076bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076c0:	f380 8809 	msr	PSP, r0
 80076c4:	f3bf 8f6f 	isb	sy
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	f3af 8000 	nop.w

080076d0 <pxCurrentTCBConst>:
 80076d0:	2000096c 	.word	0x2000096c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076d4:	bf00      	nop
 80076d6:	bf00      	nop

080076d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	b082      	sub	sp, #8
 80076dc:	af00      	add	r7, sp, #0
	__asm volatile
 80076de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076e2:	f383 8811 	msr	BASEPRI, r3
 80076e6:	f3bf 8f6f 	isb	sy
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	607b      	str	r3, [r7, #4]
}
 80076f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80076f2:	f7fe fcf1 	bl	80060d8 <xTaskIncrementTick>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d003      	beq.n	8007704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80076fc:	4b06      	ldr	r3, [pc, #24]	; (8007718 <xPortSysTickHandler+0x40>)
 80076fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007702:	601a      	str	r2, [r3, #0]
 8007704:	2300      	movs	r3, #0
 8007706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007708:	683b      	ldr	r3, [r7, #0]
 800770a:	f383 8811 	msr	BASEPRI, r3
}
 800770e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007710:	bf00      	nop
 8007712:	3708      	adds	r7, #8
 8007714:	46bd      	mov	sp, r7
 8007716:	bd80      	pop	{r7, pc}
 8007718:	e000ed04 	.word	0xe000ed04

0800771c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800771c:	b480      	push	{r7}
 800771e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007720:	4b0b      	ldr	r3, [pc, #44]	; (8007750 <vPortSetupTimerInterrupt+0x34>)
 8007722:	2200      	movs	r2, #0
 8007724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007726:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <vPortSetupTimerInterrupt+0x38>)
 8007728:	2200      	movs	r2, #0
 800772a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800772c:	4b0a      	ldr	r3, [pc, #40]	; (8007758 <vPortSetupTimerInterrupt+0x3c>)
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	4a0a      	ldr	r2, [pc, #40]	; (800775c <vPortSetupTimerInterrupt+0x40>)
 8007732:	fba2 2303 	umull	r2, r3, r2, r3
 8007736:	099b      	lsrs	r3, r3, #6
 8007738:	4a09      	ldr	r2, [pc, #36]	; (8007760 <vPortSetupTimerInterrupt+0x44>)
 800773a:	3b01      	subs	r3, #1
 800773c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800773e:	4b04      	ldr	r3, [pc, #16]	; (8007750 <vPortSetupTimerInterrupt+0x34>)
 8007740:	2207      	movs	r2, #7
 8007742:	601a      	str	r2, [r3, #0]
}
 8007744:	bf00      	nop
 8007746:	46bd      	mov	sp, r7
 8007748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774c:	4770      	bx	lr
 800774e:	bf00      	nop
 8007750:	e000e010 	.word	0xe000e010
 8007754:	e000e018 	.word	0xe000e018
 8007758:	20000004 	.word	0x20000004
 800775c:	10624dd3 	.word	0x10624dd3
 8007760:	e000e014 	.word	0xe000e014

08007764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007774 <vPortEnableVFP+0x10>
 8007768:	6801      	ldr	r1, [r0, #0]
 800776a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800776e:	6001      	str	r1, [r0, #0]
 8007770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007772:	bf00      	nop
 8007774:	e000ed88 	.word	0xe000ed88

08007778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007778:	b480      	push	{r7}
 800777a:	b085      	sub	sp, #20
 800777c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800777e:	f3ef 8305 	mrs	r3, IPSR
 8007782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	2b0f      	cmp	r3, #15
 8007788:	d914      	bls.n	80077b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800778a:	4a17      	ldr	r2, [pc, #92]	; (80077e8 <vPortValidateInterruptPriority+0x70>)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	4413      	add	r3, r2
 8007790:	781b      	ldrb	r3, [r3, #0]
 8007792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007794:	4b15      	ldr	r3, [pc, #84]	; (80077ec <vPortValidateInterruptPriority+0x74>)
 8007796:	781b      	ldrb	r3, [r3, #0]
 8007798:	7afa      	ldrb	r2, [r7, #11]
 800779a:	429a      	cmp	r2, r3
 800779c:	d20a      	bcs.n	80077b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800779e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077a2:	f383 8811 	msr	BASEPRI, r3
 80077a6:	f3bf 8f6f 	isb	sy
 80077aa:	f3bf 8f4f 	dsb	sy
 80077ae:	607b      	str	r3, [r7, #4]
}
 80077b0:	bf00      	nop
 80077b2:	e7fe      	b.n	80077b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077b4:	4b0e      	ldr	r3, [pc, #56]	; (80077f0 <vPortValidateInterruptPriority+0x78>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077bc:	4b0d      	ldr	r3, [pc, #52]	; (80077f4 <vPortValidateInterruptPriority+0x7c>)
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	429a      	cmp	r2, r3
 80077c2:	d90a      	bls.n	80077da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c8:	f383 8811 	msr	BASEPRI, r3
 80077cc:	f3bf 8f6f 	isb	sy
 80077d0:	f3bf 8f4f 	dsb	sy
 80077d4:	603b      	str	r3, [r7, #0]
}
 80077d6:	bf00      	nop
 80077d8:	e7fe      	b.n	80077d8 <vPortValidateInterruptPriority+0x60>
	}
 80077da:	bf00      	nop
 80077dc:	3714      	adds	r7, #20
 80077de:	46bd      	mov	sp, r7
 80077e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e4:	4770      	bx	lr
 80077e6:	bf00      	nop
 80077e8:	e000e3f0 	.word	0xe000e3f0
 80077ec:	20000f98 	.word	0x20000f98
 80077f0:	e000ed0c 	.word	0xe000ed0c
 80077f4:	20000f9c 	.word	0x20000f9c

080077f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b08a      	sub	sp, #40	; 0x28
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007800:	2300      	movs	r3, #0
 8007802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007804:	f7fe fbac 	bl	8005f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007808:	4b5b      	ldr	r3, [pc, #364]	; (8007978 <pvPortMalloc+0x180>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d101      	bne.n	8007814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007810:	f000 f920 	bl	8007a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007814:	4b59      	ldr	r3, [pc, #356]	; (800797c <pvPortMalloc+0x184>)
 8007816:	681a      	ldr	r2, [r3, #0]
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4013      	ands	r3, r2
 800781c:	2b00      	cmp	r3, #0
 800781e:	f040 8093 	bne.w	8007948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d01d      	beq.n	8007864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007828:	2208      	movs	r2, #8
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	2b00      	cmp	r3, #0
 8007838:	d014      	beq.n	8007864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f023 0307 	bic.w	r3, r3, #7
 8007840:	3308      	adds	r3, #8
 8007842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b00      	cmp	r3, #0
 800784c:	d00a      	beq.n	8007864 <pvPortMalloc+0x6c>
	__asm volatile
 800784e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007852:	f383 8811 	msr	BASEPRI, r3
 8007856:	f3bf 8f6f 	isb	sy
 800785a:	f3bf 8f4f 	dsb	sy
 800785e:	617b      	str	r3, [r7, #20]
}
 8007860:	bf00      	nop
 8007862:	e7fe      	b.n	8007862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d06e      	beq.n	8007948 <pvPortMalloc+0x150>
 800786a:	4b45      	ldr	r3, [pc, #276]	; (8007980 <pvPortMalloc+0x188>)
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	687a      	ldr	r2, [r7, #4]
 8007870:	429a      	cmp	r2, r3
 8007872:	d869      	bhi.n	8007948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007874:	4b43      	ldr	r3, [pc, #268]	; (8007984 <pvPortMalloc+0x18c>)
 8007876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007878:	4b42      	ldr	r3, [pc, #264]	; (8007984 <pvPortMalloc+0x18c>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800787e:	e004      	b.n	800788a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d903      	bls.n	800789c <pvPortMalloc+0xa4>
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1f1      	bne.n	8007880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800789c:	4b36      	ldr	r3, [pc, #216]	; (8007978 <pvPortMalloc+0x180>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d050      	beq.n	8007948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078a6:	6a3b      	ldr	r3, [r7, #32]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	2208      	movs	r2, #8
 80078ac:	4413      	add	r3, r2
 80078ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ba:	685a      	ldr	r2, [r3, #4]
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	1ad2      	subs	r2, r2, r3
 80078c0:	2308      	movs	r3, #8
 80078c2:	005b      	lsls	r3, r3, #1
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d91f      	bls.n	8007908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	4413      	add	r3, r2
 80078ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078d0:	69bb      	ldr	r3, [r7, #24]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00a      	beq.n	80078f0 <pvPortMalloc+0xf8>
	__asm volatile
 80078da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078de:	f383 8811 	msr	BASEPRI, r3
 80078e2:	f3bf 8f6f 	isb	sy
 80078e6:	f3bf 8f4f 	dsb	sy
 80078ea:	613b      	str	r3, [r7, #16]
}
 80078ec:	bf00      	nop
 80078ee:	e7fe      	b.n	80078ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	1ad2      	subs	r2, r2, r3
 80078f8:	69bb      	ldr	r3, [r7, #24]
 80078fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80078fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fe:	687a      	ldr	r2, [r7, #4]
 8007900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007902:	69b8      	ldr	r0, [r7, #24]
 8007904:	f000 f908 	bl	8007b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007908:	4b1d      	ldr	r3, [pc, #116]	; (8007980 <pvPortMalloc+0x188>)
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	4a1b      	ldr	r2, [pc, #108]	; (8007980 <pvPortMalloc+0x188>)
 8007914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007916:	4b1a      	ldr	r3, [pc, #104]	; (8007980 <pvPortMalloc+0x188>)
 8007918:	681a      	ldr	r2, [r3, #0]
 800791a:	4b1b      	ldr	r3, [pc, #108]	; (8007988 <pvPortMalloc+0x190>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	429a      	cmp	r2, r3
 8007920:	d203      	bcs.n	800792a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007922:	4b17      	ldr	r3, [pc, #92]	; (8007980 <pvPortMalloc+0x188>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4a18      	ldr	r2, [pc, #96]	; (8007988 <pvPortMalloc+0x190>)
 8007928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800792a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	4b13      	ldr	r3, [pc, #76]	; (800797c <pvPortMalloc+0x184>)
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	431a      	orrs	r2, r3
 8007934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793a:	2200      	movs	r2, #0
 800793c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800793e:	4b13      	ldr	r3, [pc, #76]	; (800798c <pvPortMalloc+0x194>)
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	3301      	adds	r3, #1
 8007944:	4a11      	ldr	r2, [pc, #68]	; (800798c <pvPortMalloc+0x194>)
 8007946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007948:	f7fe fb18 	bl	8005f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800794c:	69fb      	ldr	r3, [r7, #28]
 800794e:	f003 0307 	and.w	r3, r3, #7
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <pvPortMalloc+0x174>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	60fb      	str	r3, [r7, #12]
}
 8007968:	bf00      	nop
 800796a:	e7fe      	b.n	800796a <pvPortMalloc+0x172>
	return pvReturn;
 800796c:	69fb      	ldr	r3, [r7, #28]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3728      	adds	r7, #40	; 0x28
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
 8007976:	bf00      	nop
 8007978:	20004a40 	.word	0x20004a40
 800797c:	20004a54 	.word	0x20004a54
 8007980:	20004a44 	.word	0x20004a44
 8007984:	20004a38 	.word	0x20004a38
 8007988:	20004a48 	.word	0x20004a48
 800798c:	20004a4c 	.word	0x20004a4c

08007990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b086      	sub	sp, #24
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d04d      	beq.n	8007a3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079a2:	2308      	movs	r3, #8
 80079a4:	425b      	negs	r3, r3
 80079a6:	697a      	ldr	r2, [r7, #20]
 80079a8:	4413      	add	r3, r2
 80079aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079ac:	697b      	ldr	r3, [r7, #20]
 80079ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079b0:	693b      	ldr	r3, [r7, #16]
 80079b2:	685a      	ldr	r2, [r3, #4]
 80079b4:	4b24      	ldr	r3, [pc, #144]	; (8007a48 <vPortFree+0xb8>)
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	4013      	ands	r3, r2
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10a      	bne.n	80079d4 <vPortFree+0x44>
	__asm volatile
 80079be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c2:	f383 8811 	msr	BASEPRI, r3
 80079c6:	f3bf 8f6f 	isb	sy
 80079ca:	f3bf 8f4f 	dsb	sy
 80079ce:	60fb      	str	r3, [r7, #12]
}
 80079d0:	bf00      	nop
 80079d2:	e7fe      	b.n	80079d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d00a      	beq.n	80079f2 <vPortFree+0x62>
	__asm volatile
 80079dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e0:	f383 8811 	msr	BASEPRI, r3
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	60bb      	str	r3, [r7, #8]
}
 80079ee:	bf00      	nop
 80079f0:	e7fe      	b.n	80079f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80079f2:	693b      	ldr	r3, [r7, #16]
 80079f4:	685a      	ldr	r2, [r3, #4]
 80079f6:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <vPortFree+0xb8>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	4013      	ands	r3, r2
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d01e      	beq.n	8007a3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a00:	693b      	ldr	r3, [r7, #16]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d11a      	bne.n	8007a3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a08:	693b      	ldr	r3, [r7, #16]
 8007a0a:	685a      	ldr	r2, [r3, #4]
 8007a0c:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <vPortFree+0xb8>)
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	43db      	mvns	r3, r3
 8007a12:	401a      	ands	r2, r3
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a18:	f7fe faa2 	bl	8005f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	685a      	ldr	r2, [r3, #4]
 8007a20:	4b0a      	ldr	r3, [pc, #40]	; (8007a4c <vPortFree+0xbc>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4413      	add	r3, r2
 8007a26:	4a09      	ldr	r2, [pc, #36]	; (8007a4c <vPortFree+0xbc>)
 8007a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a2a:	6938      	ldr	r0, [r7, #16]
 8007a2c:	f000 f874 	bl	8007b18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a30:	4b07      	ldr	r3, [pc, #28]	; (8007a50 <vPortFree+0xc0>)
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	3301      	adds	r3, #1
 8007a36:	4a06      	ldr	r2, [pc, #24]	; (8007a50 <vPortFree+0xc0>)
 8007a38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a3a:	f7fe fa9f 	bl	8005f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a3e:	bf00      	nop
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}
 8007a46:	bf00      	nop
 8007a48:	20004a54 	.word	0x20004a54
 8007a4c:	20004a44 	.word	0x20004a44
 8007a50:	20004a50 	.word	0x20004a50

08007a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a54:	b480      	push	{r7}
 8007a56:	b085      	sub	sp, #20
 8007a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a5a:	f643 2398 	movw	r3, #15000	; 0x3a98
 8007a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a60:	4b27      	ldr	r3, [pc, #156]	; (8007b00 <prvHeapInit+0xac>)
 8007a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	f003 0307 	and.w	r3, r3, #7
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d00c      	beq.n	8007a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	3307      	adds	r3, #7
 8007a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	f023 0307 	bic.w	r3, r3, #7
 8007a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a7c:	68ba      	ldr	r2, [r7, #8]
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1ad3      	subs	r3, r2, r3
 8007a82:	4a1f      	ldr	r2, [pc, #124]	; (8007b00 <prvHeapInit+0xac>)
 8007a84:	4413      	add	r3, r2
 8007a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007a8c:	4a1d      	ldr	r2, [pc, #116]	; (8007b04 <prvHeapInit+0xb0>)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007a92:	4b1c      	ldr	r3, [pc, #112]	; (8007b04 <prvHeapInit+0xb0>)
 8007a94:	2200      	movs	r2, #0
 8007a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	68ba      	ldr	r2, [r7, #8]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007aa0:	2208      	movs	r2, #8
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	1a9b      	subs	r3, r3, r2
 8007aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	f023 0307 	bic.w	r3, r3, #7
 8007aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	4a15      	ldr	r2, [pc, #84]	; (8007b08 <prvHeapInit+0xb4>)
 8007ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ab6:	4b14      	ldr	r3, [pc, #80]	; (8007b08 <prvHeapInit+0xb4>)
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	2200      	movs	r2, #0
 8007abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007abe:	4b12      	ldr	r3, [pc, #72]	; (8007b08 <prvHeapInit+0xb4>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	68fa      	ldr	r2, [r7, #12]
 8007ace:	1ad2      	subs	r2, r2, r3
 8007ad0:	683b      	ldr	r3, [r7, #0]
 8007ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007ad4:	4b0c      	ldr	r3, [pc, #48]	; (8007b08 <prvHeapInit+0xb4>)
 8007ad6:	681a      	ldr	r2, [r3, #0]
 8007ad8:	683b      	ldr	r3, [r7, #0]
 8007ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	4a0a      	ldr	r2, [pc, #40]	; (8007b0c <prvHeapInit+0xb8>)
 8007ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	685b      	ldr	r3, [r3, #4]
 8007ae8:	4a09      	ldr	r2, [pc, #36]	; (8007b10 <prvHeapInit+0xbc>)
 8007aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007aec:	4b09      	ldr	r3, [pc, #36]	; (8007b14 <prvHeapInit+0xc0>)
 8007aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007af2:	601a      	str	r2, [r3, #0]
}
 8007af4:	bf00      	nop
 8007af6:	3714      	adds	r7, #20
 8007af8:	46bd      	mov	sp, r7
 8007afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afe:	4770      	bx	lr
 8007b00:	20000fa0 	.word	0x20000fa0
 8007b04:	20004a38 	.word	0x20004a38
 8007b08:	20004a40 	.word	0x20004a40
 8007b0c:	20004a48 	.word	0x20004a48
 8007b10:	20004a44 	.word	0x20004a44
 8007b14:	20004a54 	.word	0x20004a54

08007b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b18:	b480      	push	{r7}
 8007b1a:	b085      	sub	sp, #20
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b20:	4b28      	ldr	r3, [pc, #160]	; (8007bc4 <prvInsertBlockIntoFreeList+0xac>)
 8007b22:	60fb      	str	r3, [r7, #12]
 8007b24:	e002      	b.n	8007b2c <prvInsertBlockIntoFreeList+0x14>
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	60fb      	str	r3, [r7, #12]
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	687a      	ldr	r2, [r7, #4]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d8f7      	bhi.n	8007b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	685b      	ldr	r3, [r3, #4]
 8007b3e:	68ba      	ldr	r2, [r7, #8]
 8007b40:	4413      	add	r3, r2
 8007b42:	687a      	ldr	r2, [r7, #4]
 8007b44:	429a      	cmp	r2, r3
 8007b46:	d108      	bne.n	8007b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	685a      	ldr	r2, [r3, #4]
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	685b      	ldr	r3, [r3, #4]
 8007b50:	441a      	add	r2, r3
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	441a      	add	r2, r3
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d118      	bne.n	8007ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	681a      	ldr	r2, [r3, #0]
 8007b72:	4b15      	ldr	r3, [pc, #84]	; (8007bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d00d      	beq.n	8007b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	685a      	ldr	r2, [r3, #4]
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	685b      	ldr	r3, [r3, #4]
 8007b84:	441a      	add	r2, r3
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	601a      	str	r2, [r3, #0]
 8007b94:	e008      	b.n	8007ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	601a      	str	r2, [r3, #0]
 8007b9e:	e003      	b.n	8007ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	681a      	ldr	r2, [r3, #0]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ba8:	68fa      	ldr	r2, [r7, #12]
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	429a      	cmp	r2, r3
 8007bae:	d002      	beq.n	8007bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	687a      	ldr	r2, [r7, #4]
 8007bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bb6:	bf00      	nop
 8007bb8:	3714      	adds	r7, #20
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc0:	4770      	bx	lr
 8007bc2:	bf00      	nop
 8007bc4:	20004a38 	.word	0x20004a38
 8007bc8:	20004a40 	.word	0x20004a40

08007bcc <std>:
 8007bcc:	2300      	movs	r3, #0
 8007bce:	b510      	push	{r4, lr}
 8007bd0:	4604      	mov	r4, r0
 8007bd2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bda:	6083      	str	r3, [r0, #8]
 8007bdc:	8181      	strh	r1, [r0, #12]
 8007bde:	6643      	str	r3, [r0, #100]	; 0x64
 8007be0:	81c2      	strh	r2, [r0, #14]
 8007be2:	6183      	str	r3, [r0, #24]
 8007be4:	4619      	mov	r1, r3
 8007be6:	2208      	movs	r2, #8
 8007be8:	305c      	adds	r0, #92	; 0x5c
 8007bea:	f000 f906 	bl	8007dfa <memset>
 8007bee:	4b0d      	ldr	r3, [pc, #52]	; (8007c24 <std+0x58>)
 8007bf0:	6263      	str	r3, [r4, #36]	; 0x24
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	; (8007c28 <std+0x5c>)
 8007bf4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bf6:	4b0d      	ldr	r3, [pc, #52]	; (8007c2c <std+0x60>)
 8007bf8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bfa:	4b0d      	ldr	r3, [pc, #52]	; (8007c30 <std+0x64>)
 8007bfc:	6323      	str	r3, [r4, #48]	; 0x30
 8007bfe:	4b0d      	ldr	r3, [pc, #52]	; (8007c34 <std+0x68>)
 8007c00:	6224      	str	r4, [r4, #32]
 8007c02:	429c      	cmp	r4, r3
 8007c04:	d006      	beq.n	8007c14 <std+0x48>
 8007c06:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007c0a:	4294      	cmp	r4, r2
 8007c0c:	d002      	beq.n	8007c14 <std+0x48>
 8007c0e:	33d0      	adds	r3, #208	; 0xd0
 8007c10:	429c      	cmp	r4, r3
 8007c12:	d105      	bne.n	8007c20 <std+0x54>
 8007c14:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1c:	f000 b9bc 	b.w	8007f98 <__retarget_lock_init_recursive>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	bf00      	nop
 8007c24:	08007d75 	.word	0x08007d75
 8007c28:	08007d97 	.word	0x08007d97
 8007c2c:	08007dcf 	.word	0x08007dcf
 8007c30:	08007df3 	.word	0x08007df3
 8007c34:	20004a58 	.word	0x20004a58

08007c38 <stdio_exit_handler>:
 8007c38:	4a02      	ldr	r2, [pc, #8]	; (8007c44 <stdio_exit_handler+0xc>)
 8007c3a:	4903      	ldr	r1, [pc, #12]	; (8007c48 <stdio_exit_handler+0x10>)
 8007c3c:	4803      	ldr	r0, [pc, #12]	; (8007c4c <stdio_exit_handler+0x14>)
 8007c3e:	f000 b869 	b.w	8007d14 <_fwalk_sglue>
 8007c42:	bf00      	nop
 8007c44:	20000014 	.word	0x20000014
 8007c48:	08008861 	.word	0x08008861
 8007c4c:	20000020 	.word	0x20000020

08007c50 <cleanup_stdio>:
 8007c50:	6841      	ldr	r1, [r0, #4]
 8007c52:	4b0c      	ldr	r3, [pc, #48]	; (8007c84 <cleanup_stdio+0x34>)
 8007c54:	4299      	cmp	r1, r3
 8007c56:	b510      	push	{r4, lr}
 8007c58:	4604      	mov	r4, r0
 8007c5a:	d001      	beq.n	8007c60 <cleanup_stdio+0x10>
 8007c5c:	f000 fe00 	bl	8008860 <_fflush_r>
 8007c60:	68a1      	ldr	r1, [r4, #8]
 8007c62:	4b09      	ldr	r3, [pc, #36]	; (8007c88 <cleanup_stdio+0x38>)
 8007c64:	4299      	cmp	r1, r3
 8007c66:	d002      	beq.n	8007c6e <cleanup_stdio+0x1e>
 8007c68:	4620      	mov	r0, r4
 8007c6a:	f000 fdf9 	bl	8008860 <_fflush_r>
 8007c6e:	68e1      	ldr	r1, [r4, #12]
 8007c70:	4b06      	ldr	r3, [pc, #24]	; (8007c8c <cleanup_stdio+0x3c>)
 8007c72:	4299      	cmp	r1, r3
 8007c74:	d004      	beq.n	8007c80 <cleanup_stdio+0x30>
 8007c76:	4620      	mov	r0, r4
 8007c78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c7c:	f000 bdf0 	b.w	8008860 <_fflush_r>
 8007c80:	bd10      	pop	{r4, pc}
 8007c82:	bf00      	nop
 8007c84:	20004a58 	.word	0x20004a58
 8007c88:	20004ac0 	.word	0x20004ac0
 8007c8c:	20004b28 	.word	0x20004b28

08007c90 <global_stdio_init.part.0>:
 8007c90:	b510      	push	{r4, lr}
 8007c92:	4b0b      	ldr	r3, [pc, #44]	; (8007cc0 <global_stdio_init.part.0+0x30>)
 8007c94:	4c0b      	ldr	r4, [pc, #44]	; (8007cc4 <global_stdio_init.part.0+0x34>)
 8007c96:	4a0c      	ldr	r2, [pc, #48]	; (8007cc8 <global_stdio_init.part.0+0x38>)
 8007c98:	601a      	str	r2, [r3, #0]
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	2104      	movs	r1, #4
 8007ca0:	f7ff ff94 	bl	8007bcc <std>
 8007ca4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ca8:	2201      	movs	r2, #1
 8007caa:	2109      	movs	r1, #9
 8007cac:	f7ff ff8e 	bl	8007bcc <std>
 8007cb0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007cb4:	2202      	movs	r2, #2
 8007cb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cba:	2112      	movs	r1, #18
 8007cbc:	f7ff bf86 	b.w	8007bcc <std>
 8007cc0:	20004b90 	.word	0x20004b90
 8007cc4:	20004a58 	.word	0x20004a58
 8007cc8:	08007c39 	.word	0x08007c39

08007ccc <__sfp_lock_acquire>:
 8007ccc:	4801      	ldr	r0, [pc, #4]	; (8007cd4 <__sfp_lock_acquire+0x8>)
 8007cce:	f000 b964 	b.w	8007f9a <__retarget_lock_acquire_recursive>
 8007cd2:	bf00      	nop
 8007cd4:	20004b99 	.word	0x20004b99

08007cd8 <__sfp_lock_release>:
 8007cd8:	4801      	ldr	r0, [pc, #4]	; (8007ce0 <__sfp_lock_release+0x8>)
 8007cda:	f000 b95f 	b.w	8007f9c <__retarget_lock_release_recursive>
 8007cde:	bf00      	nop
 8007ce0:	20004b99 	.word	0x20004b99

08007ce4 <__sinit>:
 8007ce4:	b510      	push	{r4, lr}
 8007ce6:	4604      	mov	r4, r0
 8007ce8:	f7ff fff0 	bl	8007ccc <__sfp_lock_acquire>
 8007cec:	6a23      	ldr	r3, [r4, #32]
 8007cee:	b11b      	cbz	r3, 8007cf8 <__sinit+0x14>
 8007cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf4:	f7ff bff0 	b.w	8007cd8 <__sfp_lock_release>
 8007cf8:	4b04      	ldr	r3, [pc, #16]	; (8007d0c <__sinit+0x28>)
 8007cfa:	6223      	str	r3, [r4, #32]
 8007cfc:	4b04      	ldr	r3, [pc, #16]	; (8007d10 <__sinit+0x2c>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d1f5      	bne.n	8007cf0 <__sinit+0xc>
 8007d04:	f7ff ffc4 	bl	8007c90 <global_stdio_init.part.0>
 8007d08:	e7f2      	b.n	8007cf0 <__sinit+0xc>
 8007d0a:	bf00      	nop
 8007d0c:	08007c51 	.word	0x08007c51
 8007d10:	20004b90 	.word	0x20004b90

08007d14 <_fwalk_sglue>:
 8007d14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d18:	4607      	mov	r7, r0
 8007d1a:	4688      	mov	r8, r1
 8007d1c:	4614      	mov	r4, r2
 8007d1e:	2600      	movs	r6, #0
 8007d20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d24:	f1b9 0901 	subs.w	r9, r9, #1
 8007d28:	d505      	bpl.n	8007d36 <_fwalk_sglue+0x22>
 8007d2a:	6824      	ldr	r4, [r4, #0]
 8007d2c:	2c00      	cmp	r4, #0
 8007d2e:	d1f7      	bne.n	8007d20 <_fwalk_sglue+0xc>
 8007d30:	4630      	mov	r0, r6
 8007d32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d36:	89ab      	ldrh	r3, [r5, #12]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d907      	bls.n	8007d4c <_fwalk_sglue+0x38>
 8007d3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d40:	3301      	adds	r3, #1
 8007d42:	d003      	beq.n	8007d4c <_fwalk_sglue+0x38>
 8007d44:	4629      	mov	r1, r5
 8007d46:	4638      	mov	r0, r7
 8007d48:	47c0      	blx	r8
 8007d4a:	4306      	orrs	r6, r0
 8007d4c:	3568      	adds	r5, #104	; 0x68
 8007d4e:	e7e9      	b.n	8007d24 <_fwalk_sglue+0x10>

08007d50 <iprintf>:
 8007d50:	b40f      	push	{r0, r1, r2, r3}
 8007d52:	b507      	push	{r0, r1, r2, lr}
 8007d54:	4906      	ldr	r1, [pc, #24]	; (8007d70 <iprintf+0x20>)
 8007d56:	ab04      	add	r3, sp, #16
 8007d58:	6808      	ldr	r0, [r1, #0]
 8007d5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d5e:	6881      	ldr	r1, [r0, #8]
 8007d60:	9301      	str	r3, [sp, #4]
 8007d62:	f000 fa4d 	bl	8008200 <_vfiprintf_r>
 8007d66:	b003      	add	sp, #12
 8007d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d6c:	b004      	add	sp, #16
 8007d6e:	4770      	bx	lr
 8007d70:	2000006c 	.word	0x2000006c

08007d74 <__sread>:
 8007d74:	b510      	push	{r4, lr}
 8007d76:	460c      	mov	r4, r1
 8007d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d7c:	f000 f8be 	bl	8007efc <_read_r>
 8007d80:	2800      	cmp	r0, #0
 8007d82:	bfab      	itete	ge
 8007d84:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007d86:	89a3      	ldrhlt	r3, [r4, #12]
 8007d88:	181b      	addge	r3, r3, r0
 8007d8a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007d8e:	bfac      	ite	ge
 8007d90:	6563      	strge	r3, [r4, #84]	; 0x54
 8007d92:	81a3      	strhlt	r3, [r4, #12]
 8007d94:	bd10      	pop	{r4, pc}

08007d96 <__swrite>:
 8007d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d9a:	461f      	mov	r7, r3
 8007d9c:	898b      	ldrh	r3, [r1, #12]
 8007d9e:	05db      	lsls	r3, r3, #23
 8007da0:	4605      	mov	r5, r0
 8007da2:	460c      	mov	r4, r1
 8007da4:	4616      	mov	r6, r2
 8007da6:	d505      	bpl.n	8007db4 <__swrite+0x1e>
 8007da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dac:	2302      	movs	r3, #2
 8007dae:	2200      	movs	r2, #0
 8007db0:	f000 f892 	bl	8007ed8 <_lseek_r>
 8007db4:	89a3      	ldrh	r3, [r4, #12]
 8007db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007dba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007dbe:	81a3      	strh	r3, [r4, #12]
 8007dc0:	4632      	mov	r2, r6
 8007dc2:	463b      	mov	r3, r7
 8007dc4:	4628      	mov	r0, r5
 8007dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007dca:	f000 b8a9 	b.w	8007f20 <_write_r>

08007dce <__sseek>:
 8007dce:	b510      	push	{r4, lr}
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007dd6:	f000 f87f 	bl	8007ed8 <_lseek_r>
 8007dda:	1c43      	adds	r3, r0, #1
 8007ddc:	89a3      	ldrh	r3, [r4, #12]
 8007dde:	bf15      	itete	ne
 8007de0:	6560      	strne	r0, [r4, #84]	; 0x54
 8007de2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007de6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007dea:	81a3      	strheq	r3, [r4, #12]
 8007dec:	bf18      	it	ne
 8007dee:	81a3      	strhne	r3, [r4, #12]
 8007df0:	bd10      	pop	{r4, pc}

08007df2 <__sclose>:
 8007df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007df6:	f000 b809 	b.w	8007e0c <_close_r>

08007dfa <memset>:
 8007dfa:	4402      	add	r2, r0
 8007dfc:	4603      	mov	r3, r0
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d100      	bne.n	8007e04 <memset+0xa>
 8007e02:	4770      	bx	lr
 8007e04:	f803 1b01 	strb.w	r1, [r3], #1
 8007e08:	e7f9      	b.n	8007dfe <memset+0x4>
	...

08007e0c <_close_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4d06      	ldr	r5, [pc, #24]	; (8007e28 <_close_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4604      	mov	r4, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	602b      	str	r3, [r5, #0]
 8007e18:	f7f9 fa85 	bl	8001326 <_close>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_close_r+0x1a>
 8007e20:	682b      	ldr	r3, [r5, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_close_r+0x1a>
 8007e24:	6023      	str	r3, [r4, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20004b94 	.word	0x20004b94

08007e2c <_reclaim_reent>:
 8007e2c:	4b29      	ldr	r3, [pc, #164]	; (8007ed4 <_reclaim_reent+0xa8>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4283      	cmp	r3, r0
 8007e32:	b570      	push	{r4, r5, r6, lr}
 8007e34:	4604      	mov	r4, r0
 8007e36:	d04b      	beq.n	8007ed0 <_reclaim_reent+0xa4>
 8007e38:	69c3      	ldr	r3, [r0, #28]
 8007e3a:	b143      	cbz	r3, 8007e4e <_reclaim_reent+0x22>
 8007e3c:	68db      	ldr	r3, [r3, #12]
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d144      	bne.n	8007ecc <_reclaim_reent+0xa0>
 8007e42:	69e3      	ldr	r3, [r4, #28]
 8007e44:	6819      	ldr	r1, [r3, #0]
 8007e46:	b111      	cbz	r1, 8007e4e <_reclaim_reent+0x22>
 8007e48:	4620      	mov	r0, r4
 8007e4a:	f000 f8b7 	bl	8007fbc <_free_r>
 8007e4e:	6961      	ldr	r1, [r4, #20]
 8007e50:	b111      	cbz	r1, 8007e58 <_reclaim_reent+0x2c>
 8007e52:	4620      	mov	r0, r4
 8007e54:	f000 f8b2 	bl	8007fbc <_free_r>
 8007e58:	69e1      	ldr	r1, [r4, #28]
 8007e5a:	b111      	cbz	r1, 8007e62 <_reclaim_reent+0x36>
 8007e5c:	4620      	mov	r0, r4
 8007e5e:	f000 f8ad 	bl	8007fbc <_free_r>
 8007e62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007e64:	b111      	cbz	r1, 8007e6c <_reclaim_reent+0x40>
 8007e66:	4620      	mov	r0, r4
 8007e68:	f000 f8a8 	bl	8007fbc <_free_r>
 8007e6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e6e:	b111      	cbz	r1, 8007e76 <_reclaim_reent+0x4a>
 8007e70:	4620      	mov	r0, r4
 8007e72:	f000 f8a3 	bl	8007fbc <_free_r>
 8007e76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e78:	b111      	cbz	r1, 8007e80 <_reclaim_reent+0x54>
 8007e7a:	4620      	mov	r0, r4
 8007e7c:	f000 f89e 	bl	8007fbc <_free_r>
 8007e80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e82:	b111      	cbz	r1, 8007e8a <_reclaim_reent+0x5e>
 8007e84:	4620      	mov	r0, r4
 8007e86:	f000 f899 	bl	8007fbc <_free_r>
 8007e8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007e8c:	b111      	cbz	r1, 8007e94 <_reclaim_reent+0x68>
 8007e8e:	4620      	mov	r0, r4
 8007e90:	f000 f894 	bl	8007fbc <_free_r>
 8007e94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007e96:	b111      	cbz	r1, 8007e9e <_reclaim_reent+0x72>
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f000 f88f 	bl	8007fbc <_free_r>
 8007e9e:	6a23      	ldr	r3, [r4, #32]
 8007ea0:	b1b3      	cbz	r3, 8007ed0 <_reclaim_reent+0xa4>
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007ea8:	4718      	bx	r3
 8007eaa:	5949      	ldr	r1, [r1, r5]
 8007eac:	b941      	cbnz	r1, 8007ec0 <_reclaim_reent+0x94>
 8007eae:	3504      	adds	r5, #4
 8007eb0:	69e3      	ldr	r3, [r4, #28]
 8007eb2:	2d80      	cmp	r5, #128	; 0x80
 8007eb4:	68d9      	ldr	r1, [r3, #12]
 8007eb6:	d1f8      	bne.n	8007eaa <_reclaim_reent+0x7e>
 8007eb8:	4620      	mov	r0, r4
 8007eba:	f000 f87f 	bl	8007fbc <_free_r>
 8007ebe:	e7c0      	b.n	8007e42 <_reclaim_reent+0x16>
 8007ec0:	680e      	ldr	r6, [r1, #0]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	f000 f87a 	bl	8007fbc <_free_r>
 8007ec8:	4631      	mov	r1, r6
 8007eca:	e7ef      	b.n	8007eac <_reclaim_reent+0x80>
 8007ecc:	2500      	movs	r5, #0
 8007ece:	e7ef      	b.n	8007eb0 <_reclaim_reent+0x84>
 8007ed0:	bd70      	pop	{r4, r5, r6, pc}
 8007ed2:	bf00      	nop
 8007ed4:	2000006c 	.word	0x2000006c

08007ed8 <_lseek_r>:
 8007ed8:	b538      	push	{r3, r4, r5, lr}
 8007eda:	4d07      	ldr	r5, [pc, #28]	; (8007ef8 <_lseek_r+0x20>)
 8007edc:	4604      	mov	r4, r0
 8007ede:	4608      	mov	r0, r1
 8007ee0:	4611      	mov	r1, r2
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	602a      	str	r2, [r5, #0]
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	f7f9 fa44 	bl	8001374 <_lseek>
 8007eec:	1c43      	adds	r3, r0, #1
 8007eee:	d102      	bne.n	8007ef6 <_lseek_r+0x1e>
 8007ef0:	682b      	ldr	r3, [r5, #0]
 8007ef2:	b103      	cbz	r3, 8007ef6 <_lseek_r+0x1e>
 8007ef4:	6023      	str	r3, [r4, #0]
 8007ef6:	bd38      	pop	{r3, r4, r5, pc}
 8007ef8:	20004b94 	.word	0x20004b94

08007efc <_read_r>:
 8007efc:	b538      	push	{r3, r4, r5, lr}
 8007efe:	4d07      	ldr	r5, [pc, #28]	; (8007f1c <_read_r+0x20>)
 8007f00:	4604      	mov	r4, r0
 8007f02:	4608      	mov	r0, r1
 8007f04:	4611      	mov	r1, r2
 8007f06:	2200      	movs	r2, #0
 8007f08:	602a      	str	r2, [r5, #0]
 8007f0a:	461a      	mov	r2, r3
 8007f0c:	f7f9 f9d2 	bl	80012b4 <_read>
 8007f10:	1c43      	adds	r3, r0, #1
 8007f12:	d102      	bne.n	8007f1a <_read_r+0x1e>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	b103      	cbz	r3, 8007f1a <_read_r+0x1e>
 8007f18:	6023      	str	r3, [r4, #0]
 8007f1a:	bd38      	pop	{r3, r4, r5, pc}
 8007f1c:	20004b94 	.word	0x20004b94

08007f20 <_write_r>:
 8007f20:	b538      	push	{r3, r4, r5, lr}
 8007f22:	4d07      	ldr	r5, [pc, #28]	; (8007f40 <_write_r+0x20>)
 8007f24:	4604      	mov	r4, r0
 8007f26:	4608      	mov	r0, r1
 8007f28:	4611      	mov	r1, r2
 8007f2a:	2200      	movs	r2, #0
 8007f2c:	602a      	str	r2, [r5, #0]
 8007f2e:	461a      	mov	r2, r3
 8007f30:	f7f9 f9dd 	bl	80012ee <_write>
 8007f34:	1c43      	adds	r3, r0, #1
 8007f36:	d102      	bne.n	8007f3e <_write_r+0x1e>
 8007f38:	682b      	ldr	r3, [r5, #0]
 8007f3a:	b103      	cbz	r3, 8007f3e <_write_r+0x1e>
 8007f3c:	6023      	str	r3, [r4, #0]
 8007f3e:	bd38      	pop	{r3, r4, r5, pc}
 8007f40:	20004b94 	.word	0x20004b94

08007f44 <__errno>:
 8007f44:	4b01      	ldr	r3, [pc, #4]	; (8007f4c <__errno+0x8>)
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	2000006c 	.word	0x2000006c

08007f50 <__libc_init_array>:
 8007f50:	b570      	push	{r4, r5, r6, lr}
 8007f52:	4d0d      	ldr	r5, [pc, #52]	; (8007f88 <__libc_init_array+0x38>)
 8007f54:	4c0d      	ldr	r4, [pc, #52]	; (8007f8c <__libc_init_array+0x3c>)
 8007f56:	1b64      	subs	r4, r4, r5
 8007f58:	10a4      	asrs	r4, r4, #2
 8007f5a:	2600      	movs	r6, #0
 8007f5c:	42a6      	cmp	r6, r4
 8007f5e:	d109      	bne.n	8007f74 <__libc_init_array+0x24>
 8007f60:	4d0b      	ldr	r5, [pc, #44]	; (8007f90 <__libc_init_array+0x40>)
 8007f62:	4c0c      	ldr	r4, [pc, #48]	; (8007f94 <__libc_init_array+0x44>)
 8007f64:	f000 fdce 	bl	8008b04 <_init>
 8007f68:	1b64      	subs	r4, r4, r5
 8007f6a:	10a4      	asrs	r4, r4, #2
 8007f6c:	2600      	movs	r6, #0
 8007f6e:	42a6      	cmp	r6, r4
 8007f70:	d105      	bne.n	8007f7e <__libc_init_array+0x2e>
 8007f72:	bd70      	pop	{r4, r5, r6, pc}
 8007f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f78:	4798      	blx	r3
 8007f7a:	3601      	adds	r6, #1
 8007f7c:	e7ee      	b.n	8007f5c <__libc_init_array+0xc>
 8007f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f82:	4798      	blx	r3
 8007f84:	3601      	adds	r6, #1
 8007f86:	e7f2      	b.n	8007f6e <__libc_init_array+0x1e>
 8007f88:	08008d28 	.word	0x08008d28
 8007f8c:	08008d28 	.word	0x08008d28
 8007f90:	08008d28 	.word	0x08008d28
 8007f94:	08008d2c 	.word	0x08008d2c

08007f98 <__retarget_lock_init_recursive>:
 8007f98:	4770      	bx	lr

08007f9a <__retarget_lock_acquire_recursive>:
 8007f9a:	4770      	bx	lr

08007f9c <__retarget_lock_release_recursive>:
 8007f9c:	4770      	bx	lr

08007f9e <memcpy>:
 8007f9e:	440a      	add	r2, r1
 8007fa0:	4291      	cmp	r1, r2
 8007fa2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007fa6:	d100      	bne.n	8007faa <memcpy+0xc>
 8007fa8:	4770      	bx	lr
 8007faa:	b510      	push	{r4, lr}
 8007fac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007fb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007fb4:	4291      	cmp	r1, r2
 8007fb6:	d1f9      	bne.n	8007fac <memcpy+0xe>
 8007fb8:	bd10      	pop	{r4, pc}
	...

08007fbc <_free_r>:
 8007fbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007fbe:	2900      	cmp	r1, #0
 8007fc0:	d044      	beq.n	800804c <_free_r+0x90>
 8007fc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fc6:	9001      	str	r0, [sp, #4]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	f1a1 0404 	sub.w	r4, r1, #4
 8007fce:	bfb8      	it	lt
 8007fd0:	18e4      	addlt	r4, r4, r3
 8007fd2:	f000 f8df 	bl	8008194 <__malloc_lock>
 8007fd6:	4a1e      	ldr	r2, [pc, #120]	; (8008050 <_free_r+0x94>)
 8007fd8:	9801      	ldr	r0, [sp, #4]
 8007fda:	6813      	ldr	r3, [r2, #0]
 8007fdc:	b933      	cbnz	r3, 8007fec <_free_r+0x30>
 8007fde:	6063      	str	r3, [r4, #4]
 8007fe0:	6014      	str	r4, [r2, #0]
 8007fe2:	b003      	add	sp, #12
 8007fe4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007fe8:	f000 b8da 	b.w	80081a0 <__malloc_unlock>
 8007fec:	42a3      	cmp	r3, r4
 8007fee:	d908      	bls.n	8008002 <_free_r+0x46>
 8007ff0:	6825      	ldr	r5, [r4, #0]
 8007ff2:	1961      	adds	r1, r4, r5
 8007ff4:	428b      	cmp	r3, r1
 8007ff6:	bf01      	itttt	eq
 8007ff8:	6819      	ldreq	r1, [r3, #0]
 8007ffa:	685b      	ldreq	r3, [r3, #4]
 8007ffc:	1949      	addeq	r1, r1, r5
 8007ffe:	6021      	streq	r1, [r4, #0]
 8008000:	e7ed      	b.n	8007fde <_free_r+0x22>
 8008002:	461a      	mov	r2, r3
 8008004:	685b      	ldr	r3, [r3, #4]
 8008006:	b10b      	cbz	r3, 800800c <_free_r+0x50>
 8008008:	42a3      	cmp	r3, r4
 800800a:	d9fa      	bls.n	8008002 <_free_r+0x46>
 800800c:	6811      	ldr	r1, [r2, #0]
 800800e:	1855      	adds	r5, r2, r1
 8008010:	42a5      	cmp	r5, r4
 8008012:	d10b      	bne.n	800802c <_free_r+0x70>
 8008014:	6824      	ldr	r4, [r4, #0]
 8008016:	4421      	add	r1, r4
 8008018:	1854      	adds	r4, r2, r1
 800801a:	42a3      	cmp	r3, r4
 800801c:	6011      	str	r1, [r2, #0]
 800801e:	d1e0      	bne.n	8007fe2 <_free_r+0x26>
 8008020:	681c      	ldr	r4, [r3, #0]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	6053      	str	r3, [r2, #4]
 8008026:	440c      	add	r4, r1
 8008028:	6014      	str	r4, [r2, #0]
 800802a:	e7da      	b.n	8007fe2 <_free_r+0x26>
 800802c:	d902      	bls.n	8008034 <_free_r+0x78>
 800802e:	230c      	movs	r3, #12
 8008030:	6003      	str	r3, [r0, #0]
 8008032:	e7d6      	b.n	8007fe2 <_free_r+0x26>
 8008034:	6825      	ldr	r5, [r4, #0]
 8008036:	1961      	adds	r1, r4, r5
 8008038:	428b      	cmp	r3, r1
 800803a:	bf04      	itt	eq
 800803c:	6819      	ldreq	r1, [r3, #0]
 800803e:	685b      	ldreq	r3, [r3, #4]
 8008040:	6063      	str	r3, [r4, #4]
 8008042:	bf04      	itt	eq
 8008044:	1949      	addeq	r1, r1, r5
 8008046:	6021      	streq	r1, [r4, #0]
 8008048:	6054      	str	r4, [r2, #4]
 800804a:	e7ca      	b.n	8007fe2 <_free_r+0x26>
 800804c:	b003      	add	sp, #12
 800804e:	bd30      	pop	{r4, r5, pc}
 8008050:	20004b9c 	.word	0x20004b9c

08008054 <sbrk_aligned>:
 8008054:	b570      	push	{r4, r5, r6, lr}
 8008056:	4e0e      	ldr	r6, [pc, #56]	; (8008090 <sbrk_aligned+0x3c>)
 8008058:	460c      	mov	r4, r1
 800805a:	6831      	ldr	r1, [r6, #0]
 800805c:	4605      	mov	r5, r0
 800805e:	b911      	cbnz	r1, 8008066 <sbrk_aligned+0x12>
 8008060:	f000 fcbc 	bl	80089dc <_sbrk_r>
 8008064:	6030      	str	r0, [r6, #0]
 8008066:	4621      	mov	r1, r4
 8008068:	4628      	mov	r0, r5
 800806a:	f000 fcb7 	bl	80089dc <_sbrk_r>
 800806e:	1c43      	adds	r3, r0, #1
 8008070:	d00a      	beq.n	8008088 <sbrk_aligned+0x34>
 8008072:	1cc4      	adds	r4, r0, #3
 8008074:	f024 0403 	bic.w	r4, r4, #3
 8008078:	42a0      	cmp	r0, r4
 800807a:	d007      	beq.n	800808c <sbrk_aligned+0x38>
 800807c:	1a21      	subs	r1, r4, r0
 800807e:	4628      	mov	r0, r5
 8008080:	f000 fcac 	bl	80089dc <_sbrk_r>
 8008084:	3001      	adds	r0, #1
 8008086:	d101      	bne.n	800808c <sbrk_aligned+0x38>
 8008088:	f04f 34ff 	mov.w	r4, #4294967295
 800808c:	4620      	mov	r0, r4
 800808e:	bd70      	pop	{r4, r5, r6, pc}
 8008090:	20004ba0 	.word	0x20004ba0

08008094 <_malloc_r>:
 8008094:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008098:	1ccd      	adds	r5, r1, #3
 800809a:	f025 0503 	bic.w	r5, r5, #3
 800809e:	3508      	adds	r5, #8
 80080a0:	2d0c      	cmp	r5, #12
 80080a2:	bf38      	it	cc
 80080a4:	250c      	movcc	r5, #12
 80080a6:	2d00      	cmp	r5, #0
 80080a8:	4607      	mov	r7, r0
 80080aa:	db01      	blt.n	80080b0 <_malloc_r+0x1c>
 80080ac:	42a9      	cmp	r1, r5
 80080ae:	d905      	bls.n	80080bc <_malloc_r+0x28>
 80080b0:	230c      	movs	r3, #12
 80080b2:	603b      	str	r3, [r7, #0]
 80080b4:	2600      	movs	r6, #0
 80080b6:	4630      	mov	r0, r6
 80080b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080bc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008190 <_malloc_r+0xfc>
 80080c0:	f000 f868 	bl	8008194 <__malloc_lock>
 80080c4:	f8d8 3000 	ldr.w	r3, [r8]
 80080c8:	461c      	mov	r4, r3
 80080ca:	bb5c      	cbnz	r4, 8008124 <_malloc_r+0x90>
 80080cc:	4629      	mov	r1, r5
 80080ce:	4638      	mov	r0, r7
 80080d0:	f7ff ffc0 	bl	8008054 <sbrk_aligned>
 80080d4:	1c43      	adds	r3, r0, #1
 80080d6:	4604      	mov	r4, r0
 80080d8:	d155      	bne.n	8008186 <_malloc_r+0xf2>
 80080da:	f8d8 4000 	ldr.w	r4, [r8]
 80080de:	4626      	mov	r6, r4
 80080e0:	2e00      	cmp	r6, #0
 80080e2:	d145      	bne.n	8008170 <_malloc_r+0xdc>
 80080e4:	2c00      	cmp	r4, #0
 80080e6:	d048      	beq.n	800817a <_malloc_r+0xe6>
 80080e8:	6823      	ldr	r3, [r4, #0]
 80080ea:	4631      	mov	r1, r6
 80080ec:	4638      	mov	r0, r7
 80080ee:	eb04 0903 	add.w	r9, r4, r3
 80080f2:	f000 fc73 	bl	80089dc <_sbrk_r>
 80080f6:	4581      	cmp	r9, r0
 80080f8:	d13f      	bne.n	800817a <_malloc_r+0xe6>
 80080fa:	6821      	ldr	r1, [r4, #0]
 80080fc:	1a6d      	subs	r5, r5, r1
 80080fe:	4629      	mov	r1, r5
 8008100:	4638      	mov	r0, r7
 8008102:	f7ff ffa7 	bl	8008054 <sbrk_aligned>
 8008106:	3001      	adds	r0, #1
 8008108:	d037      	beq.n	800817a <_malloc_r+0xe6>
 800810a:	6823      	ldr	r3, [r4, #0]
 800810c:	442b      	add	r3, r5
 800810e:	6023      	str	r3, [r4, #0]
 8008110:	f8d8 3000 	ldr.w	r3, [r8]
 8008114:	2b00      	cmp	r3, #0
 8008116:	d038      	beq.n	800818a <_malloc_r+0xf6>
 8008118:	685a      	ldr	r2, [r3, #4]
 800811a:	42a2      	cmp	r2, r4
 800811c:	d12b      	bne.n	8008176 <_malloc_r+0xe2>
 800811e:	2200      	movs	r2, #0
 8008120:	605a      	str	r2, [r3, #4]
 8008122:	e00f      	b.n	8008144 <_malloc_r+0xb0>
 8008124:	6822      	ldr	r2, [r4, #0]
 8008126:	1b52      	subs	r2, r2, r5
 8008128:	d41f      	bmi.n	800816a <_malloc_r+0xd6>
 800812a:	2a0b      	cmp	r2, #11
 800812c:	d917      	bls.n	800815e <_malloc_r+0xca>
 800812e:	1961      	adds	r1, r4, r5
 8008130:	42a3      	cmp	r3, r4
 8008132:	6025      	str	r5, [r4, #0]
 8008134:	bf18      	it	ne
 8008136:	6059      	strne	r1, [r3, #4]
 8008138:	6863      	ldr	r3, [r4, #4]
 800813a:	bf08      	it	eq
 800813c:	f8c8 1000 	streq.w	r1, [r8]
 8008140:	5162      	str	r2, [r4, r5]
 8008142:	604b      	str	r3, [r1, #4]
 8008144:	4638      	mov	r0, r7
 8008146:	f104 060b 	add.w	r6, r4, #11
 800814a:	f000 f829 	bl	80081a0 <__malloc_unlock>
 800814e:	f026 0607 	bic.w	r6, r6, #7
 8008152:	1d23      	adds	r3, r4, #4
 8008154:	1af2      	subs	r2, r6, r3
 8008156:	d0ae      	beq.n	80080b6 <_malloc_r+0x22>
 8008158:	1b9b      	subs	r3, r3, r6
 800815a:	50a3      	str	r3, [r4, r2]
 800815c:	e7ab      	b.n	80080b6 <_malloc_r+0x22>
 800815e:	42a3      	cmp	r3, r4
 8008160:	6862      	ldr	r2, [r4, #4]
 8008162:	d1dd      	bne.n	8008120 <_malloc_r+0x8c>
 8008164:	f8c8 2000 	str.w	r2, [r8]
 8008168:	e7ec      	b.n	8008144 <_malloc_r+0xb0>
 800816a:	4623      	mov	r3, r4
 800816c:	6864      	ldr	r4, [r4, #4]
 800816e:	e7ac      	b.n	80080ca <_malloc_r+0x36>
 8008170:	4634      	mov	r4, r6
 8008172:	6876      	ldr	r6, [r6, #4]
 8008174:	e7b4      	b.n	80080e0 <_malloc_r+0x4c>
 8008176:	4613      	mov	r3, r2
 8008178:	e7cc      	b.n	8008114 <_malloc_r+0x80>
 800817a:	230c      	movs	r3, #12
 800817c:	603b      	str	r3, [r7, #0]
 800817e:	4638      	mov	r0, r7
 8008180:	f000 f80e 	bl	80081a0 <__malloc_unlock>
 8008184:	e797      	b.n	80080b6 <_malloc_r+0x22>
 8008186:	6025      	str	r5, [r4, #0]
 8008188:	e7dc      	b.n	8008144 <_malloc_r+0xb0>
 800818a:	605b      	str	r3, [r3, #4]
 800818c:	deff      	udf	#255	; 0xff
 800818e:	bf00      	nop
 8008190:	20004b9c 	.word	0x20004b9c

08008194 <__malloc_lock>:
 8008194:	4801      	ldr	r0, [pc, #4]	; (800819c <__malloc_lock+0x8>)
 8008196:	f7ff bf00 	b.w	8007f9a <__retarget_lock_acquire_recursive>
 800819a:	bf00      	nop
 800819c:	20004b98 	.word	0x20004b98

080081a0 <__malloc_unlock>:
 80081a0:	4801      	ldr	r0, [pc, #4]	; (80081a8 <__malloc_unlock+0x8>)
 80081a2:	f7ff befb 	b.w	8007f9c <__retarget_lock_release_recursive>
 80081a6:	bf00      	nop
 80081a8:	20004b98 	.word	0x20004b98

080081ac <__sfputc_r>:
 80081ac:	6893      	ldr	r3, [r2, #8]
 80081ae:	3b01      	subs	r3, #1
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	b410      	push	{r4}
 80081b4:	6093      	str	r3, [r2, #8]
 80081b6:	da08      	bge.n	80081ca <__sfputc_r+0x1e>
 80081b8:	6994      	ldr	r4, [r2, #24]
 80081ba:	42a3      	cmp	r3, r4
 80081bc:	db01      	blt.n	80081c2 <__sfputc_r+0x16>
 80081be:	290a      	cmp	r1, #10
 80081c0:	d103      	bne.n	80081ca <__sfputc_r+0x1e>
 80081c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081c6:	f000 bb73 	b.w	80088b0 <__swbuf_r>
 80081ca:	6813      	ldr	r3, [r2, #0]
 80081cc:	1c58      	adds	r0, r3, #1
 80081ce:	6010      	str	r0, [r2, #0]
 80081d0:	7019      	strb	r1, [r3, #0]
 80081d2:	4608      	mov	r0, r1
 80081d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80081d8:	4770      	bx	lr

080081da <__sfputs_r>:
 80081da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081dc:	4606      	mov	r6, r0
 80081de:	460f      	mov	r7, r1
 80081e0:	4614      	mov	r4, r2
 80081e2:	18d5      	adds	r5, r2, r3
 80081e4:	42ac      	cmp	r4, r5
 80081e6:	d101      	bne.n	80081ec <__sfputs_r+0x12>
 80081e8:	2000      	movs	r0, #0
 80081ea:	e007      	b.n	80081fc <__sfputs_r+0x22>
 80081ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f0:	463a      	mov	r2, r7
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ffda 	bl	80081ac <__sfputc_r>
 80081f8:	1c43      	adds	r3, r0, #1
 80081fa:	d1f3      	bne.n	80081e4 <__sfputs_r+0xa>
 80081fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008200 <_vfiprintf_r>:
 8008200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008204:	460d      	mov	r5, r1
 8008206:	b09d      	sub	sp, #116	; 0x74
 8008208:	4614      	mov	r4, r2
 800820a:	4698      	mov	r8, r3
 800820c:	4606      	mov	r6, r0
 800820e:	b118      	cbz	r0, 8008218 <_vfiprintf_r+0x18>
 8008210:	6a03      	ldr	r3, [r0, #32]
 8008212:	b90b      	cbnz	r3, 8008218 <_vfiprintf_r+0x18>
 8008214:	f7ff fd66 	bl	8007ce4 <__sinit>
 8008218:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800821a:	07d9      	lsls	r1, r3, #31
 800821c:	d405      	bmi.n	800822a <_vfiprintf_r+0x2a>
 800821e:	89ab      	ldrh	r3, [r5, #12]
 8008220:	059a      	lsls	r2, r3, #22
 8008222:	d402      	bmi.n	800822a <_vfiprintf_r+0x2a>
 8008224:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008226:	f7ff feb8 	bl	8007f9a <__retarget_lock_acquire_recursive>
 800822a:	89ab      	ldrh	r3, [r5, #12]
 800822c:	071b      	lsls	r3, r3, #28
 800822e:	d501      	bpl.n	8008234 <_vfiprintf_r+0x34>
 8008230:	692b      	ldr	r3, [r5, #16]
 8008232:	b99b      	cbnz	r3, 800825c <_vfiprintf_r+0x5c>
 8008234:	4629      	mov	r1, r5
 8008236:	4630      	mov	r0, r6
 8008238:	f000 fb78 	bl	800892c <__swsetup_r>
 800823c:	b170      	cbz	r0, 800825c <_vfiprintf_r+0x5c>
 800823e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008240:	07dc      	lsls	r4, r3, #31
 8008242:	d504      	bpl.n	800824e <_vfiprintf_r+0x4e>
 8008244:	f04f 30ff 	mov.w	r0, #4294967295
 8008248:	b01d      	add	sp, #116	; 0x74
 800824a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800824e:	89ab      	ldrh	r3, [r5, #12]
 8008250:	0598      	lsls	r0, r3, #22
 8008252:	d4f7      	bmi.n	8008244 <_vfiprintf_r+0x44>
 8008254:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008256:	f7ff fea1 	bl	8007f9c <__retarget_lock_release_recursive>
 800825a:	e7f3      	b.n	8008244 <_vfiprintf_r+0x44>
 800825c:	2300      	movs	r3, #0
 800825e:	9309      	str	r3, [sp, #36]	; 0x24
 8008260:	2320      	movs	r3, #32
 8008262:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008266:	f8cd 800c 	str.w	r8, [sp, #12]
 800826a:	2330      	movs	r3, #48	; 0x30
 800826c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008420 <_vfiprintf_r+0x220>
 8008270:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008274:	f04f 0901 	mov.w	r9, #1
 8008278:	4623      	mov	r3, r4
 800827a:	469a      	mov	sl, r3
 800827c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008280:	b10a      	cbz	r2, 8008286 <_vfiprintf_r+0x86>
 8008282:	2a25      	cmp	r2, #37	; 0x25
 8008284:	d1f9      	bne.n	800827a <_vfiprintf_r+0x7a>
 8008286:	ebba 0b04 	subs.w	fp, sl, r4
 800828a:	d00b      	beq.n	80082a4 <_vfiprintf_r+0xa4>
 800828c:	465b      	mov	r3, fp
 800828e:	4622      	mov	r2, r4
 8008290:	4629      	mov	r1, r5
 8008292:	4630      	mov	r0, r6
 8008294:	f7ff ffa1 	bl	80081da <__sfputs_r>
 8008298:	3001      	adds	r0, #1
 800829a:	f000 80a9 	beq.w	80083f0 <_vfiprintf_r+0x1f0>
 800829e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80082a0:	445a      	add	r2, fp
 80082a2:	9209      	str	r2, [sp, #36]	; 0x24
 80082a4:	f89a 3000 	ldrb.w	r3, [sl]
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80a1 	beq.w	80083f0 <_vfiprintf_r+0x1f0>
 80082ae:	2300      	movs	r3, #0
 80082b0:	f04f 32ff 	mov.w	r2, #4294967295
 80082b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80082b8:	f10a 0a01 	add.w	sl, sl, #1
 80082bc:	9304      	str	r3, [sp, #16]
 80082be:	9307      	str	r3, [sp, #28]
 80082c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80082c4:	931a      	str	r3, [sp, #104]	; 0x68
 80082c6:	4654      	mov	r4, sl
 80082c8:	2205      	movs	r2, #5
 80082ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ce:	4854      	ldr	r0, [pc, #336]	; (8008420 <_vfiprintf_r+0x220>)
 80082d0:	f7f7 ff7e 	bl	80001d0 <memchr>
 80082d4:	9a04      	ldr	r2, [sp, #16]
 80082d6:	b9d8      	cbnz	r0, 8008310 <_vfiprintf_r+0x110>
 80082d8:	06d1      	lsls	r1, r2, #27
 80082da:	bf44      	itt	mi
 80082dc:	2320      	movmi	r3, #32
 80082de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082e2:	0713      	lsls	r3, r2, #28
 80082e4:	bf44      	itt	mi
 80082e6:	232b      	movmi	r3, #43	; 0x2b
 80082e8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082ec:	f89a 3000 	ldrb.w	r3, [sl]
 80082f0:	2b2a      	cmp	r3, #42	; 0x2a
 80082f2:	d015      	beq.n	8008320 <_vfiprintf_r+0x120>
 80082f4:	9a07      	ldr	r2, [sp, #28]
 80082f6:	4654      	mov	r4, sl
 80082f8:	2000      	movs	r0, #0
 80082fa:	f04f 0c0a 	mov.w	ip, #10
 80082fe:	4621      	mov	r1, r4
 8008300:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008304:	3b30      	subs	r3, #48	; 0x30
 8008306:	2b09      	cmp	r3, #9
 8008308:	d94d      	bls.n	80083a6 <_vfiprintf_r+0x1a6>
 800830a:	b1b0      	cbz	r0, 800833a <_vfiprintf_r+0x13a>
 800830c:	9207      	str	r2, [sp, #28]
 800830e:	e014      	b.n	800833a <_vfiprintf_r+0x13a>
 8008310:	eba0 0308 	sub.w	r3, r0, r8
 8008314:	fa09 f303 	lsl.w	r3, r9, r3
 8008318:	4313      	orrs	r3, r2
 800831a:	9304      	str	r3, [sp, #16]
 800831c:	46a2      	mov	sl, r4
 800831e:	e7d2      	b.n	80082c6 <_vfiprintf_r+0xc6>
 8008320:	9b03      	ldr	r3, [sp, #12]
 8008322:	1d19      	adds	r1, r3, #4
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	9103      	str	r1, [sp, #12]
 8008328:	2b00      	cmp	r3, #0
 800832a:	bfbb      	ittet	lt
 800832c:	425b      	neglt	r3, r3
 800832e:	f042 0202 	orrlt.w	r2, r2, #2
 8008332:	9307      	strge	r3, [sp, #28]
 8008334:	9307      	strlt	r3, [sp, #28]
 8008336:	bfb8      	it	lt
 8008338:	9204      	strlt	r2, [sp, #16]
 800833a:	7823      	ldrb	r3, [r4, #0]
 800833c:	2b2e      	cmp	r3, #46	; 0x2e
 800833e:	d10c      	bne.n	800835a <_vfiprintf_r+0x15a>
 8008340:	7863      	ldrb	r3, [r4, #1]
 8008342:	2b2a      	cmp	r3, #42	; 0x2a
 8008344:	d134      	bne.n	80083b0 <_vfiprintf_r+0x1b0>
 8008346:	9b03      	ldr	r3, [sp, #12]
 8008348:	1d1a      	adds	r2, r3, #4
 800834a:	681b      	ldr	r3, [r3, #0]
 800834c:	9203      	str	r2, [sp, #12]
 800834e:	2b00      	cmp	r3, #0
 8008350:	bfb8      	it	lt
 8008352:	f04f 33ff 	movlt.w	r3, #4294967295
 8008356:	3402      	adds	r4, #2
 8008358:	9305      	str	r3, [sp, #20]
 800835a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008430 <_vfiprintf_r+0x230>
 800835e:	7821      	ldrb	r1, [r4, #0]
 8008360:	2203      	movs	r2, #3
 8008362:	4650      	mov	r0, sl
 8008364:	f7f7 ff34 	bl	80001d0 <memchr>
 8008368:	b138      	cbz	r0, 800837a <_vfiprintf_r+0x17a>
 800836a:	9b04      	ldr	r3, [sp, #16]
 800836c:	eba0 000a 	sub.w	r0, r0, sl
 8008370:	2240      	movs	r2, #64	; 0x40
 8008372:	4082      	lsls	r2, r0
 8008374:	4313      	orrs	r3, r2
 8008376:	3401      	adds	r4, #1
 8008378:	9304      	str	r3, [sp, #16]
 800837a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800837e:	4829      	ldr	r0, [pc, #164]	; (8008424 <_vfiprintf_r+0x224>)
 8008380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008384:	2206      	movs	r2, #6
 8008386:	f7f7 ff23 	bl	80001d0 <memchr>
 800838a:	2800      	cmp	r0, #0
 800838c:	d03f      	beq.n	800840e <_vfiprintf_r+0x20e>
 800838e:	4b26      	ldr	r3, [pc, #152]	; (8008428 <_vfiprintf_r+0x228>)
 8008390:	bb1b      	cbnz	r3, 80083da <_vfiprintf_r+0x1da>
 8008392:	9b03      	ldr	r3, [sp, #12]
 8008394:	3307      	adds	r3, #7
 8008396:	f023 0307 	bic.w	r3, r3, #7
 800839a:	3308      	adds	r3, #8
 800839c:	9303      	str	r3, [sp, #12]
 800839e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80083a0:	443b      	add	r3, r7
 80083a2:	9309      	str	r3, [sp, #36]	; 0x24
 80083a4:	e768      	b.n	8008278 <_vfiprintf_r+0x78>
 80083a6:	fb0c 3202 	mla	r2, ip, r2, r3
 80083aa:	460c      	mov	r4, r1
 80083ac:	2001      	movs	r0, #1
 80083ae:	e7a6      	b.n	80082fe <_vfiprintf_r+0xfe>
 80083b0:	2300      	movs	r3, #0
 80083b2:	3401      	adds	r4, #1
 80083b4:	9305      	str	r3, [sp, #20]
 80083b6:	4619      	mov	r1, r3
 80083b8:	f04f 0c0a 	mov.w	ip, #10
 80083bc:	4620      	mov	r0, r4
 80083be:	f810 2b01 	ldrb.w	r2, [r0], #1
 80083c2:	3a30      	subs	r2, #48	; 0x30
 80083c4:	2a09      	cmp	r2, #9
 80083c6:	d903      	bls.n	80083d0 <_vfiprintf_r+0x1d0>
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d0c6      	beq.n	800835a <_vfiprintf_r+0x15a>
 80083cc:	9105      	str	r1, [sp, #20]
 80083ce:	e7c4      	b.n	800835a <_vfiprintf_r+0x15a>
 80083d0:	fb0c 2101 	mla	r1, ip, r1, r2
 80083d4:	4604      	mov	r4, r0
 80083d6:	2301      	movs	r3, #1
 80083d8:	e7f0      	b.n	80083bc <_vfiprintf_r+0x1bc>
 80083da:	ab03      	add	r3, sp, #12
 80083dc:	9300      	str	r3, [sp, #0]
 80083de:	462a      	mov	r2, r5
 80083e0:	4b12      	ldr	r3, [pc, #72]	; (800842c <_vfiprintf_r+0x22c>)
 80083e2:	a904      	add	r1, sp, #16
 80083e4:	4630      	mov	r0, r6
 80083e6:	f3af 8000 	nop.w
 80083ea:	4607      	mov	r7, r0
 80083ec:	1c78      	adds	r0, r7, #1
 80083ee:	d1d6      	bne.n	800839e <_vfiprintf_r+0x19e>
 80083f0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80083f2:	07d9      	lsls	r1, r3, #31
 80083f4:	d405      	bmi.n	8008402 <_vfiprintf_r+0x202>
 80083f6:	89ab      	ldrh	r3, [r5, #12]
 80083f8:	059a      	lsls	r2, r3, #22
 80083fa:	d402      	bmi.n	8008402 <_vfiprintf_r+0x202>
 80083fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80083fe:	f7ff fdcd 	bl	8007f9c <__retarget_lock_release_recursive>
 8008402:	89ab      	ldrh	r3, [r5, #12]
 8008404:	065b      	lsls	r3, r3, #25
 8008406:	f53f af1d 	bmi.w	8008244 <_vfiprintf_r+0x44>
 800840a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800840c:	e71c      	b.n	8008248 <_vfiprintf_r+0x48>
 800840e:	ab03      	add	r3, sp, #12
 8008410:	9300      	str	r3, [sp, #0]
 8008412:	462a      	mov	r2, r5
 8008414:	4b05      	ldr	r3, [pc, #20]	; (800842c <_vfiprintf_r+0x22c>)
 8008416:	a904      	add	r1, sp, #16
 8008418:	4630      	mov	r0, r6
 800841a:	f000 f879 	bl	8008510 <_printf_i>
 800841e:	e7e4      	b.n	80083ea <_vfiprintf_r+0x1ea>
 8008420:	08008cec 	.word	0x08008cec
 8008424:	08008cf6 	.word	0x08008cf6
 8008428:	00000000 	.word	0x00000000
 800842c:	080081db 	.word	0x080081db
 8008430:	08008cf2 	.word	0x08008cf2

08008434 <_printf_common>:
 8008434:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008438:	4616      	mov	r6, r2
 800843a:	4699      	mov	r9, r3
 800843c:	688a      	ldr	r2, [r1, #8]
 800843e:	690b      	ldr	r3, [r1, #16]
 8008440:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008444:	4293      	cmp	r3, r2
 8008446:	bfb8      	it	lt
 8008448:	4613      	movlt	r3, r2
 800844a:	6033      	str	r3, [r6, #0]
 800844c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008450:	4607      	mov	r7, r0
 8008452:	460c      	mov	r4, r1
 8008454:	b10a      	cbz	r2, 800845a <_printf_common+0x26>
 8008456:	3301      	adds	r3, #1
 8008458:	6033      	str	r3, [r6, #0]
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	0699      	lsls	r1, r3, #26
 800845e:	bf42      	ittt	mi
 8008460:	6833      	ldrmi	r3, [r6, #0]
 8008462:	3302      	addmi	r3, #2
 8008464:	6033      	strmi	r3, [r6, #0]
 8008466:	6825      	ldr	r5, [r4, #0]
 8008468:	f015 0506 	ands.w	r5, r5, #6
 800846c:	d106      	bne.n	800847c <_printf_common+0x48>
 800846e:	f104 0a19 	add.w	sl, r4, #25
 8008472:	68e3      	ldr	r3, [r4, #12]
 8008474:	6832      	ldr	r2, [r6, #0]
 8008476:	1a9b      	subs	r3, r3, r2
 8008478:	42ab      	cmp	r3, r5
 800847a:	dc26      	bgt.n	80084ca <_printf_common+0x96>
 800847c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008480:	1e13      	subs	r3, r2, #0
 8008482:	6822      	ldr	r2, [r4, #0]
 8008484:	bf18      	it	ne
 8008486:	2301      	movne	r3, #1
 8008488:	0692      	lsls	r2, r2, #26
 800848a:	d42b      	bmi.n	80084e4 <_printf_common+0xb0>
 800848c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008490:	4649      	mov	r1, r9
 8008492:	4638      	mov	r0, r7
 8008494:	47c0      	blx	r8
 8008496:	3001      	adds	r0, #1
 8008498:	d01e      	beq.n	80084d8 <_printf_common+0xa4>
 800849a:	6823      	ldr	r3, [r4, #0]
 800849c:	6922      	ldr	r2, [r4, #16]
 800849e:	f003 0306 	and.w	r3, r3, #6
 80084a2:	2b04      	cmp	r3, #4
 80084a4:	bf02      	ittt	eq
 80084a6:	68e5      	ldreq	r5, [r4, #12]
 80084a8:	6833      	ldreq	r3, [r6, #0]
 80084aa:	1aed      	subeq	r5, r5, r3
 80084ac:	68a3      	ldr	r3, [r4, #8]
 80084ae:	bf0c      	ite	eq
 80084b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80084b4:	2500      	movne	r5, #0
 80084b6:	4293      	cmp	r3, r2
 80084b8:	bfc4      	itt	gt
 80084ba:	1a9b      	subgt	r3, r3, r2
 80084bc:	18ed      	addgt	r5, r5, r3
 80084be:	2600      	movs	r6, #0
 80084c0:	341a      	adds	r4, #26
 80084c2:	42b5      	cmp	r5, r6
 80084c4:	d11a      	bne.n	80084fc <_printf_common+0xc8>
 80084c6:	2000      	movs	r0, #0
 80084c8:	e008      	b.n	80084dc <_printf_common+0xa8>
 80084ca:	2301      	movs	r3, #1
 80084cc:	4652      	mov	r2, sl
 80084ce:	4649      	mov	r1, r9
 80084d0:	4638      	mov	r0, r7
 80084d2:	47c0      	blx	r8
 80084d4:	3001      	adds	r0, #1
 80084d6:	d103      	bne.n	80084e0 <_printf_common+0xac>
 80084d8:	f04f 30ff 	mov.w	r0, #4294967295
 80084dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084e0:	3501      	adds	r5, #1
 80084e2:	e7c6      	b.n	8008472 <_printf_common+0x3e>
 80084e4:	18e1      	adds	r1, r4, r3
 80084e6:	1c5a      	adds	r2, r3, #1
 80084e8:	2030      	movs	r0, #48	; 0x30
 80084ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084ee:	4422      	add	r2, r4
 80084f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084f8:	3302      	adds	r3, #2
 80084fa:	e7c7      	b.n	800848c <_printf_common+0x58>
 80084fc:	2301      	movs	r3, #1
 80084fe:	4622      	mov	r2, r4
 8008500:	4649      	mov	r1, r9
 8008502:	4638      	mov	r0, r7
 8008504:	47c0      	blx	r8
 8008506:	3001      	adds	r0, #1
 8008508:	d0e6      	beq.n	80084d8 <_printf_common+0xa4>
 800850a:	3601      	adds	r6, #1
 800850c:	e7d9      	b.n	80084c2 <_printf_common+0x8e>
	...

08008510 <_printf_i>:
 8008510:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008514:	7e0f      	ldrb	r7, [r1, #24]
 8008516:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008518:	2f78      	cmp	r7, #120	; 0x78
 800851a:	4691      	mov	r9, r2
 800851c:	4680      	mov	r8, r0
 800851e:	460c      	mov	r4, r1
 8008520:	469a      	mov	sl, r3
 8008522:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008526:	d807      	bhi.n	8008538 <_printf_i+0x28>
 8008528:	2f62      	cmp	r7, #98	; 0x62
 800852a:	d80a      	bhi.n	8008542 <_printf_i+0x32>
 800852c:	2f00      	cmp	r7, #0
 800852e:	f000 80d4 	beq.w	80086da <_printf_i+0x1ca>
 8008532:	2f58      	cmp	r7, #88	; 0x58
 8008534:	f000 80c0 	beq.w	80086b8 <_printf_i+0x1a8>
 8008538:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800853c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008540:	e03a      	b.n	80085b8 <_printf_i+0xa8>
 8008542:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008546:	2b15      	cmp	r3, #21
 8008548:	d8f6      	bhi.n	8008538 <_printf_i+0x28>
 800854a:	a101      	add	r1, pc, #4	; (adr r1, 8008550 <_printf_i+0x40>)
 800854c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008550:	080085a9 	.word	0x080085a9
 8008554:	080085bd 	.word	0x080085bd
 8008558:	08008539 	.word	0x08008539
 800855c:	08008539 	.word	0x08008539
 8008560:	08008539 	.word	0x08008539
 8008564:	08008539 	.word	0x08008539
 8008568:	080085bd 	.word	0x080085bd
 800856c:	08008539 	.word	0x08008539
 8008570:	08008539 	.word	0x08008539
 8008574:	08008539 	.word	0x08008539
 8008578:	08008539 	.word	0x08008539
 800857c:	080086c1 	.word	0x080086c1
 8008580:	080085e9 	.word	0x080085e9
 8008584:	0800867b 	.word	0x0800867b
 8008588:	08008539 	.word	0x08008539
 800858c:	08008539 	.word	0x08008539
 8008590:	080086e3 	.word	0x080086e3
 8008594:	08008539 	.word	0x08008539
 8008598:	080085e9 	.word	0x080085e9
 800859c:	08008539 	.word	0x08008539
 80085a0:	08008539 	.word	0x08008539
 80085a4:	08008683 	.word	0x08008683
 80085a8:	682b      	ldr	r3, [r5, #0]
 80085aa:	1d1a      	adds	r2, r3, #4
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	602a      	str	r2, [r5, #0]
 80085b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80085b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80085b8:	2301      	movs	r3, #1
 80085ba:	e09f      	b.n	80086fc <_printf_i+0x1ec>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	682b      	ldr	r3, [r5, #0]
 80085c0:	0607      	lsls	r7, r0, #24
 80085c2:	f103 0104 	add.w	r1, r3, #4
 80085c6:	6029      	str	r1, [r5, #0]
 80085c8:	d501      	bpl.n	80085ce <_printf_i+0xbe>
 80085ca:	681e      	ldr	r6, [r3, #0]
 80085cc:	e003      	b.n	80085d6 <_printf_i+0xc6>
 80085ce:	0646      	lsls	r6, r0, #25
 80085d0:	d5fb      	bpl.n	80085ca <_printf_i+0xba>
 80085d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80085d6:	2e00      	cmp	r6, #0
 80085d8:	da03      	bge.n	80085e2 <_printf_i+0xd2>
 80085da:	232d      	movs	r3, #45	; 0x2d
 80085dc:	4276      	negs	r6, r6
 80085de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085e2:	485a      	ldr	r0, [pc, #360]	; (800874c <_printf_i+0x23c>)
 80085e4:	230a      	movs	r3, #10
 80085e6:	e012      	b.n	800860e <_printf_i+0xfe>
 80085e8:	682b      	ldr	r3, [r5, #0]
 80085ea:	6820      	ldr	r0, [r4, #0]
 80085ec:	1d19      	adds	r1, r3, #4
 80085ee:	6029      	str	r1, [r5, #0]
 80085f0:	0605      	lsls	r5, r0, #24
 80085f2:	d501      	bpl.n	80085f8 <_printf_i+0xe8>
 80085f4:	681e      	ldr	r6, [r3, #0]
 80085f6:	e002      	b.n	80085fe <_printf_i+0xee>
 80085f8:	0641      	lsls	r1, r0, #25
 80085fa:	d5fb      	bpl.n	80085f4 <_printf_i+0xe4>
 80085fc:	881e      	ldrh	r6, [r3, #0]
 80085fe:	4853      	ldr	r0, [pc, #332]	; (800874c <_printf_i+0x23c>)
 8008600:	2f6f      	cmp	r7, #111	; 0x6f
 8008602:	bf0c      	ite	eq
 8008604:	2308      	moveq	r3, #8
 8008606:	230a      	movne	r3, #10
 8008608:	2100      	movs	r1, #0
 800860a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800860e:	6865      	ldr	r5, [r4, #4]
 8008610:	60a5      	str	r5, [r4, #8]
 8008612:	2d00      	cmp	r5, #0
 8008614:	bfa2      	ittt	ge
 8008616:	6821      	ldrge	r1, [r4, #0]
 8008618:	f021 0104 	bicge.w	r1, r1, #4
 800861c:	6021      	strge	r1, [r4, #0]
 800861e:	b90e      	cbnz	r6, 8008624 <_printf_i+0x114>
 8008620:	2d00      	cmp	r5, #0
 8008622:	d04b      	beq.n	80086bc <_printf_i+0x1ac>
 8008624:	4615      	mov	r5, r2
 8008626:	fbb6 f1f3 	udiv	r1, r6, r3
 800862a:	fb03 6711 	mls	r7, r3, r1, r6
 800862e:	5dc7      	ldrb	r7, [r0, r7]
 8008630:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008634:	4637      	mov	r7, r6
 8008636:	42bb      	cmp	r3, r7
 8008638:	460e      	mov	r6, r1
 800863a:	d9f4      	bls.n	8008626 <_printf_i+0x116>
 800863c:	2b08      	cmp	r3, #8
 800863e:	d10b      	bne.n	8008658 <_printf_i+0x148>
 8008640:	6823      	ldr	r3, [r4, #0]
 8008642:	07de      	lsls	r6, r3, #31
 8008644:	d508      	bpl.n	8008658 <_printf_i+0x148>
 8008646:	6923      	ldr	r3, [r4, #16]
 8008648:	6861      	ldr	r1, [r4, #4]
 800864a:	4299      	cmp	r1, r3
 800864c:	bfde      	ittt	le
 800864e:	2330      	movle	r3, #48	; 0x30
 8008650:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008654:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008658:	1b52      	subs	r2, r2, r5
 800865a:	6122      	str	r2, [r4, #16]
 800865c:	f8cd a000 	str.w	sl, [sp]
 8008660:	464b      	mov	r3, r9
 8008662:	aa03      	add	r2, sp, #12
 8008664:	4621      	mov	r1, r4
 8008666:	4640      	mov	r0, r8
 8008668:	f7ff fee4 	bl	8008434 <_printf_common>
 800866c:	3001      	adds	r0, #1
 800866e:	d14a      	bne.n	8008706 <_printf_i+0x1f6>
 8008670:	f04f 30ff 	mov.w	r0, #4294967295
 8008674:	b004      	add	sp, #16
 8008676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867a:	6823      	ldr	r3, [r4, #0]
 800867c:	f043 0320 	orr.w	r3, r3, #32
 8008680:	6023      	str	r3, [r4, #0]
 8008682:	4833      	ldr	r0, [pc, #204]	; (8008750 <_printf_i+0x240>)
 8008684:	2778      	movs	r7, #120	; 0x78
 8008686:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800868a:	6823      	ldr	r3, [r4, #0]
 800868c:	6829      	ldr	r1, [r5, #0]
 800868e:	061f      	lsls	r7, r3, #24
 8008690:	f851 6b04 	ldr.w	r6, [r1], #4
 8008694:	d402      	bmi.n	800869c <_printf_i+0x18c>
 8008696:	065f      	lsls	r7, r3, #25
 8008698:	bf48      	it	mi
 800869a:	b2b6      	uxthmi	r6, r6
 800869c:	07df      	lsls	r7, r3, #31
 800869e:	bf48      	it	mi
 80086a0:	f043 0320 	orrmi.w	r3, r3, #32
 80086a4:	6029      	str	r1, [r5, #0]
 80086a6:	bf48      	it	mi
 80086a8:	6023      	strmi	r3, [r4, #0]
 80086aa:	b91e      	cbnz	r6, 80086b4 <_printf_i+0x1a4>
 80086ac:	6823      	ldr	r3, [r4, #0]
 80086ae:	f023 0320 	bic.w	r3, r3, #32
 80086b2:	6023      	str	r3, [r4, #0]
 80086b4:	2310      	movs	r3, #16
 80086b6:	e7a7      	b.n	8008608 <_printf_i+0xf8>
 80086b8:	4824      	ldr	r0, [pc, #144]	; (800874c <_printf_i+0x23c>)
 80086ba:	e7e4      	b.n	8008686 <_printf_i+0x176>
 80086bc:	4615      	mov	r5, r2
 80086be:	e7bd      	b.n	800863c <_printf_i+0x12c>
 80086c0:	682b      	ldr	r3, [r5, #0]
 80086c2:	6826      	ldr	r6, [r4, #0]
 80086c4:	6961      	ldr	r1, [r4, #20]
 80086c6:	1d18      	adds	r0, r3, #4
 80086c8:	6028      	str	r0, [r5, #0]
 80086ca:	0635      	lsls	r5, r6, #24
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	d501      	bpl.n	80086d4 <_printf_i+0x1c4>
 80086d0:	6019      	str	r1, [r3, #0]
 80086d2:	e002      	b.n	80086da <_printf_i+0x1ca>
 80086d4:	0670      	lsls	r0, r6, #25
 80086d6:	d5fb      	bpl.n	80086d0 <_printf_i+0x1c0>
 80086d8:	8019      	strh	r1, [r3, #0]
 80086da:	2300      	movs	r3, #0
 80086dc:	6123      	str	r3, [r4, #16]
 80086de:	4615      	mov	r5, r2
 80086e0:	e7bc      	b.n	800865c <_printf_i+0x14c>
 80086e2:	682b      	ldr	r3, [r5, #0]
 80086e4:	1d1a      	adds	r2, r3, #4
 80086e6:	602a      	str	r2, [r5, #0]
 80086e8:	681d      	ldr	r5, [r3, #0]
 80086ea:	6862      	ldr	r2, [r4, #4]
 80086ec:	2100      	movs	r1, #0
 80086ee:	4628      	mov	r0, r5
 80086f0:	f7f7 fd6e 	bl	80001d0 <memchr>
 80086f4:	b108      	cbz	r0, 80086fa <_printf_i+0x1ea>
 80086f6:	1b40      	subs	r0, r0, r5
 80086f8:	6060      	str	r0, [r4, #4]
 80086fa:	6863      	ldr	r3, [r4, #4]
 80086fc:	6123      	str	r3, [r4, #16]
 80086fe:	2300      	movs	r3, #0
 8008700:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008704:	e7aa      	b.n	800865c <_printf_i+0x14c>
 8008706:	6923      	ldr	r3, [r4, #16]
 8008708:	462a      	mov	r2, r5
 800870a:	4649      	mov	r1, r9
 800870c:	4640      	mov	r0, r8
 800870e:	47d0      	blx	sl
 8008710:	3001      	adds	r0, #1
 8008712:	d0ad      	beq.n	8008670 <_printf_i+0x160>
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	079b      	lsls	r3, r3, #30
 8008718:	d413      	bmi.n	8008742 <_printf_i+0x232>
 800871a:	68e0      	ldr	r0, [r4, #12]
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	4298      	cmp	r0, r3
 8008720:	bfb8      	it	lt
 8008722:	4618      	movlt	r0, r3
 8008724:	e7a6      	b.n	8008674 <_printf_i+0x164>
 8008726:	2301      	movs	r3, #1
 8008728:	4632      	mov	r2, r6
 800872a:	4649      	mov	r1, r9
 800872c:	4640      	mov	r0, r8
 800872e:	47d0      	blx	sl
 8008730:	3001      	adds	r0, #1
 8008732:	d09d      	beq.n	8008670 <_printf_i+0x160>
 8008734:	3501      	adds	r5, #1
 8008736:	68e3      	ldr	r3, [r4, #12]
 8008738:	9903      	ldr	r1, [sp, #12]
 800873a:	1a5b      	subs	r3, r3, r1
 800873c:	42ab      	cmp	r3, r5
 800873e:	dcf2      	bgt.n	8008726 <_printf_i+0x216>
 8008740:	e7eb      	b.n	800871a <_printf_i+0x20a>
 8008742:	2500      	movs	r5, #0
 8008744:	f104 0619 	add.w	r6, r4, #25
 8008748:	e7f5      	b.n	8008736 <_printf_i+0x226>
 800874a:	bf00      	nop
 800874c:	08008cfd 	.word	0x08008cfd
 8008750:	08008d0e 	.word	0x08008d0e

08008754 <__sflush_r>:
 8008754:	898a      	ldrh	r2, [r1, #12]
 8008756:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800875a:	4605      	mov	r5, r0
 800875c:	0710      	lsls	r0, r2, #28
 800875e:	460c      	mov	r4, r1
 8008760:	d458      	bmi.n	8008814 <__sflush_r+0xc0>
 8008762:	684b      	ldr	r3, [r1, #4]
 8008764:	2b00      	cmp	r3, #0
 8008766:	dc05      	bgt.n	8008774 <__sflush_r+0x20>
 8008768:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800876a:	2b00      	cmp	r3, #0
 800876c:	dc02      	bgt.n	8008774 <__sflush_r+0x20>
 800876e:	2000      	movs	r0, #0
 8008770:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008774:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008776:	2e00      	cmp	r6, #0
 8008778:	d0f9      	beq.n	800876e <__sflush_r+0x1a>
 800877a:	2300      	movs	r3, #0
 800877c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008780:	682f      	ldr	r7, [r5, #0]
 8008782:	6a21      	ldr	r1, [r4, #32]
 8008784:	602b      	str	r3, [r5, #0]
 8008786:	d032      	beq.n	80087ee <__sflush_r+0x9a>
 8008788:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800878a:	89a3      	ldrh	r3, [r4, #12]
 800878c:	075a      	lsls	r2, r3, #29
 800878e:	d505      	bpl.n	800879c <__sflush_r+0x48>
 8008790:	6863      	ldr	r3, [r4, #4]
 8008792:	1ac0      	subs	r0, r0, r3
 8008794:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008796:	b10b      	cbz	r3, 800879c <__sflush_r+0x48>
 8008798:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800879a:	1ac0      	subs	r0, r0, r3
 800879c:	2300      	movs	r3, #0
 800879e:	4602      	mov	r2, r0
 80087a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80087a2:	6a21      	ldr	r1, [r4, #32]
 80087a4:	4628      	mov	r0, r5
 80087a6:	47b0      	blx	r6
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	89a3      	ldrh	r3, [r4, #12]
 80087ac:	d106      	bne.n	80087bc <__sflush_r+0x68>
 80087ae:	6829      	ldr	r1, [r5, #0]
 80087b0:	291d      	cmp	r1, #29
 80087b2:	d82b      	bhi.n	800880c <__sflush_r+0xb8>
 80087b4:	4a29      	ldr	r2, [pc, #164]	; (800885c <__sflush_r+0x108>)
 80087b6:	410a      	asrs	r2, r1
 80087b8:	07d6      	lsls	r6, r2, #31
 80087ba:	d427      	bmi.n	800880c <__sflush_r+0xb8>
 80087bc:	2200      	movs	r2, #0
 80087be:	6062      	str	r2, [r4, #4]
 80087c0:	04d9      	lsls	r1, r3, #19
 80087c2:	6922      	ldr	r2, [r4, #16]
 80087c4:	6022      	str	r2, [r4, #0]
 80087c6:	d504      	bpl.n	80087d2 <__sflush_r+0x7e>
 80087c8:	1c42      	adds	r2, r0, #1
 80087ca:	d101      	bne.n	80087d0 <__sflush_r+0x7c>
 80087cc:	682b      	ldr	r3, [r5, #0]
 80087ce:	b903      	cbnz	r3, 80087d2 <__sflush_r+0x7e>
 80087d0:	6560      	str	r0, [r4, #84]	; 0x54
 80087d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80087d4:	602f      	str	r7, [r5, #0]
 80087d6:	2900      	cmp	r1, #0
 80087d8:	d0c9      	beq.n	800876e <__sflush_r+0x1a>
 80087da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80087de:	4299      	cmp	r1, r3
 80087e0:	d002      	beq.n	80087e8 <__sflush_r+0x94>
 80087e2:	4628      	mov	r0, r5
 80087e4:	f7ff fbea 	bl	8007fbc <_free_r>
 80087e8:	2000      	movs	r0, #0
 80087ea:	6360      	str	r0, [r4, #52]	; 0x34
 80087ec:	e7c0      	b.n	8008770 <__sflush_r+0x1c>
 80087ee:	2301      	movs	r3, #1
 80087f0:	4628      	mov	r0, r5
 80087f2:	47b0      	blx	r6
 80087f4:	1c41      	adds	r1, r0, #1
 80087f6:	d1c8      	bne.n	800878a <__sflush_r+0x36>
 80087f8:	682b      	ldr	r3, [r5, #0]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d0c5      	beq.n	800878a <__sflush_r+0x36>
 80087fe:	2b1d      	cmp	r3, #29
 8008800:	d001      	beq.n	8008806 <__sflush_r+0xb2>
 8008802:	2b16      	cmp	r3, #22
 8008804:	d101      	bne.n	800880a <__sflush_r+0xb6>
 8008806:	602f      	str	r7, [r5, #0]
 8008808:	e7b1      	b.n	800876e <__sflush_r+0x1a>
 800880a:	89a3      	ldrh	r3, [r4, #12]
 800880c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008810:	81a3      	strh	r3, [r4, #12]
 8008812:	e7ad      	b.n	8008770 <__sflush_r+0x1c>
 8008814:	690f      	ldr	r7, [r1, #16]
 8008816:	2f00      	cmp	r7, #0
 8008818:	d0a9      	beq.n	800876e <__sflush_r+0x1a>
 800881a:	0793      	lsls	r3, r2, #30
 800881c:	680e      	ldr	r6, [r1, #0]
 800881e:	bf08      	it	eq
 8008820:	694b      	ldreq	r3, [r1, #20]
 8008822:	600f      	str	r7, [r1, #0]
 8008824:	bf18      	it	ne
 8008826:	2300      	movne	r3, #0
 8008828:	eba6 0807 	sub.w	r8, r6, r7
 800882c:	608b      	str	r3, [r1, #8]
 800882e:	f1b8 0f00 	cmp.w	r8, #0
 8008832:	dd9c      	ble.n	800876e <__sflush_r+0x1a>
 8008834:	6a21      	ldr	r1, [r4, #32]
 8008836:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008838:	4643      	mov	r3, r8
 800883a:	463a      	mov	r2, r7
 800883c:	4628      	mov	r0, r5
 800883e:	47b0      	blx	r6
 8008840:	2800      	cmp	r0, #0
 8008842:	dc06      	bgt.n	8008852 <__sflush_r+0xfe>
 8008844:	89a3      	ldrh	r3, [r4, #12]
 8008846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800884a:	81a3      	strh	r3, [r4, #12]
 800884c:	f04f 30ff 	mov.w	r0, #4294967295
 8008850:	e78e      	b.n	8008770 <__sflush_r+0x1c>
 8008852:	4407      	add	r7, r0
 8008854:	eba8 0800 	sub.w	r8, r8, r0
 8008858:	e7e9      	b.n	800882e <__sflush_r+0xda>
 800885a:	bf00      	nop
 800885c:	dfbffffe 	.word	0xdfbffffe

08008860 <_fflush_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	690b      	ldr	r3, [r1, #16]
 8008864:	4605      	mov	r5, r0
 8008866:	460c      	mov	r4, r1
 8008868:	b913      	cbnz	r3, 8008870 <_fflush_r+0x10>
 800886a:	2500      	movs	r5, #0
 800886c:	4628      	mov	r0, r5
 800886e:	bd38      	pop	{r3, r4, r5, pc}
 8008870:	b118      	cbz	r0, 800887a <_fflush_r+0x1a>
 8008872:	6a03      	ldr	r3, [r0, #32]
 8008874:	b90b      	cbnz	r3, 800887a <_fflush_r+0x1a>
 8008876:	f7ff fa35 	bl	8007ce4 <__sinit>
 800887a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d0f3      	beq.n	800886a <_fflush_r+0xa>
 8008882:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008884:	07d0      	lsls	r0, r2, #31
 8008886:	d404      	bmi.n	8008892 <_fflush_r+0x32>
 8008888:	0599      	lsls	r1, r3, #22
 800888a:	d402      	bmi.n	8008892 <_fflush_r+0x32>
 800888c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888e:	f7ff fb84 	bl	8007f9a <__retarget_lock_acquire_recursive>
 8008892:	4628      	mov	r0, r5
 8008894:	4621      	mov	r1, r4
 8008896:	f7ff ff5d 	bl	8008754 <__sflush_r>
 800889a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800889c:	07da      	lsls	r2, r3, #31
 800889e:	4605      	mov	r5, r0
 80088a0:	d4e4      	bmi.n	800886c <_fflush_r+0xc>
 80088a2:	89a3      	ldrh	r3, [r4, #12]
 80088a4:	059b      	lsls	r3, r3, #22
 80088a6:	d4e1      	bmi.n	800886c <_fflush_r+0xc>
 80088a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088aa:	f7ff fb77 	bl	8007f9c <__retarget_lock_release_recursive>
 80088ae:	e7dd      	b.n	800886c <_fflush_r+0xc>

080088b0 <__swbuf_r>:
 80088b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088b2:	460e      	mov	r6, r1
 80088b4:	4614      	mov	r4, r2
 80088b6:	4605      	mov	r5, r0
 80088b8:	b118      	cbz	r0, 80088c2 <__swbuf_r+0x12>
 80088ba:	6a03      	ldr	r3, [r0, #32]
 80088bc:	b90b      	cbnz	r3, 80088c2 <__swbuf_r+0x12>
 80088be:	f7ff fa11 	bl	8007ce4 <__sinit>
 80088c2:	69a3      	ldr	r3, [r4, #24]
 80088c4:	60a3      	str	r3, [r4, #8]
 80088c6:	89a3      	ldrh	r3, [r4, #12]
 80088c8:	071a      	lsls	r2, r3, #28
 80088ca:	d525      	bpl.n	8008918 <__swbuf_r+0x68>
 80088cc:	6923      	ldr	r3, [r4, #16]
 80088ce:	b31b      	cbz	r3, 8008918 <__swbuf_r+0x68>
 80088d0:	6823      	ldr	r3, [r4, #0]
 80088d2:	6922      	ldr	r2, [r4, #16]
 80088d4:	1a98      	subs	r0, r3, r2
 80088d6:	6963      	ldr	r3, [r4, #20]
 80088d8:	b2f6      	uxtb	r6, r6
 80088da:	4283      	cmp	r3, r0
 80088dc:	4637      	mov	r7, r6
 80088de:	dc04      	bgt.n	80088ea <__swbuf_r+0x3a>
 80088e0:	4621      	mov	r1, r4
 80088e2:	4628      	mov	r0, r5
 80088e4:	f7ff ffbc 	bl	8008860 <_fflush_r>
 80088e8:	b9e0      	cbnz	r0, 8008924 <__swbuf_r+0x74>
 80088ea:	68a3      	ldr	r3, [r4, #8]
 80088ec:	3b01      	subs	r3, #1
 80088ee:	60a3      	str	r3, [r4, #8]
 80088f0:	6823      	ldr	r3, [r4, #0]
 80088f2:	1c5a      	adds	r2, r3, #1
 80088f4:	6022      	str	r2, [r4, #0]
 80088f6:	701e      	strb	r6, [r3, #0]
 80088f8:	6962      	ldr	r2, [r4, #20]
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	429a      	cmp	r2, r3
 80088fe:	d004      	beq.n	800890a <__swbuf_r+0x5a>
 8008900:	89a3      	ldrh	r3, [r4, #12]
 8008902:	07db      	lsls	r3, r3, #31
 8008904:	d506      	bpl.n	8008914 <__swbuf_r+0x64>
 8008906:	2e0a      	cmp	r6, #10
 8008908:	d104      	bne.n	8008914 <__swbuf_r+0x64>
 800890a:	4621      	mov	r1, r4
 800890c:	4628      	mov	r0, r5
 800890e:	f7ff ffa7 	bl	8008860 <_fflush_r>
 8008912:	b938      	cbnz	r0, 8008924 <__swbuf_r+0x74>
 8008914:	4638      	mov	r0, r7
 8008916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008918:	4621      	mov	r1, r4
 800891a:	4628      	mov	r0, r5
 800891c:	f000 f806 	bl	800892c <__swsetup_r>
 8008920:	2800      	cmp	r0, #0
 8008922:	d0d5      	beq.n	80088d0 <__swbuf_r+0x20>
 8008924:	f04f 37ff 	mov.w	r7, #4294967295
 8008928:	e7f4      	b.n	8008914 <__swbuf_r+0x64>
	...

0800892c <__swsetup_r>:
 800892c:	b538      	push	{r3, r4, r5, lr}
 800892e:	4b2a      	ldr	r3, [pc, #168]	; (80089d8 <__swsetup_r+0xac>)
 8008930:	4605      	mov	r5, r0
 8008932:	6818      	ldr	r0, [r3, #0]
 8008934:	460c      	mov	r4, r1
 8008936:	b118      	cbz	r0, 8008940 <__swsetup_r+0x14>
 8008938:	6a03      	ldr	r3, [r0, #32]
 800893a:	b90b      	cbnz	r3, 8008940 <__swsetup_r+0x14>
 800893c:	f7ff f9d2 	bl	8007ce4 <__sinit>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008946:	0718      	lsls	r0, r3, #28
 8008948:	d422      	bmi.n	8008990 <__swsetup_r+0x64>
 800894a:	06d9      	lsls	r1, r3, #27
 800894c:	d407      	bmi.n	800895e <__swsetup_r+0x32>
 800894e:	2309      	movs	r3, #9
 8008950:	602b      	str	r3, [r5, #0]
 8008952:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008956:	81a3      	strh	r3, [r4, #12]
 8008958:	f04f 30ff 	mov.w	r0, #4294967295
 800895c:	e034      	b.n	80089c8 <__swsetup_r+0x9c>
 800895e:	0758      	lsls	r0, r3, #29
 8008960:	d512      	bpl.n	8008988 <__swsetup_r+0x5c>
 8008962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008964:	b141      	cbz	r1, 8008978 <__swsetup_r+0x4c>
 8008966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800896a:	4299      	cmp	r1, r3
 800896c:	d002      	beq.n	8008974 <__swsetup_r+0x48>
 800896e:	4628      	mov	r0, r5
 8008970:	f7ff fb24 	bl	8007fbc <_free_r>
 8008974:	2300      	movs	r3, #0
 8008976:	6363      	str	r3, [r4, #52]	; 0x34
 8008978:	89a3      	ldrh	r3, [r4, #12]
 800897a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800897e:	81a3      	strh	r3, [r4, #12]
 8008980:	2300      	movs	r3, #0
 8008982:	6063      	str	r3, [r4, #4]
 8008984:	6923      	ldr	r3, [r4, #16]
 8008986:	6023      	str	r3, [r4, #0]
 8008988:	89a3      	ldrh	r3, [r4, #12]
 800898a:	f043 0308 	orr.w	r3, r3, #8
 800898e:	81a3      	strh	r3, [r4, #12]
 8008990:	6923      	ldr	r3, [r4, #16]
 8008992:	b94b      	cbnz	r3, 80089a8 <__swsetup_r+0x7c>
 8008994:	89a3      	ldrh	r3, [r4, #12]
 8008996:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800899a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800899e:	d003      	beq.n	80089a8 <__swsetup_r+0x7c>
 80089a0:	4621      	mov	r1, r4
 80089a2:	4628      	mov	r0, r5
 80089a4:	f000 f850 	bl	8008a48 <__smakebuf_r>
 80089a8:	89a0      	ldrh	r0, [r4, #12]
 80089aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80089ae:	f010 0301 	ands.w	r3, r0, #1
 80089b2:	d00a      	beq.n	80089ca <__swsetup_r+0x9e>
 80089b4:	2300      	movs	r3, #0
 80089b6:	60a3      	str	r3, [r4, #8]
 80089b8:	6963      	ldr	r3, [r4, #20]
 80089ba:	425b      	negs	r3, r3
 80089bc:	61a3      	str	r3, [r4, #24]
 80089be:	6923      	ldr	r3, [r4, #16]
 80089c0:	b943      	cbnz	r3, 80089d4 <__swsetup_r+0xa8>
 80089c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80089c6:	d1c4      	bne.n	8008952 <__swsetup_r+0x26>
 80089c8:	bd38      	pop	{r3, r4, r5, pc}
 80089ca:	0781      	lsls	r1, r0, #30
 80089cc:	bf58      	it	pl
 80089ce:	6963      	ldrpl	r3, [r4, #20]
 80089d0:	60a3      	str	r3, [r4, #8]
 80089d2:	e7f4      	b.n	80089be <__swsetup_r+0x92>
 80089d4:	2000      	movs	r0, #0
 80089d6:	e7f7      	b.n	80089c8 <__swsetup_r+0x9c>
 80089d8:	2000006c 	.word	0x2000006c

080089dc <_sbrk_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4d06      	ldr	r5, [pc, #24]	; (80089f8 <_sbrk_r+0x1c>)
 80089e0:	2300      	movs	r3, #0
 80089e2:	4604      	mov	r4, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	602b      	str	r3, [r5, #0]
 80089e8:	f7f8 fcd2 	bl	8001390 <_sbrk>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_sbrk_r+0x1a>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_sbrk_r+0x1a>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	20004b94 	.word	0x20004b94

080089fc <__swhatbuf_r>:
 80089fc:	b570      	push	{r4, r5, r6, lr}
 80089fe:	460c      	mov	r4, r1
 8008a00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a04:	2900      	cmp	r1, #0
 8008a06:	b096      	sub	sp, #88	; 0x58
 8008a08:	4615      	mov	r5, r2
 8008a0a:	461e      	mov	r6, r3
 8008a0c:	da0d      	bge.n	8008a2a <__swhatbuf_r+0x2e>
 8008a0e:	89a3      	ldrh	r3, [r4, #12]
 8008a10:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a14:	f04f 0100 	mov.w	r1, #0
 8008a18:	bf0c      	ite	eq
 8008a1a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a1e:	2340      	movne	r3, #64	; 0x40
 8008a20:	2000      	movs	r0, #0
 8008a22:	6031      	str	r1, [r6, #0]
 8008a24:	602b      	str	r3, [r5, #0]
 8008a26:	b016      	add	sp, #88	; 0x58
 8008a28:	bd70      	pop	{r4, r5, r6, pc}
 8008a2a:	466a      	mov	r2, sp
 8008a2c:	f000 f848 	bl	8008ac0 <_fstat_r>
 8008a30:	2800      	cmp	r0, #0
 8008a32:	dbec      	blt.n	8008a0e <__swhatbuf_r+0x12>
 8008a34:	9901      	ldr	r1, [sp, #4]
 8008a36:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a3a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a3e:	4259      	negs	r1, r3
 8008a40:	4159      	adcs	r1, r3
 8008a42:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a46:	e7eb      	b.n	8008a20 <__swhatbuf_r+0x24>

08008a48 <__smakebuf_r>:
 8008a48:	898b      	ldrh	r3, [r1, #12]
 8008a4a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a4c:	079d      	lsls	r5, r3, #30
 8008a4e:	4606      	mov	r6, r0
 8008a50:	460c      	mov	r4, r1
 8008a52:	d507      	bpl.n	8008a64 <__smakebuf_r+0x1c>
 8008a54:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a58:	6023      	str	r3, [r4, #0]
 8008a5a:	6123      	str	r3, [r4, #16]
 8008a5c:	2301      	movs	r3, #1
 8008a5e:	6163      	str	r3, [r4, #20]
 8008a60:	b002      	add	sp, #8
 8008a62:	bd70      	pop	{r4, r5, r6, pc}
 8008a64:	ab01      	add	r3, sp, #4
 8008a66:	466a      	mov	r2, sp
 8008a68:	f7ff ffc8 	bl	80089fc <__swhatbuf_r>
 8008a6c:	9900      	ldr	r1, [sp, #0]
 8008a6e:	4605      	mov	r5, r0
 8008a70:	4630      	mov	r0, r6
 8008a72:	f7ff fb0f 	bl	8008094 <_malloc_r>
 8008a76:	b948      	cbnz	r0, 8008a8c <__smakebuf_r+0x44>
 8008a78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a7c:	059a      	lsls	r2, r3, #22
 8008a7e:	d4ef      	bmi.n	8008a60 <__smakebuf_r+0x18>
 8008a80:	f023 0303 	bic.w	r3, r3, #3
 8008a84:	f043 0302 	orr.w	r3, r3, #2
 8008a88:	81a3      	strh	r3, [r4, #12]
 8008a8a:	e7e3      	b.n	8008a54 <__smakebuf_r+0xc>
 8008a8c:	89a3      	ldrh	r3, [r4, #12]
 8008a8e:	6020      	str	r0, [r4, #0]
 8008a90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008a94:	81a3      	strh	r3, [r4, #12]
 8008a96:	9b00      	ldr	r3, [sp, #0]
 8008a98:	6163      	str	r3, [r4, #20]
 8008a9a:	9b01      	ldr	r3, [sp, #4]
 8008a9c:	6120      	str	r0, [r4, #16]
 8008a9e:	b15b      	cbz	r3, 8008ab8 <__smakebuf_r+0x70>
 8008aa0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	f000 f81d 	bl	8008ae4 <_isatty_r>
 8008aaa:	b128      	cbz	r0, 8008ab8 <__smakebuf_r+0x70>
 8008aac:	89a3      	ldrh	r3, [r4, #12]
 8008aae:	f023 0303 	bic.w	r3, r3, #3
 8008ab2:	f043 0301 	orr.w	r3, r3, #1
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	89a3      	ldrh	r3, [r4, #12]
 8008aba:	431d      	orrs	r5, r3
 8008abc:	81a5      	strh	r5, [r4, #12]
 8008abe:	e7cf      	b.n	8008a60 <__smakebuf_r+0x18>

08008ac0 <_fstat_r>:
 8008ac0:	b538      	push	{r3, r4, r5, lr}
 8008ac2:	4d07      	ldr	r5, [pc, #28]	; (8008ae0 <_fstat_r+0x20>)
 8008ac4:	2300      	movs	r3, #0
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	4608      	mov	r0, r1
 8008aca:	4611      	mov	r1, r2
 8008acc:	602b      	str	r3, [r5, #0]
 8008ace:	f7f8 fc36 	bl	800133e <_fstat>
 8008ad2:	1c43      	adds	r3, r0, #1
 8008ad4:	d102      	bne.n	8008adc <_fstat_r+0x1c>
 8008ad6:	682b      	ldr	r3, [r5, #0]
 8008ad8:	b103      	cbz	r3, 8008adc <_fstat_r+0x1c>
 8008ada:	6023      	str	r3, [r4, #0]
 8008adc:	bd38      	pop	{r3, r4, r5, pc}
 8008ade:	bf00      	nop
 8008ae0:	20004b94 	.word	0x20004b94

08008ae4 <_isatty_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	4d06      	ldr	r5, [pc, #24]	; (8008b00 <_isatty_r+0x1c>)
 8008ae8:	2300      	movs	r3, #0
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	602b      	str	r3, [r5, #0]
 8008af0:	f7f8 fc35 	bl	800135e <_isatty>
 8008af4:	1c43      	adds	r3, r0, #1
 8008af6:	d102      	bne.n	8008afe <_isatty_r+0x1a>
 8008af8:	682b      	ldr	r3, [r5, #0]
 8008afa:	b103      	cbz	r3, 8008afe <_isatty_r+0x1a>
 8008afc:	6023      	str	r3, [r4, #0]
 8008afe:	bd38      	pop	{r3, r4, r5, pc}
 8008b00:	20004b94 	.word	0x20004b94

08008b04 <_init>:
 8008b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b06:	bf00      	nop
 8008b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b0a:	bc08      	pop	{r3}
 8008b0c:	469e      	mov	lr, r3
 8008b0e:	4770      	bx	lr

08008b10 <_fini>:
 8008b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b12:	bf00      	nop
 8008b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b16:	bc08      	pop	{r3}
 8008b18:	469e      	mov	lr, r3
 8008b1a:	4770      	bx	lr
