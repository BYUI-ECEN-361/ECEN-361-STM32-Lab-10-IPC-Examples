
ECEN-361-STM32-Lab-09-IPC-Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000925c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003ac  080093ec  080093ec  000193ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009798  08009798  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08009798  08009798  00019798  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080097a0  080097a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080097a0  080097a0  000197a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080097a4  080097a4  000197a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080097a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b4c  20000070  08009818  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bbc  08009818  00024bbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c675  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a7f  00000000  00000000  0003c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001818  00000000  00000000  000401d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012ab  00000000  00000000  000419f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000296b3  00000000  00000000  00042c9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a382  00000000  00000000  0006c34e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffaa6  00000000  00000000  000866d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006ed4  00000000  00000000  00186178  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  0018d04c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093d4 	.word	0x080093d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080093d4 	.word	0x080093d4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 fa99 	bl	8001ad4 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 fa88 	bl	8001ad4 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 fa7d 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 fa77 	bl	8001ad4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 fa71 	bl	8001ad4 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MultiFunctionShield_Single_Digit_Display>:
* @param digit: 1..4, pick the digit to write to
* @param value: 0..9, pick the value to display
* @retval None
*/
void MultiFunctionShield_Single_Digit_Display (int digit, int8_t value)
	{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	if (value <0) //then blank a digit
 8000614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000618:	2b00      	cmp	r3, #0
 800061a:	da06      	bge.n	800062a <MultiFunctionShield_Single_Digit_Display+0x22>
		{
		SEGMENT_VALUE[4-digit] = SEGMENT_BLANK;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f1c3 0304 	rsb	r3, r3, #4
 8000622:	21ff      	movs	r1, #255	; 0xff
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000626:	54d1      	strb	r1, [r2, r3]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
			}
		}
	}
 8000628:	e039      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
		value = (value & 0b1111) % 10 ;
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f003 020f 	and.w	r2, r3, #15
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 8000632:	fb83 1302 	smull	r1, r3, r3, r2
 8000636:	1099      	asrs	r1, r3, #2
 8000638:	17d3      	asrs	r3, r2, #31
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	460b      	mov	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1ad1      	subs	r1, r2, r3
 8000646:	460b      	mov	r3, r1
 8000648:	70fb      	strb	r3, [r7, #3]
		if ((digit <=4 ) && (digit >=0))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b04      	cmp	r3, #4
 800064e:	dc1a      	bgt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db17      	blt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
			SEGMENT_VALUE[4-digit] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000656:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 800065c:	fb83 1302 	smull	r1, r3, r3, r2
 8000660:	1099      	asrs	r1, r3, #2
 8000662:	17d3      	asrs	r3, r2, #31
 8000664:	1ac9      	subs	r1, r1, r3
 8000666:	460b      	mov	r3, r1
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f1c3 0304 	rsb	r3, r3, #4
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <MultiFunctionShield_Single_Digit_Display+0xac>)
 800067e:	5c51      	ldrb	r1, [r2, r1]
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000682:	54d1      	strb	r1, [r2, r3]
	}
 8000684:	e00b      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
			SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000686:	22bf      	movs	r2, #191	; 0xbf
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800068a:	701a      	strb	r2, [r3, #0]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
 800068c:	22bf      	movs	r2, #191	; 0xbf
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000690:	705a      	strb	r2, [r3, #1]
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000692:	22bf      	movs	r2, #191	; 0xbf
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000696:	709a      	strb	r2, [r3, #2]
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000698:	22bf      	movs	r2, #191	; 0xbf
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800069c:	70da      	strb	r2, [r3, #3]
	}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000090 	.word	0x20000090
 80006b0:	66666667 	.word	0x66666667
 80006b4:	08009504 	.word	0x08009504

080006b8 <MultiFunctionShield_Display_Two_Digits>:


void MultiFunctionShield_Display_Two_Digits (int8_t value)
// Just change the right-most 2 display digits.  Must be 0<= x <=99
	{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
 80006be:	4603      	mov	r3, r0
 80006c0:	71fb      	strb	r3, [r7, #7]
	if (value <0) {	//Display negative
 80006c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	da06      	bge.n	80006d8 <MultiFunctionShield_Display_Two_Digits+0x20>
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
 80006ca:	22bf      	movs	r2, #191	; 0xbf
 80006cc:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MultiFunctionShield_Display_Two_Digits+0x88>)
 80006ce:	709a      	strb	r2, [r3, #2]
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
 80006d0:	22bf      	movs	r2, #191	; 0xbf
 80006d2:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <MultiFunctionShield_Display_Two_Digits+0x88>)
 80006d4:	70da      	strb	r2, [r3, #3]
		{
		value = value % 99; // Just in case it's bigger
		MultiFunctionShield_Single_Digit_Display(2, (value / 10));
		MultiFunctionShield_Single_Digit_Display(1, (value % 10));
		}
	}
 80006d6:	e02e      	b.n	8000736 <MultiFunctionShield_Display_Two_Digits+0x7e>
		value = value % 99; // Just in case it's bigger
 80006d8:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MultiFunctionShield_Display_Two_Digits+0x8c>)
 80006de:	fb83 1302 	smull	r1, r3, r3, r2
 80006e2:	4413      	add	r3, r2
 80006e4:	1199      	asrs	r1, r3, #6
 80006e6:	17d3      	asrs	r3, r2, #31
 80006e8:	1ac9      	subs	r1, r1, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	005b      	lsls	r3, r3, #1
 80006ee:	440b      	add	r3, r1
 80006f0:	0159      	lsls	r1, r3, #5
 80006f2:	440b      	add	r3, r1
 80006f4:	1ad3      	subs	r3, r2, r3
 80006f6:	71fb      	strb	r3, [r7, #7]
		MultiFunctionShield_Single_Digit_Display(2, (value / 10));
 80006f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006fc:	4a12      	ldr	r2, [pc, #72]	; (8000748 <MultiFunctionShield_Display_Two_Digits+0x90>)
 80006fe:	fb82 1203 	smull	r1, r2, r2, r3
 8000702:	1092      	asrs	r2, r2, #2
 8000704:	17db      	asrs	r3, r3, #31
 8000706:	1ad3      	subs	r3, r2, r3
 8000708:	b25b      	sxtb	r3, r3
 800070a:	4619      	mov	r1, r3
 800070c:	2002      	movs	r0, #2
 800070e:	f7ff ff7b 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
		MultiFunctionShield_Single_Digit_Display(1, (value % 10));
 8000712:	f997 2007 	ldrsb.w	r2, [r7, #7]
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MultiFunctionShield_Display_Two_Digits+0x90>)
 8000718:	fb83 1302 	smull	r1, r3, r3, r2
 800071c:	1099      	asrs	r1, r3, #2
 800071e:	17d3      	asrs	r3, r2, #31
 8000720:	1ac9      	subs	r1, r1, r3
 8000722:	460b      	mov	r3, r1
 8000724:	009b      	lsls	r3, r3, #2
 8000726:	440b      	add	r3, r1
 8000728:	005b      	lsls	r3, r3, #1
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	b25b      	sxtb	r3, r3
 800072e:	4619      	mov	r1, r3
 8000730:	2001      	movs	r0, #1
 8000732:	f7ff ff69 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000090 	.word	0x20000090
 8000744:	a57eb503 	.word	0xa57eb503
 8000748:	66666667 	.word	0x66666667

0800074c <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 8000750:	2201      	movs	r2, #1
 8000752:	2180      	movs	r1, #128	; 0x80
 8000754:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000758:	f001 f9bc 	bl	8001ad4 <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 800075c:	2201      	movs	r2, #1
 800075e:	2140      	movs	r1, #64	; 0x40
 8000760:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000764:	f001 f9b6 	bl	8001ad4 <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 8000768:	2201      	movs	r2, #1
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <Clear_LEDs+0x38>)
 800076e:	f001 f9b1 	bl	8001ad4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 8000772:	2201      	movs	r2, #1
 8000774:	2120      	movs	r1, #32
 8000776:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077a:	f001 f9ab 	bl	8001ad4 <HAL_GPIO_WritePin>
#endif
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	48000400 	.word	0x48000400

08000788 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 800078c:	22ff      	movs	r2, #255	; 0xff
 800078e:	4b08      	ldr	r3, [pc, #32]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 8000790:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 8000792:	22ff      	movs	r2, #255	; 0xff
 8000794:	4b06      	ldr	r3, [pc, #24]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 8000796:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000798:	22ff      	movs	r2, #255	; 0xff
 800079a:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 800079c:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	4b03      	ldr	r3, [pc, #12]	; (80007b0 <MultiFunctionShield_Clear+0x28>)
 80007a2:	70da      	strb	r2, [r3, #3]
}
 80007a4:	bf00      	nop
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr
 80007ae:	bf00      	nop
 80007b0:	20000090 	.word	0x20000090

080007b4 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b084      	sub	sp, #16
 80007b8:	af02      	add	r7, sp, #8
 80007ba:	4603      	mov	r3, r0
 80007bc:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2120      	movs	r1, #32
 80007c2:	4816      	ldr	r0, [pc, #88]	; (800081c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 80007c4:	f001 f986 	bl	8001ad4 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007c8:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 80007ca:	4a15      	ldr	r2, [pc, #84]	; (8000820 <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 80007cc:	5cd3      	ldrb	r3, [r2, r3]
 80007ce:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007d0:	9301      	str	r3, [sp, #4]
 80007d2:	2301      	movs	r3, #1
 80007d4:	9300      	str	r3, [sp, #0]
 80007d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007da:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007de:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007e6:	f7ff fec1 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007ea:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 80007ec:	4a0d      	ldr	r2, [pc, #52]	; (8000824 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 80007ee:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 80007f0:	9301      	str	r3, [sp, #4]
 80007f2:	2301      	movs	r3, #1
 80007f4:	9300      	str	r3, [sp, #0]
 80007f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007fa:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 80007fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000802:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000806:	f7ff feb1 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 800080a:	2201      	movs	r2, #1
 800080c:	2120      	movs	r1, #32
 800080e:	4803      	ldr	r0, [pc, #12]	; (800081c <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000810:	f001 f960 	bl	8001ad4 <HAL_GPIO_WritePin>
	}
 8000814:	bf00      	nop
 8000816:	3708      	adds	r7, #8
 8000818:	46bd      	mov	sp, r7
 800081a:	bd80      	pop	{r7, pc}
 800081c:	48000400 	.word	0x48000400
 8000820:	20000090 	.word	0x20000090
 8000824:	08009510 	.word	0x08009510

08000828 <MultiFunctionShield__ISRFunc>:
	}



void MultiFunctionShield__ISRFunc(void)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 800082c:	4b16      	ldr	r3, [pc, #88]	; (8000888 <MultiFunctionShield__ISRFunc+0x60>)
 800082e:	781b      	ldrb	r3, [r3, #0]
 8000830:	b2db      	uxtb	r3, r3
 8000832:	3301      	adds	r3, #1
 8000834:	b2da      	uxtb	r2, r3
 8000836:	4b14      	ldr	r3, [pc, #80]	; (8000888 <MultiFunctionShield__ISRFunc+0x60>)
 8000838:	4611      	mov	r1, r2
 800083a:	7019      	strb	r1, [r3, #0]
 800083c:	4613      	mov	r3, r2
 800083e:	3b01      	subs	r3, #1
 8000840:	2b03      	cmp	r3, #3
 8000842:	d81e      	bhi.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
 8000844:	a201      	add	r2, pc, #4	; (adr r2, 800084c <MultiFunctionShield__ISRFunc+0x24>)
 8000846:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800084a:	bf00      	nop
 800084c:	0800085d 	.word	0x0800085d
 8000850:	08000865 	.word	0x08000865
 8000854:	0800086d 	.word	0x0800086d
 8000858:	08000875 	.word	0x08000875
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 800085c:	2000      	movs	r0, #0
 800085e:	f7ff ffa9 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 8000862:	e00e      	b.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 8000864:	2001      	movs	r0, #1
 8000866:	f7ff ffa5 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 800086a:	e00a      	b.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 800086c:	2002      	movs	r0, #2
 800086e:	f7ff ffa1 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 8000872:	e006      	b.n	8000882 <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 8000874:	2003      	movs	r0, #3
 8000876:	f7ff ff9d 	bl	80007b4 <MultiFunctionShield_WriteNumberToSegment>
 800087a:	4b03      	ldr	r3, [pc, #12]	; (8000888 <MultiFunctionShield__ISRFunc+0x60>)
 800087c:	2200      	movs	r2, #0
 800087e:	701a      	strb	r2, [r3, #0]
 8000880:	bf00      	nop
  }
}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	2000008c 	.word	0x2000008c

0800088c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000890:	f000 fe54 	bl	800153c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000894:	f000 f8ca 	bl	8000a2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000898:	f000 f970 	bl	8000b7c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800089c:	f000 f93e 	bl	8000b1c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 80008a0:	f000 f916 	bl	8000ad0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  printf("\033\143"); printf("Welcome to ECEN-361 Lab-09, <student>\n\r");
 80008a4:	483c      	ldr	r0, [pc, #240]	; (8000998 <main+0x10c>)
 80008a6:	f007 fe37 	bl	8008518 <iprintf>
 80008aa:	483c      	ldr	r0, [pc, #240]	; (800099c <main+0x110>)
 80008ac:	f007 fe34 	bl	8008518 <iprintf>
	// Start timer
	MultiFunctionShield_Clear();							// Clear the 7-seg display
 80008b0:	f7ff ff6a 	bl	8000788 <MultiFunctionShield_Clear>
	HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 80008b4:	483a      	ldr	r0, [pc, #232]	; (80009a0 <main+0x114>)
 80008b6:	f002 fd01 	bl	80032bc <HAL_TIM_Base_Start_IT>
	Clear_LEDs();
 80008ba:	f7ff ff47 	bl	800074c <Clear_LEDs>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80008be:	f003 fd39 	bl	8004334 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UpDownMutex */
  UpDownMutexHandle = osMutexNew(&UpDownMutex_attributes);
 80008c2:	4838      	ldr	r0, [pc, #224]	; (80009a4 <main+0x118>)
 80008c4:	f003 ff3f 	bl	8004746 <osMutexNew>
 80008c8:	4603      	mov	r3, r0
 80008ca:	4a37      	ldr	r2, [pc, #220]	; (80009a8 <main+0x11c>)
 80008cc:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Button_1_Semaphore */
  Button_1_SemaphoreHandle = osSemaphoreNew(1, 1, &Button_1_Semaphore_attributes);
 80008ce:	4a37      	ldr	r2, [pc, #220]	; (80009ac <main+0x120>)
 80008d0:	2101      	movs	r1, #1
 80008d2:	2001      	movs	r0, #1
 80008d4:	f004 f845 	bl	8004962 <osSemaphoreNew>
 80008d8:	4603      	mov	r3, r0
 80008da:	4a35      	ldr	r2, [pc, #212]	; (80009b0 <main+0x124>)
 80008dc:	6013      	str	r3, [r2, #0]

  /* creation of Button_2_Semaphore */
  Button_2_SemaphoreHandle = osSemaphoreNew(1, 1, &Button_2_Semaphore_attributes);
 80008de:	4a35      	ldr	r2, [pc, #212]	; (80009b4 <main+0x128>)
 80008e0:	2101      	movs	r1, #1
 80008e2:	2001      	movs	r0, #1
 80008e4:	f004 f83d 	bl	8004962 <osSemaphoreNew>
 80008e8:	4603      	mov	r3, r0
 80008ea:	4a33      	ldr	r2, [pc, #204]	; (80009b8 <main+0x12c>)
 80008ec:	6013      	str	r3, [r2, #0]

  /* creation of Button_3_Semaphore */
  Button_3_SemaphoreHandle = osSemaphoreNew(1, 1, &Button_3_Semaphore_attributes);
 80008ee:	4a33      	ldr	r2, [pc, #204]	; (80009bc <main+0x130>)
 80008f0:	2101      	movs	r1, #1
 80008f2:	2001      	movs	r0, #1
 80008f4:	f004 f835 	bl	8004962 <osSemaphoreNew>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4a31      	ldr	r2, [pc, #196]	; (80009c0 <main+0x134>)
 80008fc:	6013      	str	r3, [r2, #0]

  /* creation of Semaphore_Counting */
  Semaphore_CountingHandle = osSemaphoreNew(31, 31, &Semaphore_Counting_attributes);
 80008fe:	4a31      	ldr	r2, [pc, #196]	; (80009c4 <main+0x138>)
 8000900:	211f      	movs	r1, #31
 8000902:	201f      	movs	r0, #31
 8000904:	f004 f82d 	bl	8004962 <osSemaphoreNew>
 8000908:	4603      	mov	r3, r0
 800090a:	4a2f      	ldr	r2, [pc, #188]	; (80009c8 <main+0x13c>)
 800090c:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SW_Timer_7Seg */
  SW_Timer_7SegHandle = osTimerNew(SW_Timer_Countdown, osTimerPeriodic, NULL, &SW_Timer_7Seg_attributes);
 800090e:	4b2f      	ldr	r3, [pc, #188]	; (80009cc <main+0x140>)
 8000910:	2200      	movs	r2, #0
 8000912:	2101      	movs	r1, #1
 8000914:	482e      	ldr	r0, [pc, #184]	; (80009d0 <main+0x144>)
 8000916:	f003 fe19 	bl	800454c <osTimerNew>
 800091a:	4603      	mov	r3, r0
 800091c:	4a2d      	ldr	r2, [pc, #180]	; (80009d4 <main+0x148>)
 800091e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SemaphoreToggle */
  SemaphoreToggleHandle = osThreadNew(Semaphore_Toggle_Task, NULL, &SemaphoreToggle_attributes);
 8000920:	4a2d      	ldr	r2, [pc, #180]	; (80009d8 <main+0x14c>)
 8000922:	2100      	movs	r1, #0
 8000924:	482d      	ldr	r0, [pc, #180]	; (80009dc <main+0x150>)
 8000926:	f003 fd4f 	bl	80043c8 <osThreadNew>
 800092a:	4603      	mov	r3, r0
 800092c:	4a2c      	ldr	r2, [pc, #176]	; (80009e0 <main+0x154>)
 800092e:	6013      	str	r3, [r2, #0]

  /* creation of NotifToggle */
  NotifToggleHandle = osThreadNew(NotifyToggleTask, NULL, &NotifToggle_attributes);
 8000930:	4a2c      	ldr	r2, [pc, #176]	; (80009e4 <main+0x158>)
 8000932:	2100      	movs	r1, #0
 8000934:	482c      	ldr	r0, [pc, #176]	; (80009e8 <main+0x15c>)
 8000936:	f003 fd47 	bl	80043c8 <osThreadNew>
 800093a:	4603      	mov	r3, r0
 800093c:	4a2b      	ldr	r2, [pc, #172]	; (80009ec <main+0x160>)
 800093e:	6013      	str	r3, [r2, #0]

  /* creation of SW_Timer_Toggle */
  SW_Timer_ToggleHandle = osThreadNew(SW_Timer_Task, NULL, &SW_Timer_Toggle_attributes);
 8000940:	4a2b      	ldr	r2, [pc, #172]	; (80009f0 <main+0x164>)
 8000942:	2100      	movs	r1, #0
 8000944:	482b      	ldr	r0, [pc, #172]	; (80009f4 <main+0x168>)
 8000946:	f003 fd3f 	bl	80043c8 <osThreadNew>
 800094a:	4603      	mov	r3, r0
 800094c:	4a2a      	ldr	r2, [pc, #168]	; (80009f8 <main+0x16c>)
 800094e:	6013      	str	r3, [r2, #0]

  /* creation of Mutex_CountUp */
  Mutex_CountUpHandle = osThreadNew(Mutex_CountUpTask, NULL, &Mutex_CountUp_attributes);
 8000950:	4a2a      	ldr	r2, [pc, #168]	; (80009fc <main+0x170>)
 8000952:	2100      	movs	r1, #0
 8000954:	482a      	ldr	r0, [pc, #168]	; (8000a00 <main+0x174>)
 8000956:	f003 fd37 	bl	80043c8 <osThreadNew>
 800095a:	4603      	mov	r3, r0
 800095c:	4a29      	ldr	r2, [pc, #164]	; (8000a04 <main+0x178>)
 800095e:	6013      	str	r3, [r2, #0]

  /* creation of Mutex_CountDown */
  Mutex_CountDownHandle = osThreadNew(Mutex_CountDownTask, NULL, &Mutex_CountDown_attributes);
 8000960:	4a29      	ldr	r2, [pc, #164]	; (8000a08 <main+0x17c>)
 8000962:	2100      	movs	r1, #0
 8000964:	4829      	ldr	r0, [pc, #164]	; (8000a0c <main+0x180>)
 8000966:	f003 fd2f 	bl	80043c8 <osThreadNew>
 800096a:	4603      	mov	r3, r0
 800096c:	4a28      	ldr	r2, [pc, #160]	; (8000a10 <main+0x184>)
 800096e:	6013      	str	r3, [r2, #0]

  /* creation of UpdateGlobDisp */
  UpdateGlobDispHandle = osThreadNew(UpdateGlobDisplayProcess, NULL, &UpdateGlobDisp_attributes);
 8000970:	4a28      	ldr	r2, [pc, #160]	; (8000a14 <main+0x188>)
 8000972:	2100      	movs	r1, #0
 8000974:	4828      	ldr	r0, [pc, #160]	; (8000a18 <main+0x18c>)
 8000976:	f003 fd27 	bl	80043c8 <osThreadNew>
 800097a:	4603      	mov	r3, r0
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <main+0x190>)
 800097e:	6013      	str	r3, [r2, #0]

  /* creation of ResetGlobal */
  ResetGlobalHandle = osThreadNew(ResetGlobalTask, NULL, &ResetGlobal_attributes);
 8000980:	4a27      	ldr	r2, [pc, #156]	; (8000a20 <main+0x194>)
 8000982:	2100      	movs	r1, #0
 8000984:	4827      	ldr	r0, [pc, #156]	; (8000a24 <main+0x198>)
 8000986:	f003 fd1f 	bl	80043c8 <osThreadNew>
 800098a:	4603      	mov	r3, r0
 800098c:	4a26      	ldr	r2, [pc, #152]	; (8000a28 <main+0x19c>)
 800098e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000990:	f003 fcf4 	bl	800437c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000994:	e7fe      	b.n	8000994 <main+0x108>
 8000996:	bf00      	nop
 8000998:	080094c0 	.word	0x080094c0
 800099c:	080094c4 	.word	0x080094c4
 80009a0:	20000094 	.word	0x20000094
 80009a4:	08009620 	.word	0x08009620
 80009a8:	20000188 	.word	0x20000188
 80009ac:	08009630 	.word	0x08009630
 80009b0:	2000018c 	.word	0x2000018c
 80009b4:	08009640 	.word	0x08009640
 80009b8:	20000190 	.word	0x20000190
 80009bc:	08009650 	.word	0x08009650
 80009c0:	20000194 	.word	0x20000194
 80009c4:	08009660 	.word	0x08009660
 80009c8:	20000198 	.word	0x20000198
 80009cc:	08009610 	.word	0x08009610
 80009d0:	08000ff1 	.word	0x08000ff1
 80009d4:	20000184 	.word	0x20000184
 80009d8:	08009514 	.word	0x08009514
 80009dc:	08000e21 	.word	0x08000e21
 80009e0:	20000168 	.word	0x20000168
 80009e4:	08009538 	.word	0x08009538
 80009e8:	08000e51 	.word	0x08000e51
 80009ec:	2000016c 	.word	0x2000016c
 80009f0:	0800955c 	.word	0x0800955c
 80009f4:	08000e81 	.word	0x08000e81
 80009f8:	20000170 	.word	0x20000170
 80009fc:	08009580 	.word	0x08009580
 8000a00:	08000ed1 	.word	0x08000ed1
 8000a04:	20000174 	.word	0x20000174
 8000a08:	080095a4 	.word	0x080095a4
 8000a0c:	08000f29 	.word	0x08000f29
 8000a10:	20000178 	.word	0x20000178
 8000a14:	080095c8 	.word	0x080095c8
 8000a18:	08000f81 	.word	0x08000f81
 8000a1c:	2000017c 	.word	0x2000017c
 8000a20:	080095ec 	.word	0x080095ec
 8000a24:	08000fa1 	.word	0x08000fa1
 8000a28:	20000180 	.word	0x20000180

08000a2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b096      	sub	sp, #88	; 0x58
 8000a30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	2244      	movs	r2, #68	; 0x44
 8000a38:	2100      	movs	r1, #0
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f007 fd7e 	bl	800853c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a40:	463b      	mov	r3, r7
 8000a42:	2200      	movs	r2, #0
 8000a44:	601a      	str	r2, [r3, #0]
 8000a46:	605a      	str	r2, [r3, #4]
 8000a48:	609a      	str	r2, [r3, #8]
 8000a4a:	60da      	str	r2, [r3, #12]
 8000a4c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000a4e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000a52:	f001 f897 	bl	8001b84 <HAL_PWREx_ControlVoltageScaling>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000a5c:	f000 fb02 	bl	8001064 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a60:	2302      	movs	r3, #2
 8000a62:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a68:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a6a:	2310      	movs	r3, #16
 8000a6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a72:	2302      	movs	r3, #2
 8000a74:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000a76:	2301      	movs	r3, #1
 8000a78:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8000a7a:	230a      	movs	r3, #10
 8000a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000a7e:	2307      	movs	r3, #7
 8000a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000a82:	2302      	movs	r3, #2
 8000a84:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000a86:	2302      	movs	r3, #2
 8000a88:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4618      	mov	r0, r3
 8000a90:	f001 f8ce 	bl	8001c30 <HAL_RCC_OscConfig>
 8000a94:	4603      	mov	r3, r0
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d001      	beq.n	8000a9e <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000a9a:	f000 fae3 	bl	8001064 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a9e:	230f      	movs	r3, #15
 8000aa0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000aa2:	2303      	movs	r3, #3
 8000aa4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000ab2:	463b      	mov	r3, r7
 8000ab4:	2104      	movs	r1, #4
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fc96 	bl	80023e8 <HAL_RCC_ClockConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000ac2:	f000 facf 	bl	8001064 <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	3758      	adds	r7, #88	; 0x58
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <MX_TIM17_Init+0x48>)
 8000ad8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 8000ada:	4b0e      	ldr	r3, [pc, #56]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000adc:	f240 321f 	movw	r2, #799	; 0x31f
 8000ae0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 8000ae8:	4b0a      	ldr	r3, [pc, #40]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000aea:	2264      	movs	r2, #100	; 0x64
 8000aec:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aee:	4b09      	ldr	r3, [pc, #36]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000af4:	4b07      	ldr	r3, [pc, #28]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000b00:	4804      	ldr	r0, [pc, #16]	; (8000b14 <MX_TIM17_Init+0x44>)
 8000b02:	f002 fb83 	bl	800320c <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d001      	beq.n	8000b10 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 8000b0c:	f000 faaa 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000b10:	bf00      	nop
 8000b12:	bd80      	pop	{r7, pc}
 8000b14:	20000094 	.word	0x20000094
 8000b18:	40014800 	.word	0x40014800

08000b1c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b20:	4b14      	ldr	r3, [pc, #80]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b22:	4a15      	ldr	r2, [pc, #84]	; (8000b78 <MX_USART2_UART_Init+0x5c>)
 8000b24:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b26:	4b13      	ldr	r3, [pc, #76]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b28:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b2c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b2e:	4b11      	ldr	r3, [pc, #68]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b34:	4b0f      	ldr	r3, [pc, #60]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b3a:	4b0e      	ldr	r3, [pc, #56]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b40:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b42:	220c      	movs	r2, #12
 8000b44:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b4c:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b58:	4b06      	ldr	r3, [pc, #24]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b5e:	4805      	ldr	r0, [pc, #20]	; (8000b74 <MX_USART2_UART_Init+0x58>)
 8000b60:	f002 fdfe 	bl	8003760 <HAL_UART_Init>
 8000b64:	4603      	mov	r3, r0
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d001      	beq.n	8000b6e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b6a:	f000 fa7b 	bl	8001064 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	200000e0 	.word	0x200000e0
 8000b78:	40004400 	.word	0x40004400

08000b7c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b08a      	sub	sp, #40	; 0x28
 8000b80:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b82:	f107 0314 	add.w	r3, r7, #20
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]
 8000b8c:	609a      	str	r2, [r3, #8]
 8000b8e:	60da      	str	r2, [r3, #12]
 8000b90:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b6a      	ldr	r3, [pc, #424]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	4a69      	ldr	r2, [pc, #420]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b9e:	4b67      	ldr	r3, [pc, #412]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000ba0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000baa:	4b64      	ldr	r3, [pc, #400]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bae:	4a63      	ldr	r2, [pc, #396]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bb6:	4b61      	ldr	r3, [pc, #388]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bc2:	4b5e      	ldr	r3, [pc, #376]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc6:	4a5d      	ldr	r2, [pc, #372]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bc8:	f043 0301 	orr.w	r3, r3, #1
 8000bcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bce:	4b5b      	ldr	r3, [pc, #364]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd2:	f003 0301 	and.w	r3, r3, #1
 8000bd6:	60bb      	str	r3, [r7, #8]
 8000bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bda:	4b58      	ldr	r3, [pc, #352]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bde:	4a57      	ldr	r2, [pc, #348]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000be0:	f043 0302 	orr.w	r3, r3, #2
 8000be4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000be6:	4b55      	ldr	r3, [pc, #340]	; (8000d3c <MX_GPIO_Init+0x1c0>)
 8000be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bea:	f003 0302 	and.w	r3, r3, #2
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000bf8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bfc:	f000 ff6a 	bl	8001ad4 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000c00:	2200      	movs	r2, #0
 8000c02:	2160      	movs	r1, #96	; 0x60
 8000c04:	484e      	ldr	r0, [pc, #312]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000c06:	f000 ff65 	bl	8001ad4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000c0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c10:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c14:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c16:	2300      	movs	r3, #0
 8000c18:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000c1a:	f107 0314 	add.w	r3, r7, #20
 8000c1e:	4619      	mov	r1, r3
 8000c20:	4848      	ldr	r0, [pc, #288]	; (8000d44 <MX_GPIO_Init+0x1c8>)
 8000c22:	f000 fdad 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000c26:	2302      	movs	r3, #2
 8000c28:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c2a:	230b      	movs	r3, #11
 8000c2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	4842      	ldr	r0, [pc, #264]	; (8000d44 <MX_GPIO_Init+0x1c8>)
 8000c3a:	f000 fda1 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000c42:	230b      	movs	r3, #11
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4a:	f107 0314 	add.w	r3, r7, #20
 8000c4e:	4619      	mov	r1, r3
 8000c50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c54:	f000 fd94 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000c58:	2312      	movs	r3, #18
 8000c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c5c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c66:	f107 0314 	add.w	r3, r7, #20
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c70:	f000 fd86 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin;
 8000c74:	23e0      	movs	r3, #224	; 0xe0
 8000c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000c78:	2311      	movs	r3, #17
 8000c7a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c80:	2300      	movs	r3, #0
 8000c82:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c84:	f107 0314 	add.w	r3, r7, #20
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8e:	f000 fd77 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000c92:	2301      	movs	r3, #1
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000c96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000c9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4826      	ldr	r0, [pc, #152]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000ca8:	f000 fd6a 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin;
 8000cac:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc8:	f000 fd5a 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cd0:	2301      	movs	r3, #1
 8000cd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 0314 	add.w	r3, r7, #20
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	4817      	ldr	r0, [pc, #92]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000ce4:	f000 fd4c 	bl	8001780 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000ce8:	2340      	movs	r3, #64	; 0x40
 8000cea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cec:	2311      	movs	r3, #17
 8000cee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cf0:	2301      	movs	r3, #1
 8000cf2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000cf8:	f107 0314 	add.w	r3, r7, #20
 8000cfc:	4619      	mov	r1, r3
 8000cfe:	4810      	ldr	r0, [pc, #64]	; (8000d40 <MX_GPIO_Init+0x1c4>)
 8000d00:	f000 fd3e 	bl	8001780 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000d04:	2200      	movs	r2, #0
 8000d06:	2105      	movs	r1, #5
 8000d08:	2006      	movs	r0, #6
 8000d0a:	f000 fd0f 	bl	800172c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000d0e:	2006      	movs	r0, #6
 8000d10:	f000 fd28 	bl	8001764 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000d14:	2200      	movs	r2, #0
 8000d16:	2105      	movs	r1, #5
 8000d18:	2007      	movs	r0, #7
 8000d1a:	f000 fd07 	bl	800172c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000d1e:	2007      	movs	r0, #7
 8000d20:	f000 fd20 	bl	8001764 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2105      	movs	r1, #5
 8000d28:	200a      	movs	r0, #10
 8000d2a:	f000 fcff 	bl	800172c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000d2e:	200a      	movs	r0, #10
 8000d30:	f000 fd18 	bl	8001764 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d34:	bf00      	nop
 8000d36:	3728      	adds	r7, #40	; 0x28
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	bd80      	pop	{r7, pc}
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	48000400 	.word	0x48000400
 8000d44:	48000800 	.word	0x48000800

08000d48 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b084      	sub	sp, #16
 8000d4c:	af02      	add	r7, sp, #8
 8000d4e:	4603      	mov	r3, r0
 8000d50:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8000d52:	88fb      	ldrh	r3, [r7, #6]
 8000d54:	2b10      	cmp	r3, #16
 8000d56:	d00b      	beq.n	8000d70 <HAL_GPIO_EXTI_Callback+0x28>
 8000d58:	2b10      	cmp	r3, #16
 8000d5a:	dc23      	bgt.n	8000da4 <HAL_GPIO_EXTI_Callback+0x5c>
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d016      	beq.n	8000d8e <HAL_GPIO_EXTI_Callback+0x46>
 8000d60:	2b02      	cmp	r3, #2
 8000d62:	d11f      	bne.n	8000da4 <HAL_GPIO_EXTI_Callback+0x5c>
		{
		case Button_1_Pin:
			// Got the pin -- Give the semaphore
			osSemaphoreRelease(Button_1_SemaphoreHandle);
 8000d64:	4b11      	ldr	r3, [pc, #68]	; (8000dac <HAL_GPIO_EXTI_Callback+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f003 fed5 	bl	8004b18 <osSemaphoreRelease>
			break;
 8000d6e:	e019      	b.n	8000da4 <HAL_GPIO_EXTI_Callback+0x5c>

		case Button_2_Pin:
			osSemaphoreRelease(Button_2_SemaphoreHandle);
 8000d70:	4b0f      	ldr	r3, [pc, #60]	; (8000db0 <HAL_GPIO_EXTI_Callback+0x68>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4618      	mov	r0, r3
 8000d76:	f003 fecf 	bl	8004b18 <osSemaphoreRelease>

			xTaskNotifyFromISR(NotifToggleHandle, 0, eNoAction, pdTRUE);
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_GPIO_EXTI_Callback+0x6c>)
 8000d7c:	6818      	ldr	r0, [r3, #0]
 8000d7e:	2301      	movs	r3, #1
 8000d80:	9300      	str	r3, [sp, #0]
 8000d82:	2300      	movs	r3, #0
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	f006 f8f8 	bl	8006f7c <xTaskGenericNotifyFromISR>
			break;
 8000d8c:	e00a      	b.n	8000da4 <HAL_GPIO_EXTI_Callback+0x5c>

		case Button_3_Pin:
			srand((unsigned) uwTick );
 8000d8e:	4b0a      	ldr	r3, [pc, #40]	; (8000db8 <HAL_GPIO_EXTI_Callback+0x70>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4618      	mov	r0, r3
 8000d94:	f007 fa92 	bl	80082bc <srand>
			osSemaphoreRelease(Button_3_SemaphoreHandle);
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_GPIO_EXTI_Callback+0x74>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4618      	mov	r0, r3
 8000d9e:	f003 febb 	bl	8004b18 <osSemaphoreRelease>
			break;
 8000da2:	bf00      	nop
		}

	}
 8000da4:	bf00      	nop
 8000da6:	3708      	adds	r7, #8
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	2000018c 	.word	0x2000018c
 8000db0:	20000190 	.word	0x20000190
 8000db4:	2000016c 	.word	0x2000016c
 8000db8:	200001ec 	.word	0x200001ec
 8000dbc:	20000194 	.word	0x20000194

08000dc0 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000dc8:	1d39      	adds	r1, r7, #4
 8000dca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dce:	2201      	movs	r2, #1
 8000dd0:	4803      	ldr	r0, [pc, #12]	; (8000de0 <__io_putchar+0x20>)
 8000dd2:	f002 fd13 	bl	80037fc <HAL_UART_Transmit>

  return ch;
 8000dd6:	687b      	ldr	r3, [r7, #4]
}
 8000dd8:	4618      	mov	r0, r3
 8000dda:	3708      	adds	r7, #8
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	200000e0 	.word	0x200000e0

08000de4 <random_wait>:


int random_wait(int min)
	{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
	/* Return a random number between 200 - 300
	 * Meant to be mS for the count up or count down in the protected
	 * mutex demonstration routines
	 */
	int rand_millisec = min + (rand() % 99);
 8000dec:	f007 fa94 	bl	8008318 <rand>
 8000df0:	4602      	mov	r2, r0
 8000df2:	4b0a      	ldr	r3, [pc, #40]	; (8000e1c <random_wait+0x38>)
 8000df4:	fb83 1302 	smull	r1, r3, r3, r2
 8000df8:	4413      	add	r3, r2
 8000dfa:	1199      	asrs	r1, r3, #6
 8000dfc:	17d3      	asrs	r3, r2, #31
 8000dfe:	1ac9      	subs	r1, r1, r3
 8000e00:	460b      	mov	r3, r1
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	440b      	add	r3, r1
 8000e06:	0159      	lsls	r1, r3, #5
 8000e08:	440b      	add	r3, r1
 8000e0a:	1ad1      	subs	r1, r2, r3
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	440b      	add	r3, r1
 8000e10:	60fb      	str	r3, [r7, #12]
	return rand_millisec;
 8000e12:	68fb      	ldr	r3, [r7, #12]

	}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3710      	adds	r7, #16
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	a57eb503 	.word	0xa57eb503

08000e20 <Semaphore_Toggle_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Semaphore_Toggle_Task */
void Semaphore_Toggle_Task(void *argument)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]

	  /* USER CODE BEGIN SemaphoreToggle_Task */
	  /* Infinite loop */
	  for(;;)
	  {
		osSemaphoreAcquire(Button_1_SemaphoreHandle,100000);
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <Semaphore_Toggle_Task+0x24>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4906      	ldr	r1, [pc, #24]	; (8000e48 <Semaphore_Toggle_Task+0x28>)
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f003 fe20 	bl	8004a74 <osSemaphoreAcquire>
		HAL_GPIO_TogglePin(LED_D4_GPIO_Port , LED_D4_Pin);
 8000e34:	2140      	movs	r1, #64	; 0x40
 8000e36:	4805      	ldr	r0, [pc, #20]	; (8000e4c <Semaphore_Toggle_Task+0x2c>)
 8000e38:	f000 fe64 	bl	8001b04 <HAL_GPIO_TogglePin>
		osDelay(1);
 8000e3c:	2001      	movs	r0, #1
 8000e3e:	f003 fb55 	bl	80044ec <osDelay>
		osSemaphoreAcquire(Button_1_SemaphoreHandle,100000);
 8000e42:	e7f1      	b.n	8000e28 <Semaphore_Toggle_Task+0x8>
 8000e44:	2000018c 	.word	0x2000018c
 8000e48:	000186a0 	.word	0x000186a0
 8000e4c:	48000400 	.word	0x48000400

08000e50 <NotifyToggleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NotifyToggleTask */
void NotifyToggleTask(void *argument)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NotifyToggleTask */
  /* Infinite loop */
 unsigned int p = 0;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60fb      	str	r3, [r7, #12]
  for(;;)
  {
	xTaskNotifyWait( 0,  0, (int *)p, 100000);
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <NotifyToggleTask+0x2c>)
 8000e60:	2100      	movs	r1, #0
 8000e62:	2000      	movs	r0, #0
 8000e64:	f006 f82a 	bl	8006ebc <xTaskNotifyWait>
	HAL_GPIO_TogglePin(LED_D2_GPIO_Port , LED_D2_Pin);
 8000e68:	2140      	movs	r1, #64	; 0x40
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f000 fe49 	bl	8001b04 <HAL_GPIO_TogglePin>
    osDelay(20);
 8000e72:	2014      	movs	r0, #20
 8000e74:	f003 fb3a 	bl	80044ec <osDelay>
	xTaskNotifyWait( 0,  0, (int *)p, 100000);
 8000e78:	e7f0      	b.n	8000e5c <NotifyToggleTask+0xc>
 8000e7a:	bf00      	nop
 8000e7c:	000186a0 	.word	0x000186a0

08000e80 <SW_Timer_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SW_Timer_Task */
void SW_Timer_Task(void *argument)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b082      	sub	sp, #8
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SW_Timer_Task */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Button_2_SemaphoreHandle,100000);
 8000e88:	4b0e      	ldr	r3, [pc, #56]	; (8000ec4 <SW_Timer_Task+0x44>)
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	490e      	ldr	r1, [pc, #56]	; (8000ec8 <SW_Timer_Task+0x48>)
 8000e8e:	4618      	mov	r0, r3
 8000e90:	f003 fdf0 	bl	8004a74 <osSemaphoreAcquire>
	  // A button push starts or stops the SW Timer
	  // Button push is indicated by the semaphore
	if (osTimerIsRunning(SW_Timer_7SegHandle))
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <SW_Timer_Task+0x4c>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f003 fc38 	bl	800470e <osTimerIsRunning>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d005      	beq.n	8000eb0 <SW_Timer_Task+0x30>
		osTimerStop(SW_Timer_7SegHandle );
 8000ea4:	4b09      	ldr	r3, [pc, #36]	; (8000ecc <SW_Timer_Task+0x4c>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	f003 fbf9 	bl	80046a0 <osTimerStop>
 8000eae:	e005      	b.n	8000ebc <SW_Timer_Task+0x3c>
	else
		osTimerStart(SW_Timer_7SegHandle , 200);
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <SW_Timer_Task+0x4c>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	21c8      	movs	r1, #200	; 0xc8
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f003 fbc4 	bl	8004644 <osTimerStart>
    osDelay(1);
 8000ebc:	2001      	movs	r0, #1
 8000ebe:	f003 fb15 	bl	80044ec <osDelay>
	osSemaphoreAcquire(Button_2_SemaphoreHandle,100000);
 8000ec2:	e7e1      	b.n	8000e88 <SW_Timer_Task+0x8>
 8000ec4:	20000190 	.word	0x20000190
 8000ec8:	000186a0 	.word	0x000186a0
 8000ecc:	20000184 	.word	0x20000184

08000ed0 <Mutex_CountUpTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mutex_CountUpTask */
void Mutex_CountUpTask(void *argument)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	b082      	sub	sp, #8
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mutex_CountUpTask */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(UpDownMutexHandle,100000);
 8000ed8:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <Mutex_CountUpTask+0x4c>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4910      	ldr	r1, [pc, #64]	; (8000f20 <Mutex_CountUpTask+0x50>)
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 fcb7 	bl	8004852 <osMutexAcquire>
	  // Once we have it, we can start counting Up
	  // THe count up will be some random between 200 - 300 mS

	if (mutex_protected_count<99)
 8000ee4:	4b0f      	ldr	r3, [pc, #60]	; (8000f24 <Mutex_CountUpTask+0x54>)
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	2b62      	cmp	r3, #98	; 0x62
 8000eea:	d806      	bhi.n	8000efa <Mutex_CountUpTask+0x2a>
		mutex_protected_count++;
 8000eec:	4b0d      	ldr	r3, [pc, #52]	; (8000f24 <Mutex_CountUpTask+0x54>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	4b0b      	ldr	r3, [pc, #44]	; (8000f24 <Mutex_CountUpTask+0x54>)
 8000ef6:	701a      	strb	r2, [r3, #0]
 8000ef8:	e002      	b.n	8000f00 <Mutex_CountUpTask+0x30>
	else
		mutex_protected_count=0;
 8000efa:	4b0a      	ldr	r3, [pc, #40]	; (8000f24 <Mutex_CountUpTask+0x54>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	701a      	strb	r2, [r3, #0]
	// Done writing, so give back the mutex
	osMutexRelease(UpDownMutexHandle);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <Mutex_CountUpTask+0x4c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4618      	mov	r0, r3
 8000f06:	f003 fcef 	bl	80048e8 <osMutexRelease>
    osDelay(random_wait(300));
 8000f0a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f0e:	f7ff ff69 	bl	8000de4 <random_wait>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f003 fae9 	bl	80044ec <osDelay>
	  osMutexWait(UpDownMutexHandle,100000);
 8000f1a:	e7dd      	b.n	8000ed8 <Mutex_CountUpTask+0x8>
 8000f1c:	20000188 	.word	0x20000188
 8000f20:	000186a0 	.word	0x000186a0
 8000f24:	20000001 	.word	0x20000001

08000f28 <Mutex_CountDownTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Mutex_CountDownTask */
void Mutex_CountDownTask(void *argument)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Mutex_CountDownTask */
  /* Infinite loop */
  for(;;)
  {
	  osMutexWait(UpDownMutexHandle,100000);
 8000f30:	4b10      	ldr	r3, [pc, #64]	; (8000f74 <Mutex_CountDownTask+0x4c>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4910      	ldr	r1, [pc, #64]	; (8000f78 <Mutex_CountDownTask+0x50>)
 8000f36:	4618      	mov	r0, r3
 8000f38:	f003 fc8b 	bl	8004852 <osMutexAcquire>
	  if (mutex_protected_count<1)
 8000f3c:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <Mutex_CountDownTask+0x54>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d103      	bne.n	8000f4c <Mutex_CountDownTask+0x24>
	  		mutex_protected_count=99;
 8000f44:	4b0d      	ldr	r3, [pc, #52]	; (8000f7c <Mutex_CountDownTask+0x54>)
 8000f46:	2263      	movs	r2, #99	; 0x63
 8000f48:	701a      	strb	r2, [r3, #0]
 8000f4a:	e005      	b.n	8000f58 <Mutex_CountDownTask+0x30>
	  	else
	  		mutex_protected_count--;
 8000f4c:	4b0b      	ldr	r3, [pc, #44]	; (8000f7c <Mutex_CountDownTask+0x54>)
 8000f4e:	781b      	ldrb	r3, [r3, #0]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b2da      	uxtb	r2, r3
 8000f54:	4b09      	ldr	r3, [pc, #36]	; (8000f7c <Mutex_CountDownTask+0x54>)
 8000f56:	701a      	strb	r2, [r3, #0]
	  	// Done writing, so give back the mutex
		osMutexRelease(UpDownMutexHandle);
 8000f58:	4b06      	ldr	r3, [pc, #24]	; (8000f74 <Mutex_CountDownTask+0x4c>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f003 fcc3 	bl	80048e8 <osMutexRelease>
		osDelay(random_wait(200));
 8000f62:	20c8      	movs	r0, #200	; 0xc8
 8000f64:	f7ff ff3e 	bl	8000de4 <random_wait>
 8000f68:	4603      	mov	r3, r0
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f003 fabe 	bl	80044ec <osDelay>
	  osMutexWait(UpDownMutexHandle,100000);
 8000f70:	e7de      	b.n	8000f30 <Mutex_CountDownTask+0x8>
 8000f72:	bf00      	nop
 8000f74:	20000188 	.word	0x20000188
 8000f78:	000186a0 	.word	0x000186a0
 8000f7c:	20000001 	.word	0x20000001

08000f80 <UpdateGlobDisplayProcess>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_UpdateGlobDisplayProcess */
void UpdateGlobDisplayProcess(void *argument)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b082      	sub	sp, #8
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
   * This just puts the value of the GlobalVariable on the
   * right-most two-digits of the 7Seg Display */

  for(;;)
	  {
	  MultiFunctionShield_Display_Two_Digits(mutex_protected_count);
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <UpdateGlobDisplayProcess+0x1c>)
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fb92 	bl	80006b8 <MultiFunctionShield_Display_Two_Digits>
	  osDelay(150);	// The competing process to inc/dec are 200 - 300mS
 8000f94:	2096      	movs	r0, #150	; 0x96
 8000f96:	f003 faa9 	bl	80044ec <osDelay>
	  MultiFunctionShield_Display_Two_Digits(mutex_protected_count);
 8000f9a:	e7f5      	b.n	8000f88 <UpdateGlobDisplayProcess+0x8>
 8000f9c:	20000001 	.word	0x20000001

08000fa0 <ResetGlobalTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ResetGlobalTask */
void ResetGlobalTask(void *argument)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
		{
		/* Pressing Button 3 sets us to ask for
		 * the MUTEX protecting the global variable
		 * When we get it, we can reset the global to the middle
		 */
		osSemaphoreAcquire(Button_3_SemaphoreHandle,100000);
 8000fa8:	4b0d      	ldr	r3, [pc, #52]	; (8000fe0 <ResetGlobalTask+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	490d      	ldr	r1, [pc, #52]	; (8000fe4 <ResetGlobalTask+0x44>)
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f003 fd60 	bl	8004a74 <osSemaphoreAcquire>
		// Now we have the semaphore because the button was pressed
		osMutexWait(UpDownMutexHandle,100000);
 8000fb4:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <ResetGlobalTask+0x48>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	490a      	ldr	r1, [pc, #40]	; (8000fe4 <ResetGlobalTask+0x44>)
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f003 fc49 	bl	8004852 <osMutexAcquire>
		mutex_protected_count = Protected_Count_Initial_Value ;
 8000fc0:	4b0a      	ldr	r3, [pc, #40]	; (8000fec <ResetGlobalTask+0x4c>)
 8000fc2:	2232      	movs	r2, #50	; 0x32
 8000fc4:	701a      	strb	r2, [r3, #0]
		osDelay(5000);	// Wait for 5 seconds before making the resource available again
 8000fc6:	f241 3088 	movw	r0, #5000	; 0x1388
 8000fca:	f003 fa8f 	bl	80044ec <osDelay>
		osMutexRelease(UpDownMutexHandle);
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <ResetGlobalTask+0x48>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f003 fc88 	bl	80048e8 <osMutexRelease>
		osDelay(1);
 8000fd8:	2001      	movs	r0, #1
 8000fda:	f003 fa87 	bl	80044ec <osDelay>
		osSemaphoreAcquire(Button_3_SemaphoreHandle,100000);
 8000fde:	e7e3      	b.n	8000fa8 <ResetGlobalTask+0x8>
 8000fe0:	20000194 	.word	0x20000194
 8000fe4:	000186a0 	.word	0x000186a0
 8000fe8:	20000188 	.word	0x20000188
 8000fec:	20000001 	.word	0x20000001

08000ff0 <SW_Timer_Countdown>:
		  /* USER CODE END ResetGlobalTask */
}

/* SW_Timer_Countdown function */
void SW_Timer_Countdown(void *argument)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
	/*
	 * When the timer expires, decrement the Count and Display it
	 * on the 7-Seg Upper
	 */

	if (countdown_display == 0) countdown_display = 9;
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <SW_Timer_Countdown+0x3c>)
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d103      	bne.n	8001008 <SW_Timer_Countdown+0x18>
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <SW_Timer_Countdown+0x3c>)
 8001002:	2209      	movs	r2, #9
 8001004:	701a      	strb	r2, [r3, #0]
 8001006:	e005      	b.n	8001014 <SW_Timer_Countdown+0x24>
		else countdown_display--;
 8001008:	4b08      	ldr	r3, [pc, #32]	; (800102c <SW_Timer_Countdown+0x3c>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	3b01      	subs	r3, #1
 800100e:	b2da      	uxtb	r2, r3
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <SW_Timer_Countdown+0x3c>)
 8001012:	701a      	strb	r2, [r3, #0]

	MultiFunctionShield_Single_Digit_Display(4, countdown_display);   //put it on the left
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SW_Timer_Countdown+0x3c>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	b25b      	sxtb	r3, r3
 800101a:	4619      	mov	r1, r3
 800101c:	2004      	movs	r0, #4
 800101e:	f7ff faf3 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	// MultiFunctionShield_Single_Digit_Display(2, -1);//blank the bottom two

  /* USER CODE END SW_Timer_Countdown */
}
 8001022:	bf00      	nop
 8001024:	3708      	adds	r7, #8
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	bf00      	nop
 800102c:	20000000 	.word	0x20000000

08001030 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a07      	ldr	r2, [pc, #28]	; (800105c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001042:	f000 fa9b 	bl	800157c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim17 )
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a05      	ldr	r2, [pc, #20]	; (8001060 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d101      	bne.n	8001052 <HAL_TIM_PeriodElapsedCallback+0x22>
  {
	  MultiFunctionShield__ISRFunc();
 800104e:	f7ff fbeb 	bl	8000828 <MultiFunctionShield__ISRFunc>
  }

  /* USER CODE END Callback 1 */
}
 8001052:	bf00      	nop
 8001054:	3708      	adds	r7, #8
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40000400 	.word	0x40000400
 8001060:	20000094 	.word	0x20000094

08001064 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001068:	b672      	cpsid	i
}
 800106a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800106c:	e7fe      	b.n	800106c <Error_Handler+0x8>
	...

08001070 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_MspInit+0x4c>)
 8001078:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800107a:	4a10      	ldr	r2, [pc, #64]	; (80010bc <HAL_MspInit+0x4c>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6613      	str	r3, [r2, #96]	; 0x60
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <HAL_MspInit+0x4c>)
 8001084:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	607b      	str	r3, [r7, #4]
 800108c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <HAL_MspInit+0x4c>)
 8001090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001092:	4a0a      	ldr	r2, [pc, #40]	; (80010bc <HAL_MspInit+0x4c>)
 8001094:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001098:	6593      	str	r3, [r2, #88]	; 0x58
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <HAL_MspInit+0x4c>)
 800109c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800109e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a2:	603b      	str	r3, [r7, #0]
 80010a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80010a6:	2200      	movs	r2, #0
 80010a8:	210f      	movs	r1, #15
 80010aa:	f06f 0001 	mvn.w	r0, #1
 80010ae:	f000 fb3d 	bl	800172c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b2:	bf00      	nop
 80010b4:	3708      	adds	r7, #8
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a0d      	ldr	r2, [pc, #52]	; (8001104 <HAL_TIM_Base_MspInit+0x44>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d113      	bne.n	80010fa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 80010d2:	4b0d      	ldr	r3, [pc, #52]	; (8001108 <HAL_TIM_Base_MspInit+0x48>)
 80010d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010d6:	4a0c      	ldr	r2, [pc, #48]	; (8001108 <HAL_TIM_Base_MspInit+0x48>)
 80010d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010dc:	6613      	str	r3, [r2, #96]	; 0x60
 80010de:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_TIM_Base_MspInit+0x48>)
 80010e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80010e6:	60fb      	str	r3, [r7, #12]
 80010e8:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 80010ea:	2200      	movs	r2, #0
 80010ec:	2105      	movs	r1, #5
 80010ee:	201a      	movs	r0, #26
 80010f0:	f000 fb1c 	bl	800172c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 80010f4:	201a      	movs	r0, #26
 80010f6:	f000 fb35 	bl	8001764 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 80010fa:	bf00      	nop
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	40014800 	.word	0x40014800
 8001108:	40021000 	.word	0x40021000

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	b0ac      	sub	sp, #176	; 0xb0
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	2288      	movs	r2, #136	; 0x88
 800112a:	2100      	movs	r1, #0
 800112c:	4618      	mov	r0, r3
 800112e:	f007 fa05 	bl	800853c <memset>
  if(huart->Instance==USART2)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	4a21      	ldr	r2, [pc, #132]	; (80011bc <HAL_UART_MspInit+0xb0>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d13b      	bne.n	80011b4 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800113c:	2302      	movs	r3, #2
 800113e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001140:	2300      	movs	r3, #0
 8001142:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001144:	f107 0314 	add.w	r3, r7, #20
 8001148:	4618      	mov	r0, r3
 800114a:	f001 fba3 	bl	8002894 <HAL_RCCEx_PeriphCLKConfig>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d001      	beq.n	8001158 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001154:	f7ff ff86 	bl	8001064 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_UART_MspInit+0xb4>)
 800115a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800115c:	4a18      	ldr	r2, [pc, #96]	; (80011c0 <HAL_UART_MspInit+0xb4>)
 800115e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001162:	6593      	str	r3, [r2, #88]	; 0x58
 8001164:	4b16      	ldr	r3, [pc, #88]	; (80011c0 <HAL_UART_MspInit+0xb4>)
 8001166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001168:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116c:	613b      	str	r3, [r7, #16]
 800116e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001170:	4b13      	ldr	r3, [pc, #76]	; (80011c0 <HAL_UART_MspInit+0xb4>)
 8001172:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001174:	4a12      	ldr	r2, [pc, #72]	; (80011c0 <HAL_UART_MspInit+0xb4>)
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800117c:	4b10      	ldr	r3, [pc, #64]	; (80011c0 <HAL_UART_MspInit+0xb4>)
 800117e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001180:	f003 0301 	and.w	r3, r3, #1
 8001184:	60fb      	str	r3, [r7, #12]
 8001186:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001188:	230c      	movs	r3, #12
 800118a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001194:	2300      	movs	r3, #0
 8001196:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800119a:	2303      	movs	r3, #3
 800119c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011a0:	2307      	movs	r3, #7
 80011a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011a6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011aa:	4619      	mov	r1, r3
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011b0:	f000 fae6 	bl	8001780 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b4:	bf00      	nop
 80011b6:	37b0      	adds	r7, #176	; 0xb0
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40004400 	.word	0x40004400
 80011c0:	40021000 	.word	0x40021000

080011c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b08e      	sub	sp, #56	; 0x38
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80011d2:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_InitTick+0xe0>)
 80011d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011d6:	4a33      	ldr	r2, [pc, #204]	; (80012a4 <HAL_InitTick+0xe0>)
 80011d8:	f043 0302 	orr.w	r3, r3, #2
 80011dc:	6593      	str	r3, [r2, #88]	; 0x58
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_InitTick+0xe0>)
 80011e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	60fb      	str	r3, [r7, #12]
 80011e8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ea:	f107 0210 	add.w	r2, r7, #16
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4611      	mov	r1, r2
 80011f4:	4618      	mov	r0, r3
 80011f6:	f001 fabb 	bl	8002770 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011fa:	6a3b      	ldr	r3, [r7, #32]
 80011fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80011fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001200:	2b00      	cmp	r3, #0
 8001202:	d103      	bne.n	800120c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001204:	f001 fa88 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8001208:	6378      	str	r0, [r7, #52]	; 0x34
 800120a:	e004      	b.n	8001216 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800120c:	f001 fa84 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8001210:	4603      	mov	r3, r0
 8001212:	005b      	lsls	r3, r3, #1
 8001214:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001218:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <HAL_InitTick+0xe4>)
 800121a:	fba2 2303 	umull	r2, r3, r2, r3
 800121e:	0c9b      	lsrs	r3, r3, #18
 8001220:	3b01      	subs	r3, #1
 8001222:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8001224:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_InitTick+0xe8>)
 8001226:	4a22      	ldr	r2, [pc, #136]	; (80012b0 <HAL_InitTick+0xec>)
 8001228:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_InitTick+0xe8>)
 800122c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001230:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8001232:	4a1e      	ldr	r2, [pc, #120]	; (80012ac <HAL_InitTick+0xe8>)
 8001234:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001236:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8001238:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_InitTick+0xe8>)
 800123a:	2200      	movs	r2, #0
 800123c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_InitTick+0xe8>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001244:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_InitTick+0xe8>)
 8001246:	2200      	movs	r2, #0
 8001248:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 800124a:	4818      	ldr	r0, [pc, #96]	; (80012ac <HAL_InitTick+0xe8>)
 800124c:	f001 ffde 	bl	800320c <HAL_TIM_Base_Init>
 8001250:	4603      	mov	r3, r0
 8001252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001256:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800125a:	2b00      	cmp	r3, #0
 800125c:	d11b      	bne.n	8001296 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 800125e:	4813      	ldr	r0, [pc, #76]	; (80012ac <HAL_InitTick+0xe8>)
 8001260:	f002 f82c 	bl	80032bc <HAL_TIM_Base_Start_IT>
 8001264:	4603      	mov	r3, r0
 8001266:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800126a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800126e:	2b00      	cmp	r3, #0
 8001270:	d111      	bne.n	8001296 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001272:	201d      	movs	r0, #29
 8001274:	f000 fa76 	bl	8001764 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2b0f      	cmp	r3, #15
 800127c:	d808      	bhi.n	8001290 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 800127e:	2200      	movs	r2, #0
 8001280:	6879      	ldr	r1, [r7, #4]
 8001282:	201d      	movs	r0, #29
 8001284:	f000 fa52 	bl	800172c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001288:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_InitTick+0xf0>)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	6013      	str	r3, [r2, #0]
 800128e:	e002      	b.n	8001296 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001290:	2301      	movs	r3, #1
 8001292:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001296:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800129a:	4618      	mov	r0, r3
 800129c:	3738      	adds	r7, #56	; 0x38
 800129e:	46bd      	mov	sp, r7
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	431bde83 	.word	0x431bde83
 80012ac:	2000019c 	.word	0x2000019c
 80012b0:	40000400 	.word	0x40000400
 80012b4:	20000008 	.word	0x20000008

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 80012e8:	2001      	movs	r0, #1
 80012ea:	f000 fc25 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80012ee:	bf00      	nop
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80012f2:	b580      	push	{r7, lr}
 80012f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 80012f6:	2002      	movs	r0, #2
 80012f8:	f000 fc1e 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}

08001300 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8001304:	2010      	movs	r0, #16
 8001306:	f000 fc17 	bl	8001b38 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800130a:	bf00      	nop
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8001316:	f002 f841 	bl	800339c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000094 	.word	0x20000094

08001324 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001328:	4802      	ldr	r0, [pc, #8]	; (8001334 <TIM3_IRQHandler+0x10>)
 800132a:	f002 f837 	bl	800339c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800132e:	bf00      	nop
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	2000019c 	.word	0x2000019c

08001338 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return 1;
 800133c:	2301      	movs	r3, #1
}
 800133e:	4618      	mov	r0, r3
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <_kill>:

int _kill(int pid, int sig)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001352:	f007 f951 	bl	80085f8 <__errno>
 8001356:	4603      	mov	r3, r0
 8001358:	2216      	movs	r2, #22
 800135a:	601a      	str	r2, [r3, #0]
  return -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001360:	4618      	mov	r0, r3
 8001362:	3708      	adds	r7, #8
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <_exit>:

void _exit (int status)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001370:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f7ff ffe7 	bl	8001348 <_kill>
  while (1) {}    /* Make sure we hang here */
 800137a:	e7fe      	b.n	800137a <_exit+0x12>

0800137c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e00a      	b.n	80013a4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800138e:	f3af 8000 	nop.w
 8001392:	4601      	mov	r1, r0
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	1c5a      	adds	r2, r3, #1
 8001398:	60ba      	str	r2, [r7, #8]
 800139a:	b2ca      	uxtb	r2, r1
 800139c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	3301      	adds	r3, #1
 80013a2:	617b      	str	r3, [r7, #20]
 80013a4:	697a      	ldr	r2, [r7, #20]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dbf0      	blt.n	800138e <_read+0x12>
  }

  return len;
 80013ac:	687b      	ldr	r3, [r7, #4]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}

080013b6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80013b6:	b580      	push	{r7, lr}
 80013b8:	b086      	sub	sp, #24
 80013ba:	af00      	add	r7, sp, #0
 80013bc:	60f8      	str	r0, [r7, #12]
 80013be:	60b9      	str	r1, [r7, #8]
 80013c0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]
 80013c6:	e009      	b.n	80013dc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80013c8:	68bb      	ldr	r3, [r7, #8]
 80013ca:	1c5a      	adds	r2, r3, #1
 80013cc:	60ba      	str	r2, [r7, #8]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	4618      	mov	r0, r3
 80013d2:	f7ff fcf5 	bl	8000dc0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013d6:	697b      	ldr	r3, [r7, #20]
 80013d8:	3301      	adds	r3, #1
 80013da:	617b      	str	r3, [r7, #20]
 80013dc:	697a      	ldr	r2, [r7, #20]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	dbf1      	blt.n	80013c8 <_write+0x12>
  }
  return len;
 80013e4:	687b      	ldr	r3, [r7, #4]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3718      	adds	r7, #24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <_close>:

int _close(int file)
{
 80013ee:	b480      	push	{r7}
 80013f0:	b083      	sub	sp, #12
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	370c      	adds	r7, #12
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001406:	b480      	push	{r7}
 8001408:	b083      	sub	sp, #12
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
 800140e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001416:	605a      	str	r2, [r3, #4]
  return 0;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <_isatty>:

int _isatty(int file)
{
 8001426:	b480      	push	{r7}
 8001428:	b083      	sub	sp, #12
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800142e:	2301      	movs	r3, #1
}
 8001430:	4618      	mov	r0, r3
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143a:	4770      	bx	lr

0800143c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800143c:	b480      	push	{r7}
 800143e:	b085      	sub	sp, #20
 8001440:	af00      	add	r7, sp, #0
 8001442:	60f8      	str	r0, [r7, #12]
 8001444:	60b9      	str	r1, [r7, #8]
 8001446:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001448:	2300      	movs	r3, #0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3714      	adds	r7, #20
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr
	...

08001458 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b086      	sub	sp, #24
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001460:	4a14      	ldr	r2, [pc, #80]	; (80014b4 <_sbrk+0x5c>)
 8001462:	4b15      	ldr	r3, [pc, #84]	; (80014b8 <_sbrk+0x60>)
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800146c:	4b13      	ldr	r3, [pc, #76]	; (80014bc <_sbrk+0x64>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d102      	bne.n	800147a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001474:	4b11      	ldr	r3, [pc, #68]	; (80014bc <_sbrk+0x64>)
 8001476:	4a12      	ldr	r2, [pc, #72]	; (80014c0 <_sbrk+0x68>)
 8001478:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800147a:	4b10      	ldr	r3, [pc, #64]	; (80014bc <_sbrk+0x64>)
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	4413      	add	r3, r2
 8001482:	693a      	ldr	r2, [r7, #16]
 8001484:	429a      	cmp	r2, r3
 8001486:	d207      	bcs.n	8001498 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001488:	f007 f8b6 	bl	80085f8 <__errno>
 800148c:	4603      	mov	r3, r0
 800148e:	220c      	movs	r2, #12
 8001490:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001496:	e009      	b.n	80014ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <_sbrk+0x64>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800149e:	4b07      	ldr	r3, [pc, #28]	; (80014bc <_sbrk+0x64>)
 80014a0:	681a      	ldr	r2, [r3, #0]
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	4a05      	ldr	r2, [pc, #20]	; (80014bc <_sbrk+0x64>)
 80014a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014aa:	68fb      	ldr	r3, [r7, #12]
}
 80014ac:	4618      	mov	r0, r3
 80014ae:	3718      	adds	r7, #24
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	20018000 	.word	0x20018000
 80014b8:	00000400 	.word	0x00000400
 80014bc:	200001e8 	.word	0x200001e8
 80014c0:	20004bc0 	.word	0x20004bc0

080014c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014c8:	4b06      	ldr	r3, [pc, #24]	; (80014e4 <SystemInit+0x20>)
 80014ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ce:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <SystemInit+0x20>)
 80014d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001520 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014ec:	f7ff ffea 	bl	80014c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014f0:	480c      	ldr	r0, [pc, #48]	; (8001524 <LoopForever+0x6>)
  ldr r1, =_edata
 80014f2:	490d      	ldr	r1, [pc, #52]	; (8001528 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014f4:	4a0d      	ldr	r2, [pc, #52]	; (800152c <LoopForever+0xe>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014f8:	e002      	b.n	8001500 <LoopCopyDataInit>

080014fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014fe:	3304      	adds	r3, #4

08001500 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001500:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001502:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001504:	d3f9      	bcc.n	80014fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001506:	4a0a      	ldr	r2, [pc, #40]	; (8001530 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001508:	4c0a      	ldr	r4, [pc, #40]	; (8001534 <LoopForever+0x16>)
  movs r3, #0
 800150a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800150c:	e001      	b.n	8001512 <LoopFillZerobss>

0800150e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800150e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001510:	3204      	adds	r2, #4

08001512 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001512:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001514:	d3fb      	bcc.n	800150e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001516:	f007 f875 	bl	8008604 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800151a:	f7ff f9b7 	bl	800088c <main>

0800151e <LoopForever>:

LoopForever:
    b LoopForever
 800151e:	e7fe      	b.n	800151e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001520:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001524:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001528:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800152c:	080097a8 	.word	0x080097a8
  ldr r2, =_sbss
 8001530:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001534:	20004bbc 	.word	0x20004bbc

08001538 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001538:	e7fe      	b.n	8001538 <ADC1_2_IRQHandler>
	...

0800153c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b082      	sub	sp, #8
 8001540:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001542:	2300      	movs	r3, #0
 8001544:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001546:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <HAL_Init+0x3c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a0b      	ldr	r2, [pc, #44]	; (8001578 <HAL_Init+0x3c>)
 800154c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001550:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001552:	2003      	movs	r0, #3
 8001554:	f000 f8df 	bl	8001716 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001558:	200f      	movs	r0, #15
 800155a:	f7ff fe33 	bl	80011c4 <HAL_InitTick>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d002      	beq.n	800156a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	e001      	b.n	800156e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800156a:	f7ff fd81 	bl	8001070 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800156e:	79fb      	ldrb	r3, [r7, #7]
}
 8001570:	4618      	mov	r0, r3
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40022000 	.word	0x40022000

0800157c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001580:	4b06      	ldr	r3, [pc, #24]	; (800159c <HAL_IncTick+0x20>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	461a      	mov	r2, r3
 8001586:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <HAL_IncTick+0x24>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4413      	add	r3, r2
 800158c:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_IncTick+0x24>)
 800158e:	6013      	str	r3, [r2, #0]
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	2000000c 	.word	0x2000000c
 80015a0:	200001ec 	.word	0x200001ec

080015a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return uwTick;
 80015a8:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_GetTick+0x14>)
 80015aa:	681b      	ldr	r3, [r3, #0]
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	46bd      	mov	sp, r7
 80015b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b4:	4770      	bx	lr
 80015b6:	bf00      	nop
 80015b8:	200001ec 	.word	0x200001ec

080015bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015bc:	b480      	push	{r7}
 80015be:	b085      	sub	sp, #20
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f003 0307 	and.w	r3, r3, #7
 80015ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015cc:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015ce:	68db      	ldr	r3, [r3, #12]
 80015d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015d2:	68ba      	ldr	r2, [r7, #8]
 80015d4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015d8:	4013      	ands	r3, r2
 80015da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015e0:	68bb      	ldr	r3, [r7, #8]
 80015e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015e4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015e8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015ee:	4a04      	ldr	r2, [pc, #16]	; (8001600 <__NVIC_SetPriorityGrouping+0x44>)
 80015f0:	68bb      	ldr	r3, [r7, #8]
 80015f2:	60d3      	str	r3, [r2, #12]
}
 80015f4:	bf00      	nop
 80015f6:	3714      	adds	r7, #20
 80015f8:	46bd      	mov	sp, r7
 80015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fe:	4770      	bx	lr
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001604:	b480      	push	{r7}
 8001606:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <__NVIC_GetPriorityGrouping+0x18>)
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	0a1b      	lsrs	r3, r3, #8
 800160e:	f003 0307 	and.w	r3, r3, #7
}
 8001612:	4618      	mov	r0, r3
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	e000ed00 	.word	0xe000ed00

08001620 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	4603      	mov	r3, r0
 8001628:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800162a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800162e:	2b00      	cmp	r3, #0
 8001630:	db0b      	blt.n	800164a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001632:	79fb      	ldrb	r3, [r7, #7]
 8001634:	f003 021f 	and.w	r2, r3, #31
 8001638:	4907      	ldr	r1, [pc, #28]	; (8001658 <__NVIC_EnableIRQ+0x38>)
 800163a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163e:	095b      	lsrs	r3, r3, #5
 8001640:	2001      	movs	r0, #1
 8001642:	fa00 f202 	lsl.w	r2, r0, r2
 8001646:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800164a:	bf00      	nop
 800164c:	370c      	adds	r7, #12
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	e000e100 	.word	0xe000e100

0800165c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
 8001662:	4603      	mov	r3, r0
 8001664:	6039      	str	r1, [r7, #0]
 8001666:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001668:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800166c:	2b00      	cmp	r3, #0
 800166e:	db0a      	blt.n	8001686 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	b2da      	uxtb	r2, r3
 8001674:	490c      	ldr	r1, [pc, #48]	; (80016a8 <__NVIC_SetPriority+0x4c>)
 8001676:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800167a:	0112      	lsls	r2, r2, #4
 800167c:	b2d2      	uxtb	r2, r2
 800167e:	440b      	add	r3, r1
 8001680:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001684:	e00a      	b.n	800169c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	b2da      	uxtb	r2, r3
 800168a:	4908      	ldr	r1, [pc, #32]	; (80016ac <__NVIC_SetPriority+0x50>)
 800168c:	79fb      	ldrb	r3, [r7, #7]
 800168e:	f003 030f 	and.w	r3, r3, #15
 8001692:	3b04      	subs	r3, #4
 8001694:	0112      	lsls	r2, r2, #4
 8001696:	b2d2      	uxtb	r2, r2
 8001698:	440b      	add	r3, r1
 800169a:	761a      	strb	r2, [r3, #24]
}
 800169c:	bf00      	nop
 800169e:	370c      	adds	r7, #12
 80016a0:	46bd      	mov	sp, r7
 80016a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a6:	4770      	bx	lr
 80016a8:	e000e100 	.word	0xe000e100
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f003 0307 	and.w	r3, r3, #7
 80016c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016c4:	69fb      	ldr	r3, [r7, #28]
 80016c6:	f1c3 0307 	rsb	r3, r3, #7
 80016ca:	2b04      	cmp	r3, #4
 80016cc:	bf28      	it	cs
 80016ce:	2304      	movcs	r3, #4
 80016d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	3304      	adds	r3, #4
 80016d6:	2b06      	cmp	r3, #6
 80016d8:	d902      	bls.n	80016e0 <NVIC_EncodePriority+0x30>
 80016da:	69fb      	ldr	r3, [r7, #28]
 80016dc:	3b03      	subs	r3, #3
 80016de:	e000      	b.n	80016e2 <NVIC_EncodePriority+0x32>
 80016e0:	2300      	movs	r3, #0
 80016e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80016e8:	69bb      	ldr	r3, [r7, #24]
 80016ea:	fa02 f303 	lsl.w	r3, r2, r3
 80016ee:	43da      	mvns	r2, r3
 80016f0:	68bb      	ldr	r3, [r7, #8]
 80016f2:	401a      	ands	r2, r3
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	43d9      	mvns	r1, r3
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001708:	4313      	orrs	r3, r2
         );
}
 800170a:	4618      	mov	r0, r3
 800170c:	3724      	adds	r7, #36	; 0x24
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001716:	b580      	push	{r7, lr}
 8001718:	b082      	sub	sp, #8
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f7ff ff4c 	bl	80015bc <__NVIC_SetPriorityGrouping>
}
 8001724:	bf00      	nop
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b086      	sub	sp, #24
 8001730:	af00      	add	r7, sp, #0
 8001732:	4603      	mov	r3, r0
 8001734:	60b9      	str	r1, [r7, #8]
 8001736:	607a      	str	r2, [r7, #4]
 8001738:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800173e:	f7ff ff61 	bl	8001604 <__NVIC_GetPriorityGrouping>
 8001742:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001744:	687a      	ldr	r2, [r7, #4]
 8001746:	68b9      	ldr	r1, [r7, #8]
 8001748:	6978      	ldr	r0, [r7, #20]
 800174a:	f7ff ffb1 	bl	80016b0 <NVIC_EncodePriority>
 800174e:	4602      	mov	r2, r0
 8001750:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001754:	4611      	mov	r1, r2
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff80 	bl	800165c <__NVIC_SetPriority>
}
 800175c:	bf00      	nop
 800175e:	3718      	adds	r7, #24
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	4603      	mov	r3, r0
 800176c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800176e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001772:	4618      	mov	r0, r3
 8001774:	f7ff ff54 	bl	8001620 <__NVIC_EnableIRQ>
}
 8001778:	bf00      	nop
 800177a:	3708      	adds	r7, #8
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}

08001780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
 8001788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800178a:	2300      	movs	r3, #0
 800178c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800178e:	e17f      	b.n	8001a90 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	681a      	ldr	r2, [r3, #0]
 8001794:	2101      	movs	r1, #1
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	fa01 f303 	lsl.w	r3, r1, r3
 800179c:	4013      	ands	r3, r2
 800179e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	f000 8171 	beq.w	8001a8a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f003 0303 	and.w	r3, r3, #3
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d005      	beq.n	80017c0 <HAL_GPIO_Init+0x40>
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0303 	and.w	r3, r3, #3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d130      	bne.n	8001822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	68da      	ldr	r2, [r3, #12]
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	005b      	lsls	r3, r3, #1
 80017e0:	fa02 f303 	lsl.w	r3, r2, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4313      	orrs	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	693a      	ldr	r2, [r7, #16]
 80017ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80017f6:	2201      	movs	r2, #1
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	43db      	mvns	r3, r3
 8001800:	693a      	ldr	r2, [r7, #16]
 8001802:	4013      	ands	r3, r2
 8001804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	091b      	lsrs	r3, r3, #4
 800180c:	f003 0201 	and.w	r2, r3, #1
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	4313      	orrs	r3, r2
 800181a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001822:	683b      	ldr	r3, [r7, #0]
 8001824:	685b      	ldr	r3, [r3, #4]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b03      	cmp	r3, #3
 800182c:	d118      	bne.n	8001860 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001834:	2201      	movs	r2, #1
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	693a      	ldr	r2, [r7, #16]
 8001840:	4013      	ands	r3, r2
 8001842:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	08db      	lsrs	r3, r3, #3
 800184a:	f003 0201 	and.w	r2, r3, #1
 800184e:	697b      	ldr	r3, [r7, #20]
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	693a      	ldr	r2, [r7, #16]
 8001856:	4313      	orrs	r3, r2
 8001858:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	693a      	ldr	r2, [r7, #16]
 800185e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f003 0303 	and.w	r3, r3, #3
 8001868:	2b03      	cmp	r3, #3
 800186a:	d017      	beq.n	800189c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	68db      	ldr	r3, [r3, #12]
 8001870:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	2203      	movs	r2, #3
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43db      	mvns	r3, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4013      	ands	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001884:	683b      	ldr	r3, [r7, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	693a      	ldr	r2, [r7, #16]
 8001892:	4313      	orrs	r3, r2
 8001894:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d123      	bne.n	80018f0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	08da      	lsrs	r2, r3, #3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	3208      	adds	r2, #8
 80018b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	f003 0307 	and.w	r3, r3, #7
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	220f      	movs	r2, #15
 80018c0:	fa02 f303 	lsl.w	r3, r2, r3
 80018c4:	43db      	mvns	r3, r3
 80018c6:	693a      	ldr	r2, [r7, #16]
 80018c8:	4013      	ands	r3, r2
 80018ca:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	691a      	ldr	r2, [r3, #16]
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	f003 0307 	and.w	r3, r3, #7
 80018d6:	009b      	lsls	r3, r3, #2
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	693a      	ldr	r2, [r7, #16]
 80018de:	4313      	orrs	r3, r2
 80018e0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	08da      	lsrs	r2, r3, #3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	3208      	adds	r2, #8
 80018ea:	6939      	ldr	r1, [r7, #16]
 80018ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	005b      	lsls	r3, r3, #1
 80018fa:	2203      	movs	r2, #3
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	43db      	mvns	r3, r3
 8001902:	693a      	ldr	r2, [r7, #16]
 8001904:	4013      	ands	r3, r2
 8001906:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685b      	ldr	r3, [r3, #4]
 800190c:	f003 0203 	and.w	r2, r3, #3
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	005b      	lsls	r3, r3, #1
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	693a      	ldr	r2, [r7, #16]
 800191a:	4313      	orrs	r3, r2
 800191c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	693a      	ldr	r2, [r7, #16]
 8001922:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800192c:	2b00      	cmp	r3, #0
 800192e:	f000 80ac 	beq.w	8001a8a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001932:	4b5f      	ldr	r3, [pc, #380]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001934:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001936:	4a5e      	ldr	r2, [pc, #376]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001938:	f043 0301 	orr.w	r3, r3, #1
 800193c:	6613      	str	r3, [r2, #96]	; 0x60
 800193e:	4b5c      	ldr	r3, [pc, #368]	; (8001ab0 <HAL_GPIO_Init+0x330>)
 8001940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001942:	f003 0301 	and.w	r3, r3, #1
 8001946:	60bb      	str	r3, [r7, #8]
 8001948:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800194a:	4a5a      	ldr	r2, [pc, #360]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	4013      	ands	r3, r2
 800196c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001974:	d025      	beq.n	80019c2 <HAL_GPIO_Init+0x242>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4f      	ldr	r2, [pc, #316]	; (8001ab8 <HAL_GPIO_Init+0x338>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x23e>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <HAL_GPIO_Init+0x33c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x23a>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4d      	ldr	r2, [pc, #308]	; (8001ac0 <HAL_GPIO_Init+0x340>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x236>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4c      	ldr	r2, [pc, #304]	; (8001ac4 <HAL_GPIO_Init+0x344>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x232>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4b      	ldr	r2, [pc, #300]	; (8001ac8 <HAL_GPIO_Init+0x348>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x22e>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a4a      	ldr	r2, [pc, #296]	; (8001acc <HAL_GPIO_Init+0x34c>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x22a>
 80019a6:	2306      	movs	r3, #6
 80019a8:	e00c      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e00a      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x244>
 80019c2:	2300      	movs	r3, #0
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80019d4:	4937      	ldr	r1, [pc, #220]	; (8001ab4 <HAL_GPIO_Init+0x334>)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80019e2:	4b3b      	ldr	r3, [pc, #236]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	693a      	ldr	r2, [r7, #16]
 80019ee:	4013      	ands	r3, r2
 80019f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80019fe:	693a      	ldr	r2, [r7, #16]
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001a06:	4a32      	ldr	r2, [pc, #200]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001a0c:	4b30      	ldr	r3, [pc, #192]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	693a      	ldr	r2, [r7, #16]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001a30:	4a27      	ldr	r2, [pc, #156]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001a36:	4b26      	ldr	r3, [pc, #152]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001a52:	693a      	ldr	r2, [r7, #16]
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001a5a:	4a1d      	ldr	r2, [pc, #116]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001a60:	4b1b      	ldr	r3, [pc, #108]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001a84:	4a12      	ldr	r2, [pc, #72]	; (8001ad0 <HAL_GPIO_Init+0x350>)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f47f ae78 	bne.w	8001790 <HAL_GPIO_Init+0x10>
  }
}
 8001aa0:	bf00      	nop
 8001aa2:	bf00      	nop
 8001aa4:	371c      	adds	r7, #28
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000
 8001ab4:	40010000 	.word	0x40010000
 8001ab8:	48000400 	.word	0x48000400
 8001abc:	48000800 	.word	0x48000800
 8001ac0:	48000c00 	.word	0x48000c00
 8001ac4:	48001000 	.word	0x48001000
 8001ac8:	48001400 	.word	0x48001400
 8001acc:	48001800 	.word	0x48001800
 8001ad0:	40010400 	.word	0x40010400

08001ad4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	460b      	mov	r3, r1
 8001ade:	807b      	strh	r3, [r7, #2]
 8001ae0:	4613      	mov	r3, r2
 8001ae2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae4:	787b      	ldrb	r3, [r7, #1]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001aea:	887a      	ldrh	r2, [r7, #2]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001af0:	e002      	b.n	8001af8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001af2:	887a      	ldrh	r2, [r7, #2]
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr

08001b04 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b085      	sub	sp, #20
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	460b      	mov	r3, r1
 8001b0e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	695b      	ldr	r3, [r3, #20]
 8001b14:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b16:	887a      	ldrh	r2, [r7, #2]
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	041a      	lsls	r2, r3, #16
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43d9      	mvns	r1, r3
 8001b22:	887b      	ldrh	r3, [r7, #2]
 8001b24:	400b      	ands	r3, r1
 8001b26:	431a      	orrs	r2, r3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	619a      	str	r2, [r3, #24]
}
 8001b2c:	bf00      	nop
 8001b2e:	3714      	adds	r7, #20
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	4603      	mov	r3, r0
 8001b40:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001b42:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b44:	695a      	ldr	r2, [r3, #20]
 8001b46:	88fb      	ldrh	r3, [r7, #6]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d006      	beq.n	8001b5c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001b4e:	4a05      	ldr	r2, [pc, #20]	; (8001b64 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001b50:	88fb      	ldrh	r3, [r7, #6]
 8001b52:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001b54:	88fb      	ldrh	r3, [r7, #6]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff f8f6 	bl	8000d48 <HAL_GPIO_EXTI_Callback>
  }
}
 8001b5c:	bf00      	nop
 8001b5e:	3708      	adds	r7, #8
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40010400 	.word	0x40010400

08001b68 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001b6c:	4b04      	ldr	r3, [pc, #16]	; (8001b80 <HAL_PWREx_GetVoltageRange+0x18>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001b74:	4618      	mov	r0, r3
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	40007000 	.word	0x40007000

08001b84 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b92:	d130      	bne.n	8001bf6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b94:	4b23      	ldr	r3, [pc, #140]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001b9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba0:	d038      	beq.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ba2:	4b20      	ldr	r3, [pc, #128]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001baa:	4a1e      	ldr	r2, [pc, #120]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bb0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001bb2:	4b1d      	ldr	r3, [pc, #116]	; (8001c28 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	2232      	movs	r2, #50	; 0x32
 8001bb8:	fb02 f303 	mul.w	r3, r2, r3
 8001bbc:	4a1b      	ldr	r2, [pc, #108]	; (8001c2c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001bc2:	0c9b      	lsrs	r3, r3, #18
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bc8:	e002      	b.n	8001bd0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001bd0:	4b14      	ldr	r3, [pc, #80]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bd2:	695b      	ldr	r3, [r3, #20]
 8001bd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bdc:	d102      	bne.n	8001be4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d1f2      	bne.n	8001bca <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001be4:	4b0f      	ldr	r3, [pc, #60]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001be6:	695b      	ldr	r3, [r3, #20]
 8001be8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001bf0:	d110      	bne.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e00f      	b.n	8001c16 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001bf6:	4b0b      	ldr	r3, [pc, #44]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001bfe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c02:	d007      	beq.n	8001c14 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001c04:	4b07      	ldr	r3, [pc, #28]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001c0c:	4a05      	ldr	r2, [pc, #20]	; (8001c24 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c12:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001c14:	2300      	movs	r3, #0
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3714      	adds	r7, #20
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
 8001c22:	bf00      	nop
 8001c24:	40007000 	.word	0x40007000
 8001c28:	20000004 	.word	0x20000004
 8001c2c:	431bde83 	.word	0x431bde83

08001c30 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e3ca      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c42:	4b97      	ldr	r3, [pc, #604]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	f003 030c 	and.w	r3, r3, #12
 8001c4a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c4c:	4b94      	ldr	r3, [pc, #592]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	f003 0303 	and.w	r3, r3, #3
 8001c54:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 0310 	and.w	r3, r3, #16
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f000 80e4 	beq.w	8001e2c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c64:	69bb      	ldr	r3, [r7, #24]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d007      	beq.n	8001c7a <HAL_RCC_OscConfig+0x4a>
 8001c6a:	69bb      	ldr	r3, [r7, #24]
 8001c6c:	2b0c      	cmp	r3, #12
 8001c6e:	f040 808b 	bne.w	8001d88 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c72:	697b      	ldr	r3, [r7, #20]
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	f040 8087 	bne.w	8001d88 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c7a:	4b89      	ldr	r3, [pc, #548]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d005      	beq.n	8001c92 <HAL_RCC_OscConfig+0x62>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	699b      	ldr	r3, [r3, #24]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d101      	bne.n	8001c92 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001c8e:	2301      	movs	r3, #1
 8001c90:	e3a2      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a1a      	ldr	r2, [r3, #32]
 8001c96:	4b82      	ldr	r3, [pc, #520]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 0308 	and.w	r3, r3, #8
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d004      	beq.n	8001cac <HAL_RCC_OscConfig+0x7c>
 8001ca2:	4b7f      	ldr	r3, [pc, #508]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001caa:	e005      	b.n	8001cb8 <HAL_RCC_OscConfig+0x88>
 8001cac:	4b7c      	ldr	r3, [pc, #496]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cb2:	091b      	lsrs	r3, r3, #4
 8001cb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d223      	bcs.n	8001d04 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a1b      	ldr	r3, [r3, #32]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f000 fd87 	bl	80027d4 <RCC_SetFlashLatencyFromMSIRange>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d001      	beq.n	8001cd0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e383      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cd0:	4b73      	ldr	r3, [pc, #460]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	4a72      	ldr	r2, [pc, #456]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cd6:	f043 0308 	orr.w	r3, r3, #8
 8001cda:	6013      	str	r3, [r2, #0]
 8001cdc:	4b70      	ldr	r3, [pc, #448]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	496d      	ldr	r1, [pc, #436]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cee:	4b6c      	ldr	r3, [pc, #432]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69db      	ldr	r3, [r3, #28]
 8001cfa:	021b      	lsls	r3, r3, #8
 8001cfc:	4968      	ldr	r1, [pc, #416]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001cfe:	4313      	orrs	r3, r2
 8001d00:	604b      	str	r3, [r1, #4]
 8001d02:	e025      	b.n	8001d50 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001d04:	4b66      	ldr	r3, [pc, #408]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a65      	ldr	r2, [pc, #404]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d0a:	f043 0308 	orr.w	r3, r3, #8
 8001d0e:	6013      	str	r3, [r2, #0]
 8001d10:	4b63      	ldr	r3, [pc, #396]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6a1b      	ldr	r3, [r3, #32]
 8001d1c:	4960      	ldr	r1, [pc, #384]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d22:	4b5f      	ldr	r3, [pc, #380]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d24:	685b      	ldr	r3, [r3, #4]
 8001d26:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69db      	ldr	r3, [r3, #28]
 8001d2e:	021b      	lsls	r3, r3, #8
 8001d30:	495b      	ldr	r1, [pc, #364]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d32:	4313      	orrs	r3, r2
 8001d34:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d109      	bne.n	8001d50 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fd47 	bl	80027d4 <RCC_SetFlashLatencyFromMSIRange>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e343      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d50:	f000 fc4a 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8001d54:	4602      	mov	r2, r0
 8001d56:	4b52      	ldr	r3, [pc, #328]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	091b      	lsrs	r3, r3, #4
 8001d5c:	f003 030f 	and.w	r3, r3, #15
 8001d60:	4950      	ldr	r1, [pc, #320]	; (8001ea4 <HAL_RCC_OscConfig+0x274>)
 8001d62:	5ccb      	ldrb	r3, [r1, r3]
 8001d64:	f003 031f 	and.w	r3, r3, #31
 8001d68:	fa22 f303 	lsr.w	r3, r2, r3
 8001d6c:	4a4e      	ldr	r2, [pc, #312]	; (8001ea8 <HAL_RCC_OscConfig+0x278>)
 8001d6e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d70:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <HAL_RCC_OscConfig+0x27c>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff fa25 	bl	80011c4 <HAL_InitTick>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d7e:	7bfb      	ldrb	r3, [r7, #15]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d052      	beq.n	8001e2a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001d84:	7bfb      	ldrb	r3, [r7, #15]
 8001d86:	e327      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	699b      	ldr	r3, [r3, #24]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d032      	beq.n	8001df6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d90:	4b43      	ldr	r3, [pc, #268]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a42      	ldr	r2, [pc, #264]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001d96:	f043 0301 	orr.w	r3, r3, #1
 8001d9a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d9c:	f7ff fc02 	bl	80015a4 <HAL_GetTick>
 8001da0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da2:	e008      	b.n	8001db6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001da4:	f7ff fbfe 	bl	80015a4 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d901      	bls.n	8001db6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	e310      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0302 	and.w	r3, r3, #2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0f0      	beq.n	8001da4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001dc2:	4b37      	ldr	r3, [pc, #220]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a36      	ldr	r2, [pc, #216]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dc8:	f043 0308 	orr.w	r3, r3, #8
 8001dcc:	6013      	str	r3, [r2, #0]
 8001dce:	4b34      	ldr	r3, [pc, #208]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6a1b      	ldr	r3, [r3, #32]
 8001dda:	4931      	ldr	r1, [pc, #196]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001de0:	4b2f      	ldr	r3, [pc, #188]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	69db      	ldr	r3, [r3, #28]
 8001dec:	021b      	lsls	r3, r3, #8
 8001dee:	492c      	ldr	r1, [pc, #176]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001df0:	4313      	orrs	r3, r2
 8001df2:	604b      	str	r3, [r1, #4]
 8001df4:	e01a      	b.n	8001e2c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001df6:	4b2a      	ldr	r3, [pc, #168]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	4a29      	ldr	r2, [pc, #164]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001dfc:	f023 0301 	bic.w	r3, r3, #1
 8001e00:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001e02:	f7ff fbcf 	bl	80015a4 <HAL_GetTick>
 8001e06:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e08:	e008      	b.n	8001e1c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001e0a:	f7ff fbcb 	bl	80015a4 <HAL_GetTick>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	1ad3      	subs	r3, r2, r3
 8001e14:	2b02      	cmp	r3, #2
 8001e16:	d901      	bls.n	8001e1c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001e18:	2303      	movs	r3, #3
 8001e1a:	e2dd      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e1c:	4b20      	ldr	r3, [pc, #128]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d1f0      	bne.n	8001e0a <HAL_RCC_OscConfig+0x1da>
 8001e28:	e000      	b.n	8001e2c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e2a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0301 	and.w	r3, r3, #1
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d074      	beq.n	8001f22 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d005      	beq.n	8001e4a <HAL_RCC_OscConfig+0x21a>
 8001e3e:	69bb      	ldr	r3, [r7, #24]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d10e      	bne.n	8001e62 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	d10b      	bne.n	8001e62 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e4a:	4b15      	ldr	r3, [pc, #84]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d064      	beq.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d160      	bne.n	8001f20 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e2ba      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e6a:	d106      	bne.n	8001e7a <HAL_RCC_OscConfig+0x24a>
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a0b      	ldr	r2, [pc, #44]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e76:	6013      	str	r3, [r2, #0]
 8001e78:	e026      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e82:	d115      	bne.n	8001eb0 <HAL_RCC_OscConfig+0x280>
 8001e84:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a05      	ldr	r2, [pc, #20]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e8a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]
 8001e90:	4b03      	ldr	r3, [pc, #12]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a02      	ldr	r2, [pc, #8]	; (8001ea0 <HAL_RCC_OscConfig+0x270>)
 8001e96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e9a:	6013      	str	r3, [r2, #0]
 8001e9c:	e014      	b.n	8001ec8 <HAL_RCC_OscConfig+0x298>
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	08009670 	.word	0x08009670
 8001ea8:	20000004 	.word	0x20000004
 8001eac:	20000008 	.word	0x20000008
 8001eb0:	4ba0      	ldr	r3, [pc, #640]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a9f      	ldr	r2, [pc, #636]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001eb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001eba:	6013      	str	r3, [r2, #0]
 8001ebc:	4b9d      	ldr	r3, [pc, #628]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a9c      	ldr	r2, [pc, #624]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001ec2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ec6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d013      	beq.n	8001ef8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7ff fb68 	bl	80015a4 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ed8:	f7ff fb64 	bl	80015a4 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b64      	cmp	r3, #100	; 0x64
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e276      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eea:	4b92      	ldr	r3, [pc, #584]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x2a8>
 8001ef6:	e014      	b.n	8001f22 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ef8:	f7ff fb54 	bl	80015a4 <HAL_GetTick>
 8001efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001efe:	e008      	b.n	8001f12 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f00:	f7ff fb50 	bl	80015a4 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	693b      	ldr	r3, [r7, #16]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	2b64      	cmp	r3, #100	; 0x64
 8001f0c:	d901      	bls.n	8001f12 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	e262      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f12:	4b88      	ldr	r3, [pc, #544]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d1f0      	bne.n	8001f00 <HAL_RCC_OscConfig+0x2d0>
 8001f1e:	e000      	b.n	8001f22 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d060      	beq.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	2b04      	cmp	r3, #4
 8001f32:	d005      	beq.n	8001f40 <HAL_RCC_OscConfig+0x310>
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2b0c      	cmp	r3, #12
 8001f38:	d119      	bne.n	8001f6e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f3a:	697b      	ldr	r3, [r7, #20]
 8001f3c:	2b02      	cmp	r3, #2
 8001f3e:	d116      	bne.n	8001f6e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f40:	4b7c      	ldr	r3, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_OscConfig+0x328>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d101      	bne.n	8001f58 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e23f      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f58:	4b76      	ldr	r3, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	691b      	ldr	r3, [r3, #16]
 8001f64:	061b      	lsls	r3, r3, #24
 8001f66:	4973      	ldr	r1, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f6c:	e040      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	68db      	ldr	r3, [r3, #12]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d023      	beq.n	8001fbe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f76:	4b6f      	ldr	r3, [pc, #444]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f82:	f7ff fb0f 	bl	80015a4 <HAL_GetTick>
 8001f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f88:	e008      	b.n	8001f9c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f8a:	f7ff fb0b 	bl	80015a4 <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	2b02      	cmp	r3, #2
 8001f96:	d901      	bls.n	8001f9c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	e21d      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f9c:	4b65      	ldr	r3, [pc, #404]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d0f0      	beq.n	8001f8a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fa8:	4b62      	ldr	r3, [pc, #392]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	691b      	ldr	r3, [r3, #16]
 8001fb4:	061b      	lsls	r3, r3, #24
 8001fb6:	495f      	ldr	r1, [pc, #380]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	604b      	str	r3, [r1, #4]
 8001fbc:	e018      	b.n	8001ff0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fbe:	4b5d      	ldr	r3, [pc, #372]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4a5c      	ldr	r2, [pc, #368]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001fc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001fc8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fca:	f7ff faeb 	bl	80015a4 <HAL_GetTick>
 8001fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd0:	e008      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fd2:	f7ff fae7 	bl	80015a4 <HAL_GetTick>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	693b      	ldr	r3, [r7, #16]
 8001fda:	1ad3      	subs	r3, r2, r3
 8001fdc:	2b02      	cmp	r3, #2
 8001fde:	d901      	bls.n	8001fe4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fe0:	2303      	movs	r3, #3
 8001fe2:	e1f9      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1f0      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f003 0308 	and.w	r3, r3, #8
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d03c      	beq.n	8002076 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	695b      	ldr	r3, [r3, #20]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d01c      	beq.n	800203e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002004:	4b4b      	ldr	r3, [pc, #300]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002006:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800200a:	4a4a      	ldr	r2, [pc, #296]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 800200c:	f043 0301 	orr.w	r3, r3, #1
 8002010:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002014:	f7ff fac6 	bl	80015a4 <HAL_GetTick>
 8002018:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201a:	e008      	b.n	800202e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800201c:	f7ff fac2 	bl	80015a4 <HAL_GetTick>
 8002020:	4602      	mov	r2, r0
 8002022:	693b      	ldr	r3, [r7, #16]
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	2b02      	cmp	r3, #2
 8002028:	d901      	bls.n	800202e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e1d4      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800202e:	4b41      	ldr	r3, [pc, #260]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002030:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d0ef      	beq.n	800201c <HAL_RCC_OscConfig+0x3ec>
 800203c:	e01b      	b.n	8002076 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800203e:	4b3d      	ldr	r3, [pc, #244]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002040:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002044:	4a3b      	ldr	r2, [pc, #236]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002046:	f023 0301 	bic.w	r3, r3, #1
 800204a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800204e:	f7ff faa9 	bl	80015a4 <HAL_GetTick>
 8002052:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002054:	e008      	b.n	8002068 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002056:	f7ff faa5 	bl	80015a4 <HAL_GetTick>
 800205a:	4602      	mov	r2, r0
 800205c:	693b      	ldr	r3, [r7, #16]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d901      	bls.n	8002068 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002064:	2303      	movs	r3, #3
 8002066:	e1b7      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002068:	4b32      	ldr	r3, [pc, #200]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	f003 0302 	and.w	r3, r3, #2
 8002072:	2b00      	cmp	r3, #0
 8002074:	d1ef      	bne.n	8002056 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f003 0304 	and.w	r3, r3, #4
 800207e:	2b00      	cmp	r3, #0
 8002080:	f000 80a6 	beq.w	80021d0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002084:	2300      	movs	r3, #0
 8002086:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002088:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 800208a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800208c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10d      	bne.n	80020b0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002094:	4b27      	ldr	r3, [pc, #156]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	4a26      	ldr	r2, [pc, #152]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 800209a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800209e:	6593      	str	r3, [r2, #88]	; 0x58
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 80020a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020a8:	60bb      	str	r3, [r7, #8]
 80020aa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ac:	2301      	movs	r3, #1
 80020ae:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020b0:	4b21      	ldr	r3, [pc, #132]	; (8002138 <HAL_RCC_OscConfig+0x508>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d118      	bne.n	80020ee <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020bc:	4b1e      	ldr	r3, [pc, #120]	; (8002138 <HAL_RCC_OscConfig+0x508>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a1d      	ldr	r2, [pc, #116]	; (8002138 <HAL_RCC_OscConfig+0x508>)
 80020c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020c6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020c8:	f7ff fa6c 	bl	80015a4 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020d0:	f7ff fa68 	bl	80015a4 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e17a      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_RCC_OscConfig+0x508>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0f0      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d108      	bne.n	8002108 <HAL_RCC_OscConfig+0x4d8>
 80020f6:	4b0f      	ldr	r3, [pc, #60]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 80020f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fc:	4a0d      	ldr	r2, [pc, #52]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002106:	e029      	b.n	800215c <HAL_RCC_OscConfig+0x52c>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b05      	cmp	r3, #5
 800210e:	d115      	bne.n	800213c <HAL_RCC_OscConfig+0x50c>
 8002110:	4b08      	ldr	r3, [pc, #32]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002116:	4a07      	ldr	r2, [pc, #28]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002120:	4b04      	ldr	r3, [pc, #16]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002122:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002126:	4a03      	ldr	r2, [pc, #12]	; (8002134 <HAL_RCC_OscConfig+0x504>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002130:	e014      	b.n	800215c <HAL_RCC_OscConfig+0x52c>
 8002132:	bf00      	nop
 8002134:	40021000 	.word	0x40021000
 8002138:	40007000 	.word	0x40007000
 800213c:	4b9c      	ldr	r3, [pc, #624]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002142:	4a9b      	ldr	r2, [pc, #620]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002144:	f023 0301 	bic.w	r3, r3, #1
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800214c:	4b98      	ldr	r3, [pc, #608]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 800214e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002152:	4a97      	ldr	r2, [pc, #604]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002154:	f023 0304 	bic.w	r3, r3, #4
 8002158:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d016      	beq.n	8002192 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002164:	f7ff fa1e 	bl	80015a4 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800216a:	e00a      	b.n	8002182 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800216c:	f7ff fa1a 	bl	80015a4 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	f241 3288 	movw	r2, #5000	; 0x1388
 800217a:	4293      	cmp	r3, r2
 800217c:	d901      	bls.n	8002182 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800217e:	2303      	movs	r3, #3
 8002180:	e12a      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002182:	4b8b      	ldr	r3, [pc, #556]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002184:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d0ed      	beq.n	800216c <HAL_RCC_OscConfig+0x53c>
 8002190:	e015      	b.n	80021be <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002192:	f7ff fa07 	bl	80015a4 <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002198:	e00a      	b.n	80021b0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800219a:	f7ff fa03 	bl	80015a4 <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a8:	4293      	cmp	r3, r2
 80021aa:	d901      	bls.n	80021b0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80021ac:	2303      	movs	r3, #3
 80021ae:	e113      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021b0:	4b7f      	ldr	r3, [pc, #508]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 80021b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021b6:	f003 0302 	and.w	r3, r3, #2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1ed      	bne.n	800219a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021be:	7ffb      	ldrb	r3, [r7, #31]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	d105      	bne.n	80021d0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021c4:	4b7a      	ldr	r3, [pc, #488]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 80021c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c8:	4a79      	ldr	r2, [pc, #484]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 80021ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021ce:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80fe 	beq.w	80023d6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021de:	2b02      	cmp	r3, #2
 80021e0:	f040 80d0 	bne.w	8002384 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80021e4:	4b72      	ldr	r3, [pc, #456]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f003 0203 	and.w	r2, r3, #3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d130      	bne.n	800225a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002202:	3b01      	subs	r3, #1
 8002204:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002206:	429a      	cmp	r2, r3
 8002208:	d127      	bne.n	800225a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002214:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002216:	429a      	cmp	r2, r3
 8002218:	d11f      	bne.n	800225a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002220:	687a      	ldr	r2, [r7, #4]
 8002222:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002224:	2a07      	cmp	r2, #7
 8002226:	bf14      	ite	ne
 8002228:	2201      	movne	r2, #1
 800222a:	2200      	moveq	r2, #0
 800222c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800222e:	4293      	cmp	r3, r2
 8002230:	d113      	bne.n	800225a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800223c:	085b      	lsrs	r3, r3, #1
 800223e:	3b01      	subs	r3, #1
 8002240:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d109      	bne.n	800225a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002250:	085b      	lsrs	r3, r3, #1
 8002252:	3b01      	subs	r3, #1
 8002254:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002256:	429a      	cmp	r2, r3
 8002258:	d06e      	beq.n	8002338 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800225a:	69bb      	ldr	r3, [r7, #24]
 800225c:	2b0c      	cmp	r3, #12
 800225e:	d069      	beq.n	8002334 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002260:	4b53      	ldr	r3, [pc, #332]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002268:	2b00      	cmp	r3, #0
 800226a:	d105      	bne.n	8002278 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800226c:	4b50      	ldr	r3, [pc, #320]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d001      	beq.n	800227c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0ad      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800227c:	4b4c      	ldr	r3, [pc, #304]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a4b      	ldr	r2, [pc, #300]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002282:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002286:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002288:	f7ff f98c 	bl	80015a4 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7ff f988 	bl	80015a4 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e09a      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a2:	4b43      	ldr	r3, [pc, #268]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022ae:	4b40      	ldr	r3, [pc, #256]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 80022b0:	68da      	ldr	r2, [r3, #12]
 80022b2:	4b40      	ldr	r3, [pc, #256]	; (80023b4 <HAL_RCC_OscConfig+0x784>)
 80022b4:	4013      	ands	r3, r2
 80022b6:	687a      	ldr	r2, [r7, #4]
 80022b8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80022be:	3a01      	subs	r2, #1
 80022c0:	0112      	lsls	r2, r2, #4
 80022c2:	4311      	orrs	r1, r2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80022c8:	0212      	lsls	r2, r2, #8
 80022ca:	4311      	orrs	r1, r2
 80022cc:	687a      	ldr	r2, [r7, #4]
 80022ce:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80022d0:	0852      	lsrs	r2, r2, #1
 80022d2:	3a01      	subs	r2, #1
 80022d4:	0552      	lsls	r2, r2, #21
 80022d6:	4311      	orrs	r1, r2
 80022d8:	687a      	ldr	r2, [r7, #4]
 80022da:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80022dc:	0852      	lsrs	r2, r2, #1
 80022de:	3a01      	subs	r2, #1
 80022e0:	0652      	lsls	r2, r2, #25
 80022e2:	4311      	orrs	r1, r2
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80022e8:	0912      	lsrs	r2, r2, #4
 80022ea:	0452      	lsls	r2, r2, #17
 80022ec:	430a      	orrs	r2, r1
 80022ee:	4930      	ldr	r1, [pc, #192]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80022f4:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a2d      	ldr	r2, [pc, #180]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 80022fa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80022fe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002300:	4b2b      	ldr	r3, [pc, #172]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a2a      	ldr	r2, [pc, #168]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002306:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800230a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800230c:	f7ff f94a 	bl	80015a4 <HAL_GetTick>
 8002310:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002312:	e008      	b.n	8002326 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002314:	f7ff f946 	bl	80015a4 <HAL_GetTick>
 8002318:	4602      	mov	r2, r0
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	1ad3      	subs	r3, r2, r3
 800231e:	2b02      	cmp	r3, #2
 8002320:	d901      	bls.n	8002326 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002322:	2303      	movs	r3, #3
 8002324:	e058      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002326:	4b22      	ldr	r3, [pc, #136]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800232e:	2b00      	cmp	r3, #0
 8002330:	d0f0      	beq.n	8002314 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002332:	e050      	b.n	80023d6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e04f      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002338:	4b1d      	ldr	r3, [pc, #116]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002340:	2b00      	cmp	r3, #0
 8002342:	d148      	bne.n	80023d6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002344:	4b1a      	ldr	r3, [pc, #104]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a19      	ldr	r2, [pc, #100]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 800234a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800234e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002350:	4b17      	ldr	r3, [pc, #92]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	4a16      	ldr	r2, [pc, #88]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002356:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800235a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800235c:	f7ff f922 	bl	80015a4 <HAL_GetTick>
 8002360:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002362:	e008      	b.n	8002376 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002364:	f7ff f91e 	bl	80015a4 <HAL_GetTick>
 8002368:	4602      	mov	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	2b02      	cmp	r3, #2
 8002370:	d901      	bls.n	8002376 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002372:	2303      	movs	r3, #3
 8002374:	e030      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002376:	4b0e      	ldr	r3, [pc, #56]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800237e:	2b00      	cmp	r3, #0
 8002380:	d0f0      	beq.n	8002364 <HAL_RCC_OscConfig+0x734>
 8002382:	e028      	b.n	80023d6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d023      	beq.n	80023d2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800238a:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a08      	ldr	r2, [pc, #32]	; (80023b0 <HAL_RCC_OscConfig+0x780>)
 8002390:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002394:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002396:	f7ff f905 	bl	80015a4 <HAL_GetTick>
 800239a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800239c:	e00c      	b.n	80023b8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800239e:	f7ff f901 	bl	80015a4 <HAL_GetTick>
 80023a2:	4602      	mov	r2, r0
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d905      	bls.n	80023b8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e013      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
 80023b0:	40021000 	.word	0x40021000
 80023b4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023b8:	4b09      	ldr	r3, [pc, #36]	; (80023e0 <HAL_RCC_OscConfig+0x7b0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d1ec      	bne.n	800239e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80023c4:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_OscConfig+0x7b0>)
 80023c6:	68da      	ldr	r2, [r3, #12]
 80023c8:	4905      	ldr	r1, [pc, #20]	; (80023e0 <HAL_RCC_OscConfig+0x7b0>)
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_OscConfig+0x7b4>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	60cb      	str	r3, [r1, #12]
 80023d0:	e001      	b.n	80023d6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e000      	b.n	80023d8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80023d6:	2300      	movs	r3, #0
}
 80023d8:	4618      	mov	r0, r3
 80023da:	3720      	adds	r7, #32
 80023dc:	46bd      	mov	sp, r7
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	feeefffc 	.word	0xfeeefffc

080023e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d101      	bne.n	80023fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023f8:	2301      	movs	r3, #1
 80023fa:	e0e7      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023fc:	4b75      	ldr	r3, [pc, #468]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0307 	and.w	r3, r3, #7
 8002404:	683a      	ldr	r2, [r7, #0]
 8002406:	429a      	cmp	r2, r3
 8002408:	d910      	bls.n	800242c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800240a:	4b72      	ldr	r3, [pc, #456]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f023 0207 	bic.w	r2, r3, #7
 8002412:	4970      	ldr	r1, [pc, #448]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	4313      	orrs	r3, r2
 8002418:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800241a:	4b6e      	ldr	r3, [pc, #440]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f003 0307 	and.w	r3, r3, #7
 8002422:	683a      	ldr	r2, [r7, #0]
 8002424:	429a      	cmp	r2, r3
 8002426:	d001      	beq.n	800242c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0cf      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d010      	beq.n	800245a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	689a      	ldr	r2, [r3, #8]
 800243c:	4b66      	ldr	r3, [pc, #408]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002444:	429a      	cmp	r2, r3
 8002446:	d908      	bls.n	800245a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002448:	4b63      	ldr	r3, [pc, #396]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	689b      	ldr	r3, [r3, #8]
 8002454:	4960      	ldr	r1, [pc, #384]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002456:	4313      	orrs	r3, r2
 8002458:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d04c      	beq.n	8002500 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	2b03      	cmp	r3, #3
 800246c:	d107      	bne.n	800247e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800246e:	4b5a      	ldr	r3, [pc, #360]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d121      	bne.n	80024be <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e0a6      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	2b02      	cmp	r3, #2
 8002484:	d107      	bne.n	8002496 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002486:	4b54      	ldr	r3, [pc, #336]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d115      	bne.n	80024be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e09a      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d107      	bne.n	80024ae <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800249e:	4b4e      	ldr	r3, [pc, #312]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d109      	bne.n	80024be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e08e      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024ae:	4b4a      	ldr	r3, [pc, #296]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d101      	bne.n	80024be <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e086      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024be:	4b46      	ldr	r3, [pc, #280]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	f023 0203 	bic.w	r2, r3, #3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4943      	ldr	r1, [pc, #268]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024d0:	f7ff f868 	bl	80015a4 <HAL_GetTick>
 80024d4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d6:	e00a      	b.n	80024ee <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024d8:	f7ff f864 	bl	80015a4 <HAL_GetTick>
 80024dc:	4602      	mov	r2, r0
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1ad3      	subs	r3, r2, r3
 80024e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d901      	bls.n	80024ee <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80024ea:	2303      	movs	r3, #3
 80024ec:	e06e      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024ee:	4b3a      	ldr	r3, [pc, #232]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 020c 	and.w	r2, r3, #12
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	009b      	lsls	r3, r3, #2
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d1eb      	bne.n	80024d8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d010      	beq.n	800252e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	4b31      	ldr	r3, [pc, #196]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002518:	429a      	cmp	r2, r3
 800251a:	d208      	bcs.n	800252e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800251c:	4b2e      	ldr	r3, [pc, #184]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	492b      	ldr	r1, [pc, #172]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800252a:	4313      	orrs	r3, r2
 800252c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800252e:	4b29      	ldr	r3, [pc, #164]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	683a      	ldr	r2, [r7, #0]
 8002538:	429a      	cmp	r2, r3
 800253a:	d210      	bcs.n	800255e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253c:	4b25      	ldr	r3, [pc, #148]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f023 0207 	bic.w	r2, r3, #7
 8002544:	4923      	ldr	r1, [pc, #140]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254c:	4b21      	ldr	r3, [pc, #132]	; (80025d4 <HAL_RCC_ClockConfig+0x1ec>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0307 	and.w	r3, r3, #7
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d001      	beq.n	800255e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e036      	b.n	80025cc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0304 	and.w	r3, r3, #4
 8002566:	2b00      	cmp	r3, #0
 8002568:	d008      	beq.n	800257c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256a:	4b1b      	ldr	r3, [pc, #108]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	4918      	ldr	r1, [pc, #96]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002578:	4313      	orrs	r3, r2
 800257a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	f003 0308 	and.w	r3, r3, #8
 8002584:	2b00      	cmp	r3, #0
 8002586:	d009      	beq.n	800259c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002588:	4b13      	ldr	r3, [pc, #76]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	691b      	ldr	r3, [r3, #16]
 8002594:	00db      	lsls	r3, r3, #3
 8002596:	4910      	ldr	r1, [pc, #64]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 8002598:	4313      	orrs	r3, r2
 800259a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800259c:	f000 f824 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 80025a0:	4602      	mov	r2, r0
 80025a2:	4b0d      	ldr	r3, [pc, #52]	; (80025d8 <HAL_RCC_ClockConfig+0x1f0>)
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	091b      	lsrs	r3, r3, #4
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	490b      	ldr	r1, [pc, #44]	; (80025dc <HAL_RCC_ClockConfig+0x1f4>)
 80025ae:	5ccb      	ldrb	r3, [r1, r3]
 80025b0:	f003 031f 	and.w	r3, r3, #31
 80025b4:	fa22 f303 	lsr.w	r3, r2, r3
 80025b8:	4a09      	ldr	r2, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1f8>)
 80025ba:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80025bc:	4b09      	ldr	r3, [pc, #36]	; (80025e4 <HAL_RCC_ClockConfig+0x1fc>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f7fe fdff 	bl	80011c4 <HAL_InitTick>
 80025c6:	4603      	mov	r3, r0
 80025c8:	72fb      	strb	r3, [r7, #11]

  return status;
 80025ca:	7afb      	ldrb	r3, [r7, #11]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3710      	adds	r7, #16
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40022000 	.word	0x40022000
 80025d8:	40021000 	.word	0x40021000
 80025dc:	08009670 	.word	0x08009670
 80025e0:	20000004 	.word	0x20000004
 80025e4:	20000008 	.word	0x20000008

080025e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b089      	sub	sp, #36	; 0x24
 80025ec:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80025ee:	2300      	movs	r3, #0
 80025f0:	61fb      	str	r3, [r7, #28]
 80025f2:	2300      	movs	r3, #0
 80025f4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f6:	4b3e      	ldr	r3, [pc, #248]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80025f8:	689b      	ldr	r3, [r3, #8]
 80025fa:	f003 030c 	and.w	r3, r3, #12
 80025fe:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002600:	4b3b      	ldr	r3, [pc, #236]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002602:	68db      	ldr	r3, [r3, #12]
 8002604:	f003 0303 	and.w	r3, r3, #3
 8002608:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d005      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x34>
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	2b0c      	cmp	r3, #12
 8002614:	d121      	bne.n	800265a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	2b01      	cmp	r3, #1
 800261a:	d11e      	bne.n	800265a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800261c:	4b34      	ldr	r3, [pc, #208]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f003 0308 	and.w	r3, r3, #8
 8002624:	2b00      	cmp	r3, #0
 8002626:	d107      	bne.n	8002638 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002628:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800262a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262e:	0a1b      	lsrs	r3, r3, #8
 8002630:	f003 030f 	and.w	r3, r3, #15
 8002634:	61fb      	str	r3, [r7, #28]
 8002636:	e005      	b.n	8002644 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002638:	4b2d      	ldr	r3, [pc, #180]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	f003 030f 	and.w	r3, r3, #15
 8002642:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002644:	4a2b      	ldr	r2, [pc, #172]	; (80026f4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002646:	69fb      	ldr	r3, [r7, #28]
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800264e:	693b      	ldr	r3, [r7, #16]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d10d      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002654:	69fb      	ldr	r3, [r7, #28]
 8002656:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002658:	e00a      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800265a:	693b      	ldr	r3, [r7, #16]
 800265c:	2b04      	cmp	r3, #4
 800265e:	d102      	bne.n	8002666 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002660:	4b25      	ldr	r3, [pc, #148]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002662:	61bb      	str	r3, [r7, #24]
 8002664:	e004      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002666:	693b      	ldr	r3, [r7, #16]
 8002668:	2b08      	cmp	r3, #8
 800266a:	d101      	bne.n	8002670 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800266c:	4b23      	ldr	r3, [pc, #140]	; (80026fc <HAL_RCC_GetSysClockFreq+0x114>)
 800266e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	2b0c      	cmp	r3, #12
 8002674:	d134      	bne.n	80026e0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002676:	4b1e      	ldr	r3, [pc, #120]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002678:	68db      	ldr	r3, [r3, #12]
 800267a:	f003 0303 	and.w	r3, r3, #3
 800267e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b02      	cmp	r3, #2
 8002684:	d003      	beq.n	800268e <HAL_RCC_GetSysClockFreq+0xa6>
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	2b03      	cmp	r3, #3
 800268a:	d003      	beq.n	8002694 <HAL_RCC_GetSysClockFreq+0xac>
 800268c:	e005      	b.n	800269a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800268e:	4b1a      	ldr	r3, [pc, #104]	; (80026f8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002690:	617b      	str	r3, [r7, #20]
      break;
 8002692:	e005      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002694:	4b19      	ldr	r3, [pc, #100]	; (80026fc <HAL_RCC_GetSysClockFreq+0x114>)
 8002696:	617b      	str	r3, [r7, #20]
      break;
 8002698:	e002      	b.n	80026a0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	617b      	str	r3, [r7, #20]
      break;
 800269e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80026a0:	4b13      	ldr	r3, [pc, #76]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0307 	and.w	r3, r3, #7
 80026aa:	3301      	adds	r3, #1
 80026ac:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80026ae:	4b10      	ldr	r3, [pc, #64]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026b0:	68db      	ldr	r3, [r3, #12]
 80026b2:	0a1b      	lsrs	r3, r3, #8
 80026b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80026b8:	697a      	ldr	r2, [r7, #20]
 80026ba:	fb03 f202 	mul.w	r2, r3, r2
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026c4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80026c6:	4b0a      	ldr	r3, [pc, #40]	; (80026f0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026c8:	68db      	ldr	r3, [r3, #12]
 80026ca:	0e5b      	lsrs	r3, r3, #25
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	3301      	adds	r3, #1
 80026d2:	005b      	lsls	r3, r3, #1
 80026d4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80026d6:	697a      	ldr	r2, [r7, #20]
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	fbb2 f3f3 	udiv	r3, r2, r3
 80026de:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80026e0:	69bb      	ldr	r3, [r7, #24]
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3724      	adds	r7, #36	; 0x24
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	40021000 	.word	0x40021000
 80026f4:	08009688 	.word	0x08009688
 80026f8:	00f42400 	.word	0x00f42400
 80026fc:	007a1200 	.word	0x007a1200

08002700 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_RCC_GetHCLKFreq+0x14>)
 8002706:	681b      	ldr	r3, [r3, #0]
}
 8002708:	4618      	mov	r0, r3
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	20000004 	.word	0x20000004

08002718 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800271c:	f7ff fff0 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 8002720:	4602      	mov	r2, r0
 8002722:	4b06      	ldr	r3, [pc, #24]	; (800273c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	0a1b      	lsrs	r3, r3, #8
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	4904      	ldr	r1, [pc, #16]	; (8002740 <HAL_RCC_GetPCLK1Freq+0x28>)
 800272e:	5ccb      	ldrb	r3, [r1, r3]
 8002730:	f003 031f 	and.w	r3, r3, #31
 8002734:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002738:	4618      	mov	r0, r3
 800273a:	bd80      	pop	{r7, pc}
 800273c:	40021000 	.word	0x40021000
 8002740:	08009680 	.word	0x08009680

08002744 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002748:	f7ff ffda 	bl	8002700 <HAL_RCC_GetHCLKFreq>
 800274c:	4602      	mov	r2, r0
 800274e:	4b06      	ldr	r3, [pc, #24]	; (8002768 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	0adb      	lsrs	r3, r3, #11
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <HAL_RCC_GetPCLK2Freq+0x28>)
 800275a:	5ccb      	ldrb	r3, [r1, r3]
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40021000 	.word	0x40021000
 800276c:	08009680 	.word	0x08009680

08002770 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
 8002778:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	220f      	movs	r2, #15
 800277e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002780:	4b12      	ldr	r3, [pc, #72]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f003 0203 	and.w	r2, r3, #3
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800278c:	4b0f      	ldr	r3, [pc, #60]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002798:	4b0c      	ldr	r3, [pc, #48]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80027a4:	4b09      	ldr	r3, [pc, #36]	; (80027cc <HAL_RCC_GetClockConfig+0x5c>)
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	08db      	lsrs	r3, r3, #3
 80027aa:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <HAL_RCC_GetClockConfig+0x60>)
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0207 	and.w	r2, r3, #7
 80027ba:	683b      	ldr	r3, [r7, #0]
 80027bc:	601a      	str	r2, [r3, #0]
}
 80027be:	bf00      	nop
 80027c0:	370c      	adds	r7, #12
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	40021000 	.word	0x40021000
 80027d0:	40022000 	.word	0x40022000

080027d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80027dc:	2300      	movs	r3, #0
 80027de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80027e0:	4b2a      	ldr	r3, [pc, #168]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80027ec:	f7ff f9bc 	bl	8001b68 <HAL_PWREx_GetVoltageRange>
 80027f0:	6178      	str	r0, [r7, #20]
 80027f2:	e014      	b.n	800281e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80027f4:	4b25      	ldr	r3, [pc, #148]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027f8:	4a24      	ldr	r2, [pc, #144]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80027fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002800:	4b22      	ldr	r3, [pc, #136]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002808:	60fb      	str	r3, [r7, #12]
 800280a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800280c:	f7ff f9ac 	bl	8001b68 <HAL_PWREx_GetVoltageRange>
 8002810:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b1e      	ldr	r3, [pc, #120]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002814:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002816:	4a1d      	ldr	r2, [pc, #116]	; (800288c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800281c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002824:	d10b      	bne.n	800283e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	d919      	bls.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2ba0      	cmp	r3, #160	; 0xa0
 8002830:	d902      	bls.n	8002838 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002832:	2302      	movs	r3, #2
 8002834:	613b      	str	r3, [r7, #16]
 8002836:	e013      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002838:	2301      	movs	r3, #1
 800283a:	613b      	str	r3, [r7, #16]
 800283c:	e010      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2b80      	cmp	r3, #128	; 0x80
 8002842:	d902      	bls.n	800284a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002844:	2303      	movs	r3, #3
 8002846:	613b      	str	r3, [r7, #16]
 8002848:	e00a      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2b80      	cmp	r3, #128	; 0x80
 800284e:	d102      	bne.n	8002856 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002850:	2302      	movs	r3, #2
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	e004      	b.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2b70      	cmp	r3, #112	; 0x70
 800285a:	d101      	bne.n	8002860 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800285c:	2301      	movs	r3, #1
 800285e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002860:	4b0b      	ldr	r3, [pc, #44]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f023 0207 	bic.w	r2, r3, #7
 8002868:	4909      	ldr	r1, [pc, #36]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002870:	4b07      	ldr	r3, [pc, #28]	; (8002890 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0307 	and.w	r3, r3, #7
 8002878:	693a      	ldr	r2, [r7, #16]
 800287a:	429a      	cmp	r2, r3
 800287c:	d001      	beq.n	8002882 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e000      	b.n	8002884 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002882:	2300      	movs	r3, #0
}
 8002884:	4618      	mov	r0, r3
 8002886:	3718      	adds	r7, #24
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}
 800288c:	40021000 	.word	0x40021000
 8002890:	40022000 	.word	0x40022000

08002894 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	b086      	sub	sp, #24
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800289c:	2300      	movs	r3, #0
 800289e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80028a0:	2300      	movs	r3, #0
 80028a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d041      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028b4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028b8:	d02a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80028ba:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80028be:	d824      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028c4:	d008      	beq.n	80028d8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80028c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80028ca:	d81e      	bhi.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x76>
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d00a      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80028d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028d4:	d010      	beq.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80028d6:	e018      	b.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028d8:	4b86      	ldr	r3, [pc, #536]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	4a85      	ldr	r2, [pc, #532]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80028de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028e2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028e4:	e015      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	3304      	adds	r3, #4
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f000 fabb 	bl	8002e68 <RCCEx_PLLSAI1_Config>
 80028f2:	4603      	mov	r3, r0
 80028f4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80028f6:	e00c      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	3320      	adds	r3, #32
 80028fc:	2100      	movs	r1, #0
 80028fe:	4618      	mov	r0, r3
 8002900:	f000 fba6 	bl	8003050 <RCCEx_PLLSAI2_Config>
 8002904:	4603      	mov	r3, r0
 8002906:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002908:	e003      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800290a:	2301      	movs	r3, #1
 800290c:	74fb      	strb	r3, [r7, #19]
      break;
 800290e:	e000      	b.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002910:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002912:	7cfb      	ldrb	r3, [r7, #19]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d10b      	bne.n	8002930 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002918:	4b76      	ldr	r3, [pc, #472]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800291a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800291e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002926:	4973      	ldr	r1, [pc, #460]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002928:	4313      	orrs	r3, r2
 800292a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800292e:	e001      	b.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002930:	7cfb      	ldrb	r3, [r7, #19]
 8002932:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800293c:	2b00      	cmp	r3, #0
 800293e:	d041      	beq.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002944:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002948:	d02a      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800294a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800294e:	d824      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002950:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002954:	d008      	beq.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002956:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800295a:	d81e      	bhi.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d00a      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002964:	d010      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002966:	e018      	b.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002968:	4b62      	ldr	r3, [pc, #392]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	4a61      	ldr	r2, [pc, #388]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800296e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002972:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002974:	e015      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	2100      	movs	r1, #0
 800297c:	4618      	mov	r0, r3
 800297e:	f000 fa73 	bl	8002e68 <RCCEx_PLLSAI1_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002986:	e00c      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	3320      	adds	r3, #32
 800298c:	2100      	movs	r1, #0
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fb5e 	bl	8003050 <RCCEx_PLLSAI2_Config>
 8002994:	4603      	mov	r3, r0
 8002996:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002998:	e003      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	74fb      	strb	r3, [r7, #19]
      break;
 800299e:	e000      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80029a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80029a2:	7cfb      	ldrb	r3, [r7, #19]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d10b      	bne.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80029a8:	4b52      	ldr	r3, [pc, #328]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029ae:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80029b6:	494f      	ldr	r1, [pc, #316]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029b8:	4313      	orrs	r3, r2
 80029ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80029be:	e001      	b.n	80029c4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029c0:	7cfb      	ldrb	r3, [r7, #19]
 80029c2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	f000 80a0 	beq.w	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d2:	2300      	movs	r3, #0
 80029d4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029d6:	4b47      	ldr	r3, [pc, #284]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d101      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e000      	b.n	80029e8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80029e6:	2300      	movs	r3, #0
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d00d      	beq.n	8002a08 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ec:	4b41      	ldr	r3, [pc, #260]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029f0:	4a40      	ldr	r2, [pc, #256]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f6:	6593      	str	r3, [r2, #88]	; 0x58
 80029f8:	4b3e      	ldr	r3, [pc, #248]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a00:	60bb      	str	r3, [r7, #8]
 8002a02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a04:	2301      	movs	r3, #1
 8002a06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a08:	4b3b      	ldr	r3, [pc, #236]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a3a      	ldr	r2, [pc, #232]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a14:	f7fe fdc6 	bl	80015a4 <HAL_GetTick>
 8002a18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a1a:	e009      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a1c:	f7fe fdc2 	bl	80015a4 <HAL_GetTick>
 8002a20:	4602      	mov	r2, r0
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	1ad3      	subs	r3, r2, r3
 8002a26:	2b02      	cmp	r3, #2
 8002a28:	d902      	bls.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8002a2a:	2303      	movs	r3, #3
 8002a2c:	74fb      	strb	r3, [r7, #19]
        break;
 8002a2e:	e005      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002a30:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d0ef      	beq.n	8002a1c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8002a3c:	7cfb      	ldrb	r3, [r7, #19]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d15c      	bne.n	8002afc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002a42:	4b2c      	ldr	r3, [pc, #176]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002a4e:	697b      	ldr	r3, [r7, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d01f      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	429a      	cmp	r2, r3
 8002a5e:	d019      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a60:	4b24      	ldr	r3, [pc, #144]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a6c:	4b21      	ldr	r3, [pc, #132]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a72:	4a20      	ldr	r2, [pc, #128]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a82:	4a1c      	ldr	r2, [pc, #112]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a88:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	f003 0301 	and.w	r3, r3, #1
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d016      	beq.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a9e:	f7fe fd81 	bl	80015a4 <HAL_GetTick>
 8002aa2:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002aa4:	e00b      	b.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa6:	f7fe fd7d 	bl	80015a4 <HAL_GetTick>
 8002aaa:	4602      	mov	r2, r0
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	1ad3      	subs	r3, r2, r3
 8002ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d902      	bls.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002ab8:	2303      	movs	r3, #3
 8002aba:	74fb      	strb	r3, [r7, #19]
            break;
 8002abc:	e006      	b.n	8002acc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002abe:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ac0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d0ec      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002acc:	7cfb      	ldrb	r3, [r7, #19]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10c      	bne.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ad2:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ad8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002ae2:	4904      	ldr	r1, [pc, #16]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002aea:	e009      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002aec:	7cfb      	ldrb	r3, [r7, #19]
 8002aee:	74bb      	strb	r3, [r7, #18]
 8002af0:	e006      	b.n	8002b00 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8002af2:	bf00      	nop
 8002af4:	40021000 	.word	0x40021000
 8002af8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002afc:	7cfb      	ldrb	r3, [r7, #19]
 8002afe:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b00:	7c7b      	ldrb	r3, [r7, #17]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b06:	4b9e      	ldr	r3, [pc, #632]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b0a:	4a9d      	ldr	r2, [pc, #628]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b0c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b10:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002b1e:	4b98      	ldr	r3, [pc, #608]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f023 0203 	bic.w	r2, r3, #3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b2c:	4994      	ldr	r1, [pc, #592]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002b40:	4b8f      	ldr	r3, [pc, #572]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f023 020c 	bic.w	r2, r3, #12
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b4e:	498c      	ldr	r1, [pc, #560]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0304 	and.w	r3, r3, #4
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002b62:	4b87      	ldr	r3, [pc, #540]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4983      	ldr	r1, [pc, #524]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002b84:	4b7e      	ldr	r3, [pc, #504]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b92:	497b      	ldr	r1, [pc, #492]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002ba6:	4b76      	ldr	r3, [pc, #472]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002bb4:	4972      	ldr	r1, [pc, #456]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f003 0320 	and.w	r3, r3, #32
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d00a      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002bc8:	4b6d      	ldr	r3, [pc, #436]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002bd6:	496a      	ldr	r1, [pc, #424]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d00a      	beq.n	8002c00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002bea:	4b65      	ldr	r3, [pc, #404]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bf0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bf8:	4961      	ldr	r1, [pc, #388]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00a      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c0c:	4b5c      	ldr	r3, [pc, #368]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c12:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	4959      	ldr	r1, [pc, #356]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d00a      	beq.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c2e:	4b54      	ldr	r3, [pc, #336]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c34:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c3c:	4950      	ldr	r1, [pc, #320]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c3e:	4313      	orrs	r3, r2
 8002c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d00a      	beq.n	8002c66 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002c50:	4b4b      	ldr	r3, [pc, #300]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c56:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c5e:	4948      	ldr	r1, [pc, #288]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002c72:	4b43      	ldr	r3, [pc, #268]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c78:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c80:	493f      	ldr	r1, [pc, #252]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c82:	4313      	orrs	r3, r2
 8002c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d028      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c94:	4b3a      	ldr	r3, [pc, #232]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c9a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002ca2:	4937      	ldr	r1, [pc, #220]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002ca4:	4313      	orrs	r3, r2
 8002ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cae:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cb2:	d106      	bne.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cb4:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cb6:	68db      	ldr	r3, [r3, #12]
 8002cb8:	4a31      	ldr	r2, [pc, #196]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cba:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cbe:	60d3      	str	r3, [r2, #12]
 8002cc0:	e011      	b.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002cc6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002cca:	d10c      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	3304      	adds	r3, #4
 8002cd0:	2101      	movs	r1, #1
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f8c8 	bl	8002e68 <RCCEx_PLLSAI1_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002cdc:	7cfb      	ldrb	r3, [r7, #19]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d001      	beq.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002ce2:	7cfb      	ldrb	r3, [r7, #19]
 8002ce4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d028      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002cf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cf8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d00:	491f      	ldr	r1, [pc, #124]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d02:	4313      	orrs	r3, r2
 8002d04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d10:	d106      	bne.n	8002d20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d12:	4b1b      	ldr	r3, [pc, #108]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d14:	68db      	ldr	r3, [r3, #12]
 8002d16:	4a1a      	ldr	r2, [pc, #104]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d18:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d1c:	60d3      	str	r3, [r2, #12]
 8002d1e:	e011      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d24:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d28:	d10c      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	3304      	adds	r3, #4
 8002d2e:	2101      	movs	r1, #1
 8002d30:	4618      	mov	r0, r3
 8002d32:	f000 f899 	bl	8002e68 <RCCEx_PLLSAI1_Config>
 8002d36:	4603      	mov	r3, r0
 8002d38:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d3a:	7cfb      	ldrb	r3, [r7, #19]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d001      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002d40:	7cfb      	ldrb	r3, [r7, #19]
 8002d42:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d02b      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002d50:	4b0b      	ldr	r3, [pc, #44]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5e:	4908      	ldr	r1, [pc, #32]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002d6e:	d109      	bne.n	8002d84 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002d70:	4b03      	ldr	r3, [pc, #12]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	4a02      	ldr	r2, [pc, #8]	; (8002d80 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002d76:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002d7a:	60d3      	str	r3, [r2, #12]
 8002d7c:	e014      	b.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d88:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002d8c:	d10c      	bne.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	3304      	adds	r3, #4
 8002d92:	2101      	movs	r1, #1
 8002d94:	4618      	mov	r0, r3
 8002d96:	f000 f867 	bl	8002e68 <RCCEx_PLLSAI1_Config>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002d9e:	7cfb      	ldrb	r3, [r7, #19]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002da4:	7cfb      	ldrb	r3, [r7, #19]
 8002da6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d02f      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002db4:	4b2b      	ldr	r3, [pc, #172]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dc2:	4928      	ldr	r1, [pc, #160]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dd2:	d10d      	bne.n	8002df0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	2102      	movs	r1, #2
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f000 f844 	bl	8002e68 <RCCEx_PLLSAI1_Config>
 8002de0:	4603      	mov	r3, r0
 8002de2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002de4:	7cfb      	ldrb	r3, [r7, #19]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d014      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002dea:	7cfb      	ldrb	r3, [r7, #19]
 8002dec:	74bb      	strb	r3, [r7, #18]
 8002dee:	e011      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002df4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002df8:	d10c      	bne.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	3320      	adds	r3, #32
 8002dfe:	2102      	movs	r1, #2
 8002e00:	4618      	mov	r0, r3
 8002e02:	f000 f925 	bl	8003050 <RCCEx_PLLSAI2_Config>
 8002e06:	4603      	mov	r3, r0
 8002e08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002e0a:	7cfb      	ldrb	r3, [r7, #19]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002e10:	7cfb      	ldrb	r3, [r7, #19]
 8002e12:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00a      	beq.n	8002e36 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002e20:	4b10      	ldr	r3, [pc, #64]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e26:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002e2e:	490d      	ldr	r1, [pc, #52]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d00b      	beq.n	8002e5a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e48:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002e52:	4904      	ldr	r1, [pc, #16]	; (8002e64 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002e5a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	3718      	adds	r7, #24
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	40021000 	.word	0x40021000

08002e68 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002e68:	b580      	push	{r7, lr}
 8002e6a:	b084      	sub	sp, #16
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	6078      	str	r0, [r7, #4]
 8002e70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002e72:	2300      	movs	r3, #0
 8002e74:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002e76:	4b75      	ldr	r3, [pc, #468]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	f003 0303 	and.w	r3, r3, #3
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d018      	beq.n	8002eb4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002e82:	4b72      	ldr	r3, [pc, #456]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0203 	and.w	r2, r3, #3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	429a      	cmp	r2, r3
 8002e90:	d10d      	bne.n	8002eae <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
       ||
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d009      	beq.n	8002eae <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002e9a:	4b6c      	ldr	r3, [pc, #432]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	091b      	lsrs	r3, r3, #4
 8002ea0:	f003 0307 	and.w	r3, r3, #7
 8002ea4:	1c5a      	adds	r2, r3, #1
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
       ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d047      	beq.n	8002f3e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
 8002eb2:	e044      	b.n	8002f3e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	2b03      	cmp	r3, #3
 8002eba:	d018      	beq.n	8002eee <RCCEx_PLLSAI1_Config+0x86>
 8002ebc:	2b03      	cmp	r3, #3
 8002ebe:	d825      	bhi.n	8002f0c <RCCEx_PLLSAI1_Config+0xa4>
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d002      	beq.n	8002eca <RCCEx_PLLSAI1_Config+0x62>
 8002ec4:	2b02      	cmp	r3, #2
 8002ec6:	d009      	beq.n	8002edc <RCCEx_PLLSAI1_Config+0x74>
 8002ec8:	e020      	b.n	8002f0c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002eca:	4b60      	ldr	r3, [pc, #384]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f003 0302 	and.w	r3, r3, #2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d11d      	bne.n	8002f12 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eda:	e01a      	b.n	8002f12 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002edc:	4b5b      	ldr	r3, [pc, #364]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d116      	bne.n	8002f16 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002eec:	e013      	b.n	8002f16 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002eee:	4b57      	ldr	r3, [pc, #348]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d10f      	bne.n	8002f1a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002efa:	4b54      	ldr	r3, [pc, #336]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d109      	bne.n	8002f1a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002f0a:	e006      	b.n	8002f1a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002f10:	e004      	b.n	8002f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f12:	bf00      	nop
 8002f14:	e002      	b.n	8002f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f16:	bf00      	nop
 8002f18:	e000      	b.n	8002f1c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002f1a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002f1c:	7bfb      	ldrb	r3, [r7, #15]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10d      	bne.n	8002f3e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002f22:	4b4a      	ldr	r3, [pc, #296]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6819      	ldr	r1, [r3, #0]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	3b01      	subs	r3, #1
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	430b      	orrs	r3, r1
 8002f38:	4944      	ldr	r1, [pc, #272]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f3a:	4313      	orrs	r3, r2
 8002f3c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002f3e:	7bfb      	ldrb	r3, [r7, #15]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d17d      	bne.n	8003040 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002f44:	4b41      	ldr	r3, [pc, #260]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a40      	ldr	r2, [pc, #256]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f50:	f7fe fb28 	bl	80015a4 <HAL_GetTick>
 8002f54:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f56:	e009      	b.n	8002f6c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002f58:	f7fe fb24 	bl	80015a4 <HAL_GetTick>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	68bb      	ldr	r3, [r7, #8]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b02      	cmp	r3, #2
 8002f64:	d902      	bls.n	8002f6c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	73fb      	strb	r3, [r7, #15]
        break;
 8002f6a:	e005      	b.n	8002f78 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002f6c:	4b37      	ldr	r3, [pc, #220]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1ef      	bne.n	8002f58 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002f78:	7bfb      	ldrb	r3, [r7, #15]
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d160      	bne.n	8003040 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d111      	bne.n	8002fa8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002f84:	4b31      	ldr	r3, [pc, #196]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002f8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6892      	ldr	r2, [r2, #8]
 8002f94:	0211      	lsls	r1, r2, #8
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	68d2      	ldr	r2, [r2, #12]
 8002f9a:	0912      	lsrs	r2, r2, #4
 8002f9c:	0452      	lsls	r2, r2, #17
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	492a      	ldr	r1, [pc, #168]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	610b      	str	r3, [r1, #16]
 8002fa6:	e027      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	2b01      	cmp	r3, #1
 8002fac:	d112      	bne.n	8002fd4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fae:	4b27      	ldr	r3, [pc, #156]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002fb6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	6892      	ldr	r2, [r2, #8]
 8002fbe:	0211      	lsls	r1, r2, #8
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	6912      	ldr	r2, [r2, #16]
 8002fc4:	0852      	lsrs	r2, r2, #1
 8002fc6:	3a01      	subs	r2, #1
 8002fc8:	0552      	lsls	r2, r2, #21
 8002fca:	430a      	orrs	r2, r1
 8002fcc:	491f      	ldr	r1, [pc, #124]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	610b      	str	r3, [r1, #16]
 8002fd2:	e011      	b.n	8002ff8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002fd4:	4b1d      	ldr	r3, [pc, #116]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002fdc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6892      	ldr	r2, [r2, #8]
 8002fe4:	0211      	lsls	r1, r2, #8
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6952      	ldr	r2, [r2, #20]
 8002fea:	0852      	lsrs	r2, r2, #1
 8002fec:	3a01      	subs	r2, #1
 8002fee:	0652      	lsls	r2, r2, #25
 8002ff0:	430a      	orrs	r2, r1
 8002ff2:	4916      	ldr	r1, [pc, #88]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ff8:	4b14      	ldr	r3, [pc, #80]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a13      	ldr	r2, [pc, #76]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ffe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003002:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003004:	f7fe face 	bl	80015a4 <HAL_GetTick>
 8003008:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800300a:	e009      	b.n	8003020 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800300c:	f7fe faca 	bl	80015a4 <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d902      	bls.n	8003020 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	73fb      	strb	r3, [r7, #15]
          break;
 800301e:	e005      	b.n	800302c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003020:	4b0a      	ldr	r3, [pc, #40]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d0ef      	beq.n	800300c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 800302c:	7bfb      	ldrb	r3, [r7, #15]
 800302e:	2b00      	cmp	r3, #0
 8003030:	d106      	bne.n	8003040 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003032:	4b06      	ldr	r3, [pc, #24]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	699b      	ldr	r3, [r3, #24]
 800303a:	4904      	ldr	r1, [pc, #16]	; (800304c <RCCEx_PLLSAI1_Config+0x1e4>)
 800303c:	4313      	orrs	r3, r2
 800303e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003040:	7bfb      	ldrb	r3, [r7, #15]
}
 8003042:	4618      	mov	r0, r3
 8003044:	3710      	adds	r7, #16
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000

08003050 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
 8003058:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800305a:	2300      	movs	r3, #0
 800305c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800305e:	4b6a      	ldr	r3, [pc, #424]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	f003 0303 	and.w	r3, r3, #3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d018      	beq.n	800309c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800306a:	4b67      	ldr	r3, [pc, #412]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800306c:	68db      	ldr	r3, [r3, #12]
 800306e:	f003 0203 	and.w	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d10d      	bne.n	8003096 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
       ||
 800307e:	2b00      	cmp	r3, #0
 8003080:	d009      	beq.n	8003096 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003082:	4b61      	ldr	r3, [pc, #388]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
       ||
 8003092:	429a      	cmp	r2, r3
 8003094:	d047      	beq.n	8003126 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	73fb      	strb	r3, [r7, #15]
 800309a:	e044      	b.n	8003126 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2b03      	cmp	r3, #3
 80030a2:	d018      	beq.n	80030d6 <RCCEx_PLLSAI2_Config+0x86>
 80030a4:	2b03      	cmp	r3, #3
 80030a6:	d825      	bhi.n	80030f4 <RCCEx_PLLSAI2_Config+0xa4>
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d002      	beq.n	80030b2 <RCCEx_PLLSAI2_Config+0x62>
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d009      	beq.n	80030c4 <RCCEx_PLLSAI2_Config+0x74>
 80030b0:	e020      	b.n	80030f4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80030b2:	4b55      	ldr	r3, [pc, #340]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0302 	and.w	r3, r3, #2
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11d      	bne.n	80030fa <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030c2:	e01a      	b.n	80030fa <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80030c4:	4b50      	ldr	r3, [pc, #320]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d116      	bne.n	80030fe <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80030d0:	2301      	movs	r3, #1
 80030d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030d4:	e013      	b.n	80030fe <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80030d6:	4b4c      	ldr	r3, [pc, #304]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10f      	bne.n	8003102 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80030e2:	4b49      	ldr	r3, [pc, #292]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d109      	bne.n	8003102 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80030ee:	2301      	movs	r3, #1
 80030f0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80030f2:	e006      	b.n	8003102 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	73fb      	strb	r3, [r7, #15]
      break;
 80030f8:	e004      	b.n	8003104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030fa:	bf00      	nop
 80030fc:	e002      	b.n	8003104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80030fe:	bf00      	nop
 8003100:	e000      	b.n	8003104 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003102:	bf00      	nop
    }

    if(status == HAL_OK)
 8003104:	7bfb      	ldrb	r3, [r7, #15]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10d      	bne.n	8003126 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800310a:	4b3f      	ldr	r3, [pc, #252]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6819      	ldr	r1, [r3, #0]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	3b01      	subs	r3, #1
 800311c:	011b      	lsls	r3, r3, #4
 800311e:	430b      	orrs	r3, r1
 8003120:	4939      	ldr	r1, [pc, #228]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003122:	4313      	orrs	r3, r2
 8003124:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d167      	bne.n	80031fc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800312c:	4b36      	ldr	r3, [pc, #216]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a35      	ldr	r2, [pc, #212]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003132:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003136:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003138:	f7fe fa34 	bl	80015a4 <HAL_GetTick>
 800313c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800313e:	e009      	b.n	8003154 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003140:	f7fe fa30 	bl	80015a4 <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	68bb      	ldr	r3, [r7, #8]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b02      	cmp	r3, #2
 800314c:	d902      	bls.n	8003154 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	73fb      	strb	r3, [r7, #15]
        break;
 8003152:	e005      	b.n	8003160 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003154:	4b2c      	ldr	r3, [pc, #176]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d1ef      	bne.n	8003140 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d14a      	bne.n	80031fc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d111      	bne.n	8003190 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800316c:	4b26      	ldr	r3, [pc, #152]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8003174:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003178:	687a      	ldr	r2, [r7, #4]
 800317a:	6892      	ldr	r2, [r2, #8]
 800317c:	0211      	lsls	r1, r2, #8
 800317e:	687a      	ldr	r2, [r7, #4]
 8003180:	68d2      	ldr	r2, [r2, #12]
 8003182:	0912      	lsrs	r2, r2, #4
 8003184:	0452      	lsls	r2, r2, #17
 8003186:	430a      	orrs	r2, r1
 8003188:	491f      	ldr	r1, [pc, #124]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 800318a:	4313      	orrs	r3, r2
 800318c:	614b      	str	r3, [r1, #20]
 800318e:	e011      	b.n	80031b4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003190:	4b1d      	ldr	r3, [pc, #116]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003192:	695b      	ldr	r3, [r3, #20]
 8003194:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003198:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6892      	ldr	r2, [r2, #8]
 80031a0:	0211      	lsls	r1, r2, #8
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6912      	ldr	r2, [r2, #16]
 80031a6:	0852      	lsrs	r2, r2, #1
 80031a8:	3a01      	subs	r2, #1
 80031aa:	0652      	lsls	r2, r2, #25
 80031ac:	430a      	orrs	r2, r1
 80031ae:	4916      	ldr	r1, [pc, #88]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80031b4:	4b14      	ldr	r3, [pc, #80]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a13      	ldr	r2, [pc, #76]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031be:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031c0:	f7fe f9f0 	bl	80015a4 <HAL_GetTick>
 80031c4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031c6:	e009      	b.n	80031dc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80031c8:	f7fe f9ec 	bl	80015a4 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68bb      	ldr	r3, [r7, #8]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d902      	bls.n	80031dc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	73fb      	strb	r3, [r7, #15]
          break;
 80031da:	e005      	b.n	80031e8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80031dc:	4b0a      	ldr	r3, [pc, #40]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0ef      	beq.n	80031c8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80031e8:	7bfb      	ldrb	r3, [r7, #15]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80031ee:	4b06      	ldr	r3, [pc, #24]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f0:	695a      	ldr	r2, [r3, #20]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4904      	ldr	r1, [pc, #16]	; (8003208 <RCCEx_PLLSAI2_Config+0x1b8>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80031fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	40021000 	.word	0x40021000

0800320c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d101      	bne.n	800321e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800321a:	2301      	movs	r3, #1
 800321c:	e049      	b.n	80032b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d106      	bne.n	8003238 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f7fd ff44 	bl	80010c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2202      	movs	r2, #2
 800323c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3304      	adds	r3, #4
 8003248:	4619      	mov	r1, r3
 800324a:	4610      	mov	r0, r2
 800324c:	f000 f9d0 	bl	80035f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2201      	movs	r2, #1
 80032a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3708      	adds	r7, #8
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
	...

080032bc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	d001      	beq.n	80032d4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e04f      	b.n	8003374 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2202      	movs	r2, #2
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	68da      	ldr	r2, [r3, #12]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f042 0201 	orr.w	r2, r2, #1
 80032ea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4a23      	ldr	r2, [pc, #140]	; (8003380 <HAL_TIM_Base_Start_IT+0xc4>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d01d      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x76>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d018      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x76>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4a1f      	ldr	r2, [pc, #124]	; (8003384 <HAL_TIM_Base_Start_IT+0xc8>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d013      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x76>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a1e      	ldr	r2, [pc, #120]	; (8003388 <HAL_TIM_Base_Start_IT+0xcc>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00e      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x76>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4a1c      	ldr	r2, [pc, #112]	; (800338c <HAL_TIM_Base_Start_IT+0xd0>)
 800331a:	4293      	cmp	r3, r2
 800331c:	d009      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x76>
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a1b      	ldr	r2, [pc, #108]	; (8003390 <HAL_TIM_Base_Start_IT+0xd4>)
 8003324:	4293      	cmp	r3, r2
 8003326:	d004      	beq.n	8003332 <HAL_TIM_Base_Start_IT+0x76>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a19      	ldr	r2, [pc, #100]	; (8003394 <HAL_TIM_Base_Start_IT+0xd8>)
 800332e:	4293      	cmp	r3, r2
 8003330:	d115      	bne.n	800335e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	4b17      	ldr	r3, [pc, #92]	; (8003398 <HAL_TIM_Base_Start_IT+0xdc>)
 800333a:	4013      	ands	r3, r2
 800333c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	2b06      	cmp	r3, #6
 8003342:	d015      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0xb4>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800334a:	d011      	beq.n	8003370 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681a      	ldr	r2, [r3, #0]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800335c:	e008      	b.n	8003370 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	681a      	ldr	r2, [r3, #0]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f042 0201 	orr.w	r2, r2, #1
 800336c:	601a      	str	r2, [r3, #0]
 800336e:	e000      	b.n	8003372 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003370:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3714      	adds	r7, #20
 8003378:	46bd      	mov	sp, r7
 800337a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337e:	4770      	bx	lr
 8003380:	40012c00 	.word	0x40012c00
 8003384:	40000400 	.word	0x40000400
 8003388:	40000800 	.word	0x40000800
 800338c:	40000c00 	.word	0x40000c00
 8003390:	40013400 	.word	0x40013400
 8003394:	40014000 	.word	0x40014000
 8003398:	00010007 	.word	0x00010007

0800339c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b084      	sub	sp, #16
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	691b      	ldr	r3, [r3, #16]
 80033b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	f003 0302 	and.w	r3, r3, #2
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d020      	beq.n	8003400 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	f003 0302 	and.w	r3, r3, #2
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d01b      	beq.n	8003400 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f06f 0202 	mvn.w	r2, #2
 80033d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2201      	movs	r2, #1
 80033d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	699b      	ldr	r3, [r3, #24]
 80033de:	f003 0303 	and.w	r3, r3, #3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d003      	beq.n	80033ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 f8e4 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 80033ec:	e005      	b.n	80033fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f000 f8d6 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f000 f8e7 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003400:	68bb      	ldr	r3, [r7, #8]
 8003402:	f003 0304 	and.w	r3, r3, #4
 8003406:	2b00      	cmp	r3, #0
 8003408:	d020      	beq.n	800344c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d01b      	beq.n	800344c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f06f 0204 	mvn.w	r2, #4
 800341c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2202      	movs	r2, #2
 8003422:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800342e:	2b00      	cmp	r3, #0
 8003430:	d003      	beq.n	800343a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f000 f8be 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 8003438:	e005      	b.n	8003446 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	f000 f8b0 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003440:	6878      	ldr	r0, [r7, #4]
 8003442:	f000 f8c1 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2200      	movs	r2, #0
 800344a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800344c:	68bb      	ldr	r3, [r7, #8]
 800344e:	f003 0308 	and.w	r3, r3, #8
 8003452:	2b00      	cmp	r3, #0
 8003454:	d020      	beq.n	8003498 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	f003 0308 	and.w	r3, r3, #8
 800345c:	2b00      	cmp	r3, #0
 800345e:	d01b      	beq.n	8003498 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f06f 0208 	mvn.w	r2, #8
 8003468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2204      	movs	r2, #4
 800346e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	69db      	ldr	r3, [r3, #28]
 8003476:	f003 0303 	and.w	r3, r3, #3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d003      	beq.n	8003486 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800347e:	6878      	ldr	r0, [r7, #4]
 8003480:	f000 f898 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 8003484:	e005      	b.n	8003492 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f88a 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f89b 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2200      	movs	r2, #0
 8003496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003498:	68bb      	ldr	r3, [r7, #8]
 800349a:	f003 0310 	and.w	r3, r3, #16
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d020      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f003 0310 	and.w	r3, r3, #16
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d01b      	beq.n	80034e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0210 	mvn.w	r2, #16
 80034b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2208      	movs	r2, #8
 80034ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f872 	bl	80035b4 <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f864 	bl	80035a0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f875 	bl	80035c8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80034e4:	68bb      	ldr	r3, [r7, #8]
 80034e6:	f003 0301 	and.w	r3, r3, #1
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d00c      	beq.n	8003508 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d007      	beq.n	8003508 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f06f 0201 	mvn.w	r2, #1
 8003500:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003502:	6878      	ldr	r0, [r7, #4]
 8003504:	f7fd fd94 	bl	8001030 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00c      	beq.n	800352c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003518:	2b00      	cmp	r3, #0
 800351a:	d007      	beq.n	800352c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003524:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f906 	bl	8003738 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003532:	2b00      	cmp	r3, #0
 8003534:	d00c      	beq.n	8003550 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 f8fe 	bl	800374c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00c      	beq.n	8003574 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003560:	2b00      	cmp	r3, #0
 8003562:	d007      	beq.n	8003574 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800356c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800356e:	6878      	ldr	r0, [r7, #4]
 8003570:	f000 f834 	bl	80035dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00c      	beq.n	8003598 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0320 	and.w	r3, r3, #32
 8003584:	2b00      	cmp	r3, #0
 8003586:	d007      	beq.n	8003598 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f06f 0220 	mvn.w	r2, #32
 8003590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f8c6 	bl	8003724 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003598:	bf00      	nop
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035dc:	b480      	push	{r7}
 80035de:	b083      	sub	sp, #12
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035e4:	bf00      	nop
 80035e6:	370c      	adds	r7, #12
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr

080035f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f0:	b480      	push	{r7}
 80035f2:	b085      	sub	sp, #20
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
 80035f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	4a40      	ldr	r2, [pc, #256]	; (8003704 <TIM_Base_SetConfig+0x114>)
 8003604:	4293      	cmp	r3, r2
 8003606:	d013      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800360e:	d00f      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a3d      	ldr	r2, [pc, #244]	; (8003708 <TIM_Base_SetConfig+0x118>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00b      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a3c      	ldr	r2, [pc, #240]	; (800370c <TIM_Base_SetConfig+0x11c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d007      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3b      	ldr	r2, [pc, #236]	; (8003710 <TIM_Base_SetConfig+0x120>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d003      	beq.n	8003630 <TIM_Base_SetConfig+0x40>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a3a      	ldr	r2, [pc, #232]	; (8003714 <TIM_Base_SetConfig+0x124>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d108      	bne.n	8003642 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003636:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a2f      	ldr	r2, [pc, #188]	; (8003704 <TIM_Base_SetConfig+0x114>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d01f      	beq.n	800368a <TIM_Base_SetConfig+0x9a>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003650:	d01b      	beq.n	800368a <TIM_Base_SetConfig+0x9a>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a2c      	ldr	r2, [pc, #176]	; (8003708 <TIM_Base_SetConfig+0x118>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d017      	beq.n	800368a <TIM_Base_SetConfig+0x9a>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <TIM_Base_SetConfig+0x11c>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d013      	beq.n	800368a <TIM_Base_SetConfig+0x9a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	4a2a      	ldr	r2, [pc, #168]	; (8003710 <TIM_Base_SetConfig+0x120>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d00f      	beq.n	800368a <TIM_Base_SetConfig+0x9a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a29      	ldr	r2, [pc, #164]	; (8003714 <TIM_Base_SetConfig+0x124>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d00b      	beq.n	800368a <TIM_Base_SetConfig+0x9a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a28      	ldr	r2, [pc, #160]	; (8003718 <TIM_Base_SetConfig+0x128>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d007      	beq.n	800368a <TIM_Base_SetConfig+0x9a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a27      	ldr	r2, [pc, #156]	; (800371c <TIM_Base_SetConfig+0x12c>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d003      	beq.n	800368a <TIM_Base_SetConfig+0x9a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a26      	ldr	r2, [pc, #152]	; (8003720 <TIM_Base_SetConfig+0x130>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d108      	bne.n	800369c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003690:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	68fa      	ldr	r2, [r7, #12]
 8003698:	4313      	orrs	r3, r2
 800369a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	695b      	ldr	r3, [r3, #20]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681a      	ldr	r2, [r3, #0]
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a10      	ldr	r2, [pc, #64]	; (8003704 <TIM_Base_SetConfig+0x114>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d00f      	beq.n	80036e8 <TIM_Base_SetConfig+0xf8>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <TIM_Base_SetConfig+0x124>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d00b      	beq.n	80036e8 <TIM_Base_SetConfig+0xf8>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a11      	ldr	r2, [pc, #68]	; (8003718 <TIM_Base_SetConfig+0x128>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d007      	beq.n	80036e8 <TIM_Base_SetConfig+0xf8>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	4a10      	ldr	r2, [pc, #64]	; (800371c <TIM_Base_SetConfig+0x12c>)
 80036dc:	4293      	cmp	r3, r2
 80036de:	d003      	beq.n	80036e8 <TIM_Base_SetConfig+0xf8>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	4a0f      	ldr	r2, [pc, #60]	; (8003720 <TIM_Base_SetConfig+0x130>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	d103      	bne.n	80036f0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	691a      	ldr	r2, [r3, #16]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2201      	movs	r2, #1
 80036f4:	615a      	str	r2, [r3, #20]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40000400 	.word	0x40000400
 800370c:	40000800 	.word	0x40000800
 8003710:	40000c00 	.word	0x40000c00
 8003714:	40013400 	.word	0x40013400
 8003718:	40014000 	.word	0x40014000
 800371c:	40014400 	.word	0x40014400
 8003720:	40014800 	.word	0x40014800

08003724 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800374c:	b480      	push	{r7}
 800374e:	b083      	sub	sp, #12
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003754:	bf00      	nop
 8003756:	370c      	adds	r7, #12
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b082      	sub	sp, #8
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e040      	b.n	80037f4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f7fd fcc2 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681a      	ldr	r2, [r3, #0]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 0201 	bic.w	r2, r2, #1
 800379c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 fb6a 	bl	8003e80 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f000 f8af 	bl	8003910 <UART_SetConfig>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d101      	bne.n	80037bc <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e01b      	b.n	80037f4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	685a      	ldr	r2, [r3, #4]
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037ca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	689a      	ldr	r2, [r3, #8]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037da:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f042 0201 	orr.w	r2, r2, #1
 80037ea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	f000 fbe9 	bl	8003fc4 <UART_CheckIdleState>
 80037f2:	4603      	mov	r3, r0
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	3708      	adds	r7, #8
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}

080037fc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b08a      	sub	sp, #40	; 0x28
 8003800:	af02      	add	r7, sp, #8
 8003802:	60f8      	str	r0, [r7, #12]
 8003804:	60b9      	str	r1, [r7, #8]
 8003806:	603b      	str	r3, [r7, #0]
 8003808:	4613      	mov	r3, r2
 800380a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003810:	2b20      	cmp	r3, #32
 8003812:	d178      	bne.n	8003906 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d002      	beq.n	8003820 <HAL_UART_Transmit+0x24>
 800381a:	88fb      	ldrh	r3, [r7, #6]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d101      	bne.n	8003824 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003820:	2301      	movs	r3, #1
 8003822:	e071      	b.n	8003908 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2221      	movs	r2, #33	; 0x21
 8003830:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003832:	f7fd feb7 	bl	80015a4 <HAL_GetTick>
 8003836:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	88fa      	ldrh	r2, [r7, #6]
 800383c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	88fa      	ldrh	r2, [r7, #6]
 8003844:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003850:	d108      	bne.n	8003864 <HAL_UART_Transmit+0x68>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	691b      	ldr	r3, [r3, #16]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d104      	bne.n	8003864 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800385a:	2300      	movs	r3, #0
 800385c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	61bb      	str	r3, [r7, #24]
 8003862:	e003      	b.n	800386c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003868:	2300      	movs	r3, #0
 800386a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800386c:	e030      	b.n	80038d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	9300      	str	r3, [sp, #0]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	2200      	movs	r2, #0
 8003876:	2180      	movs	r1, #128	; 0x80
 8003878:	68f8      	ldr	r0, [r7, #12]
 800387a:	f000 fc4b 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 800387e:	4603      	mov	r3, r0
 8003880:	2b00      	cmp	r3, #0
 8003882:	d004      	beq.n	800388e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2220      	movs	r2, #32
 8003888:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e03c      	b.n	8003908 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	2b00      	cmp	r3, #0
 8003892:	d10b      	bne.n	80038ac <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	881a      	ldrh	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038a0:	b292      	uxth	r2, r2
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	3302      	adds	r3, #2
 80038a8:	61bb      	str	r3, [r7, #24]
 80038aa:	e008      	b.n	80038be <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	781a      	ldrb	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	b292      	uxth	r2, r2
 80038b6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	3301      	adds	r3, #1
 80038bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038c4:	b29b      	uxth	r3, r3
 80038c6:	3b01      	subs	r3, #1
 80038c8:	b29a      	uxth	r2, r3
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d1c8      	bne.n	800386e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	9300      	str	r3, [sp, #0]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2140      	movs	r1, #64	; 0x40
 80038e6:	68f8      	ldr	r0, [r7, #12]
 80038e8:	f000 fc14 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2220      	movs	r2, #32
 80038f6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80038f8:	2303      	movs	r3, #3
 80038fa:	e005      	b.n	8003908 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003902:	2300      	movs	r3, #0
 8003904:	e000      	b.n	8003908 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 8003906:	2302      	movs	r3, #2
  }
}
 8003908:	4618      	mov	r0, r3
 800390a:	3720      	adds	r7, #32
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}

08003910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003914:	b08a      	sub	sp, #40	; 0x28
 8003916:	af00      	add	r7, sp, #0
 8003918:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	691b      	ldr	r3, [r3, #16]
 8003928:	431a      	orrs	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	431a      	orrs	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	69db      	ldr	r3, [r3, #28]
 8003934:	4313      	orrs	r3, r2
 8003936:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	681a      	ldr	r2, [r3, #0]
 800393e:	4ba4      	ldr	r3, [pc, #656]	; (8003bd0 <UART_SetConfig+0x2c0>)
 8003940:	4013      	ands	r3, r2
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	6812      	ldr	r2, [r2, #0]
 8003946:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003948:	430b      	orrs	r3, r1
 800394a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	68da      	ldr	r2, [r3, #12]
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	430a      	orrs	r2, r1
 8003960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	699b      	ldr	r3, [r3, #24]
 8003966:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a99      	ldr	r2, [pc, #612]	; (8003bd4 <UART_SetConfig+0x2c4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d004      	beq.n	800397c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	6a1b      	ldr	r3, [r3, #32]
 8003976:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003978:	4313      	orrs	r3, r2
 800397a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800398c:	430a      	orrs	r2, r1
 800398e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a90      	ldr	r2, [pc, #576]	; (8003bd8 <UART_SetConfig+0x2c8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d126      	bne.n	80039e8 <UART_SetConfig+0xd8>
 800399a:	4b90      	ldr	r3, [pc, #576]	; (8003bdc <UART_SetConfig+0x2cc>)
 800399c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039a0:	f003 0303 	and.w	r3, r3, #3
 80039a4:	2b03      	cmp	r3, #3
 80039a6:	d81b      	bhi.n	80039e0 <UART_SetConfig+0xd0>
 80039a8:	a201      	add	r2, pc, #4	; (adr r2, 80039b0 <UART_SetConfig+0xa0>)
 80039aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039ae:	bf00      	nop
 80039b0:	080039c1 	.word	0x080039c1
 80039b4:	080039d1 	.word	0x080039d1
 80039b8:	080039c9 	.word	0x080039c9
 80039bc:	080039d9 	.word	0x080039d9
 80039c0:	2301      	movs	r3, #1
 80039c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c6:	e116      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039c8:	2302      	movs	r3, #2
 80039ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ce:	e112      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039d0:	2304      	movs	r3, #4
 80039d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039d6:	e10e      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039d8:	2308      	movs	r3, #8
 80039da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039de:	e10a      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039e0:	2310      	movs	r3, #16
 80039e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039e6:	e106      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	4a7c      	ldr	r2, [pc, #496]	; (8003be0 <UART_SetConfig+0x2d0>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d138      	bne.n	8003a64 <UART_SetConfig+0x154>
 80039f2:	4b7a      	ldr	r3, [pc, #488]	; (8003bdc <UART_SetConfig+0x2cc>)
 80039f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039f8:	f003 030c 	and.w	r3, r3, #12
 80039fc:	2b0c      	cmp	r3, #12
 80039fe:	d82d      	bhi.n	8003a5c <UART_SetConfig+0x14c>
 8003a00:	a201      	add	r2, pc, #4	; (adr r2, 8003a08 <UART_SetConfig+0xf8>)
 8003a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a06:	bf00      	nop
 8003a08:	08003a3d 	.word	0x08003a3d
 8003a0c:	08003a5d 	.word	0x08003a5d
 8003a10:	08003a5d 	.word	0x08003a5d
 8003a14:	08003a5d 	.word	0x08003a5d
 8003a18:	08003a4d 	.word	0x08003a4d
 8003a1c:	08003a5d 	.word	0x08003a5d
 8003a20:	08003a5d 	.word	0x08003a5d
 8003a24:	08003a5d 	.word	0x08003a5d
 8003a28:	08003a45 	.word	0x08003a45
 8003a2c:	08003a5d 	.word	0x08003a5d
 8003a30:	08003a5d 	.word	0x08003a5d
 8003a34:	08003a5d 	.word	0x08003a5d
 8003a38:	08003a55 	.word	0x08003a55
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a42:	e0d8      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a44:	2302      	movs	r3, #2
 8003a46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a4a:	e0d4      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a4c:	2304      	movs	r3, #4
 8003a4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a52:	e0d0      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a54:	2308      	movs	r3, #8
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5a:	e0cc      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a5c:	2310      	movs	r3, #16
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a62:	e0c8      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4a5e      	ldr	r2, [pc, #376]	; (8003be4 <UART_SetConfig+0x2d4>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d125      	bne.n	8003aba <UART_SetConfig+0x1aa>
 8003a6e:	4b5b      	ldr	r3, [pc, #364]	; (8003bdc <UART_SetConfig+0x2cc>)
 8003a70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a74:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003a78:	2b30      	cmp	r3, #48	; 0x30
 8003a7a:	d016      	beq.n	8003aaa <UART_SetConfig+0x19a>
 8003a7c:	2b30      	cmp	r3, #48	; 0x30
 8003a7e:	d818      	bhi.n	8003ab2 <UART_SetConfig+0x1a2>
 8003a80:	2b20      	cmp	r3, #32
 8003a82:	d00a      	beq.n	8003a9a <UART_SetConfig+0x18a>
 8003a84:	2b20      	cmp	r3, #32
 8003a86:	d814      	bhi.n	8003ab2 <UART_SetConfig+0x1a2>
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <UART_SetConfig+0x182>
 8003a8c:	2b10      	cmp	r3, #16
 8003a8e:	d008      	beq.n	8003aa2 <UART_SetConfig+0x192>
 8003a90:	e00f      	b.n	8003ab2 <UART_SetConfig+0x1a2>
 8003a92:	2300      	movs	r3, #0
 8003a94:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a98:	e0ad      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa0:	e0a9      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003aa2:	2304      	movs	r3, #4
 8003aa4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aa8:	e0a5      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003aaa:	2308      	movs	r3, #8
 8003aac:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab0:	e0a1      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003ab2:	2310      	movs	r3, #16
 8003ab4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ab8:	e09d      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	4a4a      	ldr	r2, [pc, #296]	; (8003be8 <UART_SetConfig+0x2d8>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d125      	bne.n	8003b10 <UART_SetConfig+0x200>
 8003ac4:	4b45      	ldr	r3, [pc, #276]	; (8003bdc <UART_SetConfig+0x2cc>)
 8003ac6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003aca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003ace:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad0:	d016      	beq.n	8003b00 <UART_SetConfig+0x1f0>
 8003ad2:	2bc0      	cmp	r3, #192	; 0xc0
 8003ad4:	d818      	bhi.n	8003b08 <UART_SetConfig+0x1f8>
 8003ad6:	2b80      	cmp	r3, #128	; 0x80
 8003ad8:	d00a      	beq.n	8003af0 <UART_SetConfig+0x1e0>
 8003ada:	2b80      	cmp	r3, #128	; 0x80
 8003adc:	d814      	bhi.n	8003b08 <UART_SetConfig+0x1f8>
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d002      	beq.n	8003ae8 <UART_SetConfig+0x1d8>
 8003ae2:	2b40      	cmp	r3, #64	; 0x40
 8003ae4:	d008      	beq.n	8003af8 <UART_SetConfig+0x1e8>
 8003ae6:	e00f      	b.n	8003b08 <UART_SetConfig+0x1f8>
 8003ae8:	2300      	movs	r3, #0
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e082      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003af0:	2302      	movs	r3, #2
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af6:	e07e      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003af8:	2304      	movs	r3, #4
 8003afa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003afe:	e07a      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b00:	2308      	movs	r3, #8
 8003b02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b06:	e076      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b08:	2310      	movs	r3, #16
 8003b0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b0e:	e072      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a35      	ldr	r2, [pc, #212]	; (8003bec <UART_SetConfig+0x2dc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d12a      	bne.n	8003b70 <UART_SetConfig+0x260>
 8003b1a:	4b30      	ldr	r3, [pc, #192]	; (8003bdc <UART_SetConfig+0x2cc>)
 8003b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b28:	d01a      	beq.n	8003b60 <UART_SetConfig+0x250>
 8003b2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b2e:	d81b      	bhi.n	8003b68 <UART_SetConfig+0x258>
 8003b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b34:	d00c      	beq.n	8003b50 <UART_SetConfig+0x240>
 8003b36:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003b3a:	d815      	bhi.n	8003b68 <UART_SetConfig+0x258>
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d003      	beq.n	8003b48 <UART_SetConfig+0x238>
 8003b40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003b44:	d008      	beq.n	8003b58 <UART_SetConfig+0x248>
 8003b46:	e00f      	b.n	8003b68 <UART_SetConfig+0x258>
 8003b48:	2300      	movs	r3, #0
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e052      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b50:	2302      	movs	r3, #2
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b56:	e04e      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b58:	2304      	movs	r3, #4
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b5e:	e04a      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b60:	2308      	movs	r3, #8
 8003b62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b66:	e046      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b68:	2310      	movs	r3, #16
 8003b6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b6e:	e042      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a17      	ldr	r2, [pc, #92]	; (8003bd4 <UART_SetConfig+0x2c4>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d13a      	bne.n	8003bf0 <UART_SetConfig+0x2e0>
 8003b7a:	4b18      	ldr	r3, [pc, #96]	; (8003bdc <UART_SetConfig+0x2cc>)
 8003b7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b88:	d01a      	beq.n	8003bc0 <UART_SetConfig+0x2b0>
 8003b8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b8e:	d81b      	bhi.n	8003bc8 <UART_SetConfig+0x2b8>
 8003b90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b94:	d00c      	beq.n	8003bb0 <UART_SetConfig+0x2a0>
 8003b96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b9a:	d815      	bhi.n	8003bc8 <UART_SetConfig+0x2b8>
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d003      	beq.n	8003ba8 <UART_SetConfig+0x298>
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ba4:	d008      	beq.n	8003bb8 <UART_SetConfig+0x2a8>
 8003ba6:	e00f      	b.n	8003bc8 <UART_SetConfig+0x2b8>
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bae:	e022      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bb0:	2302      	movs	r3, #2
 8003bb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb6:	e01e      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bb8:	2304      	movs	r3, #4
 8003bba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bbe:	e01a      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bc0:	2308      	movs	r3, #8
 8003bc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc6:	e016      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bc8:	2310      	movs	r3, #16
 8003bca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bce:	e012      	b.n	8003bf6 <UART_SetConfig+0x2e6>
 8003bd0:	efff69f3 	.word	0xefff69f3
 8003bd4:	40008000 	.word	0x40008000
 8003bd8:	40013800 	.word	0x40013800
 8003bdc:	40021000 	.word	0x40021000
 8003be0:	40004400 	.word	0x40004400
 8003be4:	40004800 	.word	0x40004800
 8003be8:	40004c00 	.word	0x40004c00
 8003bec:	40005000 	.word	0x40005000
 8003bf0:	2310      	movs	r3, #16
 8003bf2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a9f      	ldr	r2, [pc, #636]	; (8003e78 <UART_SetConfig+0x568>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d17a      	bne.n	8003cf6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003c00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	d824      	bhi.n	8003c52 <UART_SetConfig+0x342>
 8003c08:	a201      	add	r2, pc, #4	; (adr r2, 8003c10 <UART_SetConfig+0x300>)
 8003c0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c0e:	bf00      	nop
 8003c10:	08003c35 	.word	0x08003c35
 8003c14:	08003c53 	.word	0x08003c53
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c53 	.word	0x08003c53
 8003c20:	08003c43 	.word	0x08003c43
 8003c24:	08003c53 	.word	0x08003c53
 8003c28:	08003c53 	.word	0x08003c53
 8003c2c:	08003c53 	.word	0x08003c53
 8003c30:	08003c4b 	.word	0x08003c4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c34:	f7fe fd70 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8003c38:	61f8      	str	r0, [r7, #28]
        break;
 8003c3a:	e010      	b.n	8003c5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c3c:	4b8f      	ldr	r3, [pc, #572]	; (8003e7c <UART_SetConfig+0x56c>)
 8003c3e:	61fb      	str	r3, [r7, #28]
        break;
 8003c40:	e00d      	b.n	8003c5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c42:	f7fe fcd1 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8003c46:	61f8      	str	r0, [r7, #28]
        break;
 8003c48:	e009      	b.n	8003c5e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c4e:	61fb      	str	r3, [r7, #28]
        break;
 8003c50:	e005      	b.n	8003c5e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c5c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	f000 80fb 	beq.w	8003e5c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685a      	ldr	r2, [r3, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	005b      	lsls	r3, r3, #1
 8003c6e:	4413      	add	r3, r2
 8003c70:	69fa      	ldr	r2, [r7, #28]
 8003c72:	429a      	cmp	r2, r3
 8003c74:	d305      	bcc.n	8003c82 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003c7c:	69fa      	ldr	r2, [r7, #28]
 8003c7e:	429a      	cmp	r2, r3
 8003c80:	d903      	bls.n	8003c8a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003c82:	2301      	movs	r3, #1
 8003c84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c88:	e0e8      	b.n	8003e5c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	461c      	mov	r4, r3
 8003c90:	4615      	mov	r5, r2
 8003c92:	f04f 0200 	mov.w	r2, #0
 8003c96:	f04f 0300 	mov.w	r3, #0
 8003c9a:	022b      	lsls	r3, r5, #8
 8003c9c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ca0:	0222      	lsls	r2, r4, #8
 8003ca2:	68f9      	ldr	r1, [r7, #12]
 8003ca4:	6849      	ldr	r1, [r1, #4]
 8003ca6:	0849      	lsrs	r1, r1, #1
 8003ca8:	2000      	movs	r0, #0
 8003caa:	4688      	mov	r8, r1
 8003cac:	4681      	mov	r9, r0
 8003cae:	eb12 0a08 	adds.w	sl, r2, r8
 8003cb2:	eb43 0b09 	adc.w	fp, r3, r9
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	2200      	movs	r2, #0
 8003cbc:	603b      	str	r3, [r7, #0]
 8003cbe:	607a      	str	r2, [r7, #4]
 8003cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003cc4:	4650      	mov	r0, sl
 8003cc6:	4659      	mov	r1, fp
 8003cc8:	f7fc fad2 	bl	8000270 <__aeabi_uldivmod>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	460b      	mov	r3, r1
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003cda:	d308      	bcc.n	8003cee <UART_SetConfig+0x3de>
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce2:	d204      	bcs.n	8003cee <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	60da      	str	r2, [r3, #12]
 8003cec:	e0b6      	b.n	8003e5c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003cf4:	e0b2      	b.n	8003e5c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003cfe:	d15e      	bne.n	8003dbe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003d00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d04:	2b08      	cmp	r3, #8
 8003d06:	d828      	bhi.n	8003d5a <UART_SetConfig+0x44a>
 8003d08:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <UART_SetConfig+0x400>)
 8003d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d0e:	bf00      	nop
 8003d10:	08003d35 	.word	0x08003d35
 8003d14:	08003d3d 	.word	0x08003d3d
 8003d18:	08003d45 	.word	0x08003d45
 8003d1c:	08003d5b 	.word	0x08003d5b
 8003d20:	08003d4b 	.word	0x08003d4b
 8003d24:	08003d5b 	.word	0x08003d5b
 8003d28:	08003d5b 	.word	0x08003d5b
 8003d2c:	08003d5b 	.word	0x08003d5b
 8003d30:	08003d53 	.word	0x08003d53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d34:	f7fe fcf0 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8003d38:	61f8      	str	r0, [r7, #28]
        break;
 8003d3a:	e014      	b.n	8003d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d3c:	f7fe fd02 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8003d40:	61f8      	str	r0, [r7, #28]
        break;
 8003d42:	e010      	b.n	8003d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d44:	4b4d      	ldr	r3, [pc, #308]	; (8003e7c <UART_SetConfig+0x56c>)
 8003d46:	61fb      	str	r3, [r7, #28]
        break;
 8003d48:	e00d      	b.n	8003d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d4a:	f7fe fc4d 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8003d4e:	61f8      	str	r0, [r7, #28]
        break;
 8003d50:	e009      	b.n	8003d66 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d56:	61fb      	str	r3, [r7, #28]
        break;
 8003d58:	e005      	b.n	8003d66 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d077      	beq.n	8003e5c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	005a      	lsls	r2, r3, #1
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	085b      	lsrs	r3, r3, #1
 8003d76:	441a      	add	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	2b0f      	cmp	r3, #15
 8003d86:	d916      	bls.n	8003db6 <UART_SetConfig+0x4a6>
 8003d88:	69bb      	ldr	r3, [r7, #24]
 8003d8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d8e:	d212      	bcs.n	8003db6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d90:	69bb      	ldr	r3, [r7, #24]
 8003d92:	b29b      	uxth	r3, r3
 8003d94:	f023 030f 	bic.w	r3, r3, #15
 8003d98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	085b      	lsrs	r3, r3, #1
 8003d9e:	b29b      	uxth	r3, r3
 8003da0:	f003 0307 	and.w	r3, r3, #7
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	8afb      	ldrh	r3, [r7, #22]
 8003da8:	4313      	orrs	r3, r2
 8003daa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	8afa      	ldrh	r2, [r7, #22]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	e052      	b.n	8003e5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dbc:	e04e      	b.n	8003e5c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003dbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dc2:	2b08      	cmp	r3, #8
 8003dc4:	d827      	bhi.n	8003e16 <UART_SetConfig+0x506>
 8003dc6:	a201      	add	r2, pc, #4	; (adr r2, 8003dcc <UART_SetConfig+0x4bc>)
 8003dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dcc:	08003df1 	.word	0x08003df1
 8003dd0:	08003df9 	.word	0x08003df9
 8003dd4:	08003e01 	.word	0x08003e01
 8003dd8:	08003e17 	.word	0x08003e17
 8003ddc:	08003e07 	.word	0x08003e07
 8003de0:	08003e17 	.word	0x08003e17
 8003de4:	08003e17 	.word	0x08003e17
 8003de8:	08003e17 	.word	0x08003e17
 8003dec:	08003e0f 	.word	0x08003e0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003df0:	f7fe fc92 	bl	8002718 <HAL_RCC_GetPCLK1Freq>
 8003df4:	61f8      	str	r0, [r7, #28]
        break;
 8003df6:	e014      	b.n	8003e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003df8:	f7fe fca4 	bl	8002744 <HAL_RCC_GetPCLK2Freq>
 8003dfc:	61f8      	str	r0, [r7, #28]
        break;
 8003dfe:	e010      	b.n	8003e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e00:	4b1e      	ldr	r3, [pc, #120]	; (8003e7c <UART_SetConfig+0x56c>)
 8003e02:	61fb      	str	r3, [r7, #28]
        break;
 8003e04:	e00d      	b.n	8003e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e06:	f7fe fbef 	bl	80025e8 <HAL_RCC_GetSysClockFreq>
 8003e0a:	61f8      	str	r0, [r7, #28]
        break;
 8003e0c:	e009      	b.n	8003e22 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e12:	61fb      	str	r3, [r7, #28]
        break;
 8003e14:	e005      	b.n	8003e22 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003e16:	2300      	movs	r3, #0
 8003e18:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e20:	bf00      	nop
    }

    if (pclk != 0U)
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d019      	beq.n	8003e5c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	085a      	lsrs	r2, r3, #1
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	441a      	add	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e3a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	2b0f      	cmp	r3, #15
 8003e40:	d909      	bls.n	8003e56 <UART_SetConfig+0x546>
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e48:	d205      	bcs.n	8003e56 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003e4a:	69bb      	ldr	r3, [r7, #24]
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	60da      	str	r2, [r3, #12]
 8003e54:	e002      	b.n	8003e5c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003e68:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3728      	adds	r7, #40	; 0x28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e76:	bf00      	nop
 8003e78:	40008000 	.word	0x40008000
 8003e7c:	00f42400 	.word	0x00f42400

08003e80 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	f003 0308 	and.w	r3, r3, #8
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d00a      	beq.n	8003eaa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	f003 0301 	and.w	r3, r3, #1
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00a      	beq.n	8003ecc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	430a      	orrs	r2, r1
 8003eca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	f003 0302 	and.w	r3, r3, #2
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d00a      	beq.n	8003eee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	685b      	ldr	r3, [r3, #4]
 8003ede:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	430a      	orrs	r2, r1
 8003eec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	f003 0304 	and.w	r3, r3, #4
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00a      	beq.n	8003f10 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	430a      	orrs	r2, r1
 8003f0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	f003 0310 	and.w	r3, r3, #16
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00a      	beq.n	8003f32 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f36:	f003 0320 	and.w	r3, r3, #32
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	689b      	ldr	r3, [r3, #8]
 8003f44:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	430a      	orrs	r2, r1
 8003f52:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d01a      	beq.n	8003f96 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f7e:	d10a      	bne.n	8003f96 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	430a      	orrs	r2, r1
 8003f94:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00a      	beq.n	8003fb8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	430a      	orrs	r2, r1
 8003fb6:	605a      	str	r2, [r3, #4]
  }
}
 8003fb8:	bf00      	nop
 8003fba:	370c      	adds	r7, #12
 8003fbc:	46bd      	mov	sp, r7
 8003fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc2:	4770      	bx	lr

08003fc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b098      	sub	sp, #96	; 0x60
 8003fc8:	af02      	add	r7, sp, #8
 8003fca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003fd4:	f7fd fae6 	bl	80015a4 <HAL_GetTick>
 8003fd8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f003 0308 	and.w	r3, r3, #8
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d12e      	bne.n	8004046 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003fe8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f88c 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d021      	beq.n	8004046 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004008:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400a:	e853 3f00 	ldrex	r3, [r3]
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004012:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004016:	653b      	str	r3, [r7, #80]	; 0x50
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	461a      	mov	r2, r3
 800401e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004020:	647b      	str	r3, [r7, #68]	; 0x44
 8004022:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004024:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004026:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004028:	e841 2300 	strex	r3, r2, [r1]
 800402c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800402e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d1e6      	bne.n	8004002 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2220      	movs	r2, #32
 8004038:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e062      	b.n	800410c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f003 0304 	and.w	r3, r3, #4
 8004050:	2b04      	cmp	r3, #4
 8004052:	d149      	bne.n	80040e8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004054:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004058:	9300      	str	r3, [sp, #0]
 800405a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800405c:	2200      	movs	r2, #0
 800405e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 f856 	bl	8004114 <UART_WaitOnFlagUntilTimeout>
 8004068:	4603      	mov	r3, r0
 800406a:	2b00      	cmp	r3, #0
 800406c:	d03c      	beq.n	80040e8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004076:	e853 3f00 	ldrex	r3, [r3]
 800407a:	623b      	str	r3, [r7, #32]
   return(result);
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004082:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	461a      	mov	r2, r3
 800408a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800408c:	633b      	str	r3, [r7, #48]	; 0x30
 800408e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004090:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004092:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004094:	e841 2300 	strex	r3, r2, [r1]
 8004098:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800409a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800409c:	2b00      	cmp	r3, #0
 800409e:	d1e6      	bne.n	800406e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	3308      	adds	r3, #8
 80040a6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	e853 3f00 	ldrex	r3, [r3]
 80040ae:	60fb      	str	r3, [r7, #12]
   return(result);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0301 	bic.w	r3, r3, #1
 80040b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	3308      	adds	r3, #8
 80040be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80040c0:	61fa      	str	r2, [r7, #28]
 80040c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040c4:	69b9      	ldr	r1, [r7, #24]
 80040c6:	69fa      	ldr	r2, [r7, #28]
 80040c8:	e841 2300 	strex	r3, r2, [r1]
 80040cc:	617b      	str	r3, [r7, #20]
   return(result);
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d1e5      	bne.n	80040a0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2220      	movs	r2, #32
 80040d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040e4:	2303      	movs	r3, #3
 80040e6:	e011      	b.n	800410c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2220      	movs	r2, #32
 80040ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800410a:	2300      	movs	r3, #0
}
 800410c:	4618      	mov	r0, r3
 800410e:	3758      	adds	r7, #88	; 0x58
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	60f8      	str	r0, [r7, #12]
 800411c:	60b9      	str	r1, [r7, #8]
 800411e:	603b      	str	r3, [r7, #0]
 8004120:	4613      	mov	r3, r2
 8004122:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004124:	e049      	b.n	80041ba <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800412c:	d045      	beq.n	80041ba <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800412e:	f7fd fa39 	bl	80015a4 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	69ba      	ldr	r2, [r7, #24]
 800413a:	429a      	cmp	r2, r3
 800413c:	d302      	bcc.n	8004144 <UART_WaitOnFlagUntilTimeout+0x30>
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d101      	bne.n	8004148 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e048      	b.n	80041da <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b00      	cmp	r3, #0
 8004154:	d031      	beq.n	80041ba <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	69db      	ldr	r3, [r3, #28]
 800415c:	f003 0308 	and.w	r3, r3, #8
 8004160:	2b08      	cmp	r3, #8
 8004162:	d110      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	2208      	movs	r2, #8
 800416a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f000 f838 	bl	80041e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2208      	movs	r2, #8
 8004176:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e029      	b.n	80041da <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	69db      	ldr	r3, [r3, #28]
 800418c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004194:	d111      	bne.n	80041ba <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800419e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f000 f81e 	bl	80041e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2220      	movs	r2, #32
 80041aa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2200      	movs	r2, #0
 80041b2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e00f      	b.n	80041da <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	69da      	ldr	r2, [r3, #28]
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4013      	ands	r3, r2
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	bf0c      	ite	eq
 80041ca:	2301      	moveq	r3, #1
 80041cc:	2300      	movne	r3, #0
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	461a      	mov	r2, r3
 80041d2:	79fb      	ldrb	r3, [r7, #7]
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d0a6      	beq.n	8004126 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}

080041e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e2:	b480      	push	{r7}
 80041e4:	b095      	sub	sp, #84	; 0x54
 80041e6:	af00      	add	r7, sp, #0
 80041e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f2:	e853 3f00 	ldrex	r3, [r3]
 80041f6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	461a      	mov	r2, r3
 8004206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004208:	643b      	str	r3, [r7, #64]	; 0x40
 800420a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800420c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800420e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004210:	e841 2300 	strex	r3, r2, [r1]
 8004214:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004218:	2b00      	cmp	r3, #0
 800421a:	d1e6      	bne.n	80041ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	3308      	adds	r3, #8
 8004222:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004224:	6a3b      	ldr	r3, [r7, #32]
 8004226:	e853 3f00 	ldrex	r3, [r3]
 800422a:	61fb      	str	r3, [r7, #28]
   return(result);
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f023 0301 	bic.w	r3, r3, #1
 8004232:	64bb      	str	r3, [r7, #72]	; 0x48
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	3308      	adds	r3, #8
 800423a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800423c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800423e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004240:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004242:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004244:	e841 2300 	strex	r3, r2, [r1]
 8004248:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800424a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424c:	2b00      	cmp	r3, #0
 800424e:	d1e5      	bne.n	800421c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004254:	2b01      	cmp	r3, #1
 8004256:	d118      	bne.n	800428a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	e853 3f00 	ldrex	r3, [r3]
 8004264:	60bb      	str	r3, [r7, #8]
   return(result);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	f023 0310 	bic.w	r3, r3, #16
 800426c:	647b      	str	r3, [r7, #68]	; 0x44
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	461a      	mov	r2, r3
 8004274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004276:	61bb      	str	r3, [r7, #24]
 8004278:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427a:	6979      	ldr	r1, [r7, #20]
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	613b      	str	r3, [r7, #16]
   return(result);
 8004284:	693b      	ldr	r3, [r7, #16]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e6      	bne.n	8004258 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2220      	movs	r2, #32
 800428e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2200      	movs	r2, #0
 8004296:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800429e:	bf00      	nop
 80042a0:	3754      	adds	r7, #84	; 0x54
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
	...

080042ac <__NVIC_SetPriority>:
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	4603      	mov	r3, r0
 80042b4:	6039      	str	r1, [r7, #0]
 80042b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	db0a      	blt.n	80042d6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	490c      	ldr	r1, [pc, #48]	; (80042f8 <__NVIC_SetPriority+0x4c>)
 80042c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ca:	0112      	lsls	r2, r2, #4
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	440b      	add	r3, r1
 80042d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042d4:	e00a      	b.n	80042ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	b2da      	uxtb	r2, r3
 80042da:	4908      	ldr	r1, [pc, #32]	; (80042fc <__NVIC_SetPriority+0x50>)
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	f003 030f 	and.w	r3, r3, #15
 80042e2:	3b04      	subs	r3, #4
 80042e4:	0112      	lsls	r2, r2, #4
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	440b      	add	r3, r1
 80042ea:	761a      	strb	r2, [r3, #24]
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000e100 	.word	0xe000e100
 80042fc:	e000ed00 	.word	0xe000ed00

08004300 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004300:	b580      	push	{r7, lr}
 8004302:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004304:	4b05      	ldr	r3, [pc, #20]	; (800431c <SysTick_Handler+0x1c>)
 8004306:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004308:	f002 fc4e 	bl	8006ba8 <xTaskGetSchedulerState>
 800430c:	4603      	mov	r3, r0
 800430e:	2b01      	cmp	r3, #1
 8004310:	d001      	beq.n	8004316 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004312:	f003 fd59 	bl	8007dc8 <xPortSysTickHandler>
  }
}
 8004316:	bf00      	nop
 8004318:	bd80      	pop	{r7, pc}
 800431a:	bf00      	nop
 800431c:	e000e010 	.word	0xe000e010

08004320 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004320:	b580      	push	{r7, lr}
 8004322:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004324:	2100      	movs	r1, #0
 8004326:	f06f 0004 	mvn.w	r0, #4
 800432a:	f7ff ffbf 	bl	80042ac <__NVIC_SetPriority>
#endif
}
 800432e:	bf00      	nop
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800433a:	f3ef 8305 	mrs	r3, IPSR
 800433e:	603b      	str	r3, [r7, #0]
  return(result);
 8004340:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004342:	2b00      	cmp	r3, #0
 8004344:	d003      	beq.n	800434e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004346:	f06f 0305 	mvn.w	r3, #5
 800434a:	607b      	str	r3, [r7, #4]
 800434c:	e00c      	b.n	8004368 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800434e:	4b0a      	ldr	r3, [pc, #40]	; (8004378 <osKernelInitialize+0x44>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d105      	bne.n	8004362 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004356:	4b08      	ldr	r3, [pc, #32]	; (8004378 <osKernelInitialize+0x44>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800435c:	2300      	movs	r3, #0
 800435e:	607b      	str	r3, [r7, #4]
 8004360:	e002      	b.n	8004368 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004362:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004366:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004368:	687b      	ldr	r3, [r7, #4]
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	200001f0 	.word	0x200001f0

0800437c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004382:	f3ef 8305 	mrs	r3, IPSR
 8004386:	603b      	str	r3, [r7, #0]
  return(result);
 8004388:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <osKernelStart+0x1a>
    stat = osErrorISR;
 800438e:	f06f 0305 	mvn.w	r3, #5
 8004392:	607b      	str	r3, [r7, #4]
 8004394:	e010      	b.n	80043b8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004396:	4b0b      	ldr	r3, [pc, #44]	; (80043c4 <osKernelStart+0x48>)
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d109      	bne.n	80043b2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800439e:	f7ff ffbf 	bl	8004320 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <osKernelStart+0x48>)
 80043a4:	2202      	movs	r2, #2
 80043a6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80043a8:	f001 ff92 	bl	80062d0 <vTaskStartScheduler>
      stat = osOK;
 80043ac:	2300      	movs	r3, #0
 80043ae:	607b      	str	r3, [r7, #4]
 80043b0:	e002      	b.n	80043b8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80043b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043b6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80043b8:	687b      	ldr	r3, [r7, #4]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3708      	adds	r7, #8
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	200001f0 	.word	0x200001f0

080043c8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b08e      	sub	sp, #56	; 0x38
 80043cc:	af04      	add	r7, sp, #16
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043d8:	f3ef 8305 	mrs	r3, IPSR
 80043dc:	617b      	str	r3, [r7, #20]
  return(result);
 80043de:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d17e      	bne.n	80044e2 <osThreadNew+0x11a>
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d07b      	beq.n	80044e2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80043ea:	2380      	movs	r3, #128	; 0x80
 80043ec:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80043ee:	2318      	movs	r3, #24
 80043f0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80043f2:	2300      	movs	r3, #0
 80043f4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80043f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d045      	beq.n	800448e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	2b00      	cmp	r3, #0
 8004408:	d002      	beq.n	8004410 <osThreadNew+0x48>
        name = attr->name;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	699b      	ldr	r3, [r3, #24]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d002      	beq.n	800441e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	699b      	ldr	r3, [r3, #24]
 800441c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	2b00      	cmp	r3, #0
 8004422:	d008      	beq.n	8004436 <osThreadNew+0x6e>
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	2b38      	cmp	r3, #56	; 0x38
 8004428:	d805      	bhi.n	8004436 <osThreadNew+0x6e>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	685b      	ldr	r3, [r3, #4]
 800442e:	f003 0301 	and.w	r3, r3, #1
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <osThreadNew+0x72>
        return (NULL);
 8004436:	2300      	movs	r3, #0
 8004438:	e054      	b.n	80044e4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	695b      	ldr	r3, [r3, #20]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d003      	beq.n	800444a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	089b      	lsrs	r3, r3, #2
 8004448:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d00e      	beq.n	8004470 <osThreadNew+0xa8>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2ba7      	cmp	r3, #167	; 0xa7
 8004458:	d90a      	bls.n	8004470 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800445e:	2b00      	cmp	r3, #0
 8004460:	d006      	beq.n	8004470 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <osThreadNew+0xa8>
        mem = 1;
 800446a:	2301      	movs	r3, #1
 800446c:	61bb      	str	r3, [r7, #24]
 800446e:	e010      	b.n	8004492 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10c      	bne.n	8004492 <osThreadNew+0xca>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d108      	bne.n	8004492 <osThreadNew+0xca>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d104      	bne.n	8004492 <osThreadNew+0xca>
          mem = 0;
 8004488:	2300      	movs	r3, #0
 800448a:	61bb      	str	r3, [r7, #24]
 800448c:	e001      	b.n	8004492 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	2b01      	cmp	r3, #1
 8004496:	d110      	bne.n	80044ba <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800449c:	687a      	ldr	r2, [r7, #4]
 800449e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80044a0:	9202      	str	r2, [sp, #8]
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	6a3a      	ldr	r2, [r7, #32]
 80044ac:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044ae:	68f8      	ldr	r0, [r7, #12]
 80044b0:	f001 fd22 	bl	8005ef8 <xTaskCreateStatic>
 80044b4:	4603      	mov	r3, r0
 80044b6:	613b      	str	r3, [r7, #16]
 80044b8:	e013      	b.n	80044e2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d110      	bne.n	80044e2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80044c0:	6a3b      	ldr	r3, [r7, #32]
 80044c2:	b29a      	uxth	r2, r3
 80044c4:	f107 0310 	add.w	r3, r7, #16
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	69fb      	ldr	r3, [r7, #28]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80044d2:	68f8      	ldr	r0, [r7, #12]
 80044d4:	f001 fd6d 	bl	8005fb2 <xTaskCreate>
 80044d8:	4603      	mov	r3, r0
 80044da:	2b01      	cmp	r3, #1
 80044dc:	d001      	beq.n	80044e2 <osThreadNew+0x11a>
            hTask = NULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80044e2:	693b      	ldr	r3, [r7, #16]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3728      	adds	r7, #40	; 0x28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}

080044ec <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b084      	sub	sp, #16
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044f4:	f3ef 8305 	mrs	r3, IPSR
 80044f8:	60bb      	str	r3, [r7, #8]
  return(result);
 80044fa:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <osDelay+0x1c>
    stat = osErrorISR;
 8004500:	f06f 0305 	mvn.w	r3, #5
 8004504:	60fb      	str	r3, [r7, #12]
 8004506:	e007      	b.n	8004518 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004508:	2300      	movs	r3, #0
 800450a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	f001 fea8 	bl	8006268 <vTaskDelay>
    }
  }

  return (stat);
 8004518:	68fb      	ldr	r3, [r7, #12]
}
 800451a:	4618      	mov	r0, r3
 800451c:	3710      	adds	r7, #16
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004522:	b580      	push	{r7, lr}
 8004524:	b084      	sub	sp, #16
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800452a:	6878      	ldr	r0, [r7, #4]
 800452c:	f003 fa6f 	bl	8007a0e <pvTimerGetTimerID>
 8004530:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	68fa      	ldr	r2, [r7, #12]
 800453e:	6852      	ldr	r2, [r2, #4]
 8004540:	4610      	mov	r0, r2
 8004542:	4798      	blx	r3
  }
}
 8004544:	bf00      	nop
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800454c:	b580      	push	{r7, lr}
 800454e:	b08c      	sub	sp, #48	; 0x30
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	607a      	str	r2, [r7, #4]
 8004556:	603b      	str	r3, [r7, #0]
 8004558:	460b      	mov	r3, r1
 800455a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800455c:	2300      	movs	r3, #0
 800455e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004560:	f3ef 8305 	mrs	r3, IPSR
 8004564:	613b      	str	r3, [r7, #16]
  return(result);
 8004566:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004568:	2b00      	cmp	r3, #0
 800456a:	d163      	bne.n	8004634 <osTimerNew+0xe8>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d060      	beq.n	8004634 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004572:	2008      	movs	r0, #8
 8004574:	f003 fcb8 	bl	8007ee8 <pvPortMalloc>
 8004578:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d059      	beq.n	8004634 <osTimerNew+0xe8>
      callb->func = func;
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800458c:	7afb      	ldrb	r3, [r7, #11]
 800458e:	2b00      	cmp	r3, #0
 8004590:	d102      	bne.n	8004598 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004592:	2300      	movs	r3, #0
 8004594:	61fb      	str	r3, [r7, #28]
 8004596:	e001      	b.n	800459c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004598:	2301      	movs	r3, #1
 800459a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800459c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80045a0:	61bb      	str	r3, [r7, #24]
      name = NULL;
 80045a2:	2300      	movs	r3, #0
 80045a4:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d01c      	beq.n	80045e6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d002      	beq.n	80045ba <osTimerNew+0x6e>
          name = attr->name;
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d006      	beq.n	80045d0 <osTimerNew+0x84>
 80045c2:	683b      	ldr	r3, [r7, #0]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	2b2b      	cmp	r3, #43	; 0x2b
 80045c8:	d902      	bls.n	80045d0 <osTimerNew+0x84>
          mem = 1;
 80045ca:	2301      	movs	r3, #1
 80045cc:	61bb      	str	r3, [r7, #24]
 80045ce:	e00c      	b.n	80045ea <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d108      	bne.n	80045ea <osTimerNew+0x9e>
 80045d8:	683b      	ldr	r3, [r7, #0]
 80045da:	68db      	ldr	r3, [r3, #12]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d104      	bne.n	80045ea <osTimerNew+0x9e>
            mem = 0;
 80045e0:	2300      	movs	r3, #0
 80045e2:	61bb      	str	r3, [r7, #24]
 80045e4:	e001      	b.n	80045ea <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80045e6:	2300      	movs	r3, #0
 80045e8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	d10c      	bne.n	800460a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	9301      	str	r3, [sp, #4]
 80045f6:	4b12      	ldr	r3, [pc, #72]	; (8004640 <osTimerNew+0xf4>)
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	69fa      	ldr	r2, [r7, #28]
 80045fe:	2101      	movs	r1, #1
 8004600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004602:	f002 fe5c 	bl	80072be <xTimerCreateStatic>
 8004606:	6238      	str	r0, [r7, #32]
 8004608:	e00b      	b.n	8004622 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 800460a:	69bb      	ldr	r3, [r7, #24]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d108      	bne.n	8004622 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <osTimerNew+0xf4>)
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	69fa      	ldr	r2, [r7, #28]
 8004618:	2101      	movs	r1, #1
 800461a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800461c:	f002 fe2e 	bl	800727c <xTimerCreate>
 8004620:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004622:	6a3b      	ldr	r3, [r7, #32]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d105      	bne.n	8004634 <osTimerNew+0xe8>
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <osTimerNew+0xe8>
        vPortFree (callb);
 800462e:	6978      	ldr	r0, [r7, #20]
 8004630:	f003 fd26 	bl	8008080 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004634:	6a3b      	ldr	r3, [r7, #32]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3728      	adds	r7, #40	; 0x28
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	08004523 	.word	0x08004523

08004644 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004644:	b580      	push	{r7, lr}
 8004646:	b088      	sub	sp, #32
 8004648:	af02      	add	r7, sp, #8
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004652:	f3ef 8305 	mrs	r3, IPSR
 8004656:	60fb      	str	r3, [r7, #12]
  return(result);
 8004658:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800465a:	2b00      	cmp	r3, #0
 800465c:	d003      	beq.n	8004666 <osTimerStart+0x22>
    stat = osErrorISR;
 800465e:	f06f 0305 	mvn.w	r3, #5
 8004662:	617b      	str	r3, [r7, #20]
 8004664:	e017      	b.n	8004696 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <osTimerStart+0x30>
    stat = osErrorParameter;
 800466c:	f06f 0303 	mvn.w	r3, #3
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e010      	b.n	8004696 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004674:	2300      	movs	r3, #0
 8004676:	9300      	str	r3, [sp, #0]
 8004678:	2300      	movs	r3, #0
 800467a:	683a      	ldr	r2, [r7, #0]
 800467c:	2104      	movs	r1, #4
 800467e:	6938      	ldr	r0, [r7, #16]
 8004680:	f002 fe96 	bl	80073b0 <xTimerGenericCommand>
 8004684:	4603      	mov	r3, r0
 8004686:	2b01      	cmp	r3, #1
 8004688:	d102      	bne.n	8004690 <osTimerStart+0x4c>
      stat = osOK;
 800468a:	2300      	movs	r3, #0
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e002      	b.n	8004696 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004690:	f06f 0302 	mvn.w	r3, #2
 8004694:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004696:	697b      	ldr	r3, [r7, #20]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3718      	adds	r7, #24
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b088      	sub	sp, #32
 80046a4:	af02      	add	r7, sp, #8
 80046a6:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ac:	f3ef 8305 	mrs	r3, IPSR
 80046b0:	60fb      	str	r3, [r7, #12]
  return(result);
 80046b2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d003      	beq.n	80046c0 <osTimerStop+0x20>
    stat = osErrorISR;
 80046b8:	f06f 0305 	mvn.w	r3, #5
 80046bc:	617b      	str	r3, [r7, #20]
 80046be:	e021      	b.n	8004704 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d103      	bne.n	80046ce <osTimerStop+0x2e>
    stat = osErrorParameter;
 80046c6:	f06f 0303 	mvn.w	r3, #3
 80046ca:	617b      	str	r3, [r7, #20]
 80046cc:	e01a      	b.n	8004704 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80046ce:	6938      	ldr	r0, [r7, #16]
 80046d0:	f003 f974 	bl	80079bc <xTimerIsTimerActive>
 80046d4:	4603      	mov	r3, r0
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d103      	bne.n	80046e2 <osTimerStop+0x42>
      stat = osErrorResource;
 80046da:	f06f 0302 	mvn.w	r3, #2
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e010      	b.n	8004704 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80046e2:	2300      	movs	r3, #0
 80046e4:	9300      	str	r3, [sp, #0]
 80046e6:	2300      	movs	r3, #0
 80046e8:	2200      	movs	r2, #0
 80046ea:	2103      	movs	r1, #3
 80046ec:	6938      	ldr	r0, [r7, #16]
 80046ee:	f002 fe5f 	bl	80073b0 <xTimerGenericCommand>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b01      	cmp	r3, #1
 80046f6:	d102      	bne.n	80046fe <osTimerStop+0x5e>
        stat = osOK;
 80046f8:	2300      	movs	r3, #0
 80046fa:	617b      	str	r3, [r7, #20]
 80046fc:	e002      	b.n	8004704 <osTimerStop+0x64>
      } else {
        stat = osError;
 80046fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004702:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004704:	697b      	ldr	r3, [r7, #20]
}
 8004706:	4618      	mov	r0, r3
 8004708:	3718      	adds	r7, #24
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}

0800470e <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 800470e:	b580      	push	{r7, lr}
 8004710:	b086      	sub	sp, #24
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800471a:	f3ef 8305 	mrs	r3, IPSR
 800471e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004720:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <osTimerIsRunning+0x1e>
 8004726:	693b      	ldr	r3, [r7, #16]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d102      	bne.n	8004732 <osTimerIsRunning+0x24>
    running = 0U;
 800472c:	2300      	movs	r3, #0
 800472e:	617b      	str	r3, [r7, #20]
 8004730:	e004      	b.n	800473c <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 8004732:	6938      	ldr	r0, [r7, #16]
 8004734:	f003 f942 	bl	80079bc <xTimerIsTimerActive>
 8004738:	4603      	mov	r3, r0
 800473a:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800473c:	697b      	ldr	r3, [r7, #20]
}
 800473e:	4618      	mov	r0, r3
 8004740:	3718      	adds	r7, #24
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004746:	b580      	push	{r7, lr}
 8004748:	b088      	sub	sp, #32
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004752:	f3ef 8305 	mrs	r3, IPSR
 8004756:	60bb      	str	r3, [r7, #8]
  return(result);
 8004758:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800475a:	2b00      	cmp	r3, #0
 800475c:	d174      	bne.n	8004848 <osMutexNew+0x102>
    if (attr != NULL) {
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d003      	beq.n	800476c <osMutexNew+0x26>
      type = attr->attr_bits;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	61bb      	str	r3, [r7, #24]
 800476a:	e001      	b.n	8004770 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004770:	69bb      	ldr	r3, [r7, #24]
 8004772:	f003 0301 	and.w	r3, r3, #1
 8004776:	2b00      	cmp	r3, #0
 8004778:	d002      	beq.n	8004780 <osMutexNew+0x3a>
      rmtx = 1U;
 800477a:	2301      	movs	r3, #1
 800477c:	617b      	str	r3, [r7, #20]
 800477e:	e001      	b.n	8004784 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004780:	2300      	movs	r3, #0
 8004782:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	f003 0308 	and.w	r3, r3, #8
 800478a:	2b00      	cmp	r3, #0
 800478c:	d15c      	bne.n	8004848 <osMutexNew+0x102>
      mem = -1;
 800478e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004792:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d015      	beq.n	80047c6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	689b      	ldr	r3, [r3, #8]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d006      	beq.n	80047b0 <osMutexNew+0x6a>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	2b4f      	cmp	r3, #79	; 0x4f
 80047a8:	d902      	bls.n	80047b0 <osMutexNew+0x6a>
          mem = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	e00c      	b.n	80047ca <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d108      	bne.n	80047ca <osMutexNew+0x84>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	68db      	ldr	r3, [r3, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d104      	bne.n	80047ca <osMutexNew+0x84>
            mem = 0;
 80047c0:	2300      	movs	r3, #0
 80047c2:	613b      	str	r3, [r7, #16]
 80047c4:	e001      	b.n	80047ca <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80047c6:	2300      	movs	r3, #0
 80047c8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80047ca:	693b      	ldr	r3, [r7, #16]
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	d112      	bne.n	80047f6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d007      	beq.n	80047e6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	689b      	ldr	r3, [r3, #8]
 80047da:	4619      	mov	r1, r3
 80047dc:	2004      	movs	r0, #4
 80047de:	f000 fc36 	bl	800504e <xQueueCreateMutexStatic>
 80047e2:	61f8      	str	r0, [r7, #28]
 80047e4:	e016      	b.n	8004814 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	4619      	mov	r1, r3
 80047ec:	2001      	movs	r0, #1
 80047ee:	f000 fc2e 	bl	800504e <xQueueCreateMutexStatic>
 80047f2:	61f8      	str	r0, [r7, #28]
 80047f4:	e00e      	b.n	8004814 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d10b      	bne.n	8004814 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80047fc:	697b      	ldr	r3, [r7, #20]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d004      	beq.n	800480c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8004802:	2004      	movs	r0, #4
 8004804:	f000 fc0b 	bl	800501e <xQueueCreateMutex>
 8004808:	61f8      	str	r0, [r7, #28]
 800480a:	e003      	b.n	8004814 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800480c:	2001      	movs	r0, #1
 800480e:	f000 fc06 	bl	800501e <xQueueCreateMutex>
 8004812:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004814:	69fb      	ldr	r3, [r7, #28]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d00c      	beq.n	8004834 <osMutexNew+0xee>
        if (attr != NULL) {
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d003      	beq.n	8004828 <osMutexNew+0xe2>
          name = attr->name;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	60fb      	str	r3, [r7, #12]
 8004826:	e001      	b.n	800482c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800482c:	68f9      	ldr	r1, [r7, #12]
 800482e:	69f8      	ldr	r0, [r7, #28]
 8004830:	f001 fada 	bl	8005de8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d006      	beq.n	8004848 <osMutexNew+0x102>
 800483a:	697b      	ldr	r3, [r7, #20]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004840:	69fb      	ldr	r3, [r7, #28]
 8004842:	f043 0301 	orr.w	r3, r3, #1
 8004846:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004848:	69fb      	ldr	r3, [r7, #28]
}
 800484a:	4618      	mov	r0, r3
 800484c:	3720      	adds	r7, #32
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8004852:	b580      	push	{r7, lr}
 8004854:	b086      	sub	sp, #24
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f003 0301 	and.w	r3, r3, #1
 800486a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800486c:	2300      	movs	r3, #0
 800486e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004870:	f3ef 8305 	mrs	r3, IPSR
 8004874:	60bb      	str	r3, [r7, #8]
  return(result);
 8004876:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8004878:	2b00      	cmp	r3, #0
 800487a:	d003      	beq.n	8004884 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800487c:	f06f 0305 	mvn.w	r3, #5
 8004880:	617b      	str	r3, [r7, #20]
 8004882:	e02c      	b.n	80048de <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800488a:	f06f 0303 	mvn.w	r3, #3
 800488e:	617b      	str	r3, [r7, #20]
 8004890:	e025      	b.n	80048de <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d011      	beq.n	80048bc <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8004898:	6839      	ldr	r1, [r7, #0]
 800489a:	6938      	ldr	r0, [r7, #16]
 800489c:	f000 fc26 	bl	80050ec <xQueueTakeMutexRecursive>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d01b      	beq.n	80048de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80048a6:	683b      	ldr	r3, [r7, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d003      	beq.n	80048b4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 80048ac:	f06f 0301 	mvn.w	r3, #1
 80048b0:	617b      	str	r3, [r7, #20]
 80048b2:	e014      	b.n	80048de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80048b4:	f06f 0302 	mvn.w	r3, #2
 80048b8:	617b      	str	r3, [r7, #20]
 80048ba:	e010      	b.n	80048de <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80048bc:	6839      	ldr	r1, [r7, #0]
 80048be:	6938      	ldr	r0, [r7, #16]
 80048c0:	f000 ffba 	bl	8005838 <xQueueSemaphoreTake>
 80048c4:	4603      	mov	r3, r0
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d009      	beq.n	80048de <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80048d0:	f06f 0301 	mvn.w	r3, #1
 80048d4:	617b      	str	r3, [r7, #20]
 80048d6:	e002      	b.n	80048de <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80048d8:	f06f 0302 	mvn.w	r3, #2
 80048dc:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80048de:	697b      	ldr	r3, [r7, #20]
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b086      	sub	sp, #24
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	f023 0301 	bic.w	r3, r3, #1
 80048f6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8004900:	2300      	movs	r3, #0
 8004902:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004904:	f3ef 8305 	mrs	r3, IPSR
 8004908:	60bb      	str	r3, [r7, #8]
  return(result);
 800490a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800490c:	2b00      	cmp	r3, #0
 800490e:	d003      	beq.n	8004918 <osMutexRelease+0x30>
    stat = osErrorISR;
 8004910:	f06f 0305 	mvn.w	r3, #5
 8004914:	617b      	str	r3, [r7, #20]
 8004916:	e01f      	b.n	8004958 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8004918:	693b      	ldr	r3, [r7, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d103      	bne.n	8004926 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800491e:	f06f 0303 	mvn.w	r3, #3
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e018      	b.n	8004958 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	2b00      	cmp	r3, #0
 800492a:	d009      	beq.n	8004940 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800492c:	6938      	ldr	r0, [r7, #16]
 800492e:	f000 fba9 	bl	8005084 <xQueueGiveMutexRecursive>
 8004932:	4603      	mov	r3, r0
 8004934:	2b01      	cmp	r3, #1
 8004936:	d00f      	beq.n	8004958 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004938:	f06f 0302 	mvn.w	r3, #2
 800493c:	617b      	str	r3, [r7, #20]
 800493e:	e00b      	b.n	8004958 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8004940:	2300      	movs	r3, #0
 8004942:	2200      	movs	r2, #0
 8004944:	2100      	movs	r1, #0
 8004946:	6938      	ldr	r0, [r7, #16]
 8004948:	f000 fc70 	bl	800522c <xQueueGenericSend>
 800494c:	4603      	mov	r3, r0
 800494e:	2b01      	cmp	r3, #1
 8004950:	d002      	beq.n	8004958 <osMutexRelease+0x70>
        stat = osErrorResource;
 8004952:	f06f 0302 	mvn.w	r3, #2
 8004956:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004958:	697b      	ldr	r3, [r7, #20]
}
 800495a:	4618      	mov	r0, r3
 800495c:	3718      	adds	r7, #24
 800495e:	46bd      	mov	sp, r7
 8004960:	bd80      	pop	{r7, pc}

08004962 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004962:	b580      	push	{r7, lr}
 8004964:	b08a      	sub	sp, #40	; 0x28
 8004966:	af02      	add	r7, sp, #8
 8004968:	60f8      	str	r0, [r7, #12]
 800496a:	60b9      	str	r1, [r7, #8]
 800496c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800496e:	2300      	movs	r3, #0
 8004970:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004972:	f3ef 8305 	mrs	r3, IPSR
 8004976:	613b      	str	r3, [r7, #16]
  return(result);
 8004978:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800497a:	2b00      	cmp	r3, #0
 800497c:	d175      	bne.n	8004a6a <osSemaphoreNew+0x108>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d072      	beq.n	8004a6a <osSemaphoreNew+0x108>
 8004984:	68ba      	ldr	r2, [r7, #8]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	429a      	cmp	r2, r3
 800498a:	d86e      	bhi.n	8004a6a <osSemaphoreNew+0x108>
    mem = -1;
 800498c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004990:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	689b      	ldr	r3, [r3, #8]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d006      	beq.n	80049ae <osSemaphoreNew+0x4c>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68db      	ldr	r3, [r3, #12]
 80049a4:	2b4f      	cmp	r3, #79	; 0x4f
 80049a6:	d902      	bls.n	80049ae <osSemaphoreNew+0x4c>
        mem = 1;
 80049a8:	2301      	movs	r3, #1
 80049aa:	61bb      	str	r3, [r7, #24]
 80049ac:	e00c      	b.n	80049c8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d108      	bne.n	80049c8 <osSemaphoreNew+0x66>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	68db      	ldr	r3, [r3, #12]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d104      	bne.n	80049c8 <osSemaphoreNew+0x66>
          mem = 0;
 80049be:	2300      	movs	r3, #0
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e001      	b.n	80049c8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ce:	d04c      	beq.n	8004a6a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d128      	bne.n	8004a28 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d10a      	bne.n	80049f2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2203      	movs	r2, #3
 80049e2:	9200      	str	r2, [sp, #0]
 80049e4:	2200      	movs	r2, #0
 80049e6:	2100      	movs	r1, #0
 80049e8:	2001      	movs	r0, #1
 80049ea:	f000 fa29 	bl	8004e40 <xQueueGenericCreateStatic>
 80049ee:	61f8      	str	r0, [r7, #28]
 80049f0:	e005      	b.n	80049fe <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80049f2:	2203      	movs	r2, #3
 80049f4:	2100      	movs	r1, #0
 80049f6:	2001      	movs	r0, #1
 80049f8:	f000 fa9a 	bl	8004f30 <xQueueGenericCreate>
 80049fc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80049fe:	69fb      	ldr	r3, [r7, #28]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d022      	beq.n	8004a4a <osSemaphoreNew+0xe8>
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d01f      	beq.n	8004a4a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2100      	movs	r1, #0
 8004a10:	69f8      	ldr	r0, [r7, #28]
 8004a12:	f000 fc0b 	bl	800522c <xQueueGenericSend>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b01      	cmp	r3, #1
 8004a1a:	d016      	beq.n	8004a4a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004a1c:	69f8      	ldr	r0, [r7, #28]
 8004a1e:	f001 f897 	bl	8005b50 <vQueueDelete>
            hSemaphore = NULL;
 8004a22:	2300      	movs	r3, #0
 8004a24:	61fb      	str	r3, [r7, #28]
 8004a26:	e010      	b.n	8004a4a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004a28:	69bb      	ldr	r3, [r7, #24]
 8004a2a:	2b01      	cmp	r3, #1
 8004a2c:	d108      	bne.n	8004a40 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	461a      	mov	r2, r3
 8004a34:	68b9      	ldr	r1, [r7, #8]
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f000 fb8e 	bl	8005158 <xQueueCreateCountingSemaphoreStatic>
 8004a3c:	61f8      	str	r0, [r7, #28]
 8004a3e:	e004      	b.n	8004a4a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004a40:	68b9      	ldr	r1, [r7, #8]
 8004a42:	68f8      	ldr	r0, [r7, #12]
 8004a44:	f000 fbbf 	bl	80051c6 <xQueueCreateCountingSemaphore>
 8004a48:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8004a4a:	69fb      	ldr	r3, [r7, #28]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <osSemaphoreNew+0xfc>
          name = attr->name;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	617b      	str	r3, [r7, #20]
 8004a5c:	e001      	b.n	8004a62 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004a62:	6979      	ldr	r1, [r7, #20]
 8004a64:	69f8      	ldr	r0, [r7, #28]
 8004a66:	f001 f9bf 	bl	8005de8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8004a6a:	69fb      	ldr	r3, [r7, #28]
}
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	3720      	adds	r7, #32
 8004a70:	46bd      	mov	sp, r7
 8004a72:	bd80      	pop	{r7, pc}

08004a74 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d103      	bne.n	8004a94 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004a8c:	f06f 0303 	mvn.w	r3, #3
 8004a90:	617b      	str	r3, [r7, #20]
 8004a92:	e039      	b.n	8004b08 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a94:	f3ef 8305 	mrs	r3, IPSR
 8004a98:	60fb      	str	r3, [r7, #12]
  return(result);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d022      	beq.n	8004ae6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004aa6:	f06f 0303 	mvn.w	r3, #3
 8004aaa:	617b      	str	r3, [r7, #20]
 8004aac:	e02c      	b.n	8004b08 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004ab2:	f107 0308 	add.w	r3, r7, #8
 8004ab6:	461a      	mov	r2, r3
 8004ab8:	2100      	movs	r1, #0
 8004aba:	6938      	ldr	r0, [r7, #16]
 8004abc:	f000 ffc8 	bl	8005a50 <xQueueReceiveFromISR>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d003      	beq.n	8004ace <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004ac6:	f06f 0302 	mvn.w	r3, #2
 8004aca:	617b      	str	r3, [r7, #20]
 8004acc:	e01c      	b.n	8004b08 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d019      	beq.n	8004b08 <osSemaphoreAcquire+0x94>
 8004ad4:	4b0f      	ldr	r3, [pc, #60]	; (8004b14 <osSemaphoreAcquire+0xa0>)
 8004ad6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ada:	601a      	str	r2, [r3, #0]
 8004adc:	f3bf 8f4f 	dsb	sy
 8004ae0:	f3bf 8f6f 	isb	sy
 8004ae4:	e010      	b.n	8004b08 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004ae6:	6839      	ldr	r1, [r7, #0]
 8004ae8:	6938      	ldr	r0, [r7, #16]
 8004aea:	f000 fea5 	bl	8005838 <xQueueSemaphoreTake>
 8004aee:	4603      	mov	r3, r0
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d009      	beq.n	8004b08 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d003      	beq.n	8004b02 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004afa:	f06f 0301 	mvn.w	r3, #1
 8004afe:	617b      	str	r3, [r7, #20]
 8004b00:	e002      	b.n	8004b08 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8004b02:	f06f 0302 	mvn.w	r3, #2
 8004b06:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004b08:	697b      	ldr	r3, [r7, #20]
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	e000ed04 	.word	0xe000ed04

08004b18 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b086      	sub	sp, #24
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d103      	bne.n	8004b36 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8004b2e:	f06f 0303 	mvn.w	r3, #3
 8004b32:	617b      	str	r3, [r7, #20]
 8004b34:	e02c      	b.n	8004b90 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b36:	f3ef 8305 	mrs	r3, IPSR
 8004b3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d01a      	beq.n	8004b78 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004b42:	2300      	movs	r3, #0
 8004b44:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004b46:	f107 0308 	add.w	r3, r7, #8
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6938      	ldr	r0, [r7, #16]
 8004b4e:	f000 fd06 	bl	800555e <xQueueGiveFromISR>
 8004b52:	4603      	mov	r3, r0
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d003      	beq.n	8004b60 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004b58:	f06f 0302 	mvn.w	r3, #2
 8004b5c:	617b      	str	r3, [r7, #20]
 8004b5e:	e017      	b.n	8004b90 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d014      	beq.n	8004b90 <osSemaphoreRelease+0x78>
 8004b66:	4b0d      	ldr	r3, [pc, #52]	; (8004b9c <osSemaphoreRelease+0x84>)
 8004b68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b6c:	601a      	str	r2, [r3, #0]
 8004b6e:	f3bf 8f4f 	dsb	sy
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	e00b      	b.n	8004b90 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004b78:	2300      	movs	r3, #0
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	2100      	movs	r1, #0
 8004b7e:	6938      	ldr	r0, [r7, #16]
 8004b80:	f000 fb54 	bl	800522c <xQueueGenericSend>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b01      	cmp	r3, #1
 8004b88:	d002      	beq.n	8004b90 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8004b8a:	f06f 0302 	mvn.w	r3, #2
 8004b8e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004b90:	697b      	ldr	r3, [r7, #20]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	e000ed04 	.word	0xe000ed04

08004ba0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4a07      	ldr	r2, [pc, #28]	; (8004bcc <vApplicationGetIdleTaskMemory+0x2c>)
 8004bb0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004bb2:	68bb      	ldr	r3, [r7, #8]
 8004bb4:	4a06      	ldr	r2, [pc, #24]	; (8004bd0 <vApplicationGetIdleTaskMemory+0x30>)
 8004bb6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2280      	movs	r2, #128	; 0x80
 8004bbc:	601a      	str	r2, [r3, #0]
}
 8004bbe:	bf00      	nop
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr
 8004bca:	bf00      	nop
 8004bcc:	200001f4 	.word	0x200001f4
 8004bd0:	2000029c 	.word	0x2000029c

08004bd4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004bd4:	b480      	push	{r7}
 8004bd6:	b085      	sub	sp, #20
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	60f8      	str	r0, [r7, #12]
 8004bdc:	60b9      	str	r1, [r7, #8]
 8004bde:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a07      	ldr	r2, [pc, #28]	; (8004c00 <vApplicationGetTimerTaskMemory+0x2c>)
 8004be4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	4a06      	ldr	r2, [pc, #24]	; (8004c04 <vApplicationGetTimerTaskMemory+0x30>)
 8004bea:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004bf2:	601a      	str	r2, [r3, #0]
}
 8004bf4:	bf00      	nop
 8004bf6:	3714      	adds	r7, #20
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfe:	4770      	bx	lr
 8004c00:	2000049c 	.word	0x2000049c
 8004c04:	20000544 	.word	0x20000544

08004c08 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f103 0208 	add.w	r2, r3, #8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004c20:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	f103 0208 	add.w	r2, r3, #8
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	f103 0208 	add.w	r2, r3, #8
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2200      	movs	r2, #0
 8004c54:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004c56:	bf00      	nop
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004c62:	b480      	push	{r7}
 8004c64:	b085      	sub	sp, #20
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	6078      	str	r0, [r7, #4]
 8004c6a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	68fa      	ldr	r2, [r7, #12]
 8004c76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	689a      	ldr	r2, [r3, #8]
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	683a      	ldr	r2, [r7, #0]
 8004c86:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	683a      	ldr	r2, [r7, #0]
 8004c8c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	1c5a      	adds	r2, r3, #1
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	601a      	str	r2, [r3, #0]
}
 8004c9e:	bf00      	nop
 8004ca0:	3714      	adds	r7, #20
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca8:	4770      	bx	lr

08004caa <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004caa:	b480      	push	{r7}
 8004cac:	b085      	sub	sp, #20
 8004cae:	af00      	add	r7, sp, #0
 8004cb0:	6078      	str	r0, [r7, #4]
 8004cb2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004cba:	68bb      	ldr	r3, [r7, #8]
 8004cbc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc0:	d103      	bne.n	8004cca <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	60fb      	str	r3, [r7, #12]
 8004cc8:	e00c      	b.n	8004ce4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	3308      	adds	r3, #8
 8004cce:	60fb      	str	r3, [r7, #12]
 8004cd0:	e002      	b.n	8004cd8 <vListInsert+0x2e>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	68ba      	ldr	r2, [r7, #8]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d2f6      	bcs.n	8004cd2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	68fa      	ldr	r2, [r7, #12]
 8004cf8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	601a      	str	r2, [r3, #0]
}
 8004d10:	bf00      	nop
 8004d12:	3714      	adds	r7, #20
 8004d14:	46bd      	mov	sp, r7
 8004d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d1a:	4770      	bx	lr

08004d1c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
 8004d28:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6892      	ldr	r2, [r2, #8]
 8004d32:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	687a      	ldr	r2, [r7, #4]
 8004d3a:	6852      	ldr	r2, [r2, #4]
 8004d3c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	687a      	ldr	r2, [r7, #4]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d103      	bne.n	8004d50 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	1e5a      	subs	r2, r3, #1
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b084      	sub	sp, #16
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d10a      	bne.n	8004d9a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d88:	f383 8811 	msr	BASEPRI, r3
 8004d8c:	f3bf 8f6f 	isb	sy
 8004d90:	f3bf 8f4f 	dsb	sy
 8004d94:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004d96:	bf00      	nop
 8004d98:	e7fe      	b.n	8004d98 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004d9a:	f002 ff83 	bl	8007ca4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	68f9      	ldr	r1, [r7, #12]
 8004da8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004daa:	fb01 f303 	mul.w	r3, r1, r3
 8004dae:	441a      	add	r2, r3
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	2200      	movs	r2, #0
 8004db8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dca:	3b01      	subs	r3, #1
 8004dcc:	68f9      	ldr	r1, [r7, #12]
 8004dce:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004dd0:	fb01 f303 	mul.w	r3, r1, r3
 8004dd4:	441a      	add	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	22ff      	movs	r2, #255	; 0xff
 8004dde:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	22ff      	movs	r2, #255	; 0xff
 8004de6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004dea:	683b      	ldr	r3, [r7, #0]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d114      	bne.n	8004e1a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	691b      	ldr	r3, [r3, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d01a      	beq.n	8004e2e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	3310      	adds	r3, #16
 8004dfc:	4618      	mov	r0, r3
 8004dfe:	f001 fd01 	bl	8006804 <xTaskRemoveFromEventList>
 8004e02:	4603      	mov	r3, r0
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d012      	beq.n	8004e2e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e08:	4b0c      	ldr	r3, [pc, #48]	; (8004e3c <xQueueGenericReset+0xcc>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
 8004e18:	e009      	b.n	8004e2e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	3310      	adds	r3, #16
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f7ff fef2 	bl	8004c08 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	3324      	adds	r3, #36	; 0x24
 8004e28:	4618      	mov	r0, r3
 8004e2a:	f7ff feed 	bl	8004c08 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004e2e:	f002 ff69 	bl	8007d04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004e32:	2301      	movs	r3, #1
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}
 8004e3c:	e000ed04 	.word	0xe000ed04

08004e40 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b08e      	sub	sp, #56	; 0x38
 8004e44:	af02      	add	r7, sp, #8
 8004e46:	60f8      	str	r0, [r7, #12]
 8004e48:	60b9      	str	r1, [r7, #8]
 8004e4a:	607a      	str	r2, [r7, #4]
 8004e4c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d10a      	bne.n	8004e6a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004e54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e58:	f383 8811 	msr	BASEPRI, r3
 8004e5c:	f3bf 8f6f 	isb	sy
 8004e60:	f3bf 8f4f 	dsb	sy
 8004e64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004e66:	bf00      	nop
 8004e68:	e7fe      	b.n	8004e68 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d10a      	bne.n	8004e86 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e74:	f383 8811 	msr	BASEPRI, r3
 8004e78:	f3bf 8f6f 	isb	sy
 8004e7c:	f3bf 8f4f 	dsb	sy
 8004e80:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004e82:	bf00      	nop
 8004e84:	e7fe      	b.n	8004e84 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d002      	beq.n	8004e92 <xQueueGenericCreateStatic+0x52>
 8004e8c:	68bb      	ldr	r3, [r7, #8]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <xQueueGenericCreateStatic+0x56>
 8004e92:	2301      	movs	r3, #1
 8004e94:	e000      	b.n	8004e98 <xQueueGenericCreateStatic+0x58>
 8004e96:	2300      	movs	r3, #0
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	623b      	str	r3, [r7, #32]
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d102      	bne.n	8004ebe <xQueueGenericCreateStatic+0x7e>
 8004eb8:	68bb      	ldr	r3, [r7, #8]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d101      	bne.n	8004ec2 <xQueueGenericCreateStatic+0x82>
 8004ebe:	2301      	movs	r3, #1
 8004ec0:	e000      	b.n	8004ec4 <xQueueGenericCreateStatic+0x84>
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d10a      	bne.n	8004ede <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ecc:	f383 8811 	msr	BASEPRI, r3
 8004ed0:	f3bf 8f6f 	isb	sy
 8004ed4:	f3bf 8f4f 	dsb	sy
 8004ed8:	61fb      	str	r3, [r7, #28]
}
 8004eda:	bf00      	nop
 8004edc:	e7fe      	b.n	8004edc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004ede:	2350      	movs	r3, #80	; 0x50
 8004ee0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	2b50      	cmp	r3, #80	; 0x50
 8004ee6:	d00a      	beq.n	8004efe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eec:	f383 8811 	msr	BASEPRI, r3
 8004ef0:	f3bf 8f6f 	isb	sy
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	61bb      	str	r3, [r7, #24]
}
 8004efa:	bf00      	nop
 8004efc:	e7fe      	b.n	8004efc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004efe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d00d      	beq.n	8004f26 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004f16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	687a      	ldr	r2, [r7, #4]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f83f 	bl	8004fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3730      	adds	r7, #48	; 0x30
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b08a      	sub	sp, #40	; 0x28
 8004f34:	af02      	add	r7, sp, #8
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	4613      	mov	r3, r2
 8004f3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	613b      	str	r3, [r7, #16]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	68ba      	ldr	r2, [r7, #8]
 8004f5e:	fb02 f303 	mul.w	r3, r2, r3
 8004f62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	3350      	adds	r3, #80	; 0x50
 8004f68:	4618      	mov	r0, r3
 8004f6a:	f002 ffbd 	bl	8007ee8 <pvPortMalloc>
 8004f6e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004f70:	69bb      	ldr	r3, [r7, #24]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d011      	beq.n	8004f9a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	3350      	adds	r3, #80	; 0x50
 8004f7e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	2200      	movs	r2, #0
 8004f84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f88:	79fa      	ldrb	r2, [r7, #7]
 8004f8a:	69bb      	ldr	r3, [r7, #24]
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	4613      	mov	r3, r2
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	68b9      	ldr	r1, [r7, #8]
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 f805 	bl	8004fa4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004f9a:	69bb      	ldr	r3, [r7, #24]
	}
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	60f8      	str	r0, [r7, #12]
 8004fac:	60b9      	str	r1, [r7, #8]
 8004fae:	607a      	str	r2, [r7, #4]
 8004fb0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d103      	bne.n	8004fc0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004fb8:	69bb      	ldr	r3, [r7, #24]
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	601a      	str	r2, [r3, #0]
 8004fbe:	e002      	b.n	8004fc6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004fc0:	69bb      	ldr	r3, [r7, #24]
 8004fc2:	687a      	ldr	r2, [r7, #4]
 8004fc4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004fc6:	69bb      	ldr	r3, [r7, #24]
 8004fc8:	68fa      	ldr	r2, [r7, #12]
 8004fca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	68ba      	ldr	r2, [r7, #8]
 8004fd0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	69b8      	ldr	r0, [r7, #24]
 8004fd6:	f7ff fecb 	bl	8004d70 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	78fa      	ldrb	r2, [r7, #3]
 8004fde:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004fe2:	bf00      	nop
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b082      	sub	sp, #8
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d00e      	beq.n	8005016 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2200      	movs	r2, #0
 8005008:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800500a:	2300      	movs	r3, #0
 800500c:	2200      	movs	r2, #0
 800500e:	2100      	movs	r1, #0
 8005010:	6878      	ldr	r0, [r7, #4]
 8005012:	f000 f90b 	bl	800522c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8005016:	bf00      	nop
 8005018:	3708      	adds	r7, #8
 800501a:	46bd      	mov	sp, r7
 800501c:	bd80      	pop	{r7, pc}

0800501e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800501e:	b580      	push	{r7, lr}
 8005020:	b086      	sub	sp, #24
 8005022:	af00      	add	r7, sp, #0
 8005024:	4603      	mov	r3, r0
 8005026:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8005028:	2301      	movs	r3, #1
 800502a:	617b      	str	r3, [r7, #20]
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8005030:	79fb      	ldrb	r3, [r7, #7]
 8005032:	461a      	mov	r2, r3
 8005034:	6939      	ldr	r1, [r7, #16]
 8005036:	6978      	ldr	r0, [r7, #20]
 8005038:	f7ff ff7a 	bl	8004f30 <xQueueGenericCreate>
 800503c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800503e:	68f8      	ldr	r0, [r7, #12]
 8005040:	f7ff ffd3 	bl	8004fea <prvInitialiseMutex>

		return xNewQueue;
 8005044:	68fb      	ldr	r3, [r7, #12]
	}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}

0800504e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800504e:	b580      	push	{r7, lr}
 8005050:	b088      	sub	sp, #32
 8005052:	af02      	add	r7, sp, #8
 8005054:	4603      	mov	r3, r0
 8005056:	6039      	str	r1, [r7, #0]
 8005058:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800505a:	2301      	movs	r3, #1
 800505c:	617b      	str	r3, [r7, #20]
 800505e:	2300      	movs	r3, #0
 8005060:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	9300      	str	r3, [sp, #0]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2200      	movs	r2, #0
 800506a:	6939      	ldr	r1, [r7, #16]
 800506c:	6978      	ldr	r0, [r7, #20]
 800506e:	f7ff fee7 	bl	8004e40 <xQueueGenericCreateStatic>
 8005072:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f7ff ffb8 	bl	8004fea <prvInitialiseMutex>

		return xNewQueue;
 800507a:	68fb      	ldr	r3, [r7, #12]
	}
 800507c:	4618      	mov	r0, r3
 800507e:	3718      	adds	r7, #24
 8005080:	46bd      	mov	sp, r7
 8005082:	bd80      	pop	{r7, pc}

08005084 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8005084:	b590      	push	{r4, r7, lr}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8005090:	693b      	ldr	r3, [r7, #16]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d10a      	bne.n	80050ac <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	60fb      	str	r3, [r7, #12]
}
 80050a8:	bf00      	nop
 80050aa:	e7fe      	b.n	80050aa <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	689c      	ldr	r4, [r3, #8]
 80050b0:	f001 fd6a 	bl	8006b88 <xTaskGetCurrentTaskHandle>
 80050b4:	4603      	mov	r3, r0
 80050b6:	429c      	cmp	r4, r3
 80050b8:	d111      	bne.n	80050de <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	1e5a      	subs	r2, r3, #1
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80050c4:	693b      	ldr	r3, [r7, #16]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d105      	bne.n	80050d8 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80050cc:	2300      	movs	r3, #0
 80050ce:	2200      	movs	r2, #0
 80050d0:	2100      	movs	r1, #0
 80050d2:	6938      	ldr	r0, [r7, #16]
 80050d4:	f000 f8aa 	bl	800522c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 80050d8:	2301      	movs	r3, #1
 80050da:	617b      	str	r3, [r7, #20]
 80050dc:	e001      	b.n	80050e2 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 80050de:	2300      	movs	r3, #0
 80050e0:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 80050e2:	697b      	ldr	r3, [r7, #20]
	}
 80050e4:	4618      	mov	r0, r3
 80050e6:	371c      	adds	r7, #28
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd90      	pop	{r4, r7, pc}

080050ec <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80050ec:	b590      	push	{r4, r7, lr}
 80050ee:	b087      	sub	sp, #28
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10a      	bne.n	8005116 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	60fb      	str	r3, [r7, #12]
}
 8005112:	bf00      	nop
 8005114:	e7fe      	b.n	8005114 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	689c      	ldr	r4, [r3, #8]
 800511a:	f001 fd35 	bl	8006b88 <xTaskGetCurrentTaskHandle>
 800511e:	4603      	mov	r3, r0
 8005120:	429c      	cmp	r4, r3
 8005122:	d107      	bne.n	8005134 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	68db      	ldr	r3, [r3, #12]
 8005128:	1c5a      	adds	r2, r3, #1
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800512e:	2301      	movs	r3, #1
 8005130:	617b      	str	r3, [r7, #20]
 8005132:	e00c      	b.n	800514e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8005134:	6839      	ldr	r1, [r7, #0]
 8005136:	6938      	ldr	r0, [r7, #16]
 8005138:	f000 fb7e 	bl	8005838 <xQueueSemaphoreTake>
 800513c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d004      	beq.n	800514e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	1c5a      	adds	r2, r3, #1
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800514e:	697b      	ldr	r3, [r7, #20]
	}
 8005150:	4618      	mov	r0, r3
 8005152:	371c      	adds	r7, #28
 8005154:	46bd      	mov	sp, r7
 8005156:	bd90      	pop	{r4, r7, pc}

08005158 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8005158:	b580      	push	{r7, lr}
 800515a:	b08a      	sub	sp, #40	; 0x28
 800515c:	af02      	add	r7, sp, #8
 800515e:	60f8      	str	r0, [r7, #12]
 8005160:	60b9      	str	r1, [r7, #8]
 8005162:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d10a      	bne.n	8005180 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800516a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516e:	f383 8811 	msr	BASEPRI, r3
 8005172:	f3bf 8f6f 	isb	sy
 8005176:	f3bf 8f4f 	dsb	sy
 800517a:	61bb      	str	r3, [r7, #24]
}
 800517c:	bf00      	nop
 800517e:	e7fe      	b.n	800517e <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	429a      	cmp	r2, r3
 8005186:	d90a      	bls.n	800519e <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8005188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800518c:	f383 8811 	msr	BASEPRI, r3
 8005190:	f3bf 8f6f 	isb	sy
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	617b      	str	r3, [r7, #20]
}
 800519a:	bf00      	nop
 800519c:	e7fe      	b.n	800519c <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800519e:	2302      	movs	r3, #2
 80051a0:	9300      	str	r3, [sp, #0]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2100      	movs	r1, #0
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff fe49 	bl	8004e40 <xQueueGenericCreateStatic>
 80051ae:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80051b0:	69fb      	ldr	r3, [r7, #28]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d002      	beq.n	80051bc <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	68ba      	ldr	r2, [r7, #8]
 80051ba:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80051bc:	69fb      	ldr	r3, [r7, #28]
	}
 80051be:	4618      	mov	r0, r3
 80051c0:	3720      	adds	r7, #32
 80051c2:	46bd      	mov	sp, r7
 80051c4:	bd80      	pop	{r7, pc}

080051c6 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80051c6:	b580      	push	{r7, lr}
 80051c8:	b086      	sub	sp, #24
 80051ca:	af00      	add	r7, sp, #0
 80051cc:	6078      	str	r0, [r7, #4]
 80051ce:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d10a      	bne.n	80051ec <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	613b      	str	r3, [r7, #16]
}
 80051e8:	bf00      	nop
 80051ea:	e7fe      	b.n	80051ea <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	d90a      	bls.n	800520a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80051f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051f8:	f383 8811 	msr	BASEPRI, r3
 80051fc:	f3bf 8f6f 	isb	sy
 8005200:	f3bf 8f4f 	dsb	sy
 8005204:	60fb      	str	r3, [r7, #12]
}
 8005206:	bf00      	nop
 8005208:	e7fe      	b.n	8005208 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800520a:	2202      	movs	r2, #2
 800520c:	2100      	movs	r1, #0
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	f7ff fe8e 	bl	8004f30 <xQueueGenericCreate>
 8005214:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d002      	beq.n	8005222 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	683a      	ldr	r2, [r7, #0]
 8005220:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8005222:	697b      	ldr	r3, [r7, #20]
	}
 8005224:	4618      	mov	r0, r3
 8005226:	3718      	adds	r7, #24
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b08e      	sub	sp, #56	; 0x38
 8005230:	af00      	add	r7, sp, #0
 8005232:	60f8      	str	r0, [r7, #12]
 8005234:	60b9      	str	r1, [r7, #8]
 8005236:	607a      	str	r2, [r7, #4]
 8005238:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800523a:	2300      	movs	r3, #0
 800523c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005244:	2b00      	cmp	r3, #0
 8005246:	d10a      	bne.n	800525e <xQueueGenericSend+0x32>
	__asm volatile
 8005248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800524c:	f383 8811 	msr	BASEPRI, r3
 8005250:	f3bf 8f6f 	isb	sy
 8005254:	f3bf 8f4f 	dsb	sy
 8005258:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800525a:	bf00      	nop
 800525c:	e7fe      	b.n	800525c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800525e:	68bb      	ldr	r3, [r7, #8]
 8005260:	2b00      	cmp	r3, #0
 8005262:	d103      	bne.n	800526c <xQueueGenericSend+0x40>
 8005264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005268:	2b00      	cmp	r3, #0
 800526a:	d101      	bne.n	8005270 <xQueueGenericSend+0x44>
 800526c:	2301      	movs	r3, #1
 800526e:	e000      	b.n	8005272 <xQueueGenericSend+0x46>
 8005270:	2300      	movs	r3, #0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10a      	bne.n	800528c <xQueueGenericSend+0x60>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005288:	bf00      	nop
 800528a:	e7fe      	b.n	800528a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	2b02      	cmp	r3, #2
 8005290:	d103      	bne.n	800529a <xQueueGenericSend+0x6e>
 8005292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005294:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005296:	2b01      	cmp	r3, #1
 8005298:	d101      	bne.n	800529e <xQueueGenericSend+0x72>
 800529a:	2301      	movs	r3, #1
 800529c:	e000      	b.n	80052a0 <xQueueGenericSend+0x74>
 800529e:	2300      	movs	r3, #0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d10a      	bne.n	80052ba <xQueueGenericSend+0x8e>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	623b      	str	r3, [r7, #32]
}
 80052b6:	bf00      	nop
 80052b8:	e7fe      	b.n	80052b8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80052ba:	f001 fc75 	bl	8006ba8 <xTaskGetSchedulerState>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d102      	bne.n	80052ca <xQueueGenericSend+0x9e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d101      	bne.n	80052ce <xQueueGenericSend+0xa2>
 80052ca:	2301      	movs	r3, #1
 80052cc:	e000      	b.n	80052d0 <xQueueGenericSend+0xa4>
 80052ce:	2300      	movs	r3, #0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d10a      	bne.n	80052ea <xQueueGenericSend+0xbe>
	__asm volatile
 80052d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d8:	f383 8811 	msr	BASEPRI, r3
 80052dc:	f3bf 8f6f 	isb	sy
 80052e0:	f3bf 8f4f 	dsb	sy
 80052e4:	61fb      	str	r3, [r7, #28]
}
 80052e6:	bf00      	nop
 80052e8:	e7fe      	b.n	80052e8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052ea:	f002 fcdb 	bl	8007ca4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80052ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80052f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052f6:	429a      	cmp	r2, r3
 80052f8:	d302      	bcc.n	8005300 <xQueueGenericSend+0xd4>
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	2b02      	cmp	r3, #2
 80052fe:	d129      	bne.n	8005354 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005300:	683a      	ldr	r2, [r7, #0]
 8005302:	68b9      	ldr	r1, [r7, #8]
 8005304:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005306:	f000 fc5e 	bl	8005bc6 <prvCopyDataToQueue>
 800530a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800530c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800530e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005310:	2b00      	cmp	r3, #0
 8005312:	d010      	beq.n	8005336 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005316:	3324      	adds	r3, #36	; 0x24
 8005318:	4618      	mov	r0, r3
 800531a:	f001 fa73 	bl	8006804 <xTaskRemoveFromEventList>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d013      	beq.n	800534c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005324:	4b3f      	ldr	r3, [pc, #252]	; (8005424 <xQueueGenericSend+0x1f8>)
 8005326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	f3bf 8f6f 	isb	sy
 8005334:	e00a      	b.n	800534c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	2b00      	cmp	r3, #0
 800533a:	d007      	beq.n	800534c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800533c:	4b39      	ldr	r3, [pc, #228]	; (8005424 <xQueueGenericSend+0x1f8>)
 800533e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	f3bf 8f4f 	dsb	sy
 8005348:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800534c:	f002 fcda 	bl	8007d04 <vPortExitCritical>
				return pdPASS;
 8005350:	2301      	movs	r3, #1
 8005352:	e063      	b.n	800541c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d103      	bne.n	8005362 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800535a:	f002 fcd3 	bl	8007d04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800535e:	2300      	movs	r3, #0
 8005360:	e05c      	b.n	800541c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005362:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005364:	2b00      	cmp	r3, #0
 8005366:	d106      	bne.n	8005376 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005368:	f107 0314 	add.w	r3, r7, #20
 800536c:	4618      	mov	r0, r3
 800536e:	f001 faad 	bl	80068cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005376:	f002 fcc5 	bl	8007d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800537a:	f001 f819 	bl	80063b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800537e:	f002 fc91 	bl	8007ca4 <vPortEnterCritical>
 8005382:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005384:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005388:	b25b      	sxtb	r3, r3
 800538a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800538e:	d103      	bne.n	8005398 <xQueueGenericSend+0x16c>
 8005390:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005392:	2200      	movs	r2, #0
 8005394:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800539a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800539e:	b25b      	sxtb	r3, r3
 80053a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053a4:	d103      	bne.n	80053ae <xQueueGenericSend+0x182>
 80053a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a8:	2200      	movs	r2, #0
 80053aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80053ae:	f002 fca9 	bl	8007d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80053b2:	1d3a      	adds	r2, r7, #4
 80053b4:	f107 0314 	add.w	r3, r7, #20
 80053b8:	4611      	mov	r1, r2
 80053ba:	4618      	mov	r0, r3
 80053bc:	f001 fa9c 	bl	80068f8 <xTaskCheckForTimeOut>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d124      	bne.n	8005410 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80053c6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053c8:	f000 fcf5 	bl	8005db6 <prvIsQueueFull>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d018      	beq.n	8005404 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80053d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d4:	3310      	adds	r3, #16
 80053d6:	687a      	ldr	r2, [r7, #4]
 80053d8:	4611      	mov	r1, r2
 80053da:	4618      	mov	r0, r3
 80053dc:	f001 f9c2 	bl	8006764 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80053e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80053e2:	f000 fc80 	bl	8005ce6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80053e6:	f000 fff1 	bl	80063cc <xTaskResumeAll>
 80053ea:	4603      	mov	r3, r0
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	f47f af7c 	bne.w	80052ea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80053f2:	4b0c      	ldr	r3, [pc, #48]	; (8005424 <xQueueGenericSend+0x1f8>)
 80053f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053f8:	601a      	str	r2, [r3, #0]
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	f3bf 8f6f 	isb	sy
 8005402:	e772      	b.n	80052ea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005404:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005406:	f000 fc6e 	bl	8005ce6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800540a:	f000 ffdf 	bl	80063cc <xTaskResumeAll>
 800540e:	e76c      	b.n	80052ea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005410:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005412:	f000 fc68 	bl	8005ce6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005416:	f000 ffd9 	bl	80063cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800541a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800541c:	4618      	mov	r0, r3
 800541e:	3738      	adds	r7, #56	; 0x38
 8005420:	46bd      	mov	sp, r7
 8005422:	bd80      	pop	{r7, pc}
 8005424:	e000ed04 	.word	0xe000ed04

08005428 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b090      	sub	sp, #64	; 0x40
 800542c:	af00      	add	r7, sp, #0
 800542e:	60f8      	str	r0, [r7, #12]
 8005430:	60b9      	str	r1, [r7, #8]
 8005432:	607a      	str	r2, [r7, #4]
 8005434:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800543a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d103      	bne.n	8005464 <xQueueGenericSendFromISR+0x3c>
 800545c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d101      	bne.n	8005468 <xQueueGenericSendFromISR+0x40>
 8005464:	2301      	movs	r3, #1
 8005466:	e000      	b.n	800546a <xQueueGenericSendFromISR+0x42>
 8005468:	2300      	movs	r3, #0
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800546e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005472:	f383 8811 	msr	BASEPRI, r3
 8005476:	f3bf 8f6f 	isb	sy
 800547a:	f3bf 8f4f 	dsb	sy
 800547e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005480:	bf00      	nop
 8005482:	e7fe      	b.n	8005482 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d103      	bne.n	8005492 <xQueueGenericSendFromISR+0x6a>
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800548e:	2b01      	cmp	r3, #1
 8005490:	d101      	bne.n	8005496 <xQueueGenericSendFromISR+0x6e>
 8005492:	2301      	movs	r3, #1
 8005494:	e000      	b.n	8005498 <xQueueGenericSendFromISR+0x70>
 8005496:	2300      	movs	r3, #0
 8005498:	2b00      	cmp	r3, #0
 800549a:	d10a      	bne.n	80054b2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800549c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054a0:	f383 8811 	msr	BASEPRI, r3
 80054a4:	f3bf 8f6f 	isb	sy
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	623b      	str	r3, [r7, #32]
}
 80054ae:	bf00      	nop
 80054b0:	e7fe      	b.n	80054b0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80054b2:	f002 fcd9 	bl	8007e68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80054b6:	f3ef 8211 	mrs	r2, BASEPRI
 80054ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054be:	f383 8811 	msr	BASEPRI, r3
 80054c2:	f3bf 8f6f 	isb	sy
 80054c6:	f3bf 8f4f 	dsb	sy
 80054ca:	61fa      	str	r2, [r7, #28]
 80054cc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80054ce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80054d0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <xQueueGenericSendFromISR+0xbc>
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	2b02      	cmp	r3, #2
 80054e2:	d12f      	bne.n	8005544 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80054e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054ea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80054ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054f2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	68b9      	ldr	r1, [r7, #8]
 80054f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80054fa:	f000 fb64 	bl	8005bc6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80054fe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005506:	d112      	bne.n	800552e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800550c:	2b00      	cmp	r3, #0
 800550e:	d016      	beq.n	800553e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005510:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005512:	3324      	adds	r3, #36	; 0x24
 8005514:	4618      	mov	r0, r3
 8005516:	f001 f975 	bl	8006804 <xTaskRemoveFromEventList>
 800551a:	4603      	mov	r3, r0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00e      	beq.n	800553e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00b      	beq.n	800553e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	2201      	movs	r2, #1
 800552a:	601a      	str	r2, [r3, #0]
 800552c:	e007      	b.n	800553e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800552e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005532:	3301      	adds	r3, #1
 8005534:	b2db      	uxtb	r3, r3
 8005536:	b25a      	sxtb	r2, r3
 8005538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800553a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800553e:	2301      	movs	r3, #1
 8005540:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005542:	e001      	b.n	8005548 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005544:	2300      	movs	r3, #0
 8005546:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005552:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005554:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005556:	4618      	mov	r0, r3
 8005558:	3740      	adds	r7, #64	; 0x40
 800555a:	46bd      	mov	sp, r7
 800555c:	bd80      	pop	{r7, pc}

0800555e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800555e:	b580      	push	{r7, lr}
 8005560:	b08e      	sub	sp, #56	; 0x38
 8005562:	af00      	add	r7, sp, #0
 8005564:	6078      	str	r0, [r7, #4]
 8005566:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	623b      	str	r3, [r7, #32]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	2b00      	cmp	r3, #0
 800558e:	d00a      	beq.n	80055a6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8005590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005594:	f383 8811 	msr	BASEPRI, r3
 8005598:	f3bf 8f6f 	isb	sy
 800559c:	f3bf 8f4f 	dsb	sy
 80055a0:	61fb      	str	r3, [r7, #28]
}
 80055a2:	bf00      	nop
 80055a4:	e7fe      	b.n	80055a4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80055a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d103      	bne.n	80055b6 <xQueueGiveFromISR+0x58>
 80055ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d101      	bne.n	80055ba <xQueueGiveFromISR+0x5c>
 80055b6:	2301      	movs	r3, #1
 80055b8:	e000      	b.n	80055bc <xQueueGiveFromISR+0x5e>
 80055ba:	2300      	movs	r3, #0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xQueueGiveFromISR+0x78>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	61bb      	str	r3, [r7, #24]
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055d6:	f002 fc47 	bl	8007e68 <vPortValidateInterruptPriority>
	__asm volatile
 80055da:	f3ef 8211 	mrs	r2, BASEPRI
 80055de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	617a      	str	r2, [r7, #20]
 80055f0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80055f2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055f4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055fa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80055fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005600:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005602:	429a      	cmp	r2, r3
 8005604:	d22b      	bcs.n	800565e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800560c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005612:	1c5a      	adds	r2, r3, #1
 8005614:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005616:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005618:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800561c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005620:	d112      	bne.n	8005648 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005626:	2b00      	cmp	r3, #0
 8005628:	d016      	beq.n	8005658 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800562a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800562c:	3324      	adds	r3, #36	; 0x24
 800562e:	4618      	mov	r0, r3
 8005630:	f001 f8e8 	bl	8006804 <xTaskRemoveFromEventList>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00e      	beq.n	8005658 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00b      	beq.n	8005658 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2201      	movs	r2, #1
 8005644:	601a      	str	r2, [r3, #0]
 8005646:	e007      	b.n	8005658 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005648:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800564c:	3301      	adds	r3, #1
 800564e:	b2db      	uxtb	r3, r3
 8005650:	b25a      	sxtb	r2, r3
 8005652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005654:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005658:	2301      	movs	r3, #1
 800565a:	637b      	str	r3, [r7, #52]	; 0x34
 800565c:	e001      	b.n	8005662 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800565e:	2300      	movs	r3, #0
 8005660:	637b      	str	r3, [r7, #52]	; 0x34
 8005662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005664:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f383 8811 	msr	BASEPRI, r3
}
 800566c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800566e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005670:	4618      	mov	r0, r3
 8005672:	3738      	adds	r7, #56	; 0x38
 8005674:	46bd      	mov	sp, r7
 8005676:	bd80      	pop	{r7, pc}

08005678 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005678:	b580      	push	{r7, lr}
 800567a:	b08c      	sub	sp, #48	; 0x30
 800567c:	af00      	add	r7, sp, #0
 800567e:	60f8      	str	r0, [r7, #12]
 8005680:	60b9      	str	r1, [r7, #8]
 8005682:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005684:	2300      	movs	r3, #0
 8005686:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800568c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800568e:	2b00      	cmp	r3, #0
 8005690:	d10a      	bne.n	80056a8 <xQueueReceive+0x30>
	__asm volatile
 8005692:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005696:	f383 8811 	msr	BASEPRI, r3
 800569a:	f3bf 8f6f 	isb	sy
 800569e:	f3bf 8f4f 	dsb	sy
 80056a2:	623b      	str	r3, [r7, #32]
}
 80056a4:	bf00      	nop
 80056a6:	e7fe      	b.n	80056a6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d103      	bne.n	80056b6 <xQueueReceive+0x3e>
 80056ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d101      	bne.n	80056ba <xQueueReceive+0x42>
 80056b6:	2301      	movs	r3, #1
 80056b8:	e000      	b.n	80056bc <xQueueReceive+0x44>
 80056ba:	2300      	movs	r3, #0
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d10a      	bne.n	80056d6 <xQueueReceive+0x5e>
	__asm volatile
 80056c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c4:	f383 8811 	msr	BASEPRI, r3
 80056c8:	f3bf 8f6f 	isb	sy
 80056cc:	f3bf 8f4f 	dsb	sy
 80056d0:	61fb      	str	r3, [r7, #28]
}
 80056d2:	bf00      	nop
 80056d4:	e7fe      	b.n	80056d4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80056d6:	f001 fa67 	bl	8006ba8 <xTaskGetSchedulerState>
 80056da:	4603      	mov	r3, r0
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d102      	bne.n	80056e6 <xQueueReceive+0x6e>
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d101      	bne.n	80056ea <xQueueReceive+0x72>
 80056e6:	2301      	movs	r3, #1
 80056e8:	e000      	b.n	80056ec <xQueueReceive+0x74>
 80056ea:	2300      	movs	r3, #0
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10a      	bne.n	8005706 <xQueueReceive+0x8e>
	__asm volatile
 80056f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f4:	f383 8811 	msr	BASEPRI, r3
 80056f8:	f3bf 8f6f 	isb	sy
 80056fc:	f3bf 8f4f 	dsb	sy
 8005700:	61bb      	str	r3, [r7, #24]
}
 8005702:	bf00      	nop
 8005704:	e7fe      	b.n	8005704 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005706:	f002 facd 	bl	8007ca4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800570a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800570c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005712:	2b00      	cmp	r3, #0
 8005714:	d01f      	beq.n	8005756 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005716:	68b9      	ldr	r1, [r7, #8]
 8005718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800571a:	f000 fabe 	bl	8005c9a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800571e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005720:	1e5a      	subs	r2, r3, #1
 8005722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005724:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	2b00      	cmp	r3, #0
 800572c:	d00f      	beq.n	800574e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800572e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005730:	3310      	adds	r3, #16
 8005732:	4618      	mov	r0, r3
 8005734:	f001 f866 	bl	8006804 <xTaskRemoveFromEventList>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d007      	beq.n	800574e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800573e:	4b3d      	ldr	r3, [pc, #244]	; (8005834 <xQueueReceive+0x1bc>)
 8005740:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005744:	601a      	str	r2, [r3, #0]
 8005746:	f3bf 8f4f 	dsb	sy
 800574a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800574e:	f002 fad9 	bl	8007d04 <vPortExitCritical>
				return pdPASS;
 8005752:	2301      	movs	r3, #1
 8005754:	e069      	b.n	800582a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d103      	bne.n	8005764 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800575c:	f002 fad2 	bl	8007d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005760:	2300      	movs	r3, #0
 8005762:	e062      	b.n	800582a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005766:	2b00      	cmp	r3, #0
 8005768:	d106      	bne.n	8005778 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800576a:	f107 0310 	add.w	r3, r7, #16
 800576e:	4618      	mov	r0, r3
 8005770:	f001 f8ac 	bl	80068cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005774:	2301      	movs	r3, #1
 8005776:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005778:	f002 fac4 	bl	8007d04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800577c:	f000 fe18 	bl	80063b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005780:	f002 fa90 	bl	8007ca4 <vPortEnterCritical>
 8005784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800578a:	b25b      	sxtb	r3, r3
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005790:	d103      	bne.n	800579a <xQueueReceive+0x122>
 8005792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a0:	b25b      	sxtb	r3, r3
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a6:	d103      	bne.n	80057b0 <xQueueReceive+0x138>
 80057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b0:	f002 faa8 	bl	8007d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057b4:	1d3a      	adds	r2, r7, #4
 80057b6:	f107 0310 	add.w	r3, r7, #16
 80057ba:	4611      	mov	r1, r2
 80057bc:	4618      	mov	r0, r3
 80057be:	f001 f89b 	bl	80068f8 <xTaskCheckForTimeOut>
 80057c2:	4603      	mov	r3, r0
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d123      	bne.n	8005810 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80057c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057ca:	f000 fade 	bl	8005d8a <prvIsQueueEmpty>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d017      	beq.n	8005804 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	3324      	adds	r3, #36	; 0x24
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4611      	mov	r1, r2
 80057dc:	4618      	mov	r0, r3
 80057de:	f000 ffc1 	bl	8006764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80057e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e4:	f000 fa7f 	bl	8005ce6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80057e8:	f000 fdf0 	bl	80063cc <xTaskResumeAll>
 80057ec:	4603      	mov	r3, r0
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d189      	bne.n	8005706 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80057f2:	4b10      	ldr	r3, [pc, #64]	; (8005834 <xQueueReceive+0x1bc>)
 80057f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057f8:	601a      	str	r2, [r3, #0]
 80057fa:	f3bf 8f4f 	dsb	sy
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	e780      	b.n	8005706 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005806:	f000 fa6e 	bl	8005ce6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800580a:	f000 fddf 	bl	80063cc <xTaskResumeAll>
 800580e:	e77a      	b.n	8005706 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005810:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005812:	f000 fa68 	bl	8005ce6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005816:	f000 fdd9 	bl	80063cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800581a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800581c:	f000 fab5 	bl	8005d8a <prvIsQueueEmpty>
 8005820:	4603      	mov	r3, r0
 8005822:	2b00      	cmp	r3, #0
 8005824:	f43f af6f 	beq.w	8005706 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005828:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800582a:	4618      	mov	r0, r3
 800582c:	3730      	adds	r7, #48	; 0x30
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	e000ed04 	.word	0xe000ed04

08005838 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b08e      	sub	sp, #56	; 0x38
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005842:	2300      	movs	r3, #0
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800584a:	2300      	movs	r3, #0
 800584c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800584e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10a      	bne.n	800586a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005858:	f383 8811 	msr	BASEPRI, r3
 800585c:	f3bf 8f6f 	isb	sy
 8005860:	f3bf 8f4f 	dsb	sy
 8005864:	623b      	str	r3, [r7, #32]
}
 8005866:	bf00      	nop
 8005868:	e7fe      	b.n	8005868 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800586a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800586e:	2b00      	cmp	r3, #0
 8005870:	d00a      	beq.n	8005888 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005876:	f383 8811 	msr	BASEPRI, r3
 800587a:	f3bf 8f6f 	isb	sy
 800587e:	f3bf 8f4f 	dsb	sy
 8005882:	61fb      	str	r3, [r7, #28]
}
 8005884:	bf00      	nop
 8005886:	e7fe      	b.n	8005886 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005888:	f001 f98e 	bl	8006ba8 <xTaskGetSchedulerState>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d102      	bne.n	8005898 <xQueueSemaphoreTake+0x60>
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <xQueueSemaphoreTake+0x64>
 8005898:	2301      	movs	r3, #1
 800589a:	e000      	b.n	800589e <xQueueSemaphoreTake+0x66>
 800589c:	2300      	movs	r3, #0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d10a      	bne.n	80058b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80058a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a6:	f383 8811 	msr	BASEPRI, r3
 80058aa:	f3bf 8f6f 	isb	sy
 80058ae:	f3bf 8f4f 	dsb	sy
 80058b2:	61bb      	str	r3, [r7, #24]
}
 80058b4:	bf00      	nop
 80058b6:	e7fe      	b.n	80058b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80058b8:	f002 f9f4 	bl	8007ca4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80058bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80058c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d024      	beq.n	8005912 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	1e5a      	subs	r2, r3, #1
 80058cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d104      	bne.n	80058e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80058d8:	f001 fadc 	bl	8006e94 <pvTaskIncrementMutexHeldCount>
 80058dc:	4602      	mov	r2, r0
 80058de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80058e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d00f      	beq.n	800590a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	3310      	adds	r3, #16
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 ff88 	bl	8006804 <xTaskRemoveFromEventList>
 80058f4:	4603      	mov	r3, r0
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d007      	beq.n	800590a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80058fa:	4b54      	ldr	r3, [pc, #336]	; (8005a4c <xQueueSemaphoreTake+0x214>)
 80058fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005900:	601a      	str	r2, [r3, #0]
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800590a:	f002 f9fb 	bl	8007d04 <vPortExitCritical>
				return pdPASS;
 800590e:	2301      	movs	r3, #1
 8005910:	e097      	b.n	8005a42 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d111      	bne.n	800593c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591a:	2b00      	cmp	r3, #0
 800591c:	d00a      	beq.n	8005934 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800591e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005922:	f383 8811 	msr	BASEPRI, r3
 8005926:	f3bf 8f6f 	isb	sy
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	617b      	str	r3, [r7, #20]
}
 8005930:	bf00      	nop
 8005932:	e7fe      	b.n	8005932 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005934:	f002 f9e6 	bl	8007d04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005938:	2300      	movs	r3, #0
 800593a:	e082      	b.n	8005a42 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593e:	2b00      	cmp	r3, #0
 8005940:	d106      	bne.n	8005950 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005942:	f107 030c 	add.w	r3, r7, #12
 8005946:	4618      	mov	r0, r3
 8005948:	f000 ffc0 	bl	80068cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800594c:	2301      	movs	r3, #1
 800594e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005950:	f002 f9d8 	bl	8007d04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005954:	f000 fd2c 	bl	80063b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005958:	f002 f9a4 	bl	8007ca4 <vPortEnterCritical>
 800595c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005962:	b25b      	sxtb	r3, r3
 8005964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005968:	d103      	bne.n	8005972 <xQueueSemaphoreTake+0x13a>
 800596a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596c:	2200      	movs	r2, #0
 800596e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005972:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005974:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005978:	b25b      	sxtb	r3, r3
 800597a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800597e:	d103      	bne.n	8005988 <xQueueSemaphoreTake+0x150>
 8005980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005982:	2200      	movs	r2, #0
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005988:	f002 f9bc 	bl	8007d04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800598c:	463a      	mov	r2, r7
 800598e:	f107 030c 	add.w	r3, r7, #12
 8005992:	4611      	mov	r1, r2
 8005994:	4618      	mov	r0, r3
 8005996:	f000 ffaf 	bl	80068f8 <xTaskCheckForTimeOut>
 800599a:	4603      	mov	r3, r0
 800599c:	2b00      	cmp	r3, #0
 800599e:	d132      	bne.n	8005a06 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80059a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059a2:	f000 f9f2 	bl	8005d8a <prvIsQueueEmpty>
 80059a6:	4603      	mov	r3, r0
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d026      	beq.n	80059fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d109      	bne.n	80059c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80059b4:	f002 f976 	bl	8007ca4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	4618      	mov	r0, r3
 80059be:	f001 f911 	bl	8006be4 <xTaskPriorityInherit>
 80059c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80059c4:	f002 f99e 	bl	8007d04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80059c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ca:	3324      	adds	r3, #36	; 0x24
 80059cc:	683a      	ldr	r2, [r7, #0]
 80059ce:	4611      	mov	r1, r2
 80059d0:	4618      	mov	r0, r3
 80059d2:	f000 fec7 	bl	8006764 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80059d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059d8:	f000 f985 	bl	8005ce6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80059dc:	f000 fcf6 	bl	80063cc <xTaskResumeAll>
 80059e0:	4603      	mov	r3, r0
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	f47f af68 	bne.w	80058b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80059e8:	4b18      	ldr	r3, [pc, #96]	; (8005a4c <xQueueSemaphoreTake+0x214>)
 80059ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	f3bf 8f4f 	dsb	sy
 80059f4:	f3bf 8f6f 	isb	sy
 80059f8:	e75e      	b.n	80058b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80059fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80059fc:	f000 f973 	bl	8005ce6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005a00:	f000 fce4 	bl	80063cc <xTaskResumeAll>
 8005a04:	e758      	b.n	80058b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005a06:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a08:	f000 f96d 	bl	8005ce6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005a0c:	f000 fcde 	bl	80063cc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005a10:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a12:	f000 f9ba 	bl	8005d8a <prvIsQueueEmpty>
 8005a16:	4603      	mov	r3, r0
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	f43f af4d 	beq.w	80058b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00d      	beq.n	8005a40 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005a24:	f002 f93e 	bl	8007ca4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005a28:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005a2a:	f000 f8b4 	bl	8005b96 <prvGetDisinheritPriorityAfterTimeout>
 8005a2e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a32:	689b      	ldr	r3, [r3, #8]
 8005a34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a36:	4618      	mov	r0, r3
 8005a38:	f001 f9aa 	bl	8006d90 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005a3c:	f002 f962 	bl	8007d04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005a40:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	3738      	adds	r7, #56	; 0x38
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b08e      	sub	sp, #56	; 0x38
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	60f8      	str	r0, [r7, #12]
 8005a58:	60b9      	str	r1, [r7, #8]
 8005a5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d10a      	bne.n	8005a7c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a6a:	f383 8811 	msr	BASEPRI, r3
 8005a6e:	f3bf 8f6f 	isb	sy
 8005a72:	f3bf 8f4f 	dsb	sy
 8005a76:	623b      	str	r3, [r7, #32]
}
 8005a78:	bf00      	nop
 8005a7a:	e7fe      	b.n	8005a7a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a7c:	68bb      	ldr	r3, [r7, #8]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d103      	bne.n	8005a8a <xQueueReceiveFromISR+0x3a>
 8005a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d101      	bne.n	8005a8e <xQueueReceiveFromISR+0x3e>
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e000      	b.n	8005a90 <xQueueReceiveFromISR+0x40>
 8005a8e:	2300      	movs	r3, #0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d10a      	bne.n	8005aaa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005a94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a98:	f383 8811 	msr	BASEPRI, r3
 8005a9c:	f3bf 8f6f 	isb	sy
 8005aa0:	f3bf 8f4f 	dsb	sy
 8005aa4:	61fb      	str	r3, [r7, #28]
}
 8005aa6:	bf00      	nop
 8005aa8:	e7fe      	b.n	8005aa8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005aaa:	f002 f9dd 	bl	8007e68 <vPortValidateInterruptPriority>
	__asm volatile
 8005aae:	f3ef 8211 	mrs	r2, BASEPRI
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	61ba      	str	r2, [r7, #24]
 8005ac4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005ac6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005acc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ace:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d02f      	beq.n	8005b36 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005adc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ae0:	68b9      	ldr	r1, [r7, #8]
 8005ae2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ae4:	f000 f8d9 	bl	8005c9a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aea:	1e5a      	subs	r2, r3, #1
 8005aec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005af0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005af8:	d112      	bne.n	8005b20 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d016      	beq.n	8005b30 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b04:	3310      	adds	r3, #16
 8005b06:	4618      	mov	r0, r3
 8005b08:	f000 fe7c 	bl	8006804 <xTaskRemoveFromEventList>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d00e      	beq.n	8005b30 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d00b      	beq.n	8005b30 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
 8005b1e:	e007      	b.n	8005b30 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005b20:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005b24:	3301      	adds	r3, #1
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	b25a      	sxtb	r2, r3
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005b30:	2301      	movs	r3, #1
 8005b32:	637b      	str	r3, [r7, #52]	; 0x34
 8005b34:	e001      	b.n	8005b3a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005b36:	2300      	movs	r3, #0
 8005b38:	637b      	str	r3, [r7, #52]	; 0x34
 8005b3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b3c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005b3e:	693b      	ldr	r3, [r7, #16]
 8005b40:	f383 8811 	msr	BASEPRI, r3
}
 8005b44:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005b46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005b48:	4618      	mov	r0, r3
 8005b4a:	3738      	adds	r7, #56	; 0x38
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	bd80      	pop	{r7, pc}

08005b50 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b084      	sub	sp, #16
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d10a      	bne.n	8005b78 <vQueueDelete+0x28>
	__asm volatile
 8005b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b66:	f383 8811 	msr	BASEPRI, r3
 8005b6a:	f3bf 8f6f 	isb	sy
 8005b6e:	f3bf 8f4f 	dsb	sy
 8005b72:	60bb      	str	r3, [r7, #8]
}
 8005b74:	bf00      	nop
 8005b76:	e7fe      	b.n	8005b76 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005b78:	68f8      	ldr	r0, [r7, #12]
 8005b7a:	f000 f95f 	bl	8005e3c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d102      	bne.n	8005b8e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005b88:	68f8      	ldr	r0, [r7, #12]
 8005b8a:	f002 fa79 	bl	8008080 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8005b8e:	bf00      	nop
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005b96:	b480      	push	{r7}
 8005b98:	b085      	sub	sp, #20
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d006      	beq.n	8005bb4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005bb0:	60fb      	str	r3, [r7, #12]
 8005bb2:	e001      	b.n	8005bb8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005bb4:	2300      	movs	r3, #0
 8005bb6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
	}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bc6:	b580      	push	{r7, lr}
 8005bc8:	b086      	sub	sp, #24
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	60f8      	str	r0, [r7, #12]
 8005bce:	60b9      	str	r1, [r7, #8]
 8005bd0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10d      	bne.n	8005c00 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d14d      	bne.n	8005c88 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	689b      	ldr	r3, [r3, #8]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f001 f85f 	bl	8006cb4 <xTaskPriorityDisinherit>
 8005bf6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	609a      	str	r2, [r3, #8]
 8005bfe:	e043      	b.n	8005c88 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d119      	bne.n	8005c3a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	6858      	ldr	r0, [r3, #4]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	461a      	mov	r2, r3
 8005c10:	68b9      	ldr	r1, [r7, #8]
 8005c12:	f002 fd1e 	bl	8008652 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	685a      	ldr	r2, [r3, #4]
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1e:	441a      	add	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	685a      	ldr	r2, [r3, #4]
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d32b      	bcc.n	8005c88 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681a      	ldr	r2, [r3, #0]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	605a      	str	r2, [r3, #4]
 8005c38:	e026      	b.n	8005c88 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	68d8      	ldr	r0, [r3, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c42:	461a      	mov	r2, r3
 8005c44:	68b9      	ldr	r1, [r7, #8]
 8005c46:	f002 fd04 	bl	8008652 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c52:	425b      	negs	r3, r3
 8005c54:	441a      	add	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	429a      	cmp	r2, r3
 8005c64:	d207      	bcs.n	8005c76 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	689a      	ldr	r2, [r3, #8]
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	425b      	negs	r3, r3
 8005c70:	441a      	add	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	2b02      	cmp	r3, #2
 8005c7a:	d105      	bne.n	8005c88 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c7c:	693b      	ldr	r3, [r7, #16]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d002      	beq.n	8005c88 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	3b01      	subs	r3, #1
 8005c86:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005c90:	697b      	ldr	r3, [r7, #20]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3718      	adds	r7, #24
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005c9a:	b580      	push	{r7, lr}
 8005c9c:	b082      	sub	sp, #8
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d018      	beq.n	8005cde <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	68da      	ldr	r2, [r3, #12]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb4:	441a      	add	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68da      	ldr	r2, [r3, #12]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d303      	bcc.n	8005cce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68d9      	ldr	r1, [r3, #12]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	6838      	ldr	r0, [r7, #0]
 8005cda:	f002 fcba 	bl	8008652 <memcpy>
	}
}
 8005cde:	bf00      	nop
 8005ce0:	3708      	adds	r7, #8
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b084      	sub	sp, #16
 8005cea:	af00      	add	r7, sp, #0
 8005cec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005cee:	f001 ffd9 	bl	8007ca4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005cf8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005cfa:	e011      	b.n	8005d20 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d012      	beq.n	8005d2a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	3324      	adds	r3, #36	; 0x24
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f000 fd7b 	bl	8006804 <xTaskRemoveFromEventList>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d14:	f000 fe52 	bl	80069bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d18:	7bfb      	ldrb	r3, [r7, #15]
 8005d1a:	3b01      	subs	r3, #1
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	dce9      	bgt.n	8005cfc <prvUnlockQueue+0x16>
 8005d28:	e000      	b.n	8005d2c <prvUnlockQueue+0x46>
					break;
 8005d2a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	22ff      	movs	r2, #255	; 0xff
 8005d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d34:	f001 ffe6 	bl	8007d04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d38:	f001 ffb4 	bl	8007ca4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d42:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d44:	e011      	b.n	8005d6a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	691b      	ldr	r3, [r3, #16]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d012      	beq.n	8005d74 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	3310      	adds	r3, #16
 8005d52:	4618      	mov	r0, r3
 8005d54:	f000 fd56 	bl	8006804 <xTaskRemoveFromEventList>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d5e:	f000 fe2d 	bl	80069bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d62:	7bbb      	ldrb	r3, [r7, #14]
 8005d64:	3b01      	subs	r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d6a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	dce9      	bgt.n	8005d46 <prvUnlockQueue+0x60>
 8005d72:	e000      	b.n	8005d76 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d74:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	22ff      	movs	r2, #255	; 0xff
 8005d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d7e:	f001 ffc1 	bl	8007d04 <vPortExitCritical>
}
 8005d82:	bf00      	nop
 8005d84:	3710      	adds	r7, #16
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}

08005d8a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d8a:	b580      	push	{r7, lr}
 8005d8c:	b084      	sub	sp, #16
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005d92:	f001 ff87 	bl	8007ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d102      	bne.n	8005da4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005d9e:	2301      	movs	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]
 8005da2:	e001      	b.n	8005da8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005da4:	2300      	movs	r3, #0
 8005da6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005da8:	f001 ffac 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 8005dac:	68fb      	ldr	r3, [r7, #12]
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3710      	adds	r7, #16
 8005db2:	46bd      	mov	sp, r7
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b084      	sub	sp, #16
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dbe:	f001 ff71 	bl	8007ca4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d102      	bne.n	8005dd4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	60fb      	str	r3, [r7, #12]
 8005dd2:	e001      	b.n	8005dd8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dd8:	f001 ff94 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
}
 8005dde:	4618      	mov	r0, r3
 8005de0:	3710      	adds	r7, #16
 8005de2:	46bd      	mov	sp, r7
 8005de4:	bd80      	pop	{r7, pc}
	...

08005de8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005df2:	2300      	movs	r3, #0
 8005df4:	60fb      	str	r3, [r7, #12]
 8005df6:	e014      	b.n	8005e22 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005df8:	4a0f      	ldr	r2, [pc, #60]	; (8005e38 <vQueueAddToRegistry+0x50>)
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d10b      	bne.n	8005e1c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e04:	490c      	ldr	r1, [pc, #48]	; (8005e38 <vQueueAddToRegistry+0x50>)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	683a      	ldr	r2, [r7, #0]
 8005e0a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e0e:	4a0a      	ldr	r2, [pc, #40]	; (8005e38 <vQueueAddToRegistry+0x50>)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	00db      	lsls	r3, r3, #3
 8005e14:	4413      	add	r3, r2
 8005e16:	687a      	ldr	r2, [r7, #4]
 8005e18:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e1a:	e006      	b.n	8005e2a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3301      	adds	r3, #1
 8005e20:	60fb      	str	r3, [r7, #12]
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2b07      	cmp	r3, #7
 8005e26:	d9e7      	bls.n	8005df8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e28:	bf00      	nop
 8005e2a:	bf00      	nop
 8005e2c:	3714      	adds	r7, #20
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e34:	4770      	bx	lr
 8005e36:	bf00      	nop
 8005e38:	20000944 	.word	0x20000944

08005e3c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b085      	sub	sp, #20
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e44:	2300      	movs	r3, #0
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	e016      	b.n	8005e78 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005e4a:	4a10      	ldr	r2, [pc, #64]	; (8005e8c <vQueueUnregisterQueue+0x50>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	00db      	lsls	r3, r3, #3
 8005e50:	4413      	add	r3, r2
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	687a      	ldr	r2, [r7, #4]
 8005e56:	429a      	cmp	r2, r3
 8005e58:	d10b      	bne.n	8005e72 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005e5a:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <vQueueUnregisterQueue+0x50>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2100      	movs	r1, #0
 8005e60:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005e64:	4a09      	ldr	r2, [pc, #36]	; (8005e8c <vQueueUnregisterQueue+0x50>)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	00db      	lsls	r3, r3, #3
 8005e6a:	4413      	add	r3, r2
 8005e6c:	2200      	movs	r2, #0
 8005e6e:	605a      	str	r2, [r3, #4]
				break;
 8005e70:	e006      	b.n	8005e80 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	3301      	adds	r3, #1
 8005e76:	60fb      	str	r3, [r7, #12]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2b07      	cmp	r3, #7
 8005e7c:	d9e5      	bls.n	8005e4a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005e7e:	bf00      	nop
 8005e80:	bf00      	nop
 8005e82:	3714      	adds	r7, #20
 8005e84:	46bd      	mov	sp, r7
 8005e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8a:	4770      	bx	lr
 8005e8c:	20000944 	.word	0x20000944

08005e90 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b086      	sub	sp, #24
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005ea0:	f001 ff00 	bl	8007ca4 <vPortEnterCritical>
 8005ea4:	697b      	ldr	r3, [r7, #20]
 8005ea6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eaa:	b25b      	sxtb	r3, r3
 8005eac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005eb0:	d103      	bne.n	8005eba <vQueueWaitForMessageRestricted+0x2a>
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ec0:	b25b      	sxtb	r3, r3
 8005ec2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ec6:	d103      	bne.n	8005ed0 <vQueueWaitForMessageRestricted+0x40>
 8005ec8:	697b      	ldr	r3, [r7, #20]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ed0:	f001 ff18 	bl	8007d04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	3324      	adds	r3, #36	; 0x24
 8005ee0:	687a      	ldr	r2, [r7, #4]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	f000 fc61 	bl	80067ac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005eea:	6978      	ldr	r0, [r7, #20]
 8005eec:	f7ff fefb 	bl	8005ce6 <prvUnlockQueue>
	}
 8005ef0:	bf00      	nop
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b08e      	sub	sp, #56	; 0x38
 8005efc:	af04      	add	r7, sp, #16
 8005efe:	60f8      	str	r0, [r7, #12]
 8005f00:	60b9      	str	r1, [r7, #8]
 8005f02:	607a      	str	r2, [r7, #4]
 8005f04:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005f06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d10a      	bne.n	8005f22 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f10:	f383 8811 	msr	BASEPRI, r3
 8005f14:	f3bf 8f6f 	isb	sy
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	623b      	str	r3, [r7, #32]
}
 8005f1e:	bf00      	nop
 8005f20:	e7fe      	b.n	8005f20 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005f22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d10a      	bne.n	8005f3e <xTaskCreateStatic+0x46>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	61fb      	str	r3, [r7, #28]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005f3e:	23a8      	movs	r3, #168	; 0xa8
 8005f40:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005f42:	693b      	ldr	r3, [r7, #16]
 8005f44:	2ba8      	cmp	r3, #168	; 0xa8
 8005f46:	d00a      	beq.n	8005f5e <xTaskCreateStatic+0x66>
	__asm volatile
 8005f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4c:	f383 8811 	msr	BASEPRI, r3
 8005f50:	f3bf 8f6f 	isb	sy
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	61bb      	str	r3, [r7, #24]
}
 8005f5a:	bf00      	nop
 8005f5c:	e7fe      	b.n	8005f5c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f5e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d01e      	beq.n	8005fa4 <xTaskCreateStatic+0xac>
 8005f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d01b      	beq.n	8005fa4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f74:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f78:	2202      	movs	r2, #2
 8005f7a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f7e:	2300      	movs	r3, #0
 8005f80:	9303      	str	r3, [sp, #12]
 8005f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f84:	9302      	str	r3, [sp, #8]
 8005f86:	f107 0314 	add.w	r3, r7, #20
 8005f8a:	9301      	str	r3, [sp, #4]
 8005f8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f8e:	9300      	str	r3, [sp, #0]
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	687a      	ldr	r2, [r7, #4]
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	68f8      	ldr	r0, [r7, #12]
 8005f98:	f000 f850 	bl	800603c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f9c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f9e:	f000 f8f3 	bl	8006188 <prvAddNewTaskToReadyList>
 8005fa2:	e001      	b.n	8005fa8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005fa8:	697b      	ldr	r3, [r7, #20]
	}
 8005faa:	4618      	mov	r0, r3
 8005fac:	3728      	adds	r7, #40	; 0x28
 8005fae:	46bd      	mov	sp, r7
 8005fb0:	bd80      	pop	{r7, pc}

08005fb2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005fb2:	b580      	push	{r7, lr}
 8005fb4:	b08c      	sub	sp, #48	; 0x30
 8005fb6:	af04      	add	r7, sp, #16
 8005fb8:	60f8      	str	r0, [r7, #12]
 8005fba:	60b9      	str	r1, [r7, #8]
 8005fbc:	603b      	str	r3, [r7, #0]
 8005fbe:	4613      	mov	r3, r2
 8005fc0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005fc2:	88fb      	ldrh	r3, [r7, #6]
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4618      	mov	r0, r3
 8005fc8:	f001 ff8e 	bl	8007ee8 <pvPortMalloc>
 8005fcc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005fce:	697b      	ldr	r3, [r7, #20]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d00e      	beq.n	8005ff2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005fd4:	20a8      	movs	r0, #168	; 0xa8
 8005fd6:	f001 ff87 	bl	8007ee8 <pvPortMalloc>
 8005fda:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005fdc:	69fb      	ldr	r3, [r7, #28]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d003      	beq.n	8005fea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005fe2:	69fb      	ldr	r3, [r7, #28]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	631a      	str	r2, [r3, #48]	; 0x30
 8005fe8:	e005      	b.n	8005ff6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fea:	6978      	ldr	r0, [r7, #20]
 8005fec:	f002 f848 	bl	8008080 <vPortFree>
 8005ff0:	e001      	b.n	8005ff6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ff6:	69fb      	ldr	r3, [r7, #28]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d017      	beq.n	800602c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005ffc:	69fb      	ldr	r3, [r7, #28]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006004:	88fa      	ldrh	r2, [r7, #6]
 8006006:	2300      	movs	r3, #0
 8006008:	9303      	str	r3, [sp, #12]
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	9302      	str	r3, [sp, #8]
 800600e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006010:	9301      	str	r3, [sp, #4]
 8006012:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	68b9      	ldr	r1, [r7, #8]
 800601a:	68f8      	ldr	r0, [r7, #12]
 800601c:	f000 f80e 	bl	800603c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006020:	69f8      	ldr	r0, [r7, #28]
 8006022:	f000 f8b1 	bl	8006188 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006026:	2301      	movs	r3, #1
 8006028:	61bb      	str	r3, [r7, #24]
 800602a:	e002      	b.n	8006032 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800602c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006030:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006032:	69bb      	ldr	r3, [r7, #24]
	}
 8006034:	4618      	mov	r0, r3
 8006036:	3720      	adds	r7, #32
 8006038:	46bd      	mov	sp, r7
 800603a:	bd80      	pop	{r7, pc}

0800603c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	607a      	str	r2, [r7, #4]
 8006048:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800604a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800604c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	009b      	lsls	r3, r3, #2
 8006052:	461a      	mov	r2, r3
 8006054:	21a5      	movs	r1, #165	; 0xa5
 8006056:	f002 fa71 	bl	800853c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800605a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800605c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006064:	3b01      	subs	r3, #1
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	f023 0307 	bic.w	r3, r3, #7
 8006072:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	f003 0307 	and.w	r3, r3, #7
 800607a:	2b00      	cmp	r3, #0
 800607c:	d00a      	beq.n	8006094 <prvInitialiseNewTask+0x58>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	617b      	str	r3, [r7, #20]
}
 8006090:	bf00      	nop
 8006092:	e7fe      	b.n	8006092 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	2b00      	cmp	r3, #0
 8006098:	d01f      	beq.n	80060da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800609a:	2300      	movs	r3, #0
 800609c:	61fb      	str	r3, [r7, #28]
 800609e:	e012      	b.n	80060c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80060a0:	68ba      	ldr	r2, [r7, #8]
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	4413      	add	r3, r2
 80060a6:	7819      	ldrb	r1, [r3, #0]
 80060a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	4413      	add	r3, r2
 80060ae:	3334      	adds	r3, #52	; 0x34
 80060b0:	460a      	mov	r2, r1
 80060b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80060b4:	68ba      	ldr	r2, [r7, #8]
 80060b6:	69fb      	ldr	r3, [r7, #28]
 80060b8:	4413      	add	r3, r2
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d006      	beq.n	80060ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	3301      	adds	r3, #1
 80060c4:	61fb      	str	r3, [r7, #28]
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	2b0f      	cmp	r3, #15
 80060ca:	d9e9      	bls.n	80060a0 <prvInitialiseNewTask+0x64>
 80060cc:	e000      	b.n	80060d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80060ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80060d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d2:	2200      	movs	r2, #0
 80060d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80060d8:	e003      	b.n	80060e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	2200      	movs	r2, #0
 80060de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80060e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e4:	2b37      	cmp	r3, #55	; 0x37
 80060e6:	d901      	bls.n	80060ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060e8:	2337      	movs	r3, #55	; 0x37
 80060ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060fa:	2200      	movs	r2, #0
 80060fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006100:	3304      	adds	r3, #4
 8006102:	4618      	mov	r0, r3
 8006104:	f7fe fda0 	bl	8004c48 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	3318      	adds	r3, #24
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe fd9b 	bl	8004c48 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006116:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800611e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006120:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006122:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006124:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006126:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	2200      	movs	r2, #0
 8006134:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800613a:	3354      	adds	r3, #84	; 0x54
 800613c:	224c      	movs	r2, #76	; 0x4c
 800613e:	2100      	movs	r1, #0
 8006140:	4618      	mov	r0, r3
 8006142:	f002 f9fb 	bl	800853c <memset>
 8006146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006148:	4a0c      	ldr	r2, [pc, #48]	; (800617c <prvInitialiseNewTask+0x140>)
 800614a:	659a      	str	r2, [r3, #88]	; 0x58
 800614c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800614e:	4a0c      	ldr	r2, [pc, #48]	; (8006180 <prvInitialiseNewTask+0x144>)
 8006150:	65da      	str	r2, [r3, #92]	; 0x5c
 8006152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006154:	4a0b      	ldr	r2, [pc, #44]	; (8006184 <prvInitialiseNewTask+0x148>)
 8006156:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006158:	683a      	ldr	r2, [r7, #0]
 800615a:	68f9      	ldr	r1, [r7, #12]
 800615c:	69b8      	ldr	r0, [r7, #24]
 800615e:	f001 fc77 	bl	8007a50 <pxPortInitialiseStack>
 8006162:	4602      	mov	r2, r0
 8006164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006166:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006168:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800616a:	2b00      	cmp	r3, #0
 800616c:	d002      	beq.n	8006174 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800616e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006170:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006172:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006174:	bf00      	nop
 8006176:	3720      	adds	r7, #32
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	20004a70 	.word	0x20004a70
 8006180:	20004ad8 	.word	0x20004ad8
 8006184:	20004b40 	.word	0x20004b40

08006188 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b082      	sub	sp, #8
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006190:	f001 fd88 	bl	8007ca4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006194:	4b2d      	ldr	r3, [pc, #180]	; (800624c <prvAddNewTaskToReadyList+0xc4>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	4a2c      	ldr	r2, [pc, #176]	; (800624c <prvAddNewTaskToReadyList+0xc4>)
 800619c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800619e:	4b2c      	ldr	r3, [pc, #176]	; (8006250 <prvAddNewTaskToReadyList+0xc8>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d109      	bne.n	80061ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80061a6:	4a2a      	ldr	r2, [pc, #168]	; (8006250 <prvAddNewTaskToReadyList+0xc8>)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80061ac:	4b27      	ldr	r3, [pc, #156]	; (800624c <prvAddNewTaskToReadyList+0xc4>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	2b01      	cmp	r3, #1
 80061b2:	d110      	bne.n	80061d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80061b4:	f000 fc26 	bl	8006a04 <prvInitialiseTaskLists>
 80061b8:	e00d      	b.n	80061d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80061ba:	4b26      	ldr	r3, [pc, #152]	; (8006254 <prvAddNewTaskToReadyList+0xcc>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d109      	bne.n	80061d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80061c2:	4b23      	ldr	r3, [pc, #140]	; (8006250 <prvAddNewTaskToReadyList+0xc8>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d802      	bhi.n	80061d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80061d0:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <prvAddNewTaskToReadyList+0xc8>)
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80061d6:	4b20      	ldr	r3, [pc, #128]	; (8006258 <prvAddNewTaskToReadyList+0xd0>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	3301      	adds	r3, #1
 80061dc:	4a1e      	ldr	r2, [pc, #120]	; (8006258 <prvAddNewTaskToReadyList+0xd0>)
 80061de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80061e0:	4b1d      	ldr	r3, [pc, #116]	; (8006258 <prvAddNewTaskToReadyList+0xd0>)
 80061e2:	681a      	ldr	r2, [r3, #0]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ec:	4b1b      	ldr	r3, [pc, #108]	; (800625c <prvAddNewTaskToReadyList+0xd4>)
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	429a      	cmp	r2, r3
 80061f2:	d903      	bls.n	80061fc <prvAddNewTaskToReadyList+0x74>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061f8:	4a18      	ldr	r2, [pc, #96]	; (800625c <prvAddNewTaskToReadyList+0xd4>)
 80061fa:	6013      	str	r3, [r2, #0]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006200:	4613      	mov	r3, r2
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4a15      	ldr	r2, [pc, #84]	; (8006260 <prvAddNewTaskToReadyList+0xd8>)
 800620a:	441a      	add	r2, r3
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3304      	adds	r3, #4
 8006210:	4619      	mov	r1, r3
 8006212:	4610      	mov	r0, r2
 8006214:	f7fe fd25 	bl	8004c62 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006218:	f001 fd74 	bl	8007d04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800621c:	4b0d      	ldr	r3, [pc, #52]	; (8006254 <prvAddNewTaskToReadyList+0xcc>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d00e      	beq.n	8006242 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006224:	4b0a      	ldr	r3, [pc, #40]	; (8006250 <prvAddNewTaskToReadyList+0xc8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	429a      	cmp	r2, r3
 8006230:	d207      	bcs.n	8006242 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006232:	4b0c      	ldr	r3, [pc, #48]	; (8006264 <prvAddNewTaskToReadyList+0xdc>)
 8006234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006238:	601a      	str	r2, [r3, #0]
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006242:	bf00      	nop
 8006244:	3708      	adds	r7, #8
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
 800624a:	bf00      	nop
 800624c:	20000e58 	.word	0x20000e58
 8006250:	20000984 	.word	0x20000984
 8006254:	20000e64 	.word	0x20000e64
 8006258:	20000e74 	.word	0x20000e74
 800625c:	20000e60 	.word	0x20000e60
 8006260:	20000988 	.word	0x20000988
 8006264:	e000ed04 	.word	0xe000ed04

08006268 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006270:	2300      	movs	r3, #0
 8006272:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d017      	beq.n	80062aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800627a:	4b13      	ldr	r3, [pc, #76]	; (80062c8 <vTaskDelay+0x60>)
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d00a      	beq.n	8006298 <vTaskDelay+0x30>
	__asm volatile
 8006282:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006286:	f383 8811 	msr	BASEPRI, r3
 800628a:	f3bf 8f6f 	isb	sy
 800628e:	f3bf 8f4f 	dsb	sy
 8006292:	60bb      	str	r3, [r7, #8]
}
 8006294:	bf00      	nop
 8006296:	e7fe      	b.n	8006296 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006298:	f000 f88a 	bl	80063b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800629c:	2100      	movs	r1, #0
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f000 ff50 	bl	8007144 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80062a4:	f000 f892 	bl	80063cc <xTaskResumeAll>
 80062a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d107      	bne.n	80062c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80062b0:	4b06      	ldr	r3, [pc, #24]	; (80062cc <vTaskDelay+0x64>)
 80062b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062b6:	601a      	str	r2, [r3, #0]
 80062b8:	f3bf 8f4f 	dsb	sy
 80062bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80062c0:	bf00      	nop
 80062c2:	3710      	adds	r7, #16
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	20000e80 	.word	0x20000e80
 80062cc:	e000ed04 	.word	0xe000ed04

080062d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08a      	sub	sp, #40	; 0x28
 80062d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80062de:	463a      	mov	r2, r7
 80062e0:	1d39      	adds	r1, r7, #4
 80062e2:	f107 0308 	add.w	r3, r7, #8
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fc5a 	bl	8004ba0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062ec:	6839      	ldr	r1, [r7, #0]
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	68ba      	ldr	r2, [r7, #8]
 80062f2:	9202      	str	r2, [sp, #8]
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	2300      	movs	r3, #0
 80062f8:	9300      	str	r3, [sp, #0]
 80062fa:	2300      	movs	r3, #0
 80062fc:	460a      	mov	r2, r1
 80062fe:	4924      	ldr	r1, [pc, #144]	; (8006390 <vTaskStartScheduler+0xc0>)
 8006300:	4824      	ldr	r0, [pc, #144]	; (8006394 <vTaskStartScheduler+0xc4>)
 8006302:	f7ff fdf9 	bl	8005ef8 <xTaskCreateStatic>
 8006306:	4603      	mov	r3, r0
 8006308:	4a23      	ldr	r2, [pc, #140]	; (8006398 <vTaskStartScheduler+0xc8>)
 800630a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800630c:	4b22      	ldr	r3, [pc, #136]	; (8006398 <vTaskStartScheduler+0xc8>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006314:	2301      	movs	r3, #1
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	e001      	b.n	800631e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800631a:	2300      	movs	r3, #0
 800631c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800631e:	697b      	ldr	r3, [r7, #20]
 8006320:	2b01      	cmp	r3, #1
 8006322:	d102      	bne.n	800632a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006324:	f000 ff62 	bl	80071ec <xTimerCreateTimerTask>
 8006328:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d11b      	bne.n	8006368 <vTaskStartScheduler+0x98>
	__asm volatile
 8006330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006334:	f383 8811 	msr	BASEPRI, r3
 8006338:	f3bf 8f6f 	isb	sy
 800633c:	f3bf 8f4f 	dsb	sy
 8006340:	613b      	str	r3, [r7, #16]
}
 8006342:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006344:	4b15      	ldr	r3, [pc, #84]	; (800639c <vTaskStartScheduler+0xcc>)
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	3354      	adds	r3, #84	; 0x54
 800634a:	4a15      	ldr	r2, [pc, #84]	; (80063a0 <vTaskStartScheduler+0xd0>)
 800634c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800634e:	4b15      	ldr	r3, [pc, #84]	; (80063a4 <vTaskStartScheduler+0xd4>)
 8006350:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006354:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006356:	4b14      	ldr	r3, [pc, #80]	; (80063a8 <vTaskStartScheduler+0xd8>)
 8006358:	2201      	movs	r2, #1
 800635a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800635c:	4b13      	ldr	r3, [pc, #76]	; (80063ac <vTaskStartScheduler+0xdc>)
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006362:	f001 fbfd 	bl	8007b60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006366:	e00e      	b.n	8006386 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006368:	697b      	ldr	r3, [r7, #20]
 800636a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800636e:	d10a      	bne.n	8006386 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	60fb      	str	r3, [r7, #12]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <vTaskStartScheduler+0xb4>
}
 8006386:	bf00      	nop
 8006388:	3718      	adds	r7, #24
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	080094ec 	.word	0x080094ec
 8006394:	080069d5 	.word	0x080069d5
 8006398:	20000e7c 	.word	0x20000e7c
 800639c:	20000984 	.word	0x20000984
 80063a0:	2000006c 	.word	0x2000006c
 80063a4:	20000e78 	.word	0x20000e78
 80063a8:	20000e64 	.word	0x20000e64
 80063ac:	20000e5c 	.word	0x20000e5c

080063b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80063b0:	b480      	push	{r7}
 80063b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80063b4:	4b04      	ldr	r3, [pc, #16]	; (80063c8 <vTaskSuspendAll+0x18>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	3301      	adds	r3, #1
 80063ba:	4a03      	ldr	r2, [pc, #12]	; (80063c8 <vTaskSuspendAll+0x18>)
 80063bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80063be:	bf00      	nop
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr
 80063c8:	20000e80 	.word	0x20000e80

080063cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80063d6:	2300      	movs	r3, #0
 80063d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80063da:	4b42      	ldr	r3, [pc, #264]	; (80064e4 <xTaskResumeAll+0x118>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d10a      	bne.n	80063f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80063e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063e6:	f383 8811 	msr	BASEPRI, r3
 80063ea:	f3bf 8f6f 	isb	sy
 80063ee:	f3bf 8f4f 	dsb	sy
 80063f2:	603b      	str	r3, [r7, #0]
}
 80063f4:	bf00      	nop
 80063f6:	e7fe      	b.n	80063f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063f8:	f001 fc54 	bl	8007ca4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063fc:	4b39      	ldr	r3, [pc, #228]	; (80064e4 <xTaskResumeAll+0x118>)
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	3b01      	subs	r3, #1
 8006402:	4a38      	ldr	r2, [pc, #224]	; (80064e4 <xTaskResumeAll+0x118>)
 8006404:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006406:	4b37      	ldr	r3, [pc, #220]	; (80064e4 <xTaskResumeAll+0x118>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d162      	bne.n	80064d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800640e:	4b36      	ldr	r3, [pc, #216]	; (80064e8 <xTaskResumeAll+0x11c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d05e      	beq.n	80064d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006416:	e02f      	b.n	8006478 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006418:	4b34      	ldr	r3, [pc, #208]	; (80064ec <xTaskResumeAll+0x120>)
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	68db      	ldr	r3, [r3, #12]
 800641e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	3318      	adds	r3, #24
 8006424:	4618      	mov	r0, r3
 8006426:	f7fe fc79 	bl	8004d1c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	3304      	adds	r3, #4
 800642e:	4618      	mov	r0, r3
 8006430:	f7fe fc74 	bl	8004d1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006438:	4b2d      	ldr	r3, [pc, #180]	; (80064f0 <xTaskResumeAll+0x124>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	429a      	cmp	r2, r3
 800643e:	d903      	bls.n	8006448 <xTaskResumeAll+0x7c>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006444:	4a2a      	ldr	r2, [pc, #168]	; (80064f0 <xTaskResumeAll+0x124>)
 8006446:	6013      	str	r3, [r2, #0]
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800644c:	4613      	mov	r3, r2
 800644e:	009b      	lsls	r3, r3, #2
 8006450:	4413      	add	r3, r2
 8006452:	009b      	lsls	r3, r3, #2
 8006454:	4a27      	ldr	r2, [pc, #156]	; (80064f4 <xTaskResumeAll+0x128>)
 8006456:	441a      	add	r2, r3
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	3304      	adds	r3, #4
 800645c:	4619      	mov	r1, r3
 800645e:	4610      	mov	r0, r2
 8006460:	f7fe fbff 	bl	8004c62 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006468:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <xTaskResumeAll+0x12c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800646e:	429a      	cmp	r2, r3
 8006470:	d302      	bcc.n	8006478 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006472:	4b22      	ldr	r3, [pc, #136]	; (80064fc <xTaskResumeAll+0x130>)
 8006474:	2201      	movs	r2, #1
 8006476:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006478:	4b1c      	ldr	r3, [pc, #112]	; (80064ec <xTaskResumeAll+0x120>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1cb      	bne.n	8006418 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006486:	f000 fb5f 	bl	8006b48 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800648a:	4b1d      	ldr	r3, [pc, #116]	; (8006500 <xTaskResumeAll+0x134>)
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d010      	beq.n	80064b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006496:	f000 f847 	bl	8006528 <xTaskIncrementTick>
 800649a:	4603      	mov	r3, r0
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80064a0:	4b16      	ldr	r3, [pc, #88]	; (80064fc <xTaskResumeAll+0x130>)
 80064a2:	2201      	movs	r2, #1
 80064a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3b01      	subs	r3, #1
 80064aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d1f1      	bne.n	8006496 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80064b2:	4b13      	ldr	r3, [pc, #76]	; (8006500 <xTaskResumeAll+0x134>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80064b8:	4b10      	ldr	r3, [pc, #64]	; (80064fc <xTaskResumeAll+0x130>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d009      	beq.n	80064d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80064c0:	2301      	movs	r3, #1
 80064c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80064c4:	4b0f      	ldr	r3, [pc, #60]	; (8006504 <xTaskResumeAll+0x138>)
 80064c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ca:	601a      	str	r2, [r3, #0]
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80064d4:	f001 fc16 	bl	8007d04 <vPortExitCritical>

	return xAlreadyYielded;
 80064d8:	68bb      	ldr	r3, [r7, #8]
}
 80064da:	4618      	mov	r0, r3
 80064dc:	3710      	adds	r7, #16
 80064de:	46bd      	mov	sp, r7
 80064e0:	bd80      	pop	{r7, pc}
 80064e2:	bf00      	nop
 80064e4:	20000e80 	.word	0x20000e80
 80064e8:	20000e58 	.word	0x20000e58
 80064ec:	20000e18 	.word	0x20000e18
 80064f0:	20000e60 	.word	0x20000e60
 80064f4:	20000988 	.word	0x20000988
 80064f8:	20000984 	.word	0x20000984
 80064fc:	20000e6c 	.word	0x20000e6c
 8006500:	20000e68 	.word	0x20000e68
 8006504:	e000ed04 	.word	0xe000ed04

08006508 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800650e:	4b05      	ldr	r3, [pc, #20]	; (8006524 <xTaskGetTickCount+0x1c>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006514:	687b      	ldr	r3, [r7, #4]
}
 8006516:	4618      	mov	r0, r3
 8006518:	370c      	adds	r7, #12
 800651a:	46bd      	mov	sp, r7
 800651c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006520:	4770      	bx	lr
 8006522:	bf00      	nop
 8006524:	20000e5c 	.word	0x20000e5c

08006528 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006532:	4b4f      	ldr	r3, [pc, #316]	; (8006670 <xTaskIncrementTick+0x148>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	f040 808f 	bne.w	800665a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800653c:	4b4d      	ldr	r3, [pc, #308]	; (8006674 <xTaskIncrementTick+0x14c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	3301      	adds	r3, #1
 8006542:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006544:	4a4b      	ldr	r2, [pc, #300]	; (8006674 <xTaskIncrementTick+0x14c>)
 8006546:	693b      	ldr	r3, [r7, #16]
 8006548:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	2b00      	cmp	r3, #0
 800654e:	d120      	bne.n	8006592 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006550:	4b49      	ldr	r3, [pc, #292]	; (8006678 <xTaskIncrementTick+0x150>)
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <xTaskIncrementTick+0x48>
	__asm volatile
 800655a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800655e:	f383 8811 	msr	BASEPRI, r3
 8006562:	f3bf 8f6f 	isb	sy
 8006566:	f3bf 8f4f 	dsb	sy
 800656a:	603b      	str	r3, [r7, #0]
}
 800656c:	bf00      	nop
 800656e:	e7fe      	b.n	800656e <xTaskIncrementTick+0x46>
 8006570:	4b41      	ldr	r3, [pc, #260]	; (8006678 <xTaskIncrementTick+0x150>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	60fb      	str	r3, [r7, #12]
 8006576:	4b41      	ldr	r3, [pc, #260]	; (800667c <xTaskIncrementTick+0x154>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4a3f      	ldr	r2, [pc, #252]	; (8006678 <xTaskIncrementTick+0x150>)
 800657c:	6013      	str	r3, [r2, #0]
 800657e:	4a3f      	ldr	r2, [pc, #252]	; (800667c <xTaskIncrementTick+0x154>)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	6013      	str	r3, [r2, #0]
 8006584:	4b3e      	ldr	r3, [pc, #248]	; (8006680 <xTaskIncrementTick+0x158>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	3301      	adds	r3, #1
 800658a:	4a3d      	ldr	r2, [pc, #244]	; (8006680 <xTaskIncrementTick+0x158>)
 800658c:	6013      	str	r3, [r2, #0]
 800658e:	f000 fadb 	bl	8006b48 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006592:	4b3c      	ldr	r3, [pc, #240]	; (8006684 <xTaskIncrementTick+0x15c>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	693a      	ldr	r2, [r7, #16]
 8006598:	429a      	cmp	r2, r3
 800659a:	d349      	bcc.n	8006630 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800659c:	4b36      	ldr	r3, [pc, #216]	; (8006678 <xTaskIncrementTick+0x150>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d104      	bne.n	80065b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065a6:	4b37      	ldr	r3, [pc, #220]	; (8006684 <xTaskIncrementTick+0x15c>)
 80065a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80065ac:	601a      	str	r2, [r3, #0]
					break;
 80065ae:	e03f      	b.n	8006630 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065b0:	4b31      	ldr	r3, [pc, #196]	; (8006678 <xTaskIncrementTick+0x150>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	68db      	ldr	r3, [r3, #12]
 80065b6:	68db      	ldr	r3, [r3, #12]
 80065b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80065c0:	693a      	ldr	r2, [r7, #16]
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	d203      	bcs.n	80065d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80065c8:	4a2e      	ldr	r2, [pc, #184]	; (8006684 <xTaskIncrementTick+0x15c>)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80065ce:	e02f      	b.n	8006630 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4618      	mov	r0, r3
 80065d6:	f7fe fba1 	bl	8004d1c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d004      	beq.n	80065ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	3318      	adds	r3, #24
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fb98 	bl	8004d1c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f0:	4b25      	ldr	r3, [pc, #148]	; (8006688 <xTaskIncrementTick+0x160>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d903      	bls.n	8006600 <xTaskIncrementTick+0xd8>
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4a22      	ldr	r2, [pc, #136]	; (8006688 <xTaskIncrementTick+0x160>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	68bb      	ldr	r3, [r7, #8]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4a1f      	ldr	r2, [pc, #124]	; (800668c <xTaskIncrementTick+0x164>)
 800660e:	441a      	add	r2, r3
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f7fe fb23 	bl	8004c62 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006620:	4b1b      	ldr	r3, [pc, #108]	; (8006690 <xTaskIncrementTick+0x168>)
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006626:	429a      	cmp	r2, r3
 8006628:	d3b8      	bcc.n	800659c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800662a:	2301      	movs	r3, #1
 800662c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800662e:	e7b5      	b.n	800659c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006630:	4b17      	ldr	r3, [pc, #92]	; (8006690 <xTaskIncrementTick+0x168>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006636:	4915      	ldr	r1, [pc, #84]	; (800668c <xTaskIncrementTick+0x164>)
 8006638:	4613      	mov	r3, r2
 800663a:	009b      	lsls	r3, r3, #2
 800663c:	4413      	add	r3, r2
 800663e:	009b      	lsls	r3, r3, #2
 8006640:	440b      	add	r3, r1
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d901      	bls.n	800664c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006648:	2301      	movs	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800664c:	4b11      	ldr	r3, [pc, #68]	; (8006694 <xTaskIncrementTick+0x16c>)
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	2b00      	cmp	r3, #0
 8006652:	d007      	beq.n	8006664 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006654:	2301      	movs	r3, #1
 8006656:	617b      	str	r3, [r7, #20]
 8006658:	e004      	b.n	8006664 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800665a:	4b0f      	ldr	r3, [pc, #60]	; (8006698 <xTaskIncrementTick+0x170>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	4a0d      	ldr	r2, [pc, #52]	; (8006698 <xTaskIncrementTick+0x170>)
 8006662:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006664:	697b      	ldr	r3, [r7, #20]
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	20000e80 	.word	0x20000e80
 8006674:	20000e5c 	.word	0x20000e5c
 8006678:	20000e10 	.word	0x20000e10
 800667c:	20000e14 	.word	0x20000e14
 8006680:	20000e70 	.word	0x20000e70
 8006684:	20000e78 	.word	0x20000e78
 8006688:	20000e60 	.word	0x20000e60
 800668c:	20000988 	.word	0x20000988
 8006690:	20000984 	.word	0x20000984
 8006694:	20000e6c 	.word	0x20000e6c
 8006698:	20000e68 	.word	0x20000e68

0800669c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800669c:	b480      	push	{r7}
 800669e:	b085      	sub	sp, #20
 80066a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80066a2:	4b2a      	ldr	r3, [pc, #168]	; (800674c <vTaskSwitchContext+0xb0>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d003      	beq.n	80066b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80066aa:	4b29      	ldr	r3, [pc, #164]	; (8006750 <vTaskSwitchContext+0xb4>)
 80066ac:	2201      	movs	r2, #1
 80066ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80066b0:	e046      	b.n	8006740 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80066b2:	4b27      	ldr	r3, [pc, #156]	; (8006750 <vTaskSwitchContext+0xb4>)
 80066b4:	2200      	movs	r2, #0
 80066b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066b8:	4b26      	ldr	r3, [pc, #152]	; (8006754 <vTaskSwitchContext+0xb8>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	60fb      	str	r3, [r7, #12]
 80066be:	e010      	b.n	80066e2 <vTaskSwitchContext+0x46>
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d10a      	bne.n	80066dc <vTaskSwitchContext+0x40>
	__asm volatile
 80066c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ca:	f383 8811 	msr	BASEPRI, r3
 80066ce:	f3bf 8f6f 	isb	sy
 80066d2:	f3bf 8f4f 	dsb	sy
 80066d6:	607b      	str	r3, [r7, #4]
}
 80066d8:	bf00      	nop
 80066da:	e7fe      	b.n	80066da <vTaskSwitchContext+0x3e>
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	3b01      	subs	r3, #1
 80066e0:	60fb      	str	r3, [r7, #12]
 80066e2:	491d      	ldr	r1, [pc, #116]	; (8006758 <vTaskSwitchContext+0xbc>)
 80066e4:	68fa      	ldr	r2, [r7, #12]
 80066e6:	4613      	mov	r3, r2
 80066e8:	009b      	lsls	r3, r3, #2
 80066ea:	4413      	add	r3, r2
 80066ec:	009b      	lsls	r3, r3, #2
 80066ee:	440b      	add	r3, r1
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d0e4      	beq.n	80066c0 <vTaskSwitchContext+0x24>
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	4613      	mov	r3, r2
 80066fa:	009b      	lsls	r3, r3, #2
 80066fc:	4413      	add	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4a15      	ldr	r2, [pc, #84]	; (8006758 <vTaskSwitchContext+0xbc>)
 8006702:	4413      	add	r3, r2
 8006704:	60bb      	str	r3, [r7, #8]
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	685a      	ldr	r2, [r3, #4]
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	605a      	str	r2, [r3, #4]
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	685a      	ldr	r2, [r3, #4]
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	3308      	adds	r3, #8
 8006718:	429a      	cmp	r2, r3
 800671a:	d104      	bne.n	8006726 <vTaskSwitchContext+0x8a>
 800671c:	68bb      	ldr	r3, [r7, #8]
 800671e:	685b      	ldr	r3, [r3, #4]
 8006720:	685a      	ldr	r2, [r3, #4]
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	605a      	str	r2, [r3, #4]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	68db      	ldr	r3, [r3, #12]
 800672c:	4a0b      	ldr	r2, [pc, #44]	; (800675c <vTaskSwitchContext+0xc0>)
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	4a08      	ldr	r2, [pc, #32]	; (8006754 <vTaskSwitchContext+0xb8>)
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006736:	4b09      	ldr	r3, [pc, #36]	; (800675c <vTaskSwitchContext+0xc0>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	3354      	adds	r3, #84	; 0x54
 800673c:	4a08      	ldr	r2, [pc, #32]	; (8006760 <vTaskSwitchContext+0xc4>)
 800673e:	6013      	str	r3, [r2, #0]
}
 8006740:	bf00      	nop
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	20000e80 	.word	0x20000e80
 8006750:	20000e6c 	.word	0x20000e6c
 8006754:	20000e60 	.word	0x20000e60
 8006758:	20000988 	.word	0x20000988
 800675c:	20000984 	.word	0x20000984
 8006760:	2000006c 	.word	0x2000006c

08006764 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d10a      	bne.n	800678a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006774:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006778:	f383 8811 	msr	BASEPRI, r3
 800677c:	f3bf 8f6f 	isb	sy
 8006780:	f3bf 8f4f 	dsb	sy
 8006784:	60fb      	str	r3, [r7, #12]
}
 8006786:	bf00      	nop
 8006788:	e7fe      	b.n	8006788 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800678a:	4b07      	ldr	r3, [pc, #28]	; (80067a8 <vTaskPlaceOnEventList+0x44>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3318      	adds	r3, #24
 8006790:	4619      	mov	r1, r3
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7fe fa89 	bl	8004caa <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006798:	2101      	movs	r1, #1
 800679a:	6838      	ldr	r0, [r7, #0]
 800679c:	f000 fcd2 	bl	8007144 <prvAddCurrentTaskToDelayedList>
}
 80067a0:	bf00      	nop
 80067a2:	3710      	adds	r7, #16
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}
 80067a8:	20000984 	.word	0x20000984

080067ac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b086      	sub	sp, #24
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d10a      	bne.n	80067d4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80067be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c2:	f383 8811 	msr	BASEPRI, r3
 80067c6:	f3bf 8f6f 	isb	sy
 80067ca:	f3bf 8f4f 	dsb	sy
 80067ce:	617b      	str	r3, [r7, #20]
}
 80067d0:	bf00      	nop
 80067d2:	e7fe      	b.n	80067d2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <vTaskPlaceOnEventListRestricted+0x54>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3318      	adds	r3, #24
 80067da:	4619      	mov	r1, r3
 80067dc:	68f8      	ldr	r0, [r7, #12]
 80067de:	f7fe fa40 	bl	8004c62 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d002      	beq.n	80067ee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80067ec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067ee:	6879      	ldr	r1, [r7, #4]
 80067f0:	68b8      	ldr	r0, [r7, #8]
 80067f2:	f000 fca7 	bl	8007144 <prvAddCurrentTaskToDelayedList>
	}
 80067f6:	bf00      	nop
 80067f8:	3718      	adds	r7, #24
 80067fa:	46bd      	mov	sp, r7
 80067fc:	bd80      	pop	{r7, pc}
 80067fe:	bf00      	nop
 8006800:	20000984 	.word	0x20000984

08006804 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b086      	sub	sp, #24
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	68db      	ldr	r3, [r3, #12]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d10a      	bne.n	8006830 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	60fb      	str	r3, [r7, #12]
}
 800682c:	bf00      	nop
 800682e:	e7fe      	b.n	800682e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	3318      	adds	r3, #24
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe fa71 	bl	8004d1c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800683a:	4b1e      	ldr	r3, [pc, #120]	; (80068b4 <xTaskRemoveFromEventList+0xb0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d11d      	bne.n	800687e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	3304      	adds	r3, #4
 8006846:	4618      	mov	r0, r3
 8006848:	f7fe fa68 	bl	8004d1c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800684c:	693b      	ldr	r3, [r7, #16]
 800684e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006850:	4b19      	ldr	r3, [pc, #100]	; (80068b8 <xTaskRemoveFromEventList+0xb4>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	429a      	cmp	r2, r3
 8006856:	d903      	bls.n	8006860 <xTaskRemoveFromEventList+0x5c>
 8006858:	693b      	ldr	r3, [r7, #16]
 800685a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685c:	4a16      	ldr	r2, [pc, #88]	; (80068b8 <xTaskRemoveFromEventList+0xb4>)
 800685e:	6013      	str	r3, [r2, #0]
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006864:	4613      	mov	r3, r2
 8006866:	009b      	lsls	r3, r3, #2
 8006868:	4413      	add	r3, r2
 800686a:	009b      	lsls	r3, r3, #2
 800686c:	4a13      	ldr	r2, [pc, #76]	; (80068bc <xTaskRemoveFromEventList+0xb8>)
 800686e:	441a      	add	r2, r3
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	3304      	adds	r3, #4
 8006874:	4619      	mov	r1, r3
 8006876:	4610      	mov	r0, r2
 8006878:	f7fe f9f3 	bl	8004c62 <vListInsertEnd>
 800687c:	e005      	b.n	800688a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800687e:	693b      	ldr	r3, [r7, #16]
 8006880:	3318      	adds	r3, #24
 8006882:	4619      	mov	r1, r3
 8006884:	480e      	ldr	r0, [pc, #56]	; (80068c0 <xTaskRemoveFromEventList+0xbc>)
 8006886:	f7fe f9ec 	bl	8004c62 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800688e:	4b0d      	ldr	r3, [pc, #52]	; (80068c4 <xTaskRemoveFromEventList+0xc0>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	429a      	cmp	r2, r3
 8006896:	d905      	bls.n	80068a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006898:	2301      	movs	r3, #1
 800689a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800689c:	4b0a      	ldr	r3, [pc, #40]	; (80068c8 <xTaskRemoveFromEventList+0xc4>)
 800689e:	2201      	movs	r2, #1
 80068a0:	601a      	str	r2, [r3, #0]
 80068a2:	e001      	b.n	80068a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80068a4:	2300      	movs	r3, #0
 80068a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80068a8:	697b      	ldr	r3, [r7, #20]
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3718      	adds	r7, #24
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
 80068b2:	bf00      	nop
 80068b4:	20000e80 	.word	0x20000e80
 80068b8:	20000e60 	.word	0x20000e60
 80068bc:	20000988 	.word	0x20000988
 80068c0:	20000e18 	.word	0x20000e18
 80068c4:	20000984 	.word	0x20000984
 80068c8:	20000e6c 	.word	0x20000e6c

080068cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80068cc:	b480      	push	{r7}
 80068ce:	b083      	sub	sp, #12
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80068d4:	4b06      	ldr	r3, [pc, #24]	; (80068f0 <vTaskInternalSetTimeOutState+0x24>)
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80068dc:	4b05      	ldr	r3, [pc, #20]	; (80068f4 <vTaskInternalSetTimeOutState+0x28>)
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	605a      	str	r2, [r3, #4]
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	20000e70 	.word	0x20000e70
 80068f4:	20000e5c 	.word	0x20000e5c

080068f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068f8:	b580      	push	{r7, lr}
 80068fa:	b088      	sub	sp, #32
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d10a      	bne.n	800691e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800690c:	f383 8811 	msr	BASEPRI, r3
 8006910:	f3bf 8f6f 	isb	sy
 8006914:	f3bf 8f4f 	dsb	sy
 8006918:	613b      	str	r3, [r7, #16]
}
 800691a:	bf00      	nop
 800691c:	e7fe      	b.n	800691c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10a      	bne.n	800693a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	60fb      	str	r3, [r7, #12]
}
 8006936:	bf00      	nop
 8006938:	e7fe      	b.n	8006938 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800693a:	f001 f9b3 	bl	8007ca4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800693e:	4b1d      	ldr	r3, [pc, #116]	; (80069b4 <xTaskCheckForTimeOut+0xbc>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	69ba      	ldr	r2, [r7, #24]
 800694a:	1ad3      	subs	r3, r2, r3
 800694c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006956:	d102      	bne.n	800695e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006958:	2300      	movs	r3, #0
 800695a:	61fb      	str	r3, [r7, #28]
 800695c:	e023      	b.n	80069a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	4b15      	ldr	r3, [pc, #84]	; (80069b8 <xTaskCheckForTimeOut+0xc0>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d007      	beq.n	800697a <xTaskCheckForTimeOut+0x82>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	685b      	ldr	r3, [r3, #4]
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	429a      	cmp	r2, r3
 8006972:	d302      	bcc.n	800697a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006974:	2301      	movs	r3, #1
 8006976:	61fb      	str	r3, [r7, #28]
 8006978:	e015      	b.n	80069a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800697a:	683b      	ldr	r3, [r7, #0]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	697a      	ldr	r2, [r7, #20]
 8006980:	429a      	cmp	r2, r3
 8006982:	d20b      	bcs.n	800699c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	681a      	ldr	r2, [r3, #0]
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	1ad2      	subs	r2, r2, r3
 800698c:	683b      	ldr	r3, [r7, #0]
 800698e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff ff9b 	bl	80068cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006996:	2300      	movs	r3, #0
 8006998:	61fb      	str	r3, [r7, #28]
 800699a:	e004      	b.n	80069a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2200      	movs	r2, #0
 80069a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80069a2:	2301      	movs	r3, #1
 80069a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80069a6:	f001 f9ad 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 80069aa:	69fb      	ldr	r3, [r7, #28]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3720      	adds	r7, #32
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}
 80069b4:	20000e5c 	.word	0x20000e5c
 80069b8:	20000e70 	.word	0x20000e70

080069bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80069bc:	b480      	push	{r7}
 80069be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80069c0:	4b03      	ldr	r3, [pc, #12]	; (80069d0 <vTaskMissedYield+0x14>)
 80069c2:	2201      	movs	r2, #1
 80069c4:	601a      	str	r2, [r3, #0]
}
 80069c6:	bf00      	nop
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr
 80069d0:	20000e6c 	.word	0x20000e6c

080069d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80069dc:	f000 f852 	bl	8006a84 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80069e0:	4b06      	ldr	r3, [pc, #24]	; (80069fc <prvIdleTask+0x28>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	2b01      	cmp	r3, #1
 80069e6:	d9f9      	bls.n	80069dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80069e8:	4b05      	ldr	r3, [pc, #20]	; (8006a00 <prvIdleTask+0x2c>)
 80069ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ee:	601a      	str	r2, [r3, #0]
 80069f0:	f3bf 8f4f 	dsb	sy
 80069f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069f8:	e7f0      	b.n	80069dc <prvIdleTask+0x8>
 80069fa:	bf00      	nop
 80069fc:	20000988 	.word	0x20000988
 8006a00:	e000ed04 	.word	0xe000ed04

08006a04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b082      	sub	sp, #8
 8006a08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a0a:	2300      	movs	r3, #0
 8006a0c:	607b      	str	r3, [r7, #4]
 8006a0e:	e00c      	b.n	8006a2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	4613      	mov	r3, r2
 8006a14:	009b      	lsls	r3, r3, #2
 8006a16:	4413      	add	r3, r2
 8006a18:	009b      	lsls	r3, r3, #2
 8006a1a:	4a12      	ldr	r2, [pc, #72]	; (8006a64 <prvInitialiseTaskLists+0x60>)
 8006a1c:	4413      	add	r3, r2
 8006a1e:	4618      	mov	r0, r3
 8006a20:	f7fe f8f2 	bl	8004c08 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	3301      	adds	r3, #1
 8006a28:	607b      	str	r3, [r7, #4]
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	2b37      	cmp	r3, #55	; 0x37
 8006a2e:	d9ef      	bls.n	8006a10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006a30:	480d      	ldr	r0, [pc, #52]	; (8006a68 <prvInitialiseTaskLists+0x64>)
 8006a32:	f7fe f8e9 	bl	8004c08 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006a36:	480d      	ldr	r0, [pc, #52]	; (8006a6c <prvInitialiseTaskLists+0x68>)
 8006a38:	f7fe f8e6 	bl	8004c08 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006a3c:	480c      	ldr	r0, [pc, #48]	; (8006a70 <prvInitialiseTaskLists+0x6c>)
 8006a3e:	f7fe f8e3 	bl	8004c08 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006a42:	480c      	ldr	r0, [pc, #48]	; (8006a74 <prvInitialiseTaskLists+0x70>)
 8006a44:	f7fe f8e0 	bl	8004c08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a48:	480b      	ldr	r0, [pc, #44]	; (8006a78 <prvInitialiseTaskLists+0x74>)
 8006a4a:	f7fe f8dd 	bl	8004c08 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a4e:	4b0b      	ldr	r3, [pc, #44]	; (8006a7c <prvInitialiseTaskLists+0x78>)
 8006a50:	4a05      	ldr	r2, [pc, #20]	; (8006a68 <prvInitialiseTaskLists+0x64>)
 8006a52:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a54:	4b0a      	ldr	r3, [pc, #40]	; (8006a80 <prvInitialiseTaskLists+0x7c>)
 8006a56:	4a05      	ldr	r2, [pc, #20]	; (8006a6c <prvInitialiseTaskLists+0x68>)
 8006a58:	601a      	str	r2, [r3, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	3708      	adds	r7, #8
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	bd80      	pop	{r7, pc}
 8006a62:	bf00      	nop
 8006a64:	20000988 	.word	0x20000988
 8006a68:	20000de8 	.word	0x20000de8
 8006a6c:	20000dfc 	.word	0x20000dfc
 8006a70:	20000e18 	.word	0x20000e18
 8006a74:	20000e2c 	.word	0x20000e2c
 8006a78:	20000e44 	.word	0x20000e44
 8006a7c:	20000e10 	.word	0x20000e10
 8006a80:	20000e14 	.word	0x20000e14

08006a84 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a8a:	e019      	b.n	8006ac0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a8c:	f001 f90a 	bl	8007ca4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a90:	4b10      	ldr	r3, [pc, #64]	; (8006ad4 <prvCheckTasksWaitingTermination+0x50>)
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	68db      	ldr	r3, [r3, #12]
 8006a96:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	3304      	adds	r3, #4
 8006a9c:	4618      	mov	r0, r3
 8006a9e:	f7fe f93d 	bl	8004d1c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006aa2:	4b0d      	ldr	r3, [pc, #52]	; (8006ad8 <prvCheckTasksWaitingTermination+0x54>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3b01      	subs	r3, #1
 8006aa8:	4a0b      	ldr	r2, [pc, #44]	; (8006ad8 <prvCheckTasksWaitingTermination+0x54>)
 8006aaa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006aac:	4b0b      	ldr	r3, [pc, #44]	; (8006adc <prvCheckTasksWaitingTermination+0x58>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	3b01      	subs	r3, #1
 8006ab2:	4a0a      	ldr	r2, [pc, #40]	; (8006adc <prvCheckTasksWaitingTermination+0x58>)
 8006ab4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006ab6:	f001 f925 	bl	8007d04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 f810 	bl	8006ae0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ac0:	4b06      	ldr	r3, [pc, #24]	; (8006adc <prvCheckTasksWaitingTermination+0x58>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1e1      	bne.n	8006a8c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ac8:	bf00      	nop
 8006aca:	bf00      	nop
 8006acc:	3708      	adds	r7, #8
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}
 8006ad2:	bf00      	nop
 8006ad4:	20000e2c 	.word	0x20000e2c
 8006ad8:	20000e58 	.word	0x20000e58
 8006adc:	20000e40 	.word	0x20000e40

08006ae0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b084      	sub	sp, #16
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	3354      	adds	r3, #84	; 0x54
 8006aec:	4618      	mov	r0, r3
 8006aee:	f001 fd2d 	bl	800854c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d108      	bne.n	8006b0e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b00:	4618      	mov	r0, r3
 8006b02:	f001 fabd 	bl	8008080 <vPortFree>
				vPortFree( pxTCB );
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	f001 faba 	bl	8008080 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006b0c:	e018      	b.n	8006b40 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b14:	2b01      	cmp	r3, #1
 8006b16:	d103      	bne.n	8006b20 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	f001 fab1 	bl	8008080 <vPortFree>
	}
 8006b1e:	e00f      	b.n	8006b40 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006b26:	2b02      	cmp	r3, #2
 8006b28:	d00a      	beq.n	8006b40 <prvDeleteTCB+0x60>
	__asm volatile
 8006b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2e:	f383 8811 	msr	BASEPRI, r3
 8006b32:	f3bf 8f6f 	isb	sy
 8006b36:	f3bf 8f4f 	dsb	sy
 8006b3a:	60fb      	str	r3, [r7, #12]
}
 8006b3c:	bf00      	nop
 8006b3e:	e7fe      	b.n	8006b3e <prvDeleteTCB+0x5e>
	}
 8006b40:	bf00      	nop
 8006b42:	3710      	adds	r7, #16
 8006b44:	46bd      	mov	sp, r7
 8006b46:	bd80      	pop	{r7, pc}

08006b48 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b48:	b480      	push	{r7}
 8006b4a:	b083      	sub	sp, #12
 8006b4c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <prvResetNextTaskUnblockTime+0x38>)
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d104      	bne.n	8006b62 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b58:	4b0a      	ldr	r3, [pc, #40]	; (8006b84 <prvResetNextTaskUnblockTime+0x3c>)
 8006b5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006b5e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b60:	e008      	b.n	8006b74 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <prvResetNextTaskUnblockTime+0x38>)
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	68db      	ldr	r3, [r3, #12]
 8006b68:	68db      	ldr	r3, [r3, #12]
 8006b6a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	4a04      	ldr	r2, [pc, #16]	; (8006b84 <prvResetNextTaskUnblockTime+0x3c>)
 8006b72:	6013      	str	r3, [r2, #0]
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	20000e10 	.word	0x20000e10
 8006b84:	20000e78 	.word	0x20000e78

08006b88 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006b88:	b480      	push	{r7}
 8006b8a:	b083      	sub	sp, #12
 8006b8c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8006b8e:	4b05      	ldr	r3, [pc, #20]	; (8006ba4 <xTaskGetCurrentTaskHandle+0x1c>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006b94:	687b      	ldr	r3, [r7, #4]
	}
 8006b96:	4618      	mov	r0, r3
 8006b98:	370c      	adds	r7, #12
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	20000984 	.word	0x20000984

08006ba8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006bae:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <xTaskGetSchedulerState+0x34>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d102      	bne.n	8006bbc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	607b      	str	r3, [r7, #4]
 8006bba:	e008      	b.n	8006bce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bbc:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <xTaskGetSchedulerState+0x38>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d102      	bne.n	8006bca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	607b      	str	r3, [r7, #4]
 8006bc8:	e001      	b.n	8006bce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006bce:	687b      	ldr	r3, [r7, #4]
	}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	370c      	adds	r7, #12
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bda:	4770      	bx	lr
 8006bdc:	20000e64 	.word	0x20000e64
 8006be0:	20000e80 	.word	0x20000e80

08006be4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d051      	beq.n	8006c9e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8006bfa:	68bb      	ldr	r3, [r7, #8]
 8006bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bfe:	4b2a      	ldr	r3, [pc, #168]	; (8006ca8 <xTaskPriorityInherit+0xc4>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d241      	bcs.n	8006c8c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	db06      	blt.n	8006c1e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c10:	4b25      	ldr	r3, [pc, #148]	; (8006ca8 <xTaskPriorityInherit+0xc4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8006c1e:	68bb      	ldr	r3, [r7, #8]
 8006c20:	6959      	ldr	r1, [r3, #20]
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c26:	4613      	mov	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4413      	add	r3, r2
 8006c2c:	009b      	lsls	r3, r3, #2
 8006c2e:	4a1f      	ldr	r2, [pc, #124]	; (8006cac <xTaskPriorityInherit+0xc8>)
 8006c30:	4413      	add	r3, r2
 8006c32:	4299      	cmp	r1, r3
 8006c34:	d122      	bne.n	8006c7c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	3304      	adds	r3, #4
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe f86e 	bl	8004d1c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c40:	4b19      	ldr	r3, [pc, #100]	; (8006ca8 <xTaskPriorityInherit+0xc4>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c4e:	4b18      	ldr	r3, [pc, #96]	; (8006cb0 <xTaskPriorityInherit+0xcc>)
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d903      	bls.n	8006c5e <xTaskPriorityInherit+0x7a>
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5a:	4a15      	ldr	r2, [pc, #84]	; (8006cb0 <xTaskPriorityInherit+0xcc>)
 8006c5c:	6013      	str	r3, [r2, #0]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c62:	4613      	mov	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	4413      	add	r3, r2
 8006c68:	009b      	lsls	r3, r3, #2
 8006c6a:	4a10      	ldr	r2, [pc, #64]	; (8006cac <xTaskPriorityInherit+0xc8>)
 8006c6c:	441a      	add	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4619      	mov	r1, r3
 8006c74:	4610      	mov	r0, r2
 8006c76:	f7fd fff4 	bl	8004c62 <vListInsertEnd>
 8006c7a:	e004      	b.n	8006c86 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006c7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ca8 <xTaskPriorityInherit+0xc4>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006c86:	2301      	movs	r3, #1
 8006c88:	60fb      	str	r3, [r7, #12]
 8006c8a:	e008      	b.n	8006c9e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c90:	4b05      	ldr	r3, [pc, #20]	; (8006ca8 <xTaskPriorityInherit+0xc4>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d201      	bcs.n	8006c9e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c9e:	68fb      	ldr	r3, [r7, #12]
	}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	20000984 	.word	0x20000984
 8006cac:	20000988 	.word	0x20000988
 8006cb0:	20000e60 	.word	0x20000e60

08006cb4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b086      	sub	sp, #24
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006cc0:	2300      	movs	r3, #0
 8006cc2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d056      	beq.n	8006d78 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006cca:	4b2e      	ldr	r3, [pc, #184]	; (8006d84 <xTaskPriorityDisinherit+0xd0>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	693a      	ldr	r2, [r7, #16]
 8006cd0:	429a      	cmp	r2, r3
 8006cd2:	d00a      	beq.n	8006cea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cd8:	f383 8811 	msr	BASEPRI, r3
 8006cdc:	f3bf 8f6f 	isb	sy
 8006ce0:	f3bf 8f4f 	dsb	sy
 8006ce4:	60fb      	str	r3, [r7, #12]
}
 8006ce6:	bf00      	nop
 8006ce8:	e7fe      	b.n	8006ce8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006cea:	693b      	ldr	r3, [r7, #16]
 8006cec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d10a      	bne.n	8006d08 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf6:	f383 8811 	msr	BASEPRI, r3
 8006cfa:	f3bf 8f6f 	isb	sy
 8006cfe:	f3bf 8f4f 	dsb	sy
 8006d02:	60bb      	str	r3, [r7, #8]
}
 8006d04:	bf00      	nop
 8006d06:	e7fe      	b.n	8006d06 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006d08:	693b      	ldr	r3, [r7, #16]
 8006d0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d0c:	1e5a      	subs	r2, r3, #1
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006d12:	693b      	ldr	r3, [r7, #16]
 8006d14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d16:	693b      	ldr	r3, [r7, #16]
 8006d18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006d1a:	429a      	cmp	r2, r3
 8006d1c:	d02c      	beq.n	8006d78 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006d1e:	693b      	ldr	r3, [r7, #16]
 8006d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d128      	bne.n	8006d78 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	3304      	adds	r3, #4
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	f7fd fff6 	bl	8004d1c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d38:	693b      	ldr	r3, [r7, #16]
 8006d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d3c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d48:	4b0f      	ldr	r3, [pc, #60]	; (8006d88 <xTaskPriorityDisinherit+0xd4>)
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	429a      	cmp	r2, r3
 8006d4e:	d903      	bls.n	8006d58 <xTaskPriorityDisinherit+0xa4>
 8006d50:	693b      	ldr	r3, [r7, #16]
 8006d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d54:	4a0c      	ldr	r2, [pc, #48]	; (8006d88 <xTaskPriorityDisinherit+0xd4>)
 8006d56:	6013      	str	r3, [r2, #0]
 8006d58:	693b      	ldr	r3, [r7, #16]
 8006d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	4a09      	ldr	r2, [pc, #36]	; (8006d8c <xTaskPriorityDisinherit+0xd8>)
 8006d66:	441a      	add	r2, r3
 8006d68:	693b      	ldr	r3, [r7, #16]
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	4619      	mov	r1, r3
 8006d6e:	4610      	mov	r0, r2
 8006d70:	f7fd ff77 	bl	8004c62 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006d74:	2301      	movs	r3, #1
 8006d76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006d78:	697b      	ldr	r3, [r7, #20]
	}
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	20000984 	.word	0x20000984
 8006d88:	20000e60 	.word	0x20000e60
 8006d8c:	20000988 	.word	0x20000988

08006d90 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006d90:	b580      	push	{r7, lr}
 8006d92:	b088      	sub	sp, #32
 8006d94:	af00      	add	r7, sp, #0
 8006d96:	6078      	str	r0, [r7, #4]
 8006d98:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d06a      	beq.n	8006e7e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006da8:	69bb      	ldr	r3, [r7, #24]
 8006daa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d10a      	bne.n	8006dc6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db4:	f383 8811 	msr	BASEPRI, r3
 8006db8:	f3bf 8f6f 	isb	sy
 8006dbc:	f3bf 8f4f 	dsb	sy
 8006dc0:	60fb      	str	r3, [r7, #12]
}
 8006dc2:	bf00      	nop
 8006dc4:	e7fe      	b.n	8006dc4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006dc6:	69bb      	ldr	r3, [r7, #24]
 8006dc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d902      	bls.n	8006dd6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	61fb      	str	r3, [r7, #28]
 8006dd4:	e002      	b.n	8006ddc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006dd6:	69bb      	ldr	r3, [r7, #24]
 8006dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006dda:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	69fa      	ldr	r2, [r7, #28]
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d04b      	beq.n	8006e7e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006dea:	697a      	ldr	r2, [r7, #20]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d146      	bne.n	8006e7e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006df0:	4b25      	ldr	r3, [pc, #148]	; (8006e88 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	69ba      	ldr	r2, [r7, #24]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	d10a      	bne.n	8006e10 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfe:	f383 8811 	msr	BASEPRI, r3
 8006e02:	f3bf 8f6f 	isb	sy
 8006e06:	f3bf 8f4f 	dsb	sy
 8006e0a:	60bb      	str	r3, [r7, #8]
}
 8006e0c:	bf00      	nop
 8006e0e:	e7fe      	b.n	8006e0e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006e10:	69bb      	ldr	r3, [r7, #24]
 8006e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e14:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006e16:	69bb      	ldr	r3, [r7, #24]
 8006e18:	69fa      	ldr	r2, [r7, #28]
 8006e1a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	db04      	blt.n	8006e2e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e24:	69fb      	ldr	r3, [r7, #28]
 8006e26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006e2a:	69bb      	ldr	r3, [r7, #24]
 8006e2c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	6959      	ldr	r1, [r3, #20]
 8006e32:	693a      	ldr	r2, [r7, #16]
 8006e34:	4613      	mov	r3, r2
 8006e36:	009b      	lsls	r3, r3, #2
 8006e38:	4413      	add	r3, r2
 8006e3a:	009b      	lsls	r3, r3, #2
 8006e3c:	4a13      	ldr	r2, [pc, #76]	; (8006e8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e3e:	4413      	add	r3, r2
 8006e40:	4299      	cmp	r1, r3
 8006e42:	d11c      	bne.n	8006e7e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fd ff67 	bl	8004d1c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e52:	4b0f      	ldr	r3, [pc, #60]	; (8006e90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	429a      	cmp	r2, r3
 8006e58:	d903      	bls.n	8006e62 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006e5a:	69bb      	ldr	r3, [r7, #24]
 8006e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e5e:	4a0c      	ldr	r2, [pc, #48]	; (8006e90 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006e60:	6013      	str	r3, [r2, #0]
 8006e62:	69bb      	ldr	r3, [r7, #24]
 8006e64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e66:	4613      	mov	r3, r2
 8006e68:	009b      	lsls	r3, r3, #2
 8006e6a:	4413      	add	r3, r2
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	4a07      	ldr	r2, [pc, #28]	; (8006e8c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006e70:	441a      	add	r2, r3
 8006e72:	69bb      	ldr	r3, [r7, #24]
 8006e74:	3304      	adds	r3, #4
 8006e76:	4619      	mov	r1, r3
 8006e78:	4610      	mov	r0, r2
 8006e7a:	f7fd fef2 	bl	8004c62 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006e7e:	bf00      	nop
 8006e80:	3720      	adds	r7, #32
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	20000984 	.word	0x20000984
 8006e8c:	20000988 	.word	0x20000988
 8006e90:	20000e60 	.word	0x20000e60

08006e94 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006e94:	b480      	push	{r7}
 8006e96:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006e98:	4b07      	ldr	r3, [pc, #28]	; (8006eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d004      	beq.n	8006eaa <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006ea0:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ea6:	3201      	adds	r2, #1
 8006ea8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006eaa:	4b03      	ldr	r3, [pc, #12]	; (8006eb8 <pvTaskIncrementMutexHeldCount+0x24>)
 8006eac:	681b      	ldr	r3, [r3, #0]
	}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	20000984 	.word	0x20000984

08006ebc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006ebc:	b580      	push	{r7, lr}
 8006ebe:	b086      	sub	sp, #24
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
 8006ec8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006eca:	f000 feeb 	bl	8007ca4 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006ece:	4b29      	ldr	r3, [pc, #164]	; (8006f74 <xTaskNotifyWait+0xb8>)
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	2b02      	cmp	r3, #2
 8006eda:	d01c      	beq.n	8006f16 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006edc:	4b25      	ldr	r3, [pc, #148]	; (8006f74 <xTaskNotifyWait+0xb8>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	43d2      	mvns	r2, r2
 8006ee8:	400a      	ands	r2, r1
 8006eea:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006eee:	4b21      	ldr	r3, [pc, #132]	; (8006f74 <xTaskNotifyWait+0xb8>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

				if( xTicksToWait > ( TickType_t ) 0 )
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	d00b      	beq.n	8006f16 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006efe:	2101      	movs	r1, #1
 8006f00:	6838      	ldr	r0, [r7, #0]
 8006f02:	f000 f91f 	bl	8007144 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006f06:	4b1c      	ldr	r3, [pc, #112]	; (8006f78 <xTaskNotifyWait+0xbc>)
 8006f08:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f0c:	601a      	str	r2, [r3, #0]
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006f16:	f000 fef5 	bl	8007d04 <vPortExitCritical>

		taskENTER_CRITICAL();
 8006f1a:	f000 fec3 	bl	8007ca4 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d005      	beq.n	8006f30 <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006f24:	4b13      	ldr	r3, [pc, #76]	; (8006f74 <xTaskNotifyWait+0xb8>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006f30:	4b10      	ldr	r3, [pc, #64]	; (8006f74 <xTaskNotifyWait+0xb8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b02      	cmp	r3, #2
 8006f3c:	d002      	beq.n	8006f44 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006f3e:	2300      	movs	r3, #0
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	e00a      	b.n	8006f5a <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 8006f44:	4b0b      	ldr	r3, [pc, #44]	; (8006f74 <xTaskNotifyWait+0xb8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
 8006f4c:	68ba      	ldr	r2, [r7, #8]
 8006f4e:	43d2      	mvns	r2, r2
 8006f50:	400a      	ands	r2, r1
 8006f52:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
				xReturn = pdTRUE;
 8006f56:	2301      	movs	r3, #1
 8006f58:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006f5a:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <xTaskNotifyWait+0xb8>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	2200      	movs	r2, #0
 8006f60:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
		}
		taskEXIT_CRITICAL();
 8006f64:	f000 fece 	bl	8007d04 <vPortExitCritical>

		return xReturn;
 8006f68:	697b      	ldr	r3, [r7, #20]
	}
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	3718      	adds	r7, #24
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	bd80      	pop	{r7, pc}
 8006f72:	bf00      	nop
 8006f74:	20000984 	.word	0x20000984
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b08e      	sub	sp, #56	; 0x38
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	60b9      	str	r1, [r7, #8]
 8006f86:	603b      	str	r3, [r7, #0]
 8006f88:	4613      	mov	r3, r2
 8006f8a:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006f8c:	2301      	movs	r3, #1
 8006f8e:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d10a      	bne.n	8006fac <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 8006f96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f9a:	f383 8811 	msr	BASEPRI, r3
 8006f9e:	f3bf 8f6f 	isb	sy
 8006fa2:	f3bf 8f4f 	dsb	sy
 8006fa6:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006fa8:	bf00      	nop
 8006faa:	e7fe      	b.n	8006faa <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006fac:	f000 ff5c 	bl	8007e68 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 8006fb4:	f3ef 8211 	mrs	r2, BASEPRI
 8006fb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fbc:	f383 8811 	msr	BASEPRI, r3
 8006fc0:	f3bf 8f6f 	isb	sy
 8006fc4:	f3bf 8f4f 	dsb	sy
 8006fc8:	623a      	str	r2, [r7, #32]
 8006fca:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006fcc:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006fce:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d004      	beq.n	8006fe0 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fe2:	f893 30a4 	ldrb.w	r3, [r3, #164]	; 0xa4
 8006fe6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fec:	2202      	movs	r2, #2
 8006fee:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4

			switch( eAction )
 8006ff2:	79fb      	ldrb	r3, [r7, #7]
 8006ff4:	2b04      	cmp	r3, #4
 8006ff6:	d82f      	bhi.n	8007058 <xTaskGenericNotifyFromISR+0xdc>
 8006ff8:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <xTaskGenericNotifyFromISR+0x84>)
 8006ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ffe:	bf00      	nop
 8007000:	0800707b 	.word	0x0800707b
 8007004:	08007015 	.word	0x08007015
 8007008:	08007027 	.word	0x08007027
 800700c:	08007037 	.word	0x08007037
 8007010:	08007041 	.word	0x08007041
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007016:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800701a:	68bb      	ldr	r3, [r7, #8]
 800701c:	431a      	orrs	r2, r3
 800701e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007020:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8007024:	e02c      	b.n	8007080 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007028:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800702c:	1c5a      	adds	r2, r3, #1
 800702e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007030:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 8007034:	e024      	b.n	8007080 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007038:	68ba      	ldr	r2, [r7, #8]
 800703a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					break;
 800703e:	e01f      	b.n	8007080 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007040:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007044:	2b02      	cmp	r3, #2
 8007046:	d004      	beq.n	8007052 <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800704a:	68ba      	ldr	r2, [r7, #8]
 800704c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007050:	e016      	b.n	8007080 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 8007052:	2300      	movs	r3, #0
 8007054:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 8007056:	e013      	b.n	8007080 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800705a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800705e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007062:	d00c      	beq.n	800707e <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 8007064:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007068:	f383 8811 	msr	BASEPRI, r3
 800706c:	f3bf 8f6f 	isb	sy
 8007070:	f3bf 8f4f 	dsb	sy
 8007074:	61bb      	str	r3, [r7, #24]
}
 8007076:	bf00      	nop
 8007078:	e7fe      	b.n	8007078 <xTaskGenericNotifyFromISR+0xfc>
					break;
 800707a:	bf00      	nop
 800707c:	e000      	b.n	8007080 <xTaskGenericNotifyFromISR+0x104>
					break;
 800707e:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007080:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007084:	2b01      	cmp	r3, #1
 8007086:	d146      	bne.n	8007116 <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800708a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800708c:	2b00      	cmp	r3, #0
 800708e:	d00a      	beq.n	80070a6 <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8007090:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007094:	f383 8811 	msr	BASEPRI, r3
 8007098:	f3bf 8f6f 	isb	sy
 800709c:	f3bf 8f4f 	dsb	sy
 80070a0:	617b      	str	r3, [r7, #20]
}
 80070a2:	bf00      	nop
 80070a4:	e7fe      	b.n	80070a4 <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070a6:	4b21      	ldr	r3, [pc, #132]	; (800712c <xTaskGenericNotifyFromISR+0x1b0>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d11d      	bne.n	80070ea <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070b0:	3304      	adds	r3, #4
 80070b2:	4618      	mov	r0, r3
 80070b4:	f7fd fe32 	bl	8004d1c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80070b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070bc:	4b1c      	ldr	r3, [pc, #112]	; (8007130 <xTaskGenericNotifyFromISR+0x1b4>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d903      	bls.n	80070cc <xTaskGenericNotifyFromISR+0x150>
 80070c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070c8:	4a19      	ldr	r2, [pc, #100]	; (8007130 <xTaskGenericNotifyFromISR+0x1b4>)
 80070ca:	6013      	str	r3, [r2, #0]
 80070cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	4a16      	ldr	r2, [pc, #88]	; (8007134 <xTaskGenericNotifyFromISR+0x1b8>)
 80070da:	441a      	add	r2, r3
 80070dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070de:	3304      	adds	r3, #4
 80070e0:	4619      	mov	r1, r3
 80070e2:	4610      	mov	r0, r2
 80070e4:	f7fd fdbd 	bl	8004c62 <vListInsertEnd>
 80070e8:	e005      	b.n	80070f6 <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80070ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070ec:	3318      	adds	r3, #24
 80070ee:	4619      	mov	r1, r3
 80070f0:	4811      	ldr	r0, [pc, #68]	; (8007138 <xTaskGenericNotifyFromISR+0x1bc>)
 80070f2:	f7fd fdb6 	bl	8004c62 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80070f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80070fa:	4b10      	ldr	r3, [pc, #64]	; (800713c <xTaskGenericNotifyFromISR+0x1c0>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007100:	429a      	cmp	r2, r3
 8007102:	d908      	bls.n	8007116 <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007104:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007106:	2b00      	cmp	r3, #0
 8007108:	d002      	beq.n	8007110 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800710a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800710c:	2201      	movs	r2, #1
 800710e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007110:	4b0b      	ldr	r3, [pc, #44]	; (8007140 <xTaskGenericNotifyFromISR+0x1c4>)
 8007112:	2201      	movs	r2, #1
 8007114:	601a      	str	r2, [r3, #0]
 8007116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007118:	613b      	str	r3, [r7, #16]
	__asm volatile
 800711a:	693b      	ldr	r3, [r7, #16]
 800711c:	f383 8811 	msr	BASEPRI, r3
}
 8007120:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007122:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 8007124:	4618      	mov	r0, r3
 8007126:	3738      	adds	r7, #56	; 0x38
 8007128:	46bd      	mov	sp, r7
 800712a:	bd80      	pop	{r7, pc}
 800712c:	20000e80 	.word	0x20000e80
 8007130:	20000e60 	.word	0x20000e60
 8007134:	20000988 	.word	0x20000988
 8007138:	20000e18 	.word	0x20000e18
 800713c:	20000984 	.word	0x20000984
 8007140:	20000e6c 	.word	0x20000e6c

08007144 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b084      	sub	sp, #16
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800714e:	4b21      	ldr	r3, [pc, #132]	; (80071d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007154:	4b20      	ldr	r3, [pc, #128]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3304      	adds	r3, #4
 800715a:	4618      	mov	r0, r3
 800715c:	f7fd fdde 	bl	8004d1c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007166:	d10a      	bne.n	800717e <prvAddCurrentTaskToDelayedList+0x3a>
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	2b00      	cmp	r3, #0
 800716c:	d007      	beq.n	800717e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800716e:	4b1a      	ldr	r3, [pc, #104]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	3304      	adds	r3, #4
 8007174:	4619      	mov	r1, r3
 8007176:	4819      	ldr	r0, [pc, #100]	; (80071dc <prvAddCurrentTaskToDelayedList+0x98>)
 8007178:	f7fd fd73 	bl	8004c62 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800717c:	e026      	b.n	80071cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800717e:	68fa      	ldr	r2, [r7, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	4413      	add	r3, r2
 8007184:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007186:	4b14      	ldr	r3, [pc, #80]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	68ba      	ldr	r2, [r7, #8]
 800718c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	429a      	cmp	r2, r3
 8007194:	d209      	bcs.n	80071aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007196:	4b12      	ldr	r3, [pc, #72]	; (80071e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b0f      	ldr	r3, [pc, #60]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	3304      	adds	r3, #4
 80071a0:	4619      	mov	r1, r3
 80071a2:	4610      	mov	r0, r2
 80071a4:	f7fd fd81 	bl	8004caa <vListInsert>
}
 80071a8:	e010      	b.n	80071cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80071aa:	4b0e      	ldr	r3, [pc, #56]	; (80071e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80071ac:	681a      	ldr	r2, [r3, #0]
 80071ae:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	3304      	adds	r3, #4
 80071b4:	4619      	mov	r1, r3
 80071b6:	4610      	mov	r0, r2
 80071b8:	f7fd fd77 	bl	8004caa <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80071bc:	4b0a      	ldr	r3, [pc, #40]	; (80071e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	68ba      	ldr	r2, [r7, #8]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d202      	bcs.n	80071cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80071c6:	4a08      	ldr	r2, [pc, #32]	; (80071e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	6013      	str	r3, [r2, #0]
}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}
 80071d4:	20000e5c 	.word	0x20000e5c
 80071d8:	20000984 	.word	0x20000984
 80071dc:	20000e44 	.word	0x20000e44
 80071e0:	20000e14 	.word	0x20000e14
 80071e4:	20000e10 	.word	0x20000e10
 80071e8:	20000e78 	.word	0x20000e78

080071ec <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80071ec:	b580      	push	{r7, lr}
 80071ee:	b08a      	sub	sp, #40	; 0x28
 80071f0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80071f2:	2300      	movs	r3, #0
 80071f4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80071f6:	f000 fba1 	bl	800793c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80071fa:	4b1c      	ldr	r3, [pc, #112]	; (800726c <xTimerCreateTimerTask+0x80>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d021      	beq.n	8007246 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007206:	2300      	movs	r3, #0
 8007208:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800720a:	1d3a      	adds	r2, r7, #4
 800720c:	f107 0108 	add.w	r1, r7, #8
 8007210:	f107 030c 	add.w	r3, r7, #12
 8007214:	4618      	mov	r0, r3
 8007216:	f7fd fcdd 	bl	8004bd4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	9202      	str	r2, [sp, #8]
 8007222:	9301      	str	r3, [sp, #4]
 8007224:	2302      	movs	r3, #2
 8007226:	9300      	str	r3, [sp, #0]
 8007228:	2300      	movs	r3, #0
 800722a:	460a      	mov	r2, r1
 800722c:	4910      	ldr	r1, [pc, #64]	; (8007270 <xTimerCreateTimerTask+0x84>)
 800722e:	4811      	ldr	r0, [pc, #68]	; (8007274 <xTimerCreateTimerTask+0x88>)
 8007230:	f7fe fe62 	bl	8005ef8 <xTaskCreateStatic>
 8007234:	4603      	mov	r3, r0
 8007236:	4a10      	ldr	r2, [pc, #64]	; (8007278 <xTimerCreateTimerTask+0x8c>)
 8007238:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800723a:	4b0f      	ldr	r3, [pc, #60]	; (8007278 <xTimerCreateTimerTask+0x8c>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d001      	beq.n	8007246 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007242:	2301      	movs	r3, #1
 8007244:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007246:	697b      	ldr	r3, [r7, #20]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d10a      	bne.n	8007262 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	613b      	str	r3, [r7, #16]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007262:	697b      	ldr	r3, [r7, #20]
}
 8007264:	4618      	mov	r0, r3
 8007266:	3718      	adds	r7, #24
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000eb4 	.word	0x20000eb4
 8007270:	080094f4 	.word	0x080094f4
 8007274:	080074e5 	.word	0x080074e5
 8007278:	20000eb8 	.word	0x20000eb8

0800727c <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af02      	add	r7, sp, #8
 8007282:	60f8      	str	r0, [r7, #12]
 8007284:	60b9      	str	r1, [r7, #8]
 8007286:	607a      	str	r2, [r7, #4]
 8007288:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800728a:	202c      	movs	r0, #44	; 0x2c
 800728c:	f000 fe2c 	bl	8007ee8 <pvPortMalloc>
 8007290:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8007292:	697b      	ldr	r3, [r7, #20]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00d      	beq.n	80072b4 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007298:	697b      	ldr	r3, [r7, #20]
 800729a:	2200      	movs	r2, #0
 800729c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	9301      	str	r3, [sp, #4]
 80072a4:	6a3b      	ldr	r3, [r7, #32]
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	68b9      	ldr	r1, [r7, #8]
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f000 f843 	bl	800733a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80072b4:	697b      	ldr	r3, [r7, #20]
	}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3718      	adds	r7, #24
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b08a      	sub	sp, #40	; 0x28
 80072c2:	af02      	add	r7, sp, #8
 80072c4:	60f8      	str	r0, [r7, #12]
 80072c6:	60b9      	str	r1, [r7, #8]
 80072c8:	607a      	str	r2, [r7, #4]
 80072ca:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80072cc:	232c      	movs	r3, #44	; 0x2c
 80072ce:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	2b2c      	cmp	r3, #44	; 0x2c
 80072d4:	d00a      	beq.n	80072ec <xTimerCreateStatic+0x2e>
	__asm volatile
 80072d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072da:	f383 8811 	msr	BASEPRI, r3
 80072de:	f3bf 8f6f 	isb	sy
 80072e2:	f3bf 8f4f 	dsb	sy
 80072e6:	61bb      	str	r3, [r7, #24]
}
 80072e8:	bf00      	nop
 80072ea:	e7fe      	b.n	80072ea <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80072ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80072ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d10a      	bne.n	800730a <xTimerCreateStatic+0x4c>
	__asm volatile
 80072f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f8:	f383 8811 	msr	BASEPRI, r3
 80072fc:	f3bf 8f6f 	isb	sy
 8007300:	f3bf 8f4f 	dsb	sy
 8007304:	617b      	str	r3, [r7, #20]
}
 8007306:	bf00      	nop
 8007308:	e7fe      	b.n	8007308 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 800730a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800730c:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 800730e:	69fb      	ldr	r3, [r7, #28]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d00d      	beq.n	8007330 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8007314:	69fb      	ldr	r3, [r7, #28]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	9301      	str	r3, [sp, #4]
 8007320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007322:	9300      	str	r3, [sp, #0]
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	687a      	ldr	r2, [r7, #4]
 8007328:	68b9      	ldr	r1, [r7, #8]
 800732a:	68f8      	ldr	r0, [r7, #12]
 800732c:	f000 f805 	bl	800733a <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007330:	69fb      	ldr	r3, [r7, #28]
	}
 8007332:	4618      	mov	r0, r3
 8007334:	3720      	adds	r7, #32
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}

0800733a <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800733a:	b580      	push	{r7, lr}
 800733c:	b086      	sub	sp, #24
 800733e:	af00      	add	r7, sp, #0
 8007340:	60f8      	str	r0, [r7, #12]
 8007342:	60b9      	str	r1, [r7, #8]
 8007344:	607a      	str	r2, [r7, #4]
 8007346:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007348:	68bb      	ldr	r3, [r7, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 800734e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007352:	f383 8811 	msr	BASEPRI, r3
 8007356:	f3bf 8f6f 	isb	sy
 800735a:	f3bf 8f4f 	dsb	sy
 800735e:	617b      	str	r3, [r7, #20]
}
 8007360:	bf00      	nop
 8007362:	e7fe      	b.n	8007362 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8007364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007366:	2b00      	cmp	r3, #0
 8007368:	d01e      	beq.n	80073a8 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800736a:	f000 fae7 	bl	800793c <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800736e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007370:	68fa      	ldr	r2, [r7, #12]
 8007372:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8007374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007376:	68ba      	ldr	r2, [r7, #8]
 8007378:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	683a      	ldr	r2, [r7, #0]
 800737e:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007382:	6a3a      	ldr	r2, [r7, #32]
 8007384:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8007386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007388:	3304      	adds	r3, #4
 800738a:	4618      	mov	r0, r3
 800738c:	f7fd fc5c 	bl	8004c48 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d008      	beq.n	80073a8 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800739c:	f043 0304 	orr.w	r3, r3, #4
 80073a0:	b2da      	uxtb	r2, r3
 80073a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80073a8:	bf00      	nop
 80073aa:	3718      	adds	r7, #24
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b08a      	sub	sp, #40	; 0x28
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	607a      	str	r2, [r7, #4]
 80073bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80073be:	2300      	movs	r3, #0
 80073c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d10a      	bne.n	80073de <xTimerGenericCommand+0x2e>
	__asm volatile
 80073c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073cc:	f383 8811 	msr	BASEPRI, r3
 80073d0:	f3bf 8f6f 	isb	sy
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	623b      	str	r3, [r7, #32]
}
 80073da:	bf00      	nop
 80073dc:	e7fe      	b.n	80073dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80073de:	4b1a      	ldr	r3, [pc, #104]	; (8007448 <xTimerGenericCommand+0x98>)
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d02a      	beq.n	800743c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	2b05      	cmp	r3, #5
 80073f6:	dc18      	bgt.n	800742a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80073f8:	f7ff fbd6 	bl	8006ba8 <xTaskGetSchedulerState>
 80073fc:	4603      	mov	r3, r0
 80073fe:	2b02      	cmp	r3, #2
 8007400:	d109      	bne.n	8007416 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007402:	4b11      	ldr	r3, [pc, #68]	; (8007448 <xTimerGenericCommand+0x98>)
 8007404:	6818      	ldr	r0, [r3, #0]
 8007406:	f107 0110 	add.w	r1, r7, #16
 800740a:	2300      	movs	r3, #0
 800740c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800740e:	f7fd ff0d 	bl	800522c <xQueueGenericSend>
 8007412:	6278      	str	r0, [r7, #36]	; 0x24
 8007414:	e012      	b.n	800743c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007416:	4b0c      	ldr	r3, [pc, #48]	; (8007448 <xTimerGenericCommand+0x98>)
 8007418:	6818      	ldr	r0, [r3, #0]
 800741a:	f107 0110 	add.w	r1, r7, #16
 800741e:	2300      	movs	r3, #0
 8007420:	2200      	movs	r2, #0
 8007422:	f7fd ff03 	bl	800522c <xQueueGenericSend>
 8007426:	6278      	str	r0, [r7, #36]	; 0x24
 8007428:	e008      	b.n	800743c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800742a:	4b07      	ldr	r3, [pc, #28]	; (8007448 <xTimerGenericCommand+0x98>)
 800742c:	6818      	ldr	r0, [r3, #0]
 800742e:	f107 0110 	add.w	r1, r7, #16
 8007432:	2300      	movs	r3, #0
 8007434:	683a      	ldr	r2, [r7, #0]
 8007436:	f7fd fff7 	bl	8005428 <xQueueGenericSendFromISR>
 800743a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800743c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800743e:	4618      	mov	r0, r3
 8007440:	3728      	adds	r7, #40	; 0x28
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000eb4 	.word	0x20000eb4

0800744c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b088      	sub	sp, #32
 8007450:	af02      	add	r7, sp, #8
 8007452:	6078      	str	r0, [r7, #4]
 8007454:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007456:	4b22      	ldr	r3, [pc, #136]	; (80074e0 <prvProcessExpiredTimer+0x94>)
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	68db      	ldr	r3, [r3, #12]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	3304      	adds	r3, #4
 8007464:	4618      	mov	r0, r3
 8007466:	f7fd fc59 	bl	8004d1c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007470:	f003 0304 	and.w	r3, r3, #4
 8007474:	2b00      	cmp	r3, #0
 8007476:	d022      	beq.n	80074be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	699a      	ldr	r2, [r3, #24]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	18d1      	adds	r1, r2, r3
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	683a      	ldr	r2, [r7, #0]
 8007484:	6978      	ldr	r0, [r7, #20]
 8007486:	f000 f8d1 	bl	800762c <prvInsertTimerInActiveList>
 800748a:	4603      	mov	r3, r0
 800748c:	2b00      	cmp	r3, #0
 800748e:	d01f      	beq.n	80074d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007490:	2300      	movs	r3, #0
 8007492:	9300      	str	r3, [sp, #0]
 8007494:	2300      	movs	r3, #0
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	2100      	movs	r1, #0
 800749a:	6978      	ldr	r0, [r7, #20]
 800749c:	f7ff ff88 	bl	80073b0 <xTimerGenericCommand>
 80074a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d113      	bne.n	80074d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	60fb      	str	r3, [r7, #12]
}
 80074ba:	bf00      	nop
 80074bc:	e7fe      	b.n	80074bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80074c4:	f023 0301 	bic.w	r3, r3, #1
 80074c8:	b2da      	uxtb	r2, r3
 80074ca:	697b      	ldr	r3, [r7, #20]
 80074cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80074d0:	697b      	ldr	r3, [r7, #20]
 80074d2:	6a1b      	ldr	r3, [r3, #32]
 80074d4:	6978      	ldr	r0, [r7, #20]
 80074d6:	4798      	blx	r3
}
 80074d8:	bf00      	nop
 80074da:	3718      	adds	r7, #24
 80074dc:	46bd      	mov	sp, r7
 80074de:	bd80      	pop	{r7, pc}
 80074e0:	20000eac 	.word	0x20000eac

080074e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b084      	sub	sp, #16
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074ec:	f107 0308 	add.w	r3, r7, #8
 80074f0:	4618      	mov	r0, r3
 80074f2:	f000 f857 	bl	80075a4 <prvGetNextExpireTime>
 80074f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	4619      	mov	r1, r3
 80074fc:	68f8      	ldr	r0, [r7, #12]
 80074fe:	f000 f803 	bl	8007508 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007502:	f000 f8d5 	bl	80076b0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007506:	e7f1      	b.n	80074ec <prvTimerTask+0x8>

08007508 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007508:	b580      	push	{r7, lr}
 800750a:	b084      	sub	sp, #16
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007512:	f7fe ff4d 	bl	80063b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007516:	f107 0308 	add.w	r3, r7, #8
 800751a:	4618      	mov	r0, r3
 800751c:	f000 f866 	bl	80075ec <prvSampleTimeNow>
 8007520:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d130      	bne.n	800758a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d10a      	bne.n	8007544 <prvProcessTimerOrBlockTask+0x3c>
 800752e:	687a      	ldr	r2, [r7, #4]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	429a      	cmp	r2, r3
 8007534:	d806      	bhi.n	8007544 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007536:	f7fe ff49 	bl	80063cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800753a:	68f9      	ldr	r1, [r7, #12]
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f7ff ff85 	bl	800744c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007542:	e024      	b.n	800758e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	2b00      	cmp	r3, #0
 8007548:	d008      	beq.n	800755c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800754a:	4b13      	ldr	r3, [pc, #76]	; (8007598 <prvProcessTimerOrBlockTask+0x90>)
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d101      	bne.n	8007558 <prvProcessTimerOrBlockTask+0x50>
 8007554:	2301      	movs	r3, #1
 8007556:	e000      	b.n	800755a <prvProcessTimerOrBlockTask+0x52>
 8007558:	2300      	movs	r3, #0
 800755a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800755c:	4b0f      	ldr	r3, [pc, #60]	; (800759c <prvProcessTimerOrBlockTask+0x94>)
 800755e:	6818      	ldr	r0, [r3, #0]
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	1ad3      	subs	r3, r2, r3
 8007566:	683a      	ldr	r2, [r7, #0]
 8007568:	4619      	mov	r1, r3
 800756a:	f7fe fc91 	bl	8005e90 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800756e:	f7fe ff2d 	bl	80063cc <xTaskResumeAll>
 8007572:	4603      	mov	r3, r0
 8007574:	2b00      	cmp	r3, #0
 8007576:	d10a      	bne.n	800758e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007578:	4b09      	ldr	r3, [pc, #36]	; (80075a0 <prvProcessTimerOrBlockTask+0x98>)
 800757a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800757e:	601a      	str	r2, [r3, #0]
 8007580:	f3bf 8f4f 	dsb	sy
 8007584:	f3bf 8f6f 	isb	sy
}
 8007588:	e001      	b.n	800758e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800758a:	f7fe ff1f 	bl	80063cc <xTaskResumeAll>
}
 800758e:	bf00      	nop
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000eb0 	.word	0x20000eb0
 800759c:	20000eb4 	.word	0x20000eb4
 80075a0:	e000ed04 	.word	0xe000ed04

080075a4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80075ac:	4b0e      	ldr	r3, [pc, #56]	; (80075e8 <prvGetNextExpireTime+0x44>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	2b00      	cmp	r3, #0
 80075b4:	d101      	bne.n	80075ba <prvGetNextExpireTime+0x16>
 80075b6:	2201      	movs	r2, #1
 80075b8:	e000      	b.n	80075bc <prvGetNextExpireTime+0x18>
 80075ba:	2200      	movs	r2, #0
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d105      	bne.n	80075d4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80075c8:	4b07      	ldr	r3, [pc, #28]	; (80075e8 <prvGetNextExpireTime+0x44>)
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	68db      	ldr	r3, [r3, #12]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	60fb      	str	r3, [r7, #12]
 80075d2:	e001      	b.n	80075d8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80075d4:	2300      	movs	r3, #0
 80075d6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80075d8:	68fb      	ldr	r3, [r7, #12]
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3714      	adds	r7, #20
 80075de:	46bd      	mov	sp, r7
 80075e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e4:	4770      	bx	lr
 80075e6:	bf00      	nop
 80075e8:	20000eac 	.word	0x20000eac

080075ec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80075f4:	f7fe ff88 	bl	8006508 <xTaskGetTickCount>
 80075f8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80075fa:	4b0b      	ldr	r3, [pc, #44]	; (8007628 <prvSampleTimeNow+0x3c>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	68fa      	ldr	r2, [r7, #12]
 8007600:	429a      	cmp	r2, r3
 8007602:	d205      	bcs.n	8007610 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007604:	f000 f936 	bl	8007874 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	2201      	movs	r2, #1
 800760c:	601a      	str	r2, [r3, #0]
 800760e:	e002      	b.n	8007616 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007616:	4a04      	ldr	r2, [pc, #16]	; (8007628 <prvSampleTimeNow+0x3c>)
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800761c:	68fb      	ldr	r3, [r7, #12]
}
 800761e:	4618      	mov	r0, r3
 8007620:	3710      	adds	r7, #16
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}
 8007626:	bf00      	nop
 8007628:	20000ebc 	.word	0x20000ebc

0800762c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b086      	sub	sp, #24
 8007630:	af00      	add	r7, sp, #0
 8007632:	60f8      	str	r0, [r7, #12]
 8007634:	60b9      	str	r1, [r7, #8]
 8007636:	607a      	str	r2, [r7, #4]
 8007638:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800763a:	2300      	movs	r3, #0
 800763c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	68ba      	ldr	r2, [r7, #8]
 8007642:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	68fa      	ldr	r2, [r7, #12]
 8007648:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	429a      	cmp	r2, r3
 8007650:	d812      	bhi.n	8007678 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007652:	687a      	ldr	r2, [r7, #4]
 8007654:	683b      	ldr	r3, [r7, #0]
 8007656:	1ad2      	subs	r2, r2, r3
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	699b      	ldr	r3, [r3, #24]
 800765c:	429a      	cmp	r2, r3
 800765e:	d302      	bcc.n	8007666 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007660:	2301      	movs	r3, #1
 8007662:	617b      	str	r3, [r7, #20]
 8007664:	e01b      	b.n	800769e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007666:	4b10      	ldr	r3, [pc, #64]	; (80076a8 <prvInsertTimerInActiveList+0x7c>)
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	3304      	adds	r3, #4
 800766e:	4619      	mov	r1, r3
 8007670:	4610      	mov	r0, r2
 8007672:	f7fd fb1a 	bl	8004caa <vListInsert>
 8007676:	e012      	b.n	800769e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	429a      	cmp	r2, r3
 800767e:	d206      	bcs.n	800768e <prvInsertTimerInActiveList+0x62>
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	429a      	cmp	r2, r3
 8007686:	d302      	bcc.n	800768e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007688:	2301      	movs	r3, #1
 800768a:	617b      	str	r3, [r7, #20]
 800768c:	e007      	b.n	800769e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800768e:	4b07      	ldr	r3, [pc, #28]	; (80076ac <prvInsertTimerInActiveList+0x80>)
 8007690:	681a      	ldr	r2, [r3, #0]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3304      	adds	r3, #4
 8007696:	4619      	mov	r1, r3
 8007698:	4610      	mov	r0, r2
 800769a:	f7fd fb06 	bl	8004caa <vListInsert>
		}
	}

	return xProcessTimerNow;
 800769e:	697b      	ldr	r3, [r7, #20]
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	3718      	adds	r7, #24
 80076a4:	46bd      	mov	sp, r7
 80076a6:	bd80      	pop	{r7, pc}
 80076a8:	20000eb0 	.word	0x20000eb0
 80076ac:	20000eac 	.word	0x20000eac

080076b0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b08e      	sub	sp, #56	; 0x38
 80076b4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80076b6:	e0ca      	b.n	800784e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	da18      	bge.n	80076f0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80076be:	1d3b      	adds	r3, r7, #4
 80076c0:	3304      	adds	r3, #4
 80076c2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80076c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10a      	bne.n	80076e0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	61fb      	str	r3, [r7, #28]
}
 80076dc:	bf00      	nop
 80076de:	e7fe      	b.n	80076de <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80076e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076e6:	6850      	ldr	r0, [r2, #4]
 80076e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80076ea:	6892      	ldr	r2, [r2, #8]
 80076ec:	4611      	mov	r1, r2
 80076ee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	f2c0 80ab 	blt.w	800784e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	695b      	ldr	r3, [r3, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d004      	beq.n	800770e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	3304      	adds	r3, #4
 8007708:	4618      	mov	r0, r3
 800770a:	f7fd fb07 	bl	8004d1c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800770e:	463b      	mov	r3, r7
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff ff6b 	bl	80075ec <prvSampleTimeNow>
 8007716:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b09      	cmp	r3, #9
 800771c:	f200 8096 	bhi.w	800784c <prvProcessReceivedCommands+0x19c>
 8007720:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <prvProcessReceivedCommands+0x78>)
 8007722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007726:	bf00      	nop
 8007728:	08007751 	.word	0x08007751
 800772c:	08007751 	.word	0x08007751
 8007730:	08007751 	.word	0x08007751
 8007734:	080077c5 	.word	0x080077c5
 8007738:	080077d9 	.word	0x080077d9
 800773c:	08007823 	.word	0x08007823
 8007740:	08007751 	.word	0x08007751
 8007744:	08007751 	.word	0x08007751
 8007748:	080077c5 	.word	0x080077c5
 800774c:	080077d9 	.word	0x080077d9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007750:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007752:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007756:	f043 0301 	orr.w	r3, r3, #1
 800775a:	b2da      	uxtb	r2, r3
 800775c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800775e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	699b      	ldr	r3, [r3, #24]
 8007768:	18d1      	adds	r1, r2, r3
 800776a:	68bb      	ldr	r3, [r7, #8]
 800776c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800776e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007770:	f7ff ff5c 	bl	800762c <prvInsertTimerInActiveList>
 8007774:	4603      	mov	r3, r0
 8007776:	2b00      	cmp	r3, #0
 8007778:	d069      	beq.n	800784e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800777a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777c:	6a1b      	ldr	r3, [r3, #32]
 800777e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007780:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007784:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007788:	f003 0304 	and.w	r3, r3, #4
 800778c:	2b00      	cmp	r3, #0
 800778e:	d05e      	beq.n	800784e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	441a      	add	r2, r3
 8007798:	2300      	movs	r3, #0
 800779a:	9300      	str	r3, [sp, #0]
 800779c:	2300      	movs	r3, #0
 800779e:	2100      	movs	r1, #0
 80077a0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077a2:	f7ff fe05 	bl	80073b0 <xTimerGenericCommand>
 80077a6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d14f      	bne.n	800784e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	61bb      	str	r3, [r7, #24]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077ca:	f023 0301 	bic.w	r3, r3, #1
 80077ce:	b2da      	uxtb	r2, r3
 80077d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80077d6:	e03a      	b.n	800784e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077de:	f043 0301 	orr.w	r3, r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80077ea:	68ba      	ldr	r2, [r7, #8]
 80077ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077ee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80077f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077f2:	699b      	ldr	r3, [r3, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d10a      	bne.n	800780e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80077f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077fc:	f383 8811 	msr	BASEPRI, r3
 8007800:	f3bf 8f6f 	isb	sy
 8007804:	f3bf 8f4f 	dsb	sy
 8007808:	617b      	str	r3, [r7, #20]
}
 800780a:	bf00      	nop
 800780c:	e7fe      	b.n	800780c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800780e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007810:	699a      	ldr	r2, [r3, #24]
 8007812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007814:	18d1      	adds	r1, r2, r3
 8007816:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800781c:	f7ff ff06 	bl	800762c <prvInsertTimerInActiveList>
					break;
 8007820:	e015      	b.n	800784e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007824:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007828:	f003 0302 	and.w	r3, r3, #2
 800782c:	2b00      	cmp	r3, #0
 800782e:	d103      	bne.n	8007838 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007830:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007832:	f000 fc25 	bl	8008080 <vPortFree>
 8007836:	e00a      	b.n	800784e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800783a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800783e:	f023 0301 	bic.w	r3, r3, #1
 8007842:	b2da      	uxtb	r2, r3
 8007844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007846:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800784a:	e000      	b.n	800784e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 800784c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800784e:	4b08      	ldr	r3, [pc, #32]	; (8007870 <prvProcessReceivedCommands+0x1c0>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	1d39      	adds	r1, r7, #4
 8007854:	2200      	movs	r2, #0
 8007856:	4618      	mov	r0, r3
 8007858:	f7fd ff0e 	bl	8005678 <xQueueReceive>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	f47f af2a 	bne.w	80076b8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007864:	bf00      	nop
 8007866:	bf00      	nop
 8007868:	3730      	adds	r7, #48	; 0x30
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}
 800786e:	bf00      	nop
 8007870:	20000eb4 	.word	0x20000eb4

08007874 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800787a:	e048      	b.n	800790e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800787c:	4b2d      	ldr	r3, [pc, #180]	; (8007934 <prvSwitchTimerLists+0xc0>)
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	68db      	ldr	r3, [r3, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007886:	4b2b      	ldr	r3, [pc, #172]	; (8007934 <prvSwitchTimerLists+0xc0>)
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	68db      	ldr	r3, [r3, #12]
 800788e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	3304      	adds	r3, #4
 8007894:	4618      	mov	r0, r3
 8007896:	f7fd fa41 	bl	8004d1c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	6a1b      	ldr	r3, [r3, #32]
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80078a8:	f003 0304 	and.w	r3, r3, #4
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d02e      	beq.n	800790e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	699b      	ldr	r3, [r3, #24]
 80078b4:	693a      	ldr	r2, [r7, #16]
 80078b6:	4413      	add	r3, r2
 80078b8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80078ba:	68ba      	ldr	r2, [r7, #8]
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	429a      	cmp	r2, r3
 80078c0:	d90e      	bls.n	80078e0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	68ba      	ldr	r2, [r7, #8]
 80078c6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	68fa      	ldr	r2, [r7, #12]
 80078cc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80078ce:	4b19      	ldr	r3, [pc, #100]	; (8007934 <prvSwitchTimerLists+0xc0>)
 80078d0:	681a      	ldr	r2, [r3, #0]
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	3304      	adds	r3, #4
 80078d6:	4619      	mov	r1, r3
 80078d8:	4610      	mov	r0, r2
 80078da:	f7fd f9e6 	bl	8004caa <vListInsert>
 80078de:	e016      	b.n	800790e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80078e0:	2300      	movs	r3, #0
 80078e2:	9300      	str	r3, [sp, #0]
 80078e4:	2300      	movs	r3, #0
 80078e6:	693a      	ldr	r2, [r7, #16]
 80078e8:	2100      	movs	r1, #0
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f7ff fd60 	bl	80073b0 <xTimerGenericCommand>
 80078f0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d10a      	bne.n	800790e <prvSwitchTimerLists+0x9a>
	__asm volatile
 80078f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fc:	f383 8811 	msr	BASEPRI, r3
 8007900:	f3bf 8f6f 	isb	sy
 8007904:	f3bf 8f4f 	dsb	sy
 8007908:	603b      	str	r3, [r7, #0]
}
 800790a:	bf00      	nop
 800790c:	e7fe      	b.n	800790c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800790e:	4b09      	ldr	r3, [pc, #36]	; (8007934 <prvSwitchTimerLists+0xc0>)
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d1b1      	bne.n	800787c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007918:	4b06      	ldr	r3, [pc, #24]	; (8007934 <prvSwitchTimerLists+0xc0>)
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800791e:	4b06      	ldr	r3, [pc, #24]	; (8007938 <prvSwitchTimerLists+0xc4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a04      	ldr	r2, [pc, #16]	; (8007934 <prvSwitchTimerLists+0xc0>)
 8007924:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007926:	4a04      	ldr	r2, [pc, #16]	; (8007938 <prvSwitchTimerLists+0xc4>)
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	6013      	str	r3, [r2, #0]
}
 800792c:	bf00      	nop
 800792e:	3718      	adds	r7, #24
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}
 8007934:	20000eac 	.word	0x20000eac
 8007938:	20000eb0 	.word	0x20000eb0

0800793c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007942:	f000 f9af 	bl	8007ca4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007946:	4b15      	ldr	r3, [pc, #84]	; (800799c <prvCheckForValidListAndQueue+0x60>)
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d120      	bne.n	8007990 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800794e:	4814      	ldr	r0, [pc, #80]	; (80079a0 <prvCheckForValidListAndQueue+0x64>)
 8007950:	f7fd f95a 	bl	8004c08 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007954:	4813      	ldr	r0, [pc, #76]	; (80079a4 <prvCheckForValidListAndQueue+0x68>)
 8007956:	f7fd f957 	bl	8004c08 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800795a:	4b13      	ldr	r3, [pc, #76]	; (80079a8 <prvCheckForValidListAndQueue+0x6c>)
 800795c:	4a10      	ldr	r2, [pc, #64]	; (80079a0 <prvCheckForValidListAndQueue+0x64>)
 800795e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007960:	4b12      	ldr	r3, [pc, #72]	; (80079ac <prvCheckForValidListAndQueue+0x70>)
 8007962:	4a10      	ldr	r2, [pc, #64]	; (80079a4 <prvCheckForValidListAndQueue+0x68>)
 8007964:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007966:	2300      	movs	r3, #0
 8007968:	9300      	str	r3, [sp, #0]
 800796a:	4b11      	ldr	r3, [pc, #68]	; (80079b0 <prvCheckForValidListAndQueue+0x74>)
 800796c:	4a11      	ldr	r2, [pc, #68]	; (80079b4 <prvCheckForValidListAndQueue+0x78>)
 800796e:	2110      	movs	r1, #16
 8007970:	200a      	movs	r0, #10
 8007972:	f7fd fa65 	bl	8004e40 <xQueueGenericCreateStatic>
 8007976:	4603      	mov	r3, r0
 8007978:	4a08      	ldr	r2, [pc, #32]	; (800799c <prvCheckForValidListAndQueue+0x60>)
 800797a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800797c:	4b07      	ldr	r3, [pc, #28]	; (800799c <prvCheckForValidListAndQueue+0x60>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d005      	beq.n	8007990 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007984:	4b05      	ldr	r3, [pc, #20]	; (800799c <prvCheckForValidListAndQueue+0x60>)
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	490b      	ldr	r1, [pc, #44]	; (80079b8 <prvCheckForValidListAndQueue+0x7c>)
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fa2c 	bl	8005de8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007990:	f000 f9b8 	bl	8007d04 <vPortExitCritical>
}
 8007994:	bf00      	nop
 8007996:	46bd      	mov	sp, r7
 8007998:	bd80      	pop	{r7, pc}
 800799a:	bf00      	nop
 800799c:	20000eb4 	.word	0x20000eb4
 80079a0:	20000e84 	.word	0x20000e84
 80079a4:	20000e98 	.word	0x20000e98
 80079a8:	20000eac 	.word	0x20000eac
 80079ac:	20000eb0 	.word	0x20000eb0
 80079b0:	20000f60 	.word	0x20000f60
 80079b4:	20000ec0 	.word	0x20000ec0
 80079b8:	080094fc 	.word	0x080094fc

080079bc <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b086      	sub	sp, #24
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <xTimerIsTimerActive+0x28>
	__asm volatile
 80079ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079d2:	f383 8811 	msr	BASEPRI, r3
 80079d6:	f3bf 8f6f 	isb	sy
 80079da:	f3bf 8f4f 	dsb	sy
 80079de:	60fb      	str	r3, [r7, #12]
}
 80079e0:	bf00      	nop
 80079e2:	e7fe      	b.n	80079e2 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 80079e4:	f000 f95e 	bl	8007ca4 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 80079e8:	693b      	ldr	r3, [r7, #16]
 80079ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80079ee:	f003 0301 	and.w	r3, r3, #1
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d102      	bne.n	80079fc <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 80079f6:	2300      	movs	r3, #0
 80079f8:	617b      	str	r3, [r7, #20]
 80079fa:	e001      	b.n	8007a00 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 80079fc:	2301      	movs	r3, #1
 80079fe:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007a00:	f000 f980 	bl	8007d04 <vPortExitCritical>

	return xReturn;
 8007a04:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d10a      	bne.n	8007a36 <pvTimerGetTimerID+0x28>
	__asm volatile
 8007a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a24:	f383 8811 	msr	BASEPRI, r3
 8007a28:	f3bf 8f6f 	isb	sy
 8007a2c:	f3bf 8f4f 	dsb	sy
 8007a30:	60fb      	str	r3, [r7, #12]
}
 8007a32:	bf00      	nop
 8007a34:	e7fe      	b.n	8007a34 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007a36:	f000 f935 	bl	8007ca4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007a3a:	697b      	ldr	r3, [r7, #20]
 8007a3c:	69db      	ldr	r3, [r3, #28]
 8007a3e:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007a40:	f000 f960 	bl	8007d04 <vPortExitCritical>

	return pvReturn;
 8007a44:	693b      	ldr	r3, [r7, #16]
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3718      	adds	r7, #24
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
	...

08007a50 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007a50:	b480      	push	{r7}
 8007a52:	b085      	sub	sp, #20
 8007a54:	af00      	add	r7, sp, #0
 8007a56:	60f8      	str	r0, [r7, #12]
 8007a58:	60b9      	str	r1, [r7, #8]
 8007a5a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	3b04      	subs	r3, #4
 8007a60:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007a68:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	3b04      	subs	r3, #4
 8007a6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	f023 0201 	bic.w	r2, r3, #1
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	3b04      	subs	r3, #4
 8007a7e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007a80:	4a0c      	ldr	r2, [pc, #48]	; (8007ab4 <pxPortInitialiseStack+0x64>)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	3b14      	subs	r3, #20
 8007a8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007a8c:	687a      	ldr	r2, [r7, #4]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	3b04      	subs	r3, #4
 8007a96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f06f 0202 	mvn.w	r2, #2
 8007a9e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	3b20      	subs	r3, #32
 8007aa4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007aa6:	68fb      	ldr	r3, [r7, #12]
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3714      	adds	r7, #20
 8007aac:	46bd      	mov	sp, r7
 8007aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab2:	4770      	bx	lr
 8007ab4:	08007ab9 	.word	0x08007ab9

08007ab8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b085      	sub	sp, #20
 8007abc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007abe:	2300      	movs	r3, #0
 8007ac0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007ac2:	4b12      	ldr	r3, [pc, #72]	; (8007b0c <prvTaskExitError+0x54>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007aca:	d00a      	beq.n	8007ae2 <prvTaskExitError+0x2a>
	__asm volatile
 8007acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ad0:	f383 8811 	msr	BASEPRI, r3
 8007ad4:	f3bf 8f6f 	isb	sy
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	60fb      	str	r3, [r7, #12]
}
 8007ade:	bf00      	nop
 8007ae0:	e7fe      	b.n	8007ae0 <prvTaskExitError+0x28>
	__asm volatile
 8007ae2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ae6:	f383 8811 	msr	BASEPRI, r3
 8007aea:	f3bf 8f6f 	isb	sy
 8007aee:	f3bf 8f4f 	dsb	sy
 8007af2:	60bb      	str	r3, [r7, #8]
}
 8007af4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007af6:	bf00      	nop
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d0fc      	beq.n	8007af8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007afe:	bf00      	nop
 8007b00:	bf00      	nop
 8007b02:	3714      	adds	r7, #20
 8007b04:	46bd      	mov	sp, r7
 8007b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b0a:	4770      	bx	lr
 8007b0c:	20000010 	.word	0x20000010

08007b10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007b10:	4b07      	ldr	r3, [pc, #28]	; (8007b30 <pxCurrentTCBConst2>)
 8007b12:	6819      	ldr	r1, [r3, #0]
 8007b14:	6808      	ldr	r0, [r1, #0]
 8007b16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b1a:	f380 8809 	msr	PSP, r0
 8007b1e:	f3bf 8f6f 	isb	sy
 8007b22:	f04f 0000 	mov.w	r0, #0
 8007b26:	f380 8811 	msr	BASEPRI, r0
 8007b2a:	4770      	bx	lr
 8007b2c:	f3af 8000 	nop.w

08007b30 <pxCurrentTCBConst2>:
 8007b30:	20000984 	.word	0x20000984
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007b34:	bf00      	nop
 8007b36:	bf00      	nop

08007b38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007b38:	4808      	ldr	r0, [pc, #32]	; (8007b5c <prvPortStartFirstTask+0x24>)
 8007b3a:	6800      	ldr	r0, [r0, #0]
 8007b3c:	6800      	ldr	r0, [r0, #0]
 8007b3e:	f380 8808 	msr	MSP, r0
 8007b42:	f04f 0000 	mov.w	r0, #0
 8007b46:	f380 8814 	msr	CONTROL, r0
 8007b4a:	b662      	cpsie	i
 8007b4c:	b661      	cpsie	f
 8007b4e:	f3bf 8f4f 	dsb	sy
 8007b52:	f3bf 8f6f 	isb	sy
 8007b56:	df00      	svc	0
 8007b58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007b5a:	bf00      	nop
 8007b5c:	e000ed08 	.word	0xe000ed08

08007b60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b086      	sub	sp, #24
 8007b64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007b66:	4b46      	ldr	r3, [pc, #280]	; (8007c80 <xPortStartScheduler+0x120>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	4a46      	ldr	r2, [pc, #280]	; (8007c84 <xPortStartScheduler+0x124>)
 8007b6c:	4293      	cmp	r3, r2
 8007b6e:	d10a      	bne.n	8007b86 <xPortStartScheduler+0x26>
	__asm volatile
 8007b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	613b      	str	r3, [r7, #16]
}
 8007b82:	bf00      	nop
 8007b84:	e7fe      	b.n	8007b84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007b86:	4b3e      	ldr	r3, [pc, #248]	; (8007c80 <xPortStartScheduler+0x120>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a3f      	ldr	r2, [pc, #252]	; (8007c88 <xPortStartScheduler+0x128>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d10a      	bne.n	8007ba6 <xPortStartScheduler+0x46>
	__asm volatile
 8007b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b94:	f383 8811 	msr	BASEPRI, r3
 8007b98:	f3bf 8f6f 	isb	sy
 8007b9c:	f3bf 8f4f 	dsb	sy
 8007ba0:	60fb      	str	r3, [r7, #12]
}
 8007ba2:	bf00      	nop
 8007ba4:	e7fe      	b.n	8007ba4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ba6:	4b39      	ldr	r3, [pc, #228]	; (8007c8c <xPortStartScheduler+0x12c>)
 8007ba8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	781b      	ldrb	r3, [r3, #0]
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	22ff      	movs	r2, #255	; 0xff
 8007bb6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007bb8:	697b      	ldr	r3, [r7, #20]
 8007bba:	781b      	ldrb	r3, [r3, #0]
 8007bbc:	b2db      	uxtb	r3, r3
 8007bbe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	b2db      	uxtb	r3, r3
 8007bc4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007bc8:	b2da      	uxtb	r2, r3
 8007bca:	4b31      	ldr	r3, [pc, #196]	; (8007c90 <xPortStartScheduler+0x130>)
 8007bcc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007bce:	4b31      	ldr	r3, [pc, #196]	; (8007c94 <xPortStartScheduler+0x134>)
 8007bd0:	2207      	movs	r2, #7
 8007bd2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bd4:	e009      	b.n	8007bea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007bd6:	4b2f      	ldr	r3, [pc, #188]	; (8007c94 <xPortStartScheduler+0x134>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	3b01      	subs	r3, #1
 8007bdc:	4a2d      	ldr	r2, [pc, #180]	; (8007c94 <xPortStartScheduler+0x134>)
 8007bde:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007be0:	78fb      	ldrb	r3, [r7, #3]
 8007be2:	b2db      	uxtb	r3, r3
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	b2db      	uxtb	r3, r3
 8007be8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007bea:	78fb      	ldrb	r3, [r7, #3]
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007bf2:	2b80      	cmp	r3, #128	; 0x80
 8007bf4:	d0ef      	beq.n	8007bd6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007bf6:	4b27      	ldr	r3, [pc, #156]	; (8007c94 <xPortStartScheduler+0x134>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f1c3 0307 	rsb	r3, r3, #7
 8007bfe:	2b04      	cmp	r3, #4
 8007c00:	d00a      	beq.n	8007c18 <xPortStartScheduler+0xb8>
	__asm volatile
 8007c02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c06:	f383 8811 	msr	BASEPRI, r3
 8007c0a:	f3bf 8f6f 	isb	sy
 8007c0e:	f3bf 8f4f 	dsb	sy
 8007c12:	60bb      	str	r3, [r7, #8]
}
 8007c14:	bf00      	nop
 8007c16:	e7fe      	b.n	8007c16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007c18:	4b1e      	ldr	r3, [pc, #120]	; (8007c94 <xPortStartScheduler+0x134>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	021b      	lsls	r3, r3, #8
 8007c1e:	4a1d      	ldr	r2, [pc, #116]	; (8007c94 <xPortStartScheduler+0x134>)
 8007c20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007c22:	4b1c      	ldr	r3, [pc, #112]	; (8007c94 <xPortStartScheduler+0x134>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007c2a:	4a1a      	ldr	r2, [pc, #104]	; (8007c94 <xPortStartScheduler+0x134>)
 8007c2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	b2da      	uxtb	r2, r3
 8007c32:	697b      	ldr	r3, [r7, #20]
 8007c34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007c36:	4b18      	ldr	r3, [pc, #96]	; (8007c98 <xPortStartScheduler+0x138>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a17      	ldr	r2, [pc, #92]	; (8007c98 <xPortStartScheduler+0x138>)
 8007c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007c40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007c42:	4b15      	ldr	r3, [pc, #84]	; (8007c98 <xPortStartScheduler+0x138>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	4a14      	ldr	r2, [pc, #80]	; (8007c98 <xPortStartScheduler+0x138>)
 8007c48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007c4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007c4e:	f000 f8dd 	bl	8007e0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007c52:	4b12      	ldr	r3, [pc, #72]	; (8007c9c <xPortStartScheduler+0x13c>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007c58:	f000 f8fc 	bl	8007e54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007c5c:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <xPortStartScheduler+0x140>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	4a0f      	ldr	r2, [pc, #60]	; (8007ca0 <xPortStartScheduler+0x140>)
 8007c62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007c66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007c68:	f7ff ff66 	bl	8007b38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007c6c:	f7fe fd16 	bl	800669c <vTaskSwitchContext>
	prvTaskExitError();
 8007c70:	f7ff ff22 	bl	8007ab8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3718      	adds	r7, #24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	bd80      	pop	{r7, pc}
 8007c7e:	bf00      	nop
 8007c80:	e000ed00 	.word	0xe000ed00
 8007c84:	410fc271 	.word	0x410fc271
 8007c88:	410fc270 	.word	0x410fc270
 8007c8c:	e000e400 	.word	0xe000e400
 8007c90:	20000fb0 	.word	0x20000fb0
 8007c94:	20000fb4 	.word	0x20000fb4
 8007c98:	e000ed20 	.word	0xe000ed20
 8007c9c:	20000010 	.word	0x20000010
 8007ca0:	e000ef34 	.word	0xe000ef34

08007ca4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
	__asm volatile
 8007caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cae:	f383 8811 	msr	BASEPRI, r3
 8007cb2:	f3bf 8f6f 	isb	sy
 8007cb6:	f3bf 8f4f 	dsb	sy
 8007cba:	607b      	str	r3, [r7, #4]
}
 8007cbc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007cbe:	4b0f      	ldr	r3, [pc, #60]	; (8007cfc <vPortEnterCritical+0x58>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	3301      	adds	r3, #1
 8007cc4:	4a0d      	ldr	r2, [pc, #52]	; (8007cfc <vPortEnterCritical+0x58>)
 8007cc6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007cc8:	4b0c      	ldr	r3, [pc, #48]	; (8007cfc <vPortEnterCritical+0x58>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d10f      	bne.n	8007cf0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007cd0:	4b0b      	ldr	r3, [pc, #44]	; (8007d00 <vPortEnterCritical+0x5c>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d00a      	beq.n	8007cf0 <vPortEnterCritical+0x4c>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	603b      	str	r3, [r7, #0]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <vPortEnterCritical+0x4a>
	}
}
 8007cf0:	bf00      	nop
 8007cf2:	370c      	adds	r7, #12
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfa:	4770      	bx	lr
 8007cfc:	20000010 	.word	0x20000010
 8007d00:	e000ed04 	.word	0xe000ed04

08007d04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007d04:	b480      	push	{r7}
 8007d06:	b083      	sub	sp, #12
 8007d08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007d0a:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <vPortExitCritical+0x50>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d10a      	bne.n	8007d28 <vPortExitCritical+0x24>
	__asm volatile
 8007d12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d16:	f383 8811 	msr	BASEPRI, r3
 8007d1a:	f3bf 8f6f 	isb	sy
 8007d1e:	f3bf 8f4f 	dsb	sy
 8007d22:	607b      	str	r3, [r7, #4]
}
 8007d24:	bf00      	nop
 8007d26:	e7fe      	b.n	8007d26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007d28:	4b0a      	ldr	r3, [pc, #40]	; (8007d54 <vPortExitCritical+0x50>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	4a09      	ldr	r2, [pc, #36]	; (8007d54 <vPortExitCritical+0x50>)
 8007d30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007d32:	4b08      	ldr	r3, [pc, #32]	; (8007d54 <vPortExitCritical+0x50>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d105      	bne.n	8007d46 <vPortExitCritical+0x42>
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	f383 8811 	msr	BASEPRI, r3
}
 8007d44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007d46:	bf00      	nop
 8007d48:	370c      	adds	r7, #12
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20000010 	.word	0x20000010
	...

08007d60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007d60:	f3ef 8009 	mrs	r0, PSP
 8007d64:	f3bf 8f6f 	isb	sy
 8007d68:	4b15      	ldr	r3, [pc, #84]	; (8007dc0 <pxCurrentTCBConst>)
 8007d6a:	681a      	ldr	r2, [r3, #0]
 8007d6c:	f01e 0f10 	tst.w	lr, #16
 8007d70:	bf08      	it	eq
 8007d72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007d76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d7a:	6010      	str	r0, [r2, #0]
 8007d7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007d80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007d84:	f380 8811 	msr	BASEPRI, r0
 8007d88:	f3bf 8f4f 	dsb	sy
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f7fe fc84 	bl	800669c <vTaskSwitchContext>
 8007d94:	f04f 0000 	mov.w	r0, #0
 8007d98:	f380 8811 	msr	BASEPRI, r0
 8007d9c:	bc09      	pop	{r0, r3}
 8007d9e:	6819      	ldr	r1, [r3, #0]
 8007da0:	6808      	ldr	r0, [r1, #0]
 8007da2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007da6:	f01e 0f10 	tst.w	lr, #16
 8007daa:	bf08      	it	eq
 8007dac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007db0:	f380 8809 	msr	PSP, r0
 8007db4:	f3bf 8f6f 	isb	sy
 8007db8:	4770      	bx	lr
 8007dba:	bf00      	nop
 8007dbc:	f3af 8000 	nop.w

08007dc0 <pxCurrentTCBConst>:
 8007dc0:	20000984 	.word	0x20000984
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007dc4:	bf00      	nop
 8007dc6:	bf00      	nop

08007dc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b082      	sub	sp, #8
 8007dcc:	af00      	add	r7, sp, #0
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	607b      	str	r3, [r7, #4]
}
 8007de0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007de2:	f7fe fba1 	bl	8006528 <xTaskIncrementTick>
 8007de6:	4603      	mov	r3, r0
 8007de8:	2b00      	cmp	r3, #0
 8007dea:	d003      	beq.n	8007df4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007dec:	4b06      	ldr	r3, [pc, #24]	; (8007e08 <xPortSysTickHandler+0x40>)
 8007dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007df2:	601a      	str	r2, [r3, #0]
 8007df4:	2300      	movs	r3, #0
 8007df6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007df8:	683b      	ldr	r3, [r7, #0]
 8007dfa:	f383 8811 	msr	BASEPRI, r3
}
 8007dfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007e00:	bf00      	nop
 8007e02:	3708      	adds	r7, #8
 8007e04:	46bd      	mov	sp, r7
 8007e06:	bd80      	pop	{r7, pc}
 8007e08:	e000ed04 	.word	0xe000ed04

08007e0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007e10:	4b0b      	ldr	r3, [pc, #44]	; (8007e40 <vPortSetupTimerInterrupt+0x34>)
 8007e12:	2200      	movs	r2, #0
 8007e14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007e16:	4b0b      	ldr	r3, [pc, #44]	; (8007e44 <vPortSetupTimerInterrupt+0x38>)
 8007e18:	2200      	movs	r2, #0
 8007e1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007e1c:	4b0a      	ldr	r3, [pc, #40]	; (8007e48 <vPortSetupTimerInterrupt+0x3c>)
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	4a0a      	ldr	r2, [pc, #40]	; (8007e4c <vPortSetupTimerInterrupt+0x40>)
 8007e22:	fba2 2303 	umull	r2, r3, r2, r3
 8007e26:	099b      	lsrs	r3, r3, #6
 8007e28:	4a09      	ldr	r2, [pc, #36]	; (8007e50 <vPortSetupTimerInterrupt+0x44>)
 8007e2a:	3b01      	subs	r3, #1
 8007e2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007e2e:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <vPortSetupTimerInterrupt+0x34>)
 8007e30:	2207      	movs	r2, #7
 8007e32:	601a      	str	r2, [r3, #0]
}
 8007e34:	bf00      	nop
 8007e36:	46bd      	mov	sp, r7
 8007e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3c:	4770      	bx	lr
 8007e3e:	bf00      	nop
 8007e40:	e000e010 	.word	0xe000e010
 8007e44:	e000e018 	.word	0xe000e018
 8007e48:	20000004 	.word	0x20000004
 8007e4c:	10624dd3 	.word	0x10624dd3
 8007e50:	e000e014 	.word	0xe000e014

08007e54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007e54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007e64 <vPortEnableVFP+0x10>
 8007e58:	6801      	ldr	r1, [r0, #0]
 8007e5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007e5e:	6001      	str	r1, [r0, #0]
 8007e60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007e62:	bf00      	nop
 8007e64:	e000ed88 	.word	0xe000ed88

08007e68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007e6e:	f3ef 8305 	mrs	r3, IPSR
 8007e72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2b0f      	cmp	r3, #15
 8007e78:	d914      	bls.n	8007ea4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007e7a:	4a17      	ldr	r2, [pc, #92]	; (8007ed8 <vPortValidateInterruptPriority+0x70>)
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	4413      	add	r3, r2
 8007e80:	781b      	ldrb	r3, [r3, #0]
 8007e82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007e84:	4b15      	ldr	r3, [pc, #84]	; (8007edc <vPortValidateInterruptPriority+0x74>)
 8007e86:	781b      	ldrb	r3, [r3, #0]
 8007e88:	7afa      	ldrb	r2, [r7, #11]
 8007e8a:	429a      	cmp	r2, r3
 8007e8c:	d20a      	bcs.n	8007ea4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e92:	f383 8811 	msr	BASEPRI, r3
 8007e96:	f3bf 8f6f 	isb	sy
 8007e9a:	f3bf 8f4f 	dsb	sy
 8007e9e:	607b      	str	r3, [r7, #4]
}
 8007ea0:	bf00      	nop
 8007ea2:	e7fe      	b.n	8007ea2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	; (8007ee0 <vPortValidateInterruptPriority+0x78>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007eac:	4b0d      	ldr	r3, [pc, #52]	; (8007ee4 <vPortValidateInterruptPriority+0x7c>)
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	429a      	cmp	r2, r3
 8007eb2:	d90a      	bls.n	8007eca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb8:	f383 8811 	msr	BASEPRI, r3
 8007ebc:	f3bf 8f6f 	isb	sy
 8007ec0:	f3bf 8f4f 	dsb	sy
 8007ec4:	603b      	str	r3, [r7, #0]
}
 8007ec6:	bf00      	nop
 8007ec8:	e7fe      	b.n	8007ec8 <vPortValidateInterruptPriority+0x60>
	}
 8007eca:	bf00      	nop
 8007ecc:	3714      	adds	r7, #20
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed4:	4770      	bx	lr
 8007ed6:	bf00      	nop
 8007ed8:	e000e3f0 	.word	0xe000e3f0
 8007edc:	20000fb0 	.word	0x20000fb0
 8007ee0:	e000ed0c 	.word	0xe000ed0c
 8007ee4:	20000fb4 	.word	0x20000fb4

08007ee8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b08a      	sub	sp, #40	; 0x28
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007ef0:	2300      	movs	r3, #0
 8007ef2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007ef4:	f7fe fa5c 	bl	80063b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007ef8:	4b5b      	ldr	r3, [pc, #364]	; (8008068 <pvPortMalloc+0x180>)
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d101      	bne.n	8007f04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007f00:	f000 f920 	bl	8008144 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007f04:	4b59      	ldr	r3, [pc, #356]	; (800806c <pvPortMalloc+0x184>)
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4013      	ands	r3, r2
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	f040 8093 	bne.w	8008038 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d01d      	beq.n	8007f54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007f18:	2208      	movs	r2, #8
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	f003 0307 	and.w	r3, r3, #7
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d014      	beq.n	8007f54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f023 0307 	bic.w	r3, r3, #7
 8007f30:	3308      	adds	r3, #8
 8007f32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00a      	beq.n	8007f54 <pvPortMalloc+0x6c>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	617b      	str	r3, [r7, #20]
}
 8007f50:	bf00      	nop
 8007f52:	e7fe      	b.n	8007f52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d06e      	beq.n	8008038 <pvPortMalloc+0x150>
 8007f5a:	4b45      	ldr	r3, [pc, #276]	; (8008070 <pvPortMalloc+0x188>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d869      	bhi.n	8008038 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007f64:	4b43      	ldr	r3, [pc, #268]	; (8008074 <pvPortMalloc+0x18c>)
 8007f66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007f68:	4b42      	ldr	r3, [pc, #264]	; (8008074 <pvPortMalloc+0x18c>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f6e:	e004      	b.n	8007f7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d903      	bls.n	8007f8c <pvPortMalloc+0xa4>
 8007f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1f1      	bne.n	8007f70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007f8c:	4b36      	ldr	r3, [pc, #216]	; (8008068 <pvPortMalloc+0x180>)
 8007f8e:	681b      	ldr	r3, [r3, #0]
 8007f90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f92:	429a      	cmp	r2, r3
 8007f94:	d050      	beq.n	8008038 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007f96:	6a3b      	ldr	r3, [r7, #32]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	2208      	movs	r2, #8
 8007f9c:	4413      	add	r3, r2
 8007f9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	681a      	ldr	r2, [r3, #0]
 8007fa4:	6a3b      	ldr	r3, [r7, #32]
 8007fa6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007faa:	685a      	ldr	r2, [r3, #4]
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	2308      	movs	r3, #8
 8007fb2:	005b      	lsls	r3, r3, #1
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d91f      	bls.n	8007ff8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007fb8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4413      	add	r3, r2
 8007fbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007fc0:	69bb      	ldr	r3, [r7, #24]
 8007fc2:	f003 0307 	and.w	r3, r3, #7
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00a      	beq.n	8007fe0 <pvPortMalloc+0xf8>
	__asm volatile
 8007fca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fce:	f383 8811 	msr	BASEPRI, r3
 8007fd2:	f3bf 8f6f 	isb	sy
 8007fd6:	f3bf 8f4f 	dsb	sy
 8007fda:	613b      	str	r3, [r7, #16]
}
 8007fdc:	bf00      	nop
 8007fde:	e7fe      	b.n	8007fde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fe2:	685a      	ldr	r2, [r3, #4]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	1ad2      	subs	r2, r2, r3
 8007fe8:	69bb      	ldr	r3, [r7, #24]
 8007fea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007ff2:	69b8      	ldr	r0, [r7, #24]
 8007ff4:	f000 f908 	bl	8008208 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ff8:	4b1d      	ldr	r3, [pc, #116]	; (8008070 <pvPortMalloc+0x188>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ffe:	685b      	ldr	r3, [r3, #4]
 8008000:	1ad3      	subs	r3, r2, r3
 8008002:	4a1b      	ldr	r2, [pc, #108]	; (8008070 <pvPortMalloc+0x188>)
 8008004:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008006:	4b1a      	ldr	r3, [pc, #104]	; (8008070 <pvPortMalloc+0x188>)
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	4b1b      	ldr	r3, [pc, #108]	; (8008078 <pvPortMalloc+0x190>)
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	429a      	cmp	r2, r3
 8008010:	d203      	bcs.n	800801a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008012:	4b17      	ldr	r3, [pc, #92]	; (8008070 <pvPortMalloc+0x188>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	4a18      	ldr	r2, [pc, #96]	; (8008078 <pvPortMalloc+0x190>)
 8008018:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800801a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801c:	685a      	ldr	r2, [r3, #4]
 800801e:	4b13      	ldr	r3, [pc, #76]	; (800806c <pvPortMalloc+0x184>)
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	431a      	orrs	r2, r3
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802a:	2200      	movs	r2, #0
 800802c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800802e:	4b13      	ldr	r3, [pc, #76]	; (800807c <pvPortMalloc+0x194>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	3301      	adds	r3, #1
 8008034:	4a11      	ldr	r2, [pc, #68]	; (800807c <pvPortMalloc+0x194>)
 8008036:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008038:	f7fe f9c8 	bl	80063cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	2b00      	cmp	r3, #0
 8008044:	d00a      	beq.n	800805c <pvPortMalloc+0x174>
	__asm volatile
 8008046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800804a:	f383 8811 	msr	BASEPRI, r3
 800804e:	f3bf 8f6f 	isb	sy
 8008052:	f3bf 8f4f 	dsb	sy
 8008056:	60fb      	str	r3, [r7, #12]
}
 8008058:	bf00      	nop
 800805a:	e7fe      	b.n	800805a <pvPortMalloc+0x172>
	return pvReturn;
 800805c:	69fb      	ldr	r3, [r7, #28]
}
 800805e:	4618      	mov	r0, r3
 8008060:	3728      	adds	r7, #40	; 0x28
 8008062:	46bd      	mov	sp, r7
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20004a58 	.word	0x20004a58
 800806c:	20004a6c 	.word	0x20004a6c
 8008070:	20004a5c 	.word	0x20004a5c
 8008074:	20004a50 	.word	0x20004a50
 8008078:	20004a60 	.word	0x20004a60
 800807c:	20004a64 	.word	0x20004a64

08008080 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b086      	sub	sp, #24
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d04d      	beq.n	800812e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008092:	2308      	movs	r3, #8
 8008094:	425b      	negs	r3, r3
 8008096:	697a      	ldr	r2, [r7, #20]
 8008098:	4413      	add	r3, r2
 800809a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800809c:	697b      	ldr	r3, [r7, #20]
 800809e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	685a      	ldr	r2, [r3, #4]
 80080a4:	4b24      	ldr	r3, [pc, #144]	; (8008138 <vPortFree+0xb8>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	4013      	ands	r3, r2
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	d10a      	bne.n	80080c4 <vPortFree+0x44>
	__asm volatile
 80080ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b2:	f383 8811 	msr	BASEPRI, r3
 80080b6:	f3bf 8f6f 	isb	sy
 80080ba:	f3bf 8f4f 	dsb	sy
 80080be:	60fb      	str	r3, [r7, #12]
}
 80080c0:	bf00      	nop
 80080c2:	e7fe      	b.n	80080c2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80080c4:	693b      	ldr	r3, [r7, #16]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d00a      	beq.n	80080e2 <vPortFree+0x62>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	f383 8811 	msr	BASEPRI, r3
 80080d4:	f3bf 8f6f 	isb	sy
 80080d8:	f3bf 8f4f 	dsb	sy
 80080dc:	60bb      	str	r3, [r7, #8]
}
 80080de:	bf00      	nop
 80080e0:	e7fe      	b.n	80080e0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80080e2:	693b      	ldr	r3, [r7, #16]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	4b14      	ldr	r3, [pc, #80]	; (8008138 <vPortFree+0xb8>)
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4013      	ands	r3, r2
 80080ec:	2b00      	cmp	r3, #0
 80080ee:	d01e      	beq.n	800812e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80080f0:	693b      	ldr	r3, [r7, #16]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d11a      	bne.n	800812e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	4b0e      	ldr	r3, [pc, #56]	; (8008138 <vPortFree+0xb8>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	43db      	mvns	r3, r3
 8008102:	401a      	ands	r2, r3
 8008104:	693b      	ldr	r3, [r7, #16]
 8008106:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008108:	f7fe f952 	bl	80063b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	4b0a      	ldr	r3, [pc, #40]	; (800813c <vPortFree+0xbc>)
 8008112:	681b      	ldr	r3, [r3, #0]
 8008114:	4413      	add	r3, r2
 8008116:	4a09      	ldr	r2, [pc, #36]	; (800813c <vPortFree+0xbc>)
 8008118:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800811a:	6938      	ldr	r0, [r7, #16]
 800811c:	f000 f874 	bl	8008208 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <vPortFree+0xc0>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	3301      	adds	r3, #1
 8008126:	4a06      	ldr	r2, [pc, #24]	; (8008140 <vPortFree+0xc0>)
 8008128:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800812a:	f7fe f94f 	bl	80063cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800812e:	bf00      	nop
 8008130:	3718      	adds	r7, #24
 8008132:	46bd      	mov	sp, r7
 8008134:	bd80      	pop	{r7, pc}
 8008136:	bf00      	nop
 8008138:	20004a6c 	.word	0x20004a6c
 800813c:	20004a5c 	.word	0x20004a5c
 8008140:	20004a68 	.word	0x20004a68

08008144 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008144:	b480      	push	{r7}
 8008146:	b085      	sub	sp, #20
 8008148:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800814a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800814e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008150:	4b27      	ldr	r3, [pc, #156]	; (80081f0 <prvHeapInit+0xac>)
 8008152:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	f003 0307 	and.w	r3, r3, #7
 800815a:	2b00      	cmp	r3, #0
 800815c:	d00c      	beq.n	8008178 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	3307      	adds	r3, #7
 8008162:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	f023 0307 	bic.w	r3, r3, #7
 800816a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800816c:	68ba      	ldr	r2, [r7, #8]
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	1ad3      	subs	r3, r2, r3
 8008172:	4a1f      	ldr	r2, [pc, #124]	; (80081f0 <prvHeapInit+0xac>)
 8008174:	4413      	add	r3, r2
 8008176:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800817c:	4a1d      	ldr	r2, [pc, #116]	; (80081f4 <prvHeapInit+0xb0>)
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008182:	4b1c      	ldr	r3, [pc, #112]	; (80081f4 <prvHeapInit+0xb0>)
 8008184:	2200      	movs	r2, #0
 8008186:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	68ba      	ldr	r2, [r7, #8]
 800818c:	4413      	add	r3, r2
 800818e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008190:	2208      	movs	r2, #8
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	1a9b      	subs	r3, r3, r2
 8008196:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	f023 0307 	bic.w	r3, r3, #7
 800819e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	4a15      	ldr	r2, [pc, #84]	; (80081f8 <prvHeapInit+0xb4>)
 80081a4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80081a6:	4b14      	ldr	r3, [pc, #80]	; (80081f8 <prvHeapInit+0xb4>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	2200      	movs	r2, #0
 80081ac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80081ae:	4b12      	ldr	r3, [pc, #72]	; (80081f8 <prvHeapInit+0xb4>)
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	2200      	movs	r2, #0
 80081b4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80081ba:	683b      	ldr	r3, [r7, #0]
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	1ad2      	subs	r2, r2, r3
 80081c0:	683b      	ldr	r3, [r7, #0]
 80081c2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80081c4:	4b0c      	ldr	r3, [pc, #48]	; (80081f8 <prvHeapInit+0xb4>)
 80081c6:	681a      	ldr	r2, [r3, #0]
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081cc:	683b      	ldr	r3, [r7, #0]
 80081ce:	685b      	ldr	r3, [r3, #4]
 80081d0:	4a0a      	ldr	r2, [pc, #40]	; (80081fc <prvHeapInit+0xb8>)
 80081d2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	4a09      	ldr	r2, [pc, #36]	; (8008200 <prvHeapInit+0xbc>)
 80081da:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80081dc:	4b09      	ldr	r3, [pc, #36]	; (8008204 <prvHeapInit+0xc0>)
 80081de:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80081e2:	601a      	str	r2, [r3, #0]
}
 80081e4:	bf00      	nop
 80081e6:	3714      	adds	r7, #20
 80081e8:	46bd      	mov	sp, r7
 80081ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ee:	4770      	bx	lr
 80081f0:	20000fb8 	.word	0x20000fb8
 80081f4:	20004a50 	.word	0x20004a50
 80081f8:	20004a58 	.word	0x20004a58
 80081fc:	20004a60 	.word	0x20004a60
 8008200:	20004a5c 	.word	0x20004a5c
 8008204:	20004a6c 	.word	0x20004a6c

08008208 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008208:	b480      	push	{r7}
 800820a:	b085      	sub	sp, #20
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008210:	4b28      	ldr	r3, [pc, #160]	; (80082b4 <prvInsertBlockIntoFreeList+0xac>)
 8008212:	60fb      	str	r3, [r7, #12]
 8008214:	e002      	b.n	800821c <prvInsertBlockIntoFreeList+0x14>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	60fb      	str	r3, [r7, #12]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	429a      	cmp	r2, r3
 8008224:	d8f7      	bhi.n	8008216 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008226:	68fb      	ldr	r3, [r7, #12]
 8008228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	4413      	add	r3, r2
 8008232:	687a      	ldr	r2, [r7, #4]
 8008234:	429a      	cmp	r2, r3
 8008236:	d108      	bne.n	800824a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	685a      	ldr	r2, [r3, #4]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	441a      	add	r2, r3
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008246:	68fb      	ldr	r3, [r7, #12]
 8008248:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	685b      	ldr	r3, [r3, #4]
 8008252:	68ba      	ldr	r2, [r7, #8]
 8008254:	441a      	add	r2, r3
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	429a      	cmp	r2, r3
 800825c:	d118      	bne.n	8008290 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	681a      	ldr	r2, [r3, #0]
 8008262:	4b15      	ldr	r3, [pc, #84]	; (80082b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	429a      	cmp	r2, r3
 8008268:	d00d      	beq.n	8008286 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	441a      	add	r2, r3
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	681a      	ldr	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	601a      	str	r2, [r3, #0]
 8008284:	e008      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008286:	4b0c      	ldr	r3, [pc, #48]	; (80082b8 <prvInsertBlockIntoFreeList+0xb0>)
 8008288:	681a      	ldr	r2, [r3, #0]
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	601a      	str	r2, [r3, #0]
 800828e:	e003      	b.n	8008298 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681a      	ldr	r2, [r3, #0]
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	429a      	cmp	r2, r3
 800829e:	d002      	beq.n	80082a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80082a6:	bf00      	nop
 80082a8:	3714      	adds	r7, #20
 80082aa:	46bd      	mov	sp, r7
 80082ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b0:	4770      	bx	lr
 80082b2:	bf00      	nop
 80082b4:	20004a50 	.word	0x20004a50
 80082b8:	20004a58 	.word	0x20004a58

080082bc <srand>:
 80082bc:	b538      	push	{r3, r4, r5, lr}
 80082be:	4b10      	ldr	r3, [pc, #64]	; (8008300 <srand+0x44>)
 80082c0:	681d      	ldr	r5, [r3, #0]
 80082c2:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80082c4:	4604      	mov	r4, r0
 80082c6:	b9b3      	cbnz	r3, 80082f6 <srand+0x3a>
 80082c8:	2018      	movs	r0, #24
 80082ca:	f000 fb7f 	bl	80089cc <malloc>
 80082ce:	4602      	mov	r2, r0
 80082d0:	6328      	str	r0, [r5, #48]	; 0x30
 80082d2:	b920      	cbnz	r0, 80082de <srand+0x22>
 80082d4:	4b0b      	ldr	r3, [pc, #44]	; (8008304 <srand+0x48>)
 80082d6:	480c      	ldr	r0, [pc, #48]	; (8008308 <srand+0x4c>)
 80082d8:	2146      	movs	r1, #70	; 0x46
 80082da:	f000 f9c9 	bl	8008670 <__assert_func>
 80082de:	490b      	ldr	r1, [pc, #44]	; (800830c <srand+0x50>)
 80082e0:	4b0b      	ldr	r3, [pc, #44]	; (8008310 <srand+0x54>)
 80082e2:	e9c0 1300 	strd	r1, r3, [r0]
 80082e6:	4b0b      	ldr	r3, [pc, #44]	; (8008314 <srand+0x58>)
 80082e8:	6083      	str	r3, [r0, #8]
 80082ea:	230b      	movs	r3, #11
 80082ec:	8183      	strh	r3, [r0, #12]
 80082ee:	2100      	movs	r1, #0
 80082f0:	2001      	movs	r0, #1
 80082f2:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80082f6:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80082f8:	2200      	movs	r2, #0
 80082fa:	611c      	str	r4, [r3, #16]
 80082fc:	615a      	str	r2, [r3, #20]
 80082fe:	bd38      	pop	{r3, r4, r5, pc}
 8008300:	2000006c 	.word	0x2000006c
 8008304:	080096b8 	.word	0x080096b8
 8008308:	080096cf 	.word	0x080096cf
 800830c:	abcd330e 	.word	0xabcd330e
 8008310:	e66d1234 	.word	0xe66d1234
 8008314:	0005deec 	.word	0x0005deec

08008318 <rand>:
 8008318:	4b16      	ldr	r3, [pc, #88]	; (8008374 <rand+0x5c>)
 800831a:	b510      	push	{r4, lr}
 800831c:	681c      	ldr	r4, [r3, #0]
 800831e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8008320:	b9b3      	cbnz	r3, 8008350 <rand+0x38>
 8008322:	2018      	movs	r0, #24
 8008324:	f000 fb52 	bl	80089cc <malloc>
 8008328:	4602      	mov	r2, r0
 800832a:	6320      	str	r0, [r4, #48]	; 0x30
 800832c:	b920      	cbnz	r0, 8008338 <rand+0x20>
 800832e:	4b12      	ldr	r3, [pc, #72]	; (8008378 <rand+0x60>)
 8008330:	4812      	ldr	r0, [pc, #72]	; (800837c <rand+0x64>)
 8008332:	2152      	movs	r1, #82	; 0x52
 8008334:	f000 f99c 	bl	8008670 <__assert_func>
 8008338:	4911      	ldr	r1, [pc, #68]	; (8008380 <rand+0x68>)
 800833a:	4b12      	ldr	r3, [pc, #72]	; (8008384 <rand+0x6c>)
 800833c:	e9c0 1300 	strd	r1, r3, [r0]
 8008340:	4b11      	ldr	r3, [pc, #68]	; (8008388 <rand+0x70>)
 8008342:	6083      	str	r3, [r0, #8]
 8008344:	230b      	movs	r3, #11
 8008346:	8183      	strh	r3, [r0, #12]
 8008348:	2100      	movs	r1, #0
 800834a:	2001      	movs	r0, #1
 800834c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8008350:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008352:	480e      	ldr	r0, [pc, #56]	; (800838c <rand+0x74>)
 8008354:	690b      	ldr	r3, [r1, #16]
 8008356:	694c      	ldr	r4, [r1, #20]
 8008358:	4a0d      	ldr	r2, [pc, #52]	; (8008390 <rand+0x78>)
 800835a:	4358      	muls	r0, r3
 800835c:	fb02 0004 	mla	r0, r2, r4, r0
 8008360:	fba3 3202 	umull	r3, r2, r3, r2
 8008364:	3301      	adds	r3, #1
 8008366:	eb40 0002 	adc.w	r0, r0, r2
 800836a:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800836e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8008372:	bd10      	pop	{r4, pc}
 8008374:	2000006c 	.word	0x2000006c
 8008378:	080096b8 	.word	0x080096b8
 800837c:	080096cf 	.word	0x080096cf
 8008380:	abcd330e 	.word	0xabcd330e
 8008384:	e66d1234 	.word	0xe66d1234
 8008388:	0005deec 	.word	0x0005deec
 800838c:	5851f42d 	.word	0x5851f42d
 8008390:	4c957f2d 	.word	0x4c957f2d

08008394 <std>:
 8008394:	2300      	movs	r3, #0
 8008396:	b510      	push	{r4, lr}
 8008398:	4604      	mov	r4, r0
 800839a:	e9c0 3300 	strd	r3, r3, [r0]
 800839e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083a2:	6083      	str	r3, [r0, #8]
 80083a4:	8181      	strh	r1, [r0, #12]
 80083a6:	6643      	str	r3, [r0, #100]	; 0x64
 80083a8:	81c2      	strh	r2, [r0, #14]
 80083aa:	6183      	str	r3, [r0, #24]
 80083ac:	4619      	mov	r1, r3
 80083ae:	2208      	movs	r2, #8
 80083b0:	305c      	adds	r0, #92	; 0x5c
 80083b2:	f000 f8c3 	bl	800853c <memset>
 80083b6:	4b0d      	ldr	r3, [pc, #52]	; (80083ec <std+0x58>)
 80083b8:	6263      	str	r3, [r4, #36]	; 0x24
 80083ba:	4b0d      	ldr	r3, [pc, #52]	; (80083f0 <std+0x5c>)
 80083bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80083be:	4b0d      	ldr	r3, [pc, #52]	; (80083f4 <std+0x60>)
 80083c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80083c2:	4b0d      	ldr	r3, [pc, #52]	; (80083f8 <std+0x64>)
 80083c4:	6323      	str	r3, [r4, #48]	; 0x30
 80083c6:	4b0d      	ldr	r3, [pc, #52]	; (80083fc <std+0x68>)
 80083c8:	6224      	str	r4, [r4, #32]
 80083ca:	429c      	cmp	r4, r3
 80083cc:	d006      	beq.n	80083dc <std+0x48>
 80083ce:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80083d2:	4294      	cmp	r4, r2
 80083d4:	d002      	beq.n	80083dc <std+0x48>
 80083d6:	33d0      	adds	r3, #208	; 0xd0
 80083d8:	429c      	cmp	r4, r3
 80083da:	d105      	bne.n	80083e8 <std+0x54>
 80083dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80083e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083e4:	f000 b932 	b.w	800864c <__retarget_lock_init_recursive>
 80083e8:	bd10      	pop	{r4, pc}
 80083ea:	bf00      	nop
 80083ec:	08008fb1 	.word	0x08008fb1
 80083f0:	08008fd3 	.word	0x08008fd3
 80083f4:	0800900b 	.word	0x0800900b
 80083f8:	0800902f 	.word	0x0800902f
 80083fc:	20004a70 	.word	0x20004a70

08008400 <stdio_exit_handler>:
 8008400:	4a02      	ldr	r2, [pc, #8]	; (800840c <stdio_exit_handler+0xc>)
 8008402:	4903      	ldr	r1, [pc, #12]	; (8008410 <stdio_exit_handler+0x10>)
 8008404:	4803      	ldr	r0, [pc, #12]	; (8008414 <stdio_exit_handler+0x14>)
 8008406:	f000 b869 	b.w	80084dc <_fwalk_sglue>
 800840a:	bf00      	nop
 800840c:	20000014 	.word	0x20000014
 8008410:	08008f49 	.word	0x08008f49
 8008414:	20000020 	.word	0x20000020

08008418 <cleanup_stdio>:
 8008418:	6841      	ldr	r1, [r0, #4]
 800841a:	4b0c      	ldr	r3, [pc, #48]	; (800844c <cleanup_stdio+0x34>)
 800841c:	4299      	cmp	r1, r3
 800841e:	b510      	push	{r4, lr}
 8008420:	4604      	mov	r4, r0
 8008422:	d001      	beq.n	8008428 <cleanup_stdio+0x10>
 8008424:	f000 fd90 	bl	8008f48 <_fflush_r>
 8008428:	68a1      	ldr	r1, [r4, #8]
 800842a:	4b09      	ldr	r3, [pc, #36]	; (8008450 <cleanup_stdio+0x38>)
 800842c:	4299      	cmp	r1, r3
 800842e:	d002      	beq.n	8008436 <cleanup_stdio+0x1e>
 8008430:	4620      	mov	r0, r4
 8008432:	f000 fd89 	bl	8008f48 <_fflush_r>
 8008436:	68e1      	ldr	r1, [r4, #12]
 8008438:	4b06      	ldr	r3, [pc, #24]	; (8008454 <cleanup_stdio+0x3c>)
 800843a:	4299      	cmp	r1, r3
 800843c:	d004      	beq.n	8008448 <cleanup_stdio+0x30>
 800843e:	4620      	mov	r0, r4
 8008440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008444:	f000 bd80 	b.w	8008f48 <_fflush_r>
 8008448:	bd10      	pop	{r4, pc}
 800844a:	bf00      	nop
 800844c:	20004a70 	.word	0x20004a70
 8008450:	20004ad8 	.word	0x20004ad8
 8008454:	20004b40 	.word	0x20004b40

08008458 <global_stdio_init.part.0>:
 8008458:	b510      	push	{r4, lr}
 800845a:	4b0b      	ldr	r3, [pc, #44]	; (8008488 <global_stdio_init.part.0+0x30>)
 800845c:	4c0b      	ldr	r4, [pc, #44]	; (800848c <global_stdio_init.part.0+0x34>)
 800845e:	4a0c      	ldr	r2, [pc, #48]	; (8008490 <global_stdio_init.part.0+0x38>)
 8008460:	601a      	str	r2, [r3, #0]
 8008462:	4620      	mov	r0, r4
 8008464:	2200      	movs	r2, #0
 8008466:	2104      	movs	r1, #4
 8008468:	f7ff ff94 	bl	8008394 <std>
 800846c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8008470:	2201      	movs	r2, #1
 8008472:	2109      	movs	r1, #9
 8008474:	f7ff ff8e 	bl	8008394 <std>
 8008478:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800847c:	2202      	movs	r2, #2
 800847e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008482:	2112      	movs	r1, #18
 8008484:	f7ff bf86 	b.w	8008394 <std>
 8008488:	20004ba8 	.word	0x20004ba8
 800848c:	20004a70 	.word	0x20004a70
 8008490:	08008401 	.word	0x08008401

08008494 <__sfp_lock_acquire>:
 8008494:	4801      	ldr	r0, [pc, #4]	; (800849c <__sfp_lock_acquire+0x8>)
 8008496:	f000 b8da 	b.w	800864e <__retarget_lock_acquire_recursive>
 800849a:	bf00      	nop
 800849c:	20004bb1 	.word	0x20004bb1

080084a0 <__sfp_lock_release>:
 80084a0:	4801      	ldr	r0, [pc, #4]	; (80084a8 <__sfp_lock_release+0x8>)
 80084a2:	f000 b8d5 	b.w	8008650 <__retarget_lock_release_recursive>
 80084a6:	bf00      	nop
 80084a8:	20004bb1 	.word	0x20004bb1

080084ac <__sinit>:
 80084ac:	b510      	push	{r4, lr}
 80084ae:	4604      	mov	r4, r0
 80084b0:	f7ff fff0 	bl	8008494 <__sfp_lock_acquire>
 80084b4:	6a23      	ldr	r3, [r4, #32]
 80084b6:	b11b      	cbz	r3, 80084c0 <__sinit+0x14>
 80084b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084bc:	f7ff bff0 	b.w	80084a0 <__sfp_lock_release>
 80084c0:	4b04      	ldr	r3, [pc, #16]	; (80084d4 <__sinit+0x28>)
 80084c2:	6223      	str	r3, [r4, #32]
 80084c4:	4b04      	ldr	r3, [pc, #16]	; (80084d8 <__sinit+0x2c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1f5      	bne.n	80084b8 <__sinit+0xc>
 80084cc:	f7ff ffc4 	bl	8008458 <global_stdio_init.part.0>
 80084d0:	e7f2      	b.n	80084b8 <__sinit+0xc>
 80084d2:	bf00      	nop
 80084d4:	08008419 	.word	0x08008419
 80084d8:	20004ba8 	.word	0x20004ba8

080084dc <_fwalk_sglue>:
 80084dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e0:	4607      	mov	r7, r0
 80084e2:	4688      	mov	r8, r1
 80084e4:	4614      	mov	r4, r2
 80084e6:	2600      	movs	r6, #0
 80084e8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80084ec:	f1b9 0901 	subs.w	r9, r9, #1
 80084f0:	d505      	bpl.n	80084fe <_fwalk_sglue+0x22>
 80084f2:	6824      	ldr	r4, [r4, #0]
 80084f4:	2c00      	cmp	r4, #0
 80084f6:	d1f7      	bne.n	80084e8 <_fwalk_sglue+0xc>
 80084f8:	4630      	mov	r0, r6
 80084fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80084fe:	89ab      	ldrh	r3, [r5, #12]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d907      	bls.n	8008514 <_fwalk_sglue+0x38>
 8008504:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008508:	3301      	adds	r3, #1
 800850a:	d003      	beq.n	8008514 <_fwalk_sglue+0x38>
 800850c:	4629      	mov	r1, r5
 800850e:	4638      	mov	r0, r7
 8008510:	47c0      	blx	r8
 8008512:	4306      	orrs	r6, r0
 8008514:	3568      	adds	r5, #104	; 0x68
 8008516:	e7e9      	b.n	80084ec <_fwalk_sglue+0x10>

08008518 <iprintf>:
 8008518:	b40f      	push	{r0, r1, r2, r3}
 800851a:	b507      	push	{r0, r1, r2, lr}
 800851c:	4906      	ldr	r1, [pc, #24]	; (8008538 <iprintf+0x20>)
 800851e:	ab04      	add	r3, sp, #16
 8008520:	6808      	ldr	r0, [r1, #0]
 8008522:	f853 2b04 	ldr.w	r2, [r3], #4
 8008526:	6881      	ldr	r1, [r0, #8]
 8008528:	9301      	str	r3, [sp, #4]
 800852a:	f000 f935 	bl	8008798 <_vfiprintf_r>
 800852e:	b003      	add	sp, #12
 8008530:	f85d eb04 	ldr.w	lr, [sp], #4
 8008534:	b004      	add	sp, #16
 8008536:	4770      	bx	lr
 8008538:	2000006c 	.word	0x2000006c

0800853c <memset>:
 800853c:	4402      	add	r2, r0
 800853e:	4603      	mov	r3, r0
 8008540:	4293      	cmp	r3, r2
 8008542:	d100      	bne.n	8008546 <memset+0xa>
 8008544:	4770      	bx	lr
 8008546:	f803 1b01 	strb.w	r1, [r3], #1
 800854a:	e7f9      	b.n	8008540 <memset+0x4>

0800854c <_reclaim_reent>:
 800854c:	4b29      	ldr	r3, [pc, #164]	; (80085f4 <_reclaim_reent+0xa8>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	4283      	cmp	r3, r0
 8008552:	b570      	push	{r4, r5, r6, lr}
 8008554:	4604      	mov	r4, r0
 8008556:	d04b      	beq.n	80085f0 <_reclaim_reent+0xa4>
 8008558:	69c3      	ldr	r3, [r0, #28]
 800855a:	b143      	cbz	r3, 800856e <_reclaim_reent+0x22>
 800855c:	68db      	ldr	r3, [r3, #12]
 800855e:	2b00      	cmp	r3, #0
 8008560:	d144      	bne.n	80085ec <_reclaim_reent+0xa0>
 8008562:	69e3      	ldr	r3, [r4, #28]
 8008564:	6819      	ldr	r1, [r3, #0]
 8008566:	b111      	cbz	r1, 800856e <_reclaim_reent+0x22>
 8008568:	4620      	mov	r0, r4
 800856a:	f000 f89f 	bl	80086ac <_free_r>
 800856e:	6961      	ldr	r1, [r4, #20]
 8008570:	b111      	cbz	r1, 8008578 <_reclaim_reent+0x2c>
 8008572:	4620      	mov	r0, r4
 8008574:	f000 f89a 	bl	80086ac <_free_r>
 8008578:	69e1      	ldr	r1, [r4, #28]
 800857a:	b111      	cbz	r1, 8008582 <_reclaim_reent+0x36>
 800857c:	4620      	mov	r0, r4
 800857e:	f000 f895 	bl	80086ac <_free_r>
 8008582:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008584:	b111      	cbz	r1, 800858c <_reclaim_reent+0x40>
 8008586:	4620      	mov	r0, r4
 8008588:	f000 f890 	bl	80086ac <_free_r>
 800858c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800858e:	b111      	cbz	r1, 8008596 <_reclaim_reent+0x4a>
 8008590:	4620      	mov	r0, r4
 8008592:	f000 f88b 	bl	80086ac <_free_r>
 8008596:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008598:	b111      	cbz	r1, 80085a0 <_reclaim_reent+0x54>
 800859a:	4620      	mov	r0, r4
 800859c:	f000 f886 	bl	80086ac <_free_r>
 80085a0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80085a2:	b111      	cbz	r1, 80085aa <_reclaim_reent+0x5e>
 80085a4:	4620      	mov	r0, r4
 80085a6:	f000 f881 	bl	80086ac <_free_r>
 80085aa:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80085ac:	b111      	cbz	r1, 80085b4 <_reclaim_reent+0x68>
 80085ae:	4620      	mov	r0, r4
 80085b0:	f000 f87c 	bl	80086ac <_free_r>
 80085b4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80085b6:	b111      	cbz	r1, 80085be <_reclaim_reent+0x72>
 80085b8:	4620      	mov	r0, r4
 80085ba:	f000 f877 	bl	80086ac <_free_r>
 80085be:	6a23      	ldr	r3, [r4, #32]
 80085c0:	b1b3      	cbz	r3, 80085f0 <_reclaim_reent+0xa4>
 80085c2:	4620      	mov	r0, r4
 80085c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80085c8:	4718      	bx	r3
 80085ca:	5949      	ldr	r1, [r1, r5]
 80085cc:	b941      	cbnz	r1, 80085e0 <_reclaim_reent+0x94>
 80085ce:	3504      	adds	r5, #4
 80085d0:	69e3      	ldr	r3, [r4, #28]
 80085d2:	2d80      	cmp	r5, #128	; 0x80
 80085d4:	68d9      	ldr	r1, [r3, #12]
 80085d6:	d1f8      	bne.n	80085ca <_reclaim_reent+0x7e>
 80085d8:	4620      	mov	r0, r4
 80085da:	f000 f867 	bl	80086ac <_free_r>
 80085de:	e7c0      	b.n	8008562 <_reclaim_reent+0x16>
 80085e0:	680e      	ldr	r6, [r1, #0]
 80085e2:	4620      	mov	r0, r4
 80085e4:	f000 f862 	bl	80086ac <_free_r>
 80085e8:	4631      	mov	r1, r6
 80085ea:	e7ef      	b.n	80085cc <_reclaim_reent+0x80>
 80085ec:	2500      	movs	r5, #0
 80085ee:	e7ef      	b.n	80085d0 <_reclaim_reent+0x84>
 80085f0:	bd70      	pop	{r4, r5, r6, pc}
 80085f2:	bf00      	nop
 80085f4:	2000006c 	.word	0x2000006c

080085f8 <__errno>:
 80085f8:	4b01      	ldr	r3, [pc, #4]	; (8008600 <__errno+0x8>)
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	4770      	bx	lr
 80085fe:	bf00      	nop
 8008600:	2000006c 	.word	0x2000006c

08008604 <__libc_init_array>:
 8008604:	b570      	push	{r4, r5, r6, lr}
 8008606:	4d0d      	ldr	r5, [pc, #52]	; (800863c <__libc_init_array+0x38>)
 8008608:	4c0d      	ldr	r4, [pc, #52]	; (8008640 <__libc_init_array+0x3c>)
 800860a:	1b64      	subs	r4, r4, r5
 800860c:	10a4      	asrs	r4, r4, #2
 800860e:	2600      	movs	r6, #0
 8008610:	42a6      	cmp	r6, r4
 8008612:	d109      	bne.n	8008628 <__libc_init_array+0x24>
 8008614:	4d0b      	ldr	r5, [pc, #44]	; (8008644 <__libc_init_array+0x40>)
 8008616:	4c0c      	ldr	r4, [pc, #48]	; (8008648 <__libc_init_array+0x44>)
 8008618:	f000 fedc 	bl	80093d4 <_init>
 800861c:	1b64      	subs	r4, r4, r5
 800861e:	10a4      	asrs	r4, r4, #2
 8008620:	2600      	movs	r6, #0
 8008622:	42a6      	cmp	r6, r4
 8008624:	d105      	bne.n	8008632 <__libc_init_array+0x2e>
 8008626:	bd70      	pop	{r4, r5, r6, pc}
 8008628:	f855 3b04 	ldr.w	r3, [r5], #4
 800862c:	4798      	blx	r3
 800862e:	3601      	adds	r6, #1
 8008630:	e7ee      	b.n	8008610 <__libc_init_array+0xc>
 8008632:	f855 3b04 	ldr.w	r3, [r5], #4
 8008636:	4798      	blx	r3
 8008638:	3601      	adds	r6, #1
 800863a:	e7f2      	b.n	8008622 <__libc_init_array+0x1e>
 800863c:	080097a0 	.word	0x080097a0
 8008640:	080097a0 	.word	0x080097a0
 8008644:	080097a0 	.word	0x080097a0
 8008648:	080097a4 	.word	0x080097a4

0800864c <__retarget_lock_init_recursive>:
 800864c:	4770      	bx	lr

0800864e <__retarget_lock_acquire_recursive>:
 800864e:	4770      	bx	lr

08008650 <__retarget_lock_release_recursive>:
 8008650:	4770      	bx	lr

08008652 <memcpy>:
 8008652:	440a      	add	r2, r1
 8008654:	4291      	cmp	r1, r2
 8008656:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800865a:	d100      	bne.n	800865e <memcpy+0xc>
 800865c:	4770      	bx	lr
 800865e:	b510      	push	{r4, lr}
 8008660:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008664:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008668:	4291      	cmp	r1, r2
 800866a:	d1f9      	bne.n	8008660 <memcpy+0xe>
 800866c:	bd10      	pop	{r4, pc}
	...

08008670 <__assert_func>:
 8008670:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008672:	4614      	mov	r4, r2
 8008674:	461a      	mov	r2, r3
 8008676:	4b09      	ldr	r3, [pc, #36]	; (800869c <__assert_func+0x2c>)
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	4605      	mov	r5, r0
 800867c:	68d8      	ldr	r0, [r3, #12]
 800867e:	b14c      	cbz	r4, 8008694 <__assert_func+0x24>
 8008680:	4b07      	ldr	r3, [pc, #28]	; (80086a0 <__assert_func+0x30>)
 8008682:	9100      	str	r1, [sp, #0]
 8008684:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008688:	4906      	ldr	r1, [pc, #24]	; (80086a4 <__assert_func+0x34>)
 800868a:	462b      	mov	r3, r5
 800868c:	f000 fcd4 	bl	8009038 <fiprintf>
 8008690:	f000 fe54 	bl	800933c <abort>
 8008694:	4b04      	ldr	r3, [pc, #16]	; (80086a8 <__assert_func+0x38>)
 8008696:	461c      	mov	r4, r3
 8008698:	e7f3      	b.n	8008682 <__assert_func+0x12>
 800869a:	bf00      	nop
 800869c:	2000006c 	.word	0x2000006c
 80086a0:	08009727 	.word	0x08009727
 80086a4:	08009734 	.word	0x08009734
 80086a8:	08009762 	.word	0x08009762

080086ac <_free_r>:
 80086ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086ae:	2900      	cmp	r1, #0
 80086b0:	d044      	beq.n	800873c <_free_r+0x90>
 80086b2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086b6:	9001      	str	r0, [sp, #4]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	f1a1 0404 	sub.w	r4, r1, #4
 80086be:	bfb8      	it	lt
 80086c0:	18e4      	addlt	r4, r4, r3
 80086c2:	f000 fc69 	bl	8008f98 <__malloc_lock>
 80086c6:	4a1e      	ldr	r2, [pc, #120]	; (8008740 <_free_r+0x94>)
 80086c8:	9801      	ldr	r0, [sp, #4]
 80086ca:	6813      	ldr	r3, [r2, #0]
 80086cc:	b933      	cbnz	r3, 80086dc <_free_r+0x30>
 80086ce:	6063      	str	r3, [r4, #4]
 80086d0:	6014      	str	r4, [r2, #0]
 80086d2:	b003      	add	sp, #12
 80086d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086d8:	f000 bc64 	b.w	8008fa4 <__malloc_unlock>
 80086dc:	42a3      	cmp	r3, r4
 80086de:	d908      	bls.n	80086f2 <_free_r+0x46>
 80086e0:	6825      	ldr	r5, [r4, #0]
 80086e2:	1961      	adds	r1, r4, r5
 80086e4:	428b      	cmp	r3, r1
 80086e6:	bf01      	itttt	eq
 80086e8:	6819      	ldreq	r1, [r3, #0]
 80086ea:	685b      	ldreq	r3, [r3, #4]
 80086ec:	1949      	addeq	r1, r1, r5
 80086ee:	6021      	streq	r1, [r4, #0]
 80086f0:	e7ed      	b.n	80086ce <_free_r+0x22>
 80086f2:	461a      	mov	r2, r3
 80086f4:	685b      	ldr	r3, [r3, #4]
 80086f6:	b10b      	cbz	r3, 80086fc <_free_r+0x50>
 80086f8:	42a3      	cmp	r3, r4
 80086fa:	d9fa      	bls.n	80086f2 <_free_r+0x46>
 80086fc:	6811      	ldr	r1, [r2, #0]
 80086fe:	1855      	adds	r5, r2, r1
 8008700:	42a5      	cmp	r5, r4
 8008702:	d10b      	bne.n	800871c <_free_r+0x70>
 8008704:	6824      	ldr	r4, [r4, #0]
 8008706:	4421      	add	r1, r4
 8008708:	1854      	adds	r4, r2, r1
 800870a:	42a3      	cmp	r3, r4
 800870c:	6011      	str	r1, [r2, #0]
 800870e:	d1e0      	bne.n	80086d2 <_free_r+0x26>
 8008710:	681c      	ldr	r4, [r3, #0]
 8008712:	685b      	ldr	r3, [r3, #4]
 8008714:	6053      	str	r3, [r2, #4]
 8008716:	440c      	add	r4, r1
 8008718:	6014      	str	r4, [r2, #0]
 800871a:	e7da      	b.n	80086d2 <_free_r+0x26>
 800871c:	d902      	bls.n	8008724 <_free_r+0x78>
 800871e:	230c      	movs	r3, #12
 8008720:	6003      	str	r3, [r0, #0]
 8008722:	e7d6      	b.n	80086d2 <_free_r+0x26>
 8008724:	6825      	ldr	r5, [r4, #0]
 8008726:	1961      	adds	r1, r4, r5
 8008728:	428b      	cmp	r3, r1
 800872a:	bf04      	itt	eq
 800872c:	6819      	ldreq	r1, [r3, #0]
 800872e:	685b      	ldreq	r3, [r3, #4]
 8008730:	6063      	str	r3, [r4, #4]
 8008732:	bf04      	itt	eq
 8008734:	1949      	addeq	r1, r1, r5
 8008736:	6021      	streq	r1, [r4, #0]
 8008738:	6054      	str	r4, [r2, #4]
 800873a:	e7ca      	b.n	80086d2 <_free_r+0x26>
 800873c:	b003      	add	sp, #12
 800873e:	bd30      	pop	{r4, r5, pc}
 8008740:	20004bb4 	.word	0x20004bb4

08008744 <__sfputc_r>:
 8008744:	6893      	ldr	r3, [r2, #8]
 8008746:	3b01      	subs	r3, #1
 8008748:	2b00      	cmp	r3, #0
 800874a:	b410      	push	{r4}
 800874c:	6093      	str	r3, [r2, #8]
 800874e:	da08      	bge.n	8008762 <__sfputc_r+0x1e>
 8008750:	6994      	ldr	r4, [r2, #24]
 8008752:	42a3      	cmp	r3, r4
 8008754:	db01      	blt.n	800875a <__sfputc_r+0x16>
 8008756:	290a      	cmp	r1, #10
 8008758:	d103      	bne.n	8008762 <__sfputc_r+0x1e>
 800875a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800875e:	f000 bc7d 	b.w	800905c <__swbuf_r>
 8008762:	6813      	ldr	r3, [r2, #0]
 8008764:	1c58      	adds	r0, r3, #1
 8008766:	6010      	str	r0, [r2, #0]
 8008768:	7019      	strb	r1, [r3, #0]
 800876a:	4608      	mov	r0, r1
 800876c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008770:	4770      	bx	lr

08008772 <__sfputs_r>:
 8008772:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008774:	4606      	mov	r6, r0
 8008776:	460f      	mov	r7, r1
 8008778:	4614      	mov	r4, r2
 800877a:	18d5      	adds	r5, r2, r3
 800877c:	42ac      	cmp	r4, r5
 800877e:	d101      	bne.n	8008784 <__sfputs_r+0x12>
 8008780:	2000      	movs	r0, #0
 8008782:	e007      	b.n	8008794 <__sfputs_r+0x22>
 8008784:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008788:	463a      	mov	r2, r7
 800878a:	4630      	mov	r0, r6
 800878c:	f7ff ffda 	bl	8008744 <__sfputc_r>
 8008790:	1c43      	adds	r3, r0, #1
 8008792:	d1f3      	bne.n	800877c <__sfputs_r+0xa>
 8008794:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008798 <_vfiprintf_r>:
 8008798:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800879c:	460d      	mov	r5, r1
 800879e:	b09d      	sub	sp, #116	; 0x74
 80087a0:	4614      	mov	r4, r2
 80087a2:	4698      	mov	r8, r3
 80087a4:	4606      	mov	r6, r0
 80087a6:	b118      	cbz	r0, 80087b0 <_vfiprintf_r+0x18>
 80087a8:	6a03      	ldr	r3, [r0, #32]
 80087aa:	b90b      	cbnz	r3, 80087b0 <_vfiprintf_r+0x18>
 80087ac:	f7ff fe7e 	bl	80084ac <__sinit>
 80087b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b2:	07d9      	lsls	r1, r3, #31
 80087b4:	d405      	bmi.n	80087c2 <_vfiprintf_r+0x2a>
 80087b6:	89ab      	ldrh	r3, [r5, #12]
 80087b8:	059a      	lsls	r2, r3, #22
 80087ba:	d402      	bmi.n	80087c2 <_vfiprintf_r+0x2a>
 80087bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087be:	f7ff ff46 	bl	800864e <__retarget_lock_acquire_recursive>
 80087c2:	89ab      	ldrh	r3, [r5, #12]
 80087c4:	071b      	lsls	r3, r3, #28
 80087c6:	d501      	bpl.n	80087cc <_vfiprintf_r+0x34>
 80087c8:	692b      	ldr	r3, [r5, #16]
 80087ca:	b99b      	cbnz	r3, 80087f4 <_vfiprintf_r+0x5c>
 80087cc:	4629      	mov	r1, r5
 80087ce:	4630      	mov	r0, r6
 80087d0:	f000 fc82 	bl	80090d8 <__swsetup_r>
 80087d4:	b170      	cbz	r0, 80087f4 <_vfiprintf_r+0x5c>
 80087d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087d8:	07dc      	lsls	r4, r3, #31
 80087da:	d504      	bpl.n	80087e6 <_vfiprintf_r+0x4e>
 80087dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80087e0:	b01d      	add	sp, #116	; 0x74
 80087e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087e6:	89ab      	ldrh	r3, [r5, #12]
 80087e8:	0598      	lsls	r0, r3, #22
 80087ea:	d4f7      	bmi.n	80087dc <_vfiprintf_r+0x44>
 80087ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087ee:	f7ff ff2f 	bl	8008650 <__retarget_lock_release_recursive>
 80087f2:	e7f3      	b.n	80087dc <_vfiprintf_r+0x44>
 80087f4:	2300      	movs	r3, #0
 80087f6:	9309      	str	r3, [sp, #36]	; 0x24
 80087f8:	2320      	movs	r3, #32
 80087fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80087fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8008802:	2330      	movs	r3, #48	; 0x30
 8008804:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80089b8 <_vfiprintf_r+0x220>
 8008808:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800880c:	f04f 0901 	mov.w	r9, #1
 8008810:	4623      	mov	r3, r4
 8008812:	469a      	mov	sl, r3
 8008814:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008818:	b10a      	cbz	r2, 800881e <_vfiprintf_r+0x86>
 800881a:	2a25      	cmp	r2, #37	; 0x25
 800881c:	d1f9      	bne.n	8008812 <_vfiprintf_r+0x7a>
 800881e:	ebba 0b04 	subs.w	fp, sl, r4
 8008822:	d00b      	beq.n	800883c <_vfiprintf_r+0xa4>
 8008824:	465b      	mov	r3, fp
 8008826:	4622      	mov	r2, r4
 8008828:	4629      	mov	r1, r5
 800882a:	4630      	mov	r0, r6
 800882c:	f7ff ffa1 	bl	8008772 <__sfputs_r>
 8008830:	3001      	adds	r0, #1
 8008832:	f000 80a9 	beq.w	8008988 <_vfiprintf_r+0x1f0>
 8008836:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008838:	445a      	add	r2, fp
 800883a:	9209      	str	r2, [sp, #36]	; 0x24
 800883c:	f89a 3000 	ldrb.w	r3, [sl]
 8008840:	2b00      	cmp	r3, #0
 8008842:	f000 80a1 	beq.w	8008988 <_vfiprintf_r+0x1f0>
 8008846:	2300      	movs	r3, #0
 8008848:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800884c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008850:	f10a 0a01 	add.w	sl, sl, #1
 8008854:	9304      	str	r3, [sp, #16]
 8008856:	9307      	str	r3, [sp, #28]
 8008858:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800885c:	931a      	str	r3, [sp, #104]	; 0x68
 800885e:	4654      	mov	r4, sl
 8008860:	2205      	movs	r2, #5
 8008862:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008866:	4854      	ldr	r0, [pc, #336]	; (80089b8 <_vfiprintf_r+0x220>)
 8008868:	f7f7 fcb2 	bl	80001d0 <memchr>
 800886c:	9a04      	ldr	r2, [sp, #16]
 800886e:	b9d8      	cbnz	r0, 80088a8 <_vfiprintf_r+0x110>
 8008870:	06d1      	lsls	r1, r2, #27
 8008872:	bf44      	itt	mi
 8008874:	2320      	movmi	r3, #32
 8008876:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800887a:	0713      	lsls	r3, r2, #28
 800887c:	bf44      	itt	mi
 800887e:	232b      	movmi	r3, #43	; 0x2b
 8008880:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008884:	f89a 3000 	ldrb.w	r3, [sl]
 8008888:	2b2a      	cmp	r3, #42	; 0x2a
 800888a:	d015      	beq.n	80088b8 <_vfiprintf_r+0x120>
 800888c:	9a07      	ldr	r2, [sp, #28]
 800888e:	4654      	mov	r4, sl
 8008890:	2000      	movs	r0, #0
 8008892:	f04f 0c0a 	mov.w	ip, #10
 8008896:	4621      	mov	r1, r4
 8008898:	f811 3b01 	ldrb.w	r3, [r1], #1
 800889c:	3b30      	subs	r3, #48	; 0x30
 800889e:	2b09      	cmp	r3, #9
 80088a0:	d94d      	bls.n	800893e <_vfiprintf_r+0x1a6>
 80088a2:	b1b0      	cbz	r0, 80088d2 <_vfiprintf_r+0x13a>
 80088a4:	9207      	str	r2, [sp, #28]
 80088a6:	e014      	b.n	80088d2 <_vfiprintf_r+0x13a>
 80088a8:	eba0 0308 	sub.w	r3, r0, r8
 80088ac:	fa09 f303 	lsl.w	r3, r9, r3
 80088b0:	4313      	orrs	r3, r2
 80088b2:	9304      	str	r3, [sp, #16]
 80088b4:	46a2      	mov	sl, r4
 80088b6:	e7d2      	b.n	800885e <_vfiprintf_r+0xc6>
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	1d19      	adds	r1, r3, #4
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	9103      	str	r1, [sp, #12]
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	bfbb      	ittet	lt
 80088c4:	425b      	neglt	r3, r3
 80088c6:	f042 0202 	orrlt.w	r2, r2, #2
 80088ca:	9307      	strge	r3, [sp, #28]
 80088cc:	9307      	strlt	r3, [sp, #28]
 80088ce:	bfb8      	it	lt
 80088d0:	9204      	strlt	r2, [sp, #16]
 80088d2:	7823      	ldrb	r3, [r4, #0]
 80088d4:	2b2e      	cmp	r3, #46	; 0x2e
 80088d6:	d10c      	bne.n	80088f2 <_vfiprintf_r+0x15a>
 80088d8:	7863      	ldrb	r3, [r4, #1]
 80088da:	2b2a      	cmp	r3, #42	; 0x2a
 80088dc:	d134      	bne.n	8008948 <_vfiprintf_r+0x1b0>
 80088de:	9b03      	ldr	r3, [sp, #12]
 80088e0:	1d1a      	adds	r2, r3, #4
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	9203      	str	r2, [sp, #12]
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	bfb8      	it	lt
 80088ea:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80088ee:	3402      	adds	r4, #2
 80088f0:	9305      	str	r3, [sp, #20]
 80088f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80089c8 <_vfiprintf_r+0x230>
 80088f6:	7821      	ldrb	r1, [r4, #0]
 80088f8:	2203      	movs	r2, #3
 80088fa:	4650      	mov	r0, sl
 80088fc:	f7f7 fc68 	bl	80001d0 <memchr>
 8008900:	b138      	cbz	r0, 8008912 <_vfiprintf_r+0x17a>
 8008902:	9b04      	ldr	r3, [sp, #16]
 8008904:	eba0 000a 	sub.w	r0, r0, sl
 8008908:	2240      	movs	r2, #64	; 0x40
 800890a:	4082      	lsls	r2, r0
 800890c:	4313      	orrs	r3, r2
 800890e:	3401      	adds	r4, #1
 8008910:	9304      	str	r3, [sp, #16]
 8008912:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008916:	4829      	ldr	r0, [pc, #164]	; (80089bc <_vfiprintf_r+0x224>)
 8008918:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800891c:	2206      	movs	r2, #6
 800891e:	f7f7 fc57 	bl	80001d0 <memchr>
 8008922:	2800      	cmp	r0, #0
 8008924:	d03f      	beq.n	80089a6 <_vfiprintf_r+0x20e>
 8008926:	4b26      	ldr	r3, [pc, #152]	; (80089c0 <_vfiprintf_r+0x228>)
 8008928:	bb1b      	cbnz	r3, 8008972 <_vfiprintf_r+0x1da>
 800892a:	9b03      	ldr	r3, [sp, #12]
 800892c:	3307      	adds	r3, #7
 800892e:	f023 0307 	bic.w	r3, r3, #7
 8008932:	3308      	adds	r3, #8
 8008934:	9303      	str	r3, [sp, #12]
 8008936:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008938:	443b      	add	r3, r7
 800893a:	9309      	str	r3, [sp, #36]	; 0x24
 800893c:	e768      	b.n	8008810 <_vfiprintf_r+0x78>
 800893e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008942:	460c      	mov	r4, r1
 8008944:	2001      	movs	r0, #1
 8008946:	e7a6      	b.n	8008896 <_vfiprintf_r+0xfe>
 8008948:	2300      	movs	r3, #0
 800894a:	3401      	adds	r4, #1
 800894c:	9305      	str	r3, [sp, #20]
 800894e:	4619      	mov	r1, r3
 8008950:	f04f 0c0a 	mov.w	ip, #10
 8008954:	4620      	mov	r0, r4
 8008956:	f810 2b01 	ldrb.w	r2, [r0], #1
 800895a:	3a30      	subs	r2, #48	; 0x30
 800895c:	2a09      	cmp	r2, #9
 800895e:	d903      	bls.n	8008968 <_vfiprintf_r+0x1d0>
 8008960:	2b00      	cmp	r3, #0
 8008962:	d0c6      	beq.n	80088f2 <_vfiprintf_r+0x15a>
 8008964:	9105      	str	r1, [sp, #20]
 8008966:	e7c4      	b.n	80088f2 <_vfiprintf_r+0x15a>
 8008968:	fb0c 2101 	mla	r1, ip, r1, r2
 800896c:	4604      	mov	r4, r0
 800896e:	2301      	movs	r3, #1
 8008970:	e7f0      	b.n	8008954 <_vfiprintf_r+0x1bc>
 8008972:	ab03      	add	r3, sp, #12
 8008974:	9300      	str	r3, [sp, #0]
 8008976:	462a      	mov	r2, r5
 8008978:	4b12      	ldr	r3, [pc, #72]	; (80089c4 <_vfiprintf_r+0x22c>)
 800897a:	a904      	add	r1, sp, #16
 800897c:	4630      	mov	r0, r6
 800897e:	f3af 8000 	nop.w
 8008982:	4607      	mov	r7, r0
 8008984:	1c78      	adds	r0, r7, #1
 8008986:	d1d6      	bne.n	8008936 <_vfiprintf_r+0x19e>
 8008988:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800898a:	07d9      	lsls	r1, r3, #31
 800898c:	d405      	bmi.n	800899a <_vfiprintf_r+0x202>
 800898e:	89ab      	ldrh	r3, [r5, #12]
 8008990:	059a      	lsls	r2, r3, #22
 8008992:	d402      	bmi.n	800899a <_vfiprintf_r+0x202>
 8008994:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008996:	f7ff fe5b 	bl	8008650 <__retarget_lock_release_recursive>
 800899a:	89ab      	ldrh	r3, [r5, #12]
 800899c:	065b      	lsls	r3, r3, #25
 800899e:	f53f af1d 	bmi.w	80087dc <_vfiprintf_r+0x44>
 80089a2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089a4:	e71c      	b.n	80087e0 <_vfiprintf_r+0x48>
 80089a6:	ab03      	add	r3, sp, #12
 80089a8:	9300      	str	r3, [sp, #0]
 80089aa:	462a      	mov	r2, r5
 80089ac:	4b05      	ldr	r3, [pc, #20]	; (80089c4 <_vfiprintf_r+0x22c>)
 80089ae:	a904      	add	r1, sp, #16
 80089b0:	4630      	mov	r0, r6
 80089b2:	f000 f921 	bl	8008bf8 <_printf_i>
 80089b6:	e7e4      	b.n	8008982 <_vfiprintf_r+0x1ea>
 80089b8:	08009763 	.word	0x08009763
 80089bc:	0800976d 	.word	0x0800976d
 80089c0:	00000000 	.word	0x00000000
 80089c4:	08008773 	.word	0x08008773
 80089c8:	08009769 	.word	0x08009769

080089cc <malloc>:
 80089cc:	4b02      	ldr	r3, [pc, #8]	; (80089d8 <malloc+0xc>)
 80089ce:	4601      	mov	r1, r0
 80089d0:	6818      	ldr	r0, [r3, #0]
 80089d2:	f000 b823 	b.w	8008a1c <_malloc_r>
 80089d6:	bf00      	nop
 80089d8:	2000006c 	.word	0x2000006c

080089dc <sbrk_aligned>:
 80089dc:	b570      	push	{r4, r5, r6, lr}
 80089de:	4e0e      	ldr	r6, [pc, #56]	; (8008a18 <sbrk_aligned+0x3c>)
 80089e0:	460c      	mov	r4, r1
 80089e2:	6831      	ldr	r1, [r6, #0]
 80089e4:	4605      	mov	r5, r0
 80089e6:	b911      	cbnz	r1, 80089ee <sbrk_aligned+0x12>
 80089e8:	f000 fc86 	bl	80092f8 <_sbrk_r>
 80089ec:	6030      	str	r0, [r6, #0]
 80089ee:	4621      	mov	r1, r4
 80089f0:	4628      	mov	r0, r5
 80089f2:	f000 fc81 	bl	80092f8 <_sbrk_r>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d00a      	beq.n	8008a10 <sbrk_aligned+0x34>
 80089fa:	1cc4      	adds	r4, r0, #3
 80089fc:	f024 0403 	bic.w	r4, r4, #3
 8008a00:	42a0      	cmp	r0, r4
 8008a02:	d007      	beq.n	8008a14 <sbrk_aligned+0x38>
 8008a04:	1a21      	subs	r1, r4, r0
 8008a06:	4628      	mov	r0, r5
 8008a08:	f000 fc76 	bl	80092f8 <_sbrk_r>
 8008a0c:	3001      	adds	r0, #1
 8008a0e:	d101      	bne.n	8008a14 <sbrk_aligned+0x38>
 8008a10:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008a14:	4620      	mov	r0, r4
 8008a16:	bd70      	pop	{r4, r5, r6, pc}
 8008a18:	20004bb8 	.word	0x20004bb8

08008a1c <_malloc_r>:
 8008a1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a20:	1ccd      	adds	r5, r1, #3
 8008a22:	f025 0503 	bic.w	r5, r5, #3
 8008a26:	3508      	adds	r5, #8
 8008a28:	2d0c      	cmp	r5, #12
 8008a2a:	bf38      	it	cc
 8008a2c:	250c      	movcc	r5, #12
 8008a2e:	2d00      	cmp	r5, #0
 8008a30:	4607      	mov	r7, r0
 8008a32:	db01      	blt.n	8008a38 <_malloc_r+0x1c>
 8008a34:	42a9      	cmp	r1, r5
 8008a36:	d905      	bls.n	8008a44 <_malloc_r+0x28>
 8008a38:	230c      	movs	r3, #12
 8008a3a:	603b      	str	r3, [r7, #0]
 8008a3c:	2600      	movs	r6, #0
 8008a3e:	4630      	mov	r0, r6
 8008a40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008b18 <_malloc_r+0xfc>
 8008a48:	f000 faa6 	bl	8008f98 <__malloc_lock>
 8008a4c:	f8d8 3000 	ldr.w	r3, [r8]
 8008a50:	461c      	mov	r4, r3
 8008a52:	bb5c      	cbnz	r4, 8008aac <_malloc_r+0x90>
 8008a54:	4629      	mov	r1, r5
 8008a56:	4638      	mov	r0, r7
 8008a58:	f7ff ffc0 	bl	80089dc <sbrk_aligned>
 8008a5c:	1c43      	adds	r3, r0, #1
 8008a5e:	4604      	mov	r4, r0
 8008a60:	d155      	bne.n	8008b0e <_malloc_r+0xf2>
 8008a62:	f8d8 4000 	ldr.w	r4, [r8]
 8008a66:	4626      	mov	r6, r4
 8008a68:	2e00      	cmp	r6, #0
 8008a6a:	d145      	bne.n	8008af8 <_malloc_r+0xdc>
 8008a6c:	2c00      	cmp	r4, #0
 8008a6e:	d048      	beq.n	8008b02 <_malloc_r+0xe6>
 8008a70:	6823      	ldr	r3, [r4, #0]
 8008a72:	4631      	mov	r1, r6
 8008a74:	4638      	mov	r0, r7
 8008a76:	eb04 0903 	add.w	r9, r4, r3
 8008a7a:	f000 fc3d 	bl	80092f8 <_sbrk_r>
 8008a7e:	4581      	cmp	r9, r0
 8008a80:	d13f      	bne.n	8008b02 <_malloc_r+0xe6>
 8008a82:	6821      	ldr	r1, [r4, #0]
 8008a84:	1a6d      	subs	r5, r5, r1
 8008a86:	4629      	mov	r1, r5
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7ff ffa7 	bl	80089dc <sbrk_aligned>
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d037      	beq.n	8008b02 <_malloc_r+0xe6>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	442b      	add	r3, r5
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	f8d8 3000 	ldr.w	r3, [r8]
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d038      	beq.n	8008b12 <_malloc_r+0xf6>
 8008aa0:	685a      	ldr	r2, [r3, #4]
 8008aa2:	42a2      	cmp	r2, r4
 8008aa4:	d12b      	bne.n	8008afe <_malloc_r+0xe2>
 8008aa6:	2200      	movs	r2, #0
 8008aa8:	605a      	str	r2, [r3, #4]
 8008aaa:	e00f      	b.n	8008acc <_malloc_r+0xb0>
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	1b52      	subs	r2, r2, r5
 8008ab0:	d41f      	bmi.n	8008af2 <_malloc_r+0xd6>
 8008ab2:	2a0b      	cmp	r2, #11
 8008ab4:	d917      	bls.n	8008ae6 <_malloc_r+0xca>
 8008ab6:	1961      	adds	r1, r4, r5
 8008ab8:	42a3      	cmp	r3, r4
 8008aba:	6025      	str	r5, [r4, #0]
 8008abc:	bf18      	it	ne
 8008abe:	6059      	strne	r1, [r3, #4]
 8008ac0:	6863      	ldr	r3, [r4, #4]
 8008ac2:	bf08      	it	eq
 8008ac4:	f8c8 1000 	streq.w	r1, [r8]
 8008ac8:	5162      	str	r2, [r4, r5]
 8008aca:	604b      	str	r3, [r1, #4]
 8008acc:	4638      	mov	r0, r7
 8008ace:	f104 060b 	add.w	r6, r4, #11
 8008ad2:	f000 fa67 	bl	8008fa4 <__malloc_unlock>
 8008ad6:	f026 0607 	bic.w	r6, r6, #7
 8008ada:	1d23      	adds	r3, r4, #4
 8008adc:	1af2      	subs	r2, r6, r3
 8008ade:	d0ae      	beq.n	8008a3e <_malloc_r+0x22>
 8008ae0:	1b9b      	subs	r3, r3, r6
 8008ae2:	50a3      	str	r3, [r4, r2]
 8008ae4:	e7ab      	b.n	8008a3e <_malloc_r+0x22>
 8008ae6:	42a3      	cmp	r3, r4
 8008ae8:	6862      	ldr	r2, [r4, #4]
 8008aea:	d1dd      	bne.n	8008aa8 <_malloc_r+0x8c>
 8008aec:	f8c8 2000 	str.w	r2, [r8]
 8008af0:	e7ec      	b.n	8008acc <_malloc_r+0xb0>
 8008af2:	4623      	mov	r3, r4
 8008af4:	6864      	ldr	r4, [r4, #4]
 8008af6:	e7ac      	b.n	8008a52 <_malloc_r+0x36>
 8008af8:	4634      	mov	r4, r6
 8008afa:	6876      	ldr	r6, [r6, #4]
 8008afc:	e7b4      	b.n	8008a68 <_malloc_r+0x4c>
 8008afe:	4613      	mov	r3, r2
 8008b00:	e7cc      	b.n	8008a9c <_malloc_r+0x80>
 8008b02:	230c      	movs	r3, #12
 8008b04:	603b      	str	r3, [r7, #0]
 8008b06:	4638      	mov	r0, r7
 8008b08:	f000 fa4c 	bl	8008fa4 <__malloc_unlock>
 8008b0c:	e797      	b.n	8008a3e <_malloc_r+0x22>
 8008b0e:	6025      	str	r5, [r4, #0]
 8008b10:	e7dc      	b.n	8008acc <_malloc_r+0xb0>
 8008b12:	605b      	str	r3, [r3, #4]
 8008b14:	deff      	udf	#255	; 0xff
 8008b16:	bf00      	nop
 8008b18:	20004bb4 	.word	0x20004bb4

08008b1c <_printf_common>:
 8008b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b20:	4616      	mov	r6, r2
 8008b22:	4699      	mov	r9, r3
 8008b24:	688a      	ldr	r2, [r1, #8]
 8008b26:	690b      	ldr	r3, [r1, #16]
 8008b28:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008b2c:	4293      	cmp	r3, r2
 8008b2e:	bfb8      	it	lt
 8008b30:	4613      	movlt	r3, r2
 8008b32:	6033      	str	r3, [r6, #0]
 8008b34:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008b38:	4607      	mov	r7, r0
 8008b3a:	460c      	mov	r4, r1
 8008b3c:	b10a      	cbz	r2, 8008b42 <_printf_common+0x26>
 8008b3e:	3301      	adds	r3, #1
 8008b40:	6033      	str	r3, [r6, #0]
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	0699      	lsls	r1, r3, #26
 8008b46:	bf42      	ittt	mi
 8008b48:	6833      	ldrmi	r3, [r6, #0]
 8008b4a:	3302      	addmi	r3, #2
 8008b4c:	6033      	strmi	r3, [r6, #0]
 8008b4e:	6825      	ldr	r5, [r4, #0]
 8008b50:	f015 0506 	ands.w	r5, r5, #6
 8008b54:	d106      	bne.n	8008b64 <_printf_common+0x48>
 8008b56:	f104 0a19 	add.w	sl, r4, #25
 8008b5a:	68e3      	ldr	r3, [r4, #12]
 8008b5c:	6832      	ldr	r2, [r6, #0]
 8008b5e:	1a9b      	subs	r3, r3, r2
 8008b60:	42ab      	cmp	r3, r5
 8008b62:	dc26      	bgt.n	8008bb2 <_printf_common+0x96>
 8008b64:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008b68:	1e13      	subs	r3, r2, #0
 8008b6a:	6822      	ldr	r2, [r4, #0]
 8008b6c:	bf18      	it	ne
 8008b6e:	2301      	movne	r3, #1
 8008b70:	0692      	lsls	r2, r2, #26
 8008b72:	d42b      	bmi.n	8008bcc <_printf_common+0xb0>
 8008b74:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008b78:	4649      	mov	r1, r9
 8008b7a:	4638      	mov	r0, r7
 8008b7c:	47c0      	blx	r8
 8008b7e:	3001      	adds	r0, #1
 8008b80:	d01e      	beq.n	8008bc0 <_printf_common+0xa4>
 8008b82:	6823      	ldr	r3, [r4, #0]
 8008b84:	6922      	ldr	r2, [r4, #16]
 8008b86:	f003 0306 	and.w	r3, r3, #6
 8008b8a:	2b04      	cmp	r3, #4
 8008b8c:	bf02      	ittt	eq
 8008b8e:	68e5      	ldreq	r5, [r4, #12]
 8008b90:	6833      	ldreq	r3, [r6, #0]
 8008b92:	1aed      	subeq	r5, r5, r3
 8008b94:	68a3      	ldr	r3, [r4, #8]
 8008b96:	bf0c      	ite	eq
 8008b98:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b9c:	2500      	movne	r5, #0
 8008b9e:	4293      	cmp	r3, r2
 8008ba0:	bfc4      	itt	gt
 8008ba2:	1a9b      	subgt	r3, r3, r2
 8008ba4:	18ed      	addgt	r5, r5, r3
 8008ba6:	2600      	movs	r6, #0
 8008ba8:	341a      	adds	r4, #26
 8008baa:	42b5      	cmp	r5, r6
 8008bac:	d11a      	bne.n	8008be4 <_printf_common+0xc8>
 8008bae:	2000      	movs	r0, #0
 8008bb0:	e008      	b.n	8008bc4 <_printf_common+0xa8>
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	4652      	mov	r2, sl
 8008bb6:	4649      	mov	r1, r9
 8008bb8:	4638      	mov	r0, r7
 8008bba:	47c0      	blx	r8
 8008bbc:	3001      	adds	r0, #1
 8008bbe:	d103      	bne.n	8008bc8 <_printf_common+0xac>
 8008bc0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bc8:	3501      	adds	r5, #1
 8008bca:	e7c6      	b.n	8008b5a <_printf_common+0x3e>
 8008bcc:	18e1      	adds	r1, r4, r3
 8008bce:	1c5a      	adds	r2, r3, #1
 8008bd0:	2030      	movs	r0, #48	; 0x30
 8008bd2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008bd6:	4422      	add	r2, r4
 8008bd8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008bdc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008be0:	3302      	adds	r3, #2
 8008be2:	e7c7      	b.n	8008b74 <_printf_common+0x58>
 8008be4:	2301      	movs	r3, #1
 8008be6:	4622      	mov	r2, r4
 8008be8:	4649      	mov	r1, r9
 8008bea:	4638      	mov	r0, r7
 8008bec:	47c0      	blx	r8
 8008bee:	3001      	adds	r0, #1
 8008bf0:	d0e6      	beq.n	8008bc0 <_printf_common+0xa4>
 8008bf2:	3601      	adds	r6, #1
 8008bf4:	e7d9      	b.n	8008baa <_printf_common+0x8e>
	...

08008bf8 <_printf_i>:
 8008bf8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008bfc:	7e0f      	ldrb	r7, [r1, #24]
 8008bfe:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c00:	2f78      	cmp	r7, #120	; 0x78
 8008c02:	4691      	mov	r9, r2
 8008c04:	4680      	mov	r8, r0
 8008c06:	460c      	mov	r4, r1
 8008c08:	469a      	mov	sl, r3
 8008c0a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c0e:	d807      	bhi.n	8008c20 <_printf_i+0x28>
 8008c10:	2f62      	cmp	r7, #98	; 0x62
 8008c12:	d80a      	bhi.n	8008c2a <_printf_i+0x32>
 8008c14:	2f00      	cmp	r7, #0
 8008c16:	f000 80d4 	beq.w	8008dc2 <_printf_i+0x1ca>
 8008c1a:	2f58      	cmp	r7, #88	; 0x58
 8008c1c:	f000 80c0 	beq.w	8008da0 <_printf_i+0x1a8>
 8008c20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c24:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c28:	e03a      	b.n	8008ca0 <_printf_i+0xa8>
 8008c2a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008c2e:	2b15      	cmp	r3, #21
 8008c30:	d8f6      	bhi.n	8008c20 <_printf_i+0x28>
 8008c32:	a101      	add	r1, pc, #4	; (adr r1, 8008c38 <_printf_i+0x40>)
 8008c34:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008c38:	08008c91 	.word	0x08008c91
 8008c3c:	08008ca5 	.word	0x08008ca5
 8008c40:	08008c21 	.word	0x08008c21
 8008c44:	08008c21 	.word	0x08008c21
 8008c48:	08008c21 	.word	0x08008c21
 8008c4c:	08008c21 	.word	0x08008c21
 8008c50:	08008ca5 	.word	0x08008ca5
 8008c54:	08008c21 	.word	0x08008c21
 8008c58:	08008c21 	.word	0x08008c21
 8008c5c:	08008c21 	.word	0x08008c21
 8008c60:	08008c21 	.word	0x08008c21
 8008c64:	08008da9 	.word	0x08008da9
 8008c68:	08008cd1 	.word	0x08008cd1
 8008c6c:	08008d63 	.word	0x08008d63
 8008c70:	08008c21 	.word	0x08008c21
 8008c74:	08008c21 	.word	0x08008c21
 8008c78:	08008dcb 	.word	0x08008dcb
 8008c7c:	08008c21 	.word	0x08008c21
 8008c80:	08008cd1 	.word	0x08008cd1
 8008c84:	08008c21 	.word	0x08008c21
 8008c88:	08008c21 	.word	0x08008c21
 8008c8c:	08008d6b 	.word	0x08008d6b
 8008c90:	682b      	ldr	r3, [r5, #0]
 8008c92:	1d1a      	adds	r2, r3, #4
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	602a      	str	r2, [r5, #0]
 8008c98:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c9c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008ca0:	2301      	movs	r3, #1
 8008ca2:	e09f      	b.n	8008de4 <_printf_i+0x1ec>
 8008ca4:	6820      	ldr	r0, [r4, #0]
 8008ca6:	682b      	ldr	r3, [r5, #0]
 8008ca8:	0607      	lsls	r7, r0, #24
 8008caa:	f103 0104 	add.w	r1, r3, #4
 8008cae:	6029      	str	r1, [r5, #0]
 8008cb0:	d501      	bpl.n	8008cb6 <_printf_i+0xbe>
 8008cb2:	681e      	ldr	r6, [r3, #0]
 8008cb4:	e003      	b.n	8008cbe <_printf_i+0xc6>
 8008cb6:	0646      	lsls	r6, r0, #25
 8008cb8:	d5fb      	bpl.n	8008cb2 <_printf_i+0xba>
 8008cba:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008cbe:	2e00      	cmp	r6, #0
 8008cc0:	da03      	bge.n	8008cca <_printf_i+0xd2>
 8008cc2:	232d      	movs	r3, #45	; 0x2d
 8008cc4:	4276      	negs	r6, r6
 8008cc6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cca:	485a      	ldr	r0, [pc, #360]	; (8008e34 <_printf_i+0x23c>)
 8008ccc:	230a      	movs	r3, #10
 8008cce:	e012      	b.n	8008cf6 <_printf_i+0xfe>
 8008cd0:	682b      	ldr	r3, [r5, #0]
 8008cd2:	6820      	ldr	r0, [r4, #0]
 8008cd4:	1d19      	adds	r1, r3, #4
 8008cd6:	6029      	str	r1, [r5, #0]
 8008cd8:	0605      	lsls	r5, r0, #24
 8008cda:	d501      	bpl.n	8008ce0 <_printf_i+0xe8>
 8008cdc:	681e      	ldr	r6, [r3, #0]
 8008cde:	e002      	b.n	8008ce6 <_printf_i+0xee>
 8008ce0:	0641      	lsls	r1, r0, #25
 8008ce2:	d5fb      	bpl.n	8008cdc <_printf_i+0xe4>
 8008ce4:	881e      	ldrh	r6, [r3, #0]
 8008ce6:	4853      	ldr	r0, [pc, #332]	; (8008e34 <_printf_i+0x23c>)
 8008ce8:	2f6f      	cmp	r7, #111	; 0x6f
 8008cea:	bf0c      	ite	eq
 8008cec:	2308      	moveq	r3, #8
 8008cee:	230a      	movne	r3, #10
 8008cf0:	2100      	movs	r1, #0
 8008cf2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008cf6:	6865      	ldr	r5, [r4, #4]
 8008cf8:	60a5      	str	r5, [r4, #8]
 8008cfa:	2d00      	cmp	r5, #0
 8008cfc:	bfa2      	ittt	ge
 8008cfe:	6821      	ldrge	r1, [r4, #0]
 8008d00:	f021 0104 	bicge.w	r1, r1, #4
 8008d04:	6021      	strge	r1, [r4, #0]
 8008d06:	b90e      	cbnz	r6, 8008d0c <_printf_i+0x114>
 8008d08:	2d00      	cmp	r5, #0
 8008d0a:	d04b      	beq.n	8008da4 <_printf_i+0x1ac>
 8008d0c:	4615      	mov	r5, r2
 8008d0e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d12:	fb03 6711 	mls	r7, r3, r1, r6
 8008d16:	5dc7      	ldrb	r7, [r0, r7]
 8008d18:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d1c:	4637      	mov	r7, r6
 8008d1e:	42bb      	cmp	r3, r7
 8008d20:	460e      	mov	r6, r1
 8008d22:	d9f4      	bls.n	8008d0e <_printf_i+0x116>
 8008d24:	2b08      	cmp	r3, #8
 8008d26:	d10b      	bne.n	8008d40 <_printf_i+0x148>
 8008d28:	6823      	ldr	r3, [r4, #0]
 8008d2a:	07de      	lsls	r6, r3, #31
 8008d2c:	d508      	bpl.n	8008d40 <_printf_i+0x148>
 8008d2e:	6923      	ldr	r3, [r4, #16]
 8008d30:	6861      	ldr	r1, [r4, #4]
 8008d32:	4299      	cmp	r1, r3
 8008d34:	bfde      	ittt	le
 8008d36:	2330      	movle	r3, #48	; 0x30
 8008d38:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008d3c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008d40:	1b52      	subs	r2, r2, r5
 8008d42:	6122      	str	r2, [r4, #16]
 8008d44:	f8cd a000 	str.w	sl, [sp]
 8008d48:	464b      	mov	r3, r9
 8008d4a:	aa03      	add	r2, sp, #12
 8008d4c:	4621      	mov	r1, r4
 8008d4e:	4640      	mov	r0, r8
 8008d50:	f7ff fee4 	bl	8008b1c <_printf_common>
 8008d54:	3001      	adds	r0, #1
 8008d56:	d14a      	bne.n	8008dee <_printf_i+0x1f6>
 8008d58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d5c:	b004      	add	sp, #16
 8008d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d62:	6823      	ldr	r3, [r4, #0]
 8008d64:	f043 0320 	orr.w	r3, r3, #32
 8008d68:	6023      	str	r3, [r4, #0]
 8008d6a:	4833      	ldr	r0, [pc, #204]	; (8008e38 <_printf_i+0x240>)
 8008d6c:	2778      	movs	r7, #120	; 0x78
 8008d6e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008d72:	6823      	ldr	r3, [r4, #0]
 8008d74:	6829      	ldr	r1, [r5, #0]
 8008d76:	061f      	lsls	r7, r3, #24
 8008d78:	f851 6b04 	ldr.w	r6, [r1], #4
 8008d7c:	d402      	bmi.n	8008d84 <_printf_i+0x18c>
 8008d7e:	065f      	lsls	r7, r3, #25
 8008d80:	bf48      	it	mi
 8008d82:	b2b6      	uxthmi	r6, r6
 8008d84:	07df      	lsls	r7, r3, #31
 8008d86:	bf48      	it	mi
 8008d88:	f043 0320 	orrmi.w	r3, r3, #32
 8008d8c:	6029      	str	r1, [r5, #0]
 8008d8e:	bf48      	it	mi
 8008d90:	6023      	strmi	r3, [r4, #0]
 8008d92:	b91e      	cbnz	r6, 8008d9c <_printf_i+0x1a4>
 8008d94:	6823      	ldr	r3, [r4, #0]
 8008d96:	f023 0320 	bic.w	r3, r3, #32
 8008d9a:	6023      	str	r3, [r4, #0]
 8008d9c:	2310      	movs	r3, #16
 8008d9e:	e7a7      	b.n	8008cf0 <_printf_i+0xf8>
 8008da0:	4824      	ldr	r0, [pc, #144]	; (8008e34 <_printf_i+0x23c>)
 8008da2:	e7e4      	b.n	8008d6e <_printf_i+0x176>
 8008da4:	4615      	mov	r5, r2
 8008da6:	e7bd      	b.n	8008d24 <_printf_i+0x12c>
 8008da8:	682b      	ldr	r3, [r5, #0]
 8008daa:	6826      	ldr	r6, [r4, #0]
 8008dac:	6961      	ldr	r1, [r4, #20]
 8008dae:	1d18      	adds	r0, r3, #4
 8008db0:	6028      	str	r0, [r5, #0]
 8008db2:	0635      	lsls	r5, r6, #24
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	d501      	bpl.n	8008dbc <_printf_i+0x1c4>
 8008db8:	6019      	str	r1, [r3, #0]
 8008dba:	e002      	b.n	8008dc2 <_printf_i+0x1ca>
 8008dbc:	0670      	lsls	r0, r6, #25
 8008dbe:	d5fb      	bpl.n	8008db8 <_printf_i+0x1c0>
 8008dc0:	8019      	strh	r1, [r3, #0]
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6123      	str	r3, [r4, #16]
 8008dc6:	4615      	mov	r5, r2
 8008dc8:	e7bc      	b.n	8008d44 <_printf_i+0x14c>
 8008dca:	682b      	ldr	r3, [r5, #0]
 8008dcc:	1d1a      	adds	r2, r3, #4
 8008dce:	602a      	str	r2, [r5, #0]
 8008dd0:	681d      	ldr	r5, [r3, #0]
 8008dd2:	6862      	ldr	r2, [r4, #4]
 8008dd4:	2100      	movs	r1, #0
 8008dd6:	4628      	mov	r0, r5
 8008dd8:	f7f7 f9fa 	bl	80001d0 <memchr>
 8008ddc:	b108      	cbz	r0, 8008de2 <_printf_i+0x1ea>
 8008dde:	1b40      	subs	r0, r0, r5
 8008de0:	6060      	str	r0, [r4, #4]
 8008de2:	6863      	ldr	r3, [r4, #4]
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	2300      	movs	r3, #0
 8008de8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dec:	e7aa      	b.n	8008d44 <_printf_i+0x14c>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	462a      	mov	r2, r5
 8008df2:	4649      	mov	r1, r9
 8008df4:	4640      	mov	r0, r8
 8008df6:	47d0      	blx	sl
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d0ad      	beq.n	8008d58 <_printf_i+0x160>
 8008dfc:	6823      	ldr	r3, [r4, #0]
 8008dfe:	079b      	lsls	r3, r3, #30
 8008e00:	d413      	bmi.n	8008e2a <_printf_i+0x232>
 8008e02:	68e0      	ldr	r0, [r4, #12]
 8008e04:	9b03      	ldr	r3, [sp, #12]
 8008e06:	4298      	cmp	r0, r3
 8008e08:	bfb8      	it	lt
 8008e0a:	4618      	movlt	r0, r3
 8008e0c:	e7a6      	b.n	8008d5c <_printf_i+0x164>
 8008e0e:	2301      	movs	r3, #1
 8008e10:	4632      	mov	r2, r6
 8008e12:	4649      	mov	r1, r9
 8008e14:	4640      	mov	r0, r8
 8008e16:	47d0      	blx	sl
 8008e18:	3001      	adds	r0, #1
 8008e1a:	d09d      	beq.n	8008d58 <_printf_i+0x160>
 8008e1c:	3501      	adds	r5, #1
 8008e1e:	68e3      	ldr	r3, [r4, #12]
 8008e20:	9903      	ldr	r1, [sp, #12]
 8008e22:	1a5b      	subs	r3, r3, r1
 8008e24:	42ab      	cmp	r3, r5
 8008e26:	dcf2      	bgt.n	8008e0e <_printf_i+0x216>
 8008e28:	e7eb      	b.n	8008e02 <_printf_i+0x20a>
 8008e2a:	2500      	movs	r5, #0
 8008e2c:	f104 0619 	add.w	r6, r4, #25
 8008e30:	e7f5      	b.n	8008e1e <_printf_i+0x226>
 8008e32:	bf00      	nop
 8008e34:	08009774 	.word	0x08009774
 8008e38:	08009785 	.word	0x08009785

08008e3c <__sflush_r>:
 8008e3c:	898a      	ldrh	r2, [r1, #12]
 8008e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e42:	4605      	mov	r5, r0
 8008e44:	0710      	lsls	r0, r2, #28
 8008e46:	460c      	mov	r4, r1
 8008e48:	d458      	bmi.n	8008efc <__sflush_r+0xc0>
 8008e4a:	684b      	ldr	r3, [r1, #4]
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	dc05      	bgt.n	8008e5c <__sflush_r+0x20>
 8008e50:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dc02      	bgt.n	8008e5c <__sflush_r+0x20>
 8008e56:	2000      	movs	r0, #0
 8008e58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e5e:	2e00      	cmp	r6, #0
 8008e60:	d0f9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008e62:	2300      	movs	r3, #0
 8008e64:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e68:	682f      	ldr	r7, [r5, #0]
 8008e6a:	6a21      	ldr	r1, [r4, #32]
 8008e6c:	602b      	str	r3, [r5, #0]
 8008e6e:	d032      	beq.n	8008ed6 <__sflush_r+0x9a>
 8008e70:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e72:	89a3      	ldrh	r3, [r4, #12]
 8008e74:	075a      	lsls	r2, r3, #29
 8008e76:	d505      	bpl.n	8008e84 <__sflush_r+0x48>
 8008e78:	6863      	ldr	r3, [r4, #4]
 8008e7a:	1ac0      	subs	r0, r0, r3
 8008e7c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e7e:	b10b      	cbz	r3, 8008e84 <__sflush_r+0x48>
 8008e80:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e82:	1ac0      	subs	r0, r0, r3
 8008e84:	2300      	movs	r3, #0
 8008e86:	4602      	mov	r2, r0
 8008e88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e8a:	6a21      	ldr	r1, [r4, #32]
 8008e8c:	4628      	mov	r0, r5
 8008e8e:	47b0      	blx	r6
 8008e90:	1c43      	adds	r3, r0, #1
 8008e92:	89a3      	ldrh	r3, [r4, #12]
 8008e94:	d106      	bne.n	8008ea4 <__sflush_r+0x68>
 8008e96:	6829      	ldr	r1, [r5, #0]
 8008e98:	291d      	cmp	r1, #29
 8008e9a:	d82b      	bhi.n	8008ef4 <__sflush_r+0xb8>
 8008e9c:	4a29      	ldr	r2, [pc, #164]	; (8008f44 <__sflush_r+0x108>)
 8008e9e:	410a      	asrs	r2, r1
 8008ea0:	07d6      	lsls	r6, r2, #31
 8008ea2:	d427      	bmi.n	8008ef4 <__sflush_r+0xb8>
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	6062      	str	r2, [r4, #4]
 8008ea8:	04d9      	lsls	r1, r3, #19
 8008eaa:	6922      	ldr	r2, [r4, #16]
 8008eac:	6022      	str	r2, [r4, #0]
 8008eae:	d504      	bpl.n	8008eba <__sflush_r+0x7e>
 8008eb0:	1c42      	adds	r2, r0, #1
 8008eb2:	d101      	bne.n	8008eb8 <__sflush_r+0x7c>
 8008eb4:	682b      	ldr	r3, [r5, #0]
 8008eb6:	b903      	cbnz	r3, 8008eba <__sflush_r+0x7e>
 8008eb8:	6560      	str	r0, [r4, #84]	; 0x54
 8008eba:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ebc:	602f      	str	r7, [r5, #0]
 8008ebe:	2900      	cmp	r1, #0
 8008ec0:	d0c9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008ec2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	d002      	beq.n	8008ed0 <__sflush_r+0x94>
 8008eca:	4628      	mov	r0, r5
 8008ecc:	f7ff fbee 	bl	80086ac <_free_r>
 8008ed0:	2000      	movs	r0, #0
 8008ed2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ed4:	e7c0      	b.n	8008e58 <__sflush_r+0x1c>
 8008ed6:	2301      	movs	r3, #1
 8008ed8:	4628      	mov	r0, r5
 8008eda:	47b0      	blx	r6
 8008edc:	1c41      	adds	r1, r0, #1
 8008ede:	d1c8      	bne.n	8008e72 <__sflush_r+0x36>
 8008ee0:	682b      	ldr	r3, [r5, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d0c5      	beq.n	8008e72 <__sflush_r+0x36>
 8008ee6:	2b1d      	cmp	r3, #29
 8008ee8:	d001      	beq.n	8008eee <__sflush_r+0xb2>
 8008eea:	2b16      	cmp	r3, #22
 8008eec:	d101      	bne.n	8008ef2 <__sflush_r+0xb6>
 8008eee:	602f      	str	r7, [r5, #0]
 8008ef0:	e7b1      	b.n	8008e56 <__sflush_r+0x1a>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ef8:	81a3      	strh	r3, [r4, #12]
 8008efa:	e7ad      	b.n	8008e58 <__sflush_r+0x1c>
 8008efc:	690f      	ldr	r7, [r1, #16]
 8008efe:	2f00      	cmp	r7, #0
 8008f00:	d0a9      	beq.n	8008e56 <__sflush_r+0x1a>
 8008f02:	0793      	lsls	r3, r2, #30
 8008f04:	680e      	ldr	r6, [r1, #0]
 8008f06:	bf08      	it	eq
 8008f08:	694b      	ldreq	r3, [r1, #20]
 8008f0a:	600f      	str	r7, [r1, #0]
 8008f0c:	bf18      	it	ne
 8008f0e:	2300      	movne	r3, #0
 8008f10:	eba6 0807 	sub.w	r8, r6, r7
 8008f14:	608b      	str	r3, [r1, #8]
 8008f16:	f1b8 0f00 	cmp.w	r8, #0
 8008f1a:	dd9c      	ble.n	8008e56 <__sflush_r+0x1a>
 8008f1c:	6a21      	ldr	r1, [r4, #32]
 8008f1e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f20:	4643      	mov	r3, r8
 8008f22:	463a      	mov	r2, r7
 8008f24:	4628      	mov	r0, r5
 8008f26:	47b0      	blx	r6
 8008f28:	2800      	cmp	r0, #0
 8008f2a:	dc06      	bgt.n	8008f3a <__sflush_r+0xfe>
 8008f2c:	89a3      	ldrh	r3, [r4, #12]
 8008f2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f32:	81a3      	strh	r3, [r4, #12]
 8008f34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f38:	e78e      	b.n	8008e58 <__sflush_r+0x1c>
 8008f3a:	4407      	add	r7, r0
 8008f3c:	eba8 0800 	sub.w	r8, r8, r0
 8008f40:	e7e9      	b.n	8008f16 <__sflush_r+0xda>
 8008f42:	bf00      	nop
 8008f44:	dfbffffe 	.word	0xdfbffffe

08008f48 <_fflush_r>:
 8008f48:	b538      	push	{r3, r4, r5, lr}
 8008f4a:	690b      	ldr	r3, [r1, #16]
 8008f4c:	4605      	mov	r5, r0
 8008f4e:	460c      	mov	r4, r1
 8008f50:	b913      	cbnz	r3, 8008f58 <_fflush_r+0x10>
 8008f52:	2500      	movs	r5, #0
 8008f54:	4628      	mov	r0, r5
 8008f56:	bd38      	pop	{r3, r4, r5, pc}
 8008f58:	b118      	cbz	r0, 8008f62 <_fflush_r+0x1a>
 8008f5a:	6a03      	ldr	r3, [r0, #32]
 8008f5c:	b90b      	cbnz	r3, 8008f62 <_fflush_r+0x1a>
 8008f5e:	f7ff faa5 	bl	80084ac <__sinit>
 8008f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d0f3      	beq.n	8008f52 <_fflush_r+0xa>
 8008f6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f6c:	07d0      	lsls	r0, r2, #31
 8008f6e:	d404      	bmi.n	8008f7a <_fflush_r+0x32>
 8008f70:	0599      	lsls	r1, r3, #22
 8008f72:	d402      	bmi.n	8008f7a <_fflush_r+0x32>
 8008f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f76:	f7ff fb6a 	bl	800864e <__retarget_lock_acquire_recursive>
 8008f7a:	4628      	mov	r0, r5
 8008f7c:	4621      	mov	r1, r4
 8008f7e:	f7ff ff5d 	bl	8008e3c <__sflush_r>
 8008f82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f84:	07da      	lsls	r2, r3, #31
 8008f86:	4605      	mov	r5, r0
 8008f88:	d4e4      	bmi.n	8008f54 <_fflush_r+0xc>
 8008f8a:	89a3      	ldrh	r3, [r4, #12]
 8008f8c:	059b      	lsls	r3, r3, #22
 8008f8e:	d4e1      	bmi.n	8008f54 <_fflush_r+0xc>
 8008f90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f92:	f7ff fb5d 	bl	8008650 <__retarget_lock_release_recursive>
 8008f96:	e7dd      	b.n	8008f54 <_fflush_r+0xc>

08008f98 <__malloc_lock>:
 8008f98:	4801      	ldr	r0, [pc, #4]	; (8008fa0 <__malloc_lock+0x8>)
 8008f9a:	f7ff bb58 	b.w	800864e <__retarget_lock_acquire_recursive>
 8008f9e:	bf00      	nop
 8008fa0:	20004bb0 	.word	0x20004bb0

08008fa4 <__malloc_unlock>:
 8008fa4:	4801      	ldr	r0, [pc, #4]	; (8008fac <__malloc_unlock+0x8>)
 8008fa6:	f7ff bb53 	b.w	8008650 <__retarget_lock_release_recursive>
 8008faa:	bf00      	nop
 8008fac:	20004bb0 	.word	0x20004bb0

08008fb0 <__sread>:
 8008fb0:	b510      	push	{r4, lr}
 8008fb2:	460c      	mov	r4, r1
 8008fb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fb8:	f000 f98c 	bl	80092d4 <_read_r>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	bfab      	itete	ge
 8008fc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008fc2:	89a3      	ldrhlt	r3, [r4, #12]
 8008fc4:	181b      	addge	r3, r3, r0
 8008fc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008fca:	bfac      	ite	ge
 8008fcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8008fce:	81a3      	strhlt	r3, [r4, #12]
 8008fd0:	bd10      	pop	{r4, pc}

08008fd2 <__swrite>:
 8008fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fd6:	461f      	mov	r7, r3
 8008fd8:	898b      	ldrh	r3, [r1, #12]
 8008fda:	05db      	lsls	r3, r3, #23
 8008fdc:	4605      	mov	r5, r0
 8008fde:	460c      	mov	r4, r1
 8008fe0:	4616      	mov	r6, r2
 8008fe2:	d505      	bpl.n	8008ff0 <__swrite+0x1e>
 8008fe4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fe8:	2302      	movs	r3, #2
 8008fea:	2200      	movs	r2, #0
 8008fec:	f000 f960 	bl	80092b0 <_lseek_r>
 8008ff0:	89a3      	ldrh	r3, [r4, #12]
 8008ff2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ff6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008ffa:	81a3      	strh	r3, [r4, #12]
 8008ffc:	4632      	mov	r2, r6
 8008ffe:	463b      	mov	r3, r7
 8009000:	4628      	mov	r0, r5
 8009002:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009006:	f000 b987 	b.w	8009318 <_write_r>

0800900a <__sseek>:
 800900a:	b510      	push	{r4, lr}
 800900c:	460c      	mov	r4, r1
 800900e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009012:	f000 f94d 	bl	80092b0 <_lseek_r>
 8009016:	1c43      	adds	r3, r0, #1
 8009018:	89a3      	ldrh	r3, [r4, #12]
 800901a:	bf15      	itete	ne
 800901c:	6560      	strne	r0, [r4, #84]	; 0x54
 800901e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009022:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009026:	81a3      	strheq	r3, [r4, #12]
 8009028:	bf18      	it	ne
 800902a:	81a3      	strhne	r3, [r4, #12]
 800902c:	bd10      	pop	{r4, pc}

0800902e <__sclose>:
 800902e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009032:	f000 b90b 	b.w	800924c <_close_r>
	...

08009038 <fiprintf>:
 8009038:	b40e      	push	{r1, r2, r3}
 800903a:	b503      	push	{r0, r1, lr}
 800903c:	4601      	mov	r1, r0
 800903e:	ab03      	add	r3, sp, #12
 8009040:	4805      	ldr	r0, [pc, #20]	; (8009058 <fiprintf+0x20>)
 8009042:	f853 2b04 	ldr.w	r2, [r3], #4
 8009046:	6800      	ldr	r0, [r0, #0]
 8009048:	9301      	str	r3, [sp, #4]
 800904a:	f7ff fba5 	bl	8008798 <_vfiprintf_r>
 800904e:	b002      	add	sp, #8
 8009050:	f85d eb04 	ldr.w	lr, [sp], #4
 8009054:	b003      	add	sp, #12
 8009056:	4770      	bx	lr
 8009058:	2000006c 	.word	0x2000006c

0800905c <__swbuf_r>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	460e      	mov	r6, r1
 8009060:	4614      	mov	r4, r2
 8009062:	4605      	mov	r5, r0
 8009064:	b118      	cbz	r0, 800906e <__swbuf_r+0x12>
 8009066:	6a03      	ldr	r3, [r0, #32]
 8009068:	b90b      	cbnz	r3, 800906e <__swbuf_r+0x12>
 800906a:	f7ff fa1f 	bl	80084ac <__sinit>
 800906e:	69a3      	ldr	r3, [r4, #24]
 8009070:	60a3      	str	r3, [r4, #8]
 8009072:	89a3      	ldrh	r3, [r4, #12]
 8009074:	071a      	lsls	r2, r3, #28
 8009076:	d525      	bpl.n	80090c4 <__swbuf_r+0x68>
 8009078:	6923      	ldr	r3, [r4, #16]
 800907a:	b31b      	cbz	r3, 80090c4 <__swbuf_r+0x68>
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	6922      	ldr	r2, [r4, #16]
 8009080:	1a98      	subs	r0, r3, r2
 8009082:	6963      	ldr	r3, [r4, #20]
 8009084:	b2f6      	uxtb	r6, r6
 8009086:	4283      	cmp	r3, r0
 8009088:	4637      	mov	r7, r6
 800908a:	dc04      	bgt.n	8009096 <__swbuf_r+0x3a>
 800908c:	4621      	mov	r1, r4
 800908e:	4628      	mov	r0, r5
 8009090:	f7ff ff5a 	bl	8008f48 <_fflush_r>
 8009094:	b9e0      	cbnz	r0, 80090d0 <__swbuf_r+0x74>
 8009096:	68a3      	ldr	r3, [r4, #8]
 8009098:	3b01      	subs	r3, #1
 800909a:	60a3      	str	r3, [r4, #8]
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	1c5a      	adds	r2, r3, #1
 80090a0:	6022      	str	r2, [r4, #0]
 80090a2:	701e      	strb	r6, [r3, #0]
 80090a4:	6962      	ldr	r2, [r4, #20]
 80090a6:	1c43      	adds	r3, r0, #1
 80090a8:	429a      	cmp	r2, r3
 80090aa:	d004      	beq.n	80090b6 <__swbuf_r+0x5a>
 80090ac:	89a3      	ldrh	r3, [r4, #12]
 80090ae:	07db      	lsls	r3, r3, #31
 80090b0:	d506      	bpl.n	80090c0 <__swbuf_r+0x64>
 80090b2:	2e0a      	cmp	r6, #10
 80090b4:	d104      	bne.n	80090c0 <__swbuf_r+0x64>
 80090b6:	4621      	mov	r1, r4
 80090b8:	4628      	mov	r0, r5
 80090ba:	f7ff ff45 	bl	8008f48 <_fflush_r>
 80090be:	b938      	cbnz	r0, 80090d0 <__swbuf_r+0x74>
 80090c0:	4638      	mov	r0, r7
 80090c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80090c4:	4621      	mov	r1, r4
 80090c6:	4628      	mov	r0, r5
 80090c8:	f000 f806 	bl	80090d8 <__swsetup_r>
 80090cc:	2800      	cmp	r0, #0
 80090ce:	d0d5      	beq.n	800907c <__swbuf_r+0x20>
 80090d0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80090d4:	e7f4      	b.n	80090c0 <__swbuf_r+0x64>
	...

080090d8 <__swsetup_r>:
 80090d8:	b538      	push	{r3, r4, r5, lr}
 80090da:	4b2a      	ldr	r3, [pc, #168]	; (8009184 <__swsetup_r+0xac>)
 80090dc:	4605      	mov	r5, r0
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	460c      	mov	r4, r1
 80090e2:	b118      	cbz	r0, 80090ec <__swsetup_r+0x14>
 80090e4:	6a03      	ldr	r3, [r0, #32]
 80090e6:	b90b      	cbnz	r3, 80090ec <__swsetup_r+0x14>
 80090e8:	f7ff f9e0 	bl	80084ac <__sinit>
 80090ec:	89a3      	ldrh	r3, [r4, #12]
 80090ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090f2:	0718      	lsls	r0, r3, #28
 80090f4:	d422      	bmi.n	800913c <__swsetup_r+0x64>
 80090f6:	06d9      	lsls	r1, r3, #27
 80090f8:	d407      	bmi.n	800910a <__swsetup_r+0x32>
 80090fa:	2309      	movs	r3, #9
 80090fc:	602b      	str	r3, [r5, #0]
 80090fe:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009102:	81a3      	strh	r3, [r4, #12]
 8009104:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009108:	e034      	b.n	8009174 <__swsetup_r+0x9c>
 800910a:	0758      	lsls	r0, r3, #29
 800910c:	d512      	bpl.n	8009134 <__swsetup_r+0x5c>
 800910e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009110:	b141      	cbz	r1, 8009124 <__swsetup_r+0x4c>
 8009112:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009116:	4299      	cmp	r1, r3
 8009118:	d002      	beq.n	8009120 <__swsetup_r+0x48>
 800911a:	4628      	mov	r0, r5
 800911c:	f7ff fac6 	bl	80086ac <_free_r>
 8009120:	2300      	movs	r3, #0
 8009122:	6363      	str	r3, [r4, #52]	; 0x34
 8009124:	89a3      	ldrh	r3, [r4, #12]
 8009126:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800912a:	81a3      	strh	r3, [r4, #12]
 800912c:	2300      	movs	r3, #0
 800912e:	6063      	str	r3, [r4, #4]
 8009130:	6923      	ldr	r3, [r4, #16]
 8009132:	6023      	str	r3, [r4, #0]
 8009134:	89a3      	ldrh	r3, [r4, #12]
 8009136:	f043 0308 	orr.w	r3, r3, #8
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	6923      	ldr	r3, [r4, #16]
 800913e:	b94b      	cbnz	r3, 8009154 <__swsetup_r+0x7c>
 8009140:	89a3      	ldrh	r3, [r4, #12]
 8009142:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009146:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800914a:	d003      	beq.n	8009154 <__swsetup_r+0x7c>
 800914c:	4621      	mov	r1, r4
 800914e:	4628      	mov	r0, r5
 8009150:	f000 f840 	bl	80091d4 <__smakebuf_r>
 8009154:	89a0      	ldrh	r0, [r4, #12]
 8009156:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800915a:	f010 0301 	ands.w	r3, r0, #1
 800915e:	d00a      	beq.n	8009176 <__swsetup_r+0x9e>
 8009160:	2300      	movs	r3, #0
 8009162:	60a3      	str	r3, [r4, #8]
 8009164:	6963      	ldr	r3, [r4, #20]
 8009166:	425b      	negs	r3, r3
 8009168:	61a3      	str	r3, [r4, #24]
 800916a:	6923      	ldr	r3, [r4, #16]
 800916c:	b943      	cbnz	r3, 8009180 <__swsetup_r+0xa8>
 800916e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009172:	d1c4      	bne.n	80090fe <__swsetup_r+0x26>
 8009174:	bd38      	pop	{r3, r4, r5, pc}
 8009176:	0781      	lsls	r1, r0, #30
 8009178:	bf58      	it	pl
 800917a:	6963      	ldrpl	r3, [r4, #20]
 800917c:	60a3      	str	r3, [r4, #8]
 800917e:	e7f4      	b.n	800916a <__swsetup_r+0x92>
 8009180:	2000      	movs	r0, #0
 8009182:	e7f7      	b.n	8009174 <__swsetup_r+0x9c>
 8009184:	2000006c 	.word	0x2000006c

08009188 <__swhatbuf_r>:
 8009188:	b570      	push	{r4, r5, r6, lr}
 800918a:	460c      	mov	r4, r1
 800918c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009190:	2900      	cmp	r1, #0
 8009192:	b096      	sub	sp, #88	; 0x58
 8009194:	4615      	mov	r5, r2
 8009196:	461e      	mov	r6, r3
 8009198:	da0d      	bge.n	80091b6 <__swhatbuf_r+0x2e>
 800919a:	89a3      	ldrh	r3, [r4, #12]
 800919c:	f013 0f80 	tst.w	r3, #128	; 0x80
 80091a0:	f04f 0100 	mov.w	r1, #0
 80091a4:	bf0c      	ite	eq
 80091a6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80091aa:	2340      	movne	r3, #64	; 0x40
 80091ac:	2000      	movs	r0, #0
 80091ae:	6031      	str	r1, [r6, #0]
 80091b0:	602b      	str	r3, [r5, #0]
 80091b2:	b016      	add	sp, #88	; 0x58
 80091b4:	bd70      	pop	{r4, r5, r6, pc}
 80091b6:	466a      	mov	r2, sp
 80091b8:	f000 f858 	bl	800926c <_fstat_r>
 80091bc:	2800      	cmp	r0, #0
 80091be:	dbec      	blt.n	800919a <__swhatbuf_r+0x12>
 80091c0:	9901      	ldr	r1, [sp, #4]
 80091c2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80091c6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80091ca:	4259      	negs	r1, r3
 80091cc:	4159      	adcs	r1, r3
 80091ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80091d2:	e7eb      	b.n	80091ac <__swhatbuf_r+0x24>

080091d4 <__smakebuf_r>:
 80091d4:	898b      	ldrh	r3, [r1, #12]
 80091d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80091d8:	079d      	lsls	r5, r3, #30
 80091da:	4606      	mov	r6, r0
 80091dc:	460c      	mov	r4, r1
 80091de:	d507      	bpl.n	80091f0 <__smakebuf_r+0x1c>
 80091e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80091e4:	6023      	str	r3, [r4, #0]
 80091e6:	6123      	str	r3, [r4, #16]
 80091e8:	2301      	movs	r3, #1
 80091ea:	6163      	str	r3, [r4, #20]
 80091ec:	b002      	add	sp, #8
 80091ee:	bd70      	pop	{r4, r5, r6, pc}
 80091f0:	ab01      	add	r3, sp, #4
 80091f2:	466a      	mov	r2, sp
 80091f4:	f7ff ffc8 	bl	8009188 <__swhatbuf_r>
 80091f8:	9900      	ldr	r1, [sp, #0]
 80091fa:	4605      	mov	r5, r0
 80091fc:	4630      	mov	r0, r6
 80091fe:	f7ff fc0d 	bl	8008a1c <_malloc_r>
 8009202:	b948      	cbnz	r0, 8009218 <__smakebuf_r+0x44>
 8009204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009208:	059a      	lsls	r2, r3, #22
 800920a:	d4ef      	bmi.n	80091ec <__smakebuf_r+0x18>
 800920c:	f023 0303 	bic.w	r3, r3, #3
 8009210:	f043 0302 	orr.w	r3, r3, #2
 8009214:	81a3      	strh	r3, [r4, #12]
 8009216:	e7e3      	b.n	80091e0 <__smakebuf_r+0xc>
 8009218:	89a3      	ldrh	r3, [r4, #12]
 800921a:	6020      	str	r0, [r4, #0]
 800921c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009220:	81a3      	strh	r3, [r4, #12]
 8009222:	9b00      	ldr	r3, [sp, #0]
 8009224:	6163      	str	r3, [r4, #20]
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	6120      	str	r0, [r4, #16]
 800922a:	b15b      	cbz	r3, 8009244 <__smakebuf_r+0x70>
 800922c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009230:	4630      	mov	r0, r6
 8009232:	f000 f82d 	bl	8009290 <_isatty_r>
 8009236:	b128      	cbz	r0, 8009244 <__smakebuf_r+0x70>
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	f023 0303 	bic.w	r3, r3, #3
 800923e:	f043 0301 	orr.w	r3, r3, #1
 8009242:	81a3      	strh	r3, [r4, #12]
 8009244:	89a3      	ldrh	r3, [r4, #12]
 8009246:	431d      	orrs	r5, r3
 8009248:	81a5      	strh	r5, [r4, #12]
 800924a:	e7cf      	b.n	80091ec <__smakebuf_r+0x18>

0800924c <_close_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	4d06      	ldr	r5, [pc, #24]	; (8009268 <_close_r+0x1c>)
 8009250:	2300      	movs	r3, #0
 8009252:	4604      	mov	r4, r0
 8009254:	4608      	mov	r0, r1
 8009256:	602b      	str	r3, [r5, #0]
 8009258:	f7f8 f8c9 	bl	80013ee <_close>
 800925c:	1c43      	adds	r3, r0, #1
 800925e:	d102      	bne.n	8009266 <_close_r+0x1a>
 8009260:	682b      	ldr	r3, [r5, #0]
 8009262:	b103      	cbz	r3, 8009266 <_close_r+0x1a>
 8009264:	6023      	str	r3, [r4, #0]
 8009266:	bd38      	pop	{r3, r4, r5, pc}
 8009268:	20004bac 	.word	0x20004bac

0800926c <_fstat_r>:
 800926c:	b538      	push	{r3, r4, r5, lr}
 800926e:	4d07      	ldr	r5, [pc, #28]	; (800928c <_fstat_r+0x20>)
 8009270:	2300      	movs	r3, #0
 8009272:	4604      	mov	r4, r0
 8009274:	4608      	mov	r0, r1
 8009276:	4611      	mov	r1, r2
 8009278:	602b      	str	r3, [r5, #0]
 800927a:	f7f8 f8c4 	bl	8001406 <_fstat>
 800927e:	1c43      	adds	r3, r0, #1
 8009280:	d102      	bne.n	8009288 <_fstat_r+0x1c>
 8009282:	682b      	ldr	r3, [r5, #0]
 8009284:	b103      	cbz	r3, 8009288 <_fstat_r+0x1c>
 8009286:	6023      	str	r3, [r4, #0]
 8009288:	bd38      	pop	{r3, r4, r5, pc}
 800928a:	bf00      	nop
 800928c:	20004bac 	.word	0x20004bac

08009290 <_isatty_r>:
 8009290:	b538      	push	{r3, r4, r5, lr}
 8009292:	4d06      	ldr	r5, [pc, #24]	; (80092ac <_isatty_r+0x1c>)
 8009294:	2300      	movs	r3, #0
 8009296:	4604      	mov	r4, r0
 8009298:	4608      	mov	r0, r1
 800929a:	602b      	str	r3, [r5, #0]
 800929c:	f7f8 f8c3 	bl	8001426 <_isatty>
 80092a0:	1c43      	adds	r3, r0, #1
 80092a2:	d102      	bne.n	80092aa <_isatty_r+0x1a>
 80092a4:	682b      	ldr	r3, [r5, #0]
 80092a6:	b103      	cbz	r3, 80092aa <_isatty_r+0x1a>
 80092a8:	6023      	str	r3, [r4, #0]
 80092aa:	bd38      	pop	{r3, r4, r5, pc}
 80092ac:	20004bac 	.word	0x20004bac

080092b0 <_lseek_r>:
 80092b0:	b538      	push	{r3, r4, r5, lr}
 80092b2:	4d07      	ldr	r5, [pc, #28]	; (80092d0 <_lseek_r+0x20>)
 80092b4:	4604      	mov	r4, r0
 80092b6:	4608      	mov	r0, r1
 80092b8:	4611      	mov	r1, r2
 80092ba:	2200      	movs	r2, #0
 80092bc:	602a      	str	r2, [r5, #0]
 80092be:	461a      	mov	r2, r3
 80092c0:	f7f8 f8bc 	bl	800143c <_lseek>
 80092c4:	1c43      	adds	r3, r0, #1
 80092c6:	d102      	bne.n	80092ce <_lseek_r+0x1e>
 80092c8:	682b      	ldr	r3, [r5, #0]
 80092ca:	b103      	cbz	r3, 80092ce <_lseek_r+0x1e>
 80092cc:	6023      	str	r3, [r4, #0]
 80092ce:	bd38      	pop	{r3, r4, r5, pc}
 80092d0:	20004bac 	.word	0x20004bac

080092d4 <_read_r>:
 80092d4:	b538      	push	{r3, r4, r5, lr}
 80092d6:	4d07      	ldr	r5, [pc, #28]	; (80092f4 <_read_r+0x20>)
 80092d8:	4604      	mov	r4, r0
 80092da:	4608      	mov	r0, r1
 80092dc:	4611      	mov	r1, r2
 80092de:	2200      	movs	r2, #0
 80092e0:	602a      	str	r2, [r5, #0]
 80092e2:	461a      	mov	r2, r3
 80092e4:	f7f8 f84a 	bl	800137c <_read>
 80092e8:	1c43      	adds	r3, r0, #1
 80092ea:	d102      	bne.n	80092f2 <_read_r+0x1e>
 80092ec:	682b      	ldr	r3, [r5, #0]
 80092ee:	b103      	cbz	r3, 80092f2 <_read_r+0x1e>
 80092f0:	6023      	str	r3, [r4, #0]
 80092f2:	bd38      	pop	{r3, r4, r5, pc}
 80092f4:	20004bac 	.word	0x20004bac

080092f8 <_sbrk_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	; (8009314 <_sbrk_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f8 f8a8 	bl	8001458 <_sbrk>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_sbrk_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_sbrk_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	20004bac 	.word	0x20004bac

08009318 <_write_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d07      	ldr	r5, [pc, #28]	; (8009338 <_write_r+0x20>)
 800931c:	4604      	mov	r4, r0
 800931e:	4608      	mov	r0, r1
 8009320:	4611      	mov	r1, r2
 8009322:	2200      	movs	r2, #0
 8009324:	602a      	str	r2, [r5, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	f7f8 f845 	bl	80013b6 <_write>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_write_r+0x1e>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_write_r+0x1e>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	20004bac 	.word	0x20004bac

0800933c <abort>:
 800933c:	b508      	push	{r3, lr}
 800933e:	2006      	movs	r0, #6
 8009340:	f000 f82c 	bl	800939c <raise>
 8009344:	2001      	movs	r0, #1
 8009346:	f7f8 f80f 	bl	8001368 <_exit>

0800934a <_raise_r>:
 800934a:	291f      	cmp	r1, #31
 800934c:	b538      	push	{r3, r4, r5, lr}
 800934e:	4604      	mov	r4, r0
 8009350:	460d      	mov	r5, r1
 8009352:	d904      	bls.n	800935e <_raise_r+0x14>
 8009354:	2316      	movs	r3, #22
 8009356:	6003      	str	r3, [r0, #0]
 8009358:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800935c:	bd38      	pop	{r3, r4, r5, pc}
 800935e:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009360:	b112      	cbz	r2, 8009368 <_raise_r+0x1e>
 8009362:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009366:	b94b      	cbnz	r3, 800937c <_raise_r+0x32>
 8009368:	4620      	mov	r0, r4
 800936a:	f000 f831 	bl	80093d0 <_getpid_r>
 800936e:	462a      	mov	r2, r5
 8009370:	4601      	mov	r1, r0
 8009372:	4620      	mov	r0, r4
 8009374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009378:	f000 b818 	b.w	80093ac <_kill_r>
 800937c:	2b01      	cmp	r3, #1
 800937e:	d00a      	beq.n	8009396 <_raise_r+0x4c>
 8009380:	1c59      	adds	r1, r3, #1
 8009382:	d103      	bne.n	800938c <_raise_r+0x42>
 8009384:	2316      	movs	r3, #22
 8009386:	6003      	str	r3, [r0, #0]
 8009388:	2001      	movs	r0, #1
 800938a:	e7e7      	b.n	800935c <_raise_r+0x12>
 800938c:	2400      	movs	r4, #0
 800938e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009392:	4628      	mov	r0, r5
 8009394:	4798      	blx	r3
 8009396:	2000      	movs	r0, #0
 8009398:	e7e0      	b.n	800935c <_raise_r+0x12>
	...

0800939c <raise>:
 800939c:	4b02      	ldr	r3, [pc, #8]	; (80093a8 <raise+0xc>)
 800939e:	4601      	mov	r1, r0
 80093a0:	6818      	ldr	r0, [r3, #0]
 80093a2:	f7ff bfd2 	b.w	800934a <_raise_r>
 80093a6:	bf00      	nop
 80093a8:	2000006c 	.word	0x2000006c

080093ac <_kill_r>:
 80093ac:	b538      	push	{r3, r4, r5, lr}
 80093ae:	4d07      	ldr	r5, [pc, #28]	; (80093cc <_kill_r+0x20>)
 80093b0:	2300      	movs	r3, #0
 80093b2:	4604      	mov	r4, r0
 80093b4:	4608      	mov	r0, r1
 80093b6:	4611      	mov	r1, r2
 80093b8:	602b      	str	r3, [r5, #0]
 80093ba:	f7f7 ffc5 	bl	8001348 <_kill>
 80093be:	1c43      	adds	r3, r0, #1
 80093c0:	d102      	bne.n	80093c8 <_kill_r+0x1c>
 80093c2:	682b      	ldr	r3, [r5, #0]
 80093c4:	b103      	cbz	r3, 80093c8 <_kill_r+0x1c>
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	bd38      	pop	{r3, r4, r5, pc}
 80093ca:	bf00      	nop
 80093cc:	20004bac 	.word	0x20004bac

080093d0 <_getpid_r>:
 80093d0:	f7f7 bfb2 	b.w	8001338 <_getpid>

080093d4 <_init>:
 80093d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d6:	bf00      	nop
 80093d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093da:	bc08      	pop	{r3}
 80093dc:	469e      	mov	lr, r3
 80093de:	4770      	bx	lr

080093e0 <_fini>:
 80093e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093e2:	bf00      	nop
 80093e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093e6:	bc08      	pop	{r3}
 80093e8:	469e      	mov	lr, r3
 80093ea:	4770      	bx	lr
