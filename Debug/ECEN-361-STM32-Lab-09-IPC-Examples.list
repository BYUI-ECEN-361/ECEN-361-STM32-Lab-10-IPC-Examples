
ECEN-361-STM32-Lab-09-IPC-Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000220  08008a7c  08008a7c  00018a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c9c  08008c9c  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008c9c  08008c9c  00018c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008ca4  08008ca4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008ca4  08008ca4  00018ca4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008ca8  08008ca8  00018ca8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008cac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b38  20000070  08008d1c  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ba8  08008d1c  00024ba8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c387  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a79  00000000  00000000  0003c46a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017e8  00000000  00000000  0003fee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001286  00000000  00000000  000416d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029678  00000000  00000000  00042956  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ac01  00000000  00000000  0006bfce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff924  00000000  00000000  00086bcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006bc4  00000000  00000000  001864f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0018d0b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a64 	.word	0x08008a64

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08008a64 	.word	0x08008a64

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <shiftOut>:
#define SevenSeg_LATCH_Port

void shiftOut(	GPIO_TypeDef* dataPort,uint16_t dataPin,
				GPIO_TypeDef* clockPort, uint16_t clockPin,
				uint8_t bitOrder, uint8_t val)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0
 8000572:	60f8      	str	r0, [r7, #12]
 8000574:	607a      	str	r2, [r7, #4]
 8000576:	461a      	mov	r2, r3
 8000578:	460b      	mov	r3, r1
 800057a:	817b      	strh	r3, [r7, #10]
 800057c:	4613      	mov	r3, r2
 800057e:	813b      	strh	r3, [r7, #8]
	uint8_t i;

	for (i = 0; i < 8; i++)  {
 8000580:	2300      	movs	r3, #0
 8000582:	75fb      	strb	r3, [r7, #23]
 8000584:	e038      	b.n	80005f8 <shiftOut+0x8c>
		if (bitOrder == LSBFIRST) {
 8000586:	f897 3020 	ldrb.w	r3, [r7, #32]
 800058a:	2b00      	cmp	r3, #0
 800058c:	d10f      	bne.n	80005ae <shiftOut+0x42>
			HAL_GPIO_WritePin(dataPort, dataPin,val & 1);
 800058e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	b2da      	uxtb	r2, r3
 8000598:	897b      	ldrh	r3, [r7, #10]
 800059a:	4619      	mov	r1, r3
 800059c:	68f8      	ldr	r0, [r7, #12]
 800059e:	f001 f911 	bl	80017c4 <HAL_GPIO_WritePin>
			val >>= 1;
 80005a2:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005a6:	085b      	lsrs	r3, r3, #1
 80005a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80005ac:	e00f      	b.n	80005ce <shiftOut+0x62>
		} else {	
			HAL_GPIO_WritePin(dataPort, dataPin, (val & 128) != 0);
 80005ae:	f997 3024 	ldrsb.w	r3, [r7, #36]	; 0x24
 80005b2:	b2db      	uxtb	r3, r3
 80005b4:	09db      	lsrs	r3, r3, #7
 80005b6:	b2db      	uxtb	r3, r3
 80005b8:	461a      	mov	r2, r3
 80005ba:	897b      	ldrh	r3, [r7, #10]
 80005bc:	4619      	mov	r1, r3
 80005be:	68f8      	ldr	r0, [r7, #12]
 80005c0:	f001 f900 	bl	80017c4 <HAL_GPIO_WritePin>
			val <<= 1;
 80005c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		}
			
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005ce:	893b      	ldrh	r3, [r7, #8]
 80005d0:	2200      	movs	r2, #0
 80005d2:	4619      	mov	r1, r3
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f001 f8f5 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_SET);
 80005da:	893b      	ldrh	r3, [r7, #8]
 80005dc:	2201      	movs	r2, #1
 80005de:	4619      	mov	r1, r3
 80005e0:	6878      	ldr	r0, [r7, #4]
 80005e2:	f001 f8ef 	bl	80017c4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(clockPort, clockPin,GPIO_PIN_RESET);
 80005e6:	893b      	ldrh	r3, [r7, #8]
 80005e8:	2200      	movs	r2, #0
 80005ea:	4619      	mov	r1, r3
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f001 f8e9 	bl	80017c4 <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)  {
 80005f2:	7dfb      	ldrb	r3, [r7, #23]
 80005f4:	3301      	adds	r3, #1
 80005f6:	75fb      	strb	r3, [r7, #23]
 80005f8:	7dfb      	ldrb	r3, [r7, #23]
 80005fa:	2b07      	cmp	r3, #7
 80005fc:	d9c3      	bls.n	8000586 <shiftOut+0x1a>
	}
}
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	3718      	adds	r7, #24
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}

08000608 <MultiFunctionShield_Single_Digit_Display>:
* @param digit: 1..4, pick the digit to write to
* @param value: 0..9, pick the value to display
* @retval None
*/
void MultiFunctionShield_Single_Digit_Display (int digit, int8_t value)
	{
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
 8000610:	460b      	mov	r3, r1
 8000612:	70fb      	strb	r3, [r7, #3]
	if (value <0) //then blank a digit
 8000614:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000618:	2b00      	cmp	r3, #0
 800061a:	da06      	bge.n	800062a <MultiFunctionShield_Single_Digit_Display+0x22>
		{
		SEGMENT_VALUE[4-digit] = SEGMENT_BLANK;
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f1c3 0304 	rsb	r3, r3, #4
 8000622:	21ff      	movs	r1, #255	; 0xff
 8000624:	4a21      	ldr	r2, [pc, #132]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000626:	54d1      	strb	r1, [r2, r3]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
			}
		}
	}
 8000628:	e039      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
		value = (value & 0b1111) % 10 ;
 800062a:	78fb      	ldrb	r3, [r7, #3]
 800062c:	f003 020f 	and.w	r2, r3, #15
 8000630:	4b1f      	ldr	r3, [pc, #124]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 8000632:	fb83 1302 	smull	r1, r3, r3, r2
 8000636:	1099      	asrs	r1, r3, #2
 8000638:	17d3      	asrs	r3, r2, #31
 800063a:	1ac9      	subs	r1, r1, r3
 800063c:	460b      	mov	r3, r1
 800063e:	009b      	lsls	r3, r3, #2
 8000640:	440b      	add	r3, r1
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	1ad1      	subs	r1, r2, r3
 8000646:	460b      	mov	r3, r1
 8000648:	70fb      	strb	r3, [r7, #3]
		if ((digit <=4 ) && (digit >=0))
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2b04      	cmp	r3, #4
 800064e:	dc1a      	bgt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	2b00      	cmp	r3, #0
 8000654:	db17      	blt.n	8000686 <MultiFunctionShield_Single_Digit_Display+0x7e>
			SEGMENT_VALUE[4-digit] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000656:	f997 2003 	ldrsb.w	r2, [r7, #3]
 800065a:	4b15      	ldr	r3, [pc, #84]	; (80006b0 <MultiFunctionShield_Single_Digit_Display+0xa8>)
 800065c:	fb83 1302 	smull	r1, r3, r3, r2
 8000660:	1099      	asrs	r1, r3, #2
 8000662:	17d3      	asrs	r3, r2, #31
 8000664:	1ac9      	subs	r1, r1, r3
 8000666:	460b      	mov	r3, r1
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	440b      	add	r3, r1
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	1ad3      	subs	r3, r2, r3
 8000670:	b25b      	sxtb	r3, r3
 8000672:	b2db      	uxtb	r3, r3
 8000674:	4619      	mov	r1, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f1c3 0304 	rsb	r3, r3, #4
 800067c:	4a0d      	ldr	r2, [pc, #52]	; (80006b4 <MultiFunctionShield_Single_Digit_Display+0xac>)
 800067e:	5c51      	ldrb	r1, [r2, r1]
 8000680:	4a0a      	ldr	r2, [pc, #40]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000682:	54d1      	strb	r1, [r2, r3]
	}
 8000684:	e00b      	b.n	800069e <MultiFunctionShield_Single_Digit_Display+0x96>
			SEGMENT_VALUE[0] = SEGMENT_MINUS;
 8000686:	22bf      	movs	r2, #191	; 0xbf
 8000688:	4b08      	ldr	r3, [pc, #32]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800068a:	701a      	strb	r2, [r3, #0]
			SEGMENT_VALUE[1] = SEGMENT_MINUS;
 800068c:	22bf      	movs	r2, #191	; 0xbf
 800068e:	4b07      	ldr	r3, [pc, #28]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000690:	705a      	strb	r2, [r3, #1]
			SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000692:	22bf      	movs	r2, #191	; 0xbf
 8000694:	4b05      	ldr	r3, [pc, #20]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 8000696:	709a      	strb	r2, [r3, #2]
			SEGMENT_VALUE[3] = SEGMENT_MINUS;
 8000698:	22bf      	movs	r2, #191	; 0xbf
 800069a:	4b04      	ldr	r3, [pc, #16]	; (80006ac <MultiFunctionShield_Single_Digit_Display+0xa4>)
 800069c:	70da      	strb	r2, [r3, #3]
	}
 800069e:	bf00      	nop
 80006a0:	370c      	adds	r7, #12
 80006a2:	46bd      	mov	sp, r7
 80006a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop
 80006ac:	20000090 	.word	0x20000090
 80006b0:	66666667 	.word	0x66666667
 80006b4:	08008b54 	.word	0x08008b54

080006b8 <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 80006bc:	2201      	movs	r2, #1
 80006be:	2180      	movs	r1, #128	; 0x80
 80006c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c4:	f001 f87e 	bl	80017c4 <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2140      	movs	r1, #64	; 0x40
 80006cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006d0:	f001 f878 	bl	80017c4 <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 80006d4:	2201      	movs	r2, #1
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4805      	ldr	r0, [pc, #20]	; (80006f0 <Clear_LEDs+0x38>)
 80006da:	f001 f873 	bl	80017c4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 80006de:	2201      	movs	r2, #1
 80006e0:	2120      	movs	r1, #32
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f001 f86d 	bl	80017c4 <HAL_GPIO_WritePin>
#endif
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	48000400 	.word	0x48000400

080006f4 <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 80006f8:	22ff      	movs	r2, #255	; 0xff
 80006fa:	4b08      	ldr	r3, [pc, #32]	; (800071c <MultiFunctionShield_Clear+0x28>)
 80006fc:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 80006fe:	22ff      	movs	r2, #255	; 0xff
 8000700:	4b06      	ldr	r3, [pc, #24]	; (800071c <MultiFunctionShield_Clear+0x28>)
 8000702:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 8000704:	22ff      	movs	r2, #255	; 0xff
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <MultiFunctionShield_Clear+0x28>)
 8000708:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 800070a:	22ff      	movs	r2, #255	; 0xff
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <MultiFunctionShield_Clear+0x28>)
 800070e:	70da      	strb	r2, [r3, #3]
}
 8000710:	bf00      	nop
 8000712:	46bd      	mov	sp, r7
 8000714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000718:	4770      	bx	lr
 800071a:	bf00      	nop
 800071c:	20000090 	.word	0x20000090

08000720 <MultiFunctionShield_WriteNumberToSegment>:

void MultiFunctionShield_WriteNumberToSegment(uint8_t digit)
	{
 8000720:	b580      	push	{r7, lr}
 8000722:	b084      	sub	sp, #16
 8000724:	af02      	add	r7, sp, #8
 8000726:	4603      	mov	r3, r0
 8000728:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_RESET);
 800072a:	2200      	movs	r2, #0
 800072c:	2120      	movs	r1, #32
 800072e:	4816      	ldr	r0, [pc, #88]	; (8000788 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 8000730:	f001 f848 	bl	80017c4 <HAL_GPIO_WritePin>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000734:	79fb      	ldrb	r3, [r7, #7]
			MSBFIRST, SEGMENT_VALUE[digit]);
 8000736:	4a15      	ldr	r2, [pc, #84]	; (800078c <MultiFunctionShield_WriteNumberToSegment+0x6c>)
 8000738:	5cd3      	ldrb	r3, [r2, r3]
 800073a:	b2db      	uxtb	r3, r3
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800073c:	9301      	str	r3, [sp, #4]
 800073e:	2301      	movs	r3, #1
 8000740:	9300      	str	r3, [sp, #0]
 8000742:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000746:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800074a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800074e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000752:	f7ff ff0b 	bl	800056c <shiftOut>
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 8000756:	79fb      	ldrb	r3, [r7, #7]
				MSBFIRST, SEGMENT_SELECT[digit]);
 8000758:	4a0d      	ldr	r2, [pc, #52]	; (8000790 <MultiFunctionShield_WriteNumberToSegment+0x70>)
 800075a:	5cd3      	ldrb	r3, [r2, r3]
	shiftOut(SevenSeg_DATA_GPIO_Port,SevenSeg_DATA_Pin,SevenSeg_CLK_GPIO_Port,SevenSeg_CLK_Pin ,
 800075c:	9301      	str	r3, [sp, #4]
 800075e:	2301      	movs	r3, #1
 8000760:	9300      	str	r3, [sp, #0]
 8000762:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000766:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 800076a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800076e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000772:	f7ff fefb 	bl	800056c <shiftOut>
	HAL_GPIO_WritePin(SevenSeg_LATCH_GPIO_Port, SevenSeg_LATCH_Pin,GPIO_PIN_SET);
 8000776:	2201      	movs	r2, #1
 8000778:	2120      	movs	r1, #32
 800077a:	4803      	ldr	r0, [pc, #12]	; (8000788 <MultiFunctionShield_WriteNumberToSegment+0x68>)
 800077c:	f001 f822 	bl	80017c4 <HAL_GPIO_WritePin>
	}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}
 8000788:	48000400 	.word	0x48000400
 800078c:	20000090 	.word	0x20000090
 8000790:	08008b60 	.word	0x08008b60

08000794 <MultiFunctionShield__ISRFunc>:
	}



void MultiFunctionShield__ISRFunc(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  switch (++ActDigit)
 8000798:	4b16      	ldr	r3, [pc, #88]	; (80007f4 <MultiFunctionShield__ISRFunc+0x60>)
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b2db      	uxtb	r3, r3
 800079e:	3301      	adds	r3, #1
 80007a0:	b2da      	uxtb	r2, r3
 80007a2:	4b14      	ldr	r3, [pc, #80]	; (80007f4 <MultiFunctionShield__ISRFunc+0x60>)
 80007a4:	4611      	mov	r1, r2
 80007a6:	7019      	strb	r1, [r3, #0]
 80007a8:	4613      	mov	r3, r2
 80007aa:	3b01      	subs	r3, #1
 80007ac:	2b03      	cmp	r3, #3
 80007ae:	d81e      	bhi.n	80007ee <MultiFunctionShield__ISRFunc+0x5a>
 80007b0:	a201      	add	r2, pc, #4	; (adr r2, 80007b8 <MultiFunctionShield__ISRFunc+0x24>)
 80007b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007b6:	bf00      	nop
 80007b8:	080007c9 	.word	0x080007c9
 80007bc:	080007d1 	.word	0x080007d1
 80007c0:	080007d9 	.word	0x080007d9
 80007c4:	080007e1 	.word	0x080007e1
  {
    case 1 : MultiFunctionShield_WriteNumberToSegment(0); break;
 80007c8:	2000      	movs	r0, #0
 80007ca:	f7ff ffa9 	bl	8000720 <MultiFunctionShield_WriteNumberToSegment>
 80007ce:	e00e      	b.n	80007ee <MultiFunctionShield__ISRFunc+0x5a>
    case 2 : MultiFunctionShield_WriteNumberToSegment(1); break;
 80007d0:	2001      	movs	r0, #1
 80007d2:	f7ff ffa5 	bl	8000720 <MultiFunctionShield_WriteNumberToSegment>
 80007d6:	e00a      	b.n	80007ee <MultiFunctionShield__ISRFunc+0x5a>
    case 3 : MultiFunctionShield_WriteNumberToSegment(2); break;
 80007d8:	2002      	movs	r0, #2
 80007da:	f7ff ffa1 	bl	8000720 <MultiFunctionShield_WriteNumberToSegment>
 80007de:	e006      	b.n	80007ee <MultiFunctionShield__ISRFunc+0x5a>
    case 4 : MultiFunctionShield_WriteNumberToSegment(3); ActDigit = 0; break;
 80007e0:	2003      	movs	r0, #3
 80007e2:	f7ff ff9d 	bl	8000720 <MultiFunctionShield_WriteNumberToSegment>
 80007e6:	4b03      	ldr	r3, [pc, #12]	; (80007f4 <MultiFunctionShield__ISRFunc+0x60>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
 80007ec:	bf00      	nop
  }
}
 80007ee:	bf00      	nop
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	2000008c 	.word	0x2000008c

080007f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007fc:	f000 fd16 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000800:	f000 f886 	bl	8000910 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000804:	f000 f92c 	bl	8000a60 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000808:	f000 f8fa 	bl	8000a00 <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800080c:	f000 f8d2 	bl	80009b4 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  printf("\033\143"); printf("Welcome to ECEN-361 Lab-09\n\r");
 8000810:	4828      	ldr	r0, [pc, #160]	; (80008b4 <main+0xbc>)
 8000812:	f007 fa4d 	bl	8007cb0 <iprintf>
 8000816:	4828      	ldr	r0, [pc, #160]	; (80008b8 <main+0xc0>)
 8000818:	f007 fa4a 	bl	8007cb0 <iprintf>
	// Start timer
	MultiFunctionShield_Clear();							// Clear the 7-seg display
 800081c:	f7ff ff6a 	bl	80006f4 <MultiFunctionShield_Clear>
	HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 8000820:	4826      	ldr	r0, [pc, #152]	; (80008bc <main+0xc4>)
 8000822:	f002 fbc3 	bl	8002fac <HAL_TIM_Base_Start_IT>

	Clear_LEDs();
 8000826:	f7ff ff47 	bl	80006b8 <Clear_LEDs>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800082a:	f003 fbfb 	bl	8004024 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of UpDownMutex */
  UpDownMutexHandle = osMutexNew(&UpDownMutex_attributes);
 800082e:	4824      	ldr	r0, [pc, #144]	; (80008c0 <main+0xc8>)
 8000830:	f003 fe01 	bl	8004436 <osMutexNew>
 8000834:	4603      	mov	r3, r0
 8000836:	4a23      	ldr	r2, [pc, #140]	; (80008c4 <main+0xcc>)
 8000838:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Button_1_Semaphore_Binary */
  Button_1_Semaphore_BinaryHandle = osSemaphoreNew(1, 1, &Button_1_Semaphore_Binary_attributes);
 800083a:	4a23      	ldr	r2, [pc, #140]	; (80008c8 <main+0xd0>)
 800083c:	2101      	movs	r1, #1
 800083e:	2001      	movs	r0, #1
 8000840:	f003 fe7f 	bl	8004542 <osSemaphoreNew>
 8000844:	4603      	mov	r3, r0
 8000846:	4a21      	ldr	r2, [pc, #132]	; (80008cc <main+0xd4>)
 8000848:	6013      	str	r3, [r2, #0]

  /* creation of Button_2_Semaphore_Binary */
  Button_2_Semaphore_BinaryHandle = osSemaphoreNew(1, 1, &Button_2_Semaphore_Binary_attributes);
 800084a:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <main+0xd8>)
 800084c:	2101      	movs	r1, #1
 800084e:	2001      	movs	r0, #1
 8000850:	f003 fe77 	bl	8004542 <osSemaphoreNew>
 8000854:	4603      	mov	r3, r0
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <main+0xdc>)
 8000858:	6013      	str	r3, [r2, #0]

  /* creation of Button_3_Semaphore_Counting */
  Button_3_Semaphore_CountingHandle = osSemaphoreNew(31, 31, &Button_3_Semaphore_Counting_attributes);
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <main+0xe0>)
 800085c:	211f      	movs	r1, #31
 800085e:	201f      	movs	r0, #31
 8000860:	f003 fe6f 	bl	8004542 <osSemaphoreNew>
 8000864:	4603      	mov	r3, r0
 8000866:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <main+0xe4>)
 8000868:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SW_Timer_7Seg */
  SW_Timer_7SegHandle = osTimerNew(SW_Timer_Countdown, osTimerPeriodic, NULL, &SW_Timer_7Seg_attributes);
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <main+0xe8>)
 800086c:	2200      	movs	r2, #0
 800086e:	2101      	movs	r1, #1
 8000870:	481c      	ldr	r0, [pc, #112]	; (80008e4 <main+0xec>)
 8000872:	f003 fce3 	bl	800423c <osTimerNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <main+0xf0>)
 800087a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of SemaphoreToggle */
  SemaphoreToggleHandle = osThreadNew(Semaphore_Toggle_Task, NULL, &SemaphoreToggle_attributes);
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <main+0xf4>)
 800087e:	2100      	movs	r1, #0
 8000880:	481b      	ldr	r0, [pc, #108]	; (80008f0 <main+0xf8>)
 8000882:	f003 fc19 	bl	80040b8 <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <main+0xfc>)
 800088a:	6013      	str	r3, [r2, #0]

  /* creation of NotifToggle */
  NotifToggleHandle = osThreadNew(NotifyToggleTask, NULL, &NotifToggle_attributes);
 800088c:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <main+0x100>)
 800088e:	2100      	movs	r1, #0
 8000890:	481a      	ldr	r0, [pc, #104]	; (80008fc <main+0x104>)
 8000892:	f003 fc11 	bl	80040b8 <osThreadNew>
 8000896:	4603      	mov	r3, r0
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <main+0x108>)
 800089a:	6013      	str	r3, [r2, #0]

  /* creation of SW_Timer_Toggle */
  SW_Timer_ToggleHandle = osThreadNew(SW_Timer_Task, NULL, &SW_Timer_Toggle_attributes);
 800089c:	4a19      	ldr	r2, [pc, #100]	; (8000904 <main+0x10c>)
 800089e:	2100      	movs	r1, #0
 80008a0:	4819      	ldr	r0, [pc, #100]	; (8000908 <main+0x110>)
 80008a2:	f003 fc09 	bl	80040b8 <osThreadNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a18      	ldr	r2, [pc, #96]	; (800090c <main+0x114>)
 80008aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008ac:	f003 fbde 	bl	800406c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008b0:	e7fe      	b.n	80008b0 <main+0xb8>
 80008b2:	bf00      	nop
 80008b4:	08008b18 	.word	0x08008b18
 80008b8:	08008b1c 	.word	0x08008b1c
 80008bc:	20000094 	.word	0x20000094
 80008c0:	08008be0 	.word	0x08008be0
 80008c4:	20000178 	.word	0x20000178
 80008c8:	08008bf0 	.word	0x08008bf0
 80008cc:	2000017c 	.word	0x2000017c
 80008d0:	08008c00 	.word	0x08008c00
 80008d4:	20000180 	.word	0x20000180
 80008d8:	08008c10 	.word	0x08008c10
 80008dc:	20000184 	.word	0x20000184
 80008e0:	08008bd0 	.word	0x08008bd0
 80008e4:	08000d29 	.word	0x08000d29
 80008e8:	20000174 	.word	0x20000174
 80008ec:	08008b64 	.word	0x08008b64
 80008f0:	08000c99 	.word	0x08000c99
 80008f4:	20000168 	.word	0x20000168
 80008f8:	08008b88 	.word	0x08008b88
 80008fc:	08000cc9 	.word	0x08000cc9
 8000900:	2000016c 	.word	0x2000016c
 8000904:	08008bac 	.word	0x08008bac
 8000908:	08000cd9 	.word	0x08000cd9
 800090c:	20000170 	.word	0x20000170

08000910 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b096      	sub	sp, #88	; 0x58
 8000914:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	2244      	movs	r2, #68	; 0x44
 800091c:	2100      	movs	r1, #0
 800091e:	4618      	mov	r0, r3
 8000920:	f007 fa1b 	bl	8007d5a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000924:	463b      	mov	r3, r7
 8000926:	2200      	movs	r2, #0
 8000928:	601a      	str	r2, [r3, #0]
 800092a:	605a      	str	r2, [r3, #4]
 800092c:	609a      	str	r2, [r3, #8]
 800092e:	60da      	str	r2, [r3, #12]
 8000930:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000932:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000936:	f000 ff9d 	bl	8001874 <HAL_PWREx_ControlVoltageScaling>
 800093a:	4603      	mov	r3, r0
 800093c:	2b00      	cmp	r3, #0
 800093e:	d001      	beq.n	8000944 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000940:	f000 fa2a 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000944:	2302      	movs	r3, #2
 8000946:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800094c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800094e:	2310      	movs	r3, #16
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000956:	2302      	movs	r3, #2
 8000958:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800095a:	2301      	movs	r3, #1
 800095c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800095e:	230a      	movs	r3, #10
 8000960:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000962:	2307      	movs	r3, #7
 8000964:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000966:	2302      	movs	r3, #2
 8000968:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800096a:	2302      	movs	r3, #2
 800096c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800096e:	f107 0314 	add.w	r3, r7, #20
 8000972:	4618      	mov	r0, r3
 8000974:	f000 ffd4 	bl	8001920 <HAL_RCC_OscConfig>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800097e:	f000 fa0b 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000982:	230f      	movs	r3, #15
 8000984:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000986:	2303      	movs	r3, #3
 8000988:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800098e:	2300      	movs	r3, #0
 8000990:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000992:	2300      	movs	r3, #0
 8000994:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000996:	463b      	mov	r3, r7
 8000998:	2104      	movs	r1, #4
 800099a:	4618      	mov	r0, r3
 800099c:	f001 fb9c 	bl	80020d8 <HAL_RCC_ClockConfig>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009a6:	f000 f9f7 	bl	8000d98 <Error_Handler>
  }
}
 80009aa:	bf00      	nop
 80009ac:	3758      	adds	r7, #88	; 0x58
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
	...

080009b4 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009b8:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <MX_TIM17_Init+0x44>)
 80009ba:	4a10      	ldr	r2, [pc, #64]	; (80009fc <MX_TIM17_Init+0x48>)
 80009bc:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <MX_TIM17_Init+0x44>)
 80009c0:	f240 321f 	movw	r2, #799	; 0x31f
 80009c4:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <MX_TIM17_Init+0x44>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 80009cc:	4b0a      	ldr	r3, [pc, #40]	; (80009f8 <MX_TIM17_Init+0x44>)
 80009ce:	2264      	movs	r2, #100	; 0x64
 80009d0:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <MX_TIM17_Init+0x44>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80009d8:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <MX_TIM17_Init+0x44>)
 80009da:	2200      	movs	r2, #0
 80009dc:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <MX_TIM17_Init+0x44>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80009e4:	4804      	ldr	r0, [pc, #16]	; (80009f8 <MX_TIM17_Init+0x44>)
 80009e6:	f002 fa89 	bl	8002efc <HAL_TIM_Base_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80009f0:	f000 f9d2 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}
 80009f8:	20000094 	.word	0x20000094
 80009fc:	40014800 	.word	0x40014800

08000a00 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a04:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a06:	4a15      	ldr	r2, [pc, #84]	; (8000a5c <MX_USART2_UART_Init+0x5c>)
 8000a08:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a0c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a10:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a12:	4b11      	ldr	r3, [pc, #68]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a18:	4b0f      	ldr	r3, [pc, #60]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a1e:	4b0e      	ldr	r3, [pc, #56]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a24:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a26:	220c      	movs	r2, #12
 8000a28:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a2a:	4b0b      	ldr	r3, [pc, #44]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a30:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a36:	4b08      	ldr	r3, [pc, #32]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a3c:	4b06      	ldr	r3, [pc, #24]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a42:	4805      	ldr	r0, [pc, #20]	; (8000a58 <MX_USART2_UART_Init+0x58>)
 8000a44:	f002 fd04 	bl	8003450 <HAL_UART_Init>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d001      	beq.n	8000a52 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a4e:	f000 f9a3 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a52:	bf00      	nop
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	200000e0 	.word	0x200000e0
 8000a5c:	40004400 	.word	0x40004400

08000a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b08a      	sub	sp, #40	; 0x28
 8000a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	601a      	str	r2, [r3, #0]
 8000a6e:	605a      	str	r2, [r3, #4]
 8000a70:	609a      	str	r2, [r3, #8]
 8000a72:	60da      	str	r2, [r3, #12]
 8000a74:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a76:	4b6a      	ldr	r3, [pc, #424]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7a:	4a69      	ldr	r2, [pc, #420]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000a7c:	f043 0304 	orr.w	r3, r3, #4
 8000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a82:	4b67      	ldr	r3, [pc, #412]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	f003 0304 	and.w	r3, r3, #4
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a8e:	4b64      	ldr	r3, [pc, #400]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	4a63      	ldr	r2, [pc, #396]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a9a:	4b61      	ldr	r3, [pc, #388]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa2:	60fb      	str	r3, [r7, #12]
 8000aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa6:	4b5e      	ldr	r3, [pc, #376]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	4a5d      	ldr	r2, [pc, #372]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ab2:	4b5b      	ldr	r3, [pc, #364]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	f003 0301 	and.w	r3, r3, #1
 8000aba:	60bb      	str	r3, [r7, #8]
 8000abc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000abe:	4b58      	ldr	r3, [pc, #352]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	4a57      	ldr	r2, [pc, #348]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000ac4:	f043 0302 	orr.w	r3, r3, #2
 8000ac8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aca:	4b55      	ldr	r3, [pc, #340]	; (8000c20 <MX_GPIO_Init+0x1c0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	f003 0302 	and.w	r3, r3, #2
 8000ad2:	607b      	str	r3, [r7, #4]
 8000ad4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000adc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ae0:	f000 fe70 	bl	80017c4 <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	2160      	movs	r1, #96	; 0x60
 8000ae8:	484e      	ldr	r0, [pc, #312]	; (8000c24 <MX_GPIO_Init+0x1c4>)
 8000aea:	f000 fe6b 	bl	80017c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000af4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	4848      	ldr	r0, [pc, #288]	; (8000c28 <MX_GPIO_Init+0x1c8>)
 8000b06:	f000 fcb3 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000b0a:	2302      	movs	r3, #2
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b0e:	230b      	movs	r3, #11
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000b16:	f107 0314 	add.w	r3, r7, #20
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4842      	ldr	r0, [pc, #264]	; (8000c28 <MX_GPIO_Init+0x1c8>)
 8000b1e:	f000 fca7 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b22:	2301      	movs	r3, #1
 8000b24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b26:	230b      	movs	r3, #11
 8000b28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2e:	f107 0314 	add.w	r3, r7, #20
 8000b32:	4619      	mov	r1, r3
 8000b34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b38:	f000 fc9a 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000b3c:	2312      	movs	r3, #18
 8000b3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b40:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	4619      	mov	r1, r3
 8000b50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b54:	f000 fc8c 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin;
 8000b58:	23e0      	movs	r3, #224	; 0xe0
 8000b5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b5c:	2311      	movs	r3, #17
 8000b5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b60:	2301      	movs	r3, #1
 8000b62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b64:	2300      	movs	r3, #0
 8000b66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b68:	f107 0314 	add.w	r3, r7, #20
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b72:	f000 fc7d 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b76:	2301      	movs	r3, #1
 8000b78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b7a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4826      	ldr	r0, [pc, #152]	; (8000c24 <MX_GPIO_Init+0x1c4>)
 8000b8c:	f000 fc70 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin;
 8000b90:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b96:	2301      	movs	r3, #1
 8000b98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba2:	f107 0314 	add.w	r3, r7, #20
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bac:	f000 fc60 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000bb0:	2320      	movs	r3, #32
 8000bb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000bc0:	f107 0314 	add.w	r3, r7, #20
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4817      	ldr	r0, [pc, #92]	; (8000c24 <MX_GPIO_Init+0x1c4>)
 8000bc8:	f000 fc52 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000bcc:	2340      	movs	r3, #64	; 0x40
 8000bce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bd0:	2311      	movs	r3, #17
 8000bd2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0314 	add.w	r3, r7, #20
 8000be0:	4619      	mov	r1, r3
 8000be2:	4810      	ldr	r0, [pc, #64]	; (8000c24 <MX_GPIO_Init+0x1c4>)
 8000be4:	f000 fc44 	bl	8001470 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000be8:	2200      	movs	r2, #0
 8000bea:	2105      	movs	r1, #5
 8000bec:	2006      	movs	r0, #6
 8000bee:	f000 fc15 	bl	800141c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bf2:	2006      	movs	r0, #6
 8000bf4:	f000 fc2e 	bl	8001454 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2105      	movs	r1, #5
 8000bfc:	2007      	movs	r0, #7
 8000bfe:	f000 fc0d 	bl	800141c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c02:	2007      	movs	r0, #7
 8000c04:	f000 fc26 	bl	8001454 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	2105      	movs	r1, #5
 8000c0c:	200a      	movs	r0, #10
 8000c0e:	f000 fc05 	bl	800141c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c12:	200a      	movs	r0, #10
 8000c14:	f000 fc1e 	bl	8001454 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c18:	bf00      	nop
 8000c1a:	3728      	adds	r7, #40	; 0x28
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	40021000 	.word	0x40021000
 8000c24:	48000400 	.word	0x48000400
 8000c28:	48000800 	.word	0x48000800

08000c2c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8000c36:	88fb      	ldrh	r3, [r7, #6]
 8000c38:	2b10      	cmp	r3, #16
 8000c3a:	d00b      	beq.n	8000c54 <HAL_GPIO_EXTI_Callback+0x28>
 8000c3c:	2b10      	cmp	r3, #16
 8000c3e:	dc10      	bgt.n	8000c62 <HAL_GPIO_EXTI_Callback+0x36>
 8000c40:	2b01      	cmp	r3, #1
 8000c42:	d00d      	beq.n	8000c60 <HAL_GPIO_EXTI_Callback+0x34>
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d10c      	bne.n	8000c62 <HAL_GPIO_EXTI_Callback+0x36>
		{
		case Button_1_Pin:
			// Got the pin -- Give the semaphore
			osSemaphoreRelease(Button_1_Semaphore_BinaryHandle);
 8000c48:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <HAL_GPIO_EXTI_Callback+0x40>)
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f003 fd53 	bl	80046f8 <osSemaphoreRelease>
			break;
 8000c52:	e006      	b.n	8000c62 <HAL_GPIO_EXTI_Callback+0x36>

		case Button_2_Pin:
			osSemaphoreRelease(Button_2_Semaphore_BinaryHandle);
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x44>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 fd4d 	bl	80046f8 <osSemaphoreRelease>
			break;
 8000c5e:	e000      	b.n	8000c62 <HAL_GPIO_EXTI_Callback+0x36>

		case Button_3_Pin:
			break;
 8000c60:	bf00      	nop
		}

	}
 8000c62:	bf00      	nop
 8000c64:	3708      	adds	r7, #8
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	2000017c 	.word	0x2000017c
 8000c70:	20000180 	.word	0x20000180

08000c74 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c7c:	1d39      	adds	r1, r7, #4
 8000c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c82:	2201      	movs	r2, #1
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <__io_putchar+0x20>)
 8000c86:	f002 fc31 	bl	80034ec <HAL_UART_Transmit>

  return ch;
 8000c8a:	687b      	ldr	r3, [r7, #4]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000e0 	.word	0x200000e0

08000c98 <Semaphore_Toggle_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Semaphore_Toggle_Task */
void Semaphore_Toggle_Task(void *argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]

	  /* USER CODE BEGIN SemaphoreToggle_Task */
	  /* Infinite loop */
	  for(;;)
	  {
		osSemaphoreAcquire(Button_1_Semaphore_BinaryHandle,100000);
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <Semaphore_Toggle_Task+0x24>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4906      	ldr	r1, [pc, #24]	; (8000cc0 <Semaphore_Toggle_Task+0x28>)
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f003 fcd4 	bl	8004654 <osSemaphoreAcquire>
		HAL_GPIO_TogglePin(LED_D4_GPIO_Port , LED_D4_Pin);
 8000cac:	2140      	movs	r1, #64	; 0x40
 8000cae:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <Semaphore_Toggle_Task+0x2c>)
 8000cb0:	f000 fda0 	bl	80017f4 <HAL_GPIO_TogglePin>
		osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f003 fa91 	bl	80041dc <osDelay>
		osSemaphoreAcquire(Button_1_Semaphore_BinaryHandle,100000);
 8000cba:	e7f1      	b.n	8000ca0 <Semaphore_Toggle_Task+0x8>
 8000cbc:	2000017c 	.word	0x2000017c
 8000cc0:	000186a0 	.word	0x000186a0
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <NotifyToggleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NotifyToggleTask */
void NotifyToggleTask(void *argument)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NotifyToggleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f003 fa83 	bl	80041dc <osDelay>
 8000cd6:	e7fb      	b.n	8000cd0 <NotifyToggleTask+0x8>

08000cd8 <SW_Timer_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SW_Timer_Task */
void SW_Timer_Task(void *argument)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SW_Timer_Task */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(Button_2_Semaphore_BinaryHandle,100000);
 8000ce0:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <SW_Timer_Task+0x44>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	490e      	ldr	r1, [pc, #56]	; (8000d20 <SW_Timer_Task+0x48>)
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f003 fcb4 	bl	8004654 <osSemaphoreAcquire>
	  // A button push starts or stops the SW Timer
	  // Button push is indicated by the semaphore
	if (osTimerIsRunning(SW_Timer_7SegHandle))
 8000cec:	4b0d      	ldr	r3, [pc, #52]	; (8000d24 <SW_Timer_Task+0x4c>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	f003 fb84 	bl	80043fe <osTimerIsRunning>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d005      	beq.n	8000d08 <SW_Timer_Task+0x30>
		osTimerStop(SW_Timer_7SegHandle );
 8000cfc:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <SW_Timer_Task+0x4c>)
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4618      	mov	r0, r3
 8000d02:	f003 fb45 	bl	8004390 <osTimerStop>
 8000d06:	e005      	b.n	8000d14 <SW_Timer_Task+0x3c>
	else
		osTimerStart(SW_Timer_7SegHandle , 200);
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <SW_Timer_Task+0x4c>)
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	21c8      	movs	r1, #200	; 0xc8
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f003 fb10 	bl	8004334 <osTimerStart>
    osDelay(1);
 8000d14:	2001      	movs	r0, #1
 8000d16:	f003 fa61 	bl	80041dc <osDelay>
	osSemaphoreAcquire(Button_2_Semaphore_BinaryHandle,100000);
 8000d1a:	e7e1      	b.n	8000ce0 <SW_Timer_Task+0x8>
 8000d1c:	20000180 	.word	0x20000180
 8000d20:	000186a0 	.word	0x000186a0
 8000d24:	20000174 	.word	0x20000174

08000d28 <SW_Timer_Countdown>:
  /* USER CODE END SW_Timer_Task */
}

/* SW_Timer_Countdown function */
void SW_Timer_Countdown(void *argument)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
	/*
	 * When the timer expires, decrement the Count and Display it
	 * on the 7-Seg Upper
	 */

	if (countdown_display == 0) countdown_display = 9;
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <SW_Timer_Countdown+0x38>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d103      	bne.n	8000d40 <SW_Timer_Countdown+0x18>
 8000d38:	4b09      	ldr	r3, [pc, #36]	; (8000d60 <SW_Timer_Countdown+0x38>)
 8000d3a:	2209      	movs	r2, #9
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	e004      	b.n	8000d4a <SW_Timer_Countdown+0x22>
		else countdown_display--;
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <SW_Timer_Countdown+0x38>)
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	3b01      	subs	r3, #1
 8000d46:	4a06      	ldr	r2, [pc, #24]	; (8000d60 <SW_Timer_Countdown+0x38>)
 8000d48:	6013      	str	r3, [r2, #0]

	MultiFunctionShield_Single_Digit_Display(4, countdown_display);   //put it on the left
 8000d4a:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SW_Timer_Countdown+0x38>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	4619      	mov	r1, r3
 8000d52:	2004      	movs	r0, #4
 8000d54:	f7ff fc58 	bl	8000608 <MultiFunctionShield_Single_Digit_Display>
	// MultiFunctionShield_Single_Digit_Display(2, -1);//blank the bottom two

  /* USER CODE END SW_Timer_Countdown */
}
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000000 	.word	0x20000000

08000d64 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a07      	ldr	r2, [pc, #28]	; (8000d90 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d101      	bne.n	8000d7a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d76:	f000 fa79 	bl	800126c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  if (htim == &htim17 )
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d101      	bne.n	8000d86 <HAL_TIM_PeriodElapsedCallback+0x22>
  {
	  MultiFunctionShield__ISRFunc();
 8000d82:	f7ff fd07 	bl	8000794 <MultiFunctionShield__ISRFunc>
  }

  /* USER CODE END Callback 1 */
}
 8000d86:	bf00      	nop
 8000d88:	3708      	adds	r7, #8
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bd80      	pop	{r7, pc}
 8000d8e:	bf00      	nop
 8000d90:	40000400 	.word	0x40000400
 8000d94:	20000094 	.word	0x20000094

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <Error_Handler+0x8>
	...

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	4b11      	ldr	r3, [pc, #68]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	4a10      	ldr	r2, [pc, #64]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6613      	str	r3, [r2, #96]	; 0x60
 8000db6:	4b0e      	ldr	r3, [pc, #56]	; (8000df0 <HAL_MspInit+0x4c>)
 8000db8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	607b      	str	r3, [r7, #4]
 8000dc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc2:	4b0b      	ldr	r3, [pc, #44]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000dce:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_MspInit+0x4c>)
 8000dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	210f      	movs	r1, #15
 8000dde:	f06f 0001 	mvn.w	r0, #1
 8000de2:	f000 fb1b 	bl	800141c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000de6:	bf00      	nop
 8000de8:	3708      	adds	r7, #8
 8000dea:	46bd      	mov	sp, r7
 8000dec:	bd80      	pop	{r7, pc}
 8000dee:	bf00      	nop
 8000df0:	40021000 	.word	0x40021000

08000df4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0d      	ldr	r2, [pc, #52]	; (8000e38 <HAL_TIM_Base_MspInit+0x44>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d113      	bne.n	8000e2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000e06:	4b0d      	ldr	r3, [pc, #52]	; (8000e3c <HAL_TIM_Base_MspInit+0x48>)
 8000e08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e0a:	4a0c      	ldr	r2, [pc, #48]	; (8000e3c <HAL_TIM_Base_MspInit+0x48>)
 8000e0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e10:	6613      	str	r3, [r2, #96]	; 0x60
 8000e12:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <HAL_TIM_Base_MspInit+0x48>)
 8000e14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	2105      	movs	r1, #5
 8000e22:	201a      	movs	r0, #26
 8000e24:	f000 fafa 	bl	800141c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000e28:	201a      	movs	r0, #26
 8000e2a:	f000 fb13 	bl	8001454 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	40014800 	.word	0x40014800
 8000e3c:	40021000 	.word	0x40021000

08000e40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b0ac      	sub	sp, #176	; 0xb0
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e48:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	601a      	str	r2, [r3, #0]
 8000e50:	605a      	str	r2, [r3, #4]
 8000e52:	609a      	str	r2, [r3, #8]
 8000e54:	60da      	str	r2, [r3, #12]
 8000e56:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	2288      	movs	r2, #136	; 0x88
 8000e5e:	2100      	movs	r1, #0
 8000e60:	4618      	mov	r0, r3
 8000e62:	f006 ff7a 	bl	8007d5a <memset>
  if(huart->Instance==USART2)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	4a21      	ldr	r2, [pc, #132]	; (8000ef0 <HAL_UART_MspInit+0xb0>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d13b      	bne.n	8000ee8 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e70:	2302      	movs	r3, #2
 8000e72:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e74:	2300      	movs	r3, #0
 8000e76:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 fb81 	bl	8002584 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e88:	f7ff ff86 	bl	8000d98 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8c:	4b19      	ldr	r3, [pc, #100]	; (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e90:	4a18      	ldr	r2, [pc, #96]	; (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000e92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e96:	6593      	str	r3, [r2, #88]	; 0x58
 8000e98:	4b16      	ldr	r3, [pc, #88]	; (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b13      	ldr	r3, [pc, #76]	; (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000ea6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ea8:	4a12      	ldr	r2, [pc, #72]	; (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000eaa:	f043 0301 	orr.w	r3, r3, #1
 8000eae:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_UART_MspInit+0xb4>)
 8000eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb4:	f003 0301 	and.w	r3, r3, #1
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000ebc:	230c      	movs	r3, #12
 8000ebe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec2:	2302      	movs	r3, #2
 8000ec4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ece:	2303      	movs	r3, #3
 8000ed0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ed4:	2307      	movs	r3, #7
 8000ed6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eda:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000ede:	4619      	mov	r1, r3
 8000ee0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ee4:	f000 fac4 	bl	8001470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ee8:	bf00      	nop
 8000eea:	37b0      	adds	r7, #176	; 0xb0
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	40004400 	.word	0x40004400
 8000ef4:	40021000 	.word	0x40021000

08000ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	; 0x38
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f00:	2300      	movs	r3, #0
 8000f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000f06:	4b34      	ldr	r3, [pc, #208]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f0a:	4a33      	ldr	r2, [pc, #204]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6593      	str	r3, [r2, #88]	; 0x58
 8000f12:	4b31      	ldr	r3, [pc, #196]	; (8000fd8 <HAL_InitTick+0xe0>)
 8000f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f1e:	f107 0210 	add.w	r2, r7, #16
 8000f22:	f107 0314 	add.w	r3, r7, #20
 8000f26:	4611      	mov	r1, r2
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f001 fa99 	bl	8002460 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f2e:	6a3b      	ldr	r3, [r7, #32]
 8000f30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d103      	bne.n	8000f40 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f38:	f001 fa66 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8000f3c:	6378      	str	r0, [r7, #52]	; 0x34
 8000f3e:	e004      	b.n	8000f4a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f40:	f001 fa62 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8000f44:	4603      	mov	r3, r0
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4c:	4a23      	ldr	r2, [pc, #140]	; (8000fdc <HAL_InitTick+0xe4>)
 8000f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f52:	0c9b      	lsrs	r3, r3, #18
 8000f54:	3b01      	subs	r3, #1
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000f58:	4b21      	ldr	r3, [pc, #132]	; (8000fe0 <HAL_InitTick+0xe8>)
 8000f5a:	4a22      	ldr	r2, [pc, #136]	; (8000fe4 <HAL_InitTick+0xec>)
 8000f5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000f5e:	4b20      	ldr	r3, [pc, #128]	; (8000fe0 <HAL_InitTick+0xe8>)
 8000f60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f64:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000f66:	4a1e      	ldr	r2, [pc, #120]	; (8000fe0 <HAL_InitTick+0xe8>)
 8000f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f6a:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000f6c:	4b1c      	ldr	r3, [pc, #112]	; (8000fe0 <HAL_InitTick+0xe8>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f72:	4b1b      	ldr	r3, [pc, #108]	; (8000fe0 <HAL_InitTick+0xe8>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f78:	4b19      	ldr	r3, [pc, #100]	; (8000fe0 <HAL_InitTick+0xe8>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000f7e:	4818      	ldr	r0, [pc, #96]	; (8000fe0 <HAL_InitTick+0xe8>)
 8000f80:	f001 ffbc 	bl	8002efc <HAL_TIM_Base_Init>
 8000f84:	4603      	mov	r3, r0
 8000f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d11b      	bne.n	8000fca <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000f92:	4813      	ldr	r0, [pc, #76]	; (8000fe0 <HAL_InitTick+0xe8>)
 8000f94:	f002 f80a 	bl	8002fac <HAL_TIM_Base_Start_IT>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d111      	bne.n	8000fca <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000fa6:	201d      	movs	r0, #29
 8000fa8:	f000 fa54 	bl	8001454 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2b0f      	cmp	r3, #15
 8000fb0:	d808      	bhi.n	8000fc4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	6879      	ldr	r1, [r7, #4]
 8000fb6:	201d      	movs	r0, #29
 8000fb8:	f000 fa30 	bl	800141c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fbc:	4a0a      	ldr	r2, [pc, #40]	; (8000fe8 <HAL_InitTick+0xf0>)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	e002      	b.n	8000fca <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000fc4:	2301      	movs	r3, #1
 8000fc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000fca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3738      	adds	r7, #56	; 0x38
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000
 8000fdc:	431bde83 	.word	0x431bde83
 8000fe0:	20000188 	.word	0x20000188
 8000fe4:	40000400 	.word	0x40000400
 8000fe8:	20000008 	.word	0x20000008

08000fec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ff0:	e7fe      	b.n	8000ff0 <NMI_Handler+0x4>

08000ff2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ff6:	e7fe      	b.n	8000ff6 <HardFault_Handler+0x4>

08000ff8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ffc:	e7fe      	b.n	8000ffc <MemManage_Handler+0x4>

08000ffe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ffe:	b480      	push	{r7}
 8001000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001002:	e7fe      	b.n	8001002 <BusFault_Handler+0x4>

08001004 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001008:	e7fe      	b.n	8001008 <UsageFault_Handler+0x4>

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 800101c:	2001      	movs	r0, #1
 800101e:	f000 fc03 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	bd80      	pop	{r7, pc}

08001026 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001026:	b580      	push	{r7, lr}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 800102a:	2002      	movs	r0, #2
 800102c:	f000 fbfc 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	bd80      	pop	{r7, pc}

08001034 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8001038:	2010      	movs	r0, #16
 800103a:	f000 fbf5 	bl	8001828 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
	...

08001044 <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001048:	4802      	ldr	r0, [pc, #8]	; (8001054 <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 800104a:	f002 f81f 	bl	800308c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	20000094 	.word	0x20000094

08001058 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800105c:	4802      	ldr	r0, [pc, #8]	; (8001068 <TIM3_IRQHandler+0x10>)
 800105e:	f002 f815 	bl	800308c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	20000188 	.word	0x20000188

0800106c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	60f8      	str	r0, [r7, #12]
 8001074:	60b9      	str	r1, [r7, #8]
 8001076:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
 800107c:	e00a      	b.n	8001094 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800107e:	f3af 8000 	nop.w
 8001082:	4601      	mov	r1, r0
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	1c5a      	adds	r2, r3, #1
 8001088:	60ba      	str	r2, [r7, #8]
 800108a:	b2ca      	uxtb	r2, r1
 800108c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	3301      	adds	r3, #1
 8001092:	617b      	str	r3, [r7, #20]
 8001094:	697a      	ldr	r2, [r7, #20]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	429a      	cmp	r2, r3
 800109a:	dbf0      	blt.n	800107e <_read+0x12>
  }

  return len;
 800109c:	687b      	ldr	r3, [r7, #4]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3718      	adds	r7, #24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b086      	sub	sp, #24
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	60f8      	str	r0, [r7, #12]
 80010ae:	60b9      	str	r1, [r7, #8]
 80010b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
 80010b6:	e009      	b.n	80010cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	1c5a      	adds	r2, r3, #1
 80010bc:	60ba      	str	r2, [r7, #8]
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	4618      	mov	r0, r3
 80010c2:	f7ff fdd7 	bl	8000c74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c6:	697b      	ldr	r3, [r7, #20]
 80010c8:	3301      	adds	r3, #1
 80010ca:	617b      	str	r3, [r7, #20]
 80010cc:	697a      	ldr	r2, [r7, #20]
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	dbf1      	blt.n	80010b8 <_write+0x12>
  }
  return len;
 80010d4:	687b      	ldr	r3, [r7, #4]
}
 80010d6:	4618      	mov	r0, r3
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <_close>:

int _close(int file)
{
 80010de:	b480      	push	{r7}
 80010e0:	b083      	sub	sp, #12
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80010e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	370c      	adds	r7, #12
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr

080010f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80010f6:	b480      	push	{r7}
 80010f8:	b083      	sub	sp, #12
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	6078      	str	r0, [r7, #4]
 80010fe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001106:	605a      	str	r2, [r3, #4]
  return 0;
 8001108:	2300      	movs	r3, #0
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <_isatty>:

int _isatty(int file)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800111e:	2301      	movs	r3, #1
}
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800112c:	b480      	push	{r7}
 800112e:	b085      	sub	sp, #20
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001144:	4770      	bx	lr
	...

08001148 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b086      	sub	sp, #24
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001150:	4a14      	ldr	r2, [pc, #80]	; (80011a4 <_sbrk+0x5c>)
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <_sbrk+0x60>)
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001158:	697b      	ldr	r3, [r7, #20]
 800115a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800115c:	4b13      	ldr	r3, [pc, #76]	; (80011ac <_sbrk+0x64>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d102      	bne.n	800116a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <_sbrk+0x64>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <_sbrk+0x68>)
 8001168:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <_sbrk+0x64>)
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	429a      	cmp	r2, r3
 8001176:	d207      	bcs.n	8001188 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001178:	f006 fe94 	bl	8007ea4 <__errno>
 800117c:	4603      	mov	r3, r0
 800117e:	220c      	movs	r2, #12
 8001180:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001182:	f04f 33ff 	mov.w	r3, #4294967295
 8001186:	e009      	b.n	800119c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001188:	4b08      	ldr	r3, [pc, #32]	; (80011ac <_sbrk+0x64>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800118e:	4b07      	ldr	r3, [pc, #28]	; (80011ac <_sbrk+0x64>)
 8001190:	681a      	ldr	r2, [r3, #0]
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4413      	add	r3, r2
 8001196:	4a05      	ldr	r2, [pc, #20]	; (80011ac <_sbrk+0x64>)
 8001198:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800119a:	68fb      	ldr	r3, [r7, #12]
}
 800119c:	4618      	mov	r0, r3
 800119e:	3718      	adds	r7, #24
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20018000 	.word	0x20018000
 80011a8:	00000400 	.word	0x00000400
 80011ac:	200001d4 	.word	0x200001d4
 80011b0:	20004ba8 	.word	0x20004ba8

080011b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80011b8:	4b06      	ldr	r3, [pc, #24]	; (80011d4 <SystemInit+0x20>)
 80011ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80011be:	4a05      	ldr	r2, [pc, #20]	; (80011d4 <SystemInit+0x20>)
 80011c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80011c8:	bf00      	nop
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	e000ed00 	.word	0xe000ed00

080011d8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011dc:	f7ff ffea 	bl	80011b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011e0:	480c      	ldr	r0, [pc, #48]	; (8001214 <LoopForever+0x6>)
  ldr r1, =_edata
 80011e2:	490d      	ldr	r1, [pc, #52]	; (8001218 <LoopForever+0xa>)
  ldr r2, =_sidata
 80011e4:	4a0d      	ldr	r2, [pc, #52]	; (800121c <LoopForever+0xe>)
  movs r3, #0
 80011e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e8:	e002      	b.n	80011f0 <LoopCopyDataInit>

080011ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ee:	3304      	adds	r3, #4

080011f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f4:	d3f9      	bcc.n	80011ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <LoopForever+0x12>)
  ldr r4, =_ebss
 80011f8:	4c0a      	ldr	r4, [pc, #40]	; (8001224 <LoopForever+0x16>)
  movs r3, #0
 80011fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011fc:	e001      	b.n	8001202 <LoopFillZerobss>

080011fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001200:	3204      	adds	r2, #4

08001202 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001202:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001204:	d3fb      	bcc.n	80011fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001206:	f006 fe53 	bl	8007eb0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800120a:	f7ff faf5 	bl	80007f8 <main>

0800120e <LoopForever>:

LoopForever:
    b LoopForever
 800120e:	e7fe      	b.n	800120e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001210:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800121c:	08008cac 	.word	0x08008cac
  ldr r2, =_sbss
 8001220:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001224:	20004ba8 	.word	0x20004ba8

08001228 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC1_2_IRQHandler>
	...

0800122c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001232:	2300      	movs	r3, #0
 8001234:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_Init+0x3c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_Init+0x3c>)
 800123c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001240:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001242:	2003      	movs	r0, #3
 8001244:	f000 f8df 	bl	8001406 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001248:	200f      	movs	r0, #15
 800124a:	f7ff fe55 	bl	8000ef8 <HAL_InitTick>
 800124e:	4603      	mov	r3, r0
 8001250:	2b00      	cmp	r3, #0
 8001252:	d002      	beq.n	800125a <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	71fb      	strb	r3, [r7, #7]
 8001258:	e001      	b.n	800125e <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800125a:	f7ff fda3 	bl	8000da4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800125e:	79fb      	ldrb	r3, [r7, #7]
}
 8001260:	4618      	mov	r0, r3
 8001262:	3708      	adds	r7, #8
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}
 8001268:	40022000 	.word	0x40022000

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	; (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	; (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	; (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	2000000c 	.word	0x2000000c
 8001290:	200001d8 	.word	0x200001d8

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	; (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200001d8 	.word	0x200001d8

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	; (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	; (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	; (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	; (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	; (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	; 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	; 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff4c 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800142e:	f7ff ff61 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001432:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	f7ff ffb1 	bl	80013a0 <NVIC_EncodePriority>
 800143e:	4602      	mov	r2, r0
 8001440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff80 	bl	800134c <__NVIC_SetPriority>
}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff54 	bl	8001310 <__NVIC_EnableIRQ>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b087      	sub	sp, #28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800147e:	e17f      	b.n	8001780 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	2101      	movs	r1, #1
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	fa01 f303 	lsl.w	r3, r1, r3
 800148c:	4013      	ands	r3, r2
 800148e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	f000 8171 	beq.w	800177a <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 0303 	and.w	r3, r3, #3
 80014a0:	2b01      	cmp	r3, #1
 80014a2:	d005      	beq.n	80014b0 <HAL_GPIO_Init+0x40>
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0303 	and.w	r3, r3, #3
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d130      	bne.n	8001512 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	2203      	movs	r2, #3
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	43db      	mvns	r3, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4013      	ands	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	68da      	ldr	r2, [r3, #12]
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014e6:	2201      	movs	r2, #1
 80014e8:	697b      	ldr	r3, [r7, #20]
 80014ea:	fa02 f303 	lsl.w	r3, r2, r3
 80014ee:	43db      	mvns	r3, r3
 80014f0:	693a      	ldr	r2, [r7, #16]
 80014f2:	4013      	ands	r3, r2
 80014f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	091b      	lsrs	r3, r3, #4
 80014fc:	f003 0201 	and.w	r2, r3, #1
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4313      	orrs	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685b      	ldr	r3, [r3, #4]
 8001516:	f003 0303 	and.w	r3, r3, #3
 800151a:	2b03      	cmp	r3, #3
 800151c:	d118      	bne.n	8001550 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001522:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001524:	2201      	movs	r2, #1
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	08db      	lsrs	r3, r3, #3
 800153a:	f003 0201 	and.w	r2, r3, #1
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	fa02 f303 	lsl.w	r3, r2, r3
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b03      	cmp	r3, #3
 800155a:	d017      	beq.n	800158c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	68db      	ldr	r3, [r3, #12]
 8001560:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001562:	697b      	ldr	r3, [r7, #20]
 8001564:	005b      	lsls	r3, r3, #1
 8001566:	2203      	movs	r2, #3
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4013      	ands	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	689a      	ldr	r2, [r3, #8]
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	2b02      	cmp	r3, #2
 8001596:	d123      	bne.n	80015e0 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	08da      	lsrs	r2, r3, #3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3208      	adds	r2, #8
 80015a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015a4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	f003 0307 	and.w	r3, r3, #7
 80015ac:	009b      	lsls	r3, r3, #2
 80015ae:	220f      	movs	r2, #15
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43db      	mvns	r3, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4013      	ands	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	691a      	ldr	r2, [r3, #16]
 80015c0:	697b      	ldr	r3, [r7, #20]
 80015c2:	f003 0307 	and.w	r3, r3, #7
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4313      	orrs	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80015d2:	697b      	ldr	r3, [r7, #20]
 80015d4:	08da      	lsrs	r2, r3, #3
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3208      	adds	r2, #8
 80015da:	6939      	ldr	r1, [r7, #16]
 80015dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	005b      	lsls	r3, r3, #1
 80015ea:	2203      	movs	r2, #3
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43db      	mvns	r3, r3
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	4013      	ands	r3, r2
 80015f6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	f003 0203 	and.w	r2, r3, #3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	4313      	orrs	r3, r2
 800160c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	693a      	ldr	r2, [r7, #16]
 8001612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001614:	683b      	ldr	r3, [r7, #0]
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800161c:	2b00      	cmp	r3, #0
 800161e:	f000 80ac 	beq.w	800177a <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001622:	4b5f      	ldr	r3, [pc, #380]	; (80017a0 <HAL_GPIO_Init+0x330>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001626:	4a5e      	ldr	r2, [pc, #376]	; (80017a0 <HAL_GPIO_Init+0x330>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6613      	str	r3, [r2, #96]	; 0x60
 800162e:	4b5c      	ldr	r3, [pc, #368]	; (80017a0 <HAL_GPIO_Init+0x330>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800163a:	4a5a      	ldr	r2, [pc, #360]	; (80017a4 <HAL_GPIO_Init+0x334>)
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	089b      	lsrs	r3, r3, #2
 8001640:	3302      	adds	r3, #2
 8001642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001646:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001648:	697b      	ldr	r3, [r7, #20]
 800164a:	f003 0303 	and.w	r3, r3, #3
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	220f      	movs	r2, #15
 8001652:	fa02 f303 	lsl.w	r3, r2, r3
 8001656:	43db      	mvns	r3, r3
 8001658:	693a      	ldr	r2, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001664:	d025      	beq.n	80016b2 <HAL_GPIO_Init+0x242>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a4f      	ldr	r2, [pc, #316]	; (80017a8 <HAL_GPIO_Init+0x338>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d01f      	beq.n	80016ae <HAL_GPIO_Init+0x23e>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a4e      	ldr	r2, [pc, #312]	; (80017ac <HAL_GPIO_Init+0x33c>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d019      	beq.n	80016aa <HAL_GPIO_Init+0x23a>
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a4d      	ldr	r2, [pc, #308]	; (80017b0 <HAL_GPIO_Init+0x340>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d013      	beq.n	80016a6 <HAL_GPIO_Init+0x236>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a4c      	ldr	r2, [pc, #304]	; (80017b4 <HAL_GPIO_Init+0x344>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d00d      	beq.n	80016a2 <HAL_GPIO_Init+0x232>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a4b      	ldr	r2, [pc, #300]	; (80017b8 <HAL_GPIO_Init+0x348>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d007      	beq.n	800169e <HAL_GPIO_Init+0x22e>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a4a      	ldr	r2, [pc, #296]	; (80017bc <HAL_GPIO_Init+0x34c>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d101      	bne.n	800169a <HAL_GPIO_Init+0x22a>
 8001696:	2306      	movs	r3, #6
 8001698:	e00c      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 800169a:	2307      	movs	r3, #7
 800169c:	e00a      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 800169e:	2305      	movs	r3, #5
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016a2:	2304      	movs	r3, #4
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x244>
 80016b2:	2300      	movs	r3, #0
 80016b4:	697a      	ldr	r2, [r7, #20]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80016c4:	4937      	ldr	r1, [pc, #220]	; (80017a4 <HAL_GPIO_Init+0x334>)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	693a      	ldr	r2, [r7, #16]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80016d2:	4b3b      	ldr	r3, [pc, #236]	; (80017c0 <HAL_GPIO_Init+0x350>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43db      	mvns	r3, r3
 80016dc:	693a      	ldr	r2, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80016f6:	4a32      	ldr	r2, [pc, #200]	; (80017c0 <HAL_GPIO_Init+0x350>)
 80016f8:	693b      	ldr	r3, [r7, #16]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80016fc:	4b30      	ldr	r3, [pc, #192]	; (80017c0 <HAL_GPIO_Init+0x350>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	43db      	mvns	r3, r3
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001718:	693a      	ldr	r2, [r7, #16]
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	4313      	orrs	r3, r2
 800171e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001720:	4a27      	ldr	r2, [pc, #156]	; (80017c0 <HAL_GPIO_Init+0x350>)
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001726:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <HAL_GPIO_Init+0x350>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	43db      	mvns	r3, r3
 8001730:	693a      	ldr	r2, [r7, #16]
 8001732:	4013      	ands	r3, r2
 8001734:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001742:	693a      	ldr	r2, [r7, #16]
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	4313      	orrs	r3, r2
 8001748:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800174a:	4a1d      	ldr	r2, [pc, #116]	; (80017c0 <HAL_GPIO_Init+0x350>)
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001750:	4b1b      	ldr	r3, [pc, #108]	; (80017c0 <HAL_GPIO_Init+0x350>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	43db      	mvns	r3, r3
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	4013      	ands	r3, r2
 800175e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 800176c:	693a      	ldr	r2, [r7, #16]
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <HAL_GPIO_Init+0x350>)
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800177a:	697b      	ldr	r3, [r7, #20]
 800177c:	3301      	adds	r3, #1
 800177e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	fa22 f303 	lsr.w	r3, r2, r3
 800178a:	2b00      	cmp	r3, #0
 800178c:	f47f ae78 	bne.w	8001480 <HAL_GPIO_Init+0x10>
  }
}
 8001790:	bf00      	nop
 8001792:	bf00      	nop
 8001794:	371c      	adds	r7, #28
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	48000400 	.word	0x48000400
 80017ac:	48000800 	.word	0x48000800
 80017b0:	48000c00 	.word	0x48000c00
 80017b4:	48001000 	.word	0x48001000
 80017b8:	48001400 	.word	0x48001400
 80017bc:	48001800 	.word	0x48001800
 80017c0:	40010400 	.word	0x40010400

080017c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
 80017cc:	460b      	mov	r3, r1
 80017ce:	807b      	strh	r3, [r7, #2]
 80017d0:	4613      	mov	r3, r2
 80017d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017d4:	787b      	ldrb	r3, [r7, #1]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d003      	beq.n	80017e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80017da:	887a      	ldrh	r2, [r7, #2]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80017e0:	e002      	b.n	80017e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80017e2:	887a      	ldrh	r2, [r7, #2]
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr

080017f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	460b      	mov	r3, r1
 80017fe:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	695b      	ldr	r3, [r3, #20]
 8001804:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001806:	887a      	ldrh	r2, [r7, #2]
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	041a      	lsls	r2, r3, #16
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	43d9      	mvns	r1, r3
 8001812:	887b      	ldrh	r3, [r7, #2]
 8001814:	400b      	ands	r3, r1
 8001816:	431a      	orrs	r2, r3
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	619a      	str	r2, [r3, #24]
}
 800181c:	bf00      	nop
 800181e:	3714      	adds	r7, #20
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b082      	sub	sp, #8
 800182c:	af00      	add	r7, sp, #0
 800182e:	4603      	mov	r3, r0
 8001830:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001832:	4b08      	ldr	r3, [pc, #32]	; (8001854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001834:	695a      	ldr	r2, [r3, #20]
 8001836:	88fb      	ldrh	r3, [r7, #6]
 8001838:	4013      	ands	r3, r2
 800183a:	2b00      	cmp	r3, #0
 800183c:	d006      	beq.n	800184c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800183e:	4a05      	ldr	r2, [pc, #20]	; (8001854 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001840:	88fb      	ldrh	r3, [r7, #6]
 8001842:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	4618      	mov	r0, r3
 8001848:	f7ff f9f0 	bl	8000c2c <HAL_GPIO_EXTI_Callback>
  }
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40010400 	.word	0x40010400

08001858 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800185c:	4b04      	ldr	r3, [pc, #16]	; (8001870 <HAL_PWREx_GetVoltageRange+0x18>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001864:	4618      	mov	r0, r3
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	40007000 	.word	0x40007000

08001874 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001874:	b480      	push	{r7}
 8001876:	b085      	sub	sp, #20
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001882:	d130      	bne.n	80018e6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001884:	4b23      	ldr	r3, [pc, #140]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800188c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001890:	d038      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001892:	4b20      	ldr	r3, [pc, #128]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800189a:	4a1e      	ldr	r2, [pc, #120]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800189c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018a0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80018a2:	4b1d      	ldr	r3, [pc, #116]	; (8001918 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2232      	movs	r2, #50	; 0x32
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	4a1b      	ldr	r2, [pc, #108]	; (800191c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80018ae:	fba2 2303 	umull	r2, r3, r2, r3
 80018b2:	0c9b      	lsrs	r3, r3, #18
 80018b4:	3301      	adds	r3, #1
 80018b6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018b8:	e002      	b.n	80018c0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3b01      	subs	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80018c0:	4b14      	ldr	r3, [pc, #80]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018c2:	695b      	ldr	r3, [r3, #20]
 80018c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018cc:	d102      	bne.n	80018d4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d1f2      	bne.n	80018ba <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80018d4:	4b0f      	ldr	r3, [pc, #60]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018d6:	695b      	ldr	r3, [r3, #20]
 80018d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018e0:	d110      	bne.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80018e2:	2303      	movs	r3, #3
 80018e4:	e00f      	b.n	8001906 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80018e6:	4b0b      	ldr	r3, [pc, #44]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80018ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018f2:	d007      	beq.n	8001904 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80018f4:	4b07      	ldr	r3, [pc, #28]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80018fc:	4a05      	ldr	r2, [pc, #20]	; (8001914 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80018fe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001902:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001904:	2300      	movs	r3, #0
}
 8001906:	4618      	mov	r0, r3
 8001908:	3714      	adds	r7, #20
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40007000 	.word	0x40007000
 8001918:	20000004 	.word	0x20000004
 800191c:	431bde83 	.word	0x431bde83

08001920 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d101      	bne.n	8001932 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e3ca      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001932:	4b97      	ldr	r3, [pc, #604]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 030c 	and.w	r3, r3, #12
 800193a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800193c:	4b94      	ldr	r3, [pc, #592]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	f003 0303 	and.w	r3, r3, #3
 8001944:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	f000 80e4 	beq.w	8001b1c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001954:	69bb      	ldr	r3, [r7, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <HAL_RCC_OscConfig+0x4a>
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b0c      	cmp	r3, #12
 800195e:	f040 808b 	bne.w	8001a78 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	2b01      	cmp	r3, #1
 8001966:	f040 8087 	bne.w	8001a78 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800196a:	4b89      	ldr	r3, [pc, #548]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d005      	beq.n	8001982 <HAL_RCC_OscConfig+0x62>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	699b      	ldr	r3, [r3, #24]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e3a2      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6a1a      	ldr	r2, [r3, #32]
 8001986:	4b82      	ldr	r3, [pc, #520]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0308 	and.w	r3, r3, #8
 800198e:	2b00      	cmp	r3, #0
 8001990:	d004      	beq.n	800199c <HAL_RCC_OscConfig+0x7c>
 8001992:	4b7f      	ldr	r3, [pc, #508]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800199a:	e005      	b.n	80019a8 <HAL_RCC_OscConfig+0x88>
 800199c:	4b7c      	ldr	r3, [pc, #496]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 800199e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019a2:	091b      	lsrs	r3, r3, #4
 80019a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d223      	bcs.n	80019f4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	6a1b      	ldr	r3, [r3, #32]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f000 fd87 	bl	80024c4 <RCC_SetFlashLatencyFromMSIRange>
 80019b6:	4603      	mov	r3, r0
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d001      	beq.n	80019c0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80019bc:	2301      	movs	r3, #1
 80019be:	e383      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019c0:	4b73      	ldr	r3, [pc, #460]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a72      	ldr	r2, [pc, #456]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019c6:	f043 0308 	orr.w	r3, r3, #8
 80019ca:	6013      	str	r3, [r2, #0]
 80019cc:	4b70      	ldr	r3, [pc, #448]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a1b      	ldr	r3, [r3, #32]
 80019d8:	496d      	ldr	r1, [pc, #436]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019de:	4b6c      	ldr	r3, [pc, #432]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	69db      	ldr	r3, [r3, #28]
 80019ea:	021b      	lsls	r3, r3, #8
 80019ec:	4968      	ldr	r1, [pc, #416]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019ee:	4313      	orrs	r3, r2
 80019f0:	604b      	str	r3, [r1, #4]
 80019f2:	e025      	b.n	8001a40 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019f4:	4b66      	ldr	r3, [pc, #408]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 80019fa:	f043 0308 	orr.w	r3, r3, #8
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b63      	ldr	r3, [pc, #396]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4960      	ldr	r1, [pc, #384]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a12:	4b5f      	ldr	r3, [pc, #380]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	69db      	ldr	r3, [r3, #28]
 8001a1e:	021b      	lsls	r3, r3, #8
 8001a20:	495b      	ldr	r1, [pc, #364]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a22:	4313      	orrs	r3, r2
 8001a24:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a26:	69bb      	ldr	r3, [r7, #24]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d109      	bne.n	8001a40 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6a1b      	ldr	r3, [r3, #32]
 8001a30:	4618      	mov	r0, r3
 8001a32:	f000 fd47 	bl	80024c4 <RCC_SetFlashLatencyFromMSIRange>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e343      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001a40:	f000 fc4a 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4b52      	ldr	r3, [pc, #328]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	091b      	lsrs	r3, r3, #4
 8001a4c:	f003 030f 	and.w	r3, r3, #15
 8001a50:	4950      	ldr	r1, [pc, #320]	; (8001b94 <HAL_RCC_OscConfig+0x274>)
 8001a52:	5ccb      	ldrb	r3, [r1, r3]
 8001a54:	f003 031f 	and.w	r3, r3, #31
 8001a58:	fa22 f303 	lsr.w	r3, r2, r3
 8001a5c:	4a4e      	ldr	r2, [pc, #312]	; (8001b98 <HAL_RCC_OscConfig+0x278>)
 8001a5e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001a60:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <HAL_RCC_OscConfig+0x27c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f7ff fa47 	bl	8000ef8 <HAL_InitTick>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a6e:	7bfb      	ldrb	r3, [r7, #15]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d052      	beq.n	8001b1a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a74:	7bfb      	ldrb	r3, [r7, #15]
 8001a76:	e327      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	699b      	ldr	r3, [r3, #24]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d032      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a80:	4b43      	ldr	r3, [pc, #268]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a42      	ldr	r2, [pc, #264]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001a86:	f043 0301 	orr.w	r3, r3, #1
 8001a8a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8c:	f7ff fc02 	bl	8001294 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a92:	e008      	b.n	8001aa6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a94:	f7ff fbfe 	bl	8001294 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d901      	bls.n	8001aa6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001aa2:	2303      	movs	r3, #3
 8001aa4:	e310      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001aa6:	4b3a      	ldr	r3, [pc, #232]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d0f0      	beq.n	8001a94 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001ab2:	4b37      	ldr	r3, [pc, #220]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a36      	ldr	r2, [pc, #216]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ab8:	f043 0308 	orr.w	r3, r3, #8
 8001abc:	6013      	str	r3, [r2, #0]
 8001abe:	4b34      	ldr	r3, [pc, #208]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	6a1b      	ldr	r3, [r3, #32]
 8001aca:	4931      	ldr	r1, [pc, #196]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ad0:	4b2f      	ldr	r3, [pc, #188]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	69db      	ldr	r3, [r3, #28]
 8001adc:	021b      	lsls	r3, r3, #8
 8001ade:	492c      	ldr	r1, [pc, #176]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ae0:	4313      	orrs	r3, r2
 8001ae2:	604b      	str	r3, [r1, #4]
 8001ae4:	e01a      	b.n	8001b1c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ae6:	4b2a      	ldr	r3, [pc, #168]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a29      	ldr	r2, [pc, #164]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001aec:	f023 0301 	bic.w	r3, r3, #1
 8001af0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001af2:	f7ff fbcf 	bl	8001294 <HAL_GetTick>
 8001af6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001af8:	e008      	b.n	8001b0c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001afa:	f7ff fbcb 	bl	8001294 <HAL_GetTick>
 8001afe:	4602      	mov	r2, r0
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	1ad3      	subs	r3, r2, r3
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d901      	bls.n	8001b0c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001b08:	2303      	movs	r3, #3
 8001b0a:	e2dd      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001b0c:	4b20      	ldr	r3, [pc, #128]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0302 	and.w	r3, r3, #2
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d1f0      	bne.n	8001afa <HAL_RCC_OscConfig+0x1da>
 8001b18:	e000      	b.n	8001b1c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b1a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0301 	and.w	r3, r3, #1
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d074      	beq.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001b28:	69bb      	ldr	r3, [r7, #24]
 8001b2a:	2b08      	cmp	r3, #8
 8001b2c:	d005      	beq.n	8001b3a <HAL_RCC_OscConfig+0x21a>
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	2b0c      	cmp	r3, #12
 8001b32:	d10e      	bne.n	8001b52 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	2b03      	cmp	r3, #3
 8001b38:	d10b      	bne.n	8001b52 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b3a:	4b15      	ldr	r3, [pc, #84]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d064      	beq.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	685b      	ldr	r3, [r3, #4]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d160      	bne.n	8001c10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e2ba      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b5a:	d106      	bne.n	8001b6a <HAL_RCC_OscConfig+0x24a>
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a0b      	ldr	r2, [pc, #44]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b62:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b66:	6013      	str	r3, [r2, #0]
 8001b68:	e026      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b72:	d115      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x280>
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b7a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b7e:	6013      	str	r3, [r2, #0]
 8001b80:	4b03      	ldr	r3, [pc, #12]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a02      	ldr	r2, [pc, #8]	; (8001b90 <HAL_RCC_OscConfig+0x270>)
 8001b86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b8a:	6013      	str	r3, [r2, #0]
 8001b8c:	e014      	b.n	8001bb8 <HAL_RCC_OscConfig+0x298>
 8001b8e:	bf00      	nop
 8001b90:	40021000 	.word	0x40021000
 8001b94:	08008c20 	.word	0x08008c20
 8001b98:	20000004 	.word	0x20000004
 8001b9c:	20000008 	.word	0x20000008
 8001ba0:	4ba0      	ldr	r3, [pc, #640]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	4a9f      	ldr	r2, [pc, #636]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ba6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001baa:	6013      	str	r3, [r2, #0]
 8001bac:	4b9d      	ldr	r3, [pc, #628]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a9c      	ldr	r2, [pc, #624]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bb2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d013      	beq.n	8001be8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bc0:	f7ff fb68 	bl	8001294 <HAL_GetTick>
 8001bc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bc8:	f7ff fb64 	bl	8001294 <HAL_GetTick>
 8001bcc:	4602      	mov	r2, r0
 8001bce:	693b      	ldr	r3, [r7, #16]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b64      	cmp	r3, #100	; 0x64
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e276      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001bda:	4b92      	ldr	r3, [pc, #584]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d0f0      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x2a8>
 8001be6:	e014      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb54 	bl	8001294 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001bf0:	f7ff fb50 	bl	8001294 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b64      	cmp	r3, #100	; 0x64
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e262      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001c02:	4b88      	ldr	r3, [pc, #544]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x2d0>
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d060      	beq.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001c1e:	69bb      	ldr	r3, [r7, #24]
 8001c20:	2b04      	cmp	r3, #4
 8001c22:	d005      	beq.n	8001c30 <HAL_RCC_OscConfig+0x310>
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d119      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001c2a:	697b      	ldr	r3, [r7, #20]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d116      	bne.n	8001c5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c30:	4b7c      	ldr	r3, [pc, #496]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_OscConfig+0x328>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d101      	bne.n	8001c48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e23f      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c48:	4b76      	ldr	r3, [pc, #472]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c4a:	685b      	ldr	r3, [r3, #4]
 8001c4c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	691b      	ldr	r3, [r3, #16]
 8001c54:	061b      	lsls	r3, r3, #24
 8001c56:	4973      	ldr	r1, [pc, #460]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c58:	4313      	orrs	r3, r2
 8001c5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001c5c:	e040      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d023      	beq.n	8001cae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001c66:	4b6f      	ldr	r3, [pc, #444]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	4a6e      	ldr	r2, [pc, #440]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c72:	f7ff fb0f 	bl	8001294 <HAL_GetTick>
 8001c76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c78:	e008      	b.n	8001c8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c7a:	f7ff fb0b 	bl	8001294 <HAL_GetTick>
 8001c7e:	4602      	mov	r2, r0
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	1ad3      	subs	r3, r2, r3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d901      	bls.n	8001c8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c88:	2303      	movs	r3, #3
 8001c8a:	e21d      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c8c:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d0f0      	beq.n	8001c7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c98:	4b62      	ldr	r3, [pc, #392]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	691b      	ldr	r3, [r3, #16]
 8001ca4:	061b      	lsls	r3, r3, #24
 8001ca6:	495f      	ldr	r1, [pc, #380]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	604b      	str	r3, [r1, #4]
 8001cac:	e018      	b.n	8001ce0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001cae:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5c      	ldr	r2, [pc, #368]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001cb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cba:	f7ff faeb 	bl	8001294 <HAL_GetTick>
 8001cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cc0:	e008      	b.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001cc2:	f7ff fae7 	bl	8001294 <HAL_GetTick>
 8001cc6:	4602      	mov	r2, r0
 8001cc8:	693b      	ldr	r3, [r7, #16]
 8001cca:	1ad3      	subs	r3, r2, r3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d901      	bls.n	8001cd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e1f9      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001cd4:	4b53      	ldr	r3, [pc, #332]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d1f0      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0308 	and.w	r3, r3, #8
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d03c      	beq.n	8001d66 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	695b      	ldr	r3, [r3, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d01c      	beq.n	8001d2e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cf4:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cf6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cfa:	4a4a      	ldr	r2, [pc, #296]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001cfc:	f043 0301 	orr.w	r3, r3, #1
 8001d00:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d04:	f7ff fac6 	bl	8001294 <HAL_GetTick>
 8001d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d0c:	f7ff fac2 	bl	8001294 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e1d4      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d24:	f003 0302 	and.w	r3, r3, #2
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0ef      	beq.n	8001d0c <HAL_RCC_OscConfig+0x3ec>
 8001d2c:	e01b      	b.n	8001d66 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001d2e:	4b3d      	ldr	r3, [pc, #244]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d30:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d34:	4a3b      	ldr	r2, [pc, #236]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d36:	f023 0301 	bic.w	r3, r3, #1
 8001d3a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d3e:	f7ff faa9 	bl	8001294 <HAL_GetTick>
 8001d42:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d44:	e008      	b.n	8001d58 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d46:	f7ff faa5 	bl	8001294 <HAL_GetTick>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	1ad3      	subs	r3, r2, r3
 8001d50:	2b02      	cmp	r3, #2
 8001d52:	d901      	bls.n	8001d58 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001d54:	2303      	movs	r3, #3
 8001d56:	e1b7      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d58:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d5a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d5e:	f003 0302 	and.w	r3, r3, #2
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d1ef      	bne.n	8001d46 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0304 	and.w	r3, r3, #4
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 80a6 	beq.w	8001ec0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d74:	2300      	movs	r3, #0
 8001d76:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d78:	4b2a      	ldr	r3, [pc, #168]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d10d      	bne.n	8001da0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d84:	4b27      	ldr	r3, [pc, #156]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d88:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d8e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d90:	4b24      	ldr	r3, [pc, #144]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001da0:	4b21      	ldr	r3, [pc, #132]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d118      	bne.n	8001dde <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001dac:	4b1e      	ldr	r3, [pc, #120]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1d      	ldr	r2, [pc, #116]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001db2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001db6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001db8:	f7ff fa6c 	bl	8001294 <HAL_GetTick>
 8001dbc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dbe:	e008      	b.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dc0:	f7ff fa68 	bl	8001294 <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	2b02      	cmp	r3, #2
 8001dcc:	d901      	bls.n	8001dd2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001dce:	2303      	movs	r3, #3
 8001dd0:	e17a      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd2:	4b15      	ldr	r3, [pc, #84]	; (8001e28 <HAL_RCC_OscConfig+0x508>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d0f0      	beq.n	8001dc0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	689b      	ldr	r3, [r3, #8]
 8001de2:	2b01      	cmp	r3, #1
 8001de4:	d108      	bne.n	8001df8 <HAL_RCC_OscConfig+0x4d8>
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001dee:	f043 0301 	orr.w	r3, r3, #1
 8001df2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001df6:	e029      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	689b      	ldr	r3, [r3, #8]
 8001dfc:	2b05      	cmp	r3, #5
 8001dfe:	d115      	bne.n	8001e2c <HAL_RCC_OscConfig+0x50c>
 8001e00:	4b08      	ldr	r3, [pc, #32]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e06:	4a07      	ldr	r2, [pc, #28]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f043 0304 	orr.w	r3, r3, #4
 8001e0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	4a03      	ldr	r2, [pc, #12]	; (8001e24 <HAL_RCC_OscConfig+0x504>)
 8001e18:	f043 0301 	orr.w	r3, r3, #1
 8001e1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x52c>
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000
 8001e28:	40007000 	.word	0x40007000
 8001e2c:	4b9c      	ldr	r3, [pc, #624]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e32:	4a9b      	ldr	r2, [pc, #620]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e34:	f023 0301 	bic.w	r3, r3, #1
 8001e38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001e3c:	4b98      	ldr	r3, [pc, #608]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e42:	4a97      	ldr	r2, [pc, #604]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e44:	f023 0304 	bic.w	r3, r3, #4
 8001e48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d016      	beq.n	8001e82 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff fa1e 	bl	8001294 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e5a:	e00a      	b.n	8001e72 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e5c:	f7ff fa1a 	bl	8001294 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d901      	bls.n	8001e72 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e6e:	2303      	movs	r3, #3
 8001e70:	e12a      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e72:	4b8b      	ldr	r3, [pc, #556]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e78:	f003 0302 	and.w	r3, r3, #2
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d0ed      	beq.n	8001e5c <HAL_RCC_OscConfig+0x53c>
 8001e80:	e015      	b.n	8001eae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e82:	f7ff fa07 	bl	8001294 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e88:	e00a      	b.n	8001ea0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e8a:	f7ff fa03 	bl	8001294 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e113      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea0:	4b7f      	ldr	r3, [pc, #508]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001ea2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ea6:	f003 0302 	and.w	r3, r3, #2
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d1ed      	bne.n	8001e8a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001eae:	7ffb      	ldrb	r3, [r7, #31]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001eb4:	4b7a      	ldr	r3, [pc, #488]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	4a79      	ldr	r2, [pc, #484]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001eba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ebe:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	f000 80fe 	beq.w	80020c6 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ece:	2b02      	cmp	r3, #2
 8001ed0:	f040 80d0 	bne.w	8002074 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001ed4:	4b72      	ldr	r3, [pc, #456]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001ed6:	68db      	ldr	r3, [r3, #12]
 8001ed8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	f003 0203 	and.w	r2, r3, #3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d130      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef2:	3b01      	subs	r3, #1
 8001ef4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d127      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f04:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d11f      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f10:	687a      	ldr	r2, [r7, #4]
 8001f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f14:	2a07      	cmp	r2, #7
 8001f16:	bf14      	ite	ne
 8001f18:	2201      	movne	r2, #1
 8001f1a:	2200      	moveq	r2, #0
 8001f1c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f1e:	4293      	cmp	r3, r2
 8001f20:	d113      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f2c:	085b      	lsrs	r3, r3, #1
 8001f2e:	3b01      	subs	r3, #1
 8001f30:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001f32:	429a      	cmp	r2, r3
 8001f34:	d109      	bne.n	8001f4a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f40:	085b      	lsrs	r3, r3, #1
 8001f42:	3b01      	subs	r3, #1
 8001f44:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d06e      	beq.n	8002028 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b0c      	cmp	r3, #12
 8001f4e:	d069      	beq.n	8002024 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001f50:	4b53      	ldr	r3, [pc, #332]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d105      	bne.n	8001f68 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001f5c:	4b50      	ldr	r3, [pc, #320]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e0ad      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f6c:	4b4c      	ldr	r3, [pc, #304]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a4b      	ldr	r2, [pc, #300]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f78:	f7ff f98c 	bl	8001294 <HAL_GetTick>
 8001f7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f988 	bl	8001294 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e09a      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f92:	4b43      	ldr	r3, [pc, #268]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d1f0      	bne.n	8001f80 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9e:	4b40      	ldr	r3, [pc, #256]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_RCC_OscConfig+0x784>)
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001faa:	687a      	ldr	r2, [r7, #4]
 8001fac:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001fae:	3a01      	subs	r2, #1
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	4311      	orrs	r1, r2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001fb8:	0212      	lsls	r2, r2, #8
 8001fba:	4311      	orrs	r1, r2
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001fc0:	0852      	lsrs	r2, r2, #1
 8001fc2:	3a01      	subs	r2, #1
 8001fc4:	0552      	lsls	r2, r2, #21
 8001fc6:	4311      	orrs	r1, r2
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001fcc:	0852      	lsrs	r2, r2, #1
 8001fce:	3a01      	subs	r2, #1
 8001fd0:	0652      	lsls	r2, r2, #25
 8001fd2:	4311      	orrs	r1, r2
 8001fd4:	687a      	ldr	r2, [r7, #4]
 8001fd6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001fd8:	0912      	lsrs	r2, r2, #4
 8001fda:	0452      	lsls	r2, r2, #17
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	4930      	ldr	r1, [pc, #192]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001fe4:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a2d      	ldr	r2, [pc, #180]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001fea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fee:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ff0:	4b2b      	ldr	r3, [pc, #172]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	4a2a      	ldr	r2, [pc, #168]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8001ff6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ffa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ffc:	f7ff f94a 	bl	8001294 <HAL_GetTick>
 8002000:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002002:	e008      	b.n	8002016 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002004:	f7ff f946 	bl	8001294 <HAL_GetTick>
 8002008:	4602      	mov	r2, r0
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	2b02      	cmp	r3, #2
 8002010:	d901      	bls.n	8002016 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002012:	2303      	movs	r3, #3
 8002014:	e058      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002016:	4b22      	ldr	r3, [pc, #136]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d0f0      	beq.n	8002004 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002022:	e050      	b.n	80020c6 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002024:	2301      	movs	r3, #1
 8002026:	e04f      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002028:	4b1d      	ldr	r3, [pc, #116]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d148      	bne.n	80020c6 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002034:	4b1a      	ldr	r3, [pc, #104]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 800203a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800203e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002040:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	4a16      	ldr	r2, [pc, #88]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002046:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800204a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800204c:	f7ff f922 	bl	8001294 <HAL_GetTick>
 8002050:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002052:	e008      	b.n	8002066 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002054:	f7ff f91e 	bl	8001294 <HAL_GetTick>
 8002058:	4602      	mov	r2, r0
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	1ad3      	subs	r3, r2, r3
 800205e:	2b02      	cmp	r3, #2
 8002060:	d901      	bls.n	8002066 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002062:	2303      	movs	r3, #3
 8002064:	e030      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002066:	4b0e      	ldr	r3, [pc, #56]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d0f0      	beq.n	8002054 <HAL_RCC_OscConfig+0x734>
 8002072:	e028      	b.n	80020c6 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	2b0c      	cmp	r3, #12
 8002078:	d023      	beq.n	80020c2 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800207a:	4b09      	ldr	r3, [pc, #36]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a08      	ldr	r2, [pc, #32]	; (80020a0 <HAL_RCC_OscConfig+0x780>)
 8002080:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002084:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002086:	f7ff f905 	bl	8001294 <HAL_GetTick>
 800208a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800208c:	e00c      	b.n	80020a8 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800208e:	f7ff f901 	bl	8001294 <HAL_GetTick>
 8002092:	4602      	mov	r2, r0
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	1ad3      	subs	r3, r2, r3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d905      	bls.n	80020a8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e013      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
 80020a0:	40021000 	.word	0x40021000
 80020a4:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020a8:	4b09      	ldr	r3, [pc, #36]	; (80020d0 <HAL_RCC_OscConfig+0x7b0>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d1ec      	bne.n	800208e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80020b4:	4b06      	ldr	r3, [pc, #24]	; (80020d0 <HAL_RCC_OscConfig+0x7b0>)
 80020b6:	68da      	ldr	r2, [r3, #12]
 80020b8:	4905      	ldr	r1, [pc, #20]	; (80020d0 <HAL_RCC_OscConfig+0x7b0>)
 80020ba:	4b06      	ldr	r3, [pc, #24]	; (80020d4 <HAL_RCC_OscConfig+0x7b4>)
 80020bc:	4013      	ands	r3, r2
 80020be:	60cb      	str	r3, [r1, #12]
 80020c0:	e001      	b.n	80020c6 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80020c2:	2301      	movs	r3, #1
 80020c4:	e000      	b.n	80020c8 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40021000 	.word	0x40021000
 80020d4:	feeefffc 	.word	0xfeeefffc

080020d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d101      	bne.n	80020ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e0e7      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80020ec:	4b75      	ldr	r3, [pc, #468]	; (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f003 0307 	and.w	r3, r3, #7
 80020f4:	683a      	ldr	r2, [r7, #0]
 80020f6:	429a      	cmp	r2, r3
 80020f8:	d910      	bls.n	800211c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020fa:	4b72      	ldr	r3, [pc, #456]	; (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f023 0207 	bic.w	r2, r3, #7
 8002102:	4970      	ldr	r1, [pc, #448]	; (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	4313      	orrs	r3, r2
 8002108:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800210a:	4b6e      	ldr	r3, [pc, #440]	; (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	429a      	cmp	r2, r3
 8002116:	d001      	beq.n	800211c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002118:	2301      	movs	r3, #1
 800211a:	e0cf      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	f003 0302 	and.w	r3, r3, #2
 8002124:	2b00      	cmp	r3, #0
 8002126:	d010      	beq.n	800214a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	689a      	ldr	r2, [r3, #8]
 800212c:	4b66      	ldr	r3, [pc, #408]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002134:	429a      	cmp	r2, r3
 8002136:	d908      	bls.n	800214a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002138:	4b63      	ldr	r3, [pc, #396]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	4960      	ldr	r1, [pc, #384]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0301 	and.w	r3, r3, #1
 8002152:	2b00      	cmp	r3, #0
 8002154:	d04c      	beq.n	80021f0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	2b03      	cmp	r3, #3
 800215c:	d107      	bne.n	800216e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800215e:	4b5a      	ldr	r3, [pc, #360]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d121      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e0a6      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d107      	bne.n	8002186 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002176:	4b54      	ldr	r3, [pc, #336]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800217e:	2b00      	cmp	r3, #0
 8002180:	d115      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e09a      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d107      	bne.n	800219e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800218e:	4b4e      	ldr	r3, [pc, #312]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f003 0302 	and.w	r3, r3, #2
 8002196:	2b00      	cmp	r3, #0
 8002198:	d109      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e08e      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800219e:	4b4a      	ldr	r3, [pc, #296]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d101      	bne.n	80021ae <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e086      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ae:	4b46      	ldr	r3, [pc, #280]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	f023 0203 	bic.w	r2, r3, #3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	4943      	ldr	r1, [pc, #268]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c0:	f7ff f868 	bl	8001294 <HAL_GetTick>
 80021c4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c6:	e00a      	b.n	80021de <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c8:	f7ff f864 	bl	8001294 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d901      	bls.n	80021de <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80021da:	2303      	movs	r3, #3
 80021dc:	e06e      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021de:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 80021e0:	689b      	ldr	r3, [r3, #8]
 80021e2:	f003 020c 	and.w	r2, r3, #12
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d1eb      	bne.n	80021c8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d010      	beq.n	800221e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	689a      	ldr	r2, [r3, #8]
 8002200:	4b31      	ldr	r3, [pc, #196]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002208:	429a      	cmp	r2, r3
 800220a:	d208      	bcs.n	800221e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220c:	4b2e      	ldr	r3, [pc, #184]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	492b      	ldr	r1, [pc, #172]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800221a:	4313      	orrs	r3, r2
 800221c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800221e:	4b29      	ldr	r3, [pc, #164]	; (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0307 	and.w	r3, r3, #7
 8002226:	683a      	ldr	r2, [r7, #0]
 8002228:	429a      	cmp	r2, r3
 800222a:	d210      	bcs.n	800224e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222c:	4b25      	ldr	r3, [pc, #148]	; (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f023 0207 	bic.w	r2, r3, #7
 8002234:	4923      	ldr	r1, [pc, #140]	; (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	4313      	orrs	r3, r2
 800223a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800223c:	4b21      	ldr	r3, [pc, #132]	; (80022c4 <HAL_RCC_ClockConfig+0x1ec>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0307 	and.w	r3, r3, #7
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d001      	beq.n	800224e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800224a:	2301      	movs	r3, #1
 800224c:	e036      	b.n	80022bc <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f003 0304 	and.w	r3, r3, #4
 8002256:	2b00      	cmp	r3, #0
 8002258:	d008      	beq.n	800226c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800225a:	4b1b      	ldr	r3, [pc, #108]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800225c:	689b      	ldr	r3, [r3, #8]
 800225e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	4918      	ldr	r1, [pc, #96]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002268:	4313      	orrs	r3, r2
 800226a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0308 	and.w	r3, r3, #8
 8002274:	2b00      	cmp	r3, #0
 8002276:	d009      	beq.n	800228c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002278:	4b13      	ldr	r3, [pc, #76]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	691b      	ldr	r3, [r3, #16]
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4910      	ldr	r1, [pc, #64]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002288:	4313      	orrs	r3, r2
 800228a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800228c:	f000 f824 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8002290:	4602      	mov	r2, r0
 8002292:	4b0d      	ldr	r3, [pc, #52]	; (80022c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	689b      	ldr	r3, [r3, #8]
 8002296:	091b      	lsrs	r3, r3, #4
 8002298:	f003 030f 	and.w	r3, r3, #15
 800229c:	490b      	ldr	r1, [pc, #44]	; (80022cc <HAL_RCC_ClockConfig+0x1f4>)
 800229e:	5ccb      	ldrb	r3, [r1, r3]
 80022a0:	f003 031f 	and.w	r3, r3, #31
 80022a4:	fa22 f303 	lsr.w	r3, r2, r3
 80022a8:	4a09      	ldr	r2, [pc, #36]	; (80022d0 <HAL_RCC_ClockConfig+0x1f8>)
 80022aa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <HAL_RCC_ClockConfig+0x1fc>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe fe21 	bl	8000ef8 <HAL_InitTick>
 80022b6:	4603      	mov	r3, r0
 80022b8:	72fb      	strb	r3, [r7, #11]

  return status;
 80022ba:	7afb      	ldrb	r3, [r7, #11]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40022000 	.word	0x40022000
 80022c8:	40021000 	.word	0x40021000
 80022cc:	08008c20 	.word	0x08008c20
 80022d0:	20000004 	.word	0x20000004
 80022d4:	20000008 	.word	0x20000008

080022d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	b089      	sub	sp, #36	; 0x24
 80022dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80022de:	2300      	movs	r3, #0
 80022e0:	61fb      	str	r3, [r7, #28]
 80022e2:	2300      	movs	r3, #0
 80022e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022e6:	4b3e      	ldr	r3, [pc, #248]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022e8:	689b      	ldr	r3, [r3, #8]
 80022ea:	f003 030c 	and.w	r3, r3, #12
 80022ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022f0:	4b3b      	ldr	r3, [pc, #236]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0303 	and.w	r3, r3, #3
 80022f8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0x34>
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d121      	bne.n	800234a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	2b01      	cmp	r3, #1
 800230a:	d11e      	bne.n	800234a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800230c:	4b34      	ldr	r3, [pc, #208]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0308 	and.w	r3, r3, #8
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002318:	4b31      	ldr	r3, [pc, #196]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800231a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231e:	0a1b      	lsrs	r3, r3, #8
 8002320:	f003 030f 	and.w	r3, r3, #15
 8002324:	61fb      	str	r3, [r7, #28]
 8002326:	e005      	b.n	8002334 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002328:	4b2d      	ldr	r3, [pc, #180]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002334:	4a2b      	ldr	r2, [pc, #172]	; (80023e4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002336:	69fb      	ldr	r3, [r7, #28]
 8002338:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800233c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d10d      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	2b04      	cmp	r3, #4
 800234e:	d102      	bne.n	8002356 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002352:	61bb      	str	r3, [r7, #24]
 8002354:	e004      	b.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	2b08      	cmp	r3, #8
 800235a:	d101      	bne.n	8002360 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800235c:	4b23      	ldr	r3, [pc, #140]	; (80023ec <HAL_RCC_GetSysClockFreq+0x114>)
 800235e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002360:	693b      	ldr	r3, [r7, #16]
 8002362:	2b0c      	cmp	r3, #12
 8002364:	d134      	bne.n	80023d0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002366:	4b1e      	ldr	r3, [pc, #120]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	f003 0303 	and.w	r3, r3, #3
 800236e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2b02      	cmp	r3, #2
 8002374:	d003      	beq.n	800237e <HAL_RCC_GetSysClockFreq+0xa6>
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	2b03      	cmp	r3, #3
 800237a:	d003      	beq.n	8002384 <HAL_RCC_GetSysClockFreq+0xac>
 800237c:	e005      	b.n	800238a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800237e:	4b1a      	ldr	r3, [pc, #104]	; (80023e8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002380:	617b      	str	r3, [r7, #20]
      break;
 8002382:	e005      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002384:	4b19      	ldr	r3, [pc, #100]	; (80023ec <HAL_RCC_GetSysClockFreq+0x114>)
 8002386:	617b      	str	r3, [r7, #20]
      break;
 8002388:	e002      	b.n	8002390 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	617b      	str	r3, [r7, #20]
      break;
 800238e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002390:	4b13      	ldr	r3, [pc, #76]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	f003 0307 	and.w	r3, r3, #7
 800239a:	3301      	adds	r3, #1
 800239c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	0a1b      	lsrs	r3, r3, #8
 80023a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80023a8:	697a      	ldr	r2, [r7, #20]
 80023aa:	fb03 f202 	mul.w	r2, r3, r2
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023b4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <HAL_RCC_GetSysClockFreq+0x108>)
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	0e5b      	lsrs	r3, r3, #25
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	3301      	adds	r3, #1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80023c6:	697a      	ldr	r2, [r7, #20]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80023ce:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80023d0:	69bb      	ldr	r3, [r7, #24]
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3724      	adds	r7, #36	; 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08008c38 	.word	0x08008c38
 80023e8:	00f42400 	.word	0x00f42400
 80023ec:	007a1200 	.word	0x007a1200

080023f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023f0:	b480      	push	{r7}
 80023f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023f4:	4b03      	ldr	r3, [pc, #12]	; (8002404 <HAL_RCC_GetHCLKFreq+0x14>)
 80023f6:	681b      	ldr	r3, [r3, #0]
}
 80023f8:	4618      	mov	r0, r3
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000004 	.word	0x20000004

08002408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800240c:	f7ff fff0 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 8002410:	4602      	mov	r2, r0
 8002412:	4b06      	ldr	r3, [pc, #24]	; (800242c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	0a1b      	lsrs	r3, r3, #8
 8002418:	f003 0307 	and.w	r3, r3, #7
 800241c:	4904      	ldr	r1, [pc, #16]	; (8002430 <HAL_RCC_GetPCLK1Freq+0x28>)
 800241e:	5ccb      	ldrb	r3, [r1, r3]
 8002420:	f003 031f 	and.w	r3, r3, #31
 8002424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002428:	4618      	mov	r0, r3
 800242a:	bd80      	pop	{r7, pc}
 800242c:	40021000 	.word	0x40021000
 8002430:	08008c30 	.word	0x08008c30

08002434 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002438:	f7ff ffda 	bl	80023f0 <HAL_RCC_GetHCLKFreq>
 800243c:	4602      	mov	r2, r0
 800243e:	4b06      	ldr	r3, [pc, #24]	; (8002458 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	0adb      	lsrs	r3, r3, #11
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	4904      	ldr	r1, [pc, #16]	; (800245c <HAL_RCC_GetPCLK2Freq+0x28>)
 800244a:	5ccb      	ldrb	r3, [r1, r3]
 800244c:	f003 031f 	and.w	r3, r3, #31
 8002450:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002454:	4618      	mov	r0, r3
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40021000 	.word	0x40021000
 800245c:	08008c30 	.word	0x08008c30

08002460 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	220f      	movs	r2, #15
 800246e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002470:	4b12      	ldr	r3, [pc, #72]	; (80024bc <HAL_RCC_GetClockConfig+0x5c>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	f003 0203 	and.w	r2, r3, #3
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <HAL_RCC_GetClockConfig+0x5c>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <HAL_RCC_GetClockConfig+0x5c>)
 800248a:	689b      	ldr	r3, [r3, #8]
 800248c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <HAL_RCC_GetClockConfig+0x5c>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	08db      	lsrs	r3, r3, #3
 800249a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80024a2:	4b07      	ldr	r3, [pc, #28]	; (80024c0 <HAL_RCC_GetClockConfig+0x60>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0207 	and.w	r2, r3, #7
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	601a      	str	r2, [r3, #0]
}
 80024ae:	bf00      	nop
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000
 80024c0:	40022000 	.word	0x40022000

080024c4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80024cc:	2300      	movs	r3, #0
 80024ce:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d003      	beq.n	80024e4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80024dc:	f7ff f9bc 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 80024e0:	6178      	str	r0, [r7, #20]
 80024e2:	e014      	b.n	800250e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80024e4:	4b25      	ldr	r3, [pc, #148]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024e8:	4a24      	ldr	r2, [pc, #144]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024ee:	6593      	str	r3, [r2, #88]	; 0x58
 80024f0:	4b22      	ldr	r3, [pc, #136]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	60fb      	str	r3, [r7, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80024fc:	f7ff f9ac 	bl	8001858 <HAL_PWREx_GetVoltageRange>
 8002500:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002502:	4b1e      	ldr	r3, [pc, #120]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002504:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002506:	4a1d      	ldr	r2, [pc, #116]	; (800257c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002508:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800250c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002514:	d10b      	bne.n	800252e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2b80      	cmp	r3, #128	; 0x80
 800251a:	d919      	bls.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2ba0      	cmp	r3, #160	; 0xa0
 8002520:	d902      	bls.n	8002528 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002522:	2302      	movs	r3, #2
 8002524:	613b      	str	r3, [r7, #16]
 8002526:	e013      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002528:	2301      	movs	r3, #1
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	e010      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2b80      	cmp	r3, #128	; 0x80
 8002532:	d902      	bls.n	800253a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002534:	2303      	movs	r3, #3
 8002536:	613b      	str	r3, [r7, #16]
 8002538:	e00a      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b80      	cmp	r3, #128	; 0x80
 800253e:	d102      	bne.n	8002546 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002540:	2302      	movs	r3, #2
 8002542:	613b      	str	r3, [r7, #16]
 8002544:	e004      	b.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2b70      	cmp	r3, #112	; 0x70
 800254a:	d101      	bne.n	8002550 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800254c:	2301      	movs	r3, #1
 800254e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002550:	4b0b      	ldr	r3, [pc, #44]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f023 0207 	bic.w	r2, r3, #7
 8002558:	4909      	ldr	r1, [pc, #36]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800255a:	693b      	ldr	r3, [r7, #16]
 800255c:	4313      	orrs	r3, r2
 800255e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002560:	4b07      	ldr	r3, [pc, #28]	; (8002580 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0307 	and.w	r3, r3, #7
 8002568:	693a      	ldr	r2, [r7, #16]
 800256a:	429a      	cmp	r2, r3
 800256c:	d001      	beq.n	8002572 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e000      	b.n	8002574 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	40021000 	.word	0x40021000
 8002580:	40022000 	.word	0x40022000

08002584 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800258c:	2300      	movs	r3, #0
 800258e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002590:	2300      	movs	r3, #0
 8002592:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800259c:	2b00      	cmp	r3, #0
 800259e:	d041      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025a4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025a8:	d02a      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80025aa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80025ae:	d824      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025b4:	d008      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80025b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80025ba:	d81e      	bhi.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x76>
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80025c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025c4:	d010      	beq.n	80025e8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80025c6:	e018      	b.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025c8:	4b86      	ldr	r3, [pc, #536]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	4a85      	ldr	r2, [pc, #532]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025d4:	e015      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3304      	adds	r3, #4
 80025da:	2100      	movs	r1, #0
 80025dc:	4618      	mov	r0, r3
 80025de:	f000 fabb 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 80025e2:	4603      	mov	r3, r0
 80025e4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025e6:	e00c      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3320      	adds	r3, #32
 80025ec:	2100      	movs	r1, #0
 80025ee:	4618      	mov	r0, r3
 80025f0:	f000 fba6 	bl	8002d40 <RCCEx_PLLSAI2_Config>
 80025f4:	4603      	mov	r3, r0
 80025f6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80025f8:	e003      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	74fb      	strb	r3, [r7, #19]
      break;
 80025fe:	e000      	b.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002600:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002602:	7cfb      	ldrb	r3, [r7, #19]
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10b      	bne.n	8002620 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002608:	4b76      	ldr	r3, [pc, #472]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800260a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002616:	4973      	ldr	r1, [pc, #460]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002618:	4313      	orrs	r3, r2
 800261a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800261e:	e001      	b.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002620:	7cfb      	ldrb	r3, [r7, #19]
 8002622:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800262c:	2b00      	cmp	r3, #0
 800262e:	d041      	beq.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002634:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002638:	d02a      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800263a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800263e:	d824      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002644:	d008      	beq.n	8002658 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002646:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800264a:	d81e      	bhi.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800264c:	2b00      	cmp	r3, #0
 800264e:	d00a      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002650:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002654:	d010      	beq.n	8002678 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002656:	e018      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002658:	4b62      	ldr	r3, [pc, #392]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	4a61      	ldr	r2, [pc, #388]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800265e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002662:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002664:	e015      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	3304      	adds	r3, #4
 800266a:	2100      	movs	r1, #0
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fa73 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 8002672:	4603      	mov	r3, r0
 8002674:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002676:	e00c      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	3320      	adds	r3, #32
 800267c:	2100      	movs	r1, #0
 800267e:	4618      	mov	r0, r3
 8002680:	f000 fb5e 	bl	8002d40 <RCCEx_PLLSAI2_Config>
 8002684:	4603      	mov	r3, r0
 8002686:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002688:	e003      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	74fb      	strb	r3, [r7, #19]
      break;
 800268e:	e000      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002690:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002698:	4b52      	ldr	r3, [pc, #328]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800269a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800269e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80026a6:	494f      	ldr	r1, [pc, #316]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80026ae:	e001      	b.n	80026b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 80a0 	beq.w	8002802 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80026c6:	4b47      	ldr	r3, [pc, #284]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d101      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80026d6:	2300      	movs	r3, #0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00d      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026dc:	4b41      	ldr	r3, [pc, #260]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	4a40      	ldr	r2, [pc, #256]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026e6:	6593      	str	r3, [r2, #88]	; 0x58
 80026e8:	4b3e      	ldr	r3, [pc, #248]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026f4:	2301      	movs	r3, #1
 80026f6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80026f8:	4b3b      	ldr	r3, [pc, #236]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4a3a      	ldr	r2, [pc, #232]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002702:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002704:	f7fe fdc6 	bl	8001294 <HAL_GetTick>
 8002708:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800270a:	e009      	b.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800270c:	f7fe fdc2 	bl	8001294 <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	2b02      	cmp	r3, #2
 8002718:	d902      	bls.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800271a:	2303      	movs	r3, #3
 800271c:	74fb      	strb	r3, [r7, #19]
        break;
 800271e:	e005      	b.n	800272c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002720:	4b31      	ldr	r3, [pc, #196]	; (80027e8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002728:	2b00      	cmp	r3, #0
 800272a:	d0ef      	beq.n	800270c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800272c:	7cfb      	ldrb	r3, [r7, #19]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d15c      	bne.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002732:	4b2c      	ldr	r3, [pc, #176]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002734:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002738:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800273c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800273e:	697b      	ldr	r3, [r7, #20]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01f      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800274a:	697a      	ldr	r2, [r7, #20]
 800274c:	429a      	cmp	r2, r3
 800274e:	d019      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002750:	4b24      	ldr	r3, [pc, #144]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002756:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800275a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800275c:	4b21      	ldr	r3, [pc, #132]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002762:	4a20      	ldr	r2, [pc, #128]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002764:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002768:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800276c:	4b1d      	ldr	r3, [pc, #116]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002772:	4a1c      	ldr	r2, [pc, #112]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002774:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002778:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800277e:	697b      	ldr	r3, [r7, #20]
 8002780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d016      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800278e:	f7fe fd81 	bl	8001294 <HAL_GetTick>
 8002792:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002794:	e00b      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002796:	f7fe fd7d 	bl	8001294 <HAL_GetTick>
 800279a:	4602      	mov	r2, r0
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	1ad3      	subs	r3, r2, r3
 80027a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d902      	bls.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	74fb      	strb	r3, [r7, #19]
            break;
 80027ac:	e006      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027ae:	4b0d      	ldr	r3, [pc, #52]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027b4:	f003 0302 	and.w	r3, r3, #2
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d0ec      	beq.n	8002796 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80027bc:	7cfb      	ldrb	r3, [r7, #19]
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d10c      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027c2:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027d2:	4904      	ldr	r1, [pc, #16]	; (80027e4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80027da:	e009      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	74bb      	strb	r3, [r7, #18]
 80027e0:	e006      	b.n	80027f0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80027e2:	bf00      	nop
 80027e4:	40021000 	.word	0x40021000
 80027e8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027ec:	7cfb      	ldrb	r3, [r7, #19]
 80027ee:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80027f0:	7c7b      	ldrb	r3, [r7, #17]
 80027f2:	2b01      	cmp	r3, #1
 80027f4:	d105      	bne.n	8002802 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027f6:	4b9e      	ldr	r3, [pc, #632]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80027fa:	4a9d      	ldr	r2, [pc, #628]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002800:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	2b00      	cmp	r3, #0
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800280e:	4b98      	ldr	r3, [pc, #608]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002814:	f023 0203 	bic.w	r2, r3, #3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800281c:	4994      	ldr	r1, [pc, #592]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0302 	and.w	r3, r3, #2
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00a      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002830:	4b8f      	ldr	r3, [pc, #572]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002836:	f023 020c 	bic.w	r2, r3, #12
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800283e:	498c      	ldr	r1, [pc, #560]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002840:	4313      	orrs	r3, r2
 8002842:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d00a      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002852:	4b87      	ldr	r3, [pc, #540]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002858:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002860:	4983      	ldr	r1, [pc, #524]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002862:	4313      	orrs	r3, r2
 8002864:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f003 0308 	and.w	r3, r3, #8
 8002870:	2b00      	cmp	r3, #0
 8002872:	d00a      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002874:	4b7e      	ldr	r3, [pc, #504]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002882:	497b      	ldr	r1, [pc, #492]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002884:	4313      	orrs	r3, r2
 8002886:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f003 0310 	and.w	r3, r3, #16
 8002892:	2b00      	cmp	r3, #0
 8002894:	d00a      	beq.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002896:	4b76      	ldr	r3, [pc, #472]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002898:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a4:	4972      	ldr	r1, [pc, #456]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0320 	and.w	r3, r3, #32
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d00a      	beq.n	80028ce <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80028b8:	4b6d      	ldr	r3, [pc, #436]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028be:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028c6:	496a      	ldr	r1, [pc, #424]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00a      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028da:	4b65      	ldr	r3, [pc, #404]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028e8:	4961      	ldr	r1, [pc, #388]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028ea:	4313      	orrs	r3, r2
 80028ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00a      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028fc:	4b5c      	ldr	r3, [pc, #368]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002902:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800290a:	4959      	ldr	r1, [pc, #356]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290c:	4313      	orrs	r3, r2
 800290e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00a      	beq.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800291e:	4b54      	ldr	r3, [pc, #336]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002924:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292c:	4950      	ldr	r1, [pc, #320]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292e:	4313      	orrs	r3, r2
 8002930:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00a      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002940:	4b4b      	ldr	r3, [pc, #300]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002946:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	4948      	ldr	r1, [pc, #288]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002950:	4313      	orrs	r3, r2
 8002952:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800295e:	2b00      	cmp	r3, #0
 8002960:	d00a      	beq.n	8002978 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002962:	4b43      	ldr	r3, [pc, #268]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002964:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002968:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002970:	493f      	ldr	r1, [pc, #252]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002972:	4313      	orrs	r3, r2
 8002974:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d028      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002984:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002992:	4937      	ldr	r1, [pc, #220]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002994:	4313      	orrs	r3, r2
 8002996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800299e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029a2:	d106      	bne.n	80029b2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029a4:	4b32      	ldr	r3, [pc, #200]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	4a31      	ldr	r2, [pc, #196]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029aa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029ae:	60d3      	str	r3, [r2, #12]
 80029b0:	e011      	b.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029ba:	d10c      	bne.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	3304      	adds	r3, #4
 80029c0:	2101      	movs	r1, #1
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 f8c8 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80029cc:	7cfb      	ldrb	r3, [r7, #19]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80029d2:	7cfb      	ldrb	r3, [r7, #19]
 80029d4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d028      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80029e2:	4b23      	ldr	r3, [pc, #140]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029f0:	491f      	ldr	r1, [pc, #124]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029fc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a00:	d106      	bne.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a02:	4b1b      	ldr	r3, [pc, #108]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a04:	68db      	ldr	r3, [r3, #12]
 8002a06:	4a1a      	ldr	r2, [pc, #104]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a08:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a0c:	60d3      	str	r3, [r2, #12]
 8002a0e:	e011      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a14:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a18:	d10c      	bne.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	3304      	adds	r3, #4
 8002a1e:	2101      	movs	r1, #1
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f899 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 8002a26:	4603      	mov	r3, r0
 8002a28:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a2a:	7cfb      	ldrb	r3, [r7, #19]
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8002a30:	7cfb      	ldrb	r3, [r7, #19]
 8002a32:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d02b      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002a40:	4b0b      	ldr	r3, [pc, #44]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a4e:	4908      	ldr	r1, [pc, #32]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a5e:	d109      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a60:	4b03      	ldr	r3, [pc, #12]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	4a02      	ldr	r2, [pc, #8]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a6a:	60d3      	str	r3, [r2, #12]
 8002a6c:	e014      	b.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a6e:	bf00      	nop
 8002a70:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a7c:	d10c      	bne.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	3304      	adds	r3, #4
 8002a82:	2101      	movs	r1, #1
 8002a84:	4618      	mov	r0, r3
 8002a86:	f000 f867 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a8e:	7cfb      	ldrb	r3, [r7, #19]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a94:	7cfb      	ldrb	r3, [r7, #19]
 8002a96:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d02f      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002aa4:	4b2b      	ldr	r3, [pc, #172]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ab2:	4928      	ldr	r1, [pc, #160]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002abe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ac2:	d10d      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	3304      	adds	r3, #4
 8002ac8:	2102      	movs	r1, #2
 8002aca:	4618      	mov	r0, r3
 8002acc:	f000 f844 	bl	8002b58 <RCCEx_PLLSAI1_Config>
 8002ad0:	4603      	mov	r3, r0
 8002ad2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ad4:	7cfb      	ldrb	r3, [r7, #19]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d014      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002ada:	7cfb      	ldrb	r3, [r7, #19]
 8002adc:	74bb      	strb	r3, [r7, #18]
 8002ade:	e011      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ae4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3320      	adds	r3, #32
 8002aee:	2102      	movs	r1, #2
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f925 	bl	8002d40 <RCCEx_PLLSAI2_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d00a      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b10:	4b10      	ldr	r3, [pc, #64]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b1e:	490d      	ldr	r1, [pc, #52]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00b      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002b32:	4b08      	ldr	r3, [pc, #32]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b38:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b42:	4904      	ldr	r1, [pc, #16]	; (8002b54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002b44:	4313      	orrs	r3, r2
 8002b46:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b4a:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	3718      	adds	r7, #24
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd80      	pop	{r7, pc}
 8002b54:	40021000 	.word	0x40021000

08002b58 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b084      	sub	sp, #16
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
 8002b60:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002b62:	2300      	movs	r3, #0
 8002b64:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002b66:	4b75      	ldr	r3, [pc, #468]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d018      	beq.n	8002ba4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b72:	4b72      	ldr	r3, [pc, #456]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	f003 0203 	and.w	r2, r3, #3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	429a      	cmp	r2, r3
 8002b80:	d10d      	bne.n	8002b9e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
       ||
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d009      	beq.n	8002b9e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b8a:	4b6c      	ldr	r3, [pc, #432]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	091b      	lsrs	r3, r3, #4
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	1c5a      	adds	r2, r3, #1
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
       ||
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d047      	beq.n	8002c2e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
 8002ba0:	73fb      	strb	r3, [r7, #15]
 8002ba2:	e044      	b.n	8002c2e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	2b03      	cmp	r3, #3
 8002baa:	d018      	beq.n	8002bde <RCCEx_PLLSAI1_Config+0x86>
 8002bac:	2b03      	cmp	r3, #3
 8002bae:	d825      	bhi.n	8002bfc <RCCEx_PLLSAI1_Config+0xa4>
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d002      	beq.n	8002bba <RCCEx_PLLSAI1_Config+0x62>
 8002bb4:	2b02      	cmp	r3, #2
 8002bb6:	d009      	beq.n	8002bcc <RCCEx_PLLSAI1_Config+0x74>
 8002bb8:	e020      	b.n	8002bfc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bba:	4b60      	ldr	r3, [pc, #384]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d11d      	bne.n	8002c02 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bca:	e01a      	b.n	8002c02 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002bcc:	4b5b      	ldr	r3, [pc, #364]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d116      	bne.n	8002c06 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002bd8:	2301      	movs	r3, #1
 8002bda:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002bdc:	e013      	b.n	8002c06 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002bde:	4b57      	ldr	r3, [pc, #348]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d10f      	bne.n	8002c0a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002bea:	4b54      	ldr	r3, [pc, #336]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d109      	bne.n	8002c0a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002bfa:	e006      	b.n	8002c0a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8002c00:	e004      	b.n	8002c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c02:	bf00      	nop
 8002c04:	e002      	b.n	8002c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c06:	bf00      	nop
 8002c08:	e000      	b.n	8002c0c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c0a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c0c:	7bfb      	ldrb	r3, [r7, #15]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d10d      	bne.n	8002c2e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c12:	4b4a      	ldr	r3, [pc, #296]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c14:	68db      	ldr	r3, [r3, #12]
 8002c16:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6819      	ldr	r1, [r3, #0]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	011b      	lsls	r3, r3, #4
 8002c26:	430b      	orrs	r3, r1
 8002c28:	4944      	ldr	r1, [pc, #272]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c2e:	7bfb      	ldrb	r3, [r7, #15]
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d17d      	bne.n	8002d30 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c34:	4b41      	ldr	r3, [pc, #260]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a40      	ldr	r2, [pc, #256]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c40:	f7fe fb28 	bl	8001294 <HAL_GetTick>
 8002c44:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c46:	e009      	b.n	8002c5c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c48:	f7fe fb24 	bl	8001294 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d902      	bls.n	8002c5c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	73fb      	strb	r3, [r7, #15]
        break;
 8002c5a:	e005      	b.n	8002c68 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c5c:	4b37      	ldr	r3, [pc, #220]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d1ef      	bne.n	8002c48 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d160      	bne.n	8002d30 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d111      	bne.n	8002c98 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c74:	4b31      	ldr	r3, [pc, #196]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c76:	691b      	ldr	r3, [r3, #16]
 8002c78:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c80:	687a      	ldr	r2, [r7, #4]
 8002c82:	6892      	ldr	r2, [r2, #8]
 8002c84:	0211      	lsls	r1, r2, #8
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	68d2      	ldr	r2, [r2, #12]
 8002c8a:	0912      	lsrs	r2, r2, #4
 8002c8c:	0452      	lsls	r2, r2, #17
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	492a      	ldr	r1, [pc, #168]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	610b      	str	r3, [r1, #16]
 8002c96:	e027      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d112      	bne.n	8002cc4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c9e:	4b27      	ldr	r3, [pc, #156]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ca6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002caa:	687a      	ldr	r2, [r7, #4]
 8002cac:	6892      	ldr	r2, [r2, #8]
 8002cae:	0211      	lsls	r1, r2, #8
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	6912      	ldr	r2, [r2, #16]
 8002cb4:	0852      	lsrs	r2, r2, #1
 8002cb6:	3a01      	subs	r2, #1
 8002cb8:	0552      	lsls	r2, r2, #21
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	491f      	ldr	r1, [pc, #124]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	610b      	str	r3, [r1, #16]
 8002cc2:	e011      	b.n	8002ce8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cc4:	4b1d      	ldr	r3, [pc, #116]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002ccc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	6892      	ldr	r2, [r2, #8]
 8002cd4:	0211      	lsls	r1, r2, #8
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6952      	ldr	r2, [r2, #20]
 8002cda:	0852      	lsrs	r2, r2, #1
 8002cdc:	3a01      	subs	r2, #1
 8002cde:	0652      	lsls	r2, r2, #25
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	4916      	ldr	r1, [pc, #88]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002ce4:	4313      	orrs	r3, r2
 8002ce6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ce8:	4b14      	ldr	r3, [pc, #80]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a13      	ldr	r2, [pc, #76]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002cf2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cf4:	f7fe face 	bl	8001294 <HAL_GetTick>
 8002cf8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002cfa:	e009      	b.n	8002d10 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002cfc:	f7fe faca 	bl	8001294 <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d902      	bls.n	8002d10 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	73fb      	strb	r3, [r7, #15]
          break;
 8002d0e:	e005      	b.n	8002d1c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d10:	4b0a      	ldr	r3, [pc, #40]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d0ef      	beq.n	8002cfc <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d22:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d24:	691a      	ldr	r2, [r3, #16]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	4904      	ldr	r1, [pc, #16]	; (8002d3c <RCCEx_PLLSAI1_Config+0x1e4>)
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	40021000 	.word	0x40021000

08002d40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b084      	sub	sp, #16
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
 8002d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002d4e:	4b6a      	ldr	r3, [pc, #424]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0303 	and.w	r3, r3, #3
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d018      	beq.n	8002d8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002d5a:	4b67      	ldr	r3, [pc, #412]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d5c:	68db      	ldr	r3, [r3, #12]
 8002d5e:	f003 0203 	and.w	r2, r3, #3
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d10d      	bne.n	8002d86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d009      	beq.n	8002d86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d72:	4b61      	ldr	r3, [pc, #388]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	091b      	lsrs	r3, r3, #4
 8002d78:	f003 0307 	and.w	r3, r3, #7
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
       ||
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d047      	beq.n	8002e16 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	73fb      	strb	r3, [r7, #15]
 8002d8a:	e044      	b.n	8002e16 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b03      	cmp	r3, #3
 8002d92:	d018      	beq.n	8002dc6 <RCCEx_PLLSAI2_Config+0x86>
 8002d94:	2b03      	cmp	r3, #3
 8002d96:	d825      	bhi.n	8002de4 <RCCEx_PLLSAI2_Config+0xa4>
 8002d98:	2b01      	cmp	r3, #1
 8002d9a:	d002      	beq.n	8002da2 <RCCEx_PLLSAI2_Config+0x62>
 8002d9c:	2b02      	cmp	r3, #2
 8002d9e:	d009      	beq.n	8002db4 <RCCEx_PLLSAI2_Config+0x74>
 8002da0:	e020      	b.n	8002de4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002da2:	4b55      	ldr	r3, [pc, #340]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d11d      	bne.n	8002dea <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002db2:	e01a      	b.n	8002dea <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002db4:	4b50      	ldr	r3, [pc, #320]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d116      	bne.n	8002dee <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002dc0:	2301      	movs	r3, #1
 8002dc2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002dc4:	e013      	b.n	8002dee <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002dc6:	4b4c      	ldr	r3, [pc, #304]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d10f      	bne.n	8002df2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002dd2:	4b49      	ldr	r3, [pc, #292]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d109      	bne.n	8002df2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002de2:	e006      	b.n	8002df2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	73fb      	strb	r3, [r7, #15]
      break;
 8002de8:	e004      	b.n	8002df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dea:	bf00      	nop
 8002dec:	e002      	b.n	8002df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002dee:	bf00      	nop
 8002df0:	e000      	b.n	8002df4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002df2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002df4:	7bfb      	ldrb	r3, [r7, #15]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10d      	bne.n	8002e16 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002dfa:	4b3f      	ldr	r3, [pc, #252]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6819      	ldr	r1, [r3, #0]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	3b01      	subs	r3, #1
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	430b      	orrs	r3, r1
 8002e10:	4939      	ldr	r1, [pc, #228]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002e16:	7bfb      	ldrb	r3, [r7, #15]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d167      	bne.n	8002eec <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002e1c:	4b36      	ldr	r3, [pc, #216]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a35      	ldr	r2, [pc, #212]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e22:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e28:	f7fe fa34 	bl	8001294 <HAL_GetTick>
 8002e2c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e2e:	e009      	b.n	8002e44 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e30:	f7fe fa30 	bl	8001294 <HAL_GetTick>
 8002e34:	4602      	mov	r2, r0
 8002e36:	68bb      	ldr	r3, [r7, #8]
 8002e38:	1ad3      	subs	r3, r2, r3
 8002e3a:	2b02      	cmp	r3, #2
 8002e3c:	d902      	bls.n	8002e44 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002e3e:	2303      	movs	r3, #3
 8002e40:	73fb      	strb	r3, [r7, #15]
        break;
 8002e42:	e005      	b.n	8002e50 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002e44:	4b2c      	ldr	r3, [pc, #176]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1ef      	bne.n	8002e30 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002e50:	7bfb      	ldrb	r3, [r7, #15]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d14a      	bne.n	8002eec <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d111      	bne.n	8002e80 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e5c:	4b26      	ldr	r3, [pc, #152]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e5e:	695b      	ldr	r3, [r3, #20]
 8002e60:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	6892      	ldr	r2, [r2, #8]
 8002e6c:	0211      	lsls	r1, r2, #8
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	68d2      	ldr	r2, [r2, #12]
 8002e72:	0912      	lsrs	r2, r2, #4
 8002e74:	0452      	lsls	r2, r2, #17
 8002e76:	430a      	orrs	r2, r1
 8002e78:	491f      	ldr	r1, [pc, #124]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	614b      	str	r3, [r1, #20]
 8002e7e:	e011      	b.n	8002ea4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e80:	4b1d      	ldr	r3, [pc, #116]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e82:	695b      	ldr	r3, [r3, #20]
 8002e84:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e88:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e8c:	687a      	ldr	r2, [r7, #4]
 8002e8e:	6892      	ldr	r2, [r2, #8]
 8002e90:	0211      	lsls	r1, r2, #8
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	6912      	ldr	r2, [r2, #16]
 8002e96:	0852      	lsrs	r2, r2, #1
 8002e98:	3a01      	subs	r2, #1
 8002e9a:	0652      	lsls	r2, r2, #25
 8002e9c:	430a      	orrs	r2, r1
 8002e9e:	4916      	ldr	r1, [pc, #88]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002ea4:	4b14      	ldr	r3, [pc, #80]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a13      	ldr	r2, [pc, #76]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002eaa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002eae:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eb0:	f7fe f9f0 	bl	8001294 <HAL_GetTick>
 8002eb4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002eb6:	e009      	b.n	8002ecc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002eb8:	f7fe f9ec 	bl	8001294 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b02      	cmp	r3, #2
 8002ec4:	d902      	bls.n	8002ecc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	73fb      	strb	r3, [r7, #15]
          break;
 8002eca:	e005      	b.n	8002ed8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002ecc:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ef      	beq.n	8002eb8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002ed8:	7bfb      	ldrb	r3, [r7, #15]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d106      	bne.n	8002eec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002ede:	4b06      	ldr	r3, [pc, #24]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee0:	695a      	ldr	r2, [r3, #20]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	4904      	ldr	r1, [pc, #16]	; (8002ef8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ee8:	4313      	orrs	r3, r2
 8002eea:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	40021000 	.word	0x40021000

08002efc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b082      	sub	sp, #8
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d101      	bne.n	8002f0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	e049      	b.n	8002fa2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d106      	bne.n	8002f28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f22:	6878      	ldr	r0, [r7, #4]
 8002f24:	f7fd ff66 	bl	8000df4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2202      	movs	r2, #2
 8002f2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3304      	adds	r3, #4
 8002f38:	4619      	mov	r1, r3
 8002f3a:	4610      	mov	r0, r2
 8002f3c:	f000 f9d0 	bl	80032e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2201      	movs	r2, #1
 8002f44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2201      	movs	r2, #1
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2201      	movs	r2, #1
 8002f6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2201      	movs	r2, #1
 8002f84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2201      	movs	r2, #1
 8002f94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002fa0:	2300      	movs	r3, #0
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
	...

08002fac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002fac:	b480      	push	{r7}
 8002fae:	b085      	sub	sp, #20
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d001      	beq.n	8002fc4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	e04f      	b.n	8003064 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2202      	movs	r2, #2
 8002fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	68da      	ldr	r2, [r3, #12]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f042 0201 	orr.w	r2, r2, #1
 8002fda:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a23      	ldr	r2, [pc, #140]	; (8003070 <HAL_TIM_Base_Start_IT+0xc4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d01d      	beq.n	8003022 <HAL_TIM_Base_Start_IT+0x76>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fee:	d018      	beq.n	8003022 <HAL_TIM_Base_Start_IT+0x76>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a1f      	ldr	r2, [pc, #124]	; (8003074 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d013      	beq.n	8003022 <HAL_TIM_Base_Start_IT+0x76>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4a1e      	ldr	r2, [pc, #120]	; (8003078 <HAL_TIM_Base_Start_IT+0xcc>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d00e      	beq.n	8003022 <HAL_TIM_Base_Start_IT+0x76>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	4a1c      	ldr	r2, [pc, #112]	; (800307c <HAL_TIM_Base_Start_IT+0xd0>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d009      	beq.n	8003022 <HAL_TIM_Base_Start_IT+0x76>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	4a1b      	ldr	r2, [pc, #108]	; (8003080 <HAL_TIM_Base_Start_IT+0xd4>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d004      	beq.n	8003022 <HAL_TIM_Base_Start_IT+0x76>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a19      	ldr	r2, [pc, #100]	; (8003084 <HAL_TIM_Base_Start_IT+0xd8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d115      	bne.n	800304e <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	4b17      	ldr	r3, [pc, #92]	; (8003088 <HAL_TIM_Base_Start_IT+0xdc>)
 800302a:	4013      	ands	r3, r2
 800302c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2b06      	cmp	r3, #6
 8003032:	d015      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0xb4>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800303a:	d011      	beq.n	8003060 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f042 0201 	orr.w	r2, r2, #1
 800304a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800304c:	e008      	b.n	8003060 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f042 0201 	orr.w	r2, r2, #1
 800305c:	601a      	str	r2, [r3, #0]
 800305e:	e000      	b.n	8003062 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003060:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003062:	2300      	movs	r3, #0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3714      	adds	r7, #20
 8003068:	46bd      	mov	sp, r7
 800306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306e:	4770      	bx	lr
 8003070:	40012c00 	.word	0x40012c00
 8003074:	40000400 	.word	0x40000400
 8003078:	40000800 	.word	0x40000800
 800307c:	40000c00 	.word	0x40000c00
 8003080:	40013400 	.word	0x40013400
 8003084:	40014000 	.word	0x40014000
 8003088:	00010007 	.word	0x00010007

0800308c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b084      	sub	sp, #16
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f003 0302 	and.w	r3, r3, #2
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d020      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f003 0302 	and.w	r3, r3, #2
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d01b      	beq.n	80030f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f06f 0202 	mvn.w	r2, #2
 80030c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2201      	movs	r2, #1
 80030c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f000 f8e4 	bl	80032a4 <HAL_TIM_IC_CaptureCallback>
 80030dc:	e005      	b.n	80030ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80030de:	6878      	ldr	r0, [r7, #4]
 80030e0:	f000 f8d6 	bl	8003290 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f8e7 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2200      	movs	r2, #0
 80030ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	f003 0304 	and.w	r3, r3, #4
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d020      	beq.n	800313c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	f003 0304 	and.w	r3, r3, #4
 8003100:	2b00      	cmp	r3, #0
 8003102:	d01b      	beq.n	800313c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f06f 0204 	mvn.w	r2, #4
 800310c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	2202      	movs	r2, #2
 8003112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	699b      	ldr	r3, [r3, #24]
 800311a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800311e:	2b00      	cmp	r3, #0
 8003120:	d003      	beq.n	800312a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f000 f8be 	bl	80032a4 <HAL_TIM_IC_CaptureCallback>
 8003128:	e005      	b.n	8003136 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f8b0 	bl	8003290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f000 f8c1 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800313c:	68bb      	ldr	r3, [r7, #8]
 800313e:	f003 0308 	and.w	r3, r3, #8
 8003142:	2b00      	cmp	r3, #0
 8003144:	d020      	beq.n	8003188 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	f003 0308 	and.w	r3, r3, #8
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f06f 0208 	mvn.w	r2, #8
 8003158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	2204      	movs	r2, #4
 800315e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	69db      	ldr	r3, [r3, #28]
 8003166:	f003 0303 	and.w	r3, r3, #3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d003      	beq.n	8003176 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f000 f898 	bl	80032a4 <HAL_TIM_IC_CaptureCallback>
 8003174:	e005      	b.n	8003182 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f88a 	bl	8003290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f000 f89b 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	f003 0310 	and.w	r3, r3, #16
 800318e:	2b00      	cmp	r3, #0
 8003190:	d020      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f003 0310 	and.w	r3, r3, #16
 8003198:	2b00      	cmp	r3, #0
 800319a:	d01b      	beq.n	80031d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f06f 0210 	mvn.w	r2, #16
 80031a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2208      	movs	r2, #8
 80031aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	69db      	ldr	r3, [r3, #28]
 80031b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d003      	beq.n	80031c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f872 	bl	80032a4 <HAL_TIM_IC_CaptureCallback>
 80031c0:	e005      	b.n	80031ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 f864 	bl	8003290 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031c8:	6878      	ldr	r0, [r7, #4]
 80031ca:	f000 f875 	bl	80032b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	2200      	movs	r2, #0
 80031d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	f003 0301 	and.w	r3, r3, #1
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00c      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	f003 0301 	and.w	r3, r3, #1
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d007      	beq.n	80031f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f06f 0201 	mvn.w	r2, #1
 80031f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f7fd fdb6 	bl	8000d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d00c      	beq.n	800321c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003208:	2b00      	cmp	r3, #0
 800320a:	d007      	beq.n	800321c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003214:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f000 f906 	bl	8003428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800321c:	68bb      	ldr	r3, [r7, #8]
 800321e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00c      	beq.n	8003240 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322c:	2b00      	cmp	r3, #0
 800322e:	d007      	beq.n	8003240 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003238:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800323a:	6878      	ldr	r0, [r7, #4]
 800323c:	f000 f8fe 	bl	800343c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003240:	68bb      	ldr	r3, [r7, #8]
 8003242:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00c      	beq.n	8003264 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003250:	2b00      	cmp	r3, #0
 8003252:	d007      	beq.n	8003264 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800325c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 f834 	bl	80032cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	f003 0320 	and.w	r3, r3, #32
 800326a:	2b00      	cmp	r3, #0
 800326c:	d00c      	beq.n	8003288 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d007      	beq.n	8003288 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f06f 0220 	mvn.w	r2, #32
 8003280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f000 f8c6 	bl	8003414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003288:	bf00      	nop
 800328a:	3710      	adds	r7, #16
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003298:	bf00      	nop
 800329a:	370c      	adds	r7, #12
 800329c:	46bd      	mov	sp, r7
 800329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a2:	4770      	bx	lr

080032a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b083      	sub	sp, #12
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80032ac:	bf00      	nop
 80032ae:	370c      	adds	r7, #12
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b083      	sub	sp, #12
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr

080032cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b085      	sub	sp, #20
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	4a40      	ldr	r2, [pc, #256]	; (80033f4 <TIM_Base_SetConfig+0x114>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d013      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032fe:	d00f      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	4a3d      	ldr	r2, [pc, #244]	; (80033f8 <TIM_Base_SetConfig+0x118>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d00b      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	4a3c      	ldr	r2, [pc, #240]	; (80033fc <TIM_Base_SetConfig+0x11c>)
 800330c:	4293      	cmp	r3, r2
 800330e:	d007      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	4a3b      	ldr	r2, [pc, #236]	; (8003400 <TIM_Base_SetConfig+0x120>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d003      	beq.n	8003320 <TIM_Base_SetConfig+0x40>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <TIM_Base_SetConfig+0x124>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d108      	bne.n	8003332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <TIM_Base_SetConfig+0x114>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d01f      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003340:	d01b      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <TIM_Base_SetConfig+0x118>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d017      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <TIM_Base_SetConfig+0x11c>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	4a2a      	ldr	r2, [pc, #168]	; (8003400 <TIM_Base_SetConfig+0x120>)
 8003356:	4293      	cmp	r3, r2
 8003358:	d00f      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	4a29      	ldr	r2, [pc, #164]	; (8003404 <TIM_Base_SetConfig+0x124>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d00b      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4a28      	ldr	r2, [pc, #160]	; (8003408 <TIM_Base_SetConfig+0x128>)
 8003366:	4293      	cmp	r3, r2
 8003368:	d007      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	4a27      	ldr	r2, [pc, #156]	; (800340c <TIM_Base_SetConfig+0x12c>)
 800336e:	4293      	cmp	r3, r2
 8003370:	d003      	beq.n	800337a <TIM_Base_SetConfig+0x9a>
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	4a26      	ldr	r2, [pc, #152]	; (8003410 <TIM_Base_SetConfig+0x130>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d108      	bne.n	800338c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003380:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	68db      	ldr	r3, [r3, #12]
 8003386:	68fa      	ldr	r2, [r7, #12]
 8003388:	4313      	orrs	r3, r2
 800338a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	695b      	ldr	r3, [r3, #20]
 8003396:	4313      	orrs	r3, r2
 8003398:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	68fa      	ldr	r2, [r7, #12]
 800339e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	689a      	ldr	r2, [r3, #8]
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	681a      	ldr	r2, [r3, #0]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a10      	ldr	r2, [pc, #64]	; (80033f4 <TIM_Base_SetConfig+0x114>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d00f      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a12      	ldr	r2, [pc, #72]	; (8003404 <TIM_Base_SetConfig+0x124>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d00b      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	4a11      	ldr	r2, [pc, #68]	; (8003408 <TIM_Base_SetConfig+0x128>)
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d007      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	4a10      	ldr	r2, [pc, #64]	; (800340c <TIM_Base_SetConfig+0x12c>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d003      	beq.n	80033d8 <TIM_Base_SetConfig+0xf8>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	4a0f      	ldr	r2, [pc, #60]	; (8003410 <TIM_Base_SetConfig+0x130>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d103      	bne.n	80033e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2201      	movs	r2, #1
 80033e4:	615a      	str	r2, [r3, #20]
}
 80033e6:	bf00      	nop
 80033e8:	3714      	adds	r7, #20
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr
 80033f2:	bf00      	nop
 80033f4:	40012c00 	.word	0x40012c00
 80033f8:	40000400 	.word	0x40000400
 80033fc:	40000800 	.word	0x40000800
 8003400:	40000c00 	.word	0x40000c00
 8003404:	40013400 	.word	0x40013400
 8003408:	40014000 	.word	0x40014000
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800

08003414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003414:	b480      	push	{r7}
 8003416:	b083      	sub	sp, #12
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr

08003428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003428:	b480      	push	{r7}
 800342a:	b083      	sub	sp, #12
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003430:	bf00      	nop
 8003432:	370c      	adds	r7, #12
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800343c:	b480      	push	{r7}
 800343e:	b083      	sub	sp, #12
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003444:	bf00      	nop
 8003446:	370c      	adds	r7, #12
 8003448:	46bd      	mov	sp, r7
 800344a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344e:	4770      	bx	lr

08003450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e040      	b.n	80034e4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003466:	2b00      	cmp	r3, #0
 8003468:	d106      	bne.n	8003478 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2200      	movs	r2, #0
 800346e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f7fd fce4 	bl	8000e40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2224      	movs	r2, #36	; 0x24
 800347c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f022 0201 	bic.w	r2, r2, #1
 800348c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 fb6a 	bl	8003b70 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f8af 	bl	8003600 <UART_SetConfig>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d101      	bne.n	80034ac <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e01b      	b.n	80034e4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80034ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80034ca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	681a      	ldr	r2, [r3, #0]
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f042 0201 	orr.w	r2, r2, #1
 80034da:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80034dc:	6878      	ldr	r0, [r7, #4]
 80034de:	f000 fbe9 	bl	8003cb4 <UART_CheckIdleState>
 80034e2:	4603      	mov	r3, r0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3708      	adds	r7, #8
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b08a      	sub	sp, #40	; 0x28
 80034f0:	af02      	add	r7, sp, #8
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	603b      	str	r3, [r7, #0]
 80034f8:	4613      	mov	r3, r2
 80034fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003500:	2b20      	cmp	r3, #32
 8003502:	d178      	bne.n	80035f6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_UART_Transmit+0x24>
 800350a:	88fb      	ldrh	r3, [r7, #6]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d101      	bne.n	8003514 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003510:	2301      	movs	r3, #1
 8003512:	e071      	b.n	80035f8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2221      	movs	r2, #33	; 0x21
 8003520:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003522:	f7fd feb7 	bl	8001294 <HAL_GetTick>
 8003526:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	88fa      	ldrh	r2, [r7, #6]
 800352c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	88fa      	ldrh	r2, [r7, #6]
 8003534:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	689b      	ldr	r3, [r3, #8]
 800353c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003540:	d108      	bne.n	8003554 <HAL_UART_Transmit+0x68>
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d104      	bne.n	8003554 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800354a:	2300      	movs	r3, #0
 800354c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800354e:	68bb      	ldr	r3, [r7, #8]
 8003550:	61bb      	str	r3, [r7, #24]
 8003552:	e003      	b.n	800355c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003558:	2300      	movs	r3, #0
 800355a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800355c:	e030      	b.n	80035c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2200      	movs	r2, #0
 8003566:	2180      	movs	r1, #128	; 0x80
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 fc4b 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d004      	beq.n	800357e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2220      	movs	r2, #32
 8003578:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800357a:	2303      	movs	r3, #3
 800357c:	e03c      	b.n	80035f8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800357e:	69fb      	ldr	r3, [r7, #28]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003584:	69bb      	ldr	r3, [r7, #24]
 8003586:	881a      	ldrh	r2, [r3, #0]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003590:	b292      	uxth	r2, r2
 8003592:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	3302      	adds	r3, #2
 8003598:	61bb      	str	r3, [r7, #24]
 800359a:	e008      	b.n	80035ae <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	781a      	ldrb	r2, [r3, #0]
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	b292      	uxth	r2, r2
 80035a6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	3301      	adds	r3, #1
 80035ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035b4:	b29b      	uxth	r3, r3
 80035b6:	3b01      	subs	r3, #1
 80035b8:	b29a      	uxth	r2, r3
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1c8      	bne.n	800355e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	9300      	str	r3, [sp, #0]
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	2200      	movs	r2, #0
 80035d4:	2140      	movs	r1, #64	; 0x40
 80035d6:	68f8      	ldr	r0, [r7, #12]
 80035d8:	f000 fc14 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 80035dc:	4603      	mov	r3, r0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d004      	beq.n	80035ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2220      	movs	r2, #32
 80035e6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e005      	b.n	80035f8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	e000      	b.n	80035f8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80035f6:	2302      	movs	r3, #2
  }
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3720      	adds	r7, #32
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003604:	b08a      	sub	sp, #40	; 0x28
 8003606:	af00      	add	r7, sp, #0
 8003608:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800360a:	2300      	movs	r3, #0
 800360c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	689a      	ldr	r2, [r3, #8]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	431a      	orrs	r2, r3
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	431a      	orrs	r2, r3
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	4313      	orrs	r3, r2
 8003626:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	4ba4      	ldr	r3, [pc, #656]	; (80038c0 <UART_SetConfig+0x2c0>)
 8003630:	4013      	ands	r3, r2
 8003632:	68fa      	ldr	r2, [r7, #12]
 8003634:	6812      	ldr	r2, [r2, #0]
 8003636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003638:	430b      	orrs	r3, r1
 800363a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	68da      	ldr	r2, [r3, #12]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	4a99      	ldr	r2, [pc, #612]	; (80038c4 <UART_SetConfig+0x2c4>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d004      	beq.n	800366c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003668:	4313      	orrs	r3, r2
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a90      	ldr	r2, [pc, #576]	; (80038c8 <UART_SetConfig+0x2c8>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d126      	bne.n	80036d8 <UART_SetConfig+0xd8>
 800368a:	4b90      	ldr	r3, [pc, #576]	; (80038cc <UART_SetConfig+0x2cc>)
 800368c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003690:	f003 0303 	and.w	r3, r3, #3
 8003694:	2b03      	cmp	r3, #3
 8003696:	d81b      	bhi.n	80036d0 <UART_SetConfig+0xd0>
 8003698:	a201      	add	r2, pc, #4	; (adr r2, 80036a0 <UART_SetConfig+0xa0>)
 800369a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800369e:	bf00      	nop
 80036a0:	080036b1 	.word	0x080036b1
 80036a4:	080036c1 	.word	0x080036c1
 80036a8:	080036b9 	.word	0x080036b9
 80036ac:	080036c9 	.word	0x080036c9
 80036b0:	2301      	movs	r3, #1
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b6:	e116      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80036b8:	2302      	movs	r3, #2
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036be:	e112      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80036c0:	2304      	movs	r3, #4
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c6:	e10e      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80036c8:	2308      	movs	r3, #8
 80036ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ce:	e10a      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80036d0:	2310      	movs	r3, #16
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d6:	e106      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a7c      	ldr	r2, [pc, #496]	; (80038d0 <UART_SetConfig+0x2d0>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d138      	bne.n	8003754 <UART_SetConfig+0x154>
 80036e2:	4b7a      	ldr	r3, [pc, #488]	; (80038cc <UART_SetConfig+0x2cc>)
 80036e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036e8:	f003 030c 	and.w	r3, r3, #12
 80036ec:	2b0c      	cmp	r3, #12
 80036ee:	d82d      	bhi.n	800374c <UART_SetConfig+0x14c>
 80036f0:	a201      	add	r2, pc, #4	; (adr r2, 80036f8 <UART_SetConfig+0xf8>)
 80036f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036f6:	bf00      	nop
 80036f8:	0800372d 	.word	0x0800372d
 80036fc:	0800374d 	.word	0x0800374d
 8003700:	0800374d 	.word	0x0800374d
 8003704:	0800374d 	.word	0x0800374d
 8003708:	0800373d 	.word	0x0800373d
 800370c:	0800374d 	.word	0x0800374d
 8003710:	0800374d 	.word	0x0800374d
 8003714:	0800374d 	.word	0x0800374d
 8003718:	08003735 	.word	0x08003735
 800371c:	0800374d 	.word	0x0800374d
 8003720:	0800374d 	.word	0x0800374d
 8003724:	0800374d 	.word	0x0800374d
 8003728:	08003745 	.word	0x08003745
 800372c:	2300      	movs	r3, #0
 800372e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003732:	e0d8      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003734:	2302      	movs	r3, #2
 8003736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800373a:	e0d4      	b.n	80038e6 <UART_SetConfig+0x2e6>
 800373c:	2304      	movs	r3, #4
 800373e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003742:	e0d0      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003744:	2308      	movs	r3, #8
 8003746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800374a:	e0cc      	b.n	80038e6 <UART_SetConfig+0x2e6>
 800374c:	2310      	movs	r3, #16
 800374e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003752:	e0c8      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	4a5e      	ldr	r2, [pc, #376]	; (80038d4 <UART_SetConfig+0x2d4>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d125      	bne.n	80037aa <UART_SetConfig+0x1aa>
 800375e:	4b5b      	ldr	r3, [pc, #364]	; (80038cc <UART_SetConfig+0x2cc>)
 8003760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003764:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003768:	2b30      	cmp	r3, #48	; 0x30
 800376a:	d016      	beq.n	800379a <UART_SetConfig+0x19a>
 800376c:	2b30      	cmp	r3, #48	; 0x30
 800376e:	d818      	bhi.n	80037a2 <UART_SetConfig+0x1a2>
 8003770:	2b20      	cmp	r3, #32
 8003772:	d00a      	beq.n	800378a <UART_SetConfig+0x18a>
 8003774:	2b20      	cmp	r3, #32
 8003776:	d814      	bhi.n	80037a2 <UART_SetConfig+0x1a2>
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <UART_SetConfig+0x182>
 800377c:	2b10      	cmp	r3, #16
 800377e:	d008      	beq.n	8003792 <UART_SetConfig+0x192>
 8003780:	e00f      	b.n	80037a2 <UART_SetConfig+0x1a2>
 8003782:	2300      	movs	r3, #0
 8003784:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003788:	e0ad      	b.n	80038e6 <UART_SetConfig+0x2e6>
 800378a:	2302      	movs	r3, #2
 800378c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003790:	e0a9      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003792:	2304      	movs	r3, #4
 8003794:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003798:	e0a5      	b.n	80038e6 <UART_SetConfig+0x2e6>
 800379a:	2308      	movs	r3, #8
 800379c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a0:	e0a1      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80037a2:	2310      	movs	r3, #16
 80037a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037a8:	e09d      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a4a      	ldr	r2, [pc, #296]	; (80038d8 <UART_SetConfig+0x2d8>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d125      	bne.n	8003800 <UART_SetConfig+0x200>
 80037b4:	4b45      	ldr	r3, [pc, #276]	; (80038cc <UART_SetConfig+0x2cc>)
 80037b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80037be:	2bc0      	cmp	r3, #192	; 0xc0
 80037c0:	d016      	beq.n	80037f0 <UART_SetConfig+0x1f0>
 80037c2:	2bc0      	cmp	r3, #192	; 0xc0
 80037c4:	d818      	bhi.n	80037f8 <UART_SetConfig+0x1f8>
 80037c6:	2b80      	cmp	r3, #128	; 0x80
 80037c8:	d00a      	beq.n	80037e0 <UART_SetConfig+0x1e0>
 80037ca:	2b80      	cmp	r3, #128	; 0x80
 80037cc:	d814      	bhi.n	80037f8 <UART_SetConfig+0x1f8>
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d002      	beq.n	80037d8 <UART_SetConfig+0x1d8>
 80037d2:	2b40      	cmp	r3, #64	; 0x40
 80037d4:	d008      	beq.n	80037e8 <UART_SetConfig+0x1e8>
 80037d6:	e00f      	b.n	80037f8 <UART_SetConfig+0x1f8>
 80037d8:	2300      	movs	r3, #0
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037de:	e082      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80037e0:	2302      	movs	r3, #2
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e6:	e07e      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80037e8:	2304      	movs	r3, #4
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e07a      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80037f0:	2308      	movs	r3, #8
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e076      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80037f8:	2310      	movs	r3, #16
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e072      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a35      	ldr	r2, [pc, #212]	; (80038dc <UART_SetConfig+0x2dc>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d12a      	bne.n	8003860 <UART_SetConfig+0x260>
 800380a:	4b30      	ldr	r3, [pc, #192]	; (80038cc <UART_SetConfig+0x2cc>)
 800380c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003810:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003814:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003818:	d01a      	beq.n	8003850 <UART_SetConfig+0x250>
 800381a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800381e:	d81b      	bhi.n	8003858 <UART_SetConfig+0x258>
 8003820:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003824:	d00c      	beq.n	8003840 <UART_SetConfig+0x240>
 8003826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800382a:	d815      	bhi.n	8003858 <UART_SetConfig+0x258>
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <UART_SetConfig+0x238>
 8003830:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003834:	d008      	beq.n	8003848 <UART_SetConfig+0x248>
 8003836:	e00f      	b.n	8003858 <UART_SetConfig+0x258>
 8003838:	2300      	movs	r3, #0
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383e:	e052      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003840:	2302      	movs	r3, #2
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e04e      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003848:	2304      	movs	r3, #4
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e04a      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003850:	2308      	movs	r3, #8
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e046      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003858:	2310      	movs	r3, #16
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e042      	b.n	80038e6 <UART_SetConfig+0x2e6>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <UART_SetConfig+0x2c4>)
 8003866:	4293      	cmp	r3, r2
 8003868:	d13a      	bne.n	80038e0 <UART_SetConfig+0x2e0>
 800386a:	4b18      	ldr	r3, [pc, #96]	; (80038cc <UART_SetConfig+0x2cc>)
 800386c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003870:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003874:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003878:	d01a      	beq.n	80038b0 <UART_SetConfig+0x2b0>
 800387a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800387e:	d81b      	bhi.n	80038b8 <UART_SetConfig+0x2b8>
 8003880:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003884:	d00c      	beq.n	80038a0 <UART_SetConfig+0x2a0>
 8003886:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800388a:	d815      	bhi.n	80038b8 <UART_SetConfig+0x2b8>
 800388c:	2b00      	cmp	r3, #0
 800388e:	d003      	beq.n	8003898 <UART_SetConfig+0x298>
 8003890:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003894:	d008      	beq.n	80038a8 <UART_SetConfig+0x2a8>
 8003896:	e00f      	b.n	80038b8 <UART_SetConfig+0x2b8>
 8003898:	2300      	movs	r3, #0
 800389a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800389e:	e022      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80038a0:	2302      	movs	r3, #2
 80038a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038a6:	e01e      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80038a8:	2304      	movs	r3, #4
 80038aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038ae:	e01a      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80038b0:	2308      	movs	r3, #8
 80038b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038b6:	e016      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80038b8:	2310      	movs	r3, #16
 80038ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80038be:	e012      	b.n	80038e6 <UART_SetConfig+0x2e6>
 80038c0:	efff69f3 	.word	0xefff69f3
 80038c4:	40008000 	.word	0x40008000
 80038c8:	40013800 	.word	0x40013800
 80038cc:	40021000 	.word	0x40021000
 80038d0:	40004400 	.word	0x40004400
 80038d4:	40004800 	.word	0x40004800
 80038d8:	40004c00 	.word	0x40004c00
 80038dc:	40005000 	.word	0x40005000
 80038e0:	2310      	movs	r3, #16
 80038e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a9f      	ldr	r2, [pc, #636]	; (8003b68 <UART_SetConfig+0x568>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	d17a      	bne.n	80039e6 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80038f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80038f4:	2b08      	cmp	r3, #8
 80038f6:	d824      	bhi.n	8003942 <UART_SetConfig+0x342>
 80038f8:	a201      	add	r2, pc, #4	; (adr r2, 8003900 <UART_SetConfig+0x300>)
 80038fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fe:	bf00      	nop
 8003900:	08003925 	.word	0x08003925
 8003904:	08003943 	.word	0x08003943
 8003908:	0800392d 	.word	0x0800392d
 800390c:	08003943 	.word	0x08003943
 8003910:	08003933 	.word	0x08003933
 8003914:	08003943 	.word	0x08003943
 8003918:	08003943 	.word	0x08003943
 800391c:	08003943 	.word	0x08003943
 8003920:	0800393b 	.word	0x0800393b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003924:	f7fe fd70 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8003928:	61f8      	str	r0, [r7, #28]
        break;
 800392a:	e010      	b.n	800394e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800392c:	4b8f      	ldr	r3, [pc, #572]	; (8003b6c <UART_SetConfig+0x56c>)
 800392e:	61fb      	str	r3, [r7, #28]
        break;
 8003930:	e00d      	b.n	800394e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003932:	f7fe fcd1 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8003936:	61f8      	str	r0, [r7, #28]
        break;
 8003938:	e009      	b.n	800394e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800393a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800393e:	61fb      	str	r3, [r7, #28]
        break;
 8003940:	e005      	b.n	800394e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8003942:	2300      	movs	r3, #0
 8003944:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800394c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800394e:	69fb      	ldr	r3, [r7, #28]
 8003950:	2b00      	cmp	r3, #0
 8003952:	f000 80fb 	beq.w	8003b4c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	685a      	ldr	r2, [r3, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	4413      	add	r3, r2
 8003960:	69fa      	ldr	r2, [r7, #28]
 8003962:	429a      	cmp	r2, r3
 8003964:	d305      	bcc.n	8003972 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800396c:	69fa      	ldr	r2, [r7, #28]
 800396e:	429a      	cmp	r2, r3
 8003970:	d903      	bls.n	800397a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003978:	e0e8      	b.n	8003b4c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	2200      	movs	r2, #0
 800397e:	461c      	mov	r4, r3
 8003980:	4615      	mov	r5, r2
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	022b      	lsls	r3, r5, #8
 800398c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003990:	0222      	lsls	r2, r4, #8
 8003992:	68f9      	ldr	r1, [r7, #12]
 8003994:	6849      	ldr	r1, [r1, #4]
 8003996:	0849      	lsrs	r1, r1, #1
 8003998:	2000      	movs	r0, #0
 800399a:	4688      	mov	r8, r1
 800399c:	4681      	mov	r9, r0
 800399e:	eb12 0a08 	adds.w	sl, r2, r8
 80039a2:	eb43 0b09 	adc.w	fp, r3, r9
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	603b      	str	r3, [r7, #0]
 80039ae:	607a      	str	r2, [r7, #4]
 80039b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80039b4:	4650      	mov	r0, sl
 80039b6:	4659      	mov	r1, fp
 80039b8:	f7fc fc5a 	bl	8000270 <__aeabi_uldivmod>
 80039bc:	4602      	mov	r2, r0
 80039be:	460b      	mov	r3, r1
 80039c0:	4613      	mov	r3, r2
 80039c2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80039ca:	d308      	bcc.n	80039de <UART_SetConfig+0x3de>
 80039cc:	69bb      	ldr	r3, [r7, #24]
 80039ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80039d2:	d204      	bcs.n	80039de <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	69ba      	ldr	r2, [r7, #24]
 80039da:	60da      	str	r2, [r3, #12]
 80039dc:	e0b6      	b.n	8003b4c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80039e4:	e0b2      	b.n	8003b4c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	69db      	ldr	r3, [r3, #28]
 80039ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039ee:	d15e      	bne.n	8003aae <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 80039f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80039f4:	2b08      	cmp	r3, #8
 80039f6:	d828      	bhi.n	8003a4a <UART_SetConfig+0x44a>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <UART_SetConfig+0x400>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a25 	.word	0x08003a25
 8003a04:	08003a2d 	.word	0x08003a2d
 8003a08:	08003a35 	.word	0x08003a35
 8003a0c:	08003a4b 	.word	0x08003a4b
 8003a10:	08003a3b 	.word	0x08003a3b
 8003a14:	08003a4b 	.word	0x08003a4b
 8003a18:	08003a4b 	.word	0x08003a4b
 8003a1c:	08003a4b 	.word	0x08003a4b
 8003a20:	08003a43 	.word	0x08003a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe fcf0 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8003a28:	61f8      	str	r0, [r7, #28]
        break;
 8003a2a:	e014      	b.n	8003a56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a2c:	f7fe fd02 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8003a30:	61f8      	str	r0, [r7, #28]
        break;
 8003a32:	e010      	b.n	8003a56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a34:	4b4d      	ldr	r3, [pc, #308]	; (8003b6c <UART_SetConfig+0x56c>)
 8003a36:	61fb      	str	r3, [r7, #28]
        break;
 8003a38:	e00d      	b.n	8003a56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a3a:	f7fe fc4d 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8003a3e:	61f8      	str	r0, [r7, #28]
        break;
 8003a40:	e009      	b.n	8003a56 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a46:	61fb      	str	r3, [r7, #28]
        break;
 8003a48:	e005      	b.n	8003a56 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d077      	beq.n	8003b4c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	005a      	lsls	r2, r3, #1
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	085b      	lsrs	r3, r3, #1
 8003a66:	441a      	add	r2, r3
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a70:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	2b0f      	cmp	r3, #15
 8003a76:	d916      	bls.n	8003aa6 <UART_SetConfig+0x4a6>
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a7e:	d212      	bcs.n	8003aa6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a80:	69bb      	ldr	r3, [r7, #24]
 8003a82:	b29b      	uxth	r3, r3
 8003a84:	f023 030f 	bic.w	r3, r3, #15
 8003a88:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	085b      	lsrs	r3, r3, #1
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	b29a      	uxth	r2, r3
 8003a96:	8afb      	ldrh	r3, [r7, #22]
 8003a98:	4313      	orrs	r3, r2
 8003a9a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	8afa      	ldrh	r2, [r7, #22]
 8003aa2:	60da      	str	r2, [r3, #12]
 8003aa4:	e052      	b.n	8003b4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003aac:	e04e      	b.n	8003b4c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003aae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003ab2:	2b08      	cmp	r3, #8
 8003ab4:	d827      	bhi.n	8003b06 <UART_SetConfig+0x506>
 8003ab6:	a201      	add	r2, pc, #4	; (adr r2, 8003abc <UART_SetConfig+0x4bc>)
 8003ab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003abc:	08003ae1 	.word	0x08003ae1
 8003ac0:	08003ae9 	.word	0x08003ae9
 8003ac4:	08003af1 	.word	0x08003af1
 8003ac8:	08003b07 	.word	0x08003b07
 8003acc:	08003af7 	.word	0x08003af7
 8003ad0:	08003b07 	.word	0x08003b07
 8003ad4:	08003b07 	.word	0x08003b07
 8003ad8:	08003b07 	.word	0x08003b07
 8003adc:	08003aff 	.word	0x08003aff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ae0:	f7fe fc92 	bl	8002408 <HAL_RCC_GetPCLK1Freq>
 8003ae4:	61f8      	str	r0, [r7, #28]
        break;
 8003ae6:	e014      	b.n	8003b12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ae8:	f7fe fca4 	bl	8002434 <HAL_RCC_GetPCLK2Freq>
 8003aec:	61f8      	str	r0, [r7, #28]
        break;
 8003aee:	e010      	b.n	8003b12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003af0:	4b1e      	ldr	r3, [pc, #120]	; (8003b6c <UART_SetConfig+0x56c>)
 8003af2:	61fb      	str	r3, [r7, #28]
        break;
 8003af4:	e00d      	b.n	8003b12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003af6:	f7fe fbef 	bl	80022d8 <HAL_RCC_GetSysClockFreq>
 8003afa:	61f8      	str	r0, [r7, #28]
        break;
 8003afc:	e009      	b.n	8003b12 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003afe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b02:	61fb      	str	r3, [r7, #28]
        break;
 8003b04:	e005      	b.n	8003b12 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003b06:	2300      	movs	r3, #0
 8003b08:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003b10:	bf00      	nop
    }

    if (pclk != 0U)
 8003b12:	69fb      	ldr	r3, [r7, #28]
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d019      	beq.n	8003b4c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	085a      	lsrs	r2, r3, #1
 8003b1e:	69fb      	ldr	r3, [r7, #28]
 8003b20:	441a      	add	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b2a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	2b0f      	cmp	r3, #15
 8003b30:	d909      	bls.n	8003b46 <UART_SetConfig+0x546>
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b38:	d205      	bcs.n	8003b46 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003b3a:	69bb      	ldr	r3, [r7, #24]
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	60da      	str	r2, [r3, #12]
 8003b44:	e002      	b.n	8003b4c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2200      	movs	r2, #0
 8003b56:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003b58:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b5c:	4618      	mov	r0, r3
 8003b5e:	3728      	adds	r7, #40	; 0x28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b66:	bf00      	nop
 8003b68:	40008000 	.word	0x40008000
 8003b6c:	00f42400 	.word	0x00f42400

08003b70 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0301 	and.w	r3, r3, #1
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0302 	and.w	r3, r3, #2
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0304 	and.w	r3, r3, #4
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0310 	and.w	r3, r3, #16
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d00a      	beq.n	8003c22 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f003 0320 	and.w	r3, r3, #32
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	689b      	ldr	r3, [r3, #8]
 8003c34:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01a      	beq.n	8003c86 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	430a      	orrs	r2, r1
 8003c64:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6e:	d10a      	bne.n	8003c86 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	430a      	orrs	r2, r1
 8003c84:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00a      	beq.n	8003ca8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	430a      	orrs	r2, r1
 8003ca6:	605a      	str	r2, [r3, #4]
  }
}
 8003ca8:	bf00      	nop
 8003caa:	370c      	adds	r7, #12
 8003cac:	46bd      	mov	sp, r7
 8003cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb2:	4770      	bx	lr

08003cb4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b098      	sub	sp, #96	; 0x60
 8003cb8:	af02      	add	r7, sp, #8
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003cc4:	f7fd fae6 	bl	8001294 <HAL_GetTick>
 8003cc8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0308 	and.w	r3, r3, #8
 8003cd4:	2b08      	cmp	r3, #8
 8003cd6:	d12e      	bne.n	8003d36 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cd8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cdc:	9300      	str	r3, [sp, #0]
 8003cde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 f88c 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d021      	beq.n	8003d36 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cfa:	e853 3f00 	ldrex	r3, [r3]
 8003cfe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003d00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d06:	653b      	str	r3, [r7, #80]	; 0x50
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d10:	647b      	str	r3, [r7, #68]	; 0x44
 8003d12:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d14:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003d16:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003d18:	e841 2300 	strex	r3, r2, [r1]
 8003d1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003d1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1e6      	bne.n	8003cf2 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e062      	b.n	8003dfc <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f003 0304 	and.w	r3, r3, #4
 8003d40:	2b04      	cmp	r3, #4
 8003d42:	d149      	bne.n	8003dd8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d48:	9300      	str	r3, [sp, #0]
 8003d4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f000 f856 	bl	8003e04 <UART_WaitOnFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d03c      	beq.n	8003dd8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	623b      	str	r3, [r7, #32]
   return(result);
 8003d6c:	6a3b      	ldr	r3, [r7, #32]
 8003d6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d7c:	633b      	str	r3, [r7, #48]	; 0x30
 8003d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e6      	bne.n	8003d5e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	3308      	adds	r3, #8
 8003d96:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	e853 3f00 	ldrex	r3, [r3]
 8003d9e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	64bb      	str	r3, [r7, #72]	; 0x48
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	3308      	adds	r3, #8
 8003dae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003db0:	61fa      	str	r2, [r7, #28]
 8003db2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003db4:	69b9      	ldr	r1, [r7, #24]
 8003db6:	69fa      	ldr	r2, [r7, #28]
 8003db8:	e841 2300 	strex	r3, r2, [r1]
 8003dbc:	617b      	str	r3, [r7, #20]
   return(result);
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d1e5      	bne.n	8003d90 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	e011      	b.n	8003dfc <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2220      	movs	r2, #32
 8003ddc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2220      	movs	r2, #32
 8003de2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	2200      	movs	r2, #0
 8003dea:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003dfa:	2300      	movs	r3, #0
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3758      	adds	r7, #88	; 0x58
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	603b      	str	r3, [r7, #0]
 8003e10:	4613      	mov	r3, r2
 8003e12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e14:	e049      	b.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e1c:	d045      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e1e:	f7fd fa39 	bl	8001294 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d302      	bcc.n	8003e34 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e2e:	69bb      	ldr	r3, [r7, #24]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003e34:	2303      	movs	r3, #3
 8003e36:	e048      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d031      	beq.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	69db      	ldr	r3, [r3, #28]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b08      	cmp	r3, #8
 8003e52:	d110      	bne.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	2208      	movs	r2, #8
 8003e5a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f838 	bl	8003ed2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2208      	movs	r2, #8
 8003e66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003e72:	2301      	movs	r3, #1
 8003e74:	e029      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e84:	d111      	bne.n	8003eaa <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e8e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e90:	68f8      	ldr	r0, [r7, #12]
 8003e92:	f000 f81e 	bl	8003ed2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e00f      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	69da      	ldr	r2, [r3, #28]
 8003eb0:	68bb      	ldr	r3, [r7, #8]
 8003eb2:	4013      	ands	r3, r2
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	429a      	cmp	r2, r3
 8003eb8:	bf0c      	ite	eq
 8003eba:	2301      	moveq	r3, #1
 8003ebc:	2300      	movne	r3, #0
 8003ebe:	b2db      	uxtb	r3, r3
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	79fb      	ldrb	r3, [r7, #7]
 8003ec4:	429a      	cmp	r2, r3
 8003ec6:	d0a6      	beq.n	8003e16 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ec8:	2300      	movs	r3, #0
}
 8003eca:	4618      	mov	r0, r3
 8003ecc:	3710      	adds	r7, #16
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	bd80      	pop	{r7, pc}

08003ed2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003ed2:	b480      	push	{r7}
 8003ed4:	b095      	sub	sp, #84	; 0x54
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ee2:	e853 3f00 	ldrex	r3, [r3]
 8003ee6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003eee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	461a      	mov	r2, r3
 8003ef6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ef8:	643b      	str	r3, [r7, #64]	; 0x40
 8003efa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003efc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003efe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003f00:	e841 2300 	strex	r3, r2, [r1]
 8003f04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d1e6      	bne.n	8003eda <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	3308      	adds	r3, #8
 8003f12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f14:	6a3b      	ldr	r3, [r7, #32]
 8003f16:	e853 3f00 	ldrex	r3, [r3]
 8003f1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	f023 0301 	bic.w	r3, r3, #1
 8003f22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	3308      	adds	r3, #8
 8003f2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003f2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003f34:	e841 2300 	strex	r3, r2, [r1]
 8003f38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d1e5      	bne.n	8003f0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d118      	bne.n	8003f7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	e853 3f00 	ldrex	r3, [r3]
 8003f54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	f023 0310 	bic.w	r3, r3, #16
 8003f5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f66:	61bb      	str	r3, [r7, #24]
 8003f68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f6a:	6979      	ldr	r1, [r7, #20]
 8003f6c:	69ba      	ldr	r2, [r7, #24]
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	613b      	str	r3, [r7, #16]
   return(result);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e6      	bne.n	8003f48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f8e:	bf00      	nop
 8003f90:	3754      	adds	r7, #84	; 0x54
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr
	...

08003f9c <__NVIC_SetPriority>:
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b083      	sub	sp, #12
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	6039      	str	r1, [r7, #0]
 8003fa6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fa8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	db0a      	blt.n	8003fc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	b2da      	uxtb	r2, r3
 8003fb4:	490c      	ldr	r1, [pc, #48]	; (8003fe8 <__NVIC_SetPriority+0x4c>)
 8003fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fba:	0112      	lsls	r2, r2, #4
 8003fbc:	b2d2      	uxtb	r2, r2
 8003fbe:	440b      	add	r3, r1
 8003fc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003fc4:	e00a      	b.n	8003fdc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	b2da      	uxtb	r2, r3
 8003fca:	4908      	ldr	r1, [pc, #32]	; (8003fec <__NVIC_SetPriority+0x50>)
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	3b04      	subs	r3, #4
 8003fd4:	0112      	lsls	r2, r2, #4
 8003fd6:	b2d2      	uxtb	r2, r2
 8003fd8:	440b      	add	r3, r1
 8003fda:	761a      	strb	r2, [r3, #24]
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr
 8003fe8:	e000e100 	.word	0xe000e100
 8003fec:	e000ed00 	.word	0xe000ed00

08003ff0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ff4:	4b05      	ldr	r3, [pc, #20]	; (800400c <SysTick_Handler+0x1c>)
 8003ff6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ff8:	f002 fb4c 	bl	8006694 <xTaskGetSchedulerState>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b01      	cmp	r3, #1
 8004000:	d001      	beq.n	8004006 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004002:	f003 fb19 	bl	8007638 <xPortSysTickHandler>
  }
}
 8004006:	bf00      	nop
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	e000e010 	.word	0xe000e010

08004010 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004010:	b580      	push	{r7, lr}
 8004012:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004014:	2100      	movs	r1, #0
 8004016:	f06f 0004 	mvn.w	r0, #4
 800401a:	f7ff ffbf 	bl	8003f9c <__NVIC_SetPriority>
#endif
}
 800401e:	bf00      	nop
 8004020:	bd80      	pop	{r7, pc}
	...

08004024 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800402a:	f3ef 8305 	mrs	r3, IPSR
 800402e:	603b      	str	r3, [r7, #0]
  return(result);
 8004030:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004032:	2b00      	cmp	r3, #0
 8004034:	d003      	beq.n	800403e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004036:	f06f 0305 	mvn.w	r3, #5
 800403a:	607b      	str	r3, [r7, #4]
 800403c:	e00c      	b.n	8004058 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800403e:	4b0a      	ldr	r3, [pc, #40]	; (8004068 <osKernelInitialize+0x44>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2b00      	cmp	r3, #0
 8004044:	d105      	bne.n	8004052 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <osKernelInitialize+0x44>)
 8004048:	2201      	movs	r2, #1
 800404a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800404c:	2300      	movs	r3, #0
 800404e:	607b      	str	r3, [r7, #4]
 8004050:	e002      	b.n	8004058 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004052:	f04f 33ff 	mov.w	r3, #4294967295
 8004056:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004058:	687b      	ldr	r3, [r7, #4]
}
 800405a:	4618      	mov	r0, r3
 800405c:	370c      	adds	r7, #12
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	200001dc 	.word	0x200001dc

0800406c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800406c:	b580      	push	{r7, lr}
 800406e:	b082      	sub	sp, #8
 8004070:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004072:	f3ef 8305 	mrs	r3, IPSR
 8004076:	603b      	str	r3, [r7, #0]
  return(result);
 8004078:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <osKernelStart+0x1a>
    stat = osErrorISR;
 800407e:	f06f 0305 	mvn.w	r3, #5
 8004082:	607b      	str	r3, [r7, #4]
 8004084:	e010      	b.n	80040a8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004086:	4b0b      	ldr	r3, [pc, #44]	; (80040b4 <osKernelStart+0x48>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	2b01      	cmp	r3, #1
 800408c:	d109      	bne.n	80040a2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800408e:	f7ff ffbf 	bl	8004010 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004092:	4b08      	ldr	r3, [pc, #32]	; (80040b4 <osKernelStart+0x48>)
 8004094:	2202      	movs	r2, #2
 8004096:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004098:	f001 fea0 	bl	8005ddc <vTaskStartScheduler>
      stat = osOK;
 800409c:	2300      	movs	r3, #0
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	e002      	b.n	80040a8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80040a2:	f04f 33ff 	mov.w	r3, #4294967295
 80040a6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040a8:	687b      	ldr	r3, [r7, #4]
}
 80040aa:	4618      	mov	r0, r3
 80040ac:	3708      	adds	r7, #8
 80040ae:	46bd      	mov	sp, r7
 80040b0:	bd80      	pop	{r7, pc}
 80040b2:	bf00      	nop
 80040b4:	200001dc 	.word	0x200001dc

080040b8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b08e      	sub	sp, #56	; 0x38
 80040bc:	af04      	add	r7, sp, #16
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	60b9      	str	r1, [r7, #8]
 80040c2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040c8:	f3ef 8305 	mrs	r3, IPSR
 80040cc:	617b      	str	r3, [r7, #20]
  return(result);
 80040ce:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d17e      	bne.n	80041d2 <osThreadNew+0x11a>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d07b      	beq.n	80041d2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80040da:	2380      	movs	r3, #128	; 0x80
 80040dc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80040de:	2318      	movs	r3, #24
 80040e0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80040e6:	f04f 33ff 	mov.w	r3, #4294967295
 80040ea:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d045      	beq.n	800417e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d002      	beq.n	8004100 <osThreadNew+0x48>
        name = attr->name;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	699b      	ldr	r3, [r3, #24]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	699b      	ldr	r3, [r3, #24]
 800410c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800410e:	69fb      	ldr	r3, [r7, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d008      	beq.n	8004126 <osThreadNew+0x6e>
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	2b38      	cmp	r3, #56	; 0x38
 8004118:	d805      	bhi.n	8004126 <osThreadNew+0x6e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	f003 0301 	and.w	r3, r3, #1
 8004122:	2b00      	cmp	r3, #0
 8004124:	d001      	beq.n	800412a <osThreadNew+0x72>
        return (NULL);
 8004126:	2300      	movs	r3, #0
 8004128:	e054      	b.n	80041d4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	695b      	ldr	r3, [r3, #20]
 800412e:	2b00      	cmp	r3, #0
 8004130:	d003      	beq.n	800413a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	089b      	lsrs	r3, r3, #2
 8004138:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00e      	beq.n	8004160 <osThreadNew+0xa8>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	68db      	ldr	r3, [r3, #12]
 8004146:	2ba7      	cmp	r3, #167	; 0xa7
 8004148:	d90a      	bls.n	8004160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800414e:	2b00      	cmp	r3, #0
 8004150:	d006      	beq.n	8004160 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	695b      	ldr	r3, [r3, #20]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d002      	beq.n	8004160 <osThreadNew+0xa8>
        mem = 1;
 800415a:	2301      	movs	r3, #1
 800415c:	61bb      	str	r3, [r7, #24]
 800415e:	e010      	b.n	8004182 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d10c      	bne.n	8004182 <osThreadNew+0xca>
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	68db      	ldr	r3, [r3, #12]
 800416c:	2b00      	cmp	r3, #0
 800416e:	d108      	bne.n	8004182 <osThreadNew+0xca>
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d104      	bne.n	8004182 <osThreadNew+0xca>
          mem = 0;
 8004178:	2300      	movs	r3, #0
 800417a:	61bb      	str	r3, [r7, #24]
 800417c:	e001      	b.n	8004182 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004182:	69bb      	ldr	r3, [r7, #24]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d110      	bne.n	80041aa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800418c:	687a      	ldr	r2, [r7, #4]
 800418e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004190:	9202      	str	r2, [sp, #8]
 8004192:	9301      	str	r3, [sp, #4]
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	9300      	str	r3, [sp, #0]
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	6a3a      	ldr	r2, [r7, #32]
 800419c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f001 fc30 	bl	8005a04 <xTaskCreateStatic>
 80041a4:	4603      	mov	r3, r0
 80041a6:	613b      	str	r3, [r7, #16]
 80041a8:	e013      	b.n	80041d2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80041aa:	69bb      	ldr	r3, [r7, #24]
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d110      	bne.n	80041d2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	b29a      	uxth	r2, r3
 80041b4:	f107 0310 	add.w	r3, r7, #16
 80041b8:	9301      	str	r3, [sp, #4]
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	9300      	str	r3, [sp, #0]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f001 fc7b 	bl	8005abe <xTaskCreate>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d001      	beq.n	80041d2 <osThreadNew+0x11a>
            hTask = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80041d2:	693b      	ldr	r3, [r7, #16]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3728      	adds	r7, #40	; 0x28
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}

080041dc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041e4:	f3ef 8305 	mrs	r3, IPSR
 80041e8:	60bb      	str	r3, [r7, #8]
  return(result);
 80041ea:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d003      	beq.n	80041f8 <osDelay+0x1c>
    stat = osErrorISR;
 80041f0:	f06f 0305 	mvn.w	r3, #5
 80041f4:	60fb      	str	r3, [r7, #12]
 80041f6:	e007      	b.n	8004208 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d002      	beq.n	8004208 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f001 fdb6 	bl	8005d74 <vTaskDelay>
    }
  }

  return (stat);
 8004208:	68fb      	ldr	r3, [r7, #12]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}

08004212 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004212:	b580      	push	{r7, lr}
 8004214:	b084      	sub	sp, #16
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f003 f829 	bl	8007272 <pvTimerGetTimerID>
 8004220:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d005      	beq.n	8004234 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	6852      	ldr	r2, [r2, #4]
 8004230:	4610      	mov	r0, r2
 8004232:	4798      	blx	r3
  }
}
 8004234:	bf00      	nop
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 800423c:	b580      	push	{r7, lr}
 800423e:	b08c      	sub	sp, #48	; 0x30
 8004240:	af02      	add	r7, sp, #8
 8004242:	60f8      	str	r0, [r7, #12]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	603b      	str	r3, [r7, #0]
 8004248:	460b      	mov	r3, r1
 800424a:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 800424c:	2300      	movs	r3, #0
 800424e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004250:	f3ef 8305 	mrs	r3, IPSR
 8004254:	613b      	str	r3, [r7, #16]
  return(result);
 8004256:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004258:	2b00      	cmp	r3, #0
 800425a:	d163      	bne.n	8004324 <osTimerNew+0xe8>
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d060      	beq.n	8004324 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004262:	2008      	movs	r0, #8
 8004264:	f003 fa78 	bl	8007758 <pvPortMalloc>
 8004268:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d059      	beq.n	8004324 <osTimerNew+0xe8>
      callb->func = func;
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	687a      	ldr	r2, [r7, #4]
 800427a:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 800427c:	7afb      	ldrb	r3, [r7, #11]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d102      	bne.n	8004288 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004282:	2300      	movs	r3, #0
 8004284:	61fb      	str	r3, [r7, #28]
 8004286:	e001      	b.n	800428c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004288:	2301      	movs	r3, #1
 800428a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 800428c:	f04f 33ff 	mov.w	r3, #4294967295
 8004290:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004292:	2300      	movs	r3, #0
 8004294:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01c      	beq.n	80042d6 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <osTimerNew+0x6e>
          name = attr->name;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d006      	beq.n	80042c0 <osTimerNew+0x84>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	2b2b      	cmp	r3, #43	; 0x2b
 80042b8:	d902      	bls.n	80042c0 <osTimerNew+0x84>
          mem = 1;
 80042ba:	2301      	movs	r3, #1
 80042bc:	61bb      	str	r3, [r7, #24]
 80042be:	e00c      	b.n	80042da <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80042c0:	683b      	ldr	r3, [r7, #0]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <osTimerNew+0x9e>
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	68db      	ldr	r3, [r3, #12]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d104      	bne.n	80042da <osTimerNew+0x9e>
            mem = 0;
 80042d0:	2300      	movs	r3, #0
 80042d2:	61bb      	str	r3, [r7, #24]
 80042d4:	e001      	b.n	80042da <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 80042d6:	2300      	movs	r3, #0
 80042d8:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 80042da:	69bb      	ldr	r3, [r7, #24]
 80042dc:	2b01      	cmp	r3, #1
 80042de:	d10c      	bne.n	80042fa <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	4b12      	ldr	r3, [pc, #72]	; (8004330 <osTimerNew+0xf4>)
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	2101      	movs	r1, #1
 80042f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042f2:	f002 fc16 	bl	8006b22 <xTimerCreateStatic>
 80042f6:	6238      	str	r0, [r7, #32]
 80042f8:	e00b      	b.n	8004312 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 80042fa:	69bb      	ldr	r3, [r7, #24]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d108      	bne.n	8004312 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004300:	4b0b      	ldr	r3, [pc, #44]	; (8004330 <osTimerNew+0xf4>)
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	2101      	movs	r1, #1
 800430a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800430c:	f002 fbe8 	bl	8006ae0 <xTimerCreate>
 8004310:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004312:	6a3b      	ldr	r3, [r7, #32]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d105      	bne.n	8004324 <osTimerNew+0xe8>
 8004318:	697b      	ldr	r3, [r7, #20]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <osTimerNew+0xe8>
        vPortFree (callb);
 800431e:	6978      	ldr	r0, [r7, #20]
 8004320:	f003 fae6 	bl	80078f0 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004324:	6a3b      	ldr	r3, [r7, #32]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3728      	adds	r7, #40	; 0x28
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	08004213 	.word	0x08004213

08004334 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004334:	b580      	push	{r7, lr}
 8004336:	b088      	sub	sp, #32
 8004338:	af02      	add	r7, sp, #8
 800433a:	6078      	str	r0, [r7, #4]
 800433c:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004342:	f3ef 8305 	mrs	r3, IPSR
 8004346:	60fb      	str	r3, [r7, #12]
  return(result);
 8004348:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 800434a:	2b00      	cmp	r3, #0
 800434c:	d003      	beq.n	8004356 <osTimerStart+0x22>
    stat = osErrorISR;
 800434e:	f06f 0305 	mvn.w	r3, #5
 8004352:	617b      	str	r3, [r7, #20]
 8004354:	e017      	b.n	8004386 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8004356:	693b      	ldr	r3, [r7, #16]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d103      	bne.n	8004364 <osTimerStart+0x30>
    stat = osErrorParameter;
 800435c:	f06f 0303 	mvn.w	r3, #3
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e010      	b.n	8004386 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004364:	2300      	movs	r3, #0
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	2300      	movs	r3, #0
 800436a:	683a      	ldr	r2, [r7, #0]
 800436c:	2104      	movs	r1, #4
 800436e:	6938      	ldr	r0, [r7, #16]
 8004370:	f002 fc50 	bl	8006c14 <xTimerGenericCommand>
 8004374:	4603      	mov	r3, r0
 8004376:	2b01      	cmp	r3, #1
 8004378:	d102      	bne.n	8004380 <osTimerStart+0x4c>
      stat = osOK;
 800437a:	2300      	movs	r3, #0
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e002      	b.n	8004386 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004380:	f06f 0302 	mvn.w	r3, #2
 8004384:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004386:	697b      	ldr	r3, [r7, #20]
}
 8004388:	4618      	mov	r0, r3
 800438a:	3718      	adds	r7, #24
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <osTimerStop>:

osStatus_t osTimerStop (osTimerId_t timer_id) {
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af02      	add	r7, sp, #8
 8004396:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800439c:	f3ef 8305 	mrs	r3, IPSR
 80043a0:	60fb      	str	r3, [r7, #12]
  return(result);
 80043a2:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d003      	beq.n	80043b0 <osTimerStop+0x20>
    stat = osErrorISR;
 80043a8:	f06f 0305 	mvn.w	r3, #5
 80043ac:	617b      	str	r3, [r7, #20]
 80043ae:	e021      	b.n	80043f4 <osTimerStop+0x64>
  }
  else if (hTimer == NULL) {
 80043b0:	693b      	ldr	r3, [r7, #16]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d103      	bne.n	80043be <osTimerStop+0x2e>
    stat = osErrorParameter;
 80043b6:	f06f 0303 	mvn.w	r3, #3
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e01a      	b.n	80043f4 <osTimerStop+0x64>
  }
  else {
    if (xTimerIsTimerActive (hTimer) == pdFALSE) {
 80043be:	6938      	ldr	r0, [r7, #16]
 80043c0:	f002 ff2e 	bl	8007220 <xTimerIsTimerActive>
 80043c4:	4603      	mov	r3, r0
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d103      	bne.n	80043d2 <osTimerStop+0x42>
      stat = osErrorResource;
 80043ca:	f06f 0302 	mvn.w	r3, #2
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e010      	b.n	80043f4 <osTimerStop+0x64>
    }
    else {
      if (xTimerStop (hTimer, 0) == pdPASS) {
 80043d2:	2300      	movs	r3, #0
 80043d4:	9300      	str	r3, [sp, #0]
 80043d6:	2300      	movs	r3, #0
 80043d8:	2200      	movs	r2, #0
 80043da:	2103      	movs	r1, #3
 80043dc:	6938      	ldr	r0, [r7, #16]
 80043de:	f002 fc19 	bl	8006c14 <xTimerGenericCommand>
 80043e2:	4603      	mov	r3, r0
 80043e4:	2b01      	cmp	r3, #1
 80043e6:	d102      	bne.n	80043ee <osTimerStop+0x5e>
        stat = osOK;
 80043e8:	2300      	movs	r3, #0
 80043ea:	617b      	str	r3, [r7, #20]
 80043ec:	e002      	b.n	80043f4 <osTimerStop+0x64>
      } else {
        stat = osError;
 80043ee:	f04f 33ff 	mov.w	r3, #4294967295
 80043f2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80043f4:	697b      	ldr	r3, [r7, #20]
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3718      	adds	r7, #24
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}

080043fe <osTimerIsRunning>:

uint32_t osTimerIsRunning (osTimerId_t timer_id) {
 80043fe:	b580      	push	{r7, lr}
 8004400:	b086      	sub	sp, #24
 8004402:	af00      	add	r7, sp, #0
 8004404:	6078      	str	r0, [r7, #4]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800440a:	f3ef 8305 	mrs	r3, IPSR
 800440e:	60fb      	str	r3, [r7, #12]
  return(result);
 8004410:	68fb      	ldr	r3, [r7, #12]
  uint32_t running;

  if (IS_IRQ() || (hTimer == NULL)) {
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <osTimerIsRunning+0x1e>
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d102      	bne.n	8004422 <osTimerIsRunning+0x24>
    running = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	617b      	str	r3, [r7, #20]
 8004420:	e004      	b.n	800442c <osTimerIsRunning+0x2e>
  } else {
    running = (uint32_t)xTimerIsTimerActive (hTimer);
 8004422:	6938      	ldr	r0, [r7, #16]
 8004424:	f002 fefc 	bl	8007220 <xTimerIsTimerActive>
 8004428:	4603      	mov	r3, r0
 800442a:	617b      	str	r3, [r7, #20]
  }

  return (running);
 800442c:	697b      	ldr	r3, [r7, #20]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3718      	adds	r7, #24
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8004436:	b580      	push	{r7, lr}
 8004438:	b088      	sub	sp, #32
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004442:	f3ef 8305 	mrs	r3, IPSR
 8004446:	60bb      	str	r3, [r7, #8]
  return(result);
 8004448:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800444a:	2b00      	cmp	r3, #0
 800444c:	d174      	bne.n	8004538 <osMutexNew+0x102>
    if (attr != NULL) {
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <osMutexNew+0x26>
      type = attr->attr_bits;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e001      	b.n	8004460 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8004460:	69bb      	ldr	r3, [r7, #24]
 8004462:	f003 0301 	and.w	r3, r3, #1
 8004466:	2b00      	cmp	r3, #0
 8004468:	d002      	beq.n	8004470 <osMutexNew+0x3a>
      rmtx = 1U;
 800446a:	2301      	movs	r3, #1
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	e001      	b.n	8004474 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	f003 0308 	and.w	r3, r3, #8
 800447a:	2b00      	cmp	r3, #0
 800447c:	d15c      	bne.n	8004538 <osMutexNew+0x102>
      mem = -1;
 800447e:	f04f 33ff 	mov.w	r3, #4294967295
 8004482:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d015      	beq.n	80044b6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d006      	beq.n	80044a0 <osMutexNew+0x6a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68db      	ldr	r3, [r3, #12]
 8004496:	2b4f      	cmp	r3, #79	; 0x4f
 8004498:	d902      	bls.n	80044a0 <osMutexNew+0x6a>
          mem = 1;
 800449a:	2301      	movs	r3, #1
 800449c:	613b      	str	r3, [r7, #16]
 800449e:	e00c      	b.n	80044ba <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	689b      	ldr	r3, [r3, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d108      	bne.n	80044ba <osMutexNew+0x84>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d104      	bne.n	80044ba <osMutexNew+0x84>
            mem = 0;
 80044b0:	2300      	movs	r3, #0
 80044b2:	613b      	str	r3, [r7, #16]
 80044b4:	e001      	b.n	80044ba <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80044b6:	2300      	movs	r3, #0
 80044b8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80044ba:	693b      	ldr	r3, [r7, #16]
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d112      	bne.n	80044e6 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d007      	beq.n	80044d6 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	689b      	ldr	r3, [r3, #8]
 80044ca:	4619      	mov	r1, r3
 80044cc:	2004      	movs	r0, #4
 80044ce:	f000 fbae 	bl	8004c2e <xQueueCreateMutexStatic>
 80044d2:	61f8      	str	r0, [r7, #28]
 80044d4:	e016      	b.n	8004504 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	4619      	mov	r1, r3
 80044dc:	2001      	movs	r0, #1
 80044de:	f000 fba6 	bl	8004c2e <xQueueCreateMutexStatic>
 80044e2:	61f8      	str	r0, [r7, #28]
 80044e4:	e00e      	b.n	8004504 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d004      	beq.n	80044fc <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80044f2:	2004      	movs	r0, #4
 80044f4:	f000 fb83 	bl	8004bfe <xQueueCreateMutex>
 80044f8:	61f8      	str	r0, [r7, #28]
 80044fa:	e003      	b.n	8004504 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80044fc:	2001      	movs	r0, #1
 80044fe:	f000 fb7e 	bl	8004bfe <xQueueCreateMutex>
 8004502:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d00c      	beq.n	8004524 <osMutexNew+0xee>
        if (attr != NULL) {
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d003      	beq.n	8004518 <osMutexNew+0xe2>
          name = attr->name;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	e001      	b.n	800451c <osMutexNew+0xe6>
        } else {
          name = NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800451c:	68f9      	ldr	r1, [r7, #12]
 800451e:	69f8      	ldr	r0, [r7, #28]
 8004520:	f001 f9e8 	bl	80058f4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8004524:	69fb      	ldr	r3, [r7, #28]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d006      	beq.n	8004538 <osMutexNew+0x102>
 800452a:	697b      	ldr	r3, [r7, #20]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d003      	beq.n	8004538 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8004530:	69fb      	ldr	r3, [r7, #28]
 8004532:	f043 0301 	orr.w	r3, r3, #1
 8004536:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8004538:	69fb      	ldr	r3, [r7, #28]
}
 800453a:	4618      	mov	r0, r3
 800453c:	3720      	adds	r7, #32
 800453e:	46bd      	mov	sp, r7
 8004540:	bd80      	pop	{r7, pc}

08004542 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004542:	b580      	push	{r7, lr}
 8004544:	b08a      	sub	sp, #40	; 0x28
 8004546:	af02      	add	r7, sp, #8
 8004548:	60f8      	str	r0, [r7, #12]
 800454a:	60b9      	str	r1, [r7, #8]
 800454c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800454e:	2300      	movs	r3, #0
 8004550:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004552:	f3ef 8305 	mrs	r3, IPSR
 8004556:	613b      	str	r3, [r7, #16]
  return(result);
 8004558:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800455a:	2b00      	cmp	r3, #0
 800455c:	d175      	bne.n	800464a <osSemaphoreNew+0x108>
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d072      	beq.n	800464a <osSemaphoreNew+0x108>
 8004564:	68ba      	ldr	r2, [r7, #8]
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	429a      	cmp	r2, r3
 800456a:	d86e      	bhi.n	800464a <osSemaphoreNew+0x108>
    mem = -1;
 800456c:	f04f 33ff 	mov.w	r3, #4294967295
 8004570:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d015      	beq.n	80045a4 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d006      	beq.n	800458e <osSemaphoreNew+0x4c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	2b4f      	cmp	r3, #79	; 0x4f
 8004586:	d902      	bls.n	800458e <osSemaphoreNew+0x4c>
        mem = 1;
 8004588:	2301      	movs	r3, #1
 800458a:	61bb      	str	r3, [r7, #24]
 800458c:	e00c      	b.n	80045a8 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	689b      	ldr	r3, [r3, #8]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d108      	bne.n	80045a8 <osSemaphoreNew+0x66>
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	68db      	ldr	r3, [r3, #12]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d104      	bne.n	80045a8 <osSemaphoreNew+0x66>
          mem = 0;
 800459e:	2300      	movs	r3, #0
 80045a0:	61bb      	str	r3, [r7, #24]
 80045a2:	e001      	b.n	80045a8 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 80045a8:	69bb      	ldr	r3, [r7, #24]
 80045aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ae:	d04c      	beq.n	800464a <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	d128      	bne.n	8004608 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 80045b6:	69bb      	ldr	r3, [r7, #24]
 80045b8:	2b01      	cmp	r3, #1
 80045ba:	d10a      	bne.n	80045d2 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	689b      	ldr	r3, [r3, #8]
 80045c0:	2203      	movs	r2, #3
 80045c2:	9200      	str	r2, [sp, #0]
 80045c4:	2200      	movs	r2, #0
 80045c6:	2100      	movs	r1, #0
 80045c8:	2001      	movs	r0, #1
 80045ca:	f000 fa29 	bl	8004a20 <xQueueGenericCreateStatic>
 80045ce:	61f8      	str	r0, [r7, #28]
 80045d0:	e005      	b.n	80045de <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80045d2:	2203      	movs	r2, #3
 80045d4:	2100      	movs	r1, #0
 80045d6:	2001      	movs	r0, #1
 80045d8:	f000 fa9a 	bl	8004b10 <xQueueGenericCreate>
 80045dc:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80045de:	69fb      	ldr	r3, [r7, #28]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d022      	beq.n	800462a <osSemaphoreNew+0xe8>
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d01f      	beq.n	800462a <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80045ea:	2300      	movs	r3, #0
 80045ec:	2200      	movs	r2, #0
 80045ee:	2100      	movs	r1, #0
 80045f0:	69f8      	ldr	r0, [r7, #28]
 80045f2:	f000 fba1 	bl	8004d38 <xQueueGenericSend>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d016      	beq.n	800462a <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80045fc:	69f8      	ldr	r0, [r7, #28]
 80045fe:	f001 f82d 	bl	800565c <vQueueDelete>
            hSemaphore = NULL;
 8004602:	2300      	movs	r3, #0
 8004604:	61fb      	str	r3, [r7, #28]
 8004606:	e010      	b.n	800462a <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d108      	bne.n	8004620 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	461a      	mov	r2, r3
 8004614:	68b9      	ldr	r1, [r7, #8]
 8004616:	68f8      	ldr	r0, [r7, #12]
 8004618:	f000 fb24 	bl	8004c64 <xQueueCreateCountingSemaphoreStatic>
 800461c:	61f8      	str	r0, [r7, #28]
 800461e:	e004      	b.n	800462a <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8004620:	68b9      	ldr	r1, [r7, #8]
 8004622:	68f8      	ldr	r0, [r7, #12]
 8004624:	f000 fb55 	bl	8004cd2 <xQueueCreateCountingSemaphore>
 8004628:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00c      	beq.n	800464a <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <osSemaphoreNew+0xfc>
          name = attr->name;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e001      	b.n	8004642 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800463e:	2300      	movs	r3, #0
 8004640:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004642:	6979      	ldr	r1, [r7, #20]
 8004644:	69f8      	ldr	r0, [r7, #28]
 8004646:	f001 f955 	bl	80058f4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800464a:	69fb      	ldr	r3, [r7, #28]
}
 800464c:	4618      	mov	r0, r3
 800464e:	3720      	adds	r7, #32
 8004650:	46bd      	mov	sp, r7
 8004652:	bd80      	pop	{r7, pc}

08004654 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b086      	sub	sp, #24
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004662:	2300      	movs	r3, #0
 8004664:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b00      	cmp	r3, #0
 800466a:	d103      	bne.n	8004674 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800466c:	f06f 0303 	mvn.w	r3, #3
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	e039      	b.n	80046e8 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004674:	f3ef 8305 	mrs	r3, IPSR
 8004678:	60fb      	str	r3, [r7, #12]
  return(result);
 800467a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800467c:	2b00      	cmp	r3, #0
 800467e:	d022      	beq.n	80046c6 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d003      	beq.n	800468e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004686:	f06f 0303 	mvn.w	r3, #3
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	e02c      	b.n	80046e8 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800468e:	2300      	movs	r3, #0
 8004690:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004692:	f107 0308 	add.w	r3, r7, #8
 8004696:	461a      	mov	r2, r3
 8004698:	2100      	movs	r1, #0
 800469a:	6938      	ldr	r0, [r7, #16]
 800469c:	f000 ff5e 	bl	800555c <xQueueReceiveFromISR>
 80046a0:	4603      	mov	r3, r0
 80046a2:	2b01      	cmp	r3, #1
 80046a4:	d003      	beq.n	80046ae <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 80046a6:	f06f 0302 	mvn.w	r3, #2
 80046aa:	617b      	str	r3, [r7, #20]
 80046ac:	e01c      	b.n	80046e8 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 80046ae:	68bb      	ldr	r3, [r7, #8]
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d019      	beq.n	80046e8 <osSemaphoreAcquire+0x94>
 80046b4:	4b0f      	ldr	r3, [pc, #60]	; (80046f4 <osSemaphoreAcquire+0xa0>)
 80046b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	e010      	b.n	80046e8 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 80046c6:	6839      	ldr	r1, [r7, #0]
 80046c8:	6938      	ldr	r0, [r7, #16]
 80046ca:	f000 fe3b 	bl	8005344 <xQueueSemaphoreTake>
 80046ce:	4603      	mov	r3, r0
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d009      	beq.n	80046e8 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d003      	beq.n	80046e2 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80046da:	f06f 0301 	mvn.w	r3, #1
 80046de:	617b      	str	r3, [r7, #20]
 80046e0:	e002      	b.n	80046e8 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80046e2:	f06f 0302 	mvn.w	r3, #2
 80046e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80046e8:	697b      	ldr	r3, [r7, #20]
}
 80046ea:	4618      	mov	r0, r3
 80046ec:	3718      	adds	r7, #24
 80046ee:	46bd      	mov	sp, r7
 80046f0:	bd80      	pop	{r7, pc}
 80046f2:	bf00      	nop
 80046f4:	e000ed04 	.word	0xe000ed04

080046f8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b086      	sub	sp, #24
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004704:	2300      	movs	r3, #0
 8004706:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800470e:	f06f 0303 	mvn.w	r3, #3
 8004712:	617b      	str	r3, [r7, #20]
 8004714:	e02c      	b.n	8004770 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004716:	f3ef 8305 	mrs	r3, IPSR
 800471a:	60fb      	str	r3, [r7, #12]
  return(result);
 800471c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800471e:	2b00      	cmp	r3, #0
 8004720:	d01a      	beq.n	8004758 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8004722:	2300      	movs	r3, #0
 8004724:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8004726:	f107 0308 	add.w	r3, r7, #8
 800472a:	4619      	mov	r1, r3
 800472c:	6938      	ldr	r0, [r7, #16]
 800472e:	f000 fc9c 	bl	800506a <xQueueGiveFromISR>
 8004732:	4603      	mov	r3, r0
 8004734:	2b01      	cmp	r3, #1
 8004736:	d003      	beq.n	8004740 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8004738:	f06f 0302 	mvn.w	r3, #2
 800473c:	617b      	str	r3, [r7, #20]
 800473e:	e017      	b.n	8004770 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004740:	68bb      	ldr	r3, [r7, #8]
 8004742:	2b00      	cmp	r3, #0
 8004744:	d014      	beq.n	8004770 <osSemaphoreRelease+0x78>
 8004746:	4b0d      	ldr	r3, [pc, #52]	; (800477c <osSemaphoreRelease+0x84>)
 8004748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800474c:	601a      	str	r2, [r3, #0]
 800474e:	f3bf 8f4f 	dsb	sy
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	e00b      	b.n	8004770 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004758:	2300      	movs	r3, #0
 800475a:	2200      	movs	r2, #0
 800475c:	2100      	movs	r1, #0
 800475e:	6938      	ldr	r0, [r7, #16]
 8004760:	f000 faea 	bl	8004d38 <xQueueGenericSend>
 8004764:	4603      	mov	r3, r0
 8004766:	2b01      	cmp	r3, #1
 8004768:	d002      	beq.n	8004770 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800476a:	f06f 0302 	mvn.w	r3, #2
 800476e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004770:	697b      	ldr	r3, [r7, #20]
}
 8004772:	4618      	mov	r0, r3
 8004774:	3718      	adds	r7, #24
 8004776:	46bd      	mov	sp, r7
 8004778:	bd80      	pop	{r7, pc}
 800477a:	bf00      	nop
 800477c:	e000ed04 	.word	0xe000ed04

08004780 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004780:	b480      	push	{r7}
 8004782:	b085      	sub	sp, #20
 8004784:	af00      	add	r7, sp, #0
 8004786:	60f8      	str	r0, [r7, #12]
 8004788:	60b9      	str	r1, [r7, #8]
 800478a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	4a07      	ldr	r2, [pc, #28]	; (80047ac <vApplicationGetIdleTaskMemory+0x2c>)
 8004790:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	4a06      	ldr	r2, [pc, #24]	; (80047b0 <vApplicationGetIdleTaskMemory+0x30>)
 8004796:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2280      	movs	r2, #128	; 0x80
 800479c:	601a      	str	r2, [r3, #0]
}
 800479e:	bf00      	nop
 80047a0:	3714      	adds	r7, #20
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	200001e0 	.word	0x200001e0
 80047b0:	20000288 	.word	0x20000288

080047b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	4a07      	ldr	r2, [pc, #28]	; (80047e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80047c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <vApplicationGetTimerTaskMemory+0x30>)
 80047ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047d2:	601a      	str	r2, [r3, #0]
}
 80047d4:	bf00      	nop
 80047d6:	3714      	adds	r7, #20
 80047d8:	46bd      	mov	sp, r7
 80047da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047de:	4770      	bx	lr
 80047e0:	20000488 	.word	0x20000488
 80047e4:	20000530 	.word	0x20000530

080047e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f103 0208 	add.w	r2, r3, #8
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f04f 32ff 	mov.w	r2, #4294967295
 8004800:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	f103 0208 	add.w	r2, r3, #8
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	f103 0208 	add.w	r2, r3, #8
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	2200      	movs	r2, #0
 8004834:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004836:	bf00      	nop
 8004838:	370c      	adds	r7, #12
 800483a:	46bd      	mov	sp, r7
 800483c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004840:	4770      	bx	lr

08004842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004842:	b480      	push	{r7}
 8004844:	b085      	sub	sp, #20
 8004846:	af00      	add	r7, sp, #0
 8004848:	6078      	str	r0, [r7, #4]
 800484a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	689a      	ldr	r2, [r3, #8]
 800485c:	683b      	ldr	r3, [r7, #0]
 800485e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	687a      	ldr	r2, [r7, #4]
 8004872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	1c5a      	adds	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	601a      	str	r2, [r3, #0]
}
 800487e:	bf00      	nop
 8004880:	3714      	adds	r7, #20
 8004882:	46bd      	mov	sp, r7
 8004884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004888:	4770      	bx	lr

0800488a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800488a:	b480      	push	{r7}
 800488c:	b085      	sub	sp, #20
 800488e:	af00      	add	r7, sp, #0
 8004890:	6078      	str	r0, [r7, #4]
 8004892:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d103      	bne.n	80048aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	691b      	ldr	r3, [r3, #16]
 80048a6:	60fb      	str	r3, [r7, #12]
 80048a8:	e00c      	b.n	80048c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	3308      	adds	r3, #8
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	e002      	b.n	80048b8 <vListInsert+0x2e>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	60fb      	str	r3, [r7, #12]
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	68ba      	ldr	r2, [r7, #8]
 80048c0:	429a      	cmp	r2, r3
 80048c2:	d2f6      	bcs.n	80048b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	685a      	ldr	r2, [r3, #4]
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	685b      	ldr	r3, [r3, #4]
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68fa      	ldr	r2, [r7, #12]
 80048d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	683a      	ldr	r2, [r7, #0]
 80048de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048e0:	683b      	ldr	r3, [r7, #0]
 80048e2:	687a      	ldr	r2, [r7, #4]
 80048e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	1c5a      	adds	r2, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	601a      	str	r2, [r3, #0]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048fc:	b480      	push	{r7}
 80048fe:	b085      	sub	sp, #20
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	687a      	ldr	r2, [r7, #4]
 8004910:	6892      	ldr	r2, [r2, #8]
 8004912:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	689b      	ldr	r3, [r3, #8]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	6852      	ldr	r2, [r2, #4]
 800491c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	685b      	ldr	r3, [r3, #4]
 8004922:	687a      	ldr	r2, [r7, #4]
 8004924:	429a      	cmp	r2, r3
 8004926:	d103      	bne.n	8004930 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689a      	ldr	r2, [r3, #8]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	1e5a      	subs	r2, r3, #1
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3714      	adds	r7, #20
 8004948:	46bd      	mov	sp, r7
 800494a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494e:	4770      	bx	lr

08004950 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
 8004958:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d10a      	bne.n	800497a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004968:	f383 8811 	msr	BASEPRI, r3
 800496c:	f3bf 8f6f 	isb	sy
 8004970:	f3bf 8f4f 	dsb	sy
 8004974:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004976:	bf00      	nop
 8004978:	e7fe      	b.n	8004978 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800497a:	f002 fdcb 	bl	8007514 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004986:	68f9      	ldr	r1, [r7, #12]
 8004988:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800498a:	fb01 f303 	mul.w	r3, r1, r3
 800498e:	441a      	add	r2, r3
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2200      	movs	r2, #0
 8004998:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80049aa:	3b01      	subs	r3, #1
 80049ac:	68f9      	ldr	r1, [r7, #12]
 80049ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80049b0:	fb01 f303 	mul.w	r3, r1, r3
 80049b4:	441a      	add	r2, r3
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	22ff      	movs	r2, #255	; 0xff
 80049be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	22ff      	movs	r2, #255	; 0xff
 80049c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d114      	bne.n	80049fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d01a      	beq.n	8004a0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	3310      	adds	r3, #16
 80049dc:	4618      	mov	r0, r3
 80049de:	f001 fc97 	bl	8006310 <xTaskRemoveFromEventList>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d012      	beq.n	8004a0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <xQueueGenericReset+0xcc>)
 80049ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ee:	601a      	str	r2, [r3, #0]
 80049f0:	f3bf 8f4f 	dsb	sy
 80049f4:	f3bf 8f6f 	isb	sy
 80049f8:	e009      	b.n	8004a0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	3310      	adds	r3, #16
 80049fe:	4618      	mov	r0, r3
 8004a00:	f7ff fef2 	bl	80047e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	3324      	adds	r3, #36	; 0x24
 8004a08:	4618      	mov	r0, r3
 8004a0a:	f7ff feed 	bl	80047e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004a0e:	f002 fdb1 	bl	8007574 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004a12:	2301      	movs	r3, #1
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	e000ed04 	.word	0xe000ed04

08004a20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b08e      	sub	sp, #56	; 0x38
 8004a24:	af02      	add	r7, sp, #8
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
 8004a2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d10a      	bne.n	8004a4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a38:	f383 8811 	msr	BASEPRI, r3
 8004a3c:	f3bf 8f6f 	isb	sy
 8004a40:	f3bf 8f4f 	dsb	sy
 8004a44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a46:	bf00      	nop
 8004a48:	e7fe      	b.n	8004a48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d10a      	bne.n	8004a66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a54:	f383 8811 	msr	BASEPRI, r3
 8004a58:	f3bf 8f6f 	isb	sy
 8004a5c:	f3bf 8f4f 	dsb	sy
 8004a60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a62:	bf00      	nop
 8004a64:	e7fe      	b.n	8004a64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d002      	beq.n	8004a72 <xQueueGenericCreateStatic+0x52>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d001      	beq.n	8004a76 <xQueueGenericCreateStatic+0x56>
 8004a72:	2301      	movs	r3, #1
 8004a74:	e000      	b.n	8004a78 <xQueueGenericCreateStatic+0x58>
 8004a76:	2300      	movs	r3, #0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	623b      	str	r3, [r7, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d102      	bne.n	8004a9e <xQueueGenericCreateStatic+0x7e>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <xQueueGenericCreateStatic+0x82>
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e000      	b.n	8004aa4 <xQueueGenericCreateStatic+0x84>
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aac:	f383 8811 	msr	BASEPRI, r3
 8004ab0:	f3bf 8f6f 	isb	sy
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	61fb      	str	r3, [r7, #28]
}
 8004aba:	bf00      	nop
 8004abc:	e7fe      	b.n	8004abc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004abe:	2350      	movs	r3, #80	; 0x50
 8004ac0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ac2:	697b      	ldr	r3, [r7, #20]
 8004ac4:	2b50      	cmp	r3, #80	; 0x50
 8004ac6:	d00a      	beq.n	8004ade <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004acc:	f383 8811 	msr	BASEPRI, r3
 8004ad0:	f3bf 8f6f 	isb	sy
 8004ad4:	f3bf 8f4f 	dsb	sy
 8004ad8:	61bb      	str	r3, [r7, #24]
}
 8004ada:	bf00      	nop
 8004adc:	e7fe      	b.n	8004adc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004ade:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d00d      	beq.n	8004b06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aec:	2201      	movs	r2, #1
 8004aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004af2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af8:	9300      	str	r3, [sp, #0]
 8004afa:	4613      	mov	r3, r2
 8004afc:	687a      	ldr	r2, [r7, #4]
 8004afe:	68b9      	ldr	r1, [r7, #8]
 8004b00:	68f8      	ldr	r0, [r7, #12]
 8004b02:	f000 f83f 	bl	8004b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3730      	adds	r7, #48	; 0x30
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b08a      	sub	sp, #40	; 0x28
 8004b14:	af02      	add	r7, sp, #8
 8004b16:	60f8      	str	r0, [r7, #12]
 8004b18:	60b9      	str	r1, [r7, #8]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d10a      	bne.n	8004b3a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	613b      	str	r3, [r7, #16]
}
 8004b36:	bf00      	nop
 8004b38:	e7fe      	b.n	8004b38 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	fb02 f303 	mul.w	r3, r2, r3
 8004b42:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004b44:	69fb      	ldr	r3, [r7, #28]
 8004b46:	3350      	adds	r3, #80	; 0x50
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f002 fe05 	bl	8007758 <pvPortMalloc>
 8004b4e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d011      	beq.n	8004b7a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	3350      	adds	r3, #80	; 0x50
 8004b5e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004b60:	69bb      	ldr	r3, [r7, #24]
 8004b62:	2200      	movs	r2, #0
 8004b64:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004b68:	79fa      	ldrb	r2, [r7, #7]
 8004b6a:	69bb      	ldr	r3, [r7, #24]
 8004b6c:	9300      	str	r3, [sp, #0]
 8004b6e:	4613      	mov	r3, r2
 8004b70:	697a      	ldr	r2, [r7, #20]
 8004b72:	68b9      	ldr	r1, [r7, #8]
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f000 f805 	bl	8004b84 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004b7a:	69bb      	ldr	r3, [r7, #24]
	}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	3720      	adds	r7, #32
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bd80      	pop	{r7, pc}

08004b84 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b084      	sub	sp, #16
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	60f8      	str	r0, [r7, #12]
 8004b8c:	60b9      	str	r1, [r7, #8]
 8004b8e:	607a      	str	r2, [r7, #4]
 8004b90:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b92:	68bb      	ldr	r3, [r7, #8]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d103      	bne.n	8004ba0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b98:	69bb      	ldr	r3, [r7, #24]
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	601a      	str	r2, [r3, #0]
 8004b9e:	e002      	b.n	8004ba6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	687a      	ldr	r2, [r7, #4]
 8004ba4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ba6:	69bb      	ldr	r3, [r7, #24]
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	68ba      	ldr	r2, [r7, #8]
 8004bb0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004bb2:	2101      	movs	r1, #1
 8004bb4:	69b8      	ldr	r0, [r7, #24]
 8004bb6:	f7ff fecb 	bl	8004950 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004bba:	69bb      	ldr	r3, [r7, #24]
 8004bbc:	78fa      	ldrb	r2, [r7, #3]
 8004bbe:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004bc2:	bf00      	nop
 8004bc4:	3710      	adds	r7, #16
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}

08004bca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004bca:	b580      	push	{r7, lr}
 8004bcc:	b082      	sub	sp, #8
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d00e      	beq.n	8004bf6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2200      	movs	r2, #0
 8004be2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004bea:	2300      	movs	r3, #0
 8004bec:	2200      	movs	r2, #0
 8004bee:	2100      	movs	r1, #0
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f000 f8a1 	bl	8004d38 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004bf6:	bf00      	nop
 8004bf8:	3708      	adds	r7, #8
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004bfe:	b580      	push	{r7, lr}
 8004c00:	b086      	sub	sp, #24
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	4603      	mov	r3, r0
 8004c06:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	617b      	str	r3, [r7, #20]
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004c10:	79fb      	ldrb	r3, [r7, #7]
 8004c12:	461a      	mov	r2, r3
 8004c14:	6939      	ldr	r1, [r7, #16]
 8004c16:	6978      	ldr	r0, [r7, #20]
 8004c18:	f7ff ff7a 	bl	8004b10 <xQueueGenericCreate>
 8004c1c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c1e:	68f8      	ldr	r0, [r7, #12]
 8004c20:	f7ff ffd3 	bl	8004bca <prvInitialiseMutex>

		return xNewQueue;
 8004c24:	68fb      	ldr	r3, [r7, #12]
	}
 8004c26:	4618      	mov	r0, r3
 8004c28:	3718      	adds	r7, #24
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	bd80      	pop	{r7, pc}

08004c2e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8004c2e:	b580      	push	{r7, lr}
 8004c30:	b088      	sub	sp, #32
 8004c32:	af02      	add	r7, sp, #8
 8004c34:	4603      	mov	r3, r0
 8004c36:	6039      	str	r1, [r7, #0]
 8004c38:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	617b      	str	r3, [r7, #20]
 8004c3e:	2300      	movs	r3, #0
 8004c40:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8004c42:	79fb      	ldrb	r3, [r7, #7]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	6939      	ldr	r1, [r7, #16]
 8004c4c:	6978      	ldr	r0, [r7, #20]
 8004c4e:	f7ff fee7 	bl	8004a20 <xQueueGenericCreateStatic>
 8004c52:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8004c54:	68f8      	ldr	r0, [r7, #12]
 8004c56:	f7ff ffb8 	bl	8004bca <prvInitialiseMutex>

		return xNewQueue;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
	}
 8004c5c:	4618      	mov	r0, r3
 8004c5e:	3718      	adds	r7, #24
 8004c60:	46bd      	mov	sp, r7
 8004c62:	bd80      	pop	{r7, pc}

08004c64 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004c64:	b580      	push	{r7, lr}
 8004c66:	b08a      	sub	sp, #40	; 0x28
 8004c68:	af02      	add	r7, sp, #8
 8004c6a:	60f8      	str	r0, [r7, #12]
 8004c6c:	60b9      	str	r1, [r7, #8]
 8004c6e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d10a      	bne.n	8004c8c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c7a:	f383 8811 	msr	BASEPRI, r3
 8004c7e:	f3bf 8f6f 	isb	sy
 8004c82:	f3bf 8f4f 	dsb	sy
 8004c86:	61bb      	str	r3, [r7, #24]
}
 8004c88:	bf00      	nop
 8004c8a:	e7fe      	b.n	8004c8a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004c8c:	68ba      	ldr	r2, [r7, #8]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d90a      	bls.n	8004caa <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004c94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c98:	f383 8811 	msr	BASEPRI, r3
 8004c9c:	f3bf 8f6f 	isb	sy
 8004ca0:	f3bf 8f4f 	dsb	sy
 8004ca4:	617b      	str	r3, [r7, #20]
}
 8004ca6:	bf00      	nop
 8004ca8:	e7fe      	b.n	8004ca8 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004caa:	2302      	movs	r3, #2
 8004cac:	9300      	str	r3, [sp, #0]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2100      	movs	r1, #0
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7ff feb3 	bl	8004a20 <xQueueGenericCreateStatic>
 8004cba:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	68ba      	ldr	r2, [r7, #8]
 8004cc6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004cc8:	69fb      	ldr	r3, [r7, #28]
	}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3720      	adds	r7, #32
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b086      	sub	sp, #24
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
 8004cda:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10a      	bne.n	8004cf8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce6:	f383 8811 	msr	BASEPRI, r3
 8004cea:	f3bf 8f6f 	isb	sy
 8004cee:	f3bf 8f4f 	dsb	sy
 8004cf2:	613b      	str	r3, [r7, #16]
}
 8004cf4:	bf00      	nop
 8004cf6:	e7fe      	b.n	8004cf6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	429a      	cmp	r2, r3
 8004cfe:	d90a      	bls.n	8004d16 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	60fb      	str	r3, [r7, #12]
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004d16:	2202      	movs	r2, #2
 8004d18:	2100      	movs	r1, #0
 8004d1a:	6878      	ldr	r0, [r7, #4]
 8004d1c:	f7ff fef8 	bl	8004b10 <xQueueGenericCreate>
 8004d20:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d002      	beq.n	8004d2e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	683a      	ldr	r2, [r7, #0]
 8004d2c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004d2e:	697b      	ldr	r3, [r7, #20]
	}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3718      	adds	r7, #24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	bd80      	pop	{r7, pc}

08004d38 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d38:	b580      	push	{r7, lr}
 8004d3a:	b08e      	sub	sp, #56	; 0x38
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	60f8      	str	r0, [r7, #12]
 8004d40:	60b9      	str	r1, [r7, #8]
 8004d42:	607a      	str	r2, [r7, #4]
 8004d44:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d46:	2300      	movs	r3, #0
 8004d48:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d10a      	bne.n	8004d6a <xQueueGenericSend+0x32>
	__asm volatile
 8004d54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d58:	f383 8811 	msr	BASEPRI, r3
 8004d5c:	f3bf 8f6f 	isb	sy
 8004d60:	f3bf 8f4f 	dsb	sy
 8004d64:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d66:	bf00      	nop
 8004d68:	e7fe      	b.n	8004d68 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d103      	bne.n	8004d78 <xQueueGenericSend+0x40>
 8004d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d101      	bne.n	8004d7c <xQueueGenericSend+0x44>
 8004d78:	2301      	movs	r3, #1
 8004d7a:	e000      	b.n	8004d7e <xQueueGenericSend+0x46>
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d10a      	bne.n	8004d98 <xQueueGenericSend+0x60>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d103      	bne.n	8004da6 <xQueueGenericSend+0x6e>
 8004d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d101      	bne.n	8004daa <xQueueGenericSend+0x72>
 8004da6:	2301      	movs	r3, #1
 8004da8:	e000      	b.n	8004dac <xQueueGenericSend+0x74>
 8004daa:	2300      	movs	r3, #0
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <xQueueGenericSend+0x8e>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	623b      	str	r3, [r7, #32]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004dc6:	f001 fc65 	bl	8006694 <xTaskGetSchedulerState>
 8004dca:	4603      	mov	r3, r0
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <xQueueGenericSend+0x9e>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <xQueueGenericSend+0xa2>
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <xQueueGenericSend+0xa4>
 8004dda:	2300      	movs	r3, #0
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d10a      	bne.n	8004df6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	61fb      	str	r3, [r7, #28]
}
 8004df2:	bf00      	nop
 8004df4:	e7fe      	b.n	8004df4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004df6:	f002 fb8d 	bl	8007514 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d302      	bcc.n	8004e0c <xQueueGenericSend+0xd4>
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d129      	bne.n	8004e60 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	68b9      	ldr	r1, [r7, #8]
 8004e10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e12:	f000 fc5e 	bl	80056d2 <prvCopyDataToQueue>
 8004e16:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d010      	beq.n	8004e42 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	3324      	adds	r3, #36	; 0x24
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 fa73 	bl	8006310 <xTaskRemoveFromEventList>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d013      	beq.n	8004e58 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004e30:	4b3f      	ldr	r3, [pc, #252]	; (8004f30 <xQueueGenericSend+0x1f8>)
 8004e32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e36:	601a      	str	r2, [r3, #0]
 8004e38:	f3bf 8f4f 	dsb	sy
 8004e3c:	f3bf 8f6f 	isb	sy
 8004e40:	e00a      	b.n	8004e58 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d007      	beq.n	8004e58 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e48:	4b39      	ldr	r3, [pc, #228]	; (8004f30 <xQueueGenericSend+0x1f8>)
 8004e4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e4e:	601a      	str	r2, [r3, #0]
 8004e50:	f3bf 8f4f 	dsb	sy
 8004e54:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e58:	f002 fb8c 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	e063      	b.n	8004f28 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d103      	bne.n	8004e6e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e66:	f002 fb85 	bl	8007574 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	e05c      	b.n	8004f28 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d106      	bne.n	8004e82 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e74:	f107 0314 	add.w	r3, r7, #20
 8004e78:	4618      	mov	r0, r3
 8004e7a:	f001 faad 	bl	80063d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e82:	f002 fb77 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e86:	f001 f819 	bl	8005ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e8a:	f002 fb43 	bl	8007514 <vPortEnterCritical>
 8004e8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e94:	b25b      	sxtb	r3, r3
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d103      	bne.n	8004ea4 <xQueueGenericSend+0x16c>
 8004e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ea4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004eaa:	b25b      	sxtb	r3, r3
 8004eac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004eb0:	d103      	bne.n	8004eba <xQueueGenericSend+0x182>
 8004eb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eba:	f002 fb5b 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004ebe:	1d3a      	adds	r2, r7, #4
 8004ec0:	f107 0314 	add.w	r3, r7, #20
 8004ec4:	4611      	mov	r1, r2
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	f001 fa9c 	bl	8006404 <xTaskCheckForTimeOut>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d124      	bne.n	8004f1c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed4:	f000 fcf5 	bl	80058c2 <prvIsQueueFull>
 8004ed8:	4603      	mov	r3, r0
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d018      	beq.n	8004f10 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee0:	3310      	adds	r3, #16
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	4611      	mov	r1, r2
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	f001 f9c2 	bl	8006270 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004eec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eee:	f000 fc80 	bl	80057f2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004ef2:	f000 fff1 	bl	8005ed8 <xTaskResumeAll>
 8004ef6:	4603      	mov	r3, r0
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	f47f af7c 	bne.w	8004df6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004efe:	4b0c      	ldr	r3, [pc, #48]	; (8004f30 <xQueueGenericSend+0x1f8>)
 8004f00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f04:	601a      	str	r2, [r3, #0]
 8004f06:	f3bf 8f4f 	dsb	sy
 8004f0a:	f3bf 8f6f 	isb	sy
 8004f0e:	e772      	b.n	8004df6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004f10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f12:	f000 fc6e 	bl	80057f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004f16:	f000 ffdf 	bl	8005ed8 <xTaskResumeAll>
 8004f1a:	e76c      	b.n	8004df6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004f1c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f1e:	f000 fc68 	bl	80057f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004f22:	f000 ffd9 	bl	8005ed8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004f26:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3738      	adds	r7, #56	; 0x38
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}
 8004f30:	e000ed04 	.word	0xe000ed04

08004f34 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b090      	sub	sp, #64	; 0x40
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	607a      	str	r2, [r7, #4]
 8004f40:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10a      	bne.n	8004f62 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f50:	f383 8811 	msr	BASEPRI, r3
 8004f54:	f3bf 8f6f 	isb	sy
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f5e:	bf00      	nop
 8004f60:	e7fe      	b.n	8004f60 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d103      	bne.n	8004f70 <xQueueGenericSendFromISR+0x3c>
 8004f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d101      	bne.n	8004f74 <xQueueGenericSendFromISR+0x40>
 8004f70:	2301      	movs	r3, #1
 8004f72:	e000      	b.n	8004f76 <xQueueGenericSendFromISR+0x42>
 8004f74:	2300      	movs	r3, #0
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d10a      	bne.n	8004f90 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f7e:	f383 8811 	msr	BASEPRI, r3
 8004f82:	f3bf 8f6f 	isb	sy
 8004f86:	f3bf 8f4f 	dsb	sy
 8004f8a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f8c:	bf00      	nop
 8004f8e:	e7fe      	b.n	8004f8e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d103      	bne.n	8004f9e <xQueueGenericSendFromISR+0x6a>
 8004f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f9a:	2b01      	cmp	r3, #1
 8004f9c:	d101      	bne.n	8004fa2 <xQueueGenericSendFromISR+0x6e>
 8004f9e:	2301      	movs	r3, #1
 8004fa0:	e000      	b.n	8004fa4 <xQueueGenericSendFromISR+0x70>
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d10a      	bne.n	8004fbe <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fac:	f383 8811 	msr	BASEPRI, r3
 8004fb0:	f3bf 8f6f 	isb	sy
 8004fb4:	f3bf 8f4f 	dsb	sy
 8004fb8:	623b      	str	r3, [r7, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	e7fe      	b.n	8004fbc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004fbe:	f002 fb8b 	bl	80076d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004fc2:	f3ef 8211 	mrs	r2, BASEPRI
 8004fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fca:	f383 8811 	msr	BASEPRI, r3
 8004fce:	f3bf 8f6f 	isb	sy
 8004fd2:	f3bf 8f4f 	dsb	sy
 8004fd6:	61fa      	str	r2, [r7, #28]
 8004fd8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004fda:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004fdc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fe4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d302      	bcc.n	8004ff0 <xQueueGenericSendFromISR+0xbc>
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	2b02      	cmp	r3, #2
 8004fee:	d12f      	bne.n	8005050 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005000:	683a      	ldr	r2, [r7, #0]
 8005002:	68b9      	ldr	r1, [r7, #8]
 8005004:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005006:	f000 fb64 	bl	80056d2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800500a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800500e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005012:	d112      	bne.n	800503a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	d016      	beq.n	800504a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800501e:	3324      	adds	r3, #36	; 0x24
 8005020:	4618      	mov	r0, r3
 8005022:	f001 f975 	bl	8006310 <xTaskRemoveFromEventList>
 8005026:	4603      	mov	r3, r0
 8005028:	2b00      	cmp	r3, #0
 800502a:	d00e      	beq.n	800504a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d00b      	beq.n	800504a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e007      	b.n	800504a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800503a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800503e:	3301      	adds	r3, #1
 8005040:	b2db      	uxtb	r3, r3
 8005042:	b25a      	sxtb	r2, r3
 8005044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005046:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800504a:	2301      	movs	r3, #1
 800504c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800504e:	e001      	b.n	8005054 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005050:	2300      	movs	r3, #0
 8005052:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800505e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005060:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005062:	4618      	mov	r0, r3
 8005064:	3740      	adds	r7, #64	; 0x40
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800506a:	b580      	push	{r7, lr}
 800506c:	b08e      	sub	sp, #56	; 0x38
 800506e:	af00      	add	r7, sp, #0
 8005070:	6078      	str	r0, [r7, #4]
 8005072:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10a      	bne.n	8005094 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800507e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005082:	f383 8811 	msr	BASEPRI, r3
 8005086:	f3bf 8f6f 	isb	sy
 800508a:	f3bf 8f4f 	dsb	sy
 800508e:	623b      	str	r3, [r7, #32]
}
 8005090:	bf00      	nop
 8005092:	e7fe      	b.n	8005092 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005098:	2b00      	cmp	r3, #0
 800509a:	d00a      	beq.n	80050b2 <xQueueGiveFromISR+0x48>
	__asm volatile
 800509c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a0:	f383 8811 	msr	BASEPRI, r3
 80050a4:	f3bf 8f6f 	isb	sy
 80050a8:	f3bf 8f4f 	dsb	sy
 80050ac:	61fb      	str	r3, [r7, #28]
}
 80050ae:	bf00      	nop
 80050b0:	e7fe      	b.n	80050b0 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80050b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d103      	bne.n	80050c2 <xQueueGiveFromISR+0x58>
 80050ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <xQueueGiveFromISR+0x5c>
 80050c2:	2301      	movs	r3, #1
 80050c4:	e000      	b.n	80050c8 <xQueueGiveFromISR+0x5e>
 80050c6:	2300      	movs	r3, #0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d10a      	bne.n	80050e2 <xQueueGiveFromISR+0x78>
	__asm volatile
 80050cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050d0:	f383 8811 	msr	BASEPRI, r3
 80050d4:	f3bf 8f6f 	isb	sy
 80050d8:	f3bf 8f4f 	dsb	sy
 80050dc:	61bb      	str	r3, [r7, #24]
}
 80050de:	bf00      	nop
 80050e0:	e7fe      	b.n	80050e0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050e2:	f002 faf9 	bl	80076d8 <vPortValidateInterruptPriority>
	__asm volatile
 80050e6:	f3ef 8211 	mrs	r2, BASEPRI
 80050ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ee:	f383 8811 	msr	BASEPRI, r3
 80050f2:	f3bf 8f6f 	isb	sy
 80050f6:	f3bf 8f4f 	dsb	sy
 80050fa:	617a      	str	r2, [r7, #20]
 80050fc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80050fe:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005100:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005106:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800510c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800510e:	429a      	cmp	r2, r3
 8005110:	d22b      	bcs.n	800516a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005118:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800511c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005122:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005124:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800512c:	d112      	bne.n	8005154 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800512e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005132:	2b00      	cmp	r3, #0
 8005134:	d016      	beq.n	8005164 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005138:	3324      	adds	r3, #36	; 0x24
 800513a:	4618      	mov	r0, r3
 800513c:	f001 f8e8 	bl	8006310 <xTaskRemoveFromEventList>
 8005140:	4603      	mov	r3, r0
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00e      	beq.n	8005164 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d00b      	beq.n	8005164 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2201      	movs	r2, #1
 8005150:	601a      	str	r2, [r3, #0]
 8005152:	e007      	b.n	8005164 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005154:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005158:	3301      	adds	r3, #1
 800515a:	b2db      	uxtb	r3, r3
 800515c:	b25a      	sxtb	r2, r3
 800515e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005160:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005164:	2301      	movs	r3, #1
 8005166:	637b      	str	r3, [r7, #52]	; 0x34
 8005168:	e001      	b.n	800516e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800516a:	2300      	movs	r3, #0
 800516c:	637b      	str	r3, [r7, #52]	; 0x34
 800516e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005170:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	f383 8811 	msr	BASEPRI, r3
}
 8005178:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800517a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800517c:	4618      	mov	r0, r3
 800517e:	3738      	adds	r7, #56	; 0x38
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b08c      	sub	sp, #48	; 0x30
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005190:	2300      	movs	r3, #0
 8005192:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	2b00      	cmp	r3, #0
 800519c:	d10a      	bne.n	80051b4 <xQueueReceive+0x30>
	__asm volatile
 800519e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a2:	f383 8811 	msr	BASEPRI, r3
 80051a6:	f3bf 8f6f 	isb	sy
 80051aa:	f3bf 8f4f 	dsb	sy
 80051ae:	623b      	str	r3, [r7, #32]
}
 80051b0:	bf00      	nop
 80051b2:	e7fe      	b.n	80051b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d103      	bne.n	80051c2 <xQueueReceive+0x3e>
 80051ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <xQueueReceive+0x42>
 80051c2:	2301      	movs	r3, #1
 80051c4:	e000      	b.n	80051c8 <xQueueReceive+0x44>
 80051c6:	2300      	movs	r3, #0
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d10a      	bne.n	80051e2 <xQueueReceive+0x5e>
	__asm volatile
 80051cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051d0:	f383 8811 	msr	BASEPRI, r3
 80051d4:	f3bf 8f6f 	isb	sy
 80051d8:	f3bf 8f4f 	dsb	sy
 80051dc:	61fb      	str	r3, [r7, #28]
}
 80051de:	bf00      	nop
 80051e0:	e7fe      	b.n	80051e0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051e2:	f001 fa57 	bl	8006694 <xTaskGetSchedulerState>
 80051e6:	4603      	mov	r3, r0
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d102      	bne.n	80051f2 <xQueueReceive+0x6e>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d101      	bne.n	80051f6 <xQueueReceive+0x72>
 80051f2:	2301      	movs	r3, #1
 80051f4:	e000      	b.n	80051f8 <xQueueReceive+0x74>
 80051f6:	2300      	movs	r3, #0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d10a      	bne.n	8005212 <xQueueReceive+0x8e>
	__asm volatile
 80051fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005200:	f383 8811 	msr	BASEPRI, r3
 8005204:	f3bf 8f6f 	isb	sy
 8005208:	f3bf 8f4f 	dsb	sy
 800520c:	61bb      	str	r3, [r7, #24]
}
 800520e:	bf00      	nop
 8005210:	e7fe      	b.n	8005210 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005212:	f002 f97f 	bl	8007514 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005218:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800521a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800521c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800521e:	2b00      	cmp	r3, #0
 8005220:	d01f      	beq.n	8005262 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005222:	68b9      	ldr	r1, [r7, #8]
 8005224:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005226:	f000 fabe 	bl	80057a6 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800522a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522c:	1e5a      	subs	r2, r3, #1
 800522e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005230:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005232:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00f      	beq.n	800525a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800523a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523c:	3310      	adds	r3, #16
 800523e:	4618      	mov	r0, r3
 8005240:	f001 f866 	bl	8006310 <xTaskRemoveFromEventList>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d007      	beq.n	800525a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800524a:	4b3d      	ldr	r3, [pc, #244]	; (8005340 <xQueueReceive+0x1bc>)
 800524c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005250:	601a      	str	r2, [r3, #0]
 8005252:	f3bf 8f4f 	dsb	sy
 8005256:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800525a:	f002 f98b 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 800525e:	2301      	movs	r3, #1
 8005260:	e069      	b.n	8005336 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d103      	bne.n	8005270 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005268:	f002 f984 	bl	8007574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800526c:	2300      	movs	r3, #0
 800526e:	e062      	b.n	8005336 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005272:	2b00      	cmp	r3, #0
 8005274:	d106      	bne.n	8005284 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005276:	f107 0310 	add.w	r3, r7, #16
 800527a:	4618      	mov	r0, r3
 800527c:	f001 f8ac 	bl	80063d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005280:	2301      	movs	r3, #1
 8005282:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005284:	f002 f976 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005288:	f000 fe18 	bl	8005ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800528c:	f002 f942 	bl	8007514 <vPortEnterCritical>
 8005290:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005292:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005296:	b25b      	sxtb	r3, r3
 8005298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800529c:	d103      	bne.n	80052a6 <xQueueReceive+0x122>
 800529e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80052ac:	b25b      	sxtb	r3, r3
 80052ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052b2:	d103      	bne.n	80052bc <xQueueReceive+0x138>
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	2200      	movs	r2, #0
 80052b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80052bc:	f002 f95a 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80052c0:	1d3a      	adds	r2, r7, #4
 80052c2:	f107 0310 	add.w	r3, r7, #16
 80052c6:	4611      	mov	r1, r2
 80052c8:	4618      	mov	r0, r3
 80052ca:	f001 f89b 	bl	8006404 <xTaskCheckForTimeOut>
 80052ce:	4603      	mov	r3, r0
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d123      	bne.n	800531c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d6:	f000 fade 	bl	8005896 <prvIsQueueEmpty>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d017      	beq.n	8005310 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	3324      	adds	r3, #36	; 0x24
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	4611      	mov	r1, r2
 80052e8:	4618      	mov	r0, r3
 80052ea:	f000 ffc1 	bl	8006270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052ee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052f0:	f000 fa7f 	bl	80057f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052f4:	f000 fdf0 	bl	8005ed8 <xTaskResumeAll>
 80052f8:	4603      	mov	r3, r0
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d189      	bne.n	8005212 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80052fe:	4b10      	ldr	r3, [pc, #64]	; (8005340 <xQueueReceive+0x1bc>)
 8005300:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005304:	601a      	str	r2, [r3, #0]
 8005306:	f3bf 8f4f 	dsb	sy
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	e780      	b.n	8005212 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005310:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005312:	f000 fa6e 	bl	80057f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005316:	f000 fddf 	bl	8005ed8 <xTaskResumeAll>
 800531a:	e77a      	b.n	8005212 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800531c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800531e:	f000 fa68 	bl	80057f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005322:	f000 fdd9 	bl	8005ed8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005328:	f000 fab5 	bl	8005896 <prvIsQueueEmpty>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	f43f af6f 	beq.w	8005212 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005334:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005336:	4618      	mov	r0, r3
 8005338:	3730      	adds	r7, #48	; 0x30
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	e000ed04 	.word	0xe000ed04

08005344 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b08e      	sub	sp, #56	; 0x38
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800534e:	2300      	movs	r3, #0
 8005350:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005356:	2300      	movs	r3, #0
 8005358:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800535a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800535c:	2b00      	cmp	r3, #0
 800535e:	d10a      	bne.n	8005376 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005364:	f383 8811 	msr	BASEPRI, r3
 8005368:	f3bf 8f6f 	isb	sy
 800536c:	f3bf 8f4f 	dsb	sy
 8005370:	623b      	str	r3, [r7, #32]
}
 8005372:	bf00      	nop
 8005374:	e7fe      	b.n	8005374 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005376:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00a      	beq.n	8005394 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800537e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005382:	f383 8811 	msr	BASEPRI, r3
 8005386:	f3bf 8f6f 	isb	sy
 800538a:	f3bf 8f4f 	dsb	sy
 800538e:	61fb      	str	r3, [r7, #28]
}
 8005390:	bf00      	nop
 8005392:	e7fe      	b.n	8005392 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005394:	f001 f97e 	bl	8006694 <xTaskGetSchedulerState>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d102      	bne.n	80053a4 <xQueueSemaphoreTake+0x60>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <xQueueSemaphoreTake+0x64>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e000      	b.n	80053aa <xQueueSemaphoreTake+0x66>
 80053a8:	2300      	movs	r3, #0
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d10a      	bne.n	80053c4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	61bb      	str	r3, [r7, #24]
}
 80053c0:	bf00      	nop
 80053c2:	e7fe      	b.n	80053c2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80053c4:	f002 f8a6 	bl	8007514 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80053c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053cc:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80053ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d024      	beq.n	800541e <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80053d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d6:	1e5a      	subs	r2, r3, #1
 80053d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053da:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d104      	bne.n	80053ee <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80053e4:	f001 facc 	bl	8006980 <pvTaskIncrementMutexHeldCount>
 80053e8:	4602      	mov	r2, r0
 80053ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ec:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f0:	691b      	ldr	r3, [r3, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d00f      	beq.n	8005416 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053f8:	3310      	adds	r3, #16
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 ff88 	bl	8006310 <xTaskRemoveFromEventList>
 8005400:	4603      	mov	r3, r0
 8005402:	2b00      	cmp	r3, #0
 8005404:	d007      	beq.n	8005416 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005406:	4b54      	ldr	r3, [pc, #336]	; (8005558 <xQueueSemaphoreTake+0x214>)
 8005408:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	f3bf 8f4f 	dsb	sy
 8005412:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005416:	f002 f8ad 	bl	8007574 <vPortExitCritical>
				return pdPASS;
 800541a:	2301      	movs	r3, #1
 800541c:	e097      	b.n	800554e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d111      	bne.n	8005448 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005424:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005426:	2b00      	cmp	r3, #0
 8005428:	d00a      	beq.n	8005440 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800542a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800542e:	f383 8811 	msr	BASEPRI, r3
 8005432:	f3bf 8f6f 	isb	sy
 8005436:	f3bf 8f4f 	dsb	sy
 800543a:	617b      	str	r3, [r7, #20]
}
 800543c:	bf00      	nop
 800543e:	e7fe      	b.n	800543e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005440:	f002 f898 	bl	8007574 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005444:	2300      	movs	r3, #0
 8005446:	e082      	b.n	800554e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005448:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800544a:	2b00      	cmp	r3, #0
 800544c:	d106      	bne.n	800545c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800544e:	f107 030c 	add.w	r3, r7, #12
 8005452:	4618      	mov	r0, r3
 8005454:	f000 ffc0 	bl	80063d8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800545c:	f002 f88a 	bl	8007574 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005460:	f000 fd2c 	bl	8005ebc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005464:	f002 f856 	bl	8007514 <vPortEnterCritical>
 8005468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800546e:	b25b      	sxtb	r3, r3
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d103      	bne.n	800547e <xQueueSemaphoreTake+0x13a>
 8005476:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005478:	2200      	movs	r2, #0
 800547a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800547e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005480:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005484:	b25b      	sxtb	r3, r3
 8005486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800548a:	d103      	bne.n	8005494 <xQueueSemaphoreTake+0x150>
 800548c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548e:	2200      	movs	r2, #0
 8005490:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005494:	f002 f86e 	bl	8007574 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005498:	463a      	mov	r2, r7
 800549a:	f107 030c 	add.w	r3, r7, #12
 800549e:	4611      	mov	r1, r2
 80054a0:	4618      	mov	r0, r3
 80054a2:	f000 ffaf 	bl	8006404 <xTaskCheckForTimeOut>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d132      	bne.n	8005512 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054ac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054ae:	f000 f9f2 	bl	8005896 <prvIsQueueEmpty>
 80054b2:	4603      	mov	r3, r0
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d026      	beq.n	8005506 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80054b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d109      	bne.n	80054d4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80054c0:	f002 f828 	bl	8007514 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80054c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	4618      	mov	r0, r3
 80054ca:	f001 f901 	bl	80066d0 <xTaskPriorityInherit>
 80054ce:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80054d0:	f002 f850 	bl	8007574 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	3324      	adds	r3, #36	; 0x24
 80054d8:	683a      	ldr	r2, [r7, #0]
 80054da:	4611      	mov	r1, r2
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 fec7 	bl	8006270 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054e4:	f000 f985 	bl	80057f2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054e8:	f000 fcf6 	bl	8005ed8 <xTaskResumeAll>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	f47f af68 	bne.w	80053c4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80054f4:	4b18      	ldr	r3, [pc, #96]	; (8005558 <xQueueSemaphoreTake+0x214>)
 80054f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	f3bf 8f6f 	isb	sy
 8005504:	e75e      	b.n	80053c4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8005506:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005508:	f000 f973 	bl	80057f2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800550c:	f000 fce4 	bl	8005ed8 <xTaskResumeAll>
 8005510:	e758      	b.n	80053c4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005512:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005514:	f000 f96d 	bl	80057f2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005518:	f000 fcde 	bl	8005ed8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800551c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800551e:	f000 f9ba 	bl	8005896 <prvIsQueueEmpty>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	f43f af4d 	beq.w	80053c4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800552a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800552c:	2b00      	cmp	r3, #0
 800552e:	d00d      	beq.n	800554c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005530:	f001 fff0 	bl	8007514 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005534:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005536:	f000 f8b4 	bl	80056a2 <prvGetDisinheritPriorityAfterTimeout>
 800553a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800553c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800553e:	689b      	ldr	r3, [r3, #8]
 8005540:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005542:	4618      	mov	r0, r3
 8005544:	f001 f99a 	bl	800687c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005548:	f002 f814 	bl	8007574 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800554c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800554e:	4618      	mov	r0, r3
 8005550:	3738      	adds	r7, #56	; 0x38
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	e000ed04 	.word	0xe000ed04

0800555c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800555c:	b580      	push	{r7, lr}
 800555e:	b08e      	sub	sp, #56	; 0x38
 8005560:	af00      	add	r7, sp, #0
 8005562:	60f8      	str	r0, [r7, #12]
 8005564:	60b9      	str	r1, [r7, #8]
 8005566:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	2b00      	cmp	r3, #0
 8005570:	d10a      	bne.n	8005588 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	623b      	str	r3, [r7, #32]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d103      	bne.n	8005596 <xQueueReceiveFromISR+0x3a>
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005592:	2b00      	cmp	r3, #0
 8005594:	d101      	bne.n	800559a <xQueueReceiveFromISR+0x3e>
 8005596:	2301      	movs	r3, #1
 8005598:	e000      	b.n	800559c <xQueueReceiveFromISR+0x40>
 800559a:	2300      	movs	r3, #0
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10a      	bne.n	80055b6 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80055a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a4:	f383 8811 	msr	BASEPRI, r3
 80055a8:	f3bf 8f6f 	isb	sy
 80055ac:	f3bf 8f4f 	dsb	sy
 80055b0:	61fb      	str	r3, [r7, #28]
}
 80055b2:	bf00      	nop
 80055b4:	e7fe      	b.n	80055b4 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055b6:	f002 f88f 	bl	80076d8 <vPortValidateInterruptPriority>
	__asm volatile
 80055ba:	f3ef 8211 	mrs	r2, BASEPRI
 80055be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61ba      	str	r2, [r7, #24]
 80055d0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80055d2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055d4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d02f      	beq.n	8005642 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80055ec:	68b9      	ldr	r1, [r7, #8]
 80055ee:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055f0:	f000 f8d9 	bl	80057a6 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80055f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f6:	1e5a      	subs	r2, r3, #1
 80055f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055fa:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80055fc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005600:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005604:	d112      	bne.n	800562c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d016      	beq.n	800563c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800560e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005610:	3310      	adds	r3, #16
 8005612:	4618      	mov	r0, r3
 8005614:	f000 fe7c 	bl	8006310 <xTaskRemoveFromEventList>
 8005618:	4603      	mov	r3, r0
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00e      	beq.n	800563c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d00b      	beq.n	800563c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	601a      	str	r2, [r3, #0]
 800562a:	e007      	b.n	800563c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800562c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005630:	3301      	adds	r3, #1
 8005632:	b2db      	uxtb	r3, r3
 8005634:	b25a      	sxtb	r2, r3
 8005636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005638:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800563c:	2301      	movs	r3, #1
 800563e:	637b      	str	r3, [r7, #52]	; 0x34
 8005640:	e001      	b.n	8005646 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005642:	2300      	movs	r3, #0
 8005644:	637b      	str	r3, [r7, #52]	; 0x34
 8005646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005648:	613b      	str	r3, [r7, #16]
	__asm volatile
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	f383 8811 	msr	BASEPRI, r3
}
 8005650:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005652:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005654:	4618      	mov	r0, r3
 8005656:	3738      	adds	r7, #56	; 0x38
 8005658:	46bd      	mov	sp, r7
 800565a:	bd80      	pop	{r7, pc}

0800565c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800565c:	b580      	push	{r7, lr}
 800565e:	b084      	sub	sp, #16
 8005660:	af00      	add	r7, sp, #0
 8005662:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2b00      	cmp	r3, #0
 800566c:	d10a      	bne.n	8005684 <vQueueDelete+0x28>
	__asm volatile
 800566e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005672:	f383 8811 	msr	BASEPRI, r3
 8005676:	f3bf 8f6f 	isb	sy
 800567a:	f3bf 8f4f 	dsb	sy
 800567e:	60bb      	str	r3, [r7, #8]
}
 8005680:	bf00      	nop
 8005682:	e7fe      	b.n	8005682 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005684:	68f8      	ldr	r0, [r7, #12]
 8005686:	f000 f95f 	bl	8005948 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005690:	2b00      	cmp	r3, #0
 8005692:	d102      	bne.n	800569a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f002 f92b 	bl	80078f0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800569a:	bf00      	nop
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}

080056a2 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80056a2:	b480      	push	{r7}
 80056a4:	b085      	sub	sp, #20
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d006      	beq.n	80056c0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	e001      	b.n	80056c4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80056c0:	2300      	movs	r3, #0
 80056c2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80056c4:	68fb      	ldr	r3, [r7, #12]
	}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3714      	adds	r7, #20
 80056ca:	46bd      	mov	sp, r7
 80056cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d0:	4770      	bx	lr

080056d2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b086      	sub	sp, #24
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80056de:	2300      	movs	r3, #0
 80056e0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056e6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d10d      	bne.n	800570c <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d14d      	bne.n	8005794 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	4618      	mov	r0, r3
 80056fe:	f001 f84f 	bl	80067a0 <xTaskPriorityDisinherit>
 8005702:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	2200      	movs	r2, #0
 8005708:	609a      	str	r2, [r3, #8]
 800570a:	e043      	b.n	8005794 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2b00      	cmp	r3, #0
 8005710:	d119      	bne.n	8005746 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	6858      	ldr	r0, [r3, #4]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571a:	461a      	mov	r2, r3
 800571c:	68b9      	ldr	r1, [r7, #8]
 800571e:	f002 fbee 	bl	8007efe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	685a      	ldr	r2, [r3, #4]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572a:	441a      	add	r2, r3
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	689b      	ldr	r3, [r3, #8]
 8005738:	429a      	cmp	r2, r3
 800573a:	d32b      	bcc.n	8005794 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681a      	ldr	r2, [r3, #0]
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	605a      	str	r2, [r3, #4]
 8005744:	e026      	b.n	8005794 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	68d8      	ldr	r0, [r3, #12]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800574e:	461a      	mov	r2, r3
 8005750:	68b9      	ldr	r1, [r7, #8]
 8005752:	f002 fbd4 	bl	8007efe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800575e:	425b      	negs	r3, r3
 8005760:	441a      	add	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	68da      	ldr	r2, [r3, #12]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d207      	bcs.n	8005782 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	689a      	ldr	r2, [r3, #8]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577a:	425b      	negs	r3, r3
 800577c:	441a      	add	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2b02      	cmp	r3, #2
 8005786:	d105      	bne.n	8005794 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d002      	beq.n	8005794 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	3b01      	subs	r3, #1
 8005792:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005794:	693b      	ldr	r3, [r7, #16]
 8005796:	1c5a      	adds	r2, r3, #1
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800579c:	697b      	ldr	r3, [r7, #20]
}
 800579e:	4618      	mov	r0, r3
 80057a0:	3718      	adds	r7, #24
 80057a2:	46bd      	mov	sp, r7
 80057a4:	bd80      	pop	{r7, pc}

080057a6 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80057a6:	b580      	push	{r7, lr}
 80057a8:	b082      	sub	sp, #8
 80057aa:	af00      	add	r7, sp, #0
 80057ac:	6078      	str	r0, [r7, #4]
 80057ae:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d018      	beq.n	80057ea <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	68da      	ldr	r2, [r3, #12]
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c0:	441a      	add	r2, r3
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	68da      	ldr	r2, [r3, #12]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	429a      	cmp	r2, r3
 80057d0:	d303      	bcc.n	80057da <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681a      	ldr	r2, [r3, #0]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68d9      	ldr	r1, [r3, #12]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e2:	461a      	mov	r2, r3
 80057e4:	6838      	ldr	r0, [r7, #0]
 80057e6:	f002 fb8a 	bl	8007efe <memcpy>
	}
}
 80057ea:	bf00      	nop
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057fa:	f001 fe8b 	bl	8007514 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005804:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005806:	e011      	b.n	800582c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580c:	2b00      	cmp	r3, #0
 800580e:	d012      	beq.n	8005836 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	3324      	adds	r3, #36	; 0x24
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fd7b 	bl	8006310 <xTaskRemoveFromEventList>
 800581a:	4603      	mov	r3, r0
 800581c:	2b00      	cmp	r3, #0
 800581e:	d001      	beq.n	8005824 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005820:	f000 fe52 	bl	80064c8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005824:	7bfb      	ldrb	r3, [r7, #15]
 8005826:	3b01      	subs	r3, #1
 8005828:	b2db      	uxtb	r3, r3
 800582a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800582c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005830:	2b00      	cmp	r3, #0
 8005832:	dce9      	bgt.n	8005808 <prvUnlockQueue+0x16>
 8005834:	e000      	b.n	8005838 <prvUnlockQueue+0x46>
					break;
 8005836:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	22ff      	movs	r2, #255	; 0xff
 800583c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005840:	f001 fe98 	bl	8007574 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005844:	f001 fe66 	bl	8007514 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800584e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005850:	e011      	b.n	8005876 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	691b      	ldr	r3, [r3, #16]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d012      	beq.n	8005880 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	3310      	adds	r3, #16
 800585e:	4618      	mov	r0, r3
 8005860:	f000 fd56 	bl	8006310 <xTaskRemoveFromEventList>
 8005864:	4603      	mov	r3, r0
 8005866:	2b00      	cmp	r3, #0
 8005868:	d001      	beq.n	800586e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800586a:	f000 fe2d 	bl	80064c8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800586e:	7bbb      	ldrb	r3, [r7, #14]
 8005870:	3b01      	subs	r3, #1
 8005872:	b2db      	uxtb	r3, r3
 8005874:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005876:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800587a:	2b00      	cmp	r3, #0
 800587c:	dce9      	bgt.n	8005852 <prvUnlockQueue+0x60>
 800587e:	e000      	b.n	8005882 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005880:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	22ff      	movs	r2, #255	; 0xff
 8005886:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800588a:	f001 fe73 	bl	8007574 <vPortExitCritical>
}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b084      	sub	sp, #16
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800589e:	f001 fe39 	bl	8007514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80058aa:	2301      	movs	r3, #1
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	e001      	b.n	80058b4 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80058b0:	2300      	movs	r3, #0
 80058b2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058b4:	f001 fe5e 	bl	8007574 <vPortExitCritical>

	return xReturn;
 80058b8:	68fb      	ldr	r3, [r7, #12]
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}

080058c2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80058c2:	b580      	push	{r7, lr}
 80058c4:	b084      	sub	sp, #16
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80058ca:	f001 fe23 	bl	8007514 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058d6:	429a      	cmp	r2, r3
 80058d8:	d102      	bne.n	80058e0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80058da:	2301      	movs	r3, #1
 80058dc:	60fb      	str	r3, [r7, #12]
 80058de:	e001      	b.n	80058e4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80058e0:	2300      	movs	r3, #0
 80058e2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80058e4:	f001 fe46 	bl	8007574 <vPortExitCritical>

	return xReturn;
 80058e8:	68fb      	ldr	r3, [r7, #12]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058fe:	2300      	movs	r3, #0
 8005900:	60fb      	str	r3, [r7, #12]
 8005902:	e014      	b.n	800592e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005904:	4a0f      	ldr	r2, [pc, #60]	; (8005944 <vQueueAddToRegistry+0x50>)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d10b      	bne.n	8005928 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005910:	490c      	ldr	r1, [pc, #48]	; (8005944 <vQueueAddToRegistry+0x50>)
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	683a      	ldr	r2, [r7, #0]
 8005916:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800591a:	4a0a      	ldr	r2, [pc, #40]	; (8005944 <vQueueAddToRegistry+0x50>)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	00db      	lsls	r3, r3, #3
 8005920:	4413      	add	r3, r2
 8005922:	687a      	ldr	r2, [r7, #4]
 8005924:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005926:	e006      	b.n	8005936 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	3301      	adds	r3, #1
 800592c:	60fb      	str	r3, [r7, #12]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2b07      	cmp	r3, #7
 8005932:	d9e7      	bls.n	8005904 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005934:	bf00      	nop
 8005936:	bf00      	nop
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	20000930 	.word	0x20000930

08005948 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005948:	b480      	push	{r7}
 800594a:	b085      	sub	sp, #20
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005950:	2300      	movs	r3, #0
 8005952:	60fb      	str	r3, [r7, #12]
 8005954:	e016      	b.n	8005984 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005956:	4a10      	ldr	r2, [pc, #64]	; (8005998 <vQueueUnregisterQueue+0x50>)
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	00db      	lsls	r3, r3, #3
 800595c:	4413      	add	r3, r2
 800595e:	685b      	ldr	r3, [r3, #4]
 8005960:	687a      	ldr	r2, [r7, #4]
 8005962:	429a      	cmp	r2, r3
 8005964:	d10b      	bne.n	800597e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005966:	4a0c      	ldr	r2, [pc, #48]	; (8005998 <vQueueUnregisterQueue+0x50>)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2100      	movs	r1, #0
 800596c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005970:	4a09      	ldr	r2, [pc, #36]	; (8005998 <vQueueUnregisterQueue+0x50>)
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	00db      	lsls	r3, r3, #3
 8005976:	4413      	add	r3, r2
 8005978:	2200      	movs	r2, #0
 800597a:	605a      	str	r2, [r3, #4]
				break;
 800597c:	e006      	b.n	800598c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	3301      	adds	r3, #1
 8005982:	60fb      	str	r3, [r7, #12]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2b07      	cmp	r3, #7
 8005988:	d9e5      	bls.n	8005956 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800598a:	bf00      	nop
 800598c:	bf00      	nop
 800598e:	3714      	adds	r7, #20
 8005990:	46bd      	mov	sp, r7
 8005992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005996:	4770      	bx	lr
 8005998:	20000930 	.word	0x20000930

0800599c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800599c:	b580      	push	{r7, lr}
 800599e:	b086      	sub	sp, #24
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80059ac:	f001 fdb2 	bl	8007514 <vPortEnterCritical>
 80059b0:	697b      	ldr	r3, [r7, #20]
 80059b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80059b6:	b25b      	sxtb	r3, r3
 80059b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059bc:	d103      	bne.n	80059c6 <vQueueWaitForMessageRestricted+0x2a>
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059cc:	b25b      	sxtb	r3, r3
 80059ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d2:	d103      	bne.n	80059dc <vQueueWaitForMessageRestricted+0x40>
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80059dc:	f001 fdca 	bl	8007574 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80059e0:	697b      	ldr	r3, [r7, #20]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d106      	bne.n	80059f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	3324      	adds	r3, #36	; 0x24
 80059ec:	687a      	ldr	r2, [r7, #4]
 80059ee:	68b9      	ldr	r1, [r7, #8]
 80059f0:	4618      	mov	r0, r3
 80059f2:	f000 fc61 	bl	80062b8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80059f6:	6978      	ldr	r0, [r7, #20]
 80059f8:	f7ff fefb 	bl	80057f2 <prvUnlockQueue>
	}
 80059fc:	bf00      	nop
 80059fe:	3718      	adds	r7, #24
 8005a00:	46bd      	mov	sp, r7
 8005a02:	bd80      	pop	{r7, pc}

08005a04 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b08e      	sub	sp, #56	; 0x38
 8005a08:	af04      	add	r7, sp, #16
 8005a0a:	60f8      	str	r0, [r7, #12]
 8005a0c:	60b9      	str	r1, [r7, #8]
 8005a0e:	607a      	str	r2, [r7, #4]
 8005a10:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d10a      	bne.n	8005a2e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a1c:	f383 8811 	msr	BASEPRI, r3
 8005a20:	f3bf 8f6f 	isb	sy
 8005a24:	f3bf 8f4f 	dsb	sy
 8005a28:	623b      	str	r3, [r7, #32]
}
 8005a2a:	bf00      	nop
 8005a2c:	e7fe      	b.n	8005a2c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d10a      	bne.n	8005a4a <xTaskCreateStatic+0x46>
	__asm volatile
 8005a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a38:	f383 8811 	msr	BASEPRI, r3
 8005a3c:	f3bf 8f6f 	isb	sy
 8005a40:	f3bf 8f4f 	dsb	sy
 8005a44:	61fb      	str	r3, [r7, #28]
}
 8005a46:	bf00      	nop
 8005a48:	e7fe      	b.n	8005a48 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a4a:	23a8      	movs	r3, #168	; 0xa8
 8005a4c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a4e:	693b      	ldr	r3, [r7, #16]
 8005a50:	2ba8      	cmp	r3, #168	; 0xa8
 8005a52:	d00a      	beq.n	8005a6a <xTaskCreateStatic+0x66>
	__asm volatile
 8005a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a58:	f383 8811 	msr	BASEPRI, r3
 8005a5c:	f3bf 8f6f 	isb	sy
 8005a60:	f3bf 8f4f 	dsb	sy
 8005a64:	61bb      	str	r3, [r7, #24]
}
 8005a66:	bf00      	nop
 8005a68:	e7fe      	b.n	8005a68 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a6a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d01e      	beq.n	8005ab0 <xTaskCreateStatic+0xac>
 8005a72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	d01b      	beq.n	8005ab0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a7a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a7e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005a80:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a84:	2202      	movs	r2, #2
 8005a86:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	9303      	str	r3, [sp, #12]
 8005a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a90:	9302      	str	r3, [sp, #8]
 8005a92:	f107 0314 	add.w	r3, r7, #20
 8005a96:	9301      	str	r3, [sp, #4]
 8005a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9a:	9300      	str	r3, [sp, #0]
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	687a      	ldr	r2, [r7, #4]
 8005aa0:	68b9      	ldr	r1, [r7, #8]
 8005aa2:	68f8      	ldr	r0, [r7, #12]
 8005aa4:	f000 f850 	bl	8005b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aa8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005aaa:	f000 f8f3 	bl	8005c94 <prvAddNewTaskToReadyList>
 8005aae:	e001      	b.n	8005ab4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005ab4:	697b      	ldr	r3, [r7, #20]
	}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3728      	adds	r7, #40	; 0x28
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b08c      	sub	sp, #48	; 0x30
 8005ac2:	af04      	add	r7, sp, #16
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	603b      	str	r3, [r7, #0]
 8005aca:	4613      	mov	r3, r2
 8005acc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005ace:	88fb      	ldrh	r3, [r7, #6]
 8005ad0:	009b      	lsls	r3, r3, #2
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f001 fe40 	bl	8007758 <pvPortMalloc>
 8005ad8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d00e      	beq.n	8005afe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ae0:	20a8      	movs	r0, #168	; 0xa8
 8005ae2:	f001 fe39 	bl	8007758 <pvPortMalloc>
 8005ae6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d003      	beq.n	8005af6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	631a      	str	r2, [r3, #48]	; 0x30
 8005af4:	e005      	b.n	8005b02 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005af6:	6978      	ldr	r0, [r7, #20]
 8005af8:	f001 fefa 	bl	80078f0 <vPortFree>
 8005afc:	e001      	b.n	8005b02 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005b02:	69fb      	ldr	r3, [r7, #28]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d017      	beq.n	8005b38 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005b08:	69fb      	ldr	r3, [r7, #28]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005b10:	88fa      	ldrh	r2, [r7, #6]
 8005b12:	2300      	movs	r3, #0
 8005b14:	9303      	str	r3, [sp, #12]
 8005b16:	69fb      	ldr	r3, [r7, #28]
 8005b18:	9302      	str	r3, [sp, #8]
 8005b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1c:	9301      	str	r3, [sp, #4]
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	9300      	str	r3, [sp, #0]
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	68b9      	ldr	r1, [r7, #8]
 8005b26:	68f8      	ldr	r0, [r7, #12]
 8005b28:	f000 f80e 	bl	8005b48 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005b2c:	69f8      	ldr	r0, [r7, #28]
 8005b2e:	f000 f8b1 	bl	8005c94 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005b32:	2301      	movs	r3, #1
 8005b34:	61bb      	str	r3, [r7, #24]
 8005b36:	e002      	b.n	8005b3e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b3e:	69bb      	ldr	r3, [r7, #24]
	}
 8005b40:	4618      	mov	r0, r3
 8005b42:	3720      	adds	r7, #32
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}

08005b48 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b088      	sub	sp, #32
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	60f8      	str	r0, [r7, #12]
 8005b50:	60b9      	str	r1, [r7, #8]
 8005b52:	607a      	str	r2, [r7, #4]
 8005b54:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	009b      	lsls	r3, r3, #2
 8005b5e:	461a      	mov	r2, r3
 8005b60:	21a5      	movs	r1, #165	; 0xa5
 8005b62:	f002 f8fa 	bl	8007d5a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005b70:	3b01      	subs	r3, #1
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	f023 0307 	bic.w	r3, r3, #7
 8005b7e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f003 0307 	and.w	r3, r3, #7
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d00a      	beq.n	8005ba0 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005b8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8e:	f383 8811 	msr	BASEPRI, r3
 8005b92:	f3bf 8f6f 	isb	sy
 8005b96:	f3bf 8f4f 	dsb	sy
 8005b9a:	617b      	str	r3, [r7, #20]
}
 8005b9c:	bf00      	nop
 8005b9e:	e7fe      	b.n	8005b9e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d01f      	beq.n	8005be6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	e012      	b.n	8005bd2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005bac:	68ba      	ldr	r2, [r7, #8]
 8005bae:	69fb      	ldr	r3, [r7, #28]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	7819      	ldrb	r1, [r3, #0]
 8005bb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	4413      	add	r3, r2
 8005bba:	3334      	adds	r3, #52	; 0x34
 8005bbc:	460a      	mov	r2, r1
 8005bbe:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005bc0:	68ba      	ldr	r2, [r7, #8]
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d006      	beq.n	8005bda <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005bcc:	69fb      	ldr	r3, [r7, #28]
 8005bce:	3301      	adds	r3, #1
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	2b0f      	cmp	r3, #15
 8005bd6:	d9e9      	bls.n	8005bac <prvInitialiseNewTask+0x64>
 8005bd8:	e000      	b.n	8005bdc <prvInitialiseNewTask+0x94>
			{
				break;
 8005bda:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	2200      	movs	r2, #0
 8005be0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005be4:	e003      	b.n	8005bee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf0:	2b37      	cmp	r3, #55	; 0x37
 8005bf2:	d901      	bls.n	8005bf8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bf4:	2337      	movs	r3, #55	; 0x37
 8005bf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005c02:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005c04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c06:	2200      	movs	r2, #0
 8005c08:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005c0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c0c:	3304      	adds	r3, #4
 8005c0e:	4618      	mov	r0, r3
 8005c10:	f7fe fe0a 	bl	8004828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c16:	3318      	adds	r3, #24
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f7fe fe05 	bl	8004828 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c26:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c36:	2200      	movs	r2, #0
 8005c38:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c3e:	2200      	movs	r2, #0
 8005c40:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	3354      	adds	r3, #84	; 0x54
 8005c48:	224c      	movs	r2, #76	; 0x4c
 8005c4a:	2100      	movs	r1, #0
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f002 f884 	bl	8007d5a <memset>
 8005c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c54:	4a0c      	ldr	r2, [pc, #48]	; (8005c88 <prvInitialiseNewTask+0x140>)
 8005c56:	659a      	str	r2, [r3, #88]	; 0x58
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	4a0c      	ldr	r2, [pc, #48]	; (8005c8c <prvInitialiseNewTask+0x144>)
 8005c5c:	65da      	str	r2, [r3, #92]	; 0x5c
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c60:	4a0b      	ldr	r2, [pc, #44]	; (8005c90 <prvInitialiseNewTask+0x148>)
 8005c62:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	68f9      	ldr	r1, [r7, #12]
 8005c68:	69b8      	ldr	r0, [r7, #24]
 8005c6a:	f001 fb23 	bl	80072b4 <pxPortInitialiseStack>
 8005c6e:	4602      	mov	r2, r0
 8005c70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c72:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d002      	beq.n	8005c80 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005c7e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c80:	bf00      	nop
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	20004a5c 	.word	0x20004a5c
 8005c8c:	20004ac4 	.word	0x20004ac4
 8005c90:	20004b2c 	.word	0x20004b2c

08005c94 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c9c:	f001 fc3a 	bl	8007514 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ca0:	4b2d      	ldr	r3, [pc, #180]	; (8005d58 <prvAddNewTaskToReadyList+0xc4>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	3301      	adds	r3, #1
 8005ca6:	4a2c      	ldr	r2, [pc, #176]	; (8005d58 <prvAddNewTaskToReadyList+0xc4>)
 8005ca8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005caa:	4b2c      	ldr	r3, [pc, #176]	; (8005d5c <prvAddNewTaskToReadyList+0xc8>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d109      	bne.n	8005cc6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005cb2:	4a2a      	ldr	r2, [pc, #168]	; (8005d5c <prvAddNewTaskToReadyList+0xc8>)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005cb8:	4b27      	ldr	r3, [pc, #156]	; (8005d58 <prvAddNewTaskToReadyList+0xc4>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d110      	bne.n	8005ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005cc0:	f000 fc26 	bl	8006510 <prvInitialiseTaskLists>
 8005cc4:	e00d      	b.n	8005ce2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005cc6:	4b26      	ldr	r3, [pc, #152]	; (8005d60 <prvAddNewTaskToReadyList+0xcc>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d109      	bne.n	8005ce2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005cce:	4b23      	ldr	r3, [pc, #140]	; (8005d5c <prvAddNewTaskToReadyList+0xc8>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cd8:	429a      	cmp	r2, r3
 8005cda:	d802      	bhi.n	8005ce2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005cdc:	4a1f      	ldr	r2, [pc, #124]	; (8005d5c <prvAddNewTaskToReadyList+0xc8>)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ce2:	4b20      	ldr	r3, [pc, #128]	; (8005d64 <prvAddNewTaskToReadyList+0xd0>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	4a1e      	ldr	r2, [pc, #120]	; (8005d64 <prvAddNewTaskToReadyList+0xd0>)
 8005cea:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005cec:	4b1d      	ldr	r3, [pc, #116]	; (8005d64 <prvAddNewTaskToReadyList+0xd0>)
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cf8:	4b1b      	ldr	r3, [pc, #108]	; (8005d68 <prvAddNewTaskToReadyList+0xd4>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d903      	bls.n	8005d08 <prvAddNewTaskToReadyList+0x74>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d04:	4a18      	ldr	r2, [pc, #96]	; (8005d68 <prvAddNewTaskToReadyList+0xd4>)
 8005d06:	6013      	str	r3, [r2, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	009b      	lsls	r3, r3, #2
 8005d10:	4413      	add	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4a15      	ldr	r2, [pc, #84]	; (8005d6c <prvAddNewTaskToReadyList+0xd8>)
 8005d16:	441a      	add	r2, r3
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	3304      	adds	r3, #4
 8005d1c:	4619      	mov	r1, r3
 8005d1e:	4610      	mov	r0, r2
 8005d20:	f7fe fd8f 	bl	8004842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005d24:	f001 fc26 	bl	8007574 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005d28:	4b0d      	ldr	r3, [pc, #52]	; (8005d60 <prvAddNewTaskToReadyList+0xcc>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d00e      	beq.n	8005d4e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005d30:	4b0a      	ldr	r3, [pc, #40]	; (8005d5c <prvAddNewTaskToReadyList+0xc8>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d3a:	429a      	cmp	r2, r3
 8005d3c:	d207      	bcs.n	8005d4e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005d3e:	4b0c      	ldr	r3, [pc, #48]	; (8005d70 <prvAddNewTaskToReadyList+0xdc>)
 8005d40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d44:	601a      	str	r2, [r3, #0]
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005d4e:	bf00      	nop
 8005d50:	3708      	adds	r7, #8
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	20000e44 	.word	0x20000e44
 8005d5c:	20000970 	.word	0x20000970
 8005d60:	20000e50 	.word	0x20000e50
 8005d64:	20000e60 	.word	0x20000e60
 8005d68:	20000e4c 	.word	0x20000e4c
 8005d6c:	20000974 	.word	0x20000974
 8005d70:	e000ed04 	.word	0xe000ed04

08005d74 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b084      	sub	sp, #16
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d017      	beq.n	8005db6 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005d86:	4b13      	ldr	r3, [pc, #76]	; (8005dd4 <vTaskDelay+0x60>)
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <vTaskDelay+0x30>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	60bb      	str	r3, [r7, #8]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005da4:	f000 f88a 	bl	8005ebc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005da8:	2100      	movs	r1, #0
 8005daa:	6878      	ldr	r0, [r7, #4]
 8005dac:	f000 fdfc 	bl	80069a8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005db0:	f000 f892 	bl	8005ed8 <xTaskResumeAll>
 8005db4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d107      	bne.n	8005dcc <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005dbc:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <vTaskDelay+0x64>)
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	f3bf 8f4f 	dsb	sy
 8005dc8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005dcc:	bf00      	nop
 8005dce:	3710      	adds	r7, #16
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bd80      	pop	{r7, pc}
 8005dd4:	20000e6c 	.word	0x20000e6c
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b08a      	sub	sp, #40	; 0x28
 8005de0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005de6:	2300      	movs	r3, #0
 8005de8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005dea:	463a      	mov	r2, r7
 8005dec:	1d39      	adds	r1, r7, #4
 8005dee:	f107 0308 	add.w	r3, r7, #8
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe fcc4 	bl	8004780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	68ba      	ldr	r2, [r7, #8]
 8005dfe:	9202      	str	r2, [sp, #8]
 8005e00:	9301      	str	r3, [sp, #4]
 8005e02:	2300      	movs	r3, #0
 8005e04:	9300      	str	r3, [sp, #0]
 8005e06:	2300      	movs	r3, #0
 8005e08:	460a      	mov	r2, r1
 8005e0a:	4924      	ldr	r1, [pc, #144]	; (8005e9c <vTaskStartScheduler+0xc0>)
 8005e0c:	4824      	ldr	r0, [pc, #144]	; (8005ea0 <vTaskStartScheduler+0xc4>)
 8005e0e:	f7ff fdf9 	bl	8005a04 <xTaskCreateStatic>
 8005e12:	4603      	mov	r3, r0
 8005e14:	4a23      	ldr	r2, [pc, #140]	; (8005ea4 <vTaskStartScheduler+0xc8>)
 8005e16:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005e18:	4b22      	ldr	r3, [pc, #136]	; (8005ea4 <vTaskStartScheduler+0xc8>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d002      	beq.n	8005e26 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005e20:	2301      	movs	r3, #1
 8005e22:	617b      	str	r3, [r7, #20]
 8005e24:	e001      	b.n	8005e2a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005e26:	2300      	movs	r3, #0
 8005e28:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	2b01      	cmp	r3, #1
 8005e2e:	d102      	bne.n	8005e36 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005e30:	f000 fe0e 	bl	8006a50 <xTimerCreateTimerTask>
 8005e34:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d11b      	bne.n	8005e74 <vTaskStartScheduler+0x98>
	__asm volatile
 8005e3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e40:	f383 8811 	msr	BASEPRI, r3
 8005e44:	f3bf 8f6f 	isb	sy
 8005e48:	f3bf 8f4f 	dsb	sy
 8005e4c:	613b      	str	r3, [r7, #16]
}
 8005e4e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005e50:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <vTaskStartScheduler+0xcc>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	3354      	adds	r3, #84	; 0x54
 8005e56:	4a15      	ldr	r2, [pc, #84]	; (8005eac <vTaskStartScheduler+0xd0>)
 8005e58:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005e5a:	4b15      	ldr	r3, [pc, #84]	; (8005eb0 <vTaskStartScheduler+0xd4>)
 8005e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e60:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005e62:	4b14      	ldr	r3, [pc, #80]	; (8005eb4 <vTaskStartScheduler+0xd8>)
 8005e64:	2201      	movs	r2, #1
 8005e66:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005e68:	4b13      	ldr	r3, [pc, #76]	; (8005eb8 <vTaskStartScheduler+0xdc>)
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005e6e:	f001 faaf 	bl	80073d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005e72:	e00e      	b.n	8005e92 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005e74:	697b      	ldr	r3, [r7, #20]
 8005e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e7a:	d10a      	bne.n	8005e92 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e80:	f383 8811 	msr	BASEPRI, r3
 8005e84:	f3bf 8f6f 	isb	sy
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	60fb      	str	r3, [r7, #12]
}
 8005e8e:	bf00      	nop
 8005e90:	e7fe      	b.n	8005e90 <vTaskStartScheduler+0xb4>
}
 8005e92:	bf00      	nop
 8005e94:	3718      	adds	r7, #24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	bd80      	pop	{r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	08008b3c 	.word	0x08008b3c
 8005ea0:	080064e1 	.word	0x080064e1
 8005ea4:	20000e68 	.word	0x20000e68
 8005ea8:	20000970 	.word	0x20000970
 8005eac:	2000006c 	.word	0x2000006c
 8005eb0:	20000e64 	.word	0x20000e64
 8005eb4:	20000e50 	.word	0x20000e50
 8005eb8:	20000e48 	.word	0x20000e48

08005ebc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ec0:	4b04      	ldr	r3, [pc, #16]	; (8005ed4 <vTaskSuspendAll+0x18>)
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	4a03      	ldr	r2, [pc, #12]	; (8005ed4 <vTaskSuspendAll+0x18>)
 8005ec8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005eca:	bf00      	nop
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed2:	4770      	bx	lr
 8005ed4:	20000e6c 	.word	0x20000e6c

08005ed8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005ede:	2300      	movs	r3, #0
 8005ee0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005ee6:	4b42      	ldr	r3, [pc, #264]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d10a      	bne.n	8005f04 <xTaskResumeAll+0x2c>
	__asm volatile
 8005eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ef2:	f383 8811 	msr	BASEPRI, r3
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	603b      	str	r3, [r7, #0]
}
 8005f00:	bf00      	nop
 8005f02:	e7fe      	b.n	8005f02 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005f04:	f001 fb06 	bl	8007514 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005f08:	4b39      	ldr	r3, [pc, #228]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	3b01      	subs	r3, #1
 8005f0e:	4a38      	ldr	r2, [pc, #224]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005f10:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f12:	4b37      	ldr	r3, [pc, #220]	; (8005ff0 <xTaskResumeAll+0x118>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d162      	bne.n	8005fe0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005f1a:	4b36      	ldr	r3, [pc, #216]	; (8005ff4 <xTaskResumeAll+0x11c>)
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d05e      	beq.n	8005fe0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f22:	e02f      	b.n	8005f84 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f24:	4b34      	ldr	r3, [pc, #208]	; (8005ff8 <xTaskResumeAll+0x120>)
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	68db      	ldr	r3, [r3, #12]
 8005f2a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	3318      	adds	r3, #24
 8005f30:	4618      	mov	r0, r3
 8005f32:	f7fe fce3 	bl	80048fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	3304      	adds	r3, #4
 8005f3a:	4618      	mov	r0, r3
 8005f3c:	f7fe fcde 	bl	80048fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f44:	4b2d      	ldr	r3, [pc, #180]	; (8005ffc <xTaskResumeAll+0x124>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	429a      	cmp	r2, r3
 8005f4a:	d903      	bls.n	8005f54 <xTaskResumeAll+0x7c>
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	4a2a      	ldr	r2, [pc, #168]	; (8005ffc <xTaskResumeAll+0x124>)
 8005f52:	6013      	str	r3, [r2, #0]
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f58:	4613      	mov	r3, r2
 8005f5a:	009b      	lsls	r3, r3, #2
 8005f5c:	4413      	add	r3, r2
 8005f5e:	009b      	lsls	r3, r3, #2
 8005f60:	4a27      	ldr	r2, [pc, #156]	; (8006000 <xTaskResumeAll+0x128>)
 8005f62:	441a      	add	r2, r3
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4619      	mov	r1, r3
 8005f6a:	4610      	mov	r0, r2
 8005f6c:	f7fe fc69 	bl	8004842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f74:	4b23      	ldr	r3, [pc, #140]	; (8006004 <xTaskResumeAll+0x12c>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f7a:	429a      	cmp	r2, r3
 8005f7c:	d302      	bcc.n	8005f84 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005f7e:	4b22      	ldr	r3, [pc, #136]	; (8006008 <xTaskResumeAll+0x130>)
 8005f80:	2201      	movs	r2, #1
 8005f82:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005f84:	4b1c      	ldr	r3, [pc, #112]	; (8005ff8 <xTaskResumeAll+0x120>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d1cb      	bne.n	8005f24 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d001      	beq.n	8005f96 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005f92:	f000 fb5f 	bl	8006654 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005f96:	4b1d      	ldr	r3, [pc, #116]	; (800600c <xTaskResumeAll+0x134>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d010      	beq.n	8005fc4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005fa2:	f000 f847 	bl	8006034 <xTaskIncrementTick>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d002      	beq.n	8005fb2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005fac:	4b16      	ldr	r3, [pc, #88]	; (8006008 <xTaskResumeAll+0x130>)
 8005fae:	2201      	movs	r2, #1
 8005fb0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	3b01      	subs	r3, #1
 8005fb6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d1f1      	bne.n	8005fa2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005fbe:	4b13      	ldr	r3, [pc, #76]	; (800600c <xTaskResumeAll+0x134>)
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005fc4:	4b10      	ldr	r3, [pc, #64]	; (8006008 <xTaskResumeAll+0x130>)
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d009      	beq.n	8005fe0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005fcc:	2301      	movs	r3, #1
 8005fce:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005fd0:	4b0f      	ldr	r3, [pc, #60]	; (8006010 <xTaskResumeAll+0x138>)
 8005fd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fd6:	601a      	str	r2, [r3, #0]
 8005fd8:	f3bf 8f4f 	dsb	sy
 8005fdc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005fe0:	f001 fac8 	bl	8007574 <vPortExitCritical>

	return xAlreadyYielded;
 8005fe4:	68bb      	ldr	r3, [r7, #8]
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3710      	adds	r7, #16
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000e6c 	.word	0x20000e6c
 8005ff4:	20000e44 	.word	0x20000e44
 8005ff8:	20000e04 	.word	0x20000e04
 8005ffc:	20000e4c 	.word	0x20000e4c
 8006000:	20000974 	.word	0x20000974
 8006004:	20000970 	.word	0x20000970
 8006008:	20000e58 	.word	0x20000e58
 800600c:	20000e54 	.word	0x20000e54
 8006010:	e000ed04 	.word	0xe000ed04

08006014 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800601a:	4b05      	ldr	r3, [pc, #20]	; (8006030 <xTaskGetTickCount+0x1c>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006020:	687b      	ldr	r3, [r7, #4]
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr
 800602e:	bf00      	nop
 8006030:	20000e48 	.word	0x20000e48

08006034 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b086      	sub	sp, #24
 8006038:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800603a:	2300      	movs	r3, #0
 800603c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800603e:	4b4f      	ldr	r3, [pc, #316]	; (800617c <xTaskIncrementTick+0x148>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	f040 808f 	bne.w	8006166 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006048:	4b4d      	ldr	r3, [pc, #308]	; (8006180 <xTaskIncrementTick+0x14c>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	3301      	adds	r3, #1
 800604e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006050:	4a4b      	ldr	r2, [pc, #300]	; (8006180 <xTaskIncrementTick+0x14c>)
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d120      	bne.n	800609e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800605c:	4b49      	ldr	r3, [pc, #292]	; (8006184 <xTaskIncrementTick+0x150>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	2b00      	cmp	r3, #0
 8006064:	d00a      	beq.n	800607c <xTaskIncrementTick+0x48>
	__asm volatile
 8006066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606a:	f383 8811 	msr	BASEPRI, r3
 800606e:	f3bf 8f6f 	isb	sy
 8006072:	f3bf 8f4f 	dsb	sy
 8006076:	603b      	str	r3, [r7, #0]
}
 8006078:	bf00      	nop
 800607a:	e7fe      	b.n	800607a <xTaskIncrementTick+0x46>
 800607c:	4b41      	ldr	r3, [pc, #260]	; (8006184 <xTaskIncrementTick+0x150>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	4b41      	ldr	r3, [pc, #260]	; (8006188 <xTaskIncrementTick+0x154>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	4a3f      	ldr	r2, [pc, #252]	; (8006184 <xTaskIncrementTick+0x150>)
 8006088:	6013      	str	r3, [r2, #0]
 800608a:	4a3f      	ldr	r2, [pc, #252]	; (8006188 <xTaskIncrementTick+0x154>)
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6013      	str	r3, [r2, #0]
 8006090:	4b3e      	ldr	r3, [pc, #248]	; (800618c <xTaskIncrementTick+0x158>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	3301      	adds	r3, #1
 8006096:	4a3d      	ldr	r2, [pc, #244]	; (800618c <xTaskIncrementTick+0x158>)
 8006098:	6013      	str	r3, [r2, #0]
 800609a:	f000 fadb 	bl	8006654 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800609e:	4b3c      	ldr	r3, [pc, #240]	; (8006190 <xTaskIncrementTick+0x15c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	693a      	ldr	r2, [r7, #16]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d349      	bcc.n	800613c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060a8:	4b36      	ldr	r3, [pc, #216]	; (8006184 <xTaskIncrementTick+0x150>)
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d104      	bne.n	80060bc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060b2:	4b37      	ldr	r3, [pc, #220]	; (8006190 <xTaskIncrementTick+0x15c>)
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295
 80060b8:	601a      	str	r2, [r3, #0]
					break;
 80060ba:	e03f      	b.n	800613c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060bc:	4b31      	ldr	r3, [pc, #196]	; (8006184 <xTaskIncrementTick+0x150>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80060c6:	68bb      	ldr	r3, [r7, #8]
 80060c8:	685b      	ldr	r3, [r3, #4]
 80060ca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80060cc:	693a      	ldr	r2, [r7, #16]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d203      	bcs.n	80060dc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80060d4:	4a2e      	ldr	r2, [pc, #184]	; (8006190 <xTaskIncrementTick+0x15c>)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80060da:	e02f      	b.n	800613c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	3304      	adds	r3, #4
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fe fc0b 	bl	80048fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d004      	beq.n	80060f8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	3318      	adds	r3, #24
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe fc02 	bl	80048fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060fc:	4b25      	ldr	r3, [pc, #148]	; (8006194 <xTaskIncrementTick+0x160>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d903      	bls.n	800610c <xTaskIncrementTick+0xd8>
 8006104:	68bb      	ldr	r3, [r7, #8]
 8006106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006108:	4a22      	ldr	r2, [pc, #136]	; (8006194 <xTaskIncrementTick+0x160>)
 800610a:	6013      	str	r3, [r2, #0]
 800610c:	68bb      	ldr	r3, [r7, #8]
 800610e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	4a1f      	ldr	r2, [pc, #124]	; (8006198 <xTaskIncrementTick+0x164>)
 800611a:	441a      	add	r2, r3
 800611c:	68bb      	ldr	r3, [r7, #8]
 800611e:	3304      	adds	r3, #4
 8006120:	4619      	mov	r1, r3
 8006122:	4610      	mov	r0, r2
 8006124:	f7fe fb8d 	bl	8004842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800612c:	4b1b      	ldr	r3, [pc, #108]	; (800619c <xTaskIncrementTick+0x168>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006132:	429a      	cmp	r2, r3
 8006134:	d3b8      	bcc.n	80060a8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006136:	2301      	movs	r3, #1
 8006138:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800613a:	e7b5      	b.n	80060a8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800613c:	4b17      	ldr	r3, [pc, #92]	; (800619c <xTaskIncrementTick+0x168>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006142:	4915      	ldr	r1, [pc, #84]	; (8006198 <xTaskIncrementTick+0x164>)
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	440b      	add	r3, r1
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	2b01      	cmp	r3, #1
 8006152:	d901      	bls.n	8006158 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006154:	2301      	movs	r3, #1
 8006156:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006158:	4b11      	ldr	r3, [pc, #68]	; (80061a0 <xTaskIncrementTick+0x16c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2b00      	cmp	r3, #0
 800615e:	d007      	beq.n	8006170 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006160:	2301      	movs	r3, #1
 8006162:	617b      	str	r3, [r7, #20]
 8006164:	e004      	b.n	8006170 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006166:	4b0f      	ldr	r3, [pc, #60]	; (80061a4 <xTaskIncrementTick+0x170>)
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	3301      	adds	r3, #1
 800616c:	4a0d      	ldr	r2, [pc, #52]	; (80061a4 <xTaskIncrementTick+0x170>)
 800616e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006170:	697b      	ldr	r3, [r7, #20]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000e6c 	.word	0x20000e6c
 8006180:	20000e48 	.word	0x20000e48
 8006184:	20000dfc 	.word	0x20000dfc
 8006188:	20000e00 	.word	0x20000e00
 800618c:	20000e5c 	.word	0x20000e5c
 8006190:	20000e64 	.word	0x20000e64
 8006194:	20000e4c 	.word	0x20000e4c
 8006198:	20000974 	.word	0x20000974
 800619c:	20000970 	.word	0x20000970
 80061a0:	20000e58 	.word	0x20000e58
 80061a4:	20000e54 	.word	0x20000e54

080061a8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80061a8:	b480      	push	{r7}
 80061aa:	b085      	sub	sp, #20
 80061ac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80061ae:	4b2a      	ldr	r3, [pc, #168]	; (8006258 <vTaskSwitchContext+0xb0>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d003      	beq.n	80061be <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80061b6:	4b29      	ldr	r3, [pc, #164]	; (800625c <vTaskSwitchContext+0xb4>)
 80061b8:	2201      	movs	r2, #1
 80061ba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80061bc:	e046      	b.n	800624c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80061be:	4b27      	ldr	r3, [pc, #156]	; (800625c <vTaskSwitchContext+0xb4>)
 80061c0:	2200      	movs	r2, #0
 80061c2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c4:	4b26      	ldr	r3, [pc, #152]	; (8006260 <vTaskSwitchContext+0xb8>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e010      	b.n	80061ee <vTaskSwitchContext+0x46>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d10a      	bne.n	80061e8 <vTaskSwitchContext+0x40>
	__asm volatile
 80061d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061d6:	f383 8811 	msr	BASEPRI, r3
 80061da:	f3bf 8f6f 	isb	sy
 80061de:	f3bf 8f4f 	dsb	sy
 80061e2:	607b      	str	r3, [r7, #4]
}
 80061e4:	bf00      	nop
 80061e6:	e7fe      	b.n	80061e6 <vTaskSwitchContext+0x3e>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3b01      	subs	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	491d      	ldr	r1, [pc, #116]	; (8006264 <vTaskSwitchContext+0xbc>)
 80061f0:	68fa      	ldr	r2, [r7, #12]
 80061f2:	4613      	mov	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	440b      	add	r3, r1
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d0e4      	beq.n	80061cc <vTaskSwitchContext+0x24>
 8006202:	68fa      	ldr	r2, [r7, #12]
 8006204:	4613      	mov	r3, r2
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	4413      	add	r3, r2
 800620a:	009b      	lsls	r3, r3, #2
 800620c:	4a15      	ldr	r2, [pc, #84]	; (8006264 <vTaskSwitchContext+0xbc>)
 800620e:	4413      	add	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	685a      	ldr	r2, [r3, #4]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	605a      	str	r2, [r3, #4]
 800621c:	68bb      	ldr	r3, [r7, #8]
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	3308      	adds	r3, #8
 8006224:	429a      	cmp	r2, r3
 8006226:	d104      	bne.n	8006232 <vTaskSwitchContext+0x8a>
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	685a      	ldr	r2, [r3, #4]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	605a      	str	r2, [r3, #4]
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	685b      	ldr	r3, [r3, #4]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	4a0b      	ldr	r2, [pc, #44]	; (8006268 <vTaskSwitchContext+0xc0>)
 800623a:	6013      	str	r3, [r2, #0]
 800623c:	4a08      	ldr	r2, [pc, #32]	; (8006260 <vTaskSwitchContext+0xb8>)
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006242:	4b09      	ldr	r3, [pc, #36]	; (8006268 <vTaskSwitchContext+0xc0>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3354      	adds	r3, #84	; 0x54
 8006248:	4a08      	ldr	r2, [pc, #32]	; (800626c <vTaskSwitchContext+0xc4>)
 800624a:	6013      	str	r3, [r2, #0]
}
 800624c:	bf00      	nop
 800624e:	3714      	adds	r7, #20
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr
 8006258:	20000e6c 	.word	0x20000e6c
 800625c:	20000e58 	.word	0x20000e58
 8006260:	20000e4c 	.word	0x20000e4c
 8006264:	20000974 	.word	0x20000974
 8006268:	20000970 	.word	0x20000970
 800626c:	2000006c 	.word	0x2000006c

08006270 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006270:	b580      	push	{r7, lr}
 8006272:	b084      	sub	sp, #16
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]
 8006278:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d10a      	bne.n	8006296 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006280:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006284:	f383 8811 	msr	BASEPRI, r3
 8006288:	f3bf 8f6f 	isb	sy
 800628c:	f3bf 8f4f 	dsb	sy
 8006290:	60fb      	str	r3, [r7, #12]
}
 8006292:	bf00      	nop
 8006294:	e7fe      	b.n	8006294 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006296:	4b07      	ldr	r3, [pc, #28]	; (80062b4 <vTaskPlaceOnEventList+0x44>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	3318      	adds	r3, #24
 800629c:	4619      	mov	r1, r3
 800629e:	6878      	ldr	r0, [r7, #4]
 80062a0:	f7fe faf3 	bl	800488a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80062a4:	2101      	movs	r1, #1
 80062a6:	6838      	ldr	r0, [r7, #0]
 80062a8:	f000 fb7e 	bl	80069a8 <prvAddCurrentTaskToDelayedList>
}
 80062ac:	bf00      	nop
 80062ae:	3710      	adds	r7, #16
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	20000970 	.word	0x20000970

080062b8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b086      	sub	sp, #24
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d10a      	bne.n	80062e0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80062ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ce:	f383 8811 	msr	BASEPRI, r3
 80062d2:	f3bf 8f6f 	isb	sy
 80062d6:	f3bf 8f4f 	dsb	sy
 80062da:	617b      	str	r3, [r7, #20]
}
 80062dc:	bf00      	nop
 80062de:	e7fe      	b.n	80062de <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80062e0:	4b0a      	ldr	r3, [pc, #40]	; (800630c <vTaskPlaceOnEventListRestricted+0x54>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	3318      	adds	r3, #24
 80062e6:	4619      	mov	r1, r3
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f7fe faaa 	bl	8004842 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80062f4:	f04f 33ff 	mov.w	r3, #4294967295
 80062f8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80062fa:	6879      	ldr	r1, [r7, #4]
 80062fc:	68b8      	ldr	r0, [r7, #8]
 80062fe:	f000 fb53 	bl	80069a8 <prvAddCurrentTaskToDelayedList>
	}
 8006302:	bf00      	nop
 8006304:	3718      	adds	r7, #24
 8006306:	46bd      	mov	sp, r7
 8006308:	bd80      	pop	{r7, pc}
 800630a:	bf00      	nop
 800630c:	20000970 	.word	0x20000970

08006310 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006310:	b580      	push	{r7, lr}
 8006312:	b086      	sub	sp, #24
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	68db      	ldr	r3, [r3, #12]
 800631e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d10a      	bne.n	800633c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632a:	f383 8811 	msr	BASEPRI, r3
 800632e:	f3bf 8f6f 	isb	sy
 8006332:	f3bf 8f4f 	dsb	sy
 8006336:	60fb      	str	r3, [r7, #12]
}
 8006338:	bf00      	nop
 800633a:	e7fe      	b.n	800633a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	3318      	adds	r3, #24
 8006340:	4618      	mov	r0, r3
 8006342:	f7fe fadb 	bl	80048fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006346:	4b1e      	ldr	r3, [pc, #120]	; (80063c0 <xTaskRemoveFromEventList+0xb0>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d11d      	bne.n	800638a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	3304      	adds	r3, #4
 8006352:	4618      	mov	r0, r3
 8006354:	f7fe fad2 	bl	80048fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800635c:	4b19      	ldr	r3, [pc, #100]	; (80063c4 <xTaskRemoveFromEventList+0xb4>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	429a      	cmp	r2, r3
 8006362:	d903      	bls.n	800636c <xTaskRemoveFromEventList+0x5c>
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006368:	4a16      	ldr	r2, [pc, #88]	; (80063c4 <xTaskRemoveFromEventList+0xb4>)
 800636a:	6013      	str	r3, [r2, #0]
 800636c:	693b      	ldr	r3, [r7, #16]
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	4613      	mov	r3, r2
 8006372:	009b      	lsls	r3, r3, #2
 8006374:	4413      	add	r3, r2
 8006376:	009b      	lsls	r3, r3, #2
 8006378:	4a13      	ldr	r2, [pc, #76]	; (80063c8 <xTaskRemoveFromEventList+0xb8>)
 800637a:	441a      	add	r2, r3
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	3304      	adds	r3, #4
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f7fe fa5d 	bl	8004842 <vListInsertEnd>
 8006388:	e005      	b.n	8006396 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	3318      	adds	r3, #24
 800638e:	4619      	mov	r1, r3
 8006390:	480e      	ldr	r0, [pc, #56]	; (80063cc <xTaskRemoveFromEventList+0xbc>)
 8006392:	f7fe fa56 	bl	8004842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800639a:	4b0d      	ldr	r3, [pc, #52]	; (80063d0 <xTaskRemoveFromEventList+0xc0>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a0:	429a      	cmp	r2, r3
 80063a2:	d905      	bls.n	80063b0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80063a4:	2301      	movs	r3, #1
 80063a6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80063a8:	4b0a      	ldr	r3, [pc, #40]	; (80063d4 <xTaskRemoveFromEventList+0xc4>)
 80063aa:	2201      	movs	r2, #1
 80063ac:	601a      	str	r2, [r3, #0]
 80063ae:	e001      	b.n	80063b4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80063b0:	2300      	movs	r3, #0
 80063b2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80063b4:	697b      	ldr	r3, [r7, #20]
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3718      	adds	r7, #24
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	20000e6c 	.word	0x20000e6c
 80063c4:	20000e4c 	.word	0x20000e4c
 80063c8:	20000974 	.word	0x20000974
 80063cc:	20000e04 	.word	0x20000e04
 80063d0:	20000970 	.word	0x20000970
 80063d4:	20000e58 	.word	0x20000e58

080063d8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80063d8:	b480      	push	{r7}
 80063da:	b083      	sub	sp, #12
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80063e0:	4b06      	ldr	r3, [pc, #24]	; (80063fc <vTaskInternalSetTimeOutState+0x24>)
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80063e8:	4b05      	ldr	r3, [pc, #20]	; (8006400 <vTaskInternalSetTimeOutState+0x28>)
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	605a      	str	r2, [r3, #4]
}
 80063f0:	bf00      	nop
 80063f2:	370c      	adds	r7, #12
 80063f4:	46bd      	mov	sp, r7
 80063f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fa:	4770      	bx	lr
 80063fc:	20000e5c 	.word	0x20000e5c
 8006400:	20000e48 	.word	0x20000e48

08006404 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b088      	sub	sp, #32
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d10a      	bne.n	800642a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006418:	f383 8811 	msr	BASEPRI, r3
 800641c:	f3bf 8f6f 	isb	sy
 8006420:	f3bf 8f4f 	dsb	sy
 8006424:	613b      	str	r3, [r7, #16]
}
 8006426:	bf00      	nop
 8006428:	e7fe      	b.n	8006428 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b00      	cmp	r3, #0
 800642e:	d10a      	bne.n	8006446 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006434:	f383 8811 	msr	BASEPRI, r3
 8006438:	f3bf 8f6f 	isb	sy
 800643c:	f3bf 8f4f 	dsb	sy
 8006440:	60fb      	str	r3, [r7, #12]
}
 8006442:	bf00      	nop
 8006444:	e7fe      	b.n	8006444 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006446:	f001 f865 	bl	8007514 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800644a:	4b1d      	ldr	r3, [pc, #116]	; (80064c0 <xTaskCheckForTimeOut+0xbc>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	69ba      	ldr	r2, [r7, #24]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006462:	d102      	bne.n	800646a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006464:	2300      	movs	r3, #0
 8006466:	61fb      	str	r3, [r7, #28]
 8006468:	e023      	b.n	80064b2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681a      	ldr	r2, [r3, #0]
 800646e:	4b15      	ldr	r3, [pc, #84]	; (80064c4 <xTaskCheckForTimeOut+0xc0>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	429a      	cmp	r2, r3
 8006474:	d007      	beq.n	8006486 <xTaskCheckForTimeOut+0x82>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	69ba      	ldr	r2, [r7, #24]
 800647c:	429a      	cmp	r2, r3
 800647e:	d302      	bcc.n	8006486 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006480:	2301      	movs	r3, #1
 8006482:	61fb      	str	r3, [r7, #28]
 8006484:	e015      	b.n	80064b2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	697a      	ldr	r2, [r7, #20]
 800648c:	429a      	cmp	r2, r3
 800648e:	d20b      	bcs.n	80064a8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	681a      	ldr	r2, [r3, #0]
 8006494:	697b      	ldr	r3, [r7, #20]
 8006496:	1ad2      	subs	r2, r2, r3
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f7ff ff9b 	bl	80063d8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064a2:	2300      	movs	r3, #0
 80064a4:	61fb      	str	r3, [r7, #28]
 80064a6:	e004      	b.n	80064b2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	2200      	movs	r2, #0
 80064ac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80064ae:	2301      	movs	r3, #1
 80064b0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80064b2:	f001 f85f 	bl	8007574 <vPortExitCritical>

	return xReturn;
 80064b6:	69fb      	ldr	r3, [r7, #28]
}
 80064b8:	4618      	mov	r0, r3
 80064ba:	3720      	adds	r7, #32
 80064bc:	46bd      	mov	sp, r7
 80064be:	bd80      	pop	{r7, pc}
 80064c0:	20000e48 	.word	0x20000e48
 80064c4:	20000e5c 	.word	0x20000e5c

080064c8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80064c8:	b480      	push	{r7}
 80064ca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80064cc:	4b03      	ldr	r3, [pc, #12]	; (80064dc <vTaskMissedYield+0x14>)
 80064ce:	2201      	movs	r2, #1
 80064d0:	601a      	str	r2, [r3, #0]
}
 80064d2:	bf00      	nop
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr
 80064dc:	20000e58 	.word	0x20000e58

080064e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80064e8:	f000 f852 	bl	8006590 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80064ec:	4b06      	ldr	r3, [pc, #24]	; (8006508 <prvIdleTask+0x28>)
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	2b01      	cmp	r3, #1
 80064f2:	d9f9      	bls.n	80064e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80064f4:	4b05      	ldr	r3, [pc, #20]	; (800650c <prvIdleTask+0x2c>)
 80064f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064fa:	601a      	str	r2, [r3, #0]
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006504:	e7f0      	b.n	80064e8 <prvIdleTask+0x8>
 8006506:	bf00      	nop
 8006508:	20000974 	.word	0x20000974
 800650c:	e000ed04 	.word	0xe000ed04

08006510 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b082      	sub	sp, #8
 8006514:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006516:	2300      	movs	r3, #0
 8006518:	607b      	str	r3, [r7, #4]
 800651a:	e00c      	b.n	8006536 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800651c:	687a      	ldr	r2, [r7, #4]
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4a12      	ldr	r2, [pc, #72]	; (8006570 <prvInitialiseTaskLists+0x60>)
 8006528:	4413      	add	r3, r2
 800652a:	4618      	mov	r0, r3
 800652c:	f7fe f95c 	bl	80047e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	3301      	adds	r3, #1
 8006534:	607b      	str	r3, [r7, #4]
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	2b37      	cmp	r3, #55	; 0x37
 800653a:	d9ef      	bls.n	800651c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800653c:	480d      	ldr	r0, [pc, #52]	; (8006574 <prvInitialiseTaskLists+0x64>)
 800653e:	f7fe f953 	bl	80047e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006542:	480d      	ldr	r0, [pc, #52]	; (8006578 <prvInitialiseTaskLists+0x68>)
 8006544:	f7fe f950 	bl	80047e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006548:	480c      	ldr	r0, [pc, #48]	; (800657c <prvInitialiseTaskLists+0x6c>)
 800654a:	f7fe f94d 	bl	80047e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800654e:	480c      	ldr	r0, [pc, #48]	; (8006580 <prvInitialiseTaskLists+0x70>)
 8006550:	f7fe f94a 	bl	80047e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006554:	480b      	ldr	r0, [pc, #44]	; (8006584 <prvInitialiseTaskLists+0x74>)
 8006556:	f7fe f947 	bl	80047e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800655a:	4b0b      	ldr	r3, [pc, #44]	; (8006588 <prvInitialiseTaskLists+0x78>)
 800655c:	4a05      	ldr	r2, [pc, #20]	; (8006574 <prvInitialiseTaskLists+0x64>)
 800655e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006560:	4b0a      	ldr	r3, [pc, #40]	; (800658c <prvInitialiseTaskLists+0x7c>)
 8006562:	4a05      	ldr	r2, [pc, #20]	; (8006578 <prvInitialiseTaskLists+0x68>)
 8006564:	601a      	str	r2, [r3, #0]
}
 8006566:	bf00      	nop
 8006568:	3708      	adds	r7, #8
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}
 800656e:	bf00      	nop
 8006570:	20000974 	.word	0x20000974
 8006574:	20000dd4 	.word	0x20000dd4
 8006578:	20000de8 	.word	0x20000de8
 800657c:	20000e04 	.word	0x20000e04
 8006580:	20000e18 	.word	0x20000e18
 8006584:	20000e30 	.word	0x20000e30
 8006588:	20000dfc 	.word	0x20000dfc
 800658c:	20000e00 	.word	0x20000e00

08006590 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006596:	e019      	b.n	80065cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006598:	f000 ffbc 	bl	8007514 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800659c:	4b10      	ldr	r3, [pc, #64]	; (80065e0 <prvCheckTasksWaitingTermination+0x50>)
 800659e:	68db      	ldr	r3, [r3, #12]
 80065a0:	68db      	ldr	r3, [r3, #12]
 80065a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	3304      	adds	r3, #4
 80065a8:	4618      	mov	r0, r3
 80065aa:	f7fe f9a7 	bl	80048fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065ae:	4b0d      	ldr	r3, [pc, #52]	; (80065e4 <prvCheckTasksWaitingTermination+0x54>)
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	3b01      	subs	r3, #1
 80065b4:	4a0b      	ldr	r2, [pc, #44]	; (80065e4 <prvCheckTasksWaitingTermination+0x54>)
 80065b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80065b8:	4b0b      	ldr	r3, [pc, #44]	; (80065e8 <prvCheckTasksWaitingTermination+0x58>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	3b01      	subs	r3, #1
 80065be:	4a0a      	ldr	r2, [pc, #40]	; (80065e8 <prvCheckTasksWaitingTermination+0x58>)
 80065c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80065c2:	f000 ffd7 	bl	8007574 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80065c6:	6878      	ldr	r0, [r7, #4]
 80065c8:	f000 f810 	bl	80065ec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065cc:	4b06      	ldr	r3, [pc, #24]	; (80065e8 <prvCheckTasksWaitingTermination+0x58>)
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1e1      	bne.n	8006598 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80065d4:	bf00      	nop
 80065d6:	bf00      	nop
 80065d8:	3708      	adds	r7, #8
 80065da:	46bd      	mov	sp, r7
 80065dc:	bd80      	pop	{r7, pc}
 80065de:	bf00      	nop
 80065e0:	20000e18 	.word	0x20000e18
 80065e4:	20000e44 	.word	0x20000e44
 80065e8:	20000e2c 	.word	0x20000e2c

080065ec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	3354      	adds	r3, #84	; 0x54
 80065f8:	4618      	mov	r0, r3
 80065fa:	f001 fbc7 	bl	8007d8c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006604:	2b00      	cmp	r3, #0
 8006606:	d108      	bne.n	800661a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800660c:	4618      	mov	r0, r3
 800660e:	f001 f96f 	bl	80078f0 <vPortFree>
				vPortFree( pxTCB );
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f001 f96c 	bl	80078f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006618:	e018      	b.n	800664c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006620:	2b01      	cmp	r3, #1
 8006622:	d103      	bne.n	800662c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f001 f963 	bl	80078f0 <vPortFree>
	}
 800662a:	e00f      	b.n	800664c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006632:	2b02      	cmp	r3, #2
 8006634:	d00a      	beq.n	800664c <prvDeleteTCB+0x60>
	__asm volatile
 8006636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800663a:	f383 8811 	msr	BASEPRI, r3
 800663e:	f3bf 8f6f 	isb	sy
 8006642:	f3bf 8f4f 	dsb	sy
 8006646:	60fb      	str	r3, [r7, #12]
}
 8006648:	bf00      	nop
 800664a:	e7fe      	b.n	800664a <prvDeleteTCB+0x5e>
	}
 800664c:	bf00      	nop
 800664e:	3710      	adds	r7, #16
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800665a:	4b0c      	ldr	r3, [pc, #48]	; (800668c <prvResetNextTaskUnblockTime+0x38>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d104      	bne.n	800666e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006664:	4b0a      	ldr	r3, [pc, #40]	; (8006690 <prvResetNextTaskUnblockTime+0x3c>)
 8006666:	f04f 32ff 	mov.w	r2, #4294967295
 800666a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800666c:	e008      	b.n	8006680 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800666e:	4b07      	ldr	r3, [pc, #28]	; (800668c <prvResetNextTaskUnblockTime+0x38>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	68db      	ldr	r3, [r3, #12]
 8006674:	68db      	ldr	r3, [r3, #12]
 8006676:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	685b      	ldr	r3, [r3, #4]
 800667c:	4a04      	ldr	r2, [pc, #16]	; (8006690 <prvResetNextTaskUnblockTime+0x3c>)
 800667e:	6013      	str	r3, [r2, #0]
}
 8006680:	bf00      	nop
 8006682:	370c      	adds	r7, #12
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	20000dfc 	.word	0x20000dfc
 8006690:	20000e64 	.word	0x20000e64

08006694 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006694:	b480      	push	{r7}
 8006696:	b083      	sub	sp, #12
 8006698:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800669a:	4b0b      	ldr	r3, [pc, #44]	; (80066c8 <xTaskGetSchedulerState+0x34>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d102      	bne.n	80066a8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066a2:	2301      	movs	r3, #1
 80066a4:	607b      	str	r3, [r7, #4]
 80066a6:	e008      	b.n	80066ba <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066a8:	4b08      	ldr	r3, [pc, #32]	; (80066cc <xTaskGetSchedulerState+0x38>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066b0:	2302      	movs	r3, #2
 80066b2:	607b      	str	r3, [r7, #4]
 80066b4:	e001      	b.n	80066ba <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066b6:	2300      	movs	r3, #0
 80066b8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066ba:	687b      	ldr	r3, [r7, #4]
	}
 80066bc:	4618      	mov	r0, r3
 80066be:	370c      	adds	r7, #12
 80066c0:	46bd      	mov	sp, r7
 80066c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c6:	4770      	bx	lr
 80066c8:	20000e50 	.word	0x20000e50
 80066cc:	20000e6c 	.word	0x20000e6c

080066d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b084      	sub	sp, #16
 80066d4:	af00      	add	r7, sp, #0
 80066d6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d051      	beq.n	800678a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066ea:	4b2a      	ldr	r3, [pc, #168]	; (8006794 <xTaskPriorityInherit+0xc4>)
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d241      	bcs.n	8006778 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	699b      	ldr	r3, [r3, #24]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	db06      	blt.n	800670a <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066fc:	4b25      	ldr	r3, [pc, #148]	; (8006794 <xTaskPriorityInherit+0xc4>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006702:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	6959      	ldr	r1, [r3, #20]
 800670e:	68bb      	ldr	r3, [r7, #8]
 8006710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006712:	4613      	mov	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4413      	add	r3, r2
 8006718:	009b      	lsls	r3, r3, #2
 800671a:	4a1f      	ldr	r2, [pc, #124]	; (8006798 <xTaskPriorityInherit+0xc8>)
 800671c:	4413      	add	r3, r2
 800671e:	4299      	cmp	r1, r3
 8006720:	d122      	bne.n	8006768 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	3304      	adds	r3, #4
 8006726:	4618      	mov	r0, r3
 8006728:	f7fe f8e8 	bl	80048fc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800672c:	4b19      	ldr	r3, [pc, #100]	; (8006794 <xTaskPriorityInherit+0xc4>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006736:	68bb      	ldr	r3, [r7, #8]
 8006738:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800673a:	4b18      	ldr	r3, [pc, #96]	; (800679c <xTaskPriorityInherit+0xcc>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d903      	bls.n	800674a <xTaskPriorityInherit+0x7a>
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006746:	4a15      	ldr	r2, [pc, #84]	; (800679c <xTaskPriorityInherit+0xcc>)
 8006748:	6013      	str	r3, [r2, #0]
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800674e:	4613      	mov	r3, r2
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	4413      	add	r3, r2
 8006754:	009b      	lsls	r3, r3, #2
 8006756:	4a10      	ldr	r2, [pc, #64]	; (8006798 <xTaskPriorityInherit+0xc8>)
 8006758:	441a      	add	r2, r3
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	3304      	adds	r3, #4
 800675e:	4619      	mov	r1, r3
 8006760:	4610      	mov	r0, r2
 8006762:	f7fe f86e 	bl	8004842 <vListInsertEnd>
 8006766:	e004      	b.n	8006772 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006768:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <xTaskPriorityInherit+0xc4>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006772:	2301      	movs	r3, #1
 8006774:	60fb      	str	r3, [r7, #12]
 8006776:	e008      	b.n	800678a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006778:	68bb      	ldr	r3, [r7, #8]
 800677a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800677c:	4b05      	ldr	r3, [pc, #20]	; (8006794 <xTaskPriorityInherit+0xc4>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006782:	429a      	cmp	r2, r3
 8006784:	d201      	bcs.n	800678a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006786:	2301      	movs	r3, #1
 8006788:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800678a:	68fb      	ldr	r3, [r7, #12]
	}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	20000970 	.word	0x20000970
 8006798:	20000974 	.word	0x20000974
 800679c:	20000e4c 	.word	0x20000e4c

080067a0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b086      	sub	sp, #24
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80067ac:	2300      	movs	r3, #0
 80067ae:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d056      	beq.n	8006864 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80067b6:	4b2e      	ldr	r3, [pc, #184]	; (8006870 <xTaskPriorityDisinherit+0xd0>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	429a      	cmp	r2, r3
 80067be:	d00a      	beq.n	80067d6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80067c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c4:	f383 8811 	msr	BASEPRI, r3
 80067c8:	f3bf 8f6f 	isb	sy
 80067cc:	f3bf 8f4f 	dsb	sy
 80067d0:	60fb      	str	r3, [r7, #12]
}
 80067d2:	bf00      	nop
 80067d4:	e7fe      	b.n	80067d4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10a      	bne.n	80067f4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80067de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067e2:	f383 8811 	msr	BASEPRI, r3
 80067e6:	f3bf 8f6f 	isb	sy
 80067ea:	f3bf 8f4f 	dsb	sy
 80067ee:	60bb      	str	r3, [r7, #8]
}
 80067f0:	bf00      	nop
 80067f2:	e7fe      	b.n	80067f2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80067f4:	693b      	ldr	r3, [r7, #16]
 80067f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80067f8:	1e5a      	subs	r2, r3, #1
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006806:	429a      	cmp	r2, r3
 8006808:	d02c      	beq.n	8006864 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800680a:	693b      	ldr	r3, [r7, #16]
 800680c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680e:	2b00      	cmp	r3, #0
 8006810:	d128      	bne.n	8006864 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	3304      	adds	r3, #4
 8006816:	4618      	mov	r0, r3
 8006818:	f7fe f870 	bl	80048fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006820:	693b      	ldr	r3, [r7, #16]
 8006822:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006828:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006830:	693b      	ldr	r3, [r7, #16]
 8006832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006834:	4b0f      	ldr	r3, [pc, #60]	; (8006874 <xTaskPriorityDisinherit+0xd4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	429a      	cmp	r2, r3
 800683a:	d903      	bls.n	8006844 <xTaskPriorityDisinherit+0xa4>
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006840:	4a0c      	ldr	r2, [pc, #48]	; (8006874 <xTaskPriorityDisinherit+0xd4>)
 8006842:	6013      	str	r3, [r2, #0]
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006848:	4613      	mov	r3, r2
 800684a:	009b      	lsls	r3, r3, #2
 800684c:	4413      	add	r3, r2
 800684e:	009b      	lsls	r3, r3, #2
 8006850:	4a09      	ldr	r2, [pc, #36]	; (8006878 <xTaskPriorityDisinherit+0xd8>)
 8006852:	441a      	add	r2, r3
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	3304      	adds	r3, #4
 8006858:	4619      	mov	r1, r3
 800685a:	4610      	mov	r0, r2
 800685c:	f7fd fff1 	bl	8004842 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006860:	2301      	movs	r3, #1
 8006862:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006864:	697b      	ldr	r3, [r7, #20]
	}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000970 	.word	0x20000970
 8006874:	20000e4c 	.word	0x20000e4c
 8006878:	20000974 	.word	0x20000974

0800687c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800687c:	b580      	push	{r7, lr}
 800687e:	b088      	sub	sp, #32
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
 8006884:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800688a:	2301      	movs	r3, #1
 800688c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d06a      	beq.n	800696a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006894:	69bb      	ldr	r3, [r7, #24]
 8006896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006898:	2b00      	cmp	r3, #0
 800689a:	d10a      	bne.n	80068b2 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800689c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a0:	f383 8811 	msr	BASEPRI, r3
 80068a4:	f3bf 8f6f 	isb	sy
 80068a8:	f3bf 8f4f 	dsb	sy
 80068ac:	60fb      	str	r3, [r7, #12]
}
 80068ae:	bf00      	nop
 80068b0:	e7fe      	b.n	80068b0 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068b6:	683a      	ldr	r2, [r7, #0]
 80068b8:	429a      	cmp	r2, r3
 80068ba:	d902      	bls.n	80068c2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	e002      	b.n	80068c8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80068c2:	69bb      	ldr	r3, [r7, #24]
 80068c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80068c6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	69fa      	ldr	r2, [r7, #28]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d04b      	beq.n	800696a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80068d2:	69bb      	ldr	r3, [r7, #24]
 80068d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d146      	bne.n	800696a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80068dc:	4b25      	ldr	r3, [pc, #148]	; (8006974 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	69ba      	ldr	r2, [r7, #24]
 80068e2:	429a      	cmp	r2, r3
 80068e4:	d10a      	bne.n	80068fc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80068e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ea:	f383 8811 	msr	BASEPRI, r3
 80068ee:	f3bf 8f6f 	isb	sy
 80068f2:	f3bf 8f4f 	dsb	sy
 80068f6:	60bb      	str	r3, [r7, #8]
}
 80068f8:	bf00      	nop
 80068fa:	e7fe      	b.n	80068fa <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80068fc:	69bb      	ldr	r3, [r7, #24]
 80068fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006900:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	69fa      	ldr	r2, [r7, #28]
 8006906:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006908:	69bb      	ldr	r3, [r7, #24]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	2b00      	cmp	r3, #0
 800690e:	db04      	blt.n	800691a <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006910:	69fb      	ldr	r3, [r7, #28]
 8006912:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800691a:	69bb      	ldr	r3, [r7, #24]
 800691c:	6959      	ldr	r1, [r3, #20]
 800691e:	693a      	ldr	r2, [r7, #16]
 8006920:	4613      	mov	r3, r2
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	4413      	add	r3, r2
 8006926:	009b      	lsls	r3, r3, #2
 8006928:	4a13      	ldr	r2, [pc, #76]	; (8006978 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800692a:	4413      	add	r3, r2
 800692c:	4299      	cmp	r1, r3
 800692e:	d11c      	bne.n	800696a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	3304      	adds	r3, #4
 8006934:	4618      	mov	r0, r3
 8006936:	f7fd ffe1 	bl	80048fc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800693e:	4b0f      	ldr	r3, [pc, #60]	; (800697c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	429a      	cmp	r2, r3
 8006944:	d903      	bls.n	800694e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006946:	69bb      	ldr	r3, [r7, #24]
 8006948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800694a:	4a0c      	ldr	r2, [pc, #48]	; (800697c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800694c:	6013      	str	r3, [r2, #0]
 800694e:	69bb      	ldr	r3, [r7, #24]
 8006950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006952:	4613      	mov	r3, r2
 8006954:	009b      	lsls	r3, r3, #2
 8006956:	4413      	add	r3, r2
 8006958:	009b      	lsls	r3, r3, #2
 800695a:	4a07      	ldr	r2, [pc, #28]	; (8006978 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800695c:	441a      	add	r2, r3
 800695e:	69bb      	ldr	r3, [r7, #24]
 8006960:	3304      	adds	r3, #4
 8006962:	4619      	mov	r1, r3
 8006964:	4610      	mov	r0, r2
 8006966:	f7fd ff6c 	bl	8004842 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800696a:	bf00      	nop
 800696c:	3720      	adds	r7, #32
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000970 	.word	0x20000970
 8006978:	20000974 	.word	0x20000974
 800697c:	20000e4c 	.word	0x20000e4c

08006980 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006980:	b480      	push	{r7}
 8006982:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006984:	4b07      	ldr	r3, [pc, #28]	; (80069a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	2b00      	cmp	r3, #0
 800698a:	d004      	beq.n	8006996 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800698c:	4b05      	ldr	r3, [pc, #20]	; (80069a4 <pvTaskIncrementMutexHeldCount+0x24>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006992:	3201      	adds	r2, #1
 8006994:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006996:	4b03      	ldr	r3, [pc, #12]	; (80069a4 <pvTaskIncrementMutexHeldCount+0x24>)
 8006998:	681b      	ldr	r3, [r3, #0]
	}
 800699a:	4618      	mov	r0, r3
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	20000970 	.word	0x20000970

080069a8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069a8:	b580      	push	{r7, lr}
 80069aa:	b084      	sub	sp, #16
 80069ac:	af00      	add	r7, sp, #0
 80069ae:	6078      	str	r0, [r7, #4]
 80069b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069b2:	4b21      	ldr	r3, [pc, #132]	; (8006a38 <prvAddCurrentTaskToDelayedList+0x90>)
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069b8:	4b20      	ldr	r3, [pc, #128]	; (8006a3c <prvAddCurrentTaskToDelayedList+0x94>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	3304      	adds	r3, #4
 80069be:	4618      	mov	r0, r3
 80069c0:	f7fd ff9c 	bl	80048fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069ca:	d10a      	bne.n	80069e2 <prvAddCurrentTaskToDelayedList+0x3a>
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d007      	beq.n	80069e2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069d2:	4b1a      	ldr	r3, [pc, #104]	; (8006a3c <prvAddCurrentTaskToDelayedList+0x94>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	3304      	adds	r3, #4
 80069d8:	4619      	mov	r1, r3
 80069da:	4819      	ldr	r0, [pc, #100]	; (8006a40 <prvAddCurrentTaskToDelayedList+0x98>)
 80069dc:	f7fd ff31 	bl	8004842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069e0:	e026      	b.n	8006a30 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	4413      	add	r3, r2
 80069e8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069ea:	4b14      	ldr	r3, [pc, #80]	; (8006a3c <prvAddCurrentTaskToDelayedList+0x94>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	68ba      	ldr	r2, [r7, #8]
 80069f0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069f2:	68ba      	ldr	r2, [r7, #8]
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d209      	bcs.n	8006a0e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069fa:	4b12      	ldr	r3, [pc, #72]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x9c>)
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	3304      	adds	r3, #4
 8006a04:	4619      	mov	r1, r3
 8006a06:	4610      	mov	r0, r2
 8006a08:	f7fd ff3f 	bl	800488a <vListInsert>
}
 8006a0c:	e010      	b.n	8006a30 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a0e:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <prvAddCurrentTaskToDelayedList+0x94>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	3304      	adds	r3, #4
 8006a18:	4619      	mov	r1, r3
 8006a1a:	4610      	mov	r0, r2
 8006a1c:	f7fd ff35 	bl	800488a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	68ba      	ldr	r2, [r7, #8]
 8006a26:	429a      	cmp	r2, r3
 8006a28:	d202      	bcs.n	8006a30 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a2a:	4a08      	ldr	r2, [pc, #32]	; (8006a4c <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a2c:	68bb      	ldr	r3, [r7, #8]
 8006a2e:	6013      	str	r3, [r2, #0]
}
 8006a30:	bf00      	nop
 8006a32:	3710      	adds	r7, #16
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000e48 	.word	0x20000e48
 8006a3c:	20000970 	.word	0x20000970
 8006a40:	20000e30 	.word	0x20000e30
 8006a44:	20000e00 	.word	0x20000e00
 8006a48:	20000dfc 	.word	0x20000dfc
 8006a4c:	20000e64 	.word	0x20000e64

08006a50 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08a      	sub	sp, #40	; 0x28
 8006a54:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a5a:	f000 fba1 	bl	80071a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a5e:	4b1c      	ldr	r3, [pc, #112]	; (8006ad0 <xTimerCreateTimerTask+0x80>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d021      	beq.n	8006aaa <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a66:	2300      	movs	r3, #0
 8006a68:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a6e:	1d3a      	adds	r2, r7, #4
 8006a70:	f107 0108 	add.w	r1, r7, #8
 8006a74:	f107 030c 	add.w	r3, r7, #12
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fd fe9b 	bl	80047b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a7e:	6879      	ldr	r1, [r7, #4]
 8006a80:	68bb      	ldr	r3, [r7, #8]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	9202      	str	r2, [sp, #8]
 8006a86:	9301      	str	r3, [sp, #4]
 8006a88:	2302      	movs	r3, #2
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	460a      	mov	r2, r1
 8006a90:	4910      	ldr	r1, [pc, #64]	; (8006ad4 <xTimerCreateTimerTask+0x84>)
 8006a92:	4811      	ldr	r0, [pc, #68]	; (8006ad8 <xTimerCreateTimerTask+0x88>)
 8006a94:	f7fe ffb6 	bl	8005a04 <xTaskCreateStatic>
 8006a98:	4603      	mov	r3, r0
 8006a9a:	4a10      	ldr	r2, [pc, #64]	; (8006adc <xTimerCreateTimerTask+0x8c>)
 8006a9c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006a9e:	4b0f      	ldr	r3, [pc, #60]	; (8006adc <xTimerCreateTimerTask+0x8c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006aaa:	697b      	ldr	r3, [r7, #20]
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d10a      	bne.n	8006ac6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab4:	f383 8811 	msr	BASEPRI, r3
 8006ab8:	f3bf 8f6f 	isb	sy
 8006abc:	f3bf 8f4f 	dsb	sy
 8006ac0:	613b      	str	r3, [r7, #16]
}
 8006ac2:	bf00      	nop
 8006ac4:	e7fe      	b.n	8006ac4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ac6:	697b      	ldr	r3, [r7, #20]
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3718      	adds	r7, #24
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}
 8006ad0:	20000ea0 	.word	0x20000ea0
 8006ad4:	08008b44 	.word	0x08008b44
 8006ad8:	08006d49 	.word	0x08006d49
 8006adc:	20000ea4 	.word	0x20000ea4

08006ae0 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b088      	sub	sp, #32
 8006ae4:	af02      	add	r7, sp, #8
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8006aee:	202c      	movs	r0, #44	; 0x2c
 8006af0:	f000 fe32 	bl	8007758 <pvPortMalloc>
 8006af4:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00d      	beq.n	8006b18 <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	2200      	movs	r2, #0
 8006b00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006b04:	697b      	ldr	r3, [r7, #20]
 8006b06:	9301      	str	r3, [sp, #4]
 8006b08:	6a3b      	ldr	r3, [r7, #32]
 8006b0a:	9300      	str	r3, [sp, #0]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	687a      	ldr	r2, [r7, #4]
 8006b10:	68b9      	ldr	r1, [r7, #8]
 8006b12:	68f8      	ldr	r0, [r7, #12]
 8006b14:	f000 f843 	bl	8006b9e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006b18:	697b      	ldr	r3, [r7, #20]
	}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	3718      	adds	r7, #24
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bd80      	pop	{r7, pc}

08006b22 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006b22:	b580      	push	{r7, lr}
 8006b24:	b08a      	sub	sp, #40	; 0x28
 8006b26:	af02      	add	r7, sp, #8
 8006b28:	60f8      	str	r0, [r7, #12]
 8006b2a:	60b9      	str	r1, [r7, #8]
 8006b2c:	607a      	str	r2, [r7, #4]
 8006b2e:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006b30:	232c      	movs	r3, #44	; 0x2c
 8006b32:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006b34:	693b      	ldr	r3, [r7, #16]
 8006b36:	2b2c      	cmp	r3, #44	; 0x2c
 8006b38:	d00a      	beq.n	8006b50 <xTimerCreateStatic+0x2e>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	61bb      	str	r3, [r7, #24]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006b50:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d10a      	bne.n	8006b6e <xTimerCreateStatic+0x4c>
	__asm volatile
 8006b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b5c:	f383 8811 	msr	BASEPRI, r3
 8006b60:	f3bf 8f6f 	isb	sy
 8006b64:	f3bf 8f4f 	dsb	sy
 8006b68:	617b      	str	r3, [r7, #20]
}
 8006b6a:	bf00      	nop
 8006b6c:	e7fe      	b.n	8006b6c <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b70:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006b72:	69fb      	ldr	r3, [r7, #28]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00d      	beq.n	8006b94 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	9301      	str	r3, [sp, #4]
 8006b84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	68f8      	ldr	r0, [r7, #12]
 8006b90:	f000 f805 	bl	8006b9e <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006b94:	69fb      	ldr	r3, [r7, #28]
	}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3720      	adds	r7, #32
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	bd80      	pop	{r7, pc}

08006b9e <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006b9e:	b580      	push	{r7, lr}
 8006ba0:	b086      	sub	sp, #24
 8006ba2:	af00      	add	r7, sp, #0
 8006ba4:	60f8      	str	r0, [r7, #12]
 8006ba6:	60b9      	str	r1, [r7, #8]
 8006ba8:	607a      	str	r2, [r7, #4]
 8006baa:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8006bac:	68bb      	ldr	r3, [r7, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8006bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bb6:	f383 8811 	msr	BASEPRI, r3
 8006bba:	f3bf 8f6f 	isb	sy
 8006bbe:	f3bf 8f4f 	dsb	sy
 8006bc2:	617b      	str	r3, [r7, #20]
}
 8006bc4:	bf00      	nop
 8006bc6:	e7fe      	b.n	8006bc6 <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d01e      	beq.n	8006c0c <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8006bce:	f000 fae7 	bl	80071a0 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8006bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 8006bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	683a      	ldr	r2, [r7, #0]
 8006be2:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8006be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be6:	6a3a      	ldr	r2, [r7, #32]
 8006be8:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 8006bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bec:	3304      	adds	r3, #4
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fd fe1a 	bl	8004828 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d008      	beq.n	8006c0c <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 8006bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c00:	f043 0304 	orr.w	r3, r3, #4
 8006c04:	b2da      	uxtb	r2, r3
 8006c06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c08:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006c0c:	bf00      	nop
 8006c0e:	3718      	adds	r7, #24
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08a      	sub	sp, #40	; 0x28
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
 8006c20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c22:	2300      	movs	r3, #0
 8006c24:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c26:	68fb      	ldr	r3, [r7, #12]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d10a      	bne.n	8006c42 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	623b      	str	r3, [r7, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	e7fe      	b.n	8006c40 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c42:	4b1a      	ldr	r3, [pc, #104]	; (8006cac <xTimerGenericCommand+0x98>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d02a      	beq.n	8006ca0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	2b05      	cmp	r3, #5
 8006c5a:	dc18      	bgt.n	8006c8e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c5c:	f7ff fd1a 	bl	8006694 <xTaskGetSchedulerState>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b02      	cmp	r3, #2
 8006c64:	d109      	bne.n	8006c7a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006c66:	4b11      	ldr	r3, [pc, #68]	; (8006cac <xTimerGenericCommand+0x98>)
 8006c68:	6818      	ldr	r0, [r3, #0]
 8006c6a:	f107 0110 	add.w	r1, r7, #16
 8006c6e:	2300      	movs	r3, #0
 8006c70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c72:	f7fe f861 	bl	8004d38 <xQueueGenericSend>
 8006c76:	6278      	str	r0, [r7, #36]	; 0x24
 8006c78:	e012      	b.n	8006ca0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c7a:	4b0c      	ldr	r3, [pc, #48]	; (8006cac <xTimerGenericCommand+0x98>)
 8006c7c:	6818      	ldr	r0, [r3, #0]
 8006c7e:	f107 0110 	add.w	r1, r7, #16
 8006c82:	2300      	movs	r3, #0
 8006c84:	2200      	movs	r2, #0
 8006c86:	f7fe f857 	bl	8004d38 <xQueueGenericSend>
 8006c8a:	6278      	str	r0, [r7, #36]	; 0x24
 8006c8c:	e008      	b.n	8006ca0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c8e:	4b07      	ldr	r3, [pc, #28]	; (8006cac <xTimerGenericCommand+0x98>)
 8006c90:	6818      	ldr	r0, [r3, #0]
 8006c92:	f107 0110 	add.w	r1, r7, #16
 8006c96:	2300      	movs	r3, #0
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	f7fe f94b 	bl	8004f34 <xQueueGenericSendFromISR>
 8006c9e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3728      	adds	r7, #40	; 0x28
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	20000ea0 	.word	0x20000ea0

08006cb0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b088      	sub	sp, #32
 8006cb4:	af02      	add	r7, sp, #8
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cba:	4b22      	ldr	r3, [pc, #136]	; (8006d44 <prvProcessExpiredTimer+0x94>)
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	68db      	ldr	r3, [r3, #12]
 8006cc2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	3304      	adds	r3, #4
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7fd fe17 	bl	80048fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cd4:	f003 0304 	and.w	r3, r3, #4
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d022      	beq.n	8006d22 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006cdc:	697b      	ldr	r3, [r7, #20]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	18d1      	adds	r1, r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	683a      	ldr	r2, [r7, #0]
 8006ce8:	6978      	ldr	r0, [r7, #20]
 8006cea:	f000 f8d1 	bl	8006e90 <prvInsertTimerInActiveList>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d01f      	beq.n	8006d34 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	9300      	str	r3, [sp, #0]
 8006cf8:	2300      	movs	r3, #0
 8006cfa:	687a      	ldr	r2, [r7, #4]
 8006cfc:	2100      	movs	r1, #0
 8006cfe:	6978      	ldr	r0, [r7, #20]
 8006d00:	f7ff ff88 	bl	8006c14 <xTimerGenericCommand>
 8006d04:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d06:	693b      	ldr	r3, [r7, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d113      	bne.n	8006d34 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006d0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d10:	f383 8811 	msr	BASEPRI, r3
 8006d14:	f3bf 8f6f 	isb	sy
 8006d18:	f3bf 8f4f 	dsb	sy
 8006d1c:	60fb      	str	r3, [r7, #12]
}
 8006d1e:	bf00      	nop
 8006d20:	e7fe      	b.n	8006d20 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d22:	697b      	ldr	r3, [r7, #20]
 8006d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d28:	f023 0301 	bic.w	r3, r3, #1
 8006d2c:	b2da      	uxtb	r2, r3
 8006d2e:	697b      	ldr	r3, [r7, #20]
 8006d30:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	6a1b      	ldr	r3, [r3, #32]
 8006d38:	6978      	ldr	r0, [r7, #20]
 8006d3a:	4798      	blx	r3
}
 8006d3c:	bf00      	nop
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}
 8006d44:	20000e98 	.word	0x20000e98

08006d48 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d50:	f107 0308 	add.w	r3, r7, #8
 8006d54:	4618      	mov	r0, r3
 8006d56:	f000 f857 	bl	8006e08 <prvGetNextExpireTime>
 8006d5a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 f803 	bl	8006d6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006d66:	f000 f8d5 	bl	8006f14 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d6a:	e7f1      	b.n	8006d50 <prvTimerTask+0x8>

08006d6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d76:	f7ff f8a1 	bl	8005ebc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d7a:	f107 0308 	add.w	r3, r7, #8
 8006d7e:	4618      	mov	r0, r3
 8006d80:	f000 f866 	bl	8006e50 <prvSampleTimeNow>
 8006d84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d130      	bne.n	8006dee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <prvProcessTimerOrBlockTask+0x3c>
 8006d92:	687a      	ldr	r2, [r7, #4]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	429a      	cmp	r2, r3
 8006d98:	d806      	bhi.n	8006da8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d9a:	f7ff f89d 	bl	8005ed8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d9e:	68f9      	ldr	r1, [r7, #12]
 8006da0:	6878      	ldr	r0, [r7, #4]
 8006da2:	f7ff ff85 	bl	8006cb0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006da6:	e024      	b.n	8006df2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d008      	beq.n	8006dc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dae:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <prvProcessTimerOrBlockTask+0x90>)
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d101      	bne.n	8006dbc <prvProcessTimerOrBlockTask+0x50>
 8006db8:	2301      	movs	r3, #1
 8006dba:	e000      	b.n	8006dbe <prvProcessTimerOrBlockTask+0x52>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006dc0:	4b0f      	ldr	r3, [pc, #60]	; (8006e00 <prvProcessTimerOrBlockTask+0x94>)
 8006dc2:	6818      	ldr	r0, [r3, #0]
 8006dc4:	687a      	ldr	r2, [r7, #4]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	683a      	ldr	r2, [r7, #0]
 8006dcc:	4619      	mov	r1, r3
 8006dce:	f7fe fde5 	bl	800599c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006dd2:	f7ff f881 	bl	8005ed8 <xTaskResumeAll>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d10a      	bne.n	8006df2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ddc:	4b09      	ldr	r3, [pc, #36]	; (8006e04 <prvProcessTimerOrBlockTask+0x98>)
 8006dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006de2:	601a      	str	r2, [r3, #0]
 8006de4:	f3bf 8f4f 	dsb	sy
 8006de8:	f3bf 8f6f 	isb	sy
}
 8006dec:	e001      	b.n	8006df2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006dee:	f7ff f873 	bl	8005ed8 <xTaskResumeAll>
}
 8006df2:	bf00      	nop
 8006df4:	3710      	adds	r7, #16
 8006df6:	46bd      	mov	sp, r7
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	bf00      	nop
 8006dfc:	20000e9c 	.word	0x20000e9c
 8006e00:	20000ea0 	.word	0x20000ea0
 8006e04:	e000ed04 	.word	0xe000ed04

08006e08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e10:	4b0e      	ldr	r3, [pc, #56]	; (8006e4c <prvGetNextExpireTime+0x44>)
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d101      	bne.n	8006e1e <prvGetNextExpireTime+0x16>
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	e000      	b.n	8006e20 <prvGetNextExpireTime+0x18>
 8006e1e:	2200      	movs	r2, #0
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d105      	bne.n	8006e38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e2c:	4b07      	ldr	r3, [pc, #28]	; (8006e4c <prvGetNextExpireTime+0x44>)
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	68db      	ldr	r3, [r3, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	60fb      	str	r3, [r7, #12]
 8006e36:	e001      	b.n	8006e3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e38:	2300      	movs	r3, #0
 8006e3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3714      	adds	r7, #20
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
 8006e4a:	bf00      	nop
 8006e4c:	20000e98 	.word	0x20000e98

08006e50 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e58:	f7ff f8dc 	bl	8006014 <xTaskGetTickCount>
 8006e5c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e5e:	4b0b      	ldr	r3, [pc, #44]	; (8006e8c <prvSampleTimeNow+0x3c>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	68fa      	ldr	r2, [r7, #12]
 8006e64:	429a      	cmp	r2, r3
 8006e66:	d205      	bcs.n	8006e74 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006e68:	f000 f936 	bl	80070d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2201      	movs	r2, #1
 8006e70:	601a      	str	r2, [r3, #0]
 8006e72:	e002      	b.n	8006e7a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2200      	movs	r2, #0
 8006e78:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e7a:	4a04      	ldr	r2, [pc, #16]	; (8006e8c <prvSampleTimeNow+0x3c>)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e80:	68fb      	ldr	r3, [r7, #12]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3710      	adds	r7, #16
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	20000ea8 	.word	0x20000ea8

08006e90 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	607a      	str	r2, [r7, #4]
 8006e9c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	68ba      	ldr	r2, [r7, #8]
 8006ea6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eae:	68ba      	ldr	r2, [r7, #8]
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d812      	bhi.n	8006edc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	429a      	cmp	r2, r3
 8006ec2:	d302      	bcc.n	8006eca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006ec4:	2301      	movs	r3, #1
 8006ec6:	617b      	str	r3, [r7, #20]
 8006ec8:	e01b      	b.n	8006f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006eca:	4b10      	ldr	r3, [pc, #64]	; (8006f0c <prvInsertTimerInActiveList+0x7c>)
 8006ecc:	681a      	ldr	r2, [r3, #0]
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3304      	adds	r3, #4
 8006ed2:	4619      	mov	r1, r3
 8006ed4:	4610      	mov	r0, r2
 8006ed6:	f7fd fcd8 	bl	800488a <vListInsert>
 8006eda:	e012      	b.n	8006f02 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006edc:	687a      	ldr	r2, [r7, #4]
 8006ede:	683b      	ldr	r3, [r7, #0]
 8006ee0:	429a      	cmp	r2, r3
 8006ee2:	d206      	bcs.n	8006ef2 <prvInsertTimerInActiveList+0x62>
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d302      	bcc.n	8006ef2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	617b      	str	r3, [r7, #20]
 8006ef0:	e007      	b.n	8006f02 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006ef2:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <prvInsertTimerInActiveList+0x80>)
 8006ef4:	681a      	ldr	r2, [r3, #0]
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3304      	adds	r3, #4
 8006efa:	4619      	mov	r1, r3
 8006efc:	4610      	mov	r0, r2
 8006efe:	f7fd fcc4 	bl	800488a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f02:	697b      	ldr	r3, [r7, #20]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	20000e9c 	.word	0x20000e9c
 8006f10:	20000e98 	.word	0x20000e98

08006f14 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b08e      	sub	sp, #56	; 0x38
 8006f18:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f1a:	e0ca      	b.n	80070b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	da18      	bge.n	8006f54 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f22:	1d3b      	adds	r3, r7, #4
 8006f24:	3304      	adds	r3, #4
 8006f26:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d10a      	bne.n	8006f44 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f32:	f383 8811 	msr	BASEPRI, r3
 8006f36:	f3bf 8f6f 	isb	sy
 8006f3a:	f3bf 8f4f 	dsb	sy
 8006f3e:	61fb      	str	r3, [r7, #28]
}
 8006f40:	bf00      	nop
 8006f42:	e7fe      	b.n	8006f42 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4a:	6850      	ldr	r0, [r2, #4]
 8006f4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f4e:	6892      	ldr	r2, [r2, #8]
 8006f50:	4611      	mov	r1, r2
 8006f52:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	f2c0 80ab 	blt.w	80070b2 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	695b      	ldr	r3, [r3, #20]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d004      	beq.n	8006f72 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	3304      	adds	r3, #4
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	f7fd fcc5 	bl	80048fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f72:	463b      	mov	r3, r7
 8006f74:	4618      	mov	r0, r3
 8006f76:	f7ff ff6b 	bl	8006e50 <prvSampleTimeNow>
 8006f7a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2b09      	cmp	r3, #9
 8006f80:	f200 8096 	bhi.w	80070b0 <prvProcessReceivedCommands+0x19c>
 8006f84:	a201      	add	r2, pc, #4	; (adr r2, 8006f8c <prvProcessReceivedCommands+0x78>)
 8006f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f8a:	bf00      	nop
 8006f8c:	08006fb5 	.word	0x08006fb5
 8006f90:	08006fb5 	.word	0x08006fb5
 8006f94:	08006fb5 	.word	0x08006fb5
 8006f98:	08007029 	.word	0x08007029
 8006f9c:	0800703d 	.word	0x0800703d
 8006fa0:	08007087 	.word	0x08007087
 8006fa4:	08006fb5 	.word	0x08006fb5
 8006fa8:	08006fb5 	.word	0x08006fb5
 8006fac:	08007029 	.word	0x08007029
 8006fb0:	0800703d 	.word	0x0800703d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fba:	f043 0301 	orr.w	r3, r3, #1
 8006fbe:	b2da      	uxtb	r2, r3
 8006fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006fc6:	68ba      	ldr	r2, [r7, #8]
 8006fc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fca:	699b      	ldr	r3, [r3, #24]
 8006fcc:	18d1      	adds	r1, r2, r3
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fd4:	f7ff ff5c 	bl	8006e90 <prvInsertTimerInActiveList>
 8006fd8:	4603      	mov	r3, r0
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d069      	beq.n	80070b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe0:	6a1b      	ldr	r3, [r3, #32]
 8006fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fe4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fec:	f003 0304 	and.w	r3, r3, #4
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d05e      	beq.n	80070b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ff4:	68ba      	ldr	r2, [r7, #8]
 8006ff6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ff8:	699b      	ldr	r3, [r3, #24]
 8006ffa:	441a      	add	r2, r3
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	9300      	str	r3, [sp, #0]
 8007000:	2300      	movs	r3, #0
 8007002:	2100      	movs	r1, #0
 8007004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007006:	f7ff fe05 	bl	8006c14 <xTimerGenericCommand>
 800700a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800700c:	6a3b      	ldr	r3, [r7, #32]
 800700e:	2b00      	cmp	r3, #0
 8007010:	d14f      	bne.n	80070b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007012:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007016:	f383 8811 	msr	BASEPRI, r3
 800701a:	f3bf 8f6f 	isb	sy
 800701e:	f3bf 8f4f 	dsb	sy
 8007022:	61bb      	str	r3, [r7, #24]
}
 8007024:	bf00      	nop
 8007026:	e7fe      	b.n	8007026 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800702e:	f023 0301 	bic.w	r3, r3, #1
 8007032:	b2da      	uxtb	r2, r3
 8007034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007036:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800703a:	e03a      	b.n	80070b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800703c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800703e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007042:	f043 0301 	orr.w	r3, r3, #1
 8007046:	b2da      	uxtb	r2, r3
 8007048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800704a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800704e:	68ba      	ldr	r2, [r7, #8]
 8007050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007052:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d10a      	bne.n	8007072 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800705c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007060:	f383 8811 	msr	BASEPRI, r3
 8007064:	f3bf 8f6f 	isb	sy
 8007068:	f3bf 8f4f 	dsb	sy
 800706c:	617b      	str	r3, [r7, #20]
}
 800706e:	bf00      	nop
 8007070:	e7fe      	b.n	8007070 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007074:	699a      	ldr	r2, [r3, #24]
 8007076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007078:	18d1      	adds	r1, r2, r3
 800707a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800707c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800707e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007080:	f7ff ff06 	bl	8006e90 <prvInsertTimerInActiveList>
					break;
 8007084:	e015      	b.n	80070b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007086:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007088:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800708c:	f003 0302 	and.w	r3, r3, #2
 8007090:	2b00      	cmp	r3, #0
 8007092:	d103      	bne.n	800709c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007094:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007096:	f000 fc2b 	bl	80078f0 <vPortFree>
 800709a:	e00a      	b.n	80070b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800709c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800709e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80070a2:	f023 0301 	bic.w	r3, r3, #1
 80070a6:	b2da      	uxtb	r2, r3
 80070a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070ae:	e000      	b.n	80070b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80070b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070b2:	4b08      	ldr	r3, [pc, #32]	; (80070d4 <prvProcessReceivedCommands+0x1c0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	1d39      	adds	r1, r7, #4
 80070b8:	2200      	movs	r2, #0
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fe f862 	bl	8005184 <xQueueReceive>
 80070c0:	4603      	mov	r3, r0
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	f47f af2a 	bne.w	8006f1c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80070c8:	bf00      	nop
 80070ca:	bf00      	nop
 80070cc:	3730      	adds	r7, #48	; 0x30
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000ea0 	.word	0x20000ea0

080070d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	b088      	sub	sp, #32
 80070dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80070de:	e048      	b.n	8007172 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80070e0:	4b2d      	ldr	r3, [pc, #180]	; (8007198 <prvSwitchTimerLists+0xc0>)
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68db      	ldr	r3, [r3, #12]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070ea:	4b2b      	ldr	r3, [pc, #172]	; (8007198 <prvSwitchTimerLists+0xc0>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68db      	ldr	r3, [r3, #12]
 80070f0:	68db      	ldr	r3, [r3, #12]
 80070f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3304      	adds	r3, #4
 80070f8:	4618      	mov	r0, r3
 80070fa:	f7fd fbff 	bl	80048fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	6a1b      	ldr	r3, [r3, #32]
 8007102:	68f8      	ldr	r0, [r7, #12]
 8007104:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800710c:	f003 0304 	and.w	r3, r3, #4
 8007110:	2b00      	cmp	r3, #0
 8007112:	d02e      	beq.n	8007172 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	699b      	ldr	r3, [r3, #24]
 8007118:	693a      	ldr	r2, [r7, #16]
 800711a:	4413      	add	r3, r2
 800711c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800711e:	68ba      	ldr	r2, [r7, #8]
 8007120:	693b      	ldr	r3, [r7, #16]
 8007122:	429a      	cmp	r2, r3
 8007124:	d90e      	bls.n	8007144 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	68ba      	ldr	r2, [r7, #8]
 800712a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007132:	4b19      	ldr	r3, [pc, #100]	; (8007198 <prvSwitchTimerLists+0xc0>)
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3304      	adds	r3, #4
 800713a:	4619      	mov	r1, r3
 800713c:	4610      	mov	r0, r2
 800713e:	f7fd fba4 	bl	800488a <vListInsert>
 8007142:	e016      	b.n	8007172 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007144:	2300      	movs	r3, #0
 8007146:	9300      	str	r3, [sp, #0]
 8007148:	2300      	movs	r3, #0
 800714a:	693a      	ldr	r2, [r7, #16]
 800714c:	2100      	movs	r1, #0
 800714e:	68f8      	ldr	r0, [r7, #12]
 8007150:	f7ff fd60 	bl	8006c14 <xTimerGenericCommand>
 8007154:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d10a      	bne.n	8007172 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	603b      	str	r3, [r7, #0]
}
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007172:	4b09      	ldr	r3, [pc, #36]	; (8007198 <prvSwitchTimerLists+0xc0>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1b1      	bne.n	80070e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800717c:	4b06      	ldr	r3, [pc, #24]	; (8007198 <prvSwitchTimerLists+0xc0>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007182:	4b06      	ldr	r3, [pc, #24]	; (800719c <prvSwitchTimerLists+0xc4>)
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	4a04      	ldr	r2, [pc, #16]	; (8007198 <prvSwitchTimerLists+0xc0>)
 8007188:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800718a:	4a04      	ldr	r2, [pc, #16]	; (800719c <prvSwitchTimerLists+0xc4>)
 800718c:	697b      	ldr	r3, [r7, #20]
 800718e:	6013      	str	r3, [r2, #0]
}
 8007190:	bf00      	nop
 8007192:	3718      	adds	r7, #24
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}
 8007198:	20000e98 	.word	0x20000e98
 800719c:	20000e9c 	.word	0x20000e9c

080071a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b082      	sub	sp, #8
 80071a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071a6:	f000 f9b5 	bl	8007514 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071aa:	4b15      	ldr	r3, [pc, #84]	; (8007200 <prvCheckForValidListAndQueue+0x60>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d120      	bne.n	80071f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071b2:	4814      	ldr	r0, [pc, #80]	; (8007204 <prvCheckForValidListAndQueue+0x64>)
 80071b4:	f7fd fb18 	bl	80047e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80071b8:	4813      	ldr	r0, [pc, #76]	; (8007208 <prvCheckForValidListAndQueue+0x68>)
 80071ba:	f7fd fb15 	bl	80047e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80071be:	4b13      	ldr	r3, [pc, #76]	; (800720c <prvCheckForValidListAndQueue+0x6c>)
 80071c0:	4a10      	ldr	r2, [pc, #64]	; (8007204 <prvCheckForValidListAndQueue+0x64>)
 80071c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80071c4:	4b12      	ldr	r3, [pc, #72]	; (8007210 <prvCheckForValidListAndQueue+0x70>)
 80071c6:	4a10      	ldr	r2, [pc, #64]	; (8007208 <prvCheckForValidListAndQueue+0x68>)
 80071c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80071ca:	2300      	movs	r3, #0
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	4b11      	ldr	r3, [pc, #68]	; (8007214 <prvCheckForValidListAndQueue+0x74>)
 80071d0:	4a11      	ldr	r2, [pc, #68]	; (8007218 <prvCheckForValidListAndQueue+0x78>)
 80071d2:	2110      	movs	r1, #16
 80071d4:	200a      	movs	r0, #10
 80071d6:	f7fd fc23 	bl	8004a20 <xQueueGenericCreateStatic>
 80071da:	4603      	mov	r3, r0
 80071dc:	4a08      	ldr	r2, [pc, #32]	; (8007200 <prvCheckForValidListAndQueue+0x60>)
 80071de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80071e0:	4b07      	ldr	r3, [pc, #28]	; (8007200 <prvCheckForValidListAndQueue+0x60>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d005      	beq.n	80071f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80071e8:	4b05      	ldr	r3, [pc, #20]	; (8007200 <prvCheckForValidListAndQueue+0x60>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	490b      	ldr	r1, [pc, #44]	; (800721c <prvCheckForValidListAndQueue+0x7c>)
 80071ee:	4618      	mov	r0, r3
 80071f0:	f7fe fb80 	bl	80058f4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80071f4:	f000 f9be 	bl	8007574 <vPortExitCritical>
}
 80071f8:	bf00      	nop
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}
 80071fe:	bf00      	nop
 8007200:	20000ea0 	.word	0x20000ea0
 8007204:	20000e70 	.word	0x20000e70
 8007208:	20000e84 	.word	0x20000e84
 800720c:	20000e98 	.word	0x20000e98
 8007210:	20000e9c 	.word	0x20000e9c
 8007214:	20000f4c 	.word	0x20000f4c
 8007218:	20000eac 	.word	0x20000eac
 800721c:	08008b4c 	.word	0x08008b4c

08007220 <xTimerIsTimerActive>:
/*-----------------------------------------------------------*/

BaseType_t xTimerIsTimerActive( TimerHandle_t xTimer )
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b086      	sub	sp, #24
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;
Timer_t *pxTimer = xTimer;
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	613b      	str	r3, [r7, #16]

	configASSERT( xTimer );
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <xTimerIsTimerActive+0x28>
	__asm volatile
 8007232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007236:	f383 8811 	msr	BASEPRI, r3
 800723a:	f3bf 8f6f 	isb	sy
 800723e:	f3bf 8f4f 	dsb	sy
 8007242:	60fb      	str	r3, [r7, #12]
}
 8007244:	bf00      	nop
 8007246:	e7fe      	b.n	8007246 <xTimerIsTimerActive+0x26>

	/* Is the timer in the list of active timers? */
	taskENTER_CRITICAL();
 8007248:	f000 f964 	bl	8007514 <vPortEnterCritical>
	{
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_ACTIVE ) == 0 )
 800724c:	693b      	ldr	r3, [r7, #16]
 800724e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	2b00      	cmp	r3, #0
 8007258:	d102      	bne.n	8007260 <xTimerIsTimerActive+0x40>
		{
			xReturn = pdFALSE;
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	e001      	b.n	8007264 <xTimerIsTimerActive+0x44>
		}
		else
		{
			xReturn = pdTRUE;
 8007260:	2301      	movs	r3, #1
 8007262:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8007264:	f000 f986 	bl	8007574 <vPortExitCritical>

	return xReturn;
 8007268:	697b      	ldr	r3, [r7, #20]
} /*lint !e818 Can't be pointer to const due to the typedef. */
 800726a:	4618      	mov	r0, r3
 800726c:	3718      	adds	r7, #24
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <pvTimerGetTimerID>:
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b086      	sub	sp, #24
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d10a      	bne.n	800729a <pvTimerGetTimerID+0x28>
	__asm volatile
 8007284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007288:	f383 8811 	msr	BASEPRI, r3
 800728c:	f3bf 8f6f 	isb	sy
 8007290:	f3bf 8f4f 	dsb	sy
 8007294:	60fb      	str	r3, [r7, #12]
}
 8007296:	bf00      	nop
 8007298:	e7fe      	b.n	8007298 <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 800729a:	f000 f93b 	bl	8007514 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	69db      	ldr	r3, [r3, #28]
 80072a2:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 80072a4:	f000 f966 	bl	8007574 <vPortExitCritical>

	return pvReturn;
 80072a8:	693b      	ldr	r3, [r7, #16]
}
 80072aa:	4618      	mov	r0, r3
 80072ac:	3718      	adds	r7, #24
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}
	...

080072b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80072b4:	b480      	push	{r7}
 80072b6:	b085      	sub	sp, #20
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	3b04      	subs	r3, #4
 80072c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80072cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	3b04      	subs	r3, #4
 80072d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	f023 0201 	bic.w	r2, r3, #1
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	3b04      	subs	r3, #4
 80072e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80072e4:	4a0c      	ldr	r2, [pc, #48]	; (8007318 <pxPortInitialiseStack+0x64>)
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3b14      	subs	r3, #20
 80072ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3b04      	subs	r3, #4
 80072fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f06f 0202 	mvn.w	r2, #2
 8007302:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3b20      	subs	r3, #32
 8007308:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800730a:	68fb      	ldr	r3, [r7, #12]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3714      	adds	r7, #20
 8007310:	46bd      	mov	sp, r7
 8007312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007316:	4770      	bx	lr
 8007318:	0800731d 	.word	0x0800731d

0800731c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800731c:	b480      	push	{r7}
 800731e:	b085      	sub	sp, #20
 8007320:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007322:	2300      	movs	r3, #0
 8007324:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007326:	4b12      	ldr	r3, [pc, #72]	; (8007370 <prvTaskExitError+0x54>)
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800732e:	d00a      	beq.n	8007346 <prvTaskExitError+0x2a>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	60fb      	str	r3, [r7, #12]
}
 8007342:	bf00      	nop
 8007344:	e7fe      	b.n	8007344 <prvTaskExitError+0x28>
	__asm volatile
 8007346:	f04f 0350 	mov.w	r3, #80	; 0x50
 800734a:	f383 8811 	msr	BASEPRI, r3
 800734e:	f3bf 8f6f 	isb	sy
 8007352:	f3bf 8f4f 	dsb	sy
 8007356:	60bb      	str	r3, [r7, #8]
}
 8007358:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800735a:	bf00      	nop
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	2b00      	cmp	r3, #0
 8007360:	d0fc      	beq.n	800735c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007362:	bf00      	nop
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	20000010 	.word	0x20000010
	...

08007380 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007380:	4b07      	ldr	r3, [pc, #28]	; (80073a0 <pxCurrentTCBConst2>)
 8007382:	6819      	ldr	r1, [r3, #0]
 8007384:	6808      	ldr	r0, [r1, #0]
 8007386:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800738a:	f380 8809 	msr	PSP, r0
 800738e:	f3bf 8f6f 	isb	sy
 8007392:	f04f 0000 	mov.w	r0, #0
 8007396:	f380 8811 	msr	BASEPRI, r0
 800739a:	4770      	bx	lr
 800739c:	f3af 8000 	nop.w

080073a0 <pxCurrentTCBConst2>:
 80073a0:	20000970 	.word	0x20000970
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80073a4:	bf00      	nop
 80073a6:	bf00      	nop

080073a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80073a8:	4808      	ldr	r0, [pc, #32]	; (80073cc <prvPortStartFirstTask+0x24>)
 80073aa:	6800      	ldr	r0, [r0, #0]
 80073ac:	6800      	ldr	r0, [r0, #0]
 80073ae:	f380 8808 	msr	MSP, r0
 80073b2:	f04f 0000 	mov.w	r0, #0
 80073b6:	f380 8814 	msr	CONTROL, r0
 80073ba:	b662      	cpsie	i
 80073bc:	b661      	cpsie	f
 80073be:	f3bf 8f4f 	dsb	sy
 80073c2:	f3bf 8f6f 	isb	sy
 80073c6:	df00      	svc	0
 80073c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80073ca:	bf00      	nop
 80073cc:	e000ed08 	.word	0xe000ed08

080073d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80073d6:	4b46      	ldr	r3, [pc, #280]	; (80074f0 <xPortStartScheduler+0x120>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	4a46      	ldr	r2, [pc, #280]	; (80074f4 <xPortStartScheduler+0x124>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10a      	bne.n	80073f6 <xPortStartScheduler+0x26>
	__asm volatile
 80073e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073e4:	f383 8811 	msr	BASEPRI, r3
 80073e8:	f3bf 8f6f 	isb	sy
 80073ec:	f3bf 8f4f 	dsb	sy
 80073f0:	613b      	str	r3, [r7, #16]
}
 80073f2:	bf00      	nop
 80073f4:	e7fe      	b.n	80073f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80073f6:	4b3e      	ldr	r3, [pc, #248]	; (80074f0 <xPortStartScheduler+0x120>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a3f      	ldr	r2, [pc, #252]	; (80074f8 <xPortStartScheduler+0x128>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d10a      	bne.n	8007416 <xPortStartScheduler+0x46>
	__asm volatile
 8007400:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007404:	f383 8811 	msr	BASEPRI, r3
 8007408:	f3bf 8f6f 	isb	sy
 800740c:	f3bf 8f4f 	dsb	sy
 8007410:	60fb      	str	r3, [r7, #12]
}
 8007412:	bf00      	nop
 8007414:	e7fe      	b.n	8007414 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007416:	4b39      	ldr	r3, [pc, #228]	; (80074fc <xPortStartScheduler+0x12c>)
 8007418:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	781b      	ldrb	r3, [r3, #0]
 800741e:	b2db      	uxtb	r3, r3
 8007420:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	22ff      	movs	r2, #255	; 0xff
 8007426:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	b2db      	uxtb	r3, r3
 800742e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007430:	78fb      	ldrb	r3, [r7, #3]
 8007432:	b2db      	uxtb	r3, r3
 8007434:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007438:	b2da      	uxtb	r2, r3
 800743a:	4b31      	ldr	r3, [pc, #196]	; (8007500 <xPortStartScheduler+0x130>)
 800743c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800743e:	4b31      	ldr	r3, [pc, #196]	; (8007504 <xPortStartScheduler+0x134>)
 8007440:	2207      	movs	r2, #7
 8007442:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007444:	e009      	b.n	800745a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007446:	4b2f      	ldr	r3, [pc, #188]	; (8007504 <xPortStartScheduler+0x134>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	3b01      	subs	r3, #1
 800744c:	4a2d      	ldr	r2, [pc, #180]	; (8007504 <xPortStartScheduler+0x134>)
 800744e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007450:	78fb      	ldrb	r3, [r7, #3]
 8007452:	b2db      	uxtb	r3, r3
 8007454:	005b      	lsls	r3, r3, #1
 8007456:	b2db      	uxtb	r3, r3
 8007458:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	b2db      	uxtb	r3, r3
 800745e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007462:	2b80      	cmp	r3, #128	; 0x80
 8007464:	d0ef      	beq.n	8007446 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007466:	4b27      	ldr	r3, [pc, #156]	; (8007504 <xPortStartScheduler+0x134>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f1c3 0307 	rsb	r3, r3, #7
 800746e:	2b04      	cmp	r3, #4
 8007470:	d00a      	beq.n	8007488 <xPortStartScheduler+0xb8>
	__asm volatile
 8007472:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007476:	f383 8811 	msr	BASEPRI, r3
 800747a:	f3bf 8f6f 	isb	sy
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	60bb      	str	r3, [r7, #8]
}
 8007484:	bf00      	nop
 8007486:	e7fe      	b.n	8007486 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007488:	4b1e      	ldr	r3, [pc, #120]	; (8007504 <xPortStartScheduler+0x134>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	021b      	lsls	r3, r3, #8
 800748e:	4a1d      	ldr	r2, [pc, #116]	; (8007504 <xPortStartScheduler+0x134>)
 8007490:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007492:	4b1c      	ldr	r3, [pc, #112]	; (8007504 <xPortStartScheduler+0x134>)
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800749a:	4a1a      	ldr	r2, [pc, #104]	; (8007504 <xPortStartScheduler+0x134>)
 800749c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	b2da      	uxtb	r2, r3
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80074a6:	4b18      	ldr	r3, [pc, #96]	; (8007508 <xPortStartScheduler+0x138>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4a17      	ldr	r2, [pc, #92]	; (8007508 <xPortStartScheduler+0x138>)
 80074ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80074b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80074b2:	4b15      	ldr	r3, [pc, #84]	; (8007508 <xPortStartScheduler+0x138>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	4a14      	ldr	r2, [pc, #80]	; (8007508 <xPortStartScheduler+0x138>)
 80074b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80074bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80074be:	f000 f8dd 	bl	800767c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80074c2:	4b12      	ldr	r3, [pc, #72]	; (800750c <xPortStartScheduler+0x13c>)
 80074c4:	2200      	movs	r2, #0
 80074c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80074c8:	f000 f8fc 	bl	80076c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80074cc:	4b10      	ldr	r3, [pc, #64]	; (8007510 <xPortStartScheduler+0x140>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0f      	ldr	r2, [pc, #60]	; (8007510 <xPortStartScheduler+0x140>)
 80074d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80074d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80074d8:	f7ff ff66 	bl	80073a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80074dc:	f7fe fe64 	bl	80061a8 <vTaskSwitchContext>
	prvTaskExitError();
 80074e0:	f7ff ff1c 	bl	800731c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80074e4:	2300      	movs	r3, #0
}
 80074e6:	4618      	mov	r0, r3
 80074e8:	3718      	adds	r7, #24
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}
 80074ee:	bf00      	nop
 80074f0:	e000ed00 	.word	0xe000ed00
 80074f4:	410fc271 	.word	0x410fc271
 80074f8:	410fc270 	.word	0x410fc270
 80074fc:	e000e400 	.word	0xe000e400
 8007500:	20000f9c 	.word	0x20000f9c
 8007504:	20000fa0 	.word	0x20000fa0
 8007508:	e000ed20 	.word	0xe000ed20
 800750c:	20000010 	.word	0x20000010
 8007510:	e000ef34 	.word	0xe000ef34

08007514 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007514:	b480      	push	{r7}
 8007516:	b083      	sub	sp, #12
 8007518:	af00      	add	r7, sp, #0
	__asm volatile
 800751a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800751e:	f383 8811 	msr	BASEPRI, r3
 8007522:	f3bf 8f6f 	isb	sy
 8007526:	f3bf 8f4f 	dsb	sy
 800752a:	607b      	str	r3, [r7, #4]
}
 800752c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800752e:	4b0f      	ldr	r3, [pc, #60]	; (800756c <vPortEnterCritical+0x58>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	3301      	adds	r3, #1
 8007534:	4a0d      	ldr	r2, [pc, #52]	; (800756c <vPortEnterCritical+0x58>)
 8007536:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007538:	4b0c      	ldr	r3, [pc, #48]	; (800756c <vPortEnterCritical+0x58>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	2b01      	cmp	r3, #1
 800753e:	d10f      	bne.n	8007560 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007540:	4b0b      	ldr	r3, [pc, #44]	; (8007570 <vPortEnterCritical+0x5c>)
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	b2db      	uxtb	r3, r3
 8007546:	2b00      	cmp	r3, #0
 8007548:	d00a      	beq.n	8007560 <vPortEnterCritical+0x4c>
	__asm volatile
 800754a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800754e:	f383 8811 	msr	BASEPRI, r3
 8007552:	f3bf 8f6f 	isb	sy
 8007556:	f3bf 8f4f 	dsb	sy
 800755a:	603b      	str	r3, [r7, #0]
}
 800755c:	bf00      	nop
 800755e:	e7fe      	b.n	800755e <vPortEnterCritical+0x4a>
	}
}
 8007560:	bf00      	nop
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	20000010 	.word	0x20000010
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800757a:	4b12      	ldr	r3, [pc, #72]	; (80075c4 <vPortExitCritical+0x50>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d10a      	bne.n	8007598 <vPortExitCritical+0x24>
	__asm volatile
 8007582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007586:	f383 8811 	msr	BASEPRI, r3
 800758a:	f3bf 8f6f 	isb	sy
 800758e:	f3bf 8f4f 	dsb	sy
 8007592:	607b      	str	r3, [r7, #4]
}
 8007594:	bf00      	nop
 8007596:	e7fe      	b.n	8007596 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007598:	4b0a      	ldr	r3, [pc, #40]	; (80075c4 <vPortExitCritical+0x50>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	3b01      	subs	r3, #1
 800759e:	4a09      	ldr	r2, [pc, #36]	; (80075c4 <vPortExitCritical+0x50>)
 80075a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80075a2:	4b08      	ldr	r3, [pc, #32]	; (80075c4 <vPortExitCritical+0x50>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d105      	bne.n	80075b6 <vPortExitCritical+0x42>
 80075aa:	2300      	movs	r3, #0
 80075ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	f383 8811 	msr	BASEPRI, r3
}
 80075b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80075b6:	bf00      	nop
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr
 80075c2:	bf00      	nop
 80075c4:	20000010 	.word	0x20000010
	...

080075d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80075d0:	f3ef 8009 	mrs	r0, PSP
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	4b15      	ldr	r3, [pc, #84]	; (8007630 <pxCurrentTCBConst>)
 80075da:	681a      	ldr	r2, [r3, #0]
 80075dc:	f01e 0f10 	tst.w	lr, #16
 80075e0:	bf08      	it	eq
 80075e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80075e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075ea:	6010      	str	r0, [r2, #0]
 80075ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80075f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80075f4:	f380 8811 	msr	BASEPRI, r0
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	f3bf 8f6f 	isb	sy
 8007600:	f7fe fdd2 	bl	80061a8 <vTaskSwitchContext>
 8007604:	f04f 0000 	mov.w	r0, #0
 8007608:	f380 8811 	msr	BASEPRI, r0
 800760c:	bc09      	pop	{r0, r3}
 800760e:	6819      	ldr	r1, [r3, #0]
 8007610:	6808      	ldr	r0, [r1, #0]
 8007612:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007616:	f01e 0f10 	tst.w	lr, #16
 800761a:	bf08      	it	eq
 800761c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007620:	f380 8809 	msr	PSP, r0
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	4770      	bx	lr
 800762a:	bf00      	nop
 800762c:	f3af 8000 	nop.w

08007630 <pxCurrentTCBConst>:
 8007630:	20000970 	.word	0x20000970
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007634:	bf00      	nop
 8007636:	bf00      	nop

08007638 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
	__asm volatile
 800763e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007642:	f383 8811 	msr	BASEPRI, r3
 8007646:	f3bf 8f6f 	isb	sy
 800764a:	f3bf 8f4f 	dsb	sy
 800764e:	607b      	str	r3, [r7, #4]
}
 8007650:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007652:	f7fe fcef 	bl	8006034 <xTaskIncrementTick>
 8007656:	4603      	mov	r3, r0
 8007658:	2b00      	cmp	r3, #0
 800765a:	d003      	beq.n	8007664 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800765c:	4b06      	ldr	r3, [pc, #24]	; (8007678 <xPortSysTickHandler+0x40>)
 800765e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007662:	601a      	str	r2, [r3, #0]
 8007664:	2300      	movs	r3, #0
 8007666:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	f383 8811 	msr	BASEPRI, r3
}
 800766e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007670:	bf00      	nop
 8007672:	3708      	adds	r7, #8
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	e000ed04 	.word	0xe000ed04

0800767c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800767c:	b480      	push	{r7}
 800767e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007680:	4b0b      	ldr	r3, [pc, #44]	; (80076b0 <vPortSetupTimerInterrupt+0x34>)
 8007682:	2200      	movs	r2, #0
 8007684:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007686:	4b0b      	ldr	r3, [pc, #44]	; (80076b4 <vPortSetupTimerInterrupt+0x38>)
 8007688:	2200      	movs	r2, #0
 800768a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800768c:	4b0a      	ldr	r3, [pc, #40]	; (80076b8 <vPortSetupTimerInterrupt+0x3c>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	4a0a      	ldr	r2, [pc, #40]	; (80076bc <vPortSetupTimerInterrupt+0x40>)
 8007692:	fba2 2303 	umull	r2, r3, r2, r3
 8007696:	099b      	lsrs	r3, r3, #6
 8007698:	4a09      	ldr	r2, [pc, #36]	; (80076c0 <vPortSetupTimerInterrupt+0x44>)
 800769a:	3b01      	subs	r3, #1
 800769c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800769e:	4b04      	ldr	r3, [pc, #16]	; (80076b0 <vPortSetupTimerInterrupt+0x34>)
 80076a0:	2207      	movs	r2, #7
 80076a2:	601a      	str	r2, [r3, #0]
}
 80076a4:	bf00      	nop
 80076a6:	46bd      	mov	sp, r7
 80076a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ac:	4770      	bx	lr
 80076ae:	bf00      	nop
 80076b0:	e000e010 	.word	0xe000e010
 80076b4:	e000e018 	.word	0xe000e018
 80076b8:	20000004 	.word	0x20000004
 80076bc:	10624dd3 	.word	0x10624dd3
 80076c0:	e000e014 	.word	0xe000e014

080076c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80076c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80076d4 <vPortEnableVFP+0x10>
 80076c8:	6801      	ldr	r1, [r0, #0]
 80076ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80076ce:	6001      	str	r1, [r0, #0]
 80076d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80076d2:	bf00      	nop
 80076d4:	e000ed88 	.word	0xe000ed88

080076d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80076de:	f3ef 8305 	mrs	r3, IPSR
 80076e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2b0f      	cmp	r3, #15
 80076e8:	d914      	bls.n	8007714 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80076ea:	4a17      	ldr	r2, [pc, #92]	; (8007748 <vPortValidateInterruptPriority+0x70>)
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	4413      	add	r3, r2
 80076f0:	781b      	ldrb	r3, [r3, #0]
 80076f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80076f4:	4b15      	ldr	r3, [pc, #84]	; (800774c <vPortValidateInterruptPriority+0x74>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	7afa      	ldrb	r2, [r7, #11]
 80076fa:	429a      	cmp	r2, r3
 80076fc:	d20a      	bcs.n	8007714 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	607b      	str	r3, [r7, #4]
}
 8007710:	bf00      	nop
 8007712:	e7fe      	b.n	8007712 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007714:	4b0e      	ldr	r3, [pc, #56]	; (8007750 <vPortValidateInterruptPriority+0x78>)
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800771c:	4b0d      	ldr	r3, [pc, #52]	; (8007754 <vPortValidateInterruptPriority+0x7c>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	429a      	cmp	r2, r3
 8007722:	d90a      	bls.n	800773a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007728:	f383 8811 	msr	BASEPRI, r3
 800772c:	f3bf 8f6f 	isb	sy
 8007730:	f3bf 8f4f 	dsb	sy
 8007734:	603b      	str	r3, [r7, #0]
}
 8007736:	bf00      	nop
 8007738:	e7fe      	b.n	8007738 <vPortValidateInterruptPriority+0x60>
	}
 800773a:	bf00      	nop
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	e000e3f0 	.word	0xe000e3f0
 800774c:	20000f9c 	.word	0x20000f9c
 8007750:	e000ed0c 	.word	0xe000ed0c
 8007754:	20000fa0 	.word	0x20000fa0

08007758 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b08a      	sub	sp, #40	; 0x28
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007760:	2300      	movs	r3, #0
 8007762:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007764:	f7fe fbaa 	bl	8005ebc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007768:	4b5b      	ldr	r3, [pc, #364]	; (80078d8 <pvPortMalloc+0x180>)
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d101      	bne.n	8007774 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007770:	f000 f920 	bl	80079b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007774:	4b59      	ldr	r3, [pc, #356]	; (80078dc <pvPortMalloc+0x184>)
 8007776:	681a      	ldr	r2, [r3, #0]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4013      	ands	r3, r2
 800777c:	2b00      	cmp	r3, #0
 800777e:	f040 8093 	bne.w	80078a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2b00      	cmp	r3, #0
 8007786:	d01d      	beq.n	80077c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007788:	2208      	movs	r2, #8
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	4413      	add	r3, r2
 800778e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	2b00      	cmp	r3, #0
 8007798:	d014      	beq.n	80077c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f023 0307 	bic.w	r3, r3, #7
 80077a0:	3308      	adds	r3, #8
 80077a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <pvPortMalloc+0x6c>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	617b      	str	r3, [r7, #20]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d06e      	beq.n	80078a8 <pvPortMalloc+0x150>
 80077ca:	4b45      	ldr	r3, [pc, #276]	; (80078e0 <pvPortMalloc+0x188>)
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	687a      	ldr	r2, [r7, #4]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d869      	bhi.n	80078a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80077d4:	4b43      	ldr	r3, [pc, #268]	; (80078e4 <pvPortMalloc+0x18c>)
 80077d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80077d8:	4b42      	ldr	r3, [pc, #264]	; (80078e4 <pvPortMalloc+0x18c>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077de:	e004      	b.n	80077ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80077e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80077e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80077ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077ec:	685b      	ldr	r3, [r3, #4]
 80077ee:	687a      	ldr	r2, [r7, #4]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d903      	bls.n	80077fc <pvPortMalloc+0xa4>
 80077f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d1f1      	bne.n	80077e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80077fc:	4b36      	ldr	r3, [pc, #216]	; (80078d8 <pvPortMalloc+0x180>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007802:	429a      	cmp	r2, r3
 8007804:	d050      	beq.n	80078a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007806:	6a3b      	ldr	r3, [r7, #32]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2208      	movs	r2, #8
 800780c:	4413      	add	r3, r2
 800780e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007810:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007812:	681a      	ldr	r2, [r3, #0]
 8007814:	6a3b      	ldr	r3, [r7, #32]
 8007816:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	1ad2      	subs	r2, r2, r3
 8007820:	2308      	movs	r3, #8
 8007822:	005b      	lsls	r3, r3, #1
 8007824:	429a      	cmp	r2, r3
 8007826:	d91f      	bls.n	8007868 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007828:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4413      	add	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	f003 0307 	and.w	r3, r3, #7
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00a      	beq.n	8007850 <pvPortMalloc+0xf8>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	613b      	str	r3, [r7, #16]
}
 800784c:	bf00      	nop
 800784e:	e7fe      	b.n	800784e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	1ad2      	subs	r2, r2, r3
 8007858:	69bb      	ldr	r3, [r7, #24]
 800785a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800785c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800785e:	687a      	ldr	r2, [r7, #4]
 8007860:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007862:	69b8      	ldr	r0, [r7, #24]
 8007864:	f000 f908 	bl	8007a78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007868:	4b1d      	ldr	r3, [pc, #116]	; (80078e0 <pvPortMalloc+0x188>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786e:	685b      	ldr	r3, [r3, #4]
 8007870:	1ad3      	subs	r3, r2, r3
 8007872:	4a1b      	ldr	r2, [pc, #108]	; (80078e0 <pvPortMalloc+0x188>)
 8007874:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007876:	4b1a      	ldr	r3, [pc, #104]	; (80078e0 <pvPortMalloc+0x188>)
 8007878:	681a      	ldr	r2, [r3, #0]
 800787a:	4b1b      	ldr	r3, [pc, #108]	; (80078e8 <pvPortMalloc+0x190>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	429a      	cmp	r2, r3
 8007880:	d203      	bcs.n	800788a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007882:	4b17      	ldr	r3, [pc, #92]	; (80078e0 <pvPortMalloc+0x188>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	4a18      	ldr	r2, [pc, #96]	; (80078e8 <pvPortMalloc+0x190>)
 8007888:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800788a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	4b13      	ldr	r3, [pc, #76]	; (80078dc <pvPortMalloc+0x184>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	431a      	orrs	r2, r3
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800789a:	2200      	movs	r2, #0
 800789c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800789e:	4b13      	ldr	r3, [pc, #76]	; (80078ec <pvPortMalloc+0x194>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	3301      	adds	r3, #1
 80078a4:	4a11      	ldr	r2, [pc, #68]	; (80078ec <pvPortMalloc+0x194>)
 80078a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80078a8:	f7fe fb16 	bl	8005ed8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80078ac:	69fb      	ldr	r3, [r7, #28]
 80078ae:	f003 0307 	and.w	r3, r3, #7
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <pvPortMalloc+0x174>
	__asm volatile
 80078b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078ba:	f383 8811 	msr	BASEPRI, r3
 80078be:	f3bf 8f6f 	isb	sy
 80078c2:	f3bf 8f4f 	dsb	sy
 80078c6:	60fb      	str	r3, [r7, #12]
}
 80078c8:	bf00      	nop
 80078ca:	e7fe      	b.n	80078ca <pvPortMalloc+0x172>
	return pvReturn;
 80078cc:	69fb      	ldr	r3, [r7, #28]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3728      	adds	r7, #40	; 0x28
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
 80078d6:	bf00      	nop
 80078d8:	20004a44 	.word	0x20004a44
 80078dc:	20004a58 	.word	0x20004a58
 80078e0:	20004a48 	.word	0x20004a48
 80078e4:	20004a3c 	.word	0x20004a3c
 80078e8:	20004a4c 	.word	0x20004a4c
 80078ec:	20004a50 	.word	0x20004a50

080078f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d04d      	beq.n	800799e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007902:	2308      	movs	r3, #8
 8007904:	425b      	negs	r3, r3
 8007906:	697a      	ldr	r2, [r7, #20]
 8007908:	4413      	add	r3, r2
 800790a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007910:	693b      	ldr	r3, [r7, #16]
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <vPortFree+0xb8>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4013      	ands	r3, r2
 800791a:	2b00      	cmp	r3, #0
 800791c:	d10a      	bne.n	8007934 <vPortFree+0x44>
	__asm volatile
 800791e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007922:	f383 8811 	msr	BASEPRI, r3
 8007926:	f3bf 8f6f 	isb	sy
 800792a:	f3bf 8f4f 	dsb	sy
 800792e:	60fb      	str	r3, [r7, #12]
}
 8007930:	bf00      	nop
 8007932:	e7fe      	b.n	8007932 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007934:	693b      	ldr	r3, [r7, #16]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d00a      	beq.n	8007952 <vPortFree+0x62>
	__asm volatile
 800793c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007940:	f383 8811 	msr	BASEPRI, r3
 8007944:	f3bf 8f6f 	isb	sy
 8007948:	f3bf 8f4f 	dsb	sy
 800794c:	60bb      	str	r3, [r7, #8]
}
 800794e:	bf00      	nop
 8007950:	e7fe      	b.n	8007950 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	685a      	ldr	r2, [r3, #4]
 8007956:	4b14      	ldr	r3, [pc, #80]	; (80079a8 <vPortFree+0xb8>)
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	4013      	ands	r3, r2
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01e      	beq.n	800799e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007960:	693b      	ldr	r3, [r7, #16]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d11a      	bne.n	800799e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007968:	693b      	ldr	r3, [r7, #16]
 800796a:	685a      	ldr	r2, [r3, #4]
 800796c:	4b0e      	ldr	r3, [pc, #56]	; (80079a8 <vPortFree+0xb8>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	43db      	mvns	r3, r3
 8007972:	401a      	ands	r2, r3
 8007974:	693b      	ldr	r3, [r7, #16]
 8007976:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007978:	f7fe faa0 	bl	8005ebc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	685a      	ldr	r2, [r3, #4]
 8007980:	4b0a      	ldr	r3, [pc, #40]	; (80079ac <vPortFree+0xbc>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	4413      	add	r3, r2
 8007986:	4a09      	ldr	r2, [pc, #36]	; (80079ac <vPortFree+0xbc>)
 8007988:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800798a:	6938      	ldr	r0, [r7, #16]
 800798c:	f000 f874 	bl	8007a78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007990:	4b07      	ldr	r3, [pc, #28]	; (80079b0 <vPortFree+0xc0>)
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	3301      	adds	r3, #1
 8007996:	4a06      	ldr	r2, [pc, #24]	; (80079b0 <vPortFree+0xc0>)
 8007998:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800799a:	f7fe fa9d 	bl	8005ed8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800799e:	bf00      	nop
 80079a0:	3718      	adds	r7, #24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	bd80      	pop	{r7, pc}
 80079a6:	bf00      	nop
 80079a8:	20004a58 	.word	0x20004a58
 80079ac:	20004a48 	.word	0x20004a48
 80079b0:	20004a54 	.word	0x20004a54

080079b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80079b4:	b480      	push	{r7}
 80079b6:	b085      	sub	sp, #20
 80079b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80079ba:	f643 2398 	movw	r3, #15000	; 0x3a98
 80079be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80079c0:	4b27      	ldr	r3, [pc, #156]	; (8007a60 <prvHeapInit+0xac>)
 80079c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	f003 0307 	and.w	r3, r3, #7
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d00c      	beq.n	80079e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	3307      	adds	r3, #7
 80079d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f023 0307 	bic.w	r3, r3, #7
 80079da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80079dc:	68ba      	ldr	r2, [r7, #8]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	1ad3      	subs	r3, r2, r3
 80079e2:	4a1f      	ldr	r2, [pc, #124]	; (8007a60 <prvHeapInit+0xac>)
 80079e4:	4413      	add	r3, r2
 80079e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80079ec:	4a1d      	ldr	r2, [pc, #116]	; (8007a64 <prvHeapInit+0xb0>)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80079f2:	4b1c      	ldr	r3, [pc, #112]	; (8007a64 <prvHeapInit+0xb0>)
 80079f4:	2200      	movs	r2, #0
 80079f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	4413      	add	r3, r2
 80079fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007a00:	2208      	movs	r2, #8
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	1a9b      	subs	r3, r3, r2
 8007a06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f023 0307 	bic.w	r3, r3, #7
 8007a0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	4a15      	ldr	r2, [pc, #84]	; (8007a68 <prvHeapInit+0xb4>)
 8007a14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <prvHeapInit+0xb4>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007a1e:	4b12      	ldr	r3, [pc, #72]	; (8007a68 <prvHeapInit+0xb4>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2200      	movs	r2, #0
 8007a24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	68fa      	ldr	r2, [r7, #12]
 8007a2e:	1ad2      	subs	r2, r2, r3
 8007a30:	683b      	ldr	r3, [r7, #0]
 8007a32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007a34:	4b0c      	ldr	r3, [pc, #48]	; (8007a68 <prvHeapInit+0xb4>)
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a3c:	683b      	ldr	r3, [r7, #0]
 8007a3e:	685b      	ldr	r3, [r3, #4]
 8007a40:	4a0a      	ldr	r2, [pc, #40]	; (8007a6c <prvHeapInit+0xb8>)
 8007a42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	4a09      	ldr	r2, [pc, #36]	; (8007a70 <prvHeapInit+0xbc>)
 8007a4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007a4c:	4b09      	ldr	r3, [pc, #36]	; (8007a74 <prvHeapInit+0xc0>)
 8007a4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007a52:	601a      	str	r2, [r3, #0]
}
 8007a54:	bf00      	nop
 8007a56:	3714      	adds	r7, #20
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a5e:	4770      	bx	lr
 8007a60:	20000fa4 	.word	0x20000fa4
 8007a64:	20004a3c 	.word	0x20004a3c
 8007a68:	20004a44 	.word	0x20004a44
 8007a6c:	20004a4c 	.word	0x20004a4c
 8007a70:	20004a48 	.word	0x20004a48
 8007a74:	20004a58 	.word	0x20004a58

08007a78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007a78:	b480      	push	{r7}
 8007a7a:	b085      	sub	sp, #20
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007a80:	4b28      	ldr	r3, [pc, #160]	; (8007b24 <prvInsertBlockIntoFreeList+0xac>)
 8007a82:	60fb      	str	r3, [r7, #12]
 8007a84:	e002      	b.n	8007a8c <prvInsertBlockIntoFreeList+0x14>
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	60fb      	str	r3, [r7, #12]
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	429a      	cmp	r2, r3
 8007a94:	d8f7      	bhi.n	8007a86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	68ba      	ldr	r2, [r7, #8]
 8007aa0:	4413      	add	r3, r2
 8007aa2:	687a      	ldr	r2, [r7, #4]
 8007aa4:	429a      	cmp	r2, r3
 8007aa6:	d108      	bne.n	8007aba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	685a      	ldr	r2, [r3, #4]
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	441a      	add	r2, r3
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	685b      	ldr	r3, [r3, #4]
 8007ac2:	68ba      	ldr	r2, [r7, #8]
 8007ac4:	441a      	add	r2, r3
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	429a      	cmp	r2, r3
 8007acc:	d118      	bne.n	8007b00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	4b15      	ldr	r3, [pc, #84]	; (8007b28 <prvInsertBlockIntoFreeList+0xb0>)
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	429a      	cmp	r2, r3
 8007ad8:	d00d      	beq.n	8007af6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	685a      	ldr	r2, [r3, #4]
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	441a      	add	r2, r3
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	681a      	ldr	r2, [r3, #0]
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	e008      	b.n	8007b08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007af6:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <prvInsertBlockIntoFreeList+0xb0>)
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	601a      	str	r2, [r3, #0]
 8007afe:	e003      	b.n	8007b08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	681a      	ldr	r2, [r3, #0]
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007b08:	68fa      	ldr	r2, [r7, #12]
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	429a      	cmp	r2, r3
 8007b0e:	d002      	beq.n	8007b16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	687a      	ldr	r2, [r7, #4]
 8007b14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007b16:	bf00      	nop
 8007b18:	3714      	adds	r7, #20
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop
 8007b24:	20004a3c 	.word	0x20004a3c
 8007b28:	20004a44 	.word	0x20004a44

08007b2c <std>:
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	b510      	push	{r4, lr}
 8007b30:	4604      	mov	r4, r0
 8007b32:	e9c0 3300 	strd	r3, r3, [r0]
 8007b36:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b3a:	6083      	str	r3, [r0, #8]
 8007b3c:	8181      	strh	r1, [r0, #12]
 8007b3e:	6643      	str	r3, [r0, #100]	; 0x64
 8007b40:	81c2      	strh	r2, [r0, #14]
 8007b42:	6183      	str	r3, [r0, #24]
 8007b44:	4619      	mov	r1, r3
 8007b46:	2208      	movs	r2, #8
 8007b48:	305c      	adds	r0, #92	; 0x5c
 8007b4a:	f000 f906 	bl	8007d5a <memset>
 8007b4e:	4b0d      	ldr	r3, [pc, #52]	; (8007b84 <std+0x58>)
 8007b50:	6263      	str	r3, [r4, #36]	; 0x24
 8007b52:	4b0d      	ldr	r3, [pc, #52]	; (8007b88 <std+0x5c>)
 8007b54:	62a3      	str	r3, [r4, #40]	; 0x28
 8007b56:	4b0d      	ldr	r3, [pc, #52]	; (8007b8c <std+0x60>)
 8007b58:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007b5a:	4b0d      	ldr	r3, [pc, #52]	; (8007b90 <std+0x64>)
 8007b5c:	6323      	str	r3, [r4, #48]	; 0x30
 8007b5e:	4b0d      	ldr	r3, [pc, #52]	; (8007b94 <std+0x68>)
 8007b60:	6224      	str	r4, [r4, #32]
 8007b62:	429c      	cmp	r4, r3
 8007b64:	d006      	beq.n	8007b74 <std+0x48>
 8007b66:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8007b6a:	4294      	cmp	r4, r2
 8007b6c:	d002      	beq.n	8007b74 <std+0x48>
 8007b6e:	33d0      	adds	r3, #208	; 0xd0
 8007b70:	429c      	cmp	r4, r3
 8007b72:	d105      	bne.n	8007b80 <std+0x54>
 8007b74:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b7c:	f000 b9bc 	b.w	8007ef8 <__retarget_lock_init_recursive>
 8007b80:	bd10      	pop	{r4, pc}
 8007b82:	bf00      	nop
 8007b84:	08007cd5 	.word	0x08007cd5
 8007b88:	08007cf7 	.word	0x08007cf7
 8007b8c:	08007d2f 	.word	0x08007d2f
 8007b90:	08007d53 	.word	0x08007d53
 8007b94:	20004a5c 	.word	0x20004a5c

08007b98 <stdio_exit_handler>:
 8007b98:	4a02      	ldr	r2, [pc, #8]	; (8007ba4 <stdio_exit_handler+0xc>)
 8007b9a:	4903      	ldr	r1, [pc, #12]	; (8007ba8 <stdio_exit_handler+0x10>)
 8007b9c:	4803      	ldr	r0, [pc, #12]	; (8007bac <stdio_exit_handler+0x14>)
 8007b9e:	f000 b869 	b.w	8007c74 <_fwalk_sglue>
 8007ba2:	bf00      	nop
 8007ba4:	20000014 	.word	0x20000014
 8007ba8:	080087c1 	.word	0x080087c1
 8007bac:	20000020 	.word	0x20000020

08007bb0 <cleanup_stdio>:
 8007bb0:	6841      	ldr	r1, [r0, #4]
 8007bb2:	4b0c      	ldr	r3, [pc, #48]	; (8007be4 <cleanup_stdio+0x34>)
 8007bb4:	4299      	cmp	r1, r3
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	4604      	mov	r4, r0
 8007bba:	d001      	beq.n	8007bc0 <cleanup_stdio+0x10>
 8007bbc:	f000 fe00 	bl	80087c0 <_fflush_r>
 8007bc0:	68a1      	ldr	r1, [r4, #8]
 8007bc2:	4b09      	ldr	r3, [pc, #36]	; (8007be8 <cleanup_stdio+0x38>)
 8007bc4:	4299      	cmp	r1, r3
 8007bc6:	d002      	beq.n	8007bce <cleanup_stdio+0x1e>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 fdf9 	bl	80087c0 <_fflush_r>
 8007bce:	68e1      	ldr	r1, [r4, #12]
 8007bd0:	4b06      	ldr	r3, [pc, #24]	; (8007bec <cleanup_stdio+0x3c>)
 8007bd2:	4299      	cmp	r1, r3
 8007bd4:	d004      	beq.n	8007be0 <cleanup_stdio+0x30>
 8007bd6:	4620      	mov	r0, r4
 8007bd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007bdc:	f000 bdf0 	b.w	80087c0 <_fflush_r>
 8007be0:	bd10      	pop	{r4, pc}
 8007be2:	bf00      	nop
 8007be4:	20004a5c 	.word	0x20004a5c
 8007be8:	20004ac4 	.word	0x20004ac4
 8007bec:	20004b2c 	.word	0x20004b2c

08007bf0 <global_stdio_init.part.0>:
 8007bf0:	b510      	push	{r4, lr}
 8007bf2:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <global_stdio_init.part.0+0x30>)
 8007bf4:	4c0b      	ldr	r4, [pc, #44]	; (8007c24 <global_stdio_init.part.0+0x34>)
 8007bf6:	4a0c      	ldr	r2, [pc, #48]	; (8007c28 <global_stdio_init.part.0+0x38>)
 8007bf8:	601a      	str	r2, [r3, #0]
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	2104      	movs	r1, #4
 8007c00:	f7ff ff94 	bl	8007b2c <std>
 8007c04:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007c08:	2201      	movs	r2, #1
 8007c0a:	2109      	movs	r1, #9
 8007c0c:	f7ff ff8e 	bl	8007b2c <std>
 8007c10:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007c14:	2202      	movs	r2, #2
 8007c16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c1a:	2112      	movs	r1, #18
 8007c1c:	f7ff bf86 	b.w	8007b2c <std>
 8007c20:	20004b94 	.word	0x20004b94
 8007c24:	20004a5c 	.word	0x20004a5c
 8007c28:	08007b99 	.word	0x08007b99

08007c2c <__sfp_lock_acquire>:
 8007c2c:	4801      	ldr	r0, [pc, #4]	; (8007c34 <__sfp_lock_acquire+0x8>)
 8007c2e:	f000 b964 	b.w	8007efa <__retarget_lock_acquire_recursive>
 8007c32:	bf00      	nop
 8007c34:	20004b9d 	.word	0x20004b9d

08007c38 <__sfp_lock_release>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__sfp_lock_release+0x8>)
 8007c3a:	f000 b95f 	b.w	8007efc <__retarget_lock_release_recursive>
 8007c3e:	bf00      	nop
 8007c40:	20004b9d 	.word	0x20004b9d

08007c44 <__sinit>:
 8007c44:	b510      	push	{r4, lr}
 8007c46:	4604      	mov	r4, r0
 8007c48:	f7ff fff0 	bl	8007c2c <__sfp_lock_acquire>
 8007c4c:	6a23      	ldr	r3, [r4, #32]
 8007c4e:	b11b      	cbz	r3, 8007c58 <__sinit+0x14>
 8007c50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c54:	f7ff bff0 	b.w	8007c38 <__sfp_lock_release>
 8007c58:	4b04      	ldr	r3, [pc, #16]	; (8007c6c <__sinit+0x28>)
 8007c5a:	6223      	str	r3, [r4, #32]
 8007c5c:	4b04      	ldr	r3, [pc, #16]	; (8007c70 <__sinit+0x2c>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d1f5      	bne.n	8007c50 <__sinit+0xc>
 8007c64:	f7ff ffc4 	bl	8007bf0 <global_stdio_init.part.0>
 8007c68:	e7f2      	b.n	8007c50 <__sinit+0xc>
 8007c6a:	bf00      	nop
 8007c6c:	08007bb1 	.word	0x08007bb1
 8007c70:	20004b94 	.word	0x20004b94

08007c74 <_fwalk_sglue>:
 8007c74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c78:	4607      	mov	r7, r0
 8007c7a:	4688      	mov	r8, r1
 8007c7c:	4614      	mov	r4, r2
 8007c7e:	2600      	movs	r6, #0
 8007c80:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007c84:	f1b9 0901 	subs.w	r9, r9, #1
 8007c88:	d505      	bpl.n	8007c96 <_fwalk_sglue+0x22>
 8007c8a:	6824      	ldr	r4, [r4, #0]
 8007c8c:	2c00      	cmp	r4, #0
 8007c8e:	d1f7      	bne.n	8007c80 <_fwalk_sglue+0xc>
 8007c90:	4630      	mov	r0, r6
 8007c92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007c96:	89ab      	ldrh	r3, [r5, #12]
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d907      	bls.n	8007cac <_fwalk_sglue+0x38>
 8007c9c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007ca0:	3301      	adds	r3, #1
 8007ca2:	d003      	beq.n	8007cac <_fwalk_sglue+0x38>
 8007ca4:	4629      	mov	r1, r5
 8007ca6:	4638      	mov	r0, r7
 8007ca8:	47c0      	blx	r8
 8007caa:	4306      	orrs	r6, r0
 8007cac:	3568      	adds	r5, #104	; 0x68
 8007cae:	e7e9      	b.n	8007c84 <_fwalk_sglue+0x10>

08007cb0 <iprintf>:
 8007cb0:	b40f      	push	{r0, r1, r2, r3}
 8007cb2:	b507      	push	{r0, r1, r2, lr}
 8007cb4:	4906      	ldr	r1, [pc, #24]	; (8007cd0 <iprintf+0x20>)
 8007cb6:	ab04      	add	r3, sp, #16
 8007cb8:	6808      	ldr	r0, [r1, #0]
 8007cba:	f853 2b04 	ldr.w	r2, [r3], #4
 8007cbe:	6881      	ldr	r1, [r0, #8]
 8007cc0:	9301      	str	r3, [sp, #4]
 8007cc2:	f000 fa4d 	bl	8008160 <_vfiprintf_r>
 8007cc6:	b003      	add	sp, #12
 8007cc8:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ccc:	b004      	add	sp, #16
 8007cce:	4770      	bx	lr
 8007cd0:	2000006c 	.word	0x2000006c

08007cd4 <__sread>:
 8007cd4:	b510      	push	{r4, lr}
 8007cd6:	460c      	mov	r4, r1
 8007cd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cdc:	f000 f8be 	bl	8007e5c <_read_r>
 8007ce0:	2800      	cmp	r0, #0
 8007ce2:	bfab      	itete	ge
 8007ce4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ce6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ce8:	181b      	addge	r3, r3, r0
 8007cea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007cee:	bfac      	ite	ge
 8007cf0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007cf2:	81a3      	strhlt	r3, [r4, #12]
 8007cf4:	bd10      	pop	{r4, pc}

08007cf6 <__swrite>:
 8007cf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cfa:	461f      	mov	r7, r3
 8007cfc:	898b      	ldrh	r3, [r1, #12]
 8007cfe:	05db      	lsls	r3, r3, #23
 8007d00:	4605      	mov	r5, r0
 8007d02:	460c      	mov	r4, r1
 8007d04:	4616      	mov	r6, r2
 8007d06:	d505      	bpl.n	8007d14 <__swrite+0x1e>
 8007d08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d0c:	2302      	movs	r3, #2
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f000 f892 	bl	8007e38 <_lseek_r>
 8007d14:	89a3      	ldrh	r3, [r4, #12]
 8007d16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007d1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007d1e:	81a3      	strh	r3, [r4, #12]
 8007d20:	4632      	mov	r2, r6
 8007d22:	463b      	mov	r3, r7
 8007d24:	4628      	mov	r0, r5
 8007d26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007d2a:	f000 b8a9 	b.w	8007e80 <_write_r>

08007d2e <__sseek>:
 8007d2e:	b510      	push	{r4, lr}
 8007d30:	460c      	mov	r4, r1
 8007d32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d36:	f000 f87f 	bl	8007e38 <_lseek_r>
 8007d3a:	1c43      	adds	r3, r0, #1
 8007d3c:	89a3      	ldrh	r3, [r4, #12]
 8007d3e:	bf15      	itete	ne
 8007d40:	6560      	strne	r0, [r4, #84]	; 0x54
 8007d42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007d46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007d4a:	81a3      	strheq	r3, [r4, #12]
 8007d4c:	bf18      	it	ne
 8007d4e:	81a3      	strhne	r3, [r4, #12]
 8007d50:	bd10      	pop	{r4, pc}

08007d52 <__sclose>:
 8007d52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d56:	f000 b809 	b.w	8007d6c <_close_r>

08007d5a <memset>:
 8007d5a:	4402      	add	r2, r0
 8007d5c:	4603      	mov	r3, r0
 8007d5e:	4293      	cmp	r3, r2
 8007d60:	d100      	bne.n	8007d64 <memset+0xa>
 8007d62:	4770      	bx	lr
 8007d64:	f803 1b01 	strb.w	r1, [r3], #1
 8007d68:	e7f9      	b.n	8007d5e <memset+0x4>
	...

08007d6c <_close_r>:
 8007d6c:	b538      	push	{r3, r4, r5, lr}
 8007d6e:	4d06      	ldr	r5, [pc, #24]	; (8007d88 <_close_r+0x1c>)
 8007d70:	2300      	movs	r3, #0
 8007d72:	4604      	mov	r4, r0
 8007d74:	4608      	mov	r0, r1
 8007d76:	602b      	str	r3, [r5, #0]
 8007d78:	f7f9 f9b1 	bl	80010de <_close>
 8007d7c:	1c43      	adds	r3, r0, #1
 8007d7e:	d102      	bne.n	8007d86 <_close_r+0x1a>
 8007d80:	682b      	ldr	r3, [r5, #0]
 8007d82:	b103      	cbz	r3, 8007d86 <_close_r+0x1a>
 8007d84:	6023      	str	r3, [r4, #0]
 8007d86:	bd38      	pop	{r3, r4, r5, pc}
 8007d88:	20004b98 	.word	0x20004b98

08007d8c <_reclaim_reent>:
 8007d8c:	4b29      	ldr	r3, [pc, #164]	; (8007e34 <_reclaim_reent+0xa8>)
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	4283      	cmp	r3, r0
 8007d92:	b570      	push	{r4, r5, r6, lr}
 8007d94:	4604      	mov	r4, r0
 8007d96:	d04b      	beq.n	8007e30 <_reclaim_reent+0xa4>
 8007d98:	69c3      	ldr	r3, [r0, #28]
 8007d9a:	b143      	cbz	r3, 8007dae <_reclaim_reent+0x22>
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	2b00      	cmp	r3, #0
 8007da0:	d144      	bne.n	8007e2c <_reclaim_reent+0xa0>
 8007da2:	69e3      	ldr	r3, [r4, #28]
 8007da4:	6819      	ldr	r1, [r3, #0]
 8007da6:	b111      	cbz	r1, 8007dae <_reclaim_reent+0x22>
 8007da8:	4620      	mov	r0, r4
 8007daa:	f000 f8b7 	bl	8007f1c <_free_r>
 8007dae:	6961      	ldr	r1, [r4, #20]
 8007db0:	b111      	cbz	r1, 8007db8 <_reclaim_reent+0x2c>
 8007db2:	4620      	mov	r0, r4
 8007db4:	f000 f8b2 	bl	8007f1c <_free_r>
 8007db8:	69e1      	ldr	r1, [r4, #28]
 8007dba:	b111      	cbz	r1, 8007dc2 <_reclaim_reent+0x36>
 8007dbc:	4620      	mov	r0, r4
 8007dbe:	f000 f8ad 	bl	8007f1c <_free_r>
 8007dc2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007dc4:	b111      	cbz	r1, 8007dcc <_reclaim_reent+0x40>
 8007dc6:	4620      	mov	r0, r4
 8007dc8:	f000 f8a8 	bl	8007f1c <_free_r>
 8007dcc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dce:	b111      	cbz	r1, 8007dd6 <_reclaim_reent+0x4a>
 8007dd0:	4620      	mov	r0, r4
 8007dd2:	f000 f8a3 	bl	8007f1c <_free_r>
 8007dd6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007dd8:	b111      	cbz	r1, 8007de0 <_reclaim_reent+0x54>
 8007dda:	4620      	mov	r0, r4
 8007ddc:	f000 f89e 	bl	8007f1c <_free_r>
 8007de0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007de2:	b111      	cbz	r1, 8007dea <_reclaim_reent+0x5e>
 8007de4:	4620      	mov	r0, r4
 8007de6:	f000 f899 	bl	8007f1c <_free_r>
 8007dea:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007dec:	b111      	cbz	r1, 8007df4 <_reclaim_reent+0x68>
 8007dee:	4620      	mov	r0, r4
 8007df0:	f000 f894 	bl	8007f1c <_free_r>
 8007df4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007df6:	b111      	cbz	r1, 8007dfe <_reclaim_reent+0x72>
 8007df8:	4620      	mov	r0, r4
 8007dfa:	f000 f88f 	bl	8007f1c <_free_r>
 8007dfe:	6a23      	ldr	r3, [r4, #32]
 8007e00:	b1b3      	cbz	r3, 8007e30 <_reclaim_reent+0xa4>
 8007e02:	4620      	mov	r0, r4
 8007e04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e08:	4718      	bx	r3
 8007e0a:	5949      	ldr	r1, [r1, r5]
 8007e0c:	b941      	cbnz	r1, 8007e20 <_reclaim_reent+0x94>
 8007e0e:	3504      	adds	r5, #4
 8007e10:	69e3      	ldr	r3, [r4, #28]
 8007e12:	2d80      	cmp	r5, #128	; 0x80
 8007e14:	68d9      	ldr	r1, [r3, #12]
 8007e16:	d1f8      	bne.n	8007e0a <_reclaim_reent+0x7e>
 8007e18:	4620      	mov	r0, r4
 8007e1a:	f000 f87f 	bl	8007f1c <_free_r>
 8007e1e:	e7c0      	b.n	8007da2 <_reclaim_reent+0x16>
 8007e20:	680e      	ldr	r6, [r1, #0]
 8007e22:	4620      	mov	r0, r4
 8007e24:	f000 f87a 	bl	8007f1c <_free_r>
 8007e28:	4631      	mov	r1, r6
 8007e2a:	e7ef      	b.n	8007e0c <_reclaim_reent+0x80>
 8007e2c:	2500      	movs	r5, #0
 8007e2e:	e7ef      	b.n	8007e10 <_reclaim_reent+0x84>
 8007e30:	bd70      	pop	{r4, r5, r6, pc}
 8007e32:	bf00      	nop
 8007e34:	2000006c 	.word	0x2000006c

08007e38 <_lseek_r>:
 8007e38:	b538      	push	{r3, r4, r5, lr}
 8007e3a:	4d07      	ldr	r5, [pc, #28]	; (8007e58 <_lseek_r+0x20>)
 8007e3c:	4604      	mov	r4, r0
 8007e3e:	4608      	mov	r0, r1
 8007e40:	4611      	mov	r1, r2
 8007e42:	2200      	movs	r2, #0
 8007e44:	602a      	str	r2, [r5, #0]
 8007e46:	461a      	mov	r2, r3
 8007e48:	f7f9 f970 	bl	800112c <_lseek>
 8007e4c:	1c43      	adds	r3, r0, #1
 8007e4e:	d102      	bne.n	8007e56 <_lseek_r+0x1e>
 8007e50:	682b      	ldr	r3, [r5, #0]
 8007e52:	b103      	cbz	r3, 8007e56 <_lseek_r+0x1e>
 8007e54:	6023      	str	r3, [r4, #0]
 8007e56:	bd38      	pop	{r3, r4, r5, pc}
 8007e58:	20004b98 	.word	0x20004b98

08007e5c <_read_r>:
 8007e5c:	b538      	push	{r3, r4, r5, lr}
 8007e5e:	4d07      	ldr	r5, [pc, #28]	; (8007e7c <_read_r+0x20>)
 8007e60:	4604      	mov	r4, r0
 8007e62:	4608      	mov	r0, r1
 8007e64:	4611      	mov	r1, r2
 8007e66:	2200      	movs	r2, #0
 8007e68:	602a      	str	r2, [r5, #0]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	f7f9 f8fe 	bl	800106c <_read>
 8007e70:	1c43      	adds	r3, r0, #1
 8007e72:	d102      	bne.n	8007e7a <_read_r+0x1e>
 8007e74:	682b      	ldr	r3, [r5, #0]
 8007e76:	b103      	cbz	r3, 8007e7a <_read_r+0x1e>
 8007e78:	6023      	str	r3, [r4, #0]
 8007e7a:	bd38      	pop	{r3, r4, r5, pc}
 8007e7c:	20004b98 	.word	0x20004b98

08007e80 <_write_r>:
 8007e80:	b538      	push	{r3, r4, r5, lr}
 8007e82:	4d07      	ldr	r5, [pc, #28]	; (8007ea0 <_write_r+0x20>)
 8007e84:	4604      	mov	r4, r0
 8007e86:	4608      	mov	r0, r1
 8007e88:	4611      	mov	r1, r2
 8007e8a:	2200      	movs	r2, #0
 8007e8c:	602a      	str	r2, [r5, #0]
 8007e8e:	461a      	mov	r2, r3
 8007e90:	f7f9 f909 	bl	80010a6 <_write>
 8007e94:	1c43      	adds	r3, r0, #1
 8007e96:	d102      	bne.n	8007e9e <_write_r+0x1e>
 8007e98:	682b      	ldr	r3, [r5, #0]
 8007e9a:	b103      	cbz	r3, 8007e9e <_write_r+0x1e>
 8007e9c:	6023      	str	r3, [r4, #0]
 8007e9e:	bd38      	pop	{r3, r4, r5, pc}
 8007ea0:	20004b98 	.word	0x20004b98

08007ea4 <__errno>:
 8007ea4:	4b01      	ldr	r3, [pc, #4]	; (8007eac <__errno+0x8>)
 8007ea6:	6818      	ldr	r0, [r3, #0]
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	2000006c 	.word	0x2000006c

08007eb0 <__libc_init_array>:
 8007eb0:	b570      	push	{r4, r5, r6, lr}
 8007eb2:	4d0d      	ldr	r5, [pc, #52]	; (8007ee8 <__libc_init_array+0x38>)
 8007eb4:	4c0d      	ldr	r4, [pc, #52]	; (8007eec <__libc_init_array+0x3c>)
 8007eb6:	1b64      	subs	r4, r4, r5
 8007eb8:	10a4      	asrs	r4, r4, #2
 8007eba:	2600      	movs	r6, #0
 8007ebc:	42a6      	cmp	r6, r4
 8007ebe:	d109      	bne.n	8007ed4 <__libc_init_array+0x24>
 8007ec0:	4d0b      	ldr	r5, [pc, #44]	; (8007ef0 <__libc_init_array+0x40>)
 8007ec2:	4c0c      	ldr	r4, [pc, #48]	; (8007ef4 <__libc_init_array+0x44>)
 8007ec4:	f000 fdce 	bl	8008a64 <_init>
 8007ec8:	1b64      	subs	r4, r4, r5
 8007eca:	10a4      	asrs	r4, r4, #2
 8007ecc:	2600      	movs	r6, #0
 8007ece:	42a6      	cmp	r6, r4
 8007ed0:	d105      	bne.n	8007ede <__libc_init_array+0x2e>
 8007ed2:	bd70      	pop	{r4, r5, r6, pc}
 8007ed4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ed8:	4798      	blx	r3
 8007eda:	3601      	adds	r6, #1
 8007edc:	e7ee      	b.n	8007ebc <__libc_init_array+0xc>
 8007ede:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ee2:	4798      	blx	r3
 8007ee4:	3601      	adds	r6, #1
 8007ee6:	e7f2      	b.n	8007ece <__libc_init_array+0x1e>
 8007ee8:	08008ca4 	.word	0x08008ca4
 8007eec:	08008ca4 	.word	0x08008ca4
 8007ef0:	08008ca4 	.word	0x08008ca4
 8007ef4:	08008ca8 	.word	0x08008ca8

08007ef8 <__retarget_lock_init_recursive>:
 8007ef8:	4770      	bx	lr

08007efa <__retarget_lock_acquire_recursive>:
 8007efa:	4770      	bx	lr

08007efc <__retarget_lock_release_recursive>:
 8007efc:	4770      	bx	lr

08007efe <memcpy>:
 8007efe:	440a      	add	r2, r1
 8007f00:	4291      	cmp	r1, r2
 8007f02:	f100 33ff 	add.w	r3, r0, #4294967295
 8007f06:	d100      	bne.n	8007f0a <memcpy+0xc>
 8007f08:	4770      	bx	lr
 8007f0a:	b510      	push	{r4, lr}
 8007f0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007f10:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007f14:	4291      	cmp	r1, r2
 8007f16:	d1f9      	bne.n	8007f0c <memcpy+0xe>
 8007f18:	bd10      	pop	{r4, pc}
	...

08007f1c <_free_r>:
 8007f1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f1e:	2900      	cmp	r1, #0
 8007f20:	d044      	beq.n	8007fac <_free_r+0x90>
 8007f22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f26:	9001      	str	r0, [sp, #4]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f2e:	bfb8      	it	lt
 8007f30:	18e4      	addlt	r4, r4, r3
 8007f32:	f000 f8df 	bl	80080f4 <__malloc_lock>
 8007f36:	4a1e      	ldr	r2, [pc, #120]	; (8007fb0 <_free_r+0x94>)
 8007f38:	9801      	ldr	r0, [sp, #4]
 8007f3a:	6813      	ldr	r3, [r2, #0]
 8007f3c:	b933      	cbnz	r3, 8007f4c <_free_r+0x30>
 8007f3e:	6063      	str	r3, [r4, #4]
 8007f40:	6014      	str	r4, [r2, #0]
 8007f42:	b003      	add	sp, #12
 8007f44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f48:	f000 b8da 	b.w	8008100 <__malloc_unlock>
 8007f4c:	42a3      	cmp	r3, r4
 8007f4e:	d908      	bls.n	8007f62 <_free_r+0x46>
 8007f50:	6825      	ldr	r5, [r4, #0]
 8007f52:	1961      	adds	r1, r4, r5
 8007f54:	428b      	cmp	r3, r1
 8007f56:	bf01      	itttt	eq
 8007f58:	6819      	ldreq	r1, [r3, #0]
 8007f5a:	685b      	ldreq	r3, [r3, #4]
 8007f5c:	1949      	addeq	r1, r1, r5
 8007f5e:	6021      	streq	r1, [r4, #0]
 8007f60:	e7ed      	b.n	8007f3e <_free_r+0x22>
 8007f62:	461a      	mov	r2, r3
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	b10b      	cbz	r3, 8007f6c <_free_r+0x50>
 8007f68:	42a3      	cmp	r3, r4
 8007f6a:	d9fa      	bls.n	8007f62 <_free_r+0x46>
 8007f6c:	6811      	ldr	r1, [r2, #0]
 8007f6e:	1855      	adds	r5, r2, r1
 8007f70:	42a5      	cmp	r5, r4
 8007f72:	d10b      	bne.n	8007f8c <_free_r+0x70>
 8007f74:	6824      	ldr	r4, [r4, #0]
 8007f76:	4421      	add	r1, r4
 8007f78:	1854      	adds	r4, r2, r1
 8007f7a:	42a3      	cmp	r3, r4
 8007f7c:	6011      	str	r1, [r2, #0]
 8007f7e:	d1e0      	bne.n	8007f42 <_free_r+0x26>
 8007f80:	681c      	ldr	r4, [r3, #0]
 8007f82:	685b      	ldr	r3, [r3, #4]
 8007f84:	6053      	str	r3, [r2, #4]
 8007f86:	440c      	add	r4, r1
 8007f88:	6014      	str	r4, [r2, #0]
 8007f8a:	e7da      	b.n	8007f42 <_free_r+0x26>
 8007f8c:	d902      	bls.n	8007f94 <_free_r+0x78>
 8007f8e:	230c      	movs	r3, #12
 8007f90:	6003      	str	r3, [r0, #0]
 8007f92:	e7d6      	b.n	8007f42 <_free_r+0x26>
 8007f94:	6825      	ldr	r5, [r4, #0]
 8007f96:	1961      	adds	r1, r4, r5
 8007f98:	428b      	cmp	r3, r1
 8007f9a:	bf04      	itt	eq
 8007f9c:	6819      	ldreq	r1, [r3, #0]
 8007f9e:	685b      	ldreq	r3, [r3, #4]
 8007fa0:	6063      	str	r3, [r4, #4]
 8007fa2:	bf04      	itt	eq
 8007fa4:	1949      	addeq	r1, r1, r5
 8007fa6:	6021      	streq	r1, [r4, #0]
 8007fa8:	6054      	str	r4, [r2, #4]
 8007faa:	e7ca      	b.n	8007f42 <_free_r+0x26>
 8007fac:	b003      	add	sp, #12
 8007fae:	bd30      	pop	{r4, r5, pc}
 8007fb0:	20004ba0 	.word	0x20004ba0

08007fb4 <sbrk_aligned>:
 8007fb4:	b570      	push	{r4, r5, r6, lr}
 8007fb6:	4e0e      	ldr	r6, [pc, #56]	; (8007ff0 <sbrk_aligned+0x3c>)
 8007fb8:	460c      	mov	r4, r1
 8007fba:	6831      	ldr	r1, [r6, #0]
 8007fbc:	4605      	mov	r5, r0
 8007fbe:	b911      	cbnz	r1, 8007fc6 <sbrk_aligned+0x12>
 8007fc0:	f000 fcbc 	bl	800893c <_sbrk_r>
 8007fc4:	6030      	str	r0, [r6, #0]
 8007fc6:	4621      	mov	r1, r4
 8007fc8:	4628      	mov	r0, r5
 8007fca:	f000 fcb7 	bl	800893c <_sbrk_r>
 8007fce:	1c43      	adds	r3, r0, #1
 8007fd0:	d00a      	beq.n	8007fe8 <sbrk_aligned+0x34>
 8007fd2:	1cc4      	adds	r4, r0, #3
 8007fd4:	f024 0403 	bic.w	r4, r4, #3
 8007fd8:	42a0      	cmp	r0, r4
 8007fda:	d007      	beq.n	8007fec <sbrk_aligned+0x38>
 8007fdc:	1a21      	subs	r1, r4, r0
 8007fde:	4628      	mov	r0, r5
 8007fe0:	f000 fcac 	bl	800893c <_sbrk_r>
 8007fe4:	3001      	adds	r0, #1
 8007fe6:	d101      	bne.n	8007fec <sbrk_aligned+0x38>
 8007fe8:	f04f 34ff 	mov.w	r4, #4294967295
 8007fec:	4620      	mov	r0, r4
 8007fee:	bd70      	pop	{r4, r5, r6, pc}
 8007ff0:	20004ba4 	.word	0x20004ba4

08007ff4 <_malloc_r>:
 8007ff4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ff8:	1ccd      	adds	r5, r1, #3
 8007ffa:	f025 0503 	bic.w	r5, r5, #3
 8007ffe:	3508      	adds	r5, #8
 8008000:	2d0c      	cmp	r5, #12
 8008002:	bf38      	it	cc
 8008004:	250c      	movcc	r5, #12
 8008006:	2d00      	cmp	r5, #0
 8008008:	4607      	mov	r7, r0
 800800a:	db01      	blt.n	8008010 <_malloc_r+0x1c>
 800800c:	42a9      	cmp	r1, r5
 800800e:	d905      	bls.n	800801c <_malloc_r+0x28>
 8008010:	230c      	movs	r3, #12
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	2600      	movs	r6, #0
 8008016:	4630      	mov	r0, r6
 8008018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800801c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080f0 <_malloc_r+0xfc>
 8008020:	f000 f868 	bl	80080f4 <__malloc_lock>
 8008024:	f8d8 3000 	ldr.w	r3, [r8]
 8008028:	461c      	mov	r4, r3
 800802a:	bb5c      	cbnz	r4, 8008084 <_malloc_r+0x90>
 800802c:	4629      	mov	r1, r5
 800802e:	4638      	mov	r0, r7
 8008030:	f7ff ffc0 	bl	8007fb4 <sbrk_aligned>
 8008034:	1c43      	adds	r3, r0, #1
 8008036:	4604      	mov	r4, r0
 8008038:	d155      	bne.n	80080e6 <_malloc_r+0xf2>
 800803a:	f8d8 4000 	ldr.w	r4, [r8]
 800803e:	4626      	mov	r6, r4
 8008040:	2e00      	cmp	r6, #0
 8008042:	d145      	bne.n	80080d0 <_malloc_r+0xdc>
 8008044:	2c00      	cmp	r4, #0
 8008046:	d048      	beq.n	80080da <_malloc_r+0xe6>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	4631      	mov	r1, r6
 800804c:	4638      	mov	r0, r7
 800804e:	eb04 0903 	add.w	r9, r4, r3
 8008052:	f000 fc73 	bl	800893c <_sbrk_r>
 8008056:	4581      	cmp	r9, r0
 8008058:	d13f      	bne.n	80080da <_malloc_r+0xe6>
 800805a:	6821      	ldr	r1, [r4, #0]
 800805c:	1a6d      	subs	r5, r5, r1
 800805e:	4629      	mov	r1, r5
 8008060:	4638      	mov	r0, r7
 8008062:	f7ff ffa7 	bl	8007fb4 <sbrk_aligned>
 8008066:	3001      	adds	r0, #1
 8008068:	d037      	beq.n	80080da <_malloc_r+0xe6>
 800806a:	6823      	ldr	r3, [r4, #0]
 800806c:	442b      	add	r3, r5
 800806e:	6023      	str	r3, [r4, #0]
 8008070:	f8d8 3000 	ldr.w	r3, [r8]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d038      	beq.n	80080ea <_malloc_r+0xf6>
 8008078:	685a      	ldr	r2, [r3, #4]
 800807a:	42a2      	cmp	r2, r4
 800807c:	d12b      	bne.n	80080d6 <_malloc_r+0xe2>
 800807e:	2200      	movs	r2, #0
 8008080:	605a      	str	r2, [r3, #4]
 8008082:	e00f      	b.n	80080a4 <_malloc_r+0xb0>
 8008084:	6822      	ldr	r2, [r4, #0]
 8008086:	1b52      	subs	r2, r2, r5
 8008088:	d41f      	bmi.n	80080ca <_malloc_r+0xd6>
 800808a:	2a0b      	cmp	r2, #11
 800808c:	d917      	bls.n	80080be <_malloc_r+0xca>
 800808e:	1961      	adds	r1, r4, r5
 8008090:	42a3      	cmp	r3, r4
 8008092:	6025      	str	r5, [r4, #0]
 8008094:	bf18      	it	ne
 8008096:	6059      	strne	r1, [r3, #4]
 8008098:	6863      	ldr	r3, [r4, #4]
 800809a:	bf08      	it	eq
 800809c:	f8c8 1000 	streq.w	r1, [r8]
 80080a0:	5162      	str	r2, [r4, r5]
 80080a2:	604b      	str	r3, [r1, #4]
 80080a4:	4638      	mov	r0, r7
 80080a6:	f104 060b 	add.w	r6, r4, #11
 80080aa:	f000 f829 	bl	8008100 <__malloc_unlock>
 80080ae:	f026 0607 	bic.w	r6, r6, #7
 80080b2:	1d23      	adds	r3, r4, #4
 80080b4:	1af2      	subs	r2, r6, r3
 80080b6:	d0ae      	beq.n	8008016 <_malloc_r+0x22>
 80080b8:	1b9b      	subs	r3, r3, r6
 80080ba:	50a3      	str	r3, [r4, r2]
 80080bc:	e7ab      	b.n	8008016 <_malloc_r+0x22>
 80080be:	42a3      	cmp	r3, r4
 80080c0:	6862      	ldr	r2, [r4, #4]
 80080c2:	d1dd      	bne.n	8008080 <_malloc_r+0x8c>
 80080c4:	f8c8 2000 	str.w	r2, [r8]
 80080c8:	e7ec      	b.n	80080a4 <_malloc_r+0xb0>
 80080ca:	4623      	mov	r3, r4
 80080cc:	6864      	ldr	r4, [r4, #4]
 80080ce:	e7ac      	b.n	800802a <_malloc_r+0x36>
 80080d0:	4634      	mov	r4, r6
 80080d2:	6876      	ldr	r6, [r6, #4]
 80080d4:	e7b4      	b.n	8008040 <_malloc_r+0x4c>
 80080d6:	4613      	mov	r3, r2
 80080d8:	e7cc      	b.n	8008074 <_malloc_r+0x80>
 80080da:	230c      	movs	r3, #12
 80080dc:	603b      	str	r3, [r7, #0]
 80080de:	4638      	mov	r0, r7
 80080e0:	f000 f80e 	bl	8008100 <__malloc_unlock>
 80080e4:	e797      	b.n	8008016 <_malloc_r+0x22>
 80080e6:	6025      	str	r5, [r4, #0]
 80080e8:	e7dc      	b.n	80080a4 <_malloc_r+0xb0>
 80080ea:	605b      	str	r3, [r3, #4]
 80080ec:	deff      	udf	#255	; 0xff
 80080ee:	bf00      	nop
 80080f0:	20004ba0 	.word	0x20004ba0

080080f4 <__malloc_lock>:
 80080f4:	4801      	ldr	r0, [pc, #4]	; (80080fc <__malloc_lock+0x8>)
 80080f6:	f7ff bf00 	b.w	8007efa <__retarget_lock_acquire_recursive>
 80080fa:	bf00      	nop
 80080fc:	20004b9c 	.word	0x20004b9c

08008100 <__malloc_unlock>:
 8008100:	4801      	ldr	r0, [pc, #4]	; (8008108 <__malloc_unlock+0x8>)
 8008102:	f7ff befb 	b.w	8007efc <__retarget_lock_release_recursive>
 8008106:	bf00      	nop
 8008108:	20004b9c 	.word	0x20004b9c

0800810c <__sfputc_r>:
 800810c:	6893      	ldr	r3, [r2, #8]
 800810e:	3b01      	subs	r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	b410      	push	{r4}
 8008114:	6093      	str	r3, [r2, #8]
 8008116:	da08      	bge.n	800812a <__sfputc_r+0x1e>
 8008118:	6994      	ldr	r4, [r2, #24]
 800811a:	42a3      	cmp	r3, r4
 800811c:	db01      	blt.n	8008122 <__sfputc_r+0x16>
 800811e:	290a      	cmp	r1, #10
 8008120:	d103      	bne.n	800812a <__sfputc_r+0x1e>
 8008122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008126:	f000 bb73 	b.w	8008810 <__swbuf_r>
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	1c58      	adds	r0, r3, #1
 800812e:	6010      	str	r0, [r2, #0]
 8008130:	7019      	strb	r1, [r3, #0]
 8008132:	4608      	mov	r0, r1
 8008134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008138:	4770      	bx	lr

0800813a <__sfputs_r>:
 800813a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	4614      	mov	r4, r2
 8008142:	18d5      	adds	r5, r2, r3
 8008144:	42ac      	cmp	r4, r5
 8008146:	d101      	bne.n	800814c <__sfputs_r+0x12>
 8008148:	2000      	movs	r0, #0
 800814a:	e007      	b.n	800815c <__sfputs_r+0x22>
 800814c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008150:	463a      	mov	r2, r7
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ffda 	bl	800810c <__sfputc_r>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d1f3      	bne.n	8008144 <__sfputs_r+0xa>
 800815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008160 <_vfiprintf_r>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	460d      	mov	r5, r1
 8008166:	b09d      	sub	sp, #116	; 0x74
 8008168:	4614      	mov	r4, r2
 800816a:	4698      	mov	r8, r3
 800816c:	4606      	mov	r6, r0
 800816e:	b118      	cbz	r0, 8008178 <_vfiprintf_r+0x18>
 8008170:	6a03      	ldr	r3, [r0, #32]
 8008172:	b90b      	cbnz	r3, 8008178 <_vfiprintf_r+0x18>
 8008174:	f7ff fd66 	bl	8007c44 <__sinit>
 8008178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800817a:	07d9      	lsls	r1, r3, #31
 800817c:	d405      	bmi.n	800818a <_vfiprintf_r+0x2a>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	059a      	lsls	r2, r3, #22
 8008182:	d402      	bmi.n	800818a <_vfiprintf_r+0x2a>
 8008184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008186:	f7ff feb8 	bl	8007efa <__retarget_lock_acquire_recursive>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	071b      	lsls	r3, r3, #28
 800818e:	d501      	bpl.n	8008194 <_vfiprintf_r+0x34>
 8008190:	692b      	ldr	r3, [r5, #16]
 8008192:	b99b      	cbnz	r3, 80081bc <_vfiprintf_r+0x5c>
 8008194:	4629      	mov	r1, r5
 8008196:	4630      	mov	r0, r6
 8008198:	f000 fb78 	bl	800888c <__swsetup_r>
 800819c:	b170      	cbz	r0, 80081bc <_vfiprintf_r+0x5c>
 800819e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081a0:	07dc      	lsls	r4, r3, #31
 80081a2:	d504      	bpl.n	80081ae <_vfiprintf_r+0x4e>
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	b01d      	add	sp, #116	; 0x74
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	0598      	lsls	r0, r3, #22
 80081b2:	d4f7      	bmi.n	80081a4 <_vfiprintf_r+0x44>
 80081b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b6:	f7ff fea1 	bl	8007efc <__retarget_lock_release_recursive>
 80081ba:	e7f3      	b.n	80081a4 <_vfiprintf_r+0x44>
 80081bc:	2300      	movs	r3, #0
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	2320      	movs	r3, #32
 80081c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ca:	2330      	movs	r3, #48	; 0x30
 80081cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008380 <_vfiprintf_r+0x220>
 80081d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d4:	f04f 0901 	mov.w	r9, #1
 80081d8:	4623      	mov	r3, r4
 80081da:	469a      	mov	sl, r3
 80081dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e0:	b10a      	cbz	r2, 80081e6 <_vfiprintf_r+0x86>
 80081e2:	2a25      	cmp	r2, #37	; 0x25
 80081e4:	d1f9      	bne.n	80081da <_vfiprintf_r+0x7a>
 80081e6:	ebba 0b04 	subs.w	fp, sl, r4
 80081ea:	d00b      	beq.n	8008204 <_vfiprintf_r+0xa4>
 80081ec:	465b      	mov	r3, fp
 80081ee:	4622      	mov	r2, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ffa1 	bl	800813a <__sfputs_r>
 80081f8:	3001      	adds	r0, #1
 80081fa:	f000 80a9 	beq.w	8008350 <_vfiprintf_r+0x1f0>
 80081fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008200:	445a      	add	r2, fp
 8008202:	9209      	str	r2, [sp, #36]	; 0x24
 8008204:	f89a 3000 	ldrb.w	r3, [sl]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80a1 	beq.w	8008350 <_vfiprintf_r+0x1f0>
 800820e:	2300      	movs	r3, #0
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008218:	f10a 0a01 	add.w	sl, sl, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008224:	931a      	str	r3, [sp, #104]	; 0x68
 8008226:	4654      	mov	r4, sl
 8008228:	2205      	movs	r2, #5
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	4854      	ldr	r0, [pc, #336]	; (8008380 <_vfiprintf_r+0x220>)
 8008230:	f7f7 ffce 	bl	80001d0 <memchr>
 8008234:	9a04      	ldr	r2, [sp, #16]
 8008236:	b9d8      	cbnz	r0, 8008270 <_vfiprintf_r+0x110>
 8008238:	06d1      	lsls	r1, r2, #27
 800823a:	bf44      	itt	mi
 800823c:	2320      	movmi	r3, #32
 800823e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008242:	0713      	lsls	r3, r2, #28
 8008244:	bf44      	itt	mi
 8008246:	232b      	movmi	r3, #43	; 0x2b
 8008248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800824c:	f89a 3000 	ldrb.w	r3, [sl]
 8008250:	2b2a      	cmp	r3, #42	; 0x2a
 8008252:	d015      	beq.n	8008280 <_vfiprintf_r+0x120>
 8008254:	9a07      	ldr	r2, [sp, #28]
 8008256:	4654      	mov	r4, sl
 8008258:	2000      	movs	r0, #0
 800825a:	f04f 0c0a 	mov.w	ip, #10
 800825e:	4621      	mov	r1, r4
 8008260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008264:	3b30      	subs	r3, #48	; 0x30
 8008266:	2b09      	cmp	r3, #9
 8008268:	d94d      	bls.n	8008306 <_vfiprintf_r+0x1a6>
 800826a:	b1b0      	cbz	r0, 800829a <_vfiprintf_r+0x13a>
 800826c:	9207      	str	r2, [sp, #28]
 800826e:	e014      	b.n	800829a <_vfiprintf_r+0x13a>
 8008270:	eba0 0308 	sub.w	r3, r0, r8
 8008274:	fa09 f303 	lsl.w	r3, r9, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	46a2      	mov	sl, r4
 800827e:	e7d2      	b.n	8008226 <_vfiprintf_r+0xc6>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	1d19      	adds	r1, r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	9103      	str	r1, [sp, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfbb      	ittet	lt
 800828c:	425b      	neglt	r3, r3
 800828e:	f042 0202 	orrlt.w	r2, r2, #2
 8008292:	9307      	strge	r3, [sp, #28]
 8008294:	9307      	strlt	r3, [sp, #28]
 8008296:	bfb8      	it	lt
 8008298:	9204      	strlt	r2, [sp, #16]
 800829a:	7823      	ldrb	r3, [r4, #0]
 800829c:	2b2e      	cmp	r3, #46	; 0x2e
 800829e:	d10c      	bne.n	80082ba <_vfiprintf_r+0x15a>
 80082a0:	7863      	ldrb	r3, [r4, #1]
 80082a2:	2b2a      	cmp	r3, #42	; 0x2a
 80082a4:	d134      	bne.n	8008310 <_vfiprintf_r+0x1b0>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	1d1a      	adds	r2, r3, #4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	9203      	str	r2, [sp, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfb8      	it	lt
 80082b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80082b6:	3402      	adds	r4, #2
 80082b8:	9305      	str	r3, [sp, #20]
 80082ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008390 <_vfiprintf_r+0x230>
 80082be:	7821      	ldrb	r1, [r4, #0]
 80082c0:	2203      	movs	r2, #3
 80082c2:	4650      	mov	r0, sl
 80082c4:	f7f7 ff84 	bl	80001d0 <memchr>
 80082c8:	b138      	cbz	r0, 80082da <_vfiprintf_r+0x17a>
 80082ca:	9b04      	ldr	r3, [sp, #16]
 80082cc:	eba0 000a 	sub.w	r0, r0, sl
 80082d0:	2240      	movs	r2, #64	; 0x40
 80082d2:	4082      	lsls	r2, r0
 80082d4:	4313      	orrs	r3, r2
 80082d6:	3401      	adds	r4, #1
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082de:	4829      	ldr	r0, [pc, #164]	; (8008384 <_vfiprintf_r+0x224>)
 80082e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e4:	2206      	movs	r2, #6
 80082e6:	f7f7 ff73 	bl	80001d0 <memchr>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d03f      	beq.n	800836e <_vfiprintf_r+0x20e>
 80082ee:	4b26      	ldr	r3, [pc, #152]	; (8008388 <_vfiprintf_r+0x228>)
 80082f0:	bb1b      	cbnz	r3, 800833a <_vfiprintf_r+0x1da>
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	3307      	adds	r3, #7
 80082f6:	f023 0307 	bic.w	r3, r3, #7
 80082fa:	3308      	adds	r3, #8
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008300:	443b      	add	r3, r7
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
 8008304:	e768      	b.n	80081d8 <_vfiprintf_r+0x78>
 8008306:	fb0c 3202 	mla	r2, ip, r2, r3
 800830a:	460c      	mov	r4, r1
 800830c:	2001      	movs	r0, #1
 800830e:	e7a6      	b.n	800825e <_vfiprintf_r+0xfe>
 8008310:	2300      	movs	r3, #0
 8008312:	3401      	adds	r4, #1
 8008314:	9305      	str	r3, [sp, #20]
 8008316:	4619      	mov	r1, r3
 8008318:	f04f 0c0a 	mov.w	ip, #10
 800831c:	4620      	mov	r0, r4
 800831e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008322:	3a30      	subs	r2, #48	; 0x30
 8008324:	2a09      	cmp	r2, #9
 8008326:	d903      	bls.n	8008330 <_vfiprintf_r+0x1d0>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0c6      	beq.n	80082ba <_vfiprintf_r+0x15a>
 800832c:	9105      	str	r1, [sp, #20]
 800832e:	e7c4      	b.n	80082ba <_vfiprintf_r+0x15a>
 8008330:	fb0c 2101 	mla	r1, ip, r1, r2
 8008334:	4604      	mov	r4, r0
 8008336:	2301      	movs	r3, #1
 8008338:	e7f0      	b.n	800831c <_vfiprintf_r+0x1bc>
 800833a:	ab03      	add	r3, sp, #12
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	462a      	mov	r2, r5
 8008340:	4b12      	ldr	r3, [pc, #72]	; (800838c <_vfiprintf_r+0x22c>)
 8008342:	a904      	add	r1, sp, #16
 8008344:	4630      	mov	r0, r6
 8008346:	f3af 8000 	nop.w
 800834a:	4607      	mov	r7, r0
 800834c:	1c78      	adds	r0, r7, #1
 800834e:	d1d6      	bne.n	80082fe <_vfiprintf_r+0x19e>
 8008350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008352:	07d9      	lsls	r1, r3, #31
 8008354:	d405      	bmi.n	8008362 <_vfiprintf_r+0x202>
 8008356:	89ab      	ldrh	r3, [r5, #12]
 8008358:	059a      	lsls	r2, r3, #22
 800835a:	d402      	bmi.n	8008362 <_vfiprintf_r+0x202>
 800835c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800835e:	f7ff fdcd 	bl	8007efc <__retarget_lock_release_recursive>
 8008362:	89ab      	ldrh	r3, [r5, #12]
 8008364:	065b      	lsls	r3, r3, #25
 8008366:	f53f af1d 	bmi.w	80081a4 <_vfiprintf_r+0x44>
 800836a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800836c:	e71c      	b.n	80081a8 <_vfiprintf_r+0x48>
 800836e:	ab03      	add	r3, sp, #12
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	462a      	mov	r2, r5
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <_vfiprintf_r+0x22c>)
 8008376:	a904      	add	r1, sp, #16
 8008378:	4630      	mov	r0, r6
 800837a:	f000 f879 	bl	8008470 <_printf_i>
 800837e:	e7e4      	b.n	800834a <_vfiprintf_r+0x1ea>
 8008380:	08008c68 	.word	0x08008c68
 8008384:	08008c72 	.word	0x08008c72
 8008388:	00000000 	.word	0x00000000
 800838c:	0800813b 	.word	0x0800813b
 8008390:	08008c6e 	.word	0x08008c6e

08008394 <_printf_common>:
 8008394:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008398:	4616      	mov	r6, r2
 800839a:	4699      	mov	r9, r3
 800839c:	688a      	ldr	r2, [r1, #8]
 800839e:	690b      	ldr	r3, [r1, #16]
 80083a0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083a4:	4293      	cmp	r3, r2
 80083a6:	bfb8      	it	lt
 80083a8:	4613      	movlt	r3, r2
 80083aa:	6033      	str	r3, [r6, #0]
 80083ac:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083b0:	4607      	mov	r7, r0
 80083b2:	460c      	mov	r4, r1
 80083b4:	b10a      	cbz	r2, 80083ba <_printf_common+0x26>
 80083b6:	3301      	adds	r3, #1
 80083b8:	6033      	str	r3, [r6, #0]
 80083ba:	6823      	ldr	r3, [r4, #0]
 80083bc:	0699      	lsls	r1, r3, #26
 80083be:	bf42      	ittt	mi
 80083c0:	6833      	ldrmi	r3, [r6, #0]
 80083c2:	3302      	addmi	r3, #2
 80083c4:	6033      	strmi	r3, [r6, #0]
 80083c6:	6825      	ldr	r5, [r4, #0]
 80083c8:	f015 0506 	ands.w	r5, r5, #6
 80083cc:	d106      	bne.n	80083dc <_printf_common+0x48>
 80083ce:	f104 0a19 	add.w	sl, r4, #25
 80083d2:	68e3      	ldr	r3, [r4, #12]
 80083d4:	6832      	ldr	r2, [r6, #0]
 80083d6:	1a9b      	subs	r3, r3, r2
 80083d8:	42ab      	cmp	r3, r5
 80083da:	dc26      	bgt.n	800842a <_printf_common+0x96>
 80083dc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083e0:	1e13      	subs	r3, r2, #0
 80083e2:	6822      	ldr	r2, [r4, #0]
 80083e4:	bf18      	it	ne
 80083e6:	2301      	movne	r3, #1
 80083e8:	0692      	lsls	r2, r2, #26
 80083ea:	d42b      	bmi.n	8008444 <_printf_common+0xb0>
 80083ec:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083f0:	4649      	mov	r1, r9
 80083f2:	4638      	mov	r0, r7
 80083f4:	47c0      	blx	r8
 80083f6:	3001      	adds	r0, #1
 80083f8:	d01e      	beq.n	8008438 <_printf_common+0xa4>
 80083fa:	6823      	ldr	r3, [r4, #0]
 80083fc:	6922      	ldr	r2, [r4, #16]
 80083fe:	f003 0306 	and.w	r3, r3, #6
 8008402:	2b04      	cmp	r3, #4
 8008404:	bf02      	ittt	eq
 8008406:	68e5      	ldreq	r5, [r4, #12]
 8008408:	6833      	ldreq	r3, [r6, #0]
 800840a:	1aed      	subeq	r5, r5, r3
 800840c:	68a3      	ldr	r3, [r4, #8]
 800840e:	bf0c      	ite	eq
 8008410:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008414:	2500      	movne	r5, #0
 8008416:	4293      	cmp	r3, r2
 8008418:	bfc4      	itt	gt
 800841a:	1a9b      	subgt	r3, r3, r2
 800841c:	18ed      	addgt	r5, r5, r3
 800841e:	2600      	movs	r6, #0
 8008420:	341a      	adds	r4, #26
 8008422:	42b5      	cmp	r5, r6
 8008424:	d11a      	bne.n	800845c <_printf_common+0xc8>
 8008426:	2000      	movs	r0, #0
 8008428:	e008      	b.n	800843c <_printf_common+0xa8>
 800842a:	2301      	movs	r3, #1
 800842c:	4652      	mov	r2, sl
 800842e:	4649      	mov	r1, r9
 8008430:	4638      	mov	r0, r7
 8008432:	47c0      	blx	r8
 8008434:	3001      	adds	r0, #1
 8008436:	d103      	bne.n	8008440 <_printf_common+0xac>
 8008438:	f04f 30ff 	mov.w	r0, #4294967295
 800843c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008440:	3501      	adds	r5, #1
 8008442:	e7c6      	b.n	80083d2 <_printf_common+0x3e>
 8008444:	18e1      	adds	r1, r4, r3
 8008446:	1c5a      	adds	r2, r3, #1
 8008448:	2030      	movs	r0, #48	; 0x30
 800844a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800844e:	4422      	add	r2, r4
 8008450:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008454:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008458:	3302      	adds	r3, #2
 800845a:	e7c7      	b.n	80083ec <_printf_common+0x58>
 800845c:	2301      	movs	r3, #1
 800845e:	4622      	mov	r2, r4
 8008460:	4649      	mov	r1, r9
 8008462:	4638      	mov	r0, r7
 8008464:	47c0      	blx	r8
 8008466:	3001      	adds	r0, #1
 8008468:	d0e6      	beq.n	8008438 <_printf_common+0xa4>
 800846a:	3601      	adds	r6, #1
 800846c:	e7d9      	b.n	8008422 <_printf_common+0x8e>
	...

08008470 <_printf_i>:
 8008470:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008474:	7e0f      	ldrb	r7, [r1, #24]
 8008476:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008478:	2f78      	cmp	r7, #120	; 0x78
 800847a:	4691      	mov	r9, r2
 800847c:	4680      	mov	r8, r0
 800847e:	460c      	mov	r4, r1
 8008480:	469a      	mov	sl, r3
 8008482:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008486:	d807      	bhi.n	8008498 <_printf_i+0x28>
 8008488:	2f62      	cmp	r7, #98	; 0x62
 800848a:	d80a      	bhi.n	80084a2 <_printf_i+0x32>
 800848c:	2f00      	cmp	r7, #0
 800848e:	f000 80d4 	beq.w	800863a <_printf_i+0x1ca>
 8008492:	2f58      	cmp	r7, #88	; 0x58
 8008494:	f000 80c0 	beq.w	8008618 <_printf_i+0x1a8>
 8008498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800849c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084a0:	e03a      	b.n	8008518 <_printf_i+0xa8>
 80084a2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084a6:	2b15      	cmp	r3, #21
 80084a8:	d8f6      	bhi.n	8008498 <_printf_i+0x28>
 80084aa:	a101      	add	r1, pc, #4	; (adr r1, 80084b0 <_printf_i+0x40>)
 80084ac:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084b0:	08008509 	.word	0x08008509
 80084b4:	0800851d 	.word	0x0800851d
 80084b8:	08008499 	.word	0x08008499
 80084bc:	08008499 	.word	0x08008499
 80084c0:	08008499 	.word	0x08008499
 80084c4:	08008499 	.word	0x08008499
 80084c8:	0800851d 	.word	0x0800851d
 80084cc:	08008499 	.word	0x08008499
 80084d0:	08008499 	.word	0x08008499
 80084d4:	08008499 	.word	0x08008499
 80084d8:	08008499 	.word	0x08008499
 80084dc:	08008621 	.word	0x08008621
 80084e0:	08008549 	.word	0x08008549
 80084e4:	080085db 	.word	0x080085db
 80084e8:	08008499 	.word	0x08008499
 80084ec:	08008499 	.word	0x08008499
 80084f0:	08008643 	.word	0x08008643
 80084f4:	08008499 	.word	0x08008499
 80084f8:	08008549 	.word	0x08008549
 80084fc:	08008499 	.word	0x08008499
 8008500:	08008499 	.word	0x08008499
 8008504:	080085e3 	.word	0x080085e3
 8008508:	682b      	ldr	r3, [r5, #0]
 800850a:	1d1a      	adds	r2, r3, #4
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	602a      	str	r2, [r5, #0]
 8008510:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008514:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008518:	2301      	movs	r3, #1
 800851a:	e09f      	b.n	800865c <_printf_i+0x1ec>
 800851c:	6820      	ldr	r0, [r4, #0]
 800851e:	682b      	ldr	r3, [r5, #0]
 8008520:	0607      	lsls	r7, r0, #24
 8008522:	f103 0104 	add.w	r1, r3, #4
 8008526:	6029      	str	r1, [r5, #0]
 8008528:	d501      	bpl.n	800852e <_printf_i+0xbe>
 800852a:	681e      	ldr	r6, [r3, #0]
 800852c:	e003      	b.n	8008536 <_printf_i+0xc6>
 800852e:	0646      	lsls	r6, r0, #25
 8008530:	d5fb      	bpl.n	800852a <_printf_i+0xba>
 8008532:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008536:	2e00      	cmp	r6, #0
 8008538:	da03      	bge.n	8008542 <_printf_i+0xd2>
 800853a:	232d      	movs	r3, #45	; 0x2d
 800853c:	4276      	negs	r6, r6
 800853e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008542:	485a      	ldr	r0, [pc, #360]	; (80086ac <_printf_i+0x23c>)
 8008544:	230a      	movs	r3, #10
 8008546:	e012      	b.n	800856e <_printf_i+0xfe>
 8008548:	682b      	ldr	r3, [r5, #0]
 800854a:	6820      	ldr	r0, [r4, #0]
 800854c:	1d19      	adds	r1, r3, #4
 800854e:	6029      	str	r1, [r5, #0]
 8008550:	0605      	lsls	r5, r0, #24
 8008552:	d501      	bpl.n	8008558 <_printf_i+0xe8>
 8008554:	681e      	ldr	r6, [r3, #0]
 8008556:	e002      	b.n	800855e <_printf_i+0xee>
 8008558:	0641      	lsls	r1, r0, #25
 800855a:	d5fb      	bpl.n	8008554 <_printf_i+0xe4>
 800855c:	881e      	ldrh	r6, [r3, #0]
 800855e:	4853      	ldr	r0, [pc, #332]	; (80086ac <_printf_i+0x23c>)
 8008560:	2f6f      	cmp	r7, #111	; 0x6f
 8008562:	bf0c      	ite	eq
 8008564:	2308      	moveq	r3, #8
 8008566:	230a      	movne	r3, #10
 8008568:	2100      	movs	r1, #0
 800856a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800856e:	6865      	ldr	r5, [r4, #4]
 8008570:	60a5      	str	r5, [r4, #8]
 8008572:	2d00      	cmp	r5, #0
 8008574:	bfa2      	ittt	ge
 8008576:	6821      	ldrge	r1, [r4, #0]
 8008578:	f021 0104 	bicge.w	r1, r1, #4
 800857c:	6021      	strge	r1, [r4, #0]
 800857e:	b90e      	cbnz	r6, 8008584 <_printf_i+0x114>
 8008580:	2d00      	cmp	r5, #0
 8008582:	d04b      	beq.n	800861c <_printf_i+0x1ac>
 8008584:	4615      	mov	r5, r2
 8008586:	fbb6 f1f3 	udiv	r1, r6, r3
 800858a:	fb03 6711 	mls	r7, r3, r1, r6
 800858e:	5dc7      	ldrb	r7, [r0, r7]
 8008590:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008594:	4637      	mov	r7, r6
 8008596:	42bb      	cmp	r3, r7
 8008598:	460e      	mov	r6, r1
 800859a:	d9f4      	bls.n	8008586 <_printf_i+0x116>
 800859c:	2b08      	cmp	r3, #8
 800859e:	d10b      	bne.n	80085b8 <_printf_i+0x148>
 80085a0:	6823      	ldr	r3, [r4, #0]
 80085a2:	07de      	lsls	r6, r3, #31
 80085a4:	d508      	bpl.n	80085b8 <_printf_i+0x148>
 80085a6:	6923      	ldr	r3, [r4, #16]
 80085a8:	6861      	ldr	r1, [r4, #4]
 80085aa:	4299      	cmp	r1, r3
 80085ac:	bfde      	ittt	le
 80085ae:	2330      	movle	r3, #48	; 0x30
 80085b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085b8:	1b52      	subs	r2, r2, r5
 80085ba:	6122      	str	r2, [r4, #16]
 80085bc:	f8cd a000 	str.w	sl, [sp]
 80085c0:	464b      	mov	r3, r9
 80085c2:	aa03      	add	r2, sp, #12
 80085c4:	4621      	mov	r1, r4
 80085c6:	4640      	mov	r0, r8
 80085c8:	f7ff fee4 	bl	8008394 <_printf_common>
 80085cc:	3001      	adds	r0, #1
 80085ce:	d14a      	bne.n	8008666 <_printf_i+0x1f6>
 80085d0:	f04f 30ff 	mov.w	r0, #4294967295
 80085d4:	b004      	add	sp, #16
 80085d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085da:	6823      	ldr	r3, [r4, #0]
 80085dc:	f043 0320 	orr.w	r3, r3, #32
 80085e0:	6023      	str	r3, [r4, #0]
 80085e2:	4833      	ldr	r0, [pc, #204]	; (80086b0 <_printf_i+0x240>)
 80085e4:	2778      	movs	r7, #120	; 0x78
 80085e6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80085ea:	6823      	ldr	r3, [r4, #0]
 80085ec:	6829      	ldr	r1, [r5, #0]
 80085ee:	061f      	lsls	r7, r3, #24
 80085f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80085f4:	d402      	bmi.n	80085fc <_printf_i+0x18c>
 80085f6:	065f      	lsls	r7, r3, #25
 80085f8:	bf48      	it	mi
 80085fa:	b2b6      	uxthmi	r6, r6
 80085fc:	07df      	lsls	r7, r3, #31
 80085fe:	bf48      	it	mi
 8008600:	f043 0320 	orrmi.w	r3, r3, #32
 8008604:	6029      	str	r1, [r5, #0]
 8008606:	bf48      	it	mi
 8008608:	6023      	strmi	r3, [r4, #0]
 800860a:	b91e      	cbnz	r6, 8008614 <_printf_i+0x1a4>
 800860c:	6823      	ldr	r3, [r4, #0]
 800860e:	f023 0320 	bic.w	r3, r3, #32
 8008612:	6023      	str	r3, [r4, #0]
 8008614:	2310      	movs	r3, #16
 8008616:	e7a7      	b.n	8008568 <_printf_i+0xf8>
 8008618:	4824      	ldr	r0, [pc, #144]	; (80086ac <_printf_i+0x23c>)
 800861a:	e7e4      	b.n	80085e6 <_printf_i+0x176>
 800861c:	4615      	mov	r5, r2
 800861e:	e7bd      	b.n	800859c <_printf_i+0x12c>
 8008620:	682b      	ldr	r3, [r5, #0]
 8008622:	6826      	ldr	r6, [r4, #0]
 8008624:	6961      	ldr	r1, [r4, #20]
 8008626:	1d18      	adds	r0, r3, #4
 8008628:	6028      	str	r0, [r5, #0]
 800862a:	0635      	lsls	r5, r6, #24
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	d501      	bpl.n	8008634 <_printf_i+0x1c4>
 8008630:	6019      	str	r1, [r3, #0]
 8008632:	e002      	b.n	800863a <_printf_i+0x1ca>
 8008634:	0670      	lsls	r0, r6, #25
 8008636:	d5fb      	bpl.n	8008630 <_printf_i+0x1c0>
 8008638:	8019      	strh	r1, [r3, #0]
 800863a:	2300      	movs	r3, #0
 800863c:	6123      	str	r3, [r4, #16]
 800863e:	4615      	mov	r5, r2
 8008640:	e7bc      	b.n	80085bc <_printf_i+0x14c>
 8008642:	682b      	ldr	r3, [r5, #0]
 8008644:	1d1a      	adds	r2, r3, #4
 8008646:	602a      	str	r2, [r5, #0]
 8008648:	681d      	ldr	r5, [r3, #0]
 800864a:	6862      	ldr	r2, [r4, #4]
 800864c:	2100      	movs	r1, #0
 800864e:	4628      	mov	r0, r5
 8008650:	f7f7 fdbe 	bl	80001d0 <memchr>
 8008654:	b108      	cbz	r0, 800865a <_printf_i+0x1ea>
 8008656:	1b40      	subs	r0, r0, r5
 8008658:	6060      	str	r0, [r4, #4]
 800865a:	6863      	ldr	r3, [r4, #4]
 800865c:	6123      	str	r3, [r4, #16]
 800865e:	2300      	movs	r3, #0
 8008660:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008664:	e7aa      	b.n	80085bc <_printf_i+0x14c>
 8008666:	6923      	ldr	r3, [r4, #16]
 8008668:	462a      	mov	r2, r5
 800866a:	4649      	mov	r1, r9
 800866c:	4640      	mov	r0, r8
 800866e:	47d0      	blx	sl
 8008670:	3001      	adds	r0, #1
 8008672:	d0ad      	beq.n	80085d0 <_printf_i+0x160>
 8008674:	6823      	ldr	r3, [r4, #0]
 8008676:	079b      	lsls	r3, r3, #30
 8008678:	d413      	bmi.n	80086a2 <_printf_i+0x232>
 800867a:	68e0      	ldr	r0, [r4, #12]
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	4298      	cmp	r0, r3
 8008680:	bfb8      	it	lt
 8008682:	4618      	movlt	r0, r3
 8008684:	e7a6      	b.n	80085d4 <_printf_i+0x164>
 8008686:	2301      	movs	r3, #1
 8008688:	4632      	mov	r2, r6
 800868a:	4649      	mov	r1, r9
 800868c:	4640      	mov	r0, r8
 800868e:	47d0      	blx	sl
 8008690:	3001      	adds	r0, #1
 8008692:	d09d      	beq.n	80085d0 <_printf_i+0x160>
 8008694:	3501      	adds	r5, #1
 8008696:	68e3      	ldr	r3, [r4, #12]
 8008698:	9903      	ldr	r1, [sp, #12]
 800869a:	1a5b      	subs	r3, r3, r1
 800869c:	42ab      	cmp	r3, r5
 800869e:	dcf2      	bgt.n	8008686 <_printf_i+0x216>
 80086a0:	e7eb      	b.n	800867a <_printf_i+0x20a>
 80086a2:	2500      	movs	r5, #0
 80086a4:	f104 0619 	add.w	r6, r4, #25
 80086a8:	e7f5      	b.n	8008696 <_printf_i+0x226>
 80086aa:	bf00      	nop
 80086ac:	08008c79 	.word	0x08008c79
 80086b0:	08008c8a 	.word	0x08008c8a

080086b4 <__sflush_r>:
 80086b4:	898a      	ldrh	r2, [r1, #12]
 80086b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086ba:	4605      	mov	r5, r0
 80086bc:	0710      	lsls	r0, r2, #28
 80086be:	460c      	mov	r4, r1
 80086c0:	d458      	bmi.n	8008774 <__sflush_r+0xc0>
 80086c2:	684b      	ldr	r3, [r1, #4]
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	dc05      	bgt.n	80086d4 <__sflush_r+0x20>
 80086c8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	dc02      	bgt.n	80086d4 <__sflush_r+0x20>
 80086ce:	2000      	movs	r0, #0
 80086d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80086d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80086d6:	2e00      	cmp	r6, #0
 80086d8:	d0f9      	beq.n	80086ce <__sflush_r+0x1a>
 80086da:	2300      	movs	r3, #0
 80086dc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80086e0:	682f      	ldr	r7, [r5, #0]
 80086e2:	6a21      	ldr	r1, [r4, #32]
 80086e4:	602b      	str	r3, [r5, #0]
 80086e6:	d032      	beq.n	800874e <__sflush_r+0x9a>
 80086e8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80086ea:	89a3      	ldrh	r3, [r4, #12]
 80086ec:	075a      	lsls	r2, r3, #29
 80086ee:	d505      	bpl.n	80086fc <__sflush_r+0x48>
 80086f0:	6863      	ldr	r3, [r4, #4]
 80086f2:	1ac0      	subs	r0, r0, r3
 80086f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80086f6:	b10b      	cbz	r3, 80086fc <__sflush_r+0x48>
 80086f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80086fa:	1ac0      	subs	r0, r0, r3
 80086fc:	2300      	movs	r3, #0
 80086fe:	4602      	mov	r2, r0
 8008700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008702:	6a21      	ldr	r1, [r4, #32]
 8008704:	4628      	mov	r0, r5
 8008706:	47b0      	blx	r6
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	89a3      	ldrh	r3, [r4, #12]
 800870c:	d106      	bne.n	800871c <__sflush_r+0x68>
 800870e:	6829      	ldr	r1, [r5, #0]
 8008710:	291d      	cmp	r1, #29
 8008712:	d82b      	bhi.n	800876c <__sflush_r+0xb8>
 8008714:	4a29      	ldr	r2, [pc, #164]	; (80087bc <__sflush_r+0x108>)
 8008716:	410a      	asrs	r2, r1
 8008718:	07d6      	lsls	r6, r2, #31
 800871a:	d427      	bmi.n	800876c <__sflush_r+0xb8>
 800871c:	2200      	movs	r2, #0
 800871e:	6062      	str	r2, [r4, #4]
 8008720:	04d9      	lsls	r1, r3, #19
 8008722:	6922      	ldr	r2, [r4, #16]
 8008724:	6022      	str	r2, [r4, #0]
 8008726:	d504      	bpl.n	8008732 <__sflush_r+0x7e>
 8008728:	1c42      	adds	r2, r0, #1
 800872a:	d101      	bne.n	8008730 <__sflush_r+0x7c>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	b903      	cbnz	r3, 8008732 <__sflush_r+0x7e>
 8008730:	6560      	str	r0, [r4, #84]	; 0x54
 8008732:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008734:	602f      	str	r7, [r5, #0]
 8008736:	2900      	cmp	r1, #0
 8008738:	d0c9      	beq.n	80086ce <__sflush_r+0x1a>
 800873a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800873e:	4299      	cmp	r1, r3
 8008740:	d002      	beq.n	8008748 <__sflush_r+0x94>
 8008742:	4628      	mov	r0, r5
 8008744:	f7ff fbea 	bl	8007f1c <_free_r>
 8008748:	2000      	movs	r0, #0
 800874a:	6360      	str	r0, [r4, #52]	; 0x34
 800874c:	e7c0      	b.n	80086d0 <__sflush_r+0x1c>
 800874e:	2301      	movs	r3, #1
 8008750:	4628      	mov	r0, r5
 8008752:	47b0      	blx	r6
 8008754:	1c41      	adds	r1, r0, #1
 8008756:	d1c8      	bne.n	80086ea <__sflush_r+0x36>
 8008758:	682b      	ldr	r3, [r5, #0]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0c5      	beq.n	80086ea <__sflush_r+0x36>
 800875e:	2b1d      	cmp	r3, #29
 8008760:	d001      	beq.n	8008766 <__sflush_r+0xb2>
 8008762:	2b16      	cmp	r3, #22
 8008764:	d101      	bne.n	800876a <__sflush_r+0xb6>
 8008766:	602f      	str	r7, [r5, #0]
 8008768:	e7b1      	b.n	80086ce <__sflush_r+0x1a>
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	e7ad      	b.n	80086d0 <__sflush_r+0x1c>
 8008774:	690f      	ldr	r7, [r1, #16]
 8008776:	2f00      	cmp	r7, #0
 8008778:	d0a9      	beq.n	80086ce <__sflush_r+0x1a>
 800877a:	0793      	lsls	r3, r2, #30
 800877c:	680e      	ldr	r6, [r1, #0]
 800877e:	bf08      	it	eq
 8008780:	694b      	ldreq	r3, [r1, #20]
 8008782:	600f      	str	r7, [r1, #0]
 8008784:	bf18      	it	ne
 8008786:	2300      	movne	r3, #0
 8008788:	eba6 0807 	sub.w	r8, r6, r7
 800878c:	608b      	str	r3, [r1, #8]
 800878e:	f1b8 0f00 	cmp.w	r8, #0
 8008792:	dd9c      	ble.n	80086ce <__sflush_r+0x1a>
 8008794:	6a21      	ldr	r1, [r4, #32]
 8008796:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008798:	4643      	mov	r3, r8
 800879a:	463a      	mov	r2, r7
 800879c:	4628      	mov	r0, r5
 800879e:	47b0      	blx	r6
 80087a0:	2800      	cmp	r0, #0
 80087a2:	dc06      	bgt.n	80087b2 <__sflush_r+0xfe>
 80087a4:	89a3      	ldrh	r3, [r4, #12]
 80087a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80087aa:	81a3      	strh	r3, [r4, #12]
 80087ac:	f04f 30ff 	mov.w	r0, #4294967295
 80087b0:	e78e      	b.n	80086d0 <__sflush_r+0x1c>
 80087b2:	4407      	add	r7, r0
 80087b4:	eba8 0800 	sub.w	r8, r8, r0
 80087b8:	e7e9      	b.n	800878e <__sflush_r+0xda>
 80087ba:	bf00      	nop
 80087bc:	dfbffffe 	.word	0xdfbffffe

080087c0 <_fflush_r>:
 80087c0:	b538      	push	{r3, r4, r5, lr}
 80087c2:	690b      	ldr	r3, [r1, #16]
 80087c4:	4605      	mov	r5, r0
 80087c6:	460c      	mov	r4, r1
 80087c8:	b913      	cbnz	r3, 80087d0 <_fflush_r+0x10>
 80087ca:	2500      	movs	r5, #0
 80087cc:	4628      	mov	r0, r5
 80087ce:	bd38      	pop	{r3, r4, r5, pc}
 80087d0:	b118      	cbz	r0, 80087da <_fflush_r+0x1a>
 80087d2:	6a03      	ldr	r3, [r0, #32]
 80087d4:	b90b      	cbnz	r3, 80087da <_fflush_r+0x1a>
 80087d6:	f7ff fa35 	bl	8007c44 <__sinit>
 80087da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d0f3      	beq.n	80087ca <_fflush_r+0xa>
 80087e2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80087e4:	07d0      	lsls	r0, r2, #31
 80087e6:	d404      	bmi.n	80087f2 <_fflush_r+0x32>
 80087e8:	0599      	lsls	r1, r3, #22
 80087ea:	d402      	bmi.n	80087f2 <_fflush_r+0x32>
 80087ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80087ee:	f7ff fb84 	bl	8007efa <__retarget_lock_acquire_recursive>
 80087f2:	4628      	mov	r0, r5
 80087f4:	4621      	mov	r1, r4
 80087f6:	f7ff ff5d 	bl	80086b4 <__sflush_r>
 80087fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80087fc:	07da      	lsls	r2, r3, #31
 80087fe:	4605      	mov	r5, r0
 8008800:	d4e4      	bmi.n	80087cc <_fflush_r+0xc>
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	059b      	lsls	r3, r3, #22
 8008806:	d4e1      	bmi.n	80087cc <_fflush_r+0xc>
 8008808:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800880a:	f7ff fb77 	bl	8007efc <__retarget_lock_release_recursive>
 800880e:	e7dd      	b.n	80087cc <_fflush_r+0xc>

08008810 <__swbuf_r>:
 8008810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008812:	460e      	mov	r6, r1
 8008814:	4614      	mov	r4, r2
 8008816:	4605      	mov	r5, r0
 8008818:	b118      	cbz	r0, 8008822 <__swbuf_r+0x12>
 800881a:	6a03      	ldr	r3, [r0, #32]
 800881c:	b90b      	cbnz	r3, 8008822 <__swbuf_r+0x12>
 800881e:	f7ff fa11 	bl	8007c44 <__sinit>
 8008822:	69a3      	ldr	r3, [r4, #24]
 8008824:	60a3      	str	r3, [r4, #8]
 8008826:	89a3      	ldrh	r3, [r4, #12]
 8008828:	071a      	lsls	r2, r3, #28
 800882a:	d525      	bpl.n	8008878 <__swbuf_r+0x68>
 800882c:	6923      	ldr	r3, [r4, #16]
 800882e:	b31b      	cbz	r3, 8008878 <__swbuf_r+0x68>
 8008830:	6823      	ldr	r3, [r4, #0]
 8008832:	6922      	ldr	r2, [r4, #16]
 8008834:	1a98      	subs	r0, r3, r2
 8008836:	6963      	ldr	r3, [r4, #20]
 8008838:	b2f6      	uxtb	r6, r6
 800883a:	4283      	cmp	r3, r0
 800883c:	4637      	mov	r7, r6
 800883e:	dc04      	bgt.n	800884a <__swbuf_r+0x3a>
 8008840:	4621      	mov	r1, r4
 8008842:	4628      	mov	r0, r5
 8008844:	f7ff ffbc 	bl	80087c0 <_fflush_r>
 8008848:	b9e0      	cbnz	r0, 8008884 <__swbuf_r+0x74>
 800884a:	68a3      	ldr	r3, [r4, #8]
 800884c:	3b01      	subs	r3, #1
 800884e:	60a3      	str	r3, [r4, #8]
 8008850:	6823      	ldr	r3, [r4, #0]
 8008852:	1c5a      	adds	r2, r3, #1
 8008854:	6022      	str	r2, [r4, #0]
 8008856:	701e      	strb	r6, [r3, #0]
 8008858:	6962      	ldr	r2, [r4, #20]
 800885a:	1c43      	adds	r3, r0, #1
 800885c:	429a      	cmp	r2, r3
 800885e:	d004      	beq.n	800886a <__swbuf_r+0x5a>
 8008860:	89a3      	ldrh	r3, [r4, #12]
 8008862:	07db      	lsls	r3, r3, #31
 8008864:	d506      	bpl.n	8008874 <__swbuf_r+0x64>
 8008866:	2e0a      	cmp	r6, #10
 8008868:	d104      	bne.n	8008874 <__swbuf_r+0x64>
 800886a:	4621      	mov	r1, r4
 800886c:	4628      	mov	r0, r5
 800886e:	f7ff ffa7 	bl	80087c0 <_fflush_r>
 8008872:	b938      	cbnz	r0, 8008884 <__swbuf_r+0x74>
 8008874:	4638      	mov	r0, r7
 8008876:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008878:	4621      	mov	r1, r4
 800887a:	4628      	mov	r0, r5
 800887c:	f000 f806 	bl	800888c <__swsetup_r>
 8008880:	2800      	cmp	r0, #0
 8008882:	d0d5      	beq.n	8008830 <__swbuf_r+0x20>
 8008884:	f04f 37ff 	mov.w	r7, #4294967295
 8008888:	e7f4      	b.n	8008874 <__swbuf_r+0x64>
	...

0800888c <__swsetup_r>:
 800888c:	b538      	push	{r3, r4, r5, lr}
 800888e:	4b2a      	ldr	r3, [pc, #168]	; (8008938 <__swsetup_r+0xac>)
 8008890:	4605      	mov	r5, r0
 8008892:	6818      	ldr	r0, [r3, #0]
 8008894:	460c      	mov	r4, r1
 8008896:	b118      	cbz	r0, 80088a0 <__swsetup_r+0x14>
 8008898:	6a03      	ldr	r3, [r0, #32]
 800889a:	b90b      	cbnz	r3, 80088a0 <__swsetup_r+0x14>
 800889c:	f7ff f9d2 	bl	8007c44 <__sinit>
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80088a6:	0718      	lsls	r0, r3, #28
 80088a8:	d422      	bmi.n	80088f0 <__swsetup_r+0x64>
 80088aa:	06d9      	lsls	r1, r3, #27
 80088ac:	d407      	bmi.n	80088be <__swsetup_r+0x32>
 80088ae:	2309      	movs	r3, #9
 80088b0:	602b      	str	r3, [r5, #0]
 80088b2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80088b6:	81a3      	strh	r3, [r4, #12]
 80088b8:	f04f 30ff 	mov.w	r0, #4294967295
 80088bc:	e034      	b.n	8008928 <__swsetup_r+0x9c>
 80088be:	0758      	lsls	r0, r3, #29
 80088c0:	d512      	bpl.n	80088e8 <__swsetup_r+0x5c>
 80088c2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80088c4:	b141      	cbz	r1, 80088d8 <__swsetup_r+0x4c>
 80088c6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80088ca:	4299      	cmp	r1, r3
 80088cc:	d002      	beq.n	80088d4 <__swsetup_r+0x48>
 80088ce:	4628      	mov	r0, r5
 80088d0:	f7ff fb24 	bl	8007f1c <_free_r>
 80088d4:	2300      	movs	r3, #0
 80088d6:	6363      	str	r3, [r4, #52]	; 0x34
 80088d8:	89a3      	ldrh	r3, [r4, #12]
 80088da:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80088de:	81a3      	strh	r3, [r4, #12]
 80088e0:	2300      	movs	r3, #0
 80088e2:	6063      	str	r3, [r4, #4]
 80088e4:	6923      	ldr	r3, [r4, #16]
 80088e6:	6023      	str	r3, [r4, #0]
 80088e8:	89a3      	ldrh	r3, [r4, #12]
 80088ea:	f043 0308 	orr.w	r3, r3, #8
 80088ee:	81a3      	strh	r3, [r4, #12]
 80088f0:	6923      	ldr	r3, [r4, #16]
 80088f2:	b94b      	cbnz	r3, 8008908 <__swsetup_r+0x7c>
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80088fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80088fe:	d003      	beq.n	8008908 <__swsetup_r+0x7c>
 8008900:	4621      	mov	r1, r4
 8008902:	4628      	mov	r0, r5
 8008904:	f000 f850 	bl	80089a8 <__smakebuf_r>
 8008908:	89a0      	ldrh	r0, [r4, #12]
 800890a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800890e:	f010 0301 	ands.w	r3, r0, #1
 8008912:	d00a      	beq.n	800892a <__swsetup_r+0x9e>
 8008914:	2300      	movs	r3, #0
 8008916:	60a3      	str	r3, [r4, #8]
 8008918:	6963      	ldr	r3, [r4, #20]
 800891a:	425b      	negs	r3, r3
 800891c:	61a3      	str	r3, [r4, #24]
 800891e:	6923      	ldr	r3, [r4, #16]
 8008920:	b943      	cbnz	r3, 8008934 <__swsetup_r+0xa8>
 8008922:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008926:	d1c4      	bne.n	80088b2 <__swsetup_r+0x26>
 8008928:	bd38      	pop	{r3, r4, r5, pc}
 800892a:	0781      	lsls	r1, r0, #30
 800892c:	bf58      	it	pl
 800892e:	6963      	ldrpl	r3, [r4, #20]
 8008930:	60a3      	str	r3, [r4, #8]
 8008932:	e7f4      	b.n	800891e <__swsetup_r+0x92>
 8008934:	2000      	movs	r0, #0
 8008936:	e7f7      	b.n	8008928 <__swsetup_r+0x9c>
 8008938:	2000006c 	.word	0x2000006c

0800893c <_sbrk_r>:
 800893c:	b538      	push	{r3, r4, r5, lr}
 800893e:	4d06      	ldr	r5, [pc, #24]	; (8008958 <_sbrk_r+0x1c>)
 8008940:	2300      	movs	r3, #0
 8008942:	4604      	mov	r4, r0
 8008944:	4608      	mov	r0, r1
 8008946:	602b      	str	r3, [r5, #0]
 8008948:	f7f8 fbfe 	bl	8001148 <_sbrk>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_sbrk_r+0x1a>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_sbrk_r+0x1a>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20004b98 	.word	0x20004b98

0800895c <__swhatbuf_r>:
 800895c:	b570      	push	{r4, r5, r6, lr}
 800895e:	460c      	mov	r4, r1
 8008960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008964:	2900      	cmp	r1, #0
 8008966:	b096      	sub	sp, #88	; 0x58
 8008968:	4615      	mov	r5, r2
 800896a:	461e      	mov	r6, r3
 800896c:	da0d      	bge.n	800898a <__swhatbuf_r+0x2e>
 800896e:	89a3      	ldrh	r3, [r4, #12]
 8008970:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008974:	f04f 0100 	mov.w	r1, #0
 8008978:	bf0c      	ite	eq
 800897a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800897e:	2340      	movne	r3, #64	; 0x40
 8008980:	2000      	movs	r0, #0
 8008982:	6031      	str	r1, [r6, #0]
 8008984:	602b      	str	r3, [r5, #0]
 8008986:	b016      	add	sp, #88	; 0x58
 8008988:	bd70      	pop	{r4, r5, r6, pc}
 800898a:	466a      	mov	r2, sp
 800898c:	f000 f848 	bl	8008a20 <_fstat_r>
 8008990:	2800      	cmp	r0, #0
 8008992:	dbec      	blt.n	800896e <__swhatbuf_r+0x12>
 8008994:	9901      	ldr	r1, [sp, #4]
 8008996:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800899a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800899e:	4259      	negs	r1, r3
 80089a0:	4159      	adcs	r1, r3
 80089a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80089a6:	e7eb      	b.n	8008980 <__swhatbuf_r+0x24>

080089a8 <__smakebuf_r>:
 80089a8:	898b      	ldrh	r3, [r1, #12]
 80089aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80089ac:	079d      	lsls	r5, r3, #30
 80089ae:	4606      	mov	r6, r0
 80089b0:	460c      	mov	r4, r1
 80089b2:	d507      	bpl.n	80089c4 <__smakebuf_r+0x1c>
 80089b4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80089b8:	6023      	str	r3, [r4, #0]
 80089ba:	6123      	str	r3, [r4, #16]
 80089bc:	2301      	movs	r3, #1
 80089be:	6163      	str	r3, [r4, #20]
 80089c0:	b002      	add	sp, #8
 80089c2:	bd70      	pop	{r4, r5, r6, pc}
 80089c4:	ab01      	add	r3, sp, #4
 80089c6:	466a      	mov	r2, sp
 80089c8:	f7ff ffc8 	bl	800895c <__swhatbuf_r>
 80089cc:	9900      	ldr	r1, [sp, #0]
 80089ce:	4605      	mov	r5, r0
 80089d0:	4630      	mov	r0, r6
 80089d2:	f7ff fb0f 	bl	8007ff4 <_malloc_r>
 80089d6:	b948      	cbnz	r0, 80089ec <__smakebuf_r+0x44>
 80089d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089dc:	059a      	lsls	r2, r3, #22
 80089de:	d4ef      	bmi.n	80089c0 <__smakebuf_r+0x18>
 80089e0:	f023 0303 	bic.w	r3, r3, #3
 80089e4:	f043 0302 	orr.w	r3, r3, #2
 80089e8:	81a3      	strh	r3, [r4, #12]
 80089ea:	e7e3      	b.n	80089b4 <__smakebuf_r+0xc>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	6020      	str	r0, [r4, #0]
 80089f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80089f4:	81a3      	strh	r3, [r4, #12]
 80089f6:	9b00      	ldr	r3, [sp, #0]
 80089f8:	6163      	str	r3, [r4, #20]
 80089fa:	9b01      	ldr	r3, [sp, #4]
 80089fc:	6120      	str	r0, [r4, #16]
 80089fe:	b15b      	cbz	r3, 8008a18 <__smakebuf_r+0x70>
 8008a00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008a04:	4630      	mov	r0, r6
 8008a06:	f000 f81d 	bl	8008a44 <_isatty_r>
 8008a0a:	b128      	cbz	r0, 8008a18 <__smakebuf_r+0x70>
 8008a0c:	89a3      	ldrh	r3, [r4, #12]
 8008a0e:	f023 0303 	bic.w	r3, r3, #3
 8008a12:	f043 0301 	orr.w	r3, r3, #1
 8008a16:	81a3      	strh	r3, [r4, #12]
 8008a18:	89a3      	ldrh	r3, [r4, #12]
 8008a1a:	431d      	orrs	r5, r3
 8008a1c:	81a5      	strh	r5, [r4, #12]
 8008a1e:	e7cf      	b.n	80089c0 <__smakebuf_r+0x18>

08008a20 <_fstat_r>:
 8008a20:	b538      	push	{r3, r4, r5, lr}
 8008a22:	4d07      	ldr	r5, [pc, #28]	; (8008a40 <_fstat_r+0x20>)
 8008a24:	2300      	movs	r3, #0
 8008a26:	4604      	mov	r4, r0
 8008a28:	4608      	mov	r0, r1
 8008a2a:	4611      	mov	r1, r2
 8008a2c:	602b      	str	r3, [r5, #0]
 8008a2e:	f7f8 fb62 	bl	80010f6 <_fstat>
 8008a32:	1c43      	adds	r3, r0, #1
 8008a34:	d102      	bne.n	8008a3c <_fstat_r+0x1c>
 8008a36:	682b      	ldr	r3, [r5, #0]
 8008a38:	b103      	cbz	r3, 8008a3c <_fstat_r+0x1c>
 8008a3a:	6023      	str	r3, [r4, #0]
 8008a3c:	bd38      	pop	{r3, r4, r5, pc}
 8008a3e:	bf00      	nop
 8008a40:	20004b98 	.word	0x20004b98

08008a44 <_isatty_r>:
 8008a44:	b538      	push	{r3, r4, r5, lr}
 8008a46:	4d06      	ldr	r5, [pc, #24]	; (8008a60 <_isatty_r+0x1c>)
 8008a48:	2300      	movs	r3, #0
 8008a4a:	4604      	mov	r4, r0
 8008a4c:	4608      	mov	r0, r1
 8008a4e:	602b      	str	r3, [r5, #0]
 8008a50:	f7f8 fb61 	bl	8001116 <_isatty>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	d102      	bne.n	8008a5e <_isatty_r+0x1a>
 8008a58:	682b      	ldr	r3, [r5, #0]
 8008a5a:	b103      	cbz	r3, 8008a5e <_isatty_r+0x1a>
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	bd38      	pop	{r3, r4, r5, pc}
 8008a60:	20004b98 	.word	0x20004b98

08008a64 <_init>:
 8008a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a66:	bf00      	nop
 8008a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a6a:	bc08      	pop	{r3}
 8008a6c:	469e      	mov	lr, r3
 8008a6e:	4770      	bx	lr

08008a70 <_fini>:
 8008a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a72:	bf00      	nop
 8008a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a76:	bc08      	pop	{r3}
 8008a78:	469e      	mov	lr, r3
 8008a7a:	4770      	bx	lr
