
ECEN-361-STM32-Lab-09-IPC-Examples.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000858c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000204  0800871c  0800871c  0001871c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008920  08008920  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08008920  08008920  00018920  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008928  08008928  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008928  08008928  00018928  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800892c  0800892c  0001892c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08008930  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b30  2000006c  0800899c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004b9c  0800899c  00024b9c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c2aa  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a6a  00000000  00000000  0003c389  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017f0  00000000  00000000  0003fdf8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000128c  00000000  00000000  000415e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002967f  00000000  00000000  00042874  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001abd5  00000000  00000000  0006bef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ff8ea  00000000  00000000  00086ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006be8  00000000  00000000  001863b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000075  00000000  00000000  0018cf9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008704 	.word	0x08008704

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008704 	.word	0x08008704

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <MultiFunctionShield_Display>:
	SEGMENT_VALUE[0] = 0x0e;    // Letter F
	}


void MultiFunctionShield_Display (int16_t value)
{
 800056c:	b480      	push	{r7}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	4603      	mov	r3, r0
 8000574:	80fb      	strh	r3, [r7, #6]
  if ((value > 9999) || (value < -999))   // out of range
 8000576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057a:	f242 720f 	movw	r2, #9999	; 0x270f
 800057e:	4293      	cmp	r3, r2
 8000580:	dc04      	bgt.n	800058c <MultiFunctionShield_Display+0x20>
 8000582:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000586:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 800058a:	dc0c      	bgt.n	80005a6 <MultiFunctionShield_Display+0x3a>
  {
    SEGMENT_VALUE[0] = SEGMENT_MINUS;
 800058c:	22bf      	movs	r2, #191	; 0xbf
 800058e:	4b7f      	ldr	r3, [pc, #508]	; (800078c <MultiFunctionShield_Display+0x220>)
 8000590:	701a      	strb	r2, [r3, #0]
    SEGMENT_VALUE[1] = SEGMENT_MINUS;
 8000592:	22bf      	movs	r2, #191	; 0xbf
 8000594:	4b7d      	ldr	r3, [pc, #500]	; (800078c <MultiFunctionShield_Display+0x220>)
 8000596:	705a      	strb	r2, [r3, #1]
    SEGMENT_VALUE[2] = SEGMENT_MINUS;
 8000598:	22bf      	movs	r2, #191	; 0xbf
 800059a:	4b7c      	ldr	r3, [pc, #496]	; (800078c <MultiFunctionShield_Display+0x220>)
 800059c:	709a      	strb	r2, [r3, #2]
    SEGMENT_VALUE[3] = SEGMENT_MINUS;
 800059e:	22bf      	movs	r2, #191	; 0xbf
 80005a0:	4b7a      	ldr	r3, [pc, #488]	; (800078c <MultiFunctionShield_Display+0x220>)
 80005a2:	70da      	strb	r2, [r3, #3]
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;

      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
    }
  }
}
 80005a4:	e0ec      	b.n	8000780 <MultiFunctionShield_Display+0x214>
    if (value > 0)   // positive values
 80005a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	dd72      	ble.n	8000694 <MultiFunctionShield_Display+0x128>
      if (value > 999)
 80005ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80005b6:	db0f      	blt.n	80005d8 <MultiFunctionShield_Display+0x6c>
        SEGMENT_VALUE[0] = SEGMENT_MAP [(uint8_t) (value / 1000)];
 80005b8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005bc:	4a74      	ldr	r2, [pc, #464]	; (8000790 <MultiFunctionShield_Display+0x224>)
 80005be:	fb82 1203 	smull	r1, r2, r2, r3
 80005c2:	1192      	asrs	r2, r2, #6
 80005c4:	17db      	asrs	r3, r3, #31
 80005c6:	1ad3      	subs	r3, r2, r3
 80005c8:	b21b      	sxth	r3, r3
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	461a      	mov	r2, r3
 80005ce:	4b71      	ldr	r3, [pc, #452]	; (8000794 <MultiFunctionShield_Display+0x228>)
 80005d0:	5c9a      	ldrb	r2, [r3, r2]
 80005d2:	4b6e      	ldr	r3, [pc, #440]	; (800078c <MultiFunctionShield_Display+0x220>)
 80005d4:	701a      	strb	r2, [r3, #0]
 80005d6:	e002      	b.n	80005de <MultiFunctionShield_Display+0x72>
        SEGMENT_VALUE[0] = BLANK_OR_ZERO_FILL;
 80005d8:	22c0      	movs	r2, #192	; 0xc0
 80005da:	4b6c      	ldr	r3, [pc, #432]	; (800078c <MultiFunctionShield_Display+0x220>)
 80005dc:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 80005de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005e2:	2b63      	cmp	r3, #99	; 0x63
 80005e4:	dd1b      	ble.n	800061e <MultiFunctionShield_Display+0xb2>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 80005e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80005ea:	4a6b      	ldr	r2, [pc, #428]	; (8000798 <MultiFunctionShield_Display+0x22c>)
 80005ec:	fb82 1203 	smull	r1, r2, r2, r3
 80005f0:	1152      	asrs	r2, r2, #5
 80005f2:	17db      	asrs	r3, r3, #31
 80005f4:	1ad3      	subs	r3, r2, r3
 80005f6:	b21a      	sxth	r2, r3
 80005f8:	4b68      	ldr	r3, [pc, #416]	; (800079c <MultiFunctionShield_Display+0x230>)
 80005fa:	fb83 1302 	smull	r1, r3, r3, r2
 80005fe:	1099      	asrs	r1, r3, #2
 8000600:	17d3      	asrs	r3, r2, #31
 8000602:	1ac9      	subs	r1, r1, r3
 8000604:	460b      	mov	r3, r1
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	440b      	add	r3, r1
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	1ad3      	subs	r3, r2, r3
 800060e:	b21b      	sxth	r3, r3
 8000610:	b2db      	uxtb	r3, r3
 8000612:	461a      	mov	r2, r3
 8000614:	4b5f      	ldr	r3, [pc, #380]	; (8000794 <MultiFunctionShield_Display+0x228>)
 8000616:	5c9a      	ldrb	r2, [r3, r2]
 8000618:	4b5c      	ldr	r3, [pc, #368]	; (800078c <MultiFunctionShield_Display+0x220>)
 800061a:	705a      	strb	r2, [r3, #1]
 800061c:	e002      	b.n	8000624 <MultiFunctionShield_Display+0xb8>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 800061e:	22c0      	movs	r2, #192	; 0xc0
 8000620:	4b5a      	ldr	r3, [pc, #360]	; (800078c <MultiFunctionShield_Display+0x220>)
 8000622:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 8000624:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000628:	2b09      	cmp	r3, #9
 800062a:	dd1b      	ble.n	8000664 <MultiFunctionShield_Display+0xf8>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 800062c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000630:	4a5a      	ldr	r2, [pc, #360]	; (800079c <MultiFunctionShield_Display+0x230>)
 8000632:	fb82 1203 	smull	r1, r2, r2, r3
 8000636:	1092      	asrs	r2, r2, #2
 8000638:	17db      	asrs	r3, r3, #31
 800063a:	1ad3      	subs	r3, r2, r3
 800063c:	b21a      	sxth	r2, r3
 800063e:	4b57      	ldr	r3, [pc, #348]	; (800079c <MultiFunctionShield_Display+0x230>)
 8000640:	fb83 1302 	smull	r1, r3, r3, r2
 8000644:	1099      	asrs	r1, r3, #2
 8000646:	17d3      	asrs	r3, r2, #31
 8000648:	1ac9      	subs	r1, r1, r3
 800064a:	460b      	mov	r3, r1
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	440b      	add	r3, r1
 8000650:	005b      	lsls	r3, r3, #1
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	b21b      	sxth	r3, r3
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	4b4e      	ldr	r3, [pc, #312]	; (8000794 <MultiFunctionShield_Display+0x228>)
 800065c:	5c9a      	ldrb	r2, [r3, r2]
 800065e:	4b4b      	ldr	r3, [pc, #300]	; (800078c <MultiFunctionShield_Display+0x220>)
 8000660:	709a      	strb	r2, [r3, #2]
 8000662:	e002      	b.n	800066a <MultiFunctionShield_Display+0xfe>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000664:	22c0      	movs	r2, #192	; 0xc0
 8000666:	4b49      	ldr	r3, [pc, #292]	; (800078c <MultiFunctionShield_Display+0x220>)
 8000668:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 800066a:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800066e:	4b4b      	ldr	r3, [pc, #300]	; (800079c <MultiFunctionShield_Display+0x230>)
 8000670:	fb83 1302 	smull	r1, r3, r3, r2
 8000674:	1099      	asrs	r1, r3, #2
 8000676:	17d3      	asrs	r3, r2, #31
 8000678:	1ac9      	subs	r1, r1, r3
 800067a:	460b      	mov	r3, r1
 800067c:	009b      	lsls	r3, r3, #2
 800067e:	440b      	add	r3, r1
 8000680:	005b      	lsls	r3, r3, #1
 8000682:	1ad3      	subs	r3, r2, r3
 8000684:	b21b      	sxth	r3, r3
 8000686:	b2db      	uxtb	r3, r3
 8000688:	461a      	mov	r2, r3
 800068a:	4b42      	ldr	r3, [pc, #264]	; (8000794 <MultiFunctionShield_Display+0x228>)
 800068c:	5c9a      	ldrb	r2, [r3, r2]
 800068e:	4b3f      	ldr	r3, [pc, #252]	; (800078c <MultiFunctionShield_Display+0x220>)
 8000690:	70da      	strb	r2, [r3, #3]
}
 8000692:	e075      	b.n	8000780 <MultiFunctionShield_Display+0x214>
    else if (value == 0)   // positive values
 8000694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10c      	bne.n	80006b6 <MultiFunctionShield_Display+0x14a>
		SEGMENT_VALUE[0] = SEGMENT_MAP[0];
 800069c:	22c0      	movs	r2, #192	; 0xc0
 800069e:	4b3b      	ldr	r3, [pc, #236]	; (800078c <MultiFunctionShield_Display+0x220>)
 80006a0:	701a      	strb	r2, [r3, #0]
		SEGMENT_VALUE[1] = SEGMENT_MAP[0];
 80006a2:	22c0      	movs	r2, #192	; 0xc0
 80006a4:	4b39      	ldr	r3, [pc, #228]	; (800078c <MultiFunctionShield_Display+0x220>)
 80006a6:	705a      	strb	r2, [r3, #1]
		SEGMENT_VALUE[2] = SEGMENT_MAP[0];
 80006a8:	22c0      	movs	r2, #192	; 0xc0
 80006aa:	4b38      	ldr	r3, [pc, #224]	; (800078c <MultiFunctionShield_Display+0x220>)
 80006ac:	709a      	strb	r2, [r3, #2]
		SEGMENT_VALUE[3] = SEGMENT_MAP[0];
 80006ae:	22c0      	movs	r2, #192	; 0xc0
 80006b0:	4b36      	ldr	r3, [pc, #216]	; (800078c <MultiFunctionShield_Display+0x220>)
 80006b2:	70da      	strb	r2, [r3, #3]
}
 80006b4:	e064      	b.n	8000780 <MultiFunctionShield_Display+0x214>
    else if (value < 0)      // negative values: "-" left
 80006b6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	da60      	bge.n	8000780 <MultiFunctionShield_Display+0x214>
      value *= -1;
 80006be:	88fb      	ldrh	r3, [r7, #6]
 80006c0:	425b      	negs	r3, r3
 80006c2:	b29b      	uxth	r3, r3
 80006c4:	80fb      	strh	r3, [r7, #6]
      SEGMENT_VALUE[0] = SEGMENT_MINUS;
 80006c6:	22bf      	movs	r2, #191	; 0xbf
 80006c8:	4b30      	ldr	r3, [pc, #192]	; (800078c <MultiFunctionShield_Display+0x220>)
 80006ca:	701a      	strb	r2, [r3, #0]
      if (value > 99)
 80006cc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d0:	2b63      	cmp	r3, #99	; 0x63
 80006d2:	dd1b      	ble.n	800070c <MultiFunctionShield_Display+0x1a0>
        SEGMENT_VALUE[1] = SEGMENT_MAP [(uint8_t) ((value / 100) % 10)];
 80006d4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80006d8:	4a2f      	ldr	r2, [pc, #188]	; (8000798 <MultiFunctionShield_Display+0x22c>)
 80006da:	fb82 1203 	smull	r1, r2, r2, r3
 80006de:	1152      	asrs	r2, r2, #5
 80006e0:	17db      	asrs	r3, r3, #31
 80006e2:	1ad3      	subs	r3, r2, r3
 80006e4:	b21a      	sxth	r2, r3
 80006e6:	4b2d      	ldr	r3, [pc, #180]	; (800079c <MultiFunctionShield_Display+0x230>)
 80006e8:	fb83 1302 	smull	r1, r3, r3, r2
 80006ec:	1099      	asrs	r1, r3, #2
 80006ee:	17d3      	asrs	r3, r2, #31
 80006f0:	1ac9      	subs	r1, r1, r3
 80006f2:	460b      	mov	r3, r1
 80006f4:	009b      	lsls	r3, r3, #2
 80006f6:	440b      	add	r3, r1
 80006f8:	005b      	lsls	r3, r3, #1
 80006fa:	1ad3      	subs	r3, r2, r3
 80006fc:	b21b      	sxth	r3, r3
 80006fe:	b2db      	uxtb	r3, r3
 8000700:	461a      	mov	r2, r3
 8000702:	4b24      	ldr	r3, [pc, #144]	; (8000794 <MultiFunctionShield_Display+0x228>)
 8000704:	5c9a      	ldrb	r2, [r3, r2]
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MultiFunctionShield_Display+0x220>)
 8000708:	705a      	strb	r2, [r3, #1]
 800070a:	e002      	b.n	8000712 <MultiFunctionShield_Display+0x1a6>
        SEGMENT_VALUE[1] = BLANK_OR_ZERO_FILL;
 800070c:	22c0      	movs	r2, #192	; 0xc0
 800070e:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MultiFunctionShield_Display+0x220>)
 8000710:	705a      	strb	r2, [r3, #1]
      if (value > 9)
 8000712:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000716:	2b09      	cmp	r3, #9
 8000718:	dd1b      	ble.n	8000752 <MultiFunctionShield_Display+0x1e6>
        SEGMENT_VALUE[2] = SEGMENT_MAP [(uint8_t) ((value / 10) % 10)];
 800071a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800071e:	4a1f      	ldr	r2, [pc, #124]	; (800079c <MultiFunctionShield_Display+0x230>)
 8000720:	fb82 1203 	smull	r1, r2, r2, r3
 8000724:	1092      	asrs	r2, r2, #2
 8000726:	17db      	asrs	r3, r3, #31
 8000728:	1ad3      	subs	r3, r2, r3
 800072a:	b21a      	sxth	r2, r3
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MultiFunctionShield_Display+0x230>)
 800072e:	fb83 1302 	smull	r1, r3, r3, r2
 8000732:	1099      	asrs	r1, r3, #2
 8000734:	17d3      	asrs	r3, r2, #31
 8000736:	1ac9      	subs	r1, r1, r3
 8000738:	460b      	mov	r3, r1
 800073a:	009b      	lsls	r3, r3, #2
 800073c:	440b      	add	r3, r1
 800073e:	005b      	lsls	r3, r3, #1
 8000740:	1ad3      	subs	r3, r2, r3
 8000742:	b21b      	sxth	r3, r3
 8000744:	b2db      	uxtb	r3, r3
 8000746:	461a      	mov	r2, r3
 8000748:	4b12      	ldr	r3, [pc, #72]	; (8000794 <MultiFunctionShield_Display+0x228>)
 800074a:	5c9a      	ldrb	r2, [r3, r2]
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MultiFunctionShield_Display+0x220>)
 800074e:	709a      	strb	r2, [r3, #2]
 8000750:	e002      	b.n	8000758 <MultiFunctionShield_Display+0x1ec>
        SEGMENT_VALUE[2] = BLANK_OR_ZERO_FILL;
 8000752:	22c0      	movs	r2, #192	; 0xc0
 8000754:	4b0d      	ldr	r3, [pc, #52]	; (800078c <MultiFunctionShield_Display+0x220>)
 8000756:	709a      	strb	r2, [r3, #2]
      SEGMENT_VALUE[3] = SEGMENT_MAP [(uint8_t) (value % 10)];
 8000758:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800075c:	4b0f      	ldr	r3, [pc, #60]	; (800079c <MultiFunctionShield_Display+0x230>)
 800075e:	fb83 1302 	smull	r1, r3, r3, r2
 8000762:	1099      	asrs	r1, r3, #2
 8000764:	17d3      	asrs	r3, r2, #31
 8000766:	1ac9      	subs	r1, r1, r3
 8000768:	460b      	mov	r3, r1
 800076a:	009b      	lsls	r3, r3, #2
 800076c:	440b      	add	r3, r1
 800076e:	005b      	lsls	r3, r3, #1
 8000770:	1ad3      	subs	r3, r2, r3
 8000772:	b21b      	sxth	r3, r3
 8000774:	b2db      	uxtb	r3, r3
 8000776:	461a      	mov	r2, r3
 8000778:	4b06      	ldr	r3, [pc, #24]	; (8000794 <MultiFunctionShield_Display+0x228>)
 800077a:	5c9a      	ldrb	r2, [r3, r2]
 800077c:	4b03      	ldr	r3, [pc, #12]	; (800078c <MultiFunctionShield_Display+0x220>)
 800077e:	70da      	strb	r2, [r3, #3]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	20000088 	.word	0x20000088
 8000790:	10624dd3 	.word	0x10624dd3
 8000794:	080087d8 	.word	0x080087d8
 8000798:	51eb851f 	.word	0x51eb851f
 800079c:	66666667 	.word	0x66666667

080007a0 <Clear_LEDs>:
		SEGMENT_VALUE[1] = SEGMENT_MAP [1];
		}
	}

void Clear_LEDs(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	af00      	add	r7, sp, #0
	  // Clear the LED lights


// LAB-04 needs D1 and D3 for SPI
#ifndef          LAB_04
  HAL_GPIO_WritePin(LED_D3_GPIO_Port, LED_D3_Pin,GPIO_PIN_SET);
 80007a4:	2201      	movs	r2, #1
 80007a6:	2180      	movs	r1, #128	; 0x80
 80007a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ac:	f000 ffd6 	bl	800175c <HAL_GPIO_WritePin>
#endif

  HAL_GPIO_WritePin(LED_D2_GPIO_Port, LED_D2_Pin,GPIO_PIN_SET);
 80007b0:	2201      	movs	r2, #1
 80007b2:	2140      	movs	r1, #64	; 0x40
 80007b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007b8:	f000 ffd0 	bl	800175c <HAL_GPIO_WritePin>

#ifndef          LAB_06
  HAL_GPIO_WritePin(LED_D4_GPIO_Port, LED_D4_Pin,GPIO_PIN_SET);
 80007bc:	2201      	movs	r2, #1
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <Clear_LEDs+0x38>)
 80007c2:	f000 ffcb 	bl	800175c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LED_D1_GPIO_Port, LED_D1_Pin,GPIO_PIN_SET);
 80007c6:	2201      	movs	r2, #1
 80007c8:	2120      	movs	r1, #32
 80007ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ce:	f000 ffc5 	bl	800175c <HAL_GPIO_WritePin>
#endif
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	48000400 	.word	0x48000400

080007dc <MultiFunctionShield_Clear>:

void MultiFunctionShield_Clear(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
	/* This blanks the SevenSegments and turns off the LEDs */


  SEGMENT_VALUE[0] = SEGMENT_BLANK;
 80007e0:	22ff      	movs	r2, #255	; 0xff
 80007e2:	4b08      	ldr	r3, [pc, #32]	; (8000804 <MultiFunctionShield_Clear+0x28>)
 80007e4:	701a      	strb	r2, [r3, #0]
  SEGMENT_VALUE[1] = SEGMENT_BLANK;
 80007e6:	22ff      	movs	r2, #255	; 0xff
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <MultiFunctionShield_Clear+0x28>)
 80007ea:	705a      	strb	r2, [r3, #1]
  SEGMENT_VALUE[2] = SEGMENT_BLANK;
 80007ec:	22ff      	movs	r2, #255	; 0xff
 80007ee:	4b05      	ldr	r3, [pc, #20]	; (8000804 <MultiFunctionShield_Clear+0x28>)
 80007f0:	709a      	strb	r2, [r3, #2]
  SEGMENT_VALUE[3] = SEGMENT_BLANK;
 80007f2:	22ff      	movs	r2, #255	; 0xff
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <MultiFunctionShield_Clear+0x28>)
 80007f6:	70da      	strb	r2, [r3, #3]
}
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	20000088 	.word	0x20000088

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800080c:	f000 fcda 	bl	80011c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000810:	f000 f884 	bl	800091c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000814:	f000 f92a 	bl	8000a6c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000818:	f000 f8f8 	bl	8000a0c <MX_USART2_UART_Init>
  MX_TIM17_Init();
 800081c:	f000 f8d0 	bl	80009c0 <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  printf("\033\143"); printf("Welcome to ECEN-361 Lab-09\n\r");
 8000820:	4828      	ldr	r0, [pc, #160]	; (80008c4 <main+0xbc>)
 8000822:	f007 f895 	bl	8007950 <iprintf>
 8000826:	4828      	ldr	r0, [pc, #160]	; (80008c8 <main+0xc0>)
 8000828:	f007 f892 	bl	8007950 <iprintf>
	// Start timer
	MultiFunctionShield_Clear();							// Clear the 7-seg display
 800082c:	f7ff ffd6 	bl	80007dc <MultiFunctionShield_Clear>
	HAL_TIM_Base_Start_IT(&htim17);							// LED SevenSeg cycle thru them
 8000830:	4826      	ldr	r0, [pc, #152]	; (80008cc <main+0xc4>)
 8000832:	f002 fb87 	bl	8002f44 <HAL_TIM_Base_Start_IT>
	MultiFunctionShield_Clear();							// Clear the 7-seg display
 8000836:	f7ff ffd1 	bl	80007dc <MultiFunctionShield_Clear>
	//MultiFunctionShield_Single_Digit_Display (4, 4);
	//MultiFunctionShield_Single_Digit_Display (2, 2);
	//MultiFunctionShield_Single_Digit_Display (3, 3);
	MultiFunctionShield_Display (1234);
 800083a:	f240 40d2 	movw	r0, #1234	; 0x4d2
 800083e:	f7ff fe95 	bl	800056c <MultiFunctionShield_Display>


	Clear_LEDs();
 8000842:	f7ff ffad 	bl	80007a0 <Clear_LEDs>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000846:	f003 fbb9 	bl	8003fbc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of Button_1_Semaphore_Binary */
  Button_1_Semaphore_BinaryHandle = osSemaphoreNew(1, 0, &Button_1_Semaphore_Binary_attributes);
 800084a:	4a21      	ldr	r2, [pc, #132]	; (80008d0 <main+0xc8>)
 800084c:	2100      	movs	r1, #0
 800084e:	2001      	movs	r0, #1
 8000850:	f003 fd3c 	bl	80042cc <osSemaphoreNew>
 8000854:	4603      	mov	r3, r0
 8000856:	4a1f      	ldr	r2, [pc, #124]	; (80008d4 <main+0xcc>)
 8000858:	6013      	str	r3, [r2, #0]

  /* creation of Button_3_Semaphore_Counting */
  Button_3_Semaphore_CountingHandle = osSemaphoreNew(31, 31, &Button_3_Semaphore_Counting_attributes);
 800085a:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <main+0xd0>)
 800085c:	211f      	movs	r1, #31
 800085e:	201f      	movs	r0, #31
 8000860:	f003 fd34 	bl	80042cc <osSemaphoreNew>
 8000864:	4603      	mov	r3, r0
 8000866:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <main+0xd4>)
 8000868:	6013      	str	r3, [r2, #0]
  /* add semaphores, ... */
  /* USER CODE END RTOS_SEMAPHORES */

  /* Create the timer(s) */
  /* creation of SW_Timer_LD3 */
  SW_Timer_LD3Handle = osTimerNew(SW_Timer_Toggle_LED, osTimerPeriodic, NULL, &SW_Timer_LD3_attributes);
 800086a:	4b1d      	ldr	r3, [pc, #116]	; (80008e0 <main+0xd8>)
 800086c:	2200      	movs	r2, #0
 800086e:	2101      	movs	r1, #1
 8000870:	481c      	ldr	r0, [pc, #112]	; (80008e4 <main+0xdc>)
 8000872:	f003 fcaf 	bl	80041d4 <osTimerNew>
 8000876:	4603      	mov	r3, r0
 8000878:	4a1b      	ldr	r2, [pc, #108]	; (80008e8 <main+0xe0>)
 800087a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <main+0xe4>)
 800087e:	2100      	movs	r1, #0
 8000880:	481b      	ldr	r0, [pc, #108]	; (80008f0 <main+0xe8>)
 8000882:	f003 fbe5 	bl	8004050 <osThreadNew>
 8000886:	4603      	mov	r3, r0
 8000888:	4a1a      	ldr	r2, [pc, #104]	; (80008f4 <main+0xec>)
 800088a:	6013      	str	r3, [r2, #0]

  /* creation of SemaphoreToggle */
  SemaphoreToggleHandle = osThreadNew(SemaphoreToggle_Task, NULL, &SemaphoreToggle_attributes);
 800088c:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <main+0xf0>)
 800088e:	2100      	movs	r1, #0
 8000890:	481a      	ldr	r0, [pc, #104]	; (80008fc <main+0xf4>)
 8000892:	f003 fbdd 	bl	8004050 <osThreadNew>
 8000896:	4603      	mov	r3, r0
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <main+0xf8>)
 800089a:	6013      	str	r3, [r2, #0]

  /* creation of NotifToggle */
  NotifToggleHandle = osThreadNew(NotifyToggleTask, NULL, &NotifToggle_attributes);
 800089c:	4a19      	ldr	r2, [pc, #100]	; (8000904 <main+0xfc>)
 800089e:	2100      	movs	r1, #0
 80008a0:	4819      	ldr	r0, [pc, #100]	; (8000908 <main+0x100>)
 80008a2:	f003 fbd5 	bl	8004050 <osThreadNew>
 80008a6:	4603      	mov	r3, r0
 80008a8:	4a18      	ldr	r2, [pc, #96]	; (800090c <main+0x104>)
 80008aa:	6013      	str	r3, [r2, #0]

  /* creation of SW_Timer_Toggle */
  SW_Timer_ToggleHandle = osThreadNew(SW_Timer_Task, NULL, &SW_Timer_Toggle_attributes);
 80008ac:	4a18      	ldr	r2, [pc, #96]	; (8000910 <main+0x108>)
 80008ae:	2100      	movs	r1, #0
 80008b0:	4818      	ldr	r0, [pc, #96]	; (8000914 <main+0x10c>)
 80008b2:	f003 fbcd 	bl	8004050 <osThreadNew>
 80008b6:	4603      	mov	r3, r0
 80008b8:	4a17      	ldr	r2, [pc, #92]	; (8000918 <main+0x110>)
 80008ba:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80008bc:	f003 fba2 	bl	8004004 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <main+0xb8>
 80008c2:	bf00      	nop
 80008c4:	0800879c 	.word	0x0800879c
 80008c8:	080087a0 	.word	0x080087a0
 80008cc:	2000008c 	.word	0x2000008c
 80008d0:	08008884 	.word	0x08008884
 80008d4:	20000174 	.word	0x20000174
 80008d8:	08008894 	.word	0x08008894
 80008dc:	20000178 	.word	0x20000178
 80008e0:	08008874 	.word	0x08008874
 80008e4:	08000cf9 	.word	0x08000cf9
 80008e8:	20000170 	.word	0x20000170
 80008ec:	080087e4 	.word	0x080087e4
 80008f0:	08000c99 	.word	0x08000c99
 80008f4:	20000160 	.word	0x20000160
 80008f8:	08008808 	.word	0x08008808
 80008fc:	08000ca9 	.word	0x08000ca9
 8000900:	20000164 	.word	0x20000164
 8000904:	0800882c 	.word	0x0800882c
 8000908:	08000cd9 	.word	0x08000cd9
 800090c:	20000168 	.word	0x20000168
 8000910:	08008850 	.word	0x08008850
 8000914:	08000ce9 	.word	0x08000ce9
 8000918:	2000016c 	.word	0x2000016c

0800091c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b096      	sub	sp, #88	; 0x58
 8000920:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000922:	f107 0314 	add.w	r3, r7, #20
 8000926:	2244      	movs	r2, #68	; 0x44
 8000928:	2100      	movs	r1, #0
 800092a:	4618      	mov	r0, r3
 800092c:	f007 f865 	bl	80079fa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000930:	463b      	mov	r3, r7
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
 800093c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800093e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000942:	f000 ff63 	bl	800180c <HAL_PWREx_ControlVoltageScaling>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800094c:	f000 f9f0 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000954:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000958:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800095a:	2310      	movs	r3, #16
 800095c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800095e:	2302      	movs	r3, #2
 8000960:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000962:	2302      	movs	r3, #2
 8000964:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000966:	2301      	movs	r3, #1
 8000968:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 800096a:	230a      	movs	r3, #10
 800096c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800096e:	2307      	movs	r3, #7
 8000970:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000972:	2302      	movs	r3, #2
 8000974:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000976:	2302      	movs	r3, #2
 8000978:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0314 	add.w	r3, r7, #20
 800097e:	4618      	mov	r0, r3
 8000980:	f000 ff9a 	bl	80018b8 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800098a:	f000 f9d1 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	230f      	movs	r3, #15
 8000990:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80009a2:	463b      	mov	r3, r7
 80009a4:	2104      	movs	r1, #4
 80009a6:	4618      	mov	r0, r3
 80009a8:	f001 fb62 	bl	8002070 <HAL_RCC_ClockConfig>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80009b2:	f000 f9bd 	bl	8000d30 <Error_Handler>
  }
}
 80009b6:	bf00      	nop
 80009b8:	3758      	adds	r7, #88	; 0x58
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
	...

080009c0 <MX_TIM17_Init>:
  * @brief TIM17 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM17_Init(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE END TIM17_Init 0 */

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 80009c4:	4b0f      	ldr	r3, [pc, #60]	; (8000a04 <MX_TIM17_Init+0x44>)
 80009c6:	4a10      	ldr	r2, [pc, #64]	; (8000a08 <MX_TIM17_Init+0x48>)
 80009c8:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 800-1;
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_TIM17_Init+0x44>)
 80009cc:	f240 321f 	movw	r2, #799	; 0x31f
 80009d0:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009d2:	4b0c      	ldr	r3, [pc, #48]	; (8000a04 <MX_TIM17_Init+0x44>)
 80009d4:	2200      	movs	r2, #0
 80009d6:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 100;
 80009d8:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <MX_TIM17_Init+0x44>)
 80009da:	2264      	movs	r2, #100	; 0x64
 80009dc:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009de:	4b09      	ldr	r3, [pc, #36]	; (8000a04 <MX_TIM17_Init+0x44>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <MX_TIM17_Init+0x44>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ea:	4b06      	ldr	r3, [pc, #24]	; (8000a04 <MX_TIM17_Init+0x44>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 80009f0:	4804      	ldr	r0, [pc, #16]	; (8000a04 <MX_TIM17_Init+0x44>)
 80009f2:	f002 fa4f 	bl	8002e94 <HAL_TIM_Base_Init>
 80009f6:	4603      	mov	r3, r0
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM17_Init+0x40>
  {
    Error_Handler();
 80009fc:	f000 f998 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */

}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	2000008c 	.word	0x2000008c
 8000a08:	40014800 	.word	0x40014800

08000a0c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a10:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a12:	4a15      	ldr	r2, [pc, #84]	; (8000a68 <MX_USART2_UART_Init+0x5c>)
 8000a14:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a18:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a1c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a1e:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a24:	4b0f      	ldr	r3, [pc, #60]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a2a:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a32:	220c      	movs	r2, #12
 8000a34:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_USART2_UART_Init+0x58>)
 8000a50:	f002 fcca 	bl	80033e8 <HAL_UART_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a5a:	f000 f969 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000d8 	.word	0x200000d8
 8000a68:	40004400 	.word	0x40004400

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b6a      	ldr	r3, [pc, #424]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a69      	ldr	r2, [pc, #420]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b67      	ldr	r3, [pc, #412]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	4b64      	ldr	r3, [pc, #400]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a63      	ldr	r2, [pc, #396]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b61      	ldr	r3, [pc, #388]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b5e      	ldr	r3, [pc, #376]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a5d      	ldr	r2, [pc, #372]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b5b      	ldr	r3, [pc, #364]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b58      	ldr	r3, [pc, #352]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a57      	ldr	r2, [pc, #348]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b55      	ldr	r3, [pc, #340]	; (8000c2c <MX_GPIO_Init+0x1c0>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_D1_Pin|LED_D2_Pin|LED_D3_Pin|SevenSeg_CLK_Pin
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 7178 	mov.w	r1, #992	; 0x3e0
 8000ae8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aec:	f000 fe36 	bl	800175c <HAL_GPIO_WritePin>
                          |SevenSeg_DATA_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SevenSeg_LATCH_Pin|LED_D4_Pin, GPIO_PIN_RESET);
 8000af0:	2200      	movs	r2, #0
 8000af2:	2160      	movs	r1, #96	; 0x60
 8000af4:	484e      	ldr	r0, [pc, #312]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000af6:	f000 fe31 	bl	800175c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000afa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000afe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b00:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4848      	ldr	r0, [pc, #288]	; (8000c34 <MX_GPIO_Init+0x1c8>)
 8000b12:	f000 fc79 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LM35_IN_Pin */
  GPIO_InitStruct.Pin = LM35_IN_Pin;
 8000b16:	2302      	movs	r3, #2
 8000b18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b1a:	230b      	movs	r3, #11
 8000b1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LM35_IN_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0314 	add.w	r3, r7, #20
 8000b26:	4619      	mov	r1, r3
 8000b28:	4842      	ldr	r0, [pc, #264]	; (8000c34 <MX_GPIO_Init+0x1c8>)
 8000b2a:	f000 fc6d 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b2e:	2301      	movs	r3, #1
 8000b30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000b32:	230b      	movs	r3, #11
 8000b34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b44:	f000 fc60 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : Button_1_Pin Button_2_Pin */
  GPIO_InitStruct.Pin = Button_1_Pin|Button_2_Pin;
 8000b48:	2312      	movs	r3, #18
 8000b4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b4c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b56:	f107 0314 	add.w	r3, r7, #20
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b60:	f000 fc52 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_D1_Pin LED_D2_Pin LED_D3_Pin */
  GPIO_InitStruct.Pin = LED_D1_Pin|LED_D2_Pin|LED_D3_Pin;
 8000b64:	23e0      	movs	r3, #224	; 0xe0
 8000b66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000b68:	2311      	movs	r3, #17
 8000b6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b6c:	2301      	movs	r3, #1
 8000b6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b70:	2300      	movs	r3, #0
 8000b72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b74:	f107 0314 	add.w	r3, r7, #20
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b7e:	f000 fc43 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : Button_3_Pin */
  GPIO_InitStruct.Pin = Button_3_Pin;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b86:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000b8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_3_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0314 	add.w	r3, r7, #20
 8000b94:	4619      	mov	r1, r3
 8000b96:	4826      	ldr	r0, [pc, #152]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000b98:	f000 fc36 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pins : SevenSeg_CLK_Pin SevenSeg_DATA_Pin */
  GPIO_InitStruct.Pin = SevenSeg_CLK_Pin|SevenSeg_DATA_Pin;
 8000b9c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ba0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000baa:	2300      	movs	r3, #0
 8000bac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bae:	f107 0314 	add.w	r3, r7, #20
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bb8:	f000 fc26 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : SevenSeg_LATCH_Pin */
  GPIO_InitStruct.Pin = SevenSeg_LATCH_Pin;
 8000bbc:	2320      	movs	r3, #32
 8000bbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SevenSeg_LATCH_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0314 	add.w	r3, r7, #20
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4817      	ldr	r0, [pc, #92]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000bd4:	f000 fc18 	bl	8001408 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_D4_Pin */
  GPIO_InitStruct.Pin = LED_D4_Pin;
 8000bd8:	2340      	movs	r3, #64	; 0x40
 8000bda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000bdc:	2311      	movs	r3, #17
 8000bde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000be0:	2301      	movs	r3, #1
 8000be2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be4:	2300      	movs	r3, #0
 8000be6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_D4_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	4619      	mov	r1, r3
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <MX_GPIO_Init+0x1c4>)
 8000bf0:	f000 fc0a 	bl	8001408 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2105      	movs	r1, #5
 8000bf8:	2006      	movs	r0, #6
 8000bfa:	f000 fbdb 	bl	80013b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000bfe:	2006      	movs	r0, #6
 8000c00:	f000 fbf4 	bl	80013ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	2105      	movs	r1, #5
 8000c08:	2007      	movs	r0, #7
 8000c0a:	f000 fbd3 	bl	80013b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000c0e:	2007      	movs	r0, #7
 8000c10:	f000 fbec 	bl	80013ec <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	2105      	movs	r1, #5
 8000c18:	200a      	movs	r0, #10
 8000c1a:	f000 fbcb 	bl	80013b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000c1e:	200a      	movs	r0, #10
 8000c20:	f000 fbe4 	bl	80013ec <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c24:	bf00      	nop
 8000c26:	3728      	adds	r7, #40	; 0x28
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40021000 	.word	0x40021000
 8000c30:	48000400 	.word	0x48000400
 8000c34:	48000800 	.word	0x48000800

08000c38 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
	{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b082      	sub	sp, #8
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	4603      	mov	r3, r0
 8000c40:	80fb      	strh	r3, [r7, #6]
	// All three buttons generate GPIO  interrupts
	switch(GPIO_Pin)
 8000c42:	88fb      	ldrh	r3, [r7, #6]
 8000c44:	2b10      	cmp	r3, #16
 8000c46:	d00b      	beq.n	8000c60 <HAL_GPIO_EXTI_Callback+0x28>
 8000c48:	2b10      	cmp	r3, #16
 8000c4a:	dc0c      	bgt.n	8000c66 <HAL_GPIO_EXTI_Callback+0x2e>
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d009      	beq.n	8000c64 <HAL_GPIO_EXTI_Callback+0x2c>
 8000c50:	2b02      	cmp	r3, #2
 8000c52:	d108      	bne.n	8000c66 <HAL_GPIO_EXTI_Callback+0x2e>
		{
		case Button_1_Pin:
			// Got the pin -- Give the semaphore
			osSemaphoreRelease(Button_1_Semaphore_BinaryHandle);
 8000c54:	4b06      	ldr	r3, [pc, #24]	; (8000c70 <HAL_GPIO_EXTI_Callback+0x38>)
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4618      	mov	r0, r3
 8000c5a:	f003 fc13 	bl	8004484 <osSemaphoreRelease>
			break;
 8000c5e:	e002      	b.n	8000c66 <HAL_GPIO_EXTI_Callback+0x2e>

		case Button_2_Pin:
			break;
 8000c60:	bf00      	nop
 8000c62:	e000      	b.n	8000c66 <HAL_GPIO_EXTI_Callback+0x2e>

		case Button_3_Pin:
			break;
 8000c64:	bf00      	nop
		}

	}
 8000c66:	bf00      	nop
 8000c68:	3708      	adds	r7, #8
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	20000174 	.word	0x20000174

08000c74 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b082      	sub	sp, #8
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000c7c:	1d39      	adds	r1, r7, #4
 8000c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c82:	2201      	movs	r2, #1
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <__io_putchar+0x20>)
 8000c86:	f002 fbfd 	bl	8003484 <HAL_UART_Transmit>

  return ch;
 8000c8a:	687b      	ldr	r3, [r7, #4]
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200000d8 	.word	0x200000d8

08000c98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ca0:	2001      	movs	r0, #1
 8000ca2:	f003 fa67 	bl	8004174 <osDelay>
 8000ca6:	e7fb      	b.n	8000ca0 <StartDefaultTask+0x8>

08000ca8 <SemaphoreToggle_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SemaphoreToggle_Task */
void SemaphoreToggle_Task(void *argument)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SemaphoreToggle_Task */
  /* Infinite loop */
#define delaytime 500 		//in milliseconds
  for(;;)
  {
	osSemaphoreAcquire(Button_1_Semaphore_BinaryHandle,100000);
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <SemaphoreToggle_Task+0x28>)
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	4907      	ldr	r1, [pc, #28]	; (8000cd4 <SemaphoreToggle_Task+0x2c>)
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f003 fb92 	bl	80043e0 <osSemaphoreAcquire>
	HAL_GPIO_TogglePin(LED_D1_GPIO_Port , LED_D1_Pin);
 8000cbc:	2120      	movs	r1, #32
 8000cbe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cc2:	f000 fd63 	bl	800178c <HAL_GPIO_TogglePin>
	osDelay(1);
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	f003 fa54 	bl	8004174 <osDelay>
	osSemaphoreAcquire(Button_1_Semaphore_BinaryHandle,100000);
 8000ccc:	e7f0      	b.n	8000cb0 <SemaphoreToggle_Task+0x8>
 8000cce:	bf00      	nop
 8000cd0:	20000174 	.word	0x20000174
 8000cd4:	000186a0 	.word	0x000186a0

08000cd8 <NotifyToggleTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_NotifyToggleTask */
void NotifyToggleTask(void *argument)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN NotifyToggleTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	f003 fa47 	bl	8004174 <osDelay>
 8000ce6:	e7fb      	b.n	8000ce0 <NotifyToggleTask+0x8>

08000ce8 <SW_Timer_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_SW_Timer_Task */
void SW_Timer_Task(void *argument)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SW_Timer_Task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cf0:	2001      	movs	r0, #1
 8000cf2:	f003 fa3f 	bl	8004174 <osDelay>
 8000cf6:	e7fb      	b.n	8000cf0 <SW_Timer_Task+0x8>

08000cf8 <SW_Timer_Toggle_LED>:
  /* USER CODE END SW_Timer_Task */
}

/* SW_Timer_Toggle_LED function */
void SW_Timer_Toggle_LED(void *argument)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SW_Timer_Toggle_LED */

  /* USER CODE END SW_Timer_Toggle_LED */
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a04      	ldr	r2, [pc, #16]	; (8000d2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d101      	bne.n	8000d22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1e:	f000 fa71 	bl	8001204 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40000400 	.word	0x40000400

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	e7fe      	b.n	8000d38 <Error_Handler+0x8>
	...

08000d3c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d42:	4b11      	ldr	r3, [pc, #68]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d46:	4a10      	ldr	r2, [pc, #64]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d48:	f043 0301 	orr.w	r3, r3, #1
 8000d4c:	6613      	str	r3, [r2, #96]	; 0x60
 8000d4e:	4b0e      	ldr	r3, [pc, #56]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d52:	f003 0301 	and.w	r3, r3, #1
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	4b0b      	ldr	r3, [pc, #44]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d5e:	4a0a      	ldr	r2, [pc, #40]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d64:	6593      	str	r3, [r2, #88]	; 0x58
 8000d66:	4b08      	ldr	r3, [pc, #32]	; (8000d88 <HAL_MspInit+0x4c>)
 8000d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d6e:	603b      	str	r3, [r7, #0]
 8000d70:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d72:	2200      	movs	r2, #0
 8000d74:	210f      	movs	r1, #15
 8000d76:	f06f 0001 	mvn.w	r0, #1
 8000d7a:	f000 fb1b 	bl	80013b4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	40021000 	.word	0x40021000

08000d8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b084      	sub	sp, #16
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM17)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	4a0d      	ldr	r2, [pc, #52]	; (8000dd0 <HAL_TIM_Base_MspInit+0x44>)
 8000d9a:	4293      	cmp	r3, r2
 8000d9c:	d113      	bne.n	8000dc6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_TIM_Base_MspInit+0x48>)
 8000da0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000da2:	4a0c      	ldr	r2, [pc, #48]	; (8000dd4 <HAL_TIM_Base_MspInit+0x48>)
 8000da4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000da8:	6613      	str	r3, [r2, #96]	; 0x60
 8000daa:	4b0a      	ldr	r3, [pc, #40]	; (8000dd4 <HAL_TIM_Base_MspInit+0x48>)
 8000dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
    /* TIM17 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM17_IRQn, 5, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	2105      	movs	r1, #5
 8000dba:	201a      	movs	r0, #26
 8000dbc:	f000 fafa 	bl	80013b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM17_IRQn);
 8000dc0:	201a      	movs	r0, #26
 8000dc2:	f000 fb13 	bl	80013ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }

}
 8000dc6:	bf00      	nop
 8000dc8:	3710      	adds	r7, #16
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	40014800 	.word	0x40014800
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b0ac      	sub	sp, #176	; 0xb0
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2288      	movs	r2, #136	; 0x88
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f006 fdfe 	bl	80079fa <memset>
  if(huart->Instance==USART2)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	4a21      	ldr	r2, [pc, #132]	; (8000e88 <HAL_UART_MspInit+0xb0>)
 8000e04:	4293      	cmp	r3, r2
 8000e06:	d13b      	bne.n	8000e80 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e08:	2302      	movs	r3, #2
 8000e0a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e10:	f107 0314 	add.w	r3, r7, #20
 8000e14:	4618      	mov	r0, r3
 8000e16:	f001 fb81 	bl	800251c <HAL_RCCEx_PeriphCLKConfig>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d001      	beq.n	8000e24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e20:	f7ff ff86 	bl	8000d30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e24:	4b19      	ldr	r3, [pc, #100]	; (8000e8c <HAL_UART_MspInit+0xb4>)
 8000e26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e28:	4a18      	ldr	r2, [pc, #96]	; (8000e8c <HAL_UART_MspInit+0xb4>)
 8000e2a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e2e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e30:	4b16      	ldr	r3, [pc, #88]	; (8000e8c <HAL_UART_MspInit+0xb4>)
 8000e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	613b      	str	r3, [r7, #16]
 8000e3a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <HAL_UART_MspInit+0xb4>)
 8000e3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e40:	4a12      	ldr	r2, [pc, #72]	; (8000e8c <HAL_UART_MspInit+0xb4>)
 8000e42:	f043 0301 	orr.w	r3, r3, #1
 8000e46:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e48:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <HAL_UART_MspInit+0xb4>)
 8000e4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	60fb      	str	r3, [r7, #12]
 8000e52:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e54:	230c      	movs	r3, #12
 8000e56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e6c:	2307      	movs	r3, #7
 8000e6e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e72:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000e76:	4619      	mov	r1, r3
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f000 fac4 	bl	8001408 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e80:	bf00      	nop
 8000e82:	37b0      	adds	r7, #176	; 0xb0
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	40004400 	.word	0x40004400
 8000e8c:	40021000 	.word	0x40021000

08000e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08e      	sub	sp, #56	; 0x38
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000e9e:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <HAL_InitTick+0xe0>)
 8000ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea2:	4a33      	ldr	r2, [pc, #204]	; (8000f70 <HAL_InitTick+0xe0>)
 8000ea4:	f043 0302 	orr.w	r3, r3, #2
 8000ea8:	6593      	str	r3, [r2, #88]	; 0x58
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <HAL_InitTick+0xe0>)
 8000eac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000eb6:	f107 0210 	add.w	r2, r7, #16
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	4611      	mov	r1, r2
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f001 fa99 	bl	80023f8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ec6:	6a3b      	ldr	r3, [r7, #32]
 8000ec8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM3 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d103      	bne.n	8000ed8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ed0:	f001 fa66 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 8000ed4:	6378      	str	r0, [r7, #52]	; 0x34
 8000ed6:	e004      	b.n	8000ee2 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ed8:	f001 fa62 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 8000edc:	4603      	mov	r3, r0
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000ee2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee4:	4a23      	ldr	r2, [pc, #140]	; (8000f74 <HAL_InitTick+0xe4>)
 8000ee6:	fba2 2303 	umull	r2, r3, r2, r3
 8000eea:	0c9b      	lsrs	r3, r3, #18
 8000eec:	3b01      	subs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000ef0:	4b21      	ldr	r3, [pc, #132]	; (8000f78 <HAL_InitTick+0xe8>)
 8000ef2:	4a22      	ldr	r2, [pc, #136]	; (8000f7c <HAL_InitTick+0xec>)
 8000ef4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000ef6:	4b20      	ldr	r3, [pc, #128]	; (8000f78 <HAL_InitTick+0xe8>)
 8000ef8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000efc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000efe:	4a1e      	ldr	r2, [pc, #120]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f02:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000f04:	4b1c      	ldr	r3, [pc, #112]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0a:	4b1b      	ldr	r3, [pc, #108]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	609a      	str	r2, [r3, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b19      	ldr	r3, [pc, #100]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim3);
 8000f16:	4818      	ldr	r0, [pc, #96]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f18:	f001 ffbc 	bl	8002e94 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000f22:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d11b      	bne.n	8000f62 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim3);
 8000f2a:	4813      	ldr	r0, [pc, #76]	; (8000f78 <HAL_InitTick+0xe8>)
 8000f2c:	f002 f80a 	bl	8002f44 <HAL_TIM_Base_Start_IT>
 8000f30:	4603      	mov	r3, r0
 8000f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d111      	bne.n	8000f62 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM3 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f3e:	201d      	movs	r0, #29
 8000f40:	f000 fa54 	bl	80013ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2b0f      	cmp	r3, #15
 8000f48:	d808      	bhi.n	8000f5c <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority, 0U);
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	6879      	ldr	r1, [r7, #4]
 8000f4e:	201d      	movs	r0, #29
 8000f50:	f000 fa30 	bl	80013b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_InitTick+0xf0>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6013      	str	r3, [r2, #0]
 8000f5a:	e002      	b.n	8000f62 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f5c:	2301      	movs	r3, #1
 8000f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3738      	adds	r7, #56	; 0x38
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	40021000 	.word	0x40021000
 8000f74:	431bde83 	.word	0x431bde83
 8000f78:	2000017c 	.word	0x2000017c
 8000f7c:	40000400 	.word	0x40000400
 8000f80:	20000004 	.word	0x20000004

08000f84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f88:	e7fe      	b.n	8000f88 <NMI_Handler+0x4>

08000f8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f8a:	b480      	push	{r7}
 8000f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <HardFault_Handler+0x4>

08000f90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f94:	e7fe      	b.n	8000f94 <MemManage_Handler+0x4>

08000f96 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f96:	b480      	push	{r7}
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f9a:	e7fe      	b.n	8000f9a <BusFault_Handler+0x4>

08000f9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000fa0:	e7fe      	b.n	8000fa0 <UsageFault_Handler+0x4>

08000fa2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000fa2:	b480      	push	{r7}
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fa6:	bf00      	nop
 8000fa8:	46bd      	mov	sp, r7
 8000faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fae:	4770      	bx	lr

08000fb0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_3_Pin);
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f000 fc03 	bl	80017c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000fba:	bf00      	nop
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_1_Pin);
 8000fc2:	2002      	movs	r0, #2
 8000fc4:	f000 fbfc 	bl	80017c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}

08000fcc <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_2_Pin);
 8000fd0:	2010      	movs	r0, #16
 8000fd2:	f000 fbf5 	bl	80017c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <TIM1_TRG_COM_TIM17_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM17 global interrupt.
  */
void TIM1_TRG_COM_TIM17_IRQHandler(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8000fe0:	4802      	ldr	r0, [pc, #8]	; (8000fec <TIM1_TRG_COM_TIM17_IRQHandler+0x10>)
 8000fe2:	f002 f81f 	bl	8003024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM17_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM17_IRQn 1 */
}
 8000fe6:	bf00      	nop
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	2000008c 	.word	0x2000008c

08000ff0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ff4:	4802      	ldr	r0, [pc, #8]	; (8001000 <TIM3_IRQHandler+0x10>)
 8000ff6:	f002 f815 	bl	8003024 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ffa:	bf00      	nop
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	2000017c 	.word	0x2000017c

08001004 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b086      	sub	sp, #24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	60b9      	str	r1, [r7, #8]
 800100e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001010:	2300      	movs	r3, #0
 8001012:	617b      	str	r3, [r7, #20]
 8001014:	e00a      	b.n	800102c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001016:	f3af 8000 	nop.w
 800101a:	4601      	mov	r1, r0
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	1c5a      	adds	r2, r3, #1
 8001020:	60ba      	str	r2, [r7, #8]
 8001022:	b2ca      	uxtb	r2, r1
 8001024:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001026:	697b      	ldr	r3, [r7, #20]
 8001028:	3301      	adds	r3, #1
 800102a:	617b      	str	r3, [r7, #20]
 800102c:	697a      	ldr	r2, [r7, #20]
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	429a      	cmp	r2, r3
 8001032:	dbf0      	blt.n	8001016 <_read+0x12>
  }

  return len;
 8001034:	687b      	ldr	r3, [r7, #4]
}
 8001036:	4618      	mov	r0, r3
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}

0800103e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800103e:	b580      	push	{r7, lr}
 8001040:	b086      	sub	sp, #24
 8001042:	af00      	add	r7, sp, #0
 8001044:	60f8      	str	r0, [r7, #12]
 8001046:	60b9      	str	r1, [r7, #8]
 8001048:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800104a:	2300      	movs	r3, #0
 800104c:	617b      	str	r3, [r7, #20]
 800104e:	e009      	b.n	8001064 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	1c5a      	adds	r2, r3, #1
 8001054:	60ba      	str	r2, [r7, #8]
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff fe0b 	bl	8000c74 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	3301      	adds	r3, #1
 8001062:	617b      	str	r3, [r7, #20]
 8001064:	697a      	ldr	r2, [r7, #20]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	429a      	cmp	r2, r3
 800106a:	dbf1      	blt.n	8001050 <_write+0x12>
  }
  return len;
 800106c:	687b      	ldr	r3, [r7, #4]
}
 800106e:	4618      	mov	r0, r3
 8001070:	3718      	adds	r7, #24
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}

08001076 <_close>:

int _close(int file)
{
 8001076:	b480      	push	{r7}
 8001078:	b083      	sub	sp, #12
 800107a:	af00      	add	r7, sp, #0
 800107c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001082:	4618      	mov	r0, r3
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800109e:	605a      	str	r2, [r3, #4]
  return 0;
 80010a0:	2300      	movs	r3, #0
}
 80010a2:	4618      	mov	r0, r3
 80010a4:	370c      	adds	r7, #12
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr

080010ae <_isatty>:

int _isatty(int file)
{
 80010ae:	b480      	push	{r7}
 80010b0:	b083      	sub	sp, #12
 80010b2:	af00      	add	r7, sp, #0
 80010b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80010b6:	2301      	movs	r3, #1
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	60b9      	str	r1, [r7, #8]
 80010ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
	...

080010e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010e8:	4a14      	ldr	r2, [pc, #80]	; (800113c <_sbrk+0x5c>)
 80010ea:	4b15      	ldr	r3, [pc, #84]	; (8001140 <_sbrk+0x60>)
 80010ec:	1ad3      	subs	r3, r2, r3
 80010ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010f4:	4b13      	ldr	r3, [pc, #76]	; (8001144 <_sbrk+0x64>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d102      	bne.n	8001102 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010fc:	4b11      	ldr	r3, [pc, #68]	; (8001144 <_sbrk+0x64>)
 80010fe:	4a12      	ldr	r2, [pc, #72]	; (8001148 <_sbrk+0x68>)
 8001100:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001102:	4b10      	ldr	r3, [pc, #64]	; (8001144 <_sbrk+0x64>)
 8001104:	681a      	ldr	r2, [r3, #0]
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4413      	add	r3, r2
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	429a      	cmp	r2, r3
 800110e:	d207      	bcs.n	8001120 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001110:	f006 fd18 	bl	8007b44 <__errno>
 8001114:	4603      	mov	r3, r0
 8001116:	220c      	movs	r2, #12
 8001118:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800111a:	f04f 33ff 	mov.w	r3, #4294967295
 800111e:	e009      	b.n	8001134 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001120:	4b08      	ldr	r3, [pc, #32]	; (8001144 <_sbrk+0x64>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <_sbrk+0x64>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4413      	add	r3, r2
 800112e:	4a05      	ldr	r2, [pc, #20]	; (8001144 <_sbrk+0x64>)
 8001130:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001132:	68fb      	ldr	r3, [r7, #12]
}
 8001134:	4618      	mov	r0, r3
 8001136:	3718      	adds	r7, #24
 8001138:	46bd      	mov	sp, r7
 800113a:	bd80      	pop	{r7, pc}
 800113c:	20018000 	.word	0x20018000
 8001140:	00000400 	.word	0x00000400
 8001144:	200001c8 	.word	0x200001c8
 8001148:	20004ba0 	.word	0x20004ba0

0800114c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <SystemInit+0x20>)
 8001152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001156:	4a05      	ldr	r2, [pc, #20]	; (800116c <SystemInit+0x20>)
 8001158:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800115c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001160:	bf00      	nop
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
 800116a:	bf00      	nop
 800116c:	e000ed00 	.word	0xe000ed00

08001170 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001170:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011a8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001174:	f7ff ffea 	bl	800114c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001178:	480c      	ldr	r0, [pc, #48]	; (80011ac <LoopForever+0x6>)
  ldr r1, =_edata
 800117a:	490d      	ldr	r1, [pc, #52]	; (80011b0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800117c:	4a0d      	ldr	r2, [pc, #52]	; (80011b4 <LoopForever+0xe>)
  movs r3, #0
 800117e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001180:	e002      	b.n	8001188 <LoopCopyDataInit>

08001182 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001182:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001184:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001186:	3304      	adds	r3, #4

08001188 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001188:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800118c:	d3f9      	bcc.n	8001182 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001190:	4c0a      	ldr	r4, [pc, #40]	; (80011bc <LoopForever+0x16>)
  movs r3, #0
 8001192:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001194:	e001      	b.n	800119a <LoopFillZerobss>

08001196 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001196:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001198:	3204      	adds	r2, #4

0800119a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800119c:	d3fb      	bcc.n	8001196 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800119e:	f006 fcd7 	bl	8007b50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80011a2:	f7ff fb31 	bl	8000808 <main>

080011a6 <LoopForever>:

LoopForever:
    b LoopForever
 80011a6:	e7fe      	b.n	80011a6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80011a8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80011ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b0:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80011b4:	08008930 	.word	0x08008930
  ldr r2, =_sbss
 80011b8:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80011bc:	20004b9c 	.word	0x20004b9c

080011c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80011c0:	e7fe      	b.n	80011c0 <ADC1_2_IRQHandler>
	...

080011c4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011ca:	2300      	movs	r3, #0
 80011cc:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011ce:	4b0c      	ldr	r3, [pc, #48]	; (8001200 <HAL_Init+0x3c>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	4a0b      	ldr	r2, [pc, #44]	; (8001200 <HAL_Init+0x3c>)
 80011d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011da:	2003      	movs	r0, #3
 80011dc:	f000 f8df 	bl	800139e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011e0:	200f      	movs	r0, #15
 80011e2:	f7ff fe55 	bl	8000e90 <HAL_InitTick>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	71fb      	strb	r3, [r7, #7]
 80011f0:	e001      	b.n	80011f6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011f2:	f7ff fda3 	bl	8000d3c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011f6:	79fb      	ldrb	r3, [r7, #7]
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	3708      	adds	r7, #8
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40022000 	.word	0x40022000

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	200001cc 	.word	0x200001cc

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	200001cc 	.word	0x200001cc

08001244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001244:	b480      	push	{r7}
 8001246:	b085      	sub	sp, #20
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001256:	68db      	ldr	r3, [r3, #12]
 8001258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800125a:	68ba      	ldr	r2, [r7, #8]
 800125c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001260:	4013      	ands	r3, r2
 8001262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800126c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001270:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001274:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001276:	4a04      	ldr	r2, [pc, #16]	; (8001288 <__NVIC_SetPriorityGrouping+0x44>)
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	60d3      	str	r3, [r2, #12]
}
 800127c:	bf00      	nop
 800127e:	3714      	adds	r7, #20
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	e000ed00 	.word	0xe000ed00

0800128c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001292:	68db      	ldr	r3, [r3, #12]
 8001294:	0a1b      	lsrs	r3, r3, #8
 8001296:	f003 0307 	and.w	r3, r3, #7
}
 800129a:	4618      	mov	r0, r3
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	db0b      	blt.n	80012d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	f003 021f 	and.w	r2, r3, #31
 80012c0:	4907      	ldr	r1, [pc, #28]	; (80012e0 <__NVIC_EnableIRQ+0x38>)
 80012c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c6:	095b      	lsrs	r3, r3, #5
 80012c8:	2001      	movs	r0, #1
 80012ca:	fa00 f202 	lsl.w	r2, r0, r2
 80012ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012d2:	bf00      	nop
 80012d4:	370c      	adds	r7, #12
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000e100 	.word	0xe000e100

080012e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	6039      	str	r1, [r7, #0]
 80012ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	db0a      	blt.n	800130e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	490c      	ldr	r1, [pc, #48]	; (8001330 <__NVIC_SetPriority+0x4c>)
 80012fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001302:	0112      	lsls	r2, r2, #4
 8001304:	b2d2      	uxtb	r2, r2
 8001306:	440b      	add	r3, r1
 8001308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800130c:	e00a      	b.n	8001324 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	b2da      	uxtb	r2, r3
 8001312:	4908      	ldr	r1, [pc, #32]	; (8001334 <__NVIC_SetPriority+0x50>)
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	f003 030f 	and.w	r3, r3, #15
 800131a:	3b04      	subs	r3, #4
 800131c:	0112      	lsls	r2, r2, #4
 800131e:	b2d2      	uxtb	r2, r2
 8001320:	440b      	add	r3, r1
 8001322:	761a      	strb	r2, [r3, #24]
}
 8001324:	bf00      	nop
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	e000e100 	.word	0xe000e100
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001338:	b480      	push	{r7}
 800133a:	b089      	sub	sp, #36	; 0x24
 800133c:	af00      	add	r7, sp, #0
 800133e:	60f8      	str	r0, [r7, #12]
 8001340:	60b9      	str	r1, [r7, #8]
 8001342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001344:	68fb      	ldr	r3, [r7, #12]
 8001346:	f003 0307 	and.w	r3, r3, #7
 800134a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f1c3 0307 	rsb	r3, r3, #7
 8001352:	2b04      	cmp	r3, #4
 8001354:	bf28      	it	cs
 8001356:	2304      	movcs	r3, #4
 8001358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3304      	adds	r3, #4
 800135e:	2b06      	cmp	r3, #6
 8001360:	d902      	bls.n	8001368 <NVIC_EncodePriority+0x30>
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	3b03      	subs	r3, #3
 8001366:	e000      	b.n	800136a <NVIC_EncodePriority+0x32>
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800136c:	f04f 32ff 	mov.w	r2, #4294967295
 8001370:	69bb      	ldr	r3, [r7, #24]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43da      	mvns	r2, r3
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	401a      	ands	r2, r3
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001380:	f04f 31ff 	mov.w	r1, #4294967295
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	fa01 f303 	lsl.w	r3, r1, r3
 800138a:	43d9      	mvns	r1, r3
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001390:	4313      	orrs	r3, r2
         );
}
 8001392:	4618      	mov	r0, r3
 8001394:	3724      	adds	r7, #36	; 0x24
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ff4c 	bl	8001244 <__NVIC_SetPriorityGrouping>
}
 80013ac:	bf00      	nop
 80013ae:	3708      	adds	r7, #8
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b086      	sub	sp, #24
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	4603      	mov	r3, r0
 80013bc:	60b9      	str	r1, [r7, #8]
 80013be:	607a      	str	r2, [r7, #4]
 80013c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80013c2:	2300      	movs	r3, #0
 80013c4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80013c6:	f7ff ff61 	bl	800128c <__NVIC_GetPriorityGrouping>
 80013ca:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013cc:	687a      	ldr	r2, [r7, #4]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	6978      	ldr	r0, [r7, #20]
 80013d2:	f7ff ffb1 	bl	8001338 <NVIC_EncodePriority>
 80013d6:	4602      	mov	r2, r0
 80013d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013dc:	4611      	mov	r1, r2
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff ff80 	bl	80012e4 <__NVIC_SetPriority>
}
 80013e4:	bf00      	nop
 80013e6:	3718      	adds	r7, #24
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bd80      	pop	{r7, pc}

080013ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	4603      	mov	r3, r0
 80013f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff54 	bl	80012a8 <__NVIC_EnableIRQ>
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001408:	b480      	push	{r7}
 800140a:	b087      	sub	sp, #28
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
 8001410:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001412:	2300      	movs	r3, #0
 8001414:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001416:	e17f      	b.n	8001718 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2101      	movs	r1, #1
 800141e:	697b      	ldr	r3, [r7, #20]
 8001420:	fa01 f303 	lsl.w	r3, r1, r3
 8001424:	4013      	ands	r3, r2
 8001426:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8171 	beq.w	8001712 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 0303 	and.w	r3, r3, #3
 8001438:	2b01      	cmp	r3, #1
 800143a:	d005      	beq.n	8001448 <HAL_GPIO_Init+0x40>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 0303 	and.w	r3, r3, #3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d130      	bne.n	80014aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	2203      	movs	r2, #3
 8001454:	fa02 f303 	lsl.w	r3, r2, r3
 8001458:	43db      	mvns	r3, r3
 800145a:	693a      	ldr	r2, [r7, #16]
 800145c:	4013      	ands	r3, r2
 800145e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001460:	683b      	ldr	r3, [r7, #0]
 8001462:	68da      	ldr	r2, [r3, #12]
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	005b      	lsls	r3, r3, #1
 8001468:	fa02 f303 	lsl.w	r3, r2, r3
 800146c:	693a      	ldr	r2, [r7, #16]
 800146e:	4313      	orrs	r3, r2
 8001470:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	693a      	ldr	r2, [r7, #16]
 8001476:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800147e:	2201      	movs	r2, #1
 8001480:	697b      	ldr	r3, [r7, #20]
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	43db      	mvns	r3, r3
 8001488:	693a      	ldr	r2, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	091b      	lsrs	r3, r3, #4
 8001494:	f003 0201 	and.w	r2, r3, #1
 8001498:	697b      	ldr	r3, [r7, #20]
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	693a      	ldr	r2, [r7, #16]
 80014a8:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b03      	cmp	r3, #3
 80014b4:	d118      	bne.n	80014e8 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80014bc:	2201      	movs	r2, #1
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	fa02 f303 	lsl.w	r3, r2, r3
 80014c4:	43db      	mvns	r3, r3
 80014c6:	693a      	ldr	r2, [r7, #16]
 80014c8:	4013      	ands	r3, r2
 80014ca:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	08db      	lsrs	r3, r3, #3
 80014d2:	f003 0201 	and.w	r2, r3, #1
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	fa02 f303 	lsl.w	r3, r2, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	693a      	ldr	r2, [r7, #16]
 80014e6:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 0303 	and.w	r3, r3, #3
 80014f0:	2b03      	cmp	r3, #3
 80014f2:	d017      	beq.n	8001524 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	005b      	lsls	r3, r3, #1
 80014fe:	2203      	movs	r2, #3
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	4013      	ands	r3, r2
 800150a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	689a      	ldr	r2, [r3, #8]
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	693a      	ldr	r2, [r7, #16]
 800151a:	4313      	orrs	r3, r2
 800151c:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b02      	cmp	r3, #2
 800152e:	d123      	bne.n	8001578 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	08da      	lsrs	r2, r3, #3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	3208      	adds	r2, #8
 8001538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800153c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	f003 0307 	and.w	r3, r3, #7
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	220f      	movs	r2, #15
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	691a      	ldr	r2, [r3, #16]
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	009b      	lsls	r3, r3, #2
 8001560:	fa02 f303 	lsl.w	r3, r2, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	08da      	lsrs	r2, r3, #3
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	3208      	adds	r2, #8
 8001572:	6939      	ldr	r1, [r7, #16]
 8001574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	005b      	lsls	r3, r3, #1
 8001582:	2203      	movs	r2, #3
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	693a      	ldr	r2, [r7, #16]
 800158c:	4013      	ands	r3, r2
 800158e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f003 0203 	and.w	r2, r3, #3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	693a      	ldr	r2, [r7, #16]
 80015aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	f000 80ac 	beq.w	8001712 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	4b5f      	ldr	r3, [pc, #380]	; (8001738 <HAL_GPIO_Init+0x330>)
 80015bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015be:	4a5e      	ldr	r2, [pc, #376]	; (8001738 <HAL_GPIO_Init+0x330>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6613      	str	r3, [r2, #96]	; 0x60
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <HAL_GPIO_Init+0x330>)
 80015c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d2:	4a5a      	ldr	r2, [pc, #360]	; (800173c <HAL_GPIO_Init+0x334>)
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	089b      	lsrs	r3, r3, #2
 80015d8:	3302      	adds	r3, #2
 80015da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015de:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f003 0303 	and.w	r3, r3, #3
 80015e6:	009b      	lsls	r3, r3, #2
 80015e8:	220f      	movs	r2, #15
 80015ea:	fa02 f303 	lsl.w	r3, r2, r3
 80015ee:	43db      	mvns	r3, r3
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	4013      	ands	r3, r2
 80015f4:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80015fc:	d025      	beq.n	800164a <HAL_GPIO_Init+0x242>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	4a4f      	ldr	r2, [pc, #316]	; (8001740 <HAL_GPIO_Init+0x338>)
 8001602:	4293      	cmp	r3, r2
 8001604:	d01f      	beq.n	8001646 <HAL_GPIO_Init+0x23e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a4e      	ldr	r2, [pc, #312]	; (8001744 <HAL_GPIO_Init+0x33c>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d019      	beq.n	8001642 <HAL_GPIO_Init+0x23a>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a4d      	ldr	r2, [pc, #308]	; (8001748 <HAL_GPIO_Init+0x340>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d013      	beq.n	800163e <HAL_GPIO_Init+0x236>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a4c      	ldr	r2, [pc, #304]	; (800174c <HAL_GPIO_Init+0x344>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d00d      	beq.n	800163a <HAL_GPIO_Init+0x232>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a4b      	ldr	r2, [pc, #300]	; (8001750 <HAL_GPIO_Init+0x348>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d007      	beq.n	8001636 <HAL_GPIO_Init+0x22e>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	4a4a      	ldr	r2, [pc, #296]	; (8001754 <HAL_GPIO_Init+0x34c>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d101      	bne.n	8001632 <HAL_GPIO_Init+0x22a>
 800162e:	2306      	movs	r3, #6
 8001630:	e00c      	b.n	800164c <HAL_GPIO_Init+0x244>
 8001632:	2307      	movs	r3, #7
 8001634:	e00a      	b.n	800164c <HAL_GPIO_Init+0x244>
 8001636:	2305      	movs	r3, #5
 8001638:	e008      	b.n	800164c <HAL_GPIO_Init+0x244>
 800163a:	2304      	movs	r3, #4
 800163c:	e006      	b.n	800164c <HAL_GPIO_Init+0x244>
 800163e:	2303      	movs	r3, #3
 8001640:	e004      	b.n	800164c <HAL_GPIO_Init+0x244>
 8001642:	2302      	movs	r3, #2
 8001644:	e002      	b.n	800164c <HAL_GPIO_Init+0x244>
 8001646:	2301      	movs	r3, #1
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x244>
 800164a:	2300      	movs	r3, #0
 800164c:	697a      	ldr	r2, [r7, #20]
 800164e:	f002 0203 	and.w	r2, r2, #3
 8001652:	0092      	lsls	r2, r2, #2
 8001654:	4093      	lsls	r3, r2
 8001656:	693a      	ldr	r2, [r7, #16]
 8001658:	4313      	orrs	r3, r2
 800165a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800165c:	4937      	ldr	r1, [pc, #220]	; (800173c <HAL_GPIO_Init+0x334>)
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	089b      	lsrs	r3, r3, #2
 8001662:	3302      	adds	r3, #2
 8001664:	693a      	ldr	r2, [r7, #16]
 8001666:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800166a:	4b3b      	ldr	r3, [pc, #236]	; (8001758 <HAL_GPIO_Init+0x350>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800168e:	4a32      	ldr	r2, [pc, #200]	; (8001758 <HAL_GPIO_Init+0x350>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001694:	4b30      	ldr	r3, [pc, #192]	; (8001758 <HAL_GPIO_Init+0x350>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016b8:	4a27      	ldr	r2, [pc, #156]	; (8001758 <HAL_GPIO_Init+0x350>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016be:	4b26      	ldr	r3, [pc, #152]	; (8001758 <HAL_GPIO_Init+0x350>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016e2:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <HAL_GPIO_Init+0x350>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016e8:	4b1b      	ldr	r3, [pc, #108]	; (8001758 <HAL_GPIO_Init+0x350>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	43db      	mvns	r3, r3
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4013      	ands	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001700:	2b00      	cmp	r3, #0
 8001702:	d003      	beq.n	800170c <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001704:	693a      	ldr	r2, [r7, #16]
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	4313      	orrs	r3, r2
 800170a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800170c:	4a12      	ldr	r2, [pc, #72]	; (8001758 <HAL_GPIO_Init+0x350>)
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001712:	697b      	ldr	r3, [r7, #20]
 8001714:	3301      	adds	r3, #1
 8001716:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001718:	683b      	ldr	r3, [r7, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	fa22 f303 	lsr.w	r3, r2, r3
 8001722:	2b00      	cmp	r3, #0
 8001724:	f47f ae78 	bne.w	8001418 <HAL_GPIO_Init+0x10>
  }
}
 8001728:	bf00      	nop
 800172a:	bf00      	nop
 800172c:	371c      	adds	r7, #28
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	40010000 	.word	0x40010000
 8001740:	48000400 	.word	0x48000400
 8001744:	48000800 	.word	0x48000800
 8001748:	48000c00 	.word	0x48000c00
 800174c:	48001000 	.word	0x48001000
 8001750:	48001400 	.word	0x48001400
 8001754:	48001800 	.word	0x48001800
 8001758:	40010400 	.word	0x40010400

0800175c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
 8001768:	4613      	mov	r3, r2
 800176a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800176c:	787b      	ldrb	r3, [r7, #1]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d003      	beq.n	800177a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001772:	887a      	ldrh	r2, [r7, #2]
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001778:	e002      	b.n	8001780 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800177a:	887a      	ldrh	r2, [r7, #2]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	695b      	ldr	r3, [r3, #20]
 800179c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800179e:	887a      	ldrh	r2, [r7, #2]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	041a      	lsls	r2, r3, #16
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	43d9      	mvns	r1, r3
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	400b      	ands	r3, r1
 80017ae:	431a      	orrs	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	619a      	str	r2, [r3, #24]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017cc:	695a      	ldr	r2, [r3, #20]
 80017ce:	88fb      	ldrh	r3, [r7, #6]
 80017d0:	4013      	ands	r3, r2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d006      	beq.n	80017e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80017d6:	4a05      	ldr	r2, [pc, #20]	; (80017ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80017dc:	88fb      	ldrh	r3, [r7, #6]
 80017de:	4618      	mov	r0, r3
 80017e0:	f7ff fa2a 	bl	8000c38 <HAL_GPIO_EXTI_Callback>
  }
}
 80017e4:	bf00      	nop
 80017e6:	3708      	adds	r7, #8
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40010400 	.word	0x40010400

080017f0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80017f4:	4b04      	ldr	r3, [pc, #16]	; (8001808 <HAL_PWREx_GetVoltageRange+0x18>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	40007000 	.word	0x40007000

0800180c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800181a:	d130      	bne.n	800187e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800181c:	4b23      	ldr	r3, [pc, #140]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001828:	d038      	beq.n	800189c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800182a:	4b20      	ldr	r3, [pc, #128]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001832:	4a1e      	ldr	r2, [pc, #120]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001834:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001838:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800183a:	4b1d      	ldr	r3, [pc, #116]	; (80018b0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	2232      	movs	r2, #50	; 0x32
 8001840:	fb02 f303 	mul.w	r3, r2, r3
 8001844:	4a1b      	ldr	r2, [pc, #108]	; (80018b4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001846:	fba2 2303 	umull	r2, r3, r2, r3
 800184a:	0c9b      	lsrs	r3, r3, #18
 800184c:	3301      	adds	r3, #1
 800184e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001850:	e002      	b.n	8001858 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3b01      	subs	r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001858:	4b14      	ldr	r3, [pc, #80]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800185a:	695b      	ldr	r3, [r3, #20]
 800185c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001860:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001864:	d102      	bne.n	800186c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d1f2      	bne.n	8001852 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800186c:	4b0f      	ldr	r3, [pc, #60]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800186e:	695b      	ldr	r3, [r3, #20]
 8001870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001874:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001878:	d110      	bne.n	800189c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e00f      	b.n	800189e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800187e:	4b0b      	ldr	r3, [pc, #44]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001886:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800188a:	d007      	beq.n	800189c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001894:	4a05      	ldr	r2, [pc, #20]	; (80018ac <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001896:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800189c:	2300      	movs	r3, #0
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3714      	adds	r7, #20
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40007000 	.word	0x40007000
 80018b0:	20000000 	.word	0x20000000
 80018b4:	431bde83 	.word	0x431bde83

080018b8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b088      	sub	sp, #32
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d101      	bne.n	80018ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e3ca      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ca:	4b97      	ldr	r3, [pc, #604]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	f003 030c 	and.w	r3, r3, #12
 80018d2:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018d4:	4b94      	ldr	r3, [pc, #592]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80018d6:	68db      	ldr	r3, [r3, #12]
 80018d8:	f003 0303 	and.w	r3, r3, #3
 80018dc:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f003 0310 	and.w	r3, r3, #16
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 80e4 	beq.w	8001ab4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d007      	beq.n	8001902 <HAL_RCC_OscConfig+0x4a>
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	2b0c      	cmp	r3, #12
 80018f6:	f040 808b 	bne.w	8001a10 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	2b01      	cmp	r3, #1
 80018fe:	f040 8087 	bne.w	8001a10 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001902:	4b89      	ldr	r3, [pc, #548]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d005      	beq.n	800191a <HAL_RCC_OscConfig+0x62>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	699b      	ldr	r3, [r3, #24]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d101      	bne.n	800191a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8001916:	2301      	movs	r3, #1
 8001918:	e3a2      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a1a      	ldr	r2, [r3, #32]
 800191e:	4b82      	ldr	r3, [pc, #520]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	f003 0308 	and.w	r3, r3, #8
 8001926:	2b00      	cmp	r3, #0
 8001928:	d004      	beq.n	8001934 <HAL_RCC_OscConfig+0x7c>
 800192a:	4b7f      	ldr	r3, [pc, #508]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001932:	e005      	b.n	8001940 <HAL_RCC_OscConfig+0x88>
 8001934:	4b7c      	ldr	r3, [pc, #496]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001936:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800193a:	091b      	lsrs	r3, r3, #4
 800193c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001940:	4293      	cmp	r3, r2
 8001942:	d223      	bcs.n	800198c <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6a1b      	ldr	r3, [r3, #32]
 8001948:	4618      	mov	r0, r3
 800194a:	f000 fd87 	bl	800245c <RCC_SetFlashLatencyFromMSIRange>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e383      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001958:	4b73      	ldr	r3, [pc, #460]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a72      	ldr	r2, [pc, #456]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 800195e:	f043 0308 	orr.w	r3, r3, #8
 8001962:	6013      	str	r3, [r2, #0]
 8001964:	4b70      	ldr	r3, [pc, #448]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6a1b      	ldr	r3, [r3, #32]
 8001970:	496d      	ldr	r1, [pc, #436]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001972:	4313      	orrs	r3, r2
 8001974:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001976:	4b6c      	ldr	r3, [pc, #432]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001978:	685b      	ldr	r3, [r3, #4]
 800197a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	69db      	ldr	r3, [r3, #28]
 8001982:	021b      	lsls	r3, r3, #8
 8001984:	4968      	ldr	r1, [pc, #416]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001986:	4313      	orrs	r3, r2
 8001988:	604b      	str	r3, [r1, #4]
 800198a:	e025      	b.n	80019d8 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800198c:	4b66      	ldr	r3, [pc, #408]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a65      	ldr	r2, [pc, #404]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001992:	f043 0308 	orr.w	r3, r3, #8
 8001996:	6013      	str	r3, [r2, #0]
 8001998:	4b63      	ldr	r3, [pc, #396]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6a1b      	ldr	r3, [r3, #32]
 80019a4:	4960      	ldr	r1, [pc, #384]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019a6:	4313      	orrs	r3, r2
 80019a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019aa:	4b5f      	ldr	r3, [pc, #380]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	021b      	lsls	r3, r3, #8
 80019b8:	495b      	ldr	r1, [pc, #364]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d109      	bne.n	80019d8 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a1b      	ldr	r3, [r3, #32]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 fd47 	bl	800245c <RCC_SetFlashLatencyFromMSIRange>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80019d4:	2301      	movs	r3, #1
 80019d6:	e343      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d8:	f000 fc4a 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 80019dc:	4602      	mov	r2, r0
 80019de:	4b52      	ldr	r3, [pc, #328]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 80019e0:	689b      	ldr	r3, [r3, #8]
 80019e2:	091b      	lsrs	r3, r3, #4
 80019e4:	f003 030f 	and.w	r3, r3, #15
 80019e8:	4950      	ldr	r1, [pc, #320]	; (8001b2c <HAL_RCC_OscConfig+0x274>)
 80019ea:	5ccb      	ldrb	r3, [r1, r3]
 80019ec:	f003 031f 	and.w	r3, r3, #31
 80019f0:	fa22 f303 	lsr.w	r3, r2, r3
 80019f4:	4a4e      	ldr	r2, [pc, #312]	; (8001b30 <HAL_RCC_OscConfig+0x278>)
 80019f6:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80019f8:	4b4e      	ldr	r3, [pc, #312]	; (8001b34 <HAL_RCC_OscConfig+0x27c>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff fa47 	bl	8000e90 <HAL_InitTick>
 8001a02:	4603      	mov	r3, r0
 8001a04:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001a06:	7bfb      	ldrb	r3, [r7, #15]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d052      	beq.n	8001ab2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001a0c:	7bfb      	ldrb	r3, [r7, #15]
 8001a0e:	e327      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	699b      	ldr	r3, [r3, #24]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d032      	beq.n	8001a7e <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001a18:	4b43      	ldr	r3, [pc, #268]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a42      	ldr	r2, [pc, #264]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a1e:	f043 0301 	orr.w	r3, r3, #1
 8001a22:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a24:	f7ff fc02 	bl	800122c <HAL_GetTick>
 8001a28:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a2a:	e008      	b.n	8001a3e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a2c:	f7ff fbfe 	bl	800122c <HAL_GetTick>
 8001a30:	4602      	mov	r2, r0
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	1ad3      	subs	r3, r2, r3
 8001a36:	2b02      	cmp	r3, #2
 8001a38:	d901      	bls.n	8001a3e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001a3a:	2303      	movs	r3, #3
 8001a3c:	e310      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f0      	beq.n	8001a2c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001a4a:	4b37      	ldr	r3, [pc, #220]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	4a36      	ldr	r2, [pc, #216]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a50:	f043 0308 	orr.w	r3, r3, #8
 8001a54:	6013      	str	r3, [r2, #0]
 8001a56:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	4931      	ldr	r1, [pc, #196]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a64:	4313      	orrs	r3, r2
 8001a66:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001a68:	4b2f      	ldr	r3, [pc, #188]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	69db      	ldr	r3, [r3, #28]
 8001a74:	021b      	lsls	r3, r3, #8
 8001a76:	492c      	ldr	r1, [pc, #176]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	604b      	str	r3, [r1, #4]
 8001a7c:	e01a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a29      	ldr	r2, [pc, #164]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001a84:	f023 0301 	bic.w	r3, r3, #1
 8001a88:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a8a:	f7ff fbcf 	bl	800122c <HAL_GetTick>
 8001a8e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a90:	e008      	b.n	8001aa4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a92:	f7ff fbcb 	bl	800122c <HAL_GetTick>
 8001a96:	4602      	mov	r2, r0
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	1ad3      	subs	r3, r2, r3
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d901      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001aa0:	2303      	movs	r3, #3
 8001aa2:	e2dd      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001aa4:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f0      	bne.n	8001a92 <HAL_RCC_OscConfig+0x1da>
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001ab2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d074      	beq.n	8001baa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001ac0:	69bb      	ldr	r3, [r7, #24]
 8001ac2:	2b08      	cmp	r3, #8
 8001ac4:	d005      	beq.n	8001ad2 <HAL_RCC_OscConfig+0x21a>
 8001ac6:	69bb      	ldr	r3, [r7, #24]
 8001ac8:	2b0c      	cmp	r3, #12
 8001aca:	d10e      	bne.n	8001aea <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d10b      	bne.n	8001aea <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ad2:	4b15      	ldr	r3, [pc, #84]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d064      	beq.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d160      	bne.n	8001ba8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e2ba      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001af2:	d106      	bne.n	8001b02 <HAL_RCC_OscConfig+0x24a>
 8001af4:	4b0c      	ldr	r3, [pc, #48]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	4a0b      	ldr	r2, [pc, #44]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001afa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001afe:	6013      	str	r3, [r2, #0]
 8001b00:	e026      	b.n	8001b50 <HAL_RCC_OscConfig+0x298>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b0a:	d115      	bne.n	8001b38 <HAL_RCC_OscConfig+0x280>
 8001b0c:	4b06      	ldr	r3, [pc, #24]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a05      	ldr	r2, [pc, #20]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001b12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b16:	6013      	str	r3, [r2, #0]
 8001b18:	4b03      	ldr	r3, [pc, #12]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	4a02      	ldr	r2, [pc, #8]	; (8001b28 <HAL_RCC_OscConfig+0x270>)
 8001b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b22:	6013      	str	r3, [r2, #0]
 8001b24:	e014      	b.n	8001b50 <HAL_RCC_OscConfig+0x298>
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	080088a4 	.word	0x080088a4
 8001b30:	20000000 	.word	0x20000000
 8001b34:	20000004 	.word	0x20000004
 8001b38:	4ba0      	ldr	r3, [pc, #640]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a9f      	ldr	r2, [pc, #636]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b42:	6013      	str	r3, [r2, #0]
 8001b44:	4b9d      	ldr	r3, [pc, #628]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a9c      	ldr	r2, [pc, #624]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d013      	beq.n	8001b80 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b58:	f7ff fb68 	bl	800122c <HAL_GetTick>
 8001b5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5e:	e008      	b.n	8001b72 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b60:	f7ff fb64 	bl	800122c <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	1ad3      	subs	r3, r2, r3
 8001b6a:	2b64      	cmp	r3, #100	; 0x64
 8001b6c:	d901      	bls.n	8001b72 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e276      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b72:	4b92      	ldr	r3, [pc, #584]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d0f0      	beq.n	8001b60 <HAL_RCC_OscConfig+0x2a8>
 8001b7e:	e014      	b.n	8001baa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b80:	f7ff fb54 	bl	800122c <HAL_GetTick>
 8001b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b86:	e008      	b.n	8001b9a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b88:	f7ff fb50 	bl	800122c <HAL_GetTick>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	2b64      	cmp	r3, #100	; 0x64
 8001b94:	d901      	bls.n	8001b9a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b96:	2303      	movs	r3, #3
 8001b98:	e262      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b9a:	4b88      	ldr	r3, [pc, #544]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d1f0      	bne.n	8001b88 <HAL_RCC_OscConfig+0x2d0>
 8001ba6:	e000      	b.n	8001baa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ba8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d060      	beq.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001bb6:	69bb      	ldr	r3, [r7, #24]
 8001bb8:	2b04      	cmp	r3, #4
 8001bba:	d005      	beq.n	8001bc8 <HAL_RCC_OscConfig+0x310>
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d119      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	2b02      	cmp	r3, #2
 8001bc6:	d116      	bne.n	8001bf6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bc8:	4b7c      	ldr	r3, [pc, #496]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x328>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e23f      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001be0:	4b76      	ldr	r3, [pc, #472]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	691b      	ldr	r3, [r3, #16]
 8001bec:	061b      	lsls	r3, r3, #24
 8001bee:	4973      	ldr	r1, [pc, #460]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001bf4:	e040      	b.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d023      	beq.n	8001c46 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bfe:	4b6f      	ldr	r3, [pc, #444]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4a6e      	ldr	r2, [pc, #440]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c08:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff fb0f 	bl	800122c <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c12:	f7ff fb0b 	bl	800122c <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e21d      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c24:	4b65      	ldr	r3, [pc, #404]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c30:	4b62      	ldr	r3, [pc, #392]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c32:	685b      	ldr	r3, [r3, #4]
 8001c34:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	691b      	ldr	r3, [r3, #16]
 8001c3c:	061b      	lsls	r3, r3, #24
 8001c3e:	495f      	ldr	r1, [pc, #380]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c40:	4313      	orrs	r3, r2
 8001c42:	604b      	str	r3, [r1, #4]
 8001c44:	e018      	b.n	8001c78 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c46:	4b5d      	ldr	r3, [pc, #372]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a5c      	ldr	r2, [pc, #368]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c4c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001c50:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c52:	f7ff faeb 	bl	800122c <HAL_GetTick>
 8001c56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c5a:	f7ff fae7 	bl	800122c <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	693b      	ldr	r3, [r7, #16]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e1f9      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c6c:	4b53      	ldr	r3, [pc, #332]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1f0      	bne.n	8001c5a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0308 	and.w	r3, r3, #8
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d03c      	beq.n	8001cfe <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	695b      	ldr	r3, [r3, #20]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d01c      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c92:	4a4a      	ldr	r2, [pc, #296]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001c94:	f043 0301 	orr.w	r3, r3, #1
 8001c98:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c9c:	f7ff fac6 	bl	800122c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ca4:	f7ff fac2 	bl	800122c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e1d4      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001cb8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cbc:	f003 0302 	and.w	r3, r3, #2
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d0ef      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x3ec>
 8001cc4:	e01b      	b.n	8001cfe <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc6:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ccc:	4a3b      	ldr	r2, [pc, #236]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001cce:	f023 0301 	bic.w	r3, r3, #1
 8001cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cd6:	f7ff faa9 	bl	800122c <HAL_GetTick>
 8001cda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cdc:	e008      	b.n	8001cf0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cde:	f7ff faa5 	bl	800122c <HAL_GetTick>
 8001ce2:	4602      	mov	r2, r0
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d901      	bls.n	8001cf0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001cec:	2303      	movs	r3, #3
 8001cee:	e1b7      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001cf0:	4b32      	ldr	r3, [pc, #200]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001cf2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001cf6:	f003 0302 	and.w	r3, r3, #2
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d1ef      	bne.n	8001cde <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 0304 	and.w	r3, r3, #4
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	f000 80a6 	beq.w	8001e58 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001d10:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d10d      	bne.n	8001d38 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d1c:	4b27      	ldr	r3, [pc, #156]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	4a26      	ldr	r2, [pc, #152]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d26:	6593      	str	r3, [r2, #88]	; 0x58
 8001d28:	4b24      	ldr	r3, [pc, #144]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d30:	60bb      	str	r3, [r7, #8]
 8001d32:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d34:	2301      	movs	r3, #1
 8001d36:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d38:	4b21      	ldr	r3, [pc, #132]	; (8001dc0 <HAL_RCC_OscConfig+0x508>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d118      	bne.n	8001d76 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d44:	4b1e      	ldr	r3, [pc, #120]	; (8001dc0 <HAL_RCC_OscConfig+0x508>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4a1d      	ldr	r2, [pc, #116]	; (8001dc0 <HAL_RCC_OscConfig+0x508>)
 8001d4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d4e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d50:	f7ff fa6c 	bl	800122c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d56:	e008      	b.n	8001d6a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d58:	f7ff fa68 	bl	800122c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b02      	cmp	r3, #2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e17a      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d6a:	4b15      	ldr	r3, [pc, #84]	; (8001dc0 <HAL_RCC_OscConfig+0x508>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0f0      	beq.n	8001d58 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b01      	cmp	r3, #1
 8001d7c:	d108      	bne.n	8001d90 <HAL_RCC_OscConfig+0x4d8>
 8001d7e:	4b0f      	ldr	r3, [pc, #60]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d84:	4a0d      	ldr	r2, [pc, #52]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d86:	f043 0301 	orr.w	r3, r3, #1
 8001d8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d8e:	e029      	b.n	8001de4 <HAL_RCC_OscConfig+0x52c>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	689b      	ldr	r3, [r3, #8]
 8001d94:	2b05      	cmp	r3, #5
 8001d96:	d115      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x50c>
 8001d98:	4b08      	ldr	r3, [pc, #32]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d9e:	4a07      	ldr	r2, [pc, #28]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001da0:	f043 0304 	orr.w	r3, r3, #4
 8001da4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001da8:	4b04      	ldr	r3, [pc, #16]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dae:	4a03      	ldr	r2, [pc, #12]	; (8001dbc <HAL_RCC_OscConfig+0x504>)
 8001db0:	f043 0301 	orr.w	r3, r3, #1
 8001db4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001db8:	e014      	b.n	8001de4 <HAL_RCC_OscConfig+0x52c>
 8001dba:	bf00      	nop
 8001dbc:	40021000 	.word	0x40021000
 8001dc0:	40007000 	.word	0x40007000
 8001dc4:	4b9c      	ldr	r3, [pc, #624]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dca:	4a9b      	ldr	r2, [pc, #620]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001dcc:	f023 0301 	bic.w	r3, r3, #1
 8001dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001dd4:	4b98      	ldr	r3, [pc, #608]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dda:	4a97      	ldr	r2, [pc, #604]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001ddc:	f023 0304 	bic.w	r3, r3, #4
 8001de0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d016      	beq.n	8001e1a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dec:	f7ff fa1e 	bl	800122c <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001df2:	e00a      	b.n	8001e0a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001df4:	f7ff fa1a 	bl	800122c <HAL_GetTick>
 8001df8:	4602      	mov	r2, r0
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	1ad3      	subs	r3, r2, r3
 8001dfe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e12a      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e0a:	4b8b      	ldr	r3, [pc, #556]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e10:	f003 0302 	and.w	r3, r3, #2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d0ed      	beq.n	8001df4 <HAL_RCC_OscConfig+0x53c>
 8001e18:	e015      	b.n	8001e46 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e1a:	f7ff fa07 	bl	800122c <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e20:	e00a      	b.n	8001e38 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e22:	f7ff fa03 	bl	800122c <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d901      	bls.n	8001e38 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001e34:	2303      	movs	r3, #3
 8001e36:	e113      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001e38:	4b7f      	ldr	r3, [pc, #508]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d1ed      	bne.n	8001e22 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e46:	7ffb      	ldrb	r3, [r7, #31]
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d105      	bne.n	8001e58 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e4c:	4b7a      	ldr	r3, [pc, #488]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e50:	4a79      	ldr	r2, [pc, #484]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e52:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e56:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80fe 	beq.w	800205e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	f040 80d0 	bne.w	800200c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e6c:	4b72      	ldr	r3, [pc, #456]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001e6e:	68db      	ldr	r3, [r3, #12]
 8001e70:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	f003 0203 	and.w	r2, r3, #3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e7c:	429a      	cmp	r2, r3
 8001e7e:	d130      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d127      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e9c:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d11f      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001eac:	2a07      	cmp	r2, #7
 8001eae:	bf14      	ite	ne
 8001eb0:	2201      	movne	r2, #1
 8001eb2:	2200      	moveq	r2, #0
 8001eb4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d113      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec4:	085b      	lsrs	r3, r3, #1
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d109      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed8:	085b      	lsrs	r3, r3, #1
 8001eda:	3b01      	subs	r3, #1
 8001edc:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d06e      	beq.n	8001fc0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee2:	69bb      	ldr	r3, [r7, #24]
 8001ee4:	2b0c      	cmp	r3, #12
 8001ee6:	d069      	beq.n	8001fbc <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ee8:	4b53      	ldr	r3, [pc, #332]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d105      	bne.n	8001f00 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001ef4:	4b50      	ldr	r3, [pc, #320]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0ad      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001f04:	4b4c      	ldr	r3, [pc, #304]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a4b      	ldr	r2, [pc, #300]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f0e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f10:	f7ff f98c 	bl	800122c <HAL_GetTick>
 8001f14:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f16:	e008      	b.n	8001f2a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f18:	f7ff f988 	bl	800122c <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e09a      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f2a:	4b43      	ldr	r3, [pc, #268]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d1f0      	bne.n	8001f18 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f36:	4b40      	ldr	r3, [pc, #256]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f38:	68da      	ldr	r2, [r3, #12]
 8001f3a:	4b40      	ldr	r3, [pc, #256]	; (800203c <HAL_RCC_OscConfig+0x784>)
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f46:	3a01      	subs	r2, #1
 8001f48:	0112      	lsls	r2, r2, #4
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f50:	0212      	lsls	r2, r2, #8
 8001f52:	4311      	orrs	r1, r2
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f58:	0852      	lsrs	r2, r2, #1
 8001f5a:	3a01      	subs	r2, #1
 8001f5c:	0552      	lsls	r2, r2, #21
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	687a      	ldr	r2, [r7, #4]
 8001f62:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f64:	0852      	lsrs	r2, r2, #1
 8001f66:	3a01      	subs	r2, #1
 8001f68:	0652      	lsls	r2, r2, #25
 8001f6a:	4311      	orrs	r1, r2
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f70:	0912      	lsrs	r2, r2, #4
 8001f72:	0452      	lsls	r2, r2, #17
 8001f74:	430a      	orrs	r2, r1
 8001f76:	4930      	ldr	r1, [pc, #192]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f7c:	4b2e      	ldr	r3, [pc, #184]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a2d      	ldr	r2, [pc, #180]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f88:	4b2b      	ldr	r3, [pc, #172]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	4a2a      	ldr	r2, [pc, #168]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001f8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f94:	f7ff f94a 	bl	800122c <HAL_GetTick>
 8001f98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9a:	e008      	b.n	8001fae <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f9c:	f7ff f946 	bl	800122c <HAL_GetTick>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	2b02      	cmp	r3, #2
 8001fa8:	d901      	bls.n	8001fae <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e058      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fae:	4b22      	ldr	r3, [pc, #136]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d0f0      	beq.n	8001f9c <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001fba:	e050      	b.n	800205e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	e04f      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d148      	bne.n	800205e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a19      	ldr	r2, [pc, #100]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fd6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd8:	4b17      	ldr	r3, [pc, #92]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4a16      	ldr	r2, [pc, #88]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8001fde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fe2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fe4:	f7ff f922 	bl	800122c <HAL_GetTick>
 8001fe8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fea:	e008      	b.n	8001ffe <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fec:	f7ff f91e 	bl	800122c <HAL_GetTick>
 8001ff0:	4602      	mov	r2, r0
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	1ad3      	subs	r3, r2, r3
 8001ff6:	2b02      	cmp	r3, #2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e030      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	4b0e      	ldr	r3, [pc, #56]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d0f0      	beq.n	8001fec <HAL_RCC_OscConfig+0x734>
 800200a:	e028      	b.n	800205e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	2b0c      	cmp	r3, #12
 8002010:	d023      	beq.n	800205a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002012:	4b09      	ldr	r3, [pc, #36]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4a08      	ldr	r2, [pc, #32]	; (8002038 <HAL_RCC_OscConfig+0x780>)
 8002018:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800201e:	f7ff f905 	bl	800122c <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002024:	e00c      	b.n	8002040 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002026:	f7ff f901 	bl	800122c <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b02      	cmp	r3, #2
 8002032:	d905      	bls.n	8002040 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002034:	2303      	movs	r3, #3
 8002036:	e013      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
 8002038:	40021000 	.word	0x40021000
 800203c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002040:	4b09      	ldr	r3, [pc, #36]	; (8002068 <HAL_RCC_OscConfig+0x7b0>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d1ec      	bne.n	8002026 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800204c:	4b06      	ldr	r3, [pc, #24]	; (8002068 <HAL_RCC_OscConfig+0x7b0>)
 800204e:	68da      	ldr	r2, [r3, #12]
 8002050:	4905      	ldr	r1, [pc, #20]	; (8002068 <HAL_RCC_OscConfig+0x7b0>)
 8002052:	4b06      	ldr	r3, [pc, #24]	; (800206c <HAL_RCC_OscConfig+0x7b4>)
 8002054:	4013      	ands	r3, r2
 8002056:	60cb      	str	r3, [r1, #12]
 8002058:	e001      	b.n	800205e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800205a:	2301      	movs	r3, #1
 800205c:	e000      	b.n	8002060 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3720      	adds	r7, #32
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	40021000 	.word	0x40021000
 800206c:	feeefffc 	.word	0xfeeefffc

08002070 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
 8002078:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d101      	bne.n	8002084 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e0e7      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002084:	4b75      	ldr	r3, [pc, #468]	; (800225c <HAL_RCC_ClockConfig+0x1ec>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0307 	and.w	r3, r3, #7
 800208c:	683a      	ldr	r2, [r7, #0]
 800208e:	429a      	cmp	r2, r3
 8002090:	d910      	bls.n	80020b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002092:	4b72      	ldr	r3, [pc, #456]	; (800225c <HAL_RCC_ClockConfig+0x1ec>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f023 0207 	bic.w	r2, r3, #7
 800209a:	4970      	ldr	r1, [pc, #448]	; (800225c <HAL_RCC_ClockConfig+0x1ec>)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	4313      	orrs	r3, r2
 80020a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020a2:	4b6e      	ldr	r3, [pc, #440]	; (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0307 	and.w	r3, r3, #7
 80020aa:	683a      	ldr	r2, [r7, #0]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d001      	beq.n	80020b4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0cf      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f003 0302 	and.w	r3, r3, #2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d010      	beq.n	80020e2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	4b66      	ldr	r3, [pc, #408]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020cc:	429a      	cmp	r2, r3
 80020ce:	d908      	bls.n	80020e2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020d0:	4b63      	ldr	r3, [pc, #396]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	689b      	ldr	r3, [r3, #8]
 80020dc:	4960      	ldr	r1, [pc, #384]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d04c      	beq.n	8002188 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	d107      	bne.n	8002106 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020f6:	4b5a      	ldr	r3, [pc, #360]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d121      	bne.n	8002146 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
 8002104:	e0a6      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b02      	cmp	r3, #2
 800210c:	d107      	bne.n	800211e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800210e:	4b54      	ldr	r3, [pc, #336]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002116:	2b00      	cmp	r3, #0
 8002118:	d115      	bne.n	8002146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	e09a      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d107      	bne.n	8002136 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002126:	4b4e      	ldr	r3, [pc, #312]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f003 0302 	and.w	r3, r3, #2
 800212e:	2b00      	cmp	r3, #0
 8002130:	d109      	bne.n	8002146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e08e      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002136:	4b4a      	ldr	r3, [pc, #296]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800213e:	2b00      	cmp	r3, #0
 8002140:	d101      	bne.n	8002146 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002142:	2301      	movs	r3, #1
 8002144:	e086      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002146:	4b46      	ldr	r3, [pc, #280]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002148:	689b      	ldr	r3, [r3, #8]
 800214a:	f023 0203 	bic.w	r2, r3, #3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	4943      	ldr	r1, [pc, #268]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002154:	4313      	orrs	r3, r2
 8002156:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002158:	f7ff f868 	bl	800122c <HAL_GetTick>
 800215c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800215e:	e00a      	b.n	8002176 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002160:	f7ff f864 	bl	800122c <HAL_GetTick>
 8002164:	4602      	mov	r2, r0
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	1ad3      	subs	r3, r2, r3
 800216a:	f241 3288 	movw	r2, #5000	; 0x1388
 800216e:	4293      	cmp	r3, r2
 8002170:	d901      	bls.n	8002176 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002172:	2303      	movs	r3, #3
 8002174:	e06e      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002176:	4b3a      	ldr	r3, [pc, #232]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	f003 020c 	and.w	r2, r3, #12
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	429a      	cmp	r2, r3
 8002186:	d1eb      	bne.n	8002160 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f003 0302 	and.w	r3, r3, #2
 8002190:	2b00      	cmp	r3, #0
 8002192:	d010      	beq.n	80021b6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	4b31      	ldr	r3, [pc, #196]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d208      	bcs.n	80021b6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021a4:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	689b      	ldr	r3, [r3, #8]
 80021b0:	492b      	ldr	r1, [pc, #172]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80021b2:	4313      	orrs	r3, r2
 80021b4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021b6:	4b29      	ldr	r3, [pc, #164]	; (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f003 0307 	and.w	r3, r3, #7
 80021be:	683a      	ldr	r2, [r7, #0]
 80021c0:	429a      	cmp	r2, r3
 80021c2:	d210      	bcs.n	80021e6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021c4:	4b25      	ldr	r3, [pc, #148]	; (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f023 0207 	bic.w	r2, r3, #7
 80021cc:	4923      	ldr	r1, [pc, #140]	; (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021d4:	4b21      	ldr	r3, [pc, #132]	; (800225c <HAL_RCC_ClockConfig+0x1ec>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f003 0307 	and.w	r3, r3, #7
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	429a      	cmp	r2, r3
 80021e0:	d001      	beq.n	80021e6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e036      	b.n	8002254 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0304 	and.w	r3, r3, #4
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d008      	beq.n	8002204 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021f2:	4b1b      	ldr	r3, [pc, #108]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	4918      	ldr	r1, [pc, #96]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002200:	4313      	orrs	r3, r2
 8002202:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 0308 	and.w	r3, r3, #8
 800220c:	2b00      	cmp	r3, #0
 800220e:	d009      	beq.n	8002224 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002210:	4b13      	ldr	r3, [pc, #76]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	691b      	ldr	r3, [r3, #16]
 800221c:	00db      	lsls	r3, r3, #3
 800221e:	4910      	ldr	r1, [pc, #64]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002224:	f000 f824 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 8002228:	4602      	mov	r2, r0
 800222a:	4b0d      	ldr	r3, [pc, #52]	; (8002260 <HAL_RCC_ClockConfig+0x1f0>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	091b      	lsrs	r3, r3, #4
 8002230:	f003 030f 	and.w	r3, r3, #15
 8002234:	490b      	ldr	r1, [pc, #44]	; (8002264 <HAL_RCC_ClockConfig+0x1f4>)
 8002236:	5ccb      	ldrb	r3, [r1, r3]
 8002238:	f003 031f 	and.w	r3, r3, #31
 800223c:	fa22 f303 	lsr.w	r3, r2, r3
 8002240:	4a09      	ldr	r2, [pc, #36]	; (8002268 <HAL_RCC_ClockConfig+0x1f8>)
 8002242:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002244:	4b09      	ldr	r3, [pc, #36]	; (800226c <HAL_RCC_ClockConfig+0x1fc>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fe21 	bl	8000e90 <HAL_InitTick>
 800224e:	4603      	mov	r3, r0
 8002250:	72fb      	strb	r3, [r7, #11]

  return status;
 8002252:	7afb      	ldrb	r3, [r7, #11]
}
 8002254:	4618      	mov	r0, r3
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40022000 	.word	0x40022000
 8002260:	40021000 	.word	0x40021000
 8002264:	080088a4 	.word	0x080088a4
 8002268:	20000000 	.word	0x20000000
 800226c:	20000004 	.word	0x20000004

08002270 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002270:	b480      	push	{r7}
 8002272:	b089      	sub	sp, #36	; 0x24
 8002274:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002276:	2300      	movs	r3, #0
 8002278:	61fb      	str	r3, [r7, #28]
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800227e:	4b3e      	ldr	r3, [pc, #248]	; (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 8002280:	689b      	ldr	r3, [r3, #8]
 8002282:	f003 030c 	and.w	r3, r3, #12
 8002286:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002288:	4b3b      	ldr	r3, [pc, #236]	; (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d005      	beq.n	80022a4 <HAL_RCC_GetSysClockFreq+0x34>
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	2b0c      	cmp	r3, #12
 800229c:	d121      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	2b01      	cmp	r3, #1
 80022a2:	d11e      	bne.n	80022e2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80022a4:	4b34      	ldr	r3, [pc, #208]	; (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0308 	and.w	r3, r3, #8
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d107      	bne.n	80022c0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022b0:	4b31      	ldr	r3, [pc, #196]	; (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	f003 030f 	and.w	r3, r3, #15
 80022bc:	61fb      	str	r3, [r7, #28]
 80022be:	e005      	b.n	80022cc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022c0:	4b2d      	ldr	r3, [pc, #180]	; (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	091b      	lsrs	r3, r3, #4
 80022c6:	f003 030f 	and.w	r3, r3, #15
 80022ca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022cc:	4a2b      	ldr	r2, [pc, #172]	; (800237c <HAL_RCC_GetSysClockFreq+0x10c>)
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022d4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10d      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022e0:	e00a      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	2b04      	cmp	r3, #4
 80022e6:	d102      	bne.n	80022ee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022e8:	4b25      	ldr	r3, [pc, #148]	; (8002380 <HAL_RCC_GetSysClockFreq+0x110>)
 80022ea:	61bb      	str	r3, [r7, #24]
 80022ec:	e004      	b.n	80022f8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022f4:	4b23      	ldr	r3, [pc, #140]	; (8002384 <HAL_RCC_GetSysClockFreq+0x114>)
 80022f6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022f8:	693b      	ldr	r3, [r7, #16]
 80022fa:	2b0c      	cmp	r3, #12
 80022fc:	d134      	bne.n	8002368 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022fe:	4b1e      	ldr	r3, [pc, #120]	; (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d003      	beq.n	8002316 <HAL_RCC_GetSysClockFreq+0xa6>
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d003      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0xac>
 8002314:	e005      	b.n	8002322 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <HAL_RCC_GetSysClockFreq+0x110>)
 8002318:	617b      	str	r3, [r7, #20]
      break;
 800231a:	e005      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_GetSysClockFreq+0x114>)
 800231e:	617b      	str	r3, [r7, #20]
      break;
 8002320:	e002      	b.n	8002328 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	617b      	str	r3, [r7, #20]
      break;
 8002326:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002328:	4b13      	ldr	r3, [pc, #76]	; (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	091b      	lsrs	r3, r3, #4
 800232e:	f003 0307 	and.w	r3, r3, #7
 8002332:	3301      	adds	r3, #1
 8002334:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	0a1b      	lsrs	r3, r3, #8
 800233c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002340:	697a      	ldr	r2, [r7, #20]
 8002342:	fb03 f202 	mul.w	r2, r3, r2
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	fbb2 f3f3 	udiv	r3, r2, r3
 800234c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800234e:	4b0a      	ldr	r3, [pc, #40]	; (8002378 <HAL_RCC_GetSysClockFreq+0x108>)
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	0e5b      	lsrs	r3, r3, #25
 8002354:	f003 0303 	and.w	r3, r3, #3
 8002358:	3301      	adds	r3, #1
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800235e:	697a      	ldr	r2, [r7, #20]
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002368:	69bb      	ldr	r3, [r7, #24]
}
 800236a:	4618      	mov	r0, r3
 800236c:	3724      	adds	r7, #36	; 0x24
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000
 800237c:	080088bc 	.word	0x080088bc
 8002380:	00f42400 	.word	0x00f42400
 8002384:	007a1200 	.word	0x007a1200

08002388 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800238c:	4b03      	ldr	r3, [pc, #12]	; (800239c <HAL_RCC_GetHCLKFreq+0x14>)
 800238e:	681b      	ldr	r3, [r3, #0]
}
 8002390:	4618      	mov	r0, r3
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr
 800239a:	bf00      	nop
 800239c:	20000000 	.word	0x20000000

080023a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80023a4:	f7ff fff0 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023a8:	4602      	mov	r2, r0
 80023aa:	4b06      	ldr	r3, [pc, #24]	; (80023c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ac:	689b      	ldr	r3, [r3, #8]
 80023ae:	0a1b      	lsrs	r3, r3, #8
 80023b0:	f003 0307 	and.w	r3, r3, #7
 80023b4:	4904      	ldr	r1, [pc, #16]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023b6:	5ccb      	ldrb	r3, [r1, r3]
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023c0:	4618      	mov	r0, r3
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40021000 	.word	0x40021000
 80023c8:	080088b4 	.word	0x080088b4

080023cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023d0:	f7ff ffda 	bl	8002388 <HAL_RCC_GetHCLKFreq>
 80023d4:	4602      	mov	r2, r0
 80023d6:	4b06      	ldr	r3, [pc, #24]	; (80023f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	0adb      	lsrs	r3, r3, #11
 80023dc:	f003 0307 	and.w	r3, r3, #7
 80023e0:	4904      	ldr	r1, [pc, #16]	; (80023f4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023e2:	5ccb      	ldrb	r3, [r1, r3]
 80023e4:	f003 031f 	and.w	r3, r3, #31
 80023e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	40021000 	.word	0x40021000
 80023f4:	080088b4 	.word	0x080088b4

080023f8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	220f      	movs	r2, #15
 8002406:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002408:	4b12      	ldr	r3, [pc, #72]	; (8002454 <HAL_RCC_GetClockConfig+0x5c>)
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	f003 0203 	and.w	r2, r3, #3
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002414:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_RCC_GetClockConfig+0x5c>)
 8002416:	689b      	ldr	r3, [r3, #8]
 8002418:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002420:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_RCC_GetClockConfig+0x5c>)
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800242c:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_RCC_GetClockConfig+0x5c>)
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	08db      	lsrs	r3, r3, #3
 8002432:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800243a:	4b07      	ldr	r3, [pc, #28]	; (8002458 <HAL_RCC_GetClockConfig+0x60>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0207 	and.w	r2, r3, #7
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	601a      	str	r2, [r3, #0]
}
 8002446:	bf00      	nop
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000
 8002458:	40022000 	.word	0x40022000

0800245c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b086      	sub	sp, #24
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002464:	2300      	movs	r3, #0
 8002466:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002468:	4b2a      	ldr	r3, [pc, #168]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002470:	2b00      	cmp	r3, #0
 8002472:	d003      	beq.n	800247c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002474:	f7ff f9bc 	bl	80017f0 <HAL_PWREx_GetVoltageRange>
 8002478:	6178      	str	r0, [r7, #20]
 800247a:	e014      	b.n	80024a6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	4b25      	ldr	r3, [pc, #148]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002480:	4a24      	ldr	r2, [pc, #144]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	6593      	str	r3, [r2, #88]	; 0x58
 8002488:	4b22      	ldr	r3, [pc, #136]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	60fb      	str	r3, [r7, #12]
 8002492:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002494:	f7ff f9ac 	bl	80017f0 <HAL_PWREx_GetVoltageRange>
 8002498:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800249a:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800249c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800249e:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80024a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80024a6:	697b      	ldr	r3, [r7, #20]
 80024a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80024ac:	d10b      	bne.n	80024c6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b80      	cmp	r3, #128	; 0x80
 80024b2:	d919      	bls.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2ba0      	cmp	r3, #160	; 0xa0
 80024b8:	d902      	bls.n	80024c0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024ba:	2302      	movs	r3, #2
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	e013      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024c0:	2301      	movs	r3, #1
 80024c2:	613b      	str	r3, [r7, #16]
 80024c4:	e010      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d902      	bls.n	80024d2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024cc:	2303      	movs	r3, #3
 80024ce:	613b      	str	r3, [r7, #16]
 80024d0:	e00a      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b80      	cmp	r3, #128	; 0x80
 80024d6:	d102      	bne.n	80024de <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024d8:	2302      	movs	r3, #2
 80024da:	613b      	str	r3, [r7, #16]
 80024dc:	e004      	b.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2b70      	cmp	r3, #112	; 0x70
 80024e2:	d101      	bne.n	80024e8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024e4:	2301      	movs	r3, #1
 80024e6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024e8:	4b0b      	ldr	r3, [pc, #44]	; (8002518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f023 0207 	bic.w	r2, r3, #7
 80024f0:	4909      	ldr	r1, [pc, #36]	; (8002518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	4313      	orrs	r3, r2
 80024f6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024f8:	4b07      	ldr	r3, [pc, #28]	; (8002518 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0307 	and.w	r3, r3, #7
 8002500:	693a      	ldr	r2, [r7, #16]
 8002502:	429a      	cmp	r2, r3
 8002504:	d001      	beq.n	800250a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e000      	b.n	800250c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800250a:	2300      	movs	r3, #0
}
 800250c:	4618      	mov	r0, r3
 800250e:	3718      	adds	r7, #24
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	40022000 	.word	0x40022000

0800251c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002524:	2300      	movs	r3, #0
 8002526:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002528:	2300      	movs	r3, #0
 800252a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002534:	2b00      	cmp	r3, #0
 8002536:	d041      	beq.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800253c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002540:	d02a      	beq.n	8002598 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8002542:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002546:	d824      	bhi.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002548:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800254c:	d008      	beq.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800254e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002552:	d81e      	bhi.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002558:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800255c:	d010      	beq.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800255e:	e018      	b.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002560:	4b86      	ldr	r3, [pc, #536]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4a85      	ldr	r2, [pc, #532]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800256a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800256c:	e015      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3304      	adds	r3, #4
 8002572:	2100      	movs	r1, #0
 8002574:	4618      	mov	r0, r3
 8002576:	f000 fabb 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 800257a:	4603      	mov	r3, r0
 800257c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800257e:	e00c      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3320      	adds	r3, #32
 8002584:	2100      	movs	r1, #0
 8002586:	4618      	mov	r0, r3
 8002588:	f000 fba6 	bl	8002cd8 <RCCEx_PLLSAI2_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002590:	e003      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	74fb      	strb	r3, [r7, #19]
      break;
 8002596:	e000      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8002598:	bf00      	nop
    }

    if(ret == HAL_OK)
 800259a:	7cfb      	ldrb	r3, [r7, #19]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d10b      	bne.n	80025b8 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80025a0:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025ae:	4973      	ldr	r1, [pc, #460]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025b0:	4313      	orrs	r3, r2
 80025b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80025b6:	e001      	b.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025b8:	7cfb      	ldrb	r3, [r7, #19]
 80025ba:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d041      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025d0:	d02a      	beq.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80025d2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80025d6:	d824      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025dc:	d008      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80025de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80025e2:	d81e      	bhi.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x106>
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d00a      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80025e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025ec:	d010      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80025ee:	e018      	b.n	8002622 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80025f0:	4b62      	ldr	r3, [pc, #392]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a61      	ldr	r2, [pc, #388]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80025f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fa:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80025fc:	e015      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	3304      	adds	r3, #4
 8002602:	2100      	movs	r1, #0
 8002604:	4618      	mov	r0, r3
 8002606:	f000 fa73 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 800260a:	4603      	mov	r3, r0
 800260c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800260e:	e00c      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3320      	adds	r3, #32
 8002614:	2100      	movs	r1, #0
 8002616:	4618      	mov	r0, r3
 8002618:	f000 fb5e 	bl	8002cd8 <RCCEx_PLLSAI2_Config>
 800261c:	4603      	mov	r3, r0
 800261e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002620:	e003      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	74fb      	strb	r3, [r7, #19]
      break;
 8002626:	e000      	b.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002628:	bf00      	nop
    }

    if(ret == HAL_OK)
 800262a:	7cfb      	ldrb	r3, [r7, #19]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d10b      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002630:	4b52      	ldr	r3, [pc, #328]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800263e:	494f      	ldr	r1, [pc, #316]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002640:	4313      	orrs	r3, r2
 8002642:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002646:	e001      	b.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002648:	7cfb      	ldrb	r3, [r7, #19]
 800264a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002654:	2b00      	cmp	r3, #0
 8002656:	f000 80a0 	beq.w	800279a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265a:	2300      	movs	r3, #0
 800265c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800265e:	4b47      	ldr	r3, [pc, #284]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002662:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_RCCEx_PeriphCLKConfig+0x152>
 800266a:	2301      	movs	r3, #1
 800266c:	e000      	b.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x154>
 800266e:	2300      	movs	r3, #0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d00d      	beq.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002674:	4b41      	ldr	r3, [pc, #260]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	4a40      	ldr	r2, [pc, #256]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800267a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800267e:	6593      	str	r3, [r2, #88]	; 0x58
 8002680:	4b3e      	ldr	r3, [pc, #248]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002688:	60bb      	str	r3, [r7, #8]
 800268a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268c:	2301      	movs	r3, #1
 800268e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002690:	4b3b      	ldr	r3, [pc, #236]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a3a      	ldr	r2, [pc, #232]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800269a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800269c:	f7fe fdc6 	bl	800122c <HAL_GetTick>
 80026a0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026a2:	e009      	b.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026a4:	f7fe fdc2 	bl	800122c <HAL_GetTick>
 80026a8:	4602      	mov	r2, r0
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	1ad3      	subs	r3, r2, r3
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d902      	bls.n	80026b8 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80026b2:	2303      	movs	r3, #3
 80026b4:	74fb      	strb	r3, [r7, #19]
        break;
 80026b6:	e005      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80026b8:	4b31      	ldr	r3, [pc, #196]	; (8002780 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d0ef      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d15c      	bne.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80026ca:	4b2c      	ldr	r3, [pc, #176]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026d4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d01f      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x200>
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d019      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80026e8:	4b24      	ldr	r3, [pc, #144]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80026f2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80026f4:	4b21      	ldr	r3, [pc, #132]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	4a20      	ldr	r2, [pc, #128]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80026fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002700:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002704:	4b1d      	ldr	r3, [pc, #116]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800270a:	4a1c      	ldr	r2, [pc, #112]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800270c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002714:	4a19      	ldr	r2, [pc, #100]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002716:	697b      	ldr	r3, [r7, #20]
 8002718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800271c:	697b      	ldr	r3, [r7, #20]
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	d016      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7fe fd81 	bl	800122c <HAL_GetTick>
 800272a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800272c:	e00b      	b.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272e:	f7fe fd7d 	bl	800122c <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	f241 3288 	movw	r2, #5000	; 0x1388
 800273c:	4293      	cmp	r3, r2
 800273e:	d902      	bls.n	8002746 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8002740:	2303      	movs	r3, #3
 8002742:	74fb      	strb	r3, [r7, #19]
            break;
 8002744:	e006      	b.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002746:	4b0d      	ldr	r3, [pc, #52]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002748:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800274c:	f003 0302 	and.w	r3, r3, #2
 8002750:	2b00      	cmp	r3, #0
 8002752:	d0ec      	beq.n	800272e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002754:	7cfb      	ldrb	r3, [r7, #19]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800275c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002760:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800276a:	4904      	ldr	r1, [pc, #16]	; (800277c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800276c:	4313      	orrs	r3, r2
 800276e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002772:	e009      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002774:	7cfb      	ldrb	r3, [r7, #19]
 8002776:	74bb      	strb	r3, [r7, #18]
 8002778:	e006      	b.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 800277a:	bf00      	nop
 800277c:	40021000 	.word	0x40021000
 8002780:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002784:	7cfb      	ldrb	r3, [r7, #19]
 8002786:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002788:	7c7b      	ldrb	r3, [r7, #17]
 800278a:	2b01      	cmp	r3, #1
 800278c:	d105      	bne.n	800279a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800278e:	4b9e      	ldr	r3, [pc, #632]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002792:	4a9d      	ldr	r2, [pc, #628]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002794:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002798:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d00a      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80027a6:	4b98      	ldr	r3, [pc, #608]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ac:	f023 0203 	bic.w	r2, r3, #3
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027b4:	4994      	ldr	r1, [pc, #592]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027b6:	4313      	orrs	r3, r2
 80027b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f003 0302 	and.w	r3, r3, #2
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d00a      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80027c8:	4b8f      	ldr	r3, [pc, #572]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f023 020c 	bic.w	r2, r3, #12
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d6:	498c      	ldr	r1, [pc, #560]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80027ea:	4b87      	ldr	r3, [pc, #540]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f8:	4983      	ldr	r1, [pc, #524]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0308 	and.w	r3, r3, #8
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00a      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800280c:	4b7e      	ldr	r3, [pc, #504]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800280e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800281a:	497b      	ldr	r1, [pc, #492]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800281c:	4313      	orrs	r3, r2
 800281e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0310 	and.w	r3, r3, #16
 800282a:	2b00      	cmp	r3, #0
 800282c:	d00a      	beq.n	8002844 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800282e:	4b76      	ldr	r3, [pc, #472]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283c:	4972      	ldr	r1, [pc, #456]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 0320 	and.w	r3, r3, #32
 800284c:	2b00      	cmp	r3, #0
 800284e:	d00a      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002850:	4b6d      	ldr	r3, [pc, #436]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002856:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285e:	496a      	ldr	r1, [pc, #424]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002860:	4313      	orrs	r3, r2
 8002862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00a      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002872:	4b65      	ldr	r3, [pc, #404]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002878:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002880:	4961      	ldr	r1, [pc, #388]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002882:	4313      	orrs	r3, r2
 8002884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002890:	2b00      	cmp	r3, #0
 8002892:	d00a      	beq.n	80028aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002894:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800289a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	4959      	ldr	r1, [pc, #356]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d00a      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80028b6:	4b54      	ldr	r3, [pc, #336]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028bc:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028c4:	4950      	ldr	r1, [pc, #320]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d00a      	beq.n	80028ee <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80028d8:	4b4b      	ldr	r3, [pc, #300]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028de:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028e6:	4948      	ldr	r1, [pc, #288]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028e8:	4313      	orrs	r3, r2
 80028ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00a      	beq.n	8002910 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80028fa:	4b43      	ldr	r3, [pc, #268]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80028fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002900:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002908:	493f      	ldr	r1, [pc, #252]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800290a:	4313      	orrs	r3, r2
 800290c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d028      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800291c:	4b3a      	ldr	r3, [pc, #232]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800291e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002922:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800292a:	4937      	ldr	r1, [pc, #220]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800293a:	d106      	bne.n	800294a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800293c:	4b32      	ldr	r3, [pc, #200]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800293e:	68db      	ldr	r3, [r3, #12]
 8002940:	4a31      	ldr	r2, [pc, #196]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002946:	60d3      	str	r3, [r2, #12]
 8002948:	e011      	b.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800294e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002952:	d10c      	bne.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3304      	adds	r3, #4
 8002958:	2101      	movs	r1, #1
 800295a:	4618      	mov	r0, r3
 800295c:	f000 f8c8 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 8002960:	4603      	mov	r3, r0
 8002962:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002964:	7cfb      	ldrb	r3, [r7, #19]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d001      	beq.n	800296e <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 800296a:	7cfb      	ldrb	r3, [r7, #19]
 800296c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d028      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800297a:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800297c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002980:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002988:	491f      	ldr	r1, [pc, #124]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800298a:	4313      	orrs	r3, r2
 800298c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002998:	d106      	bne.n	80029a8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299a:	4b1b      	ldr	r3, [pc, #108]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	4a1a      	ldr	r2, [pc, #104]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a4:	60d3      	str	r3, [r2, #12]
 80029a6:	e011      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029ac:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b0:	d10c      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	3304      	adds	r3, #4
 80029b6:	2101      	movs	r1, #1
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 f899 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 80029be:	4603      	mov	r3, r0
 80029c0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80029c2:	7cfb      	ldrb	r3, [r7, #19]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80029c8:	7cfb      	ldrb	r3, [r7, #19]
 80029ca:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d02b      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80029d8:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029e6:	4908      	ldr	r1, [pc, #32]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80029f6:	d109      	bne.n	8002a0c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80029f8:	4b03      	ldr	r3, [pc, #12]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	4a02      	ldr	r2, [pc, #8]	; (8002a08 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80029fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a02:	60d3      	str	r3, [r2, #12]
 8002a04:	e014      	b.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002a06:	bf00      	nop
 8002a08:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a14:	d10c      	bne.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	3304      	adds	r3, #4
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f000 f867 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 8002a22:	4603      	mov	r3, r0
 8002a24:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a26:	7cfb      	ldrb	r3, [r7, #19]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002a2c:	7cfb      	ldrb	r3, [r7, #19]
 8002a2e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d02f      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a3c:	4b2b      	ldr	r3, [pc, #172]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4a:	4928      	ldr	r1, [pc, #160]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002a5a:	d10d      	bne.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	2102      	movs	r1, #2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f000 f844 	bl	8002af0 <RCCEx_PLLSAI1_Config>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d014      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	74bb      	strb	r3, [r7, #18]
 8002a76:	e011      	b.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a80:	d10c      	bne.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	3320      	adds	r3, #32
 8002a86:	2102      	movs	r1, #2
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 f925 	bl	8002cd8 <RCCEx_PLLSAI2_Config>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002a92:	7cfb      	ldrb	r3, [r7, #19]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d001      	beq.n	8002a9c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8002a98:	7cfb      	ldrb	r3, [r7, #19]
 8002a9a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d00a      	beq.n	8002abe <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002aa8:	4b10      	ldr	r3, [pc, #64]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002aaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aae:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ab6:	490d      	ldr	r1, [pc, #52]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d00b      	beq.n	8002ae2 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002aca:	4b08      	ldr	r3, [pc, #32]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ad0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ada:	4904      	ldr	r1, [pc, #16]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002adc:	4313      	orrs	r3, r2
 8002ade:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002ae2:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3718      	adds	r7, #24
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40021000 	.word	0x40021000

08002af0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b084      	sub	sp, #16
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
 8002af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002afa:	2300      	movs	r3, #0
 8002afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002afe:	4b75      	ldr	r3, [pc, #468]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b00:	68db      	ldr	r3, [r3, #12]
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d018      	beq.n	8002b3c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002b0a:	4b72      	ldr	r3, [pc, #456]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	f003 0203 	and.w	r2, r3, #3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d10d      	bne.n	8002b36 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
       ||
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d009      	beq.n	8002b36 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002b22:	4b6c      	ldr	r3, [pc, #432]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	685b      	ldr	r3, [r3, #4]
       ||
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d047      	beq.n	8002bc6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002b36:	2301      	movs	r3, #1
 8002b38:	73fb      	strb	r3, [r7, #15]
 8002b3a:	e044      	b.n	8002bc6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d018      	beq.n	8002b76 <RCCEx_PLLSAI1_Config+0x86>
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d825      	bhi.n	8002b94 <RCCEx_PLLSAI1_Config+0xa4>
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d002      	beq.n	8002b52 <RCCEx_PLLSAI1_Config+0x62>
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d009      	beq.n	8002b64 <RCCEx_PLLSAI1_Config+0x74>
 8002b50:	e020      	b.n	8002b94 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002b52:	4b60      	ldr	r3, [pc, #384]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d11d      	bne.n	8002b9a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b62:	e01a      	b.n	8002b9a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002b64:	4b5b      	ldr	r3, [pc, #364]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d116      	bne.n	8002b9e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b74:	e013      	b.n	8002b9e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002b76:	4b57      	ldr	r3, [pc, #348]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10f      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002b82:	4b54      	ldr	r3, [pc, #336]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002b92:	e006      	b.n	8002ba2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
      break;
 8002b98:	e004      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b9a:	bf00      	nop
 8002b9c:	e002      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002b9e:	bf00      	nop
 8002ba0:	e000      	b.n	8002ba4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002ba2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ba4:	7bfb      	ldrb	r3, [r7, #15]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d10d      	bne.n	8002bc6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002baa:	4b4a      	ldr	r3, [pc, #296]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6819      	ldr	r1, [r3, #0]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	3b01      	subs	r3, #1
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	430b      	orrs	r3, r1
 8002bc0:	4944      	ldr	r1, [pc, #272]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d17d      	bne.n	8002cc8 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002bcc:	4b41      	ldr	r3, [pc, #260]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4a40      	ldr	r2, [pc, #256]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bd2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002bd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bd8:	f7fe fb28 	bl	800122c <HAL_GetTick>
 8002bdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bde:	e009      	b.n	8002bf4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002be0:	f7fe fb24 	bl	800122c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d902      	bls.n	8002bf4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	73fb      	strb	r3, [r7, #15]
        break;
 8002bf2:	e005      	b.n	8002c00 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002bf4:	4b37      	ldr	r3, [pc, #220]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d1ef      	bne.n	8002be0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002c00:	7bfb      	ldrb	r3, [r7, #15]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d160      	bne.n	8002cc8 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d111      	bne.n	8002c30 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c0c:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002c14:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6892      	ldr	r2, [r2, #8]
 8002c1c:	0211      	lsls	r1, r2, #8
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	68d2      	ldr	r2, [r2, #12]
 8002c22:	0912      	lsrs	r2, r2, #4
 8002c24:	0452      	lsls	r2, r2, #17
 8002c26:	430a      	orrs	r2, r1
 8002c28:	492a      	ldr	r1, [pc, #168]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	610b      	str	r3, [r1, #16]
 8002c2e:	e027      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d112      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c36:	4b27      	ldr	r3, [pc, #156]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002c3e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	6892      	ldr	r2, [r2, #8]
 8002c46:	0211      	lsls	r1, r2, #8
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	6912      	ldr	r2, [r2, #16]
 8002c4c:	0852      	lsrs	r2, r2, #1
 8002c4e:	3a01      	subs	r2, #1
 8002c50:	0552      	lsls	r2, r2, #21
 8002c52:	430a      	orrs	r2, r1
 8002c54:	491f      	ldr	r1, [pc, #124]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c56:	4313      	orrs	r3, r2
 8002c58:	610b      	str	r3, [r1, #16]
 8002c5a:	e011      	b.n	8002c80 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002c5c:	4b1d      	ldr	r3, [pc, #116]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c5e:	691b      	ldr	r3, [r3, #16]
 8002c60:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002c64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	6892      	ldr	r2, [r2, #8]
 8002c6c:	0211      	lsls	r1, r2, #8
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	6952      	ldr	r2, [r2, #20]
 8002c72:	0852      	lsrs	r2, r2, #1
 8002c74:	3a01      	subs	r2, #1
 8002c76:	0652      	lsls	r2, r2, #25
 8002c78:	430a      	orrs	r2, r1
 8002c7a:	4916      	ldr	r1, [pc, #88]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c80:	4b14      	ldr	r3, [pc, #80]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a13      	ldr	r2, [pc, #76]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002c86:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c8a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c8c:	f7fe face 	bl	800122c <HAL_GetTick>
 8002c90:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c92:	e009      	b.n	8002ca8 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c94:	f7fe faca 	bl	800122c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d902      	bls.n	8002ca8 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	73fb      	strb	r3, [r7, #15]
          break;
 8002ca6:	e005      	b.n	8002cb4 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ca8:	4b0a      	ldr	r3, [pc, #40]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d0ef      	beq.n	8002c94 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d106      	bne.n	8002cc8 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002cba:	4b06      	ldr	r3, [pc, #24]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cbc:	691a      	ldr	r2, [r3, #16]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	699b      	ldr	r3, [r3, #24]
 8002cc2:	4904      	ldr	r1, [pc, #16]	; (8002cd4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3710      	adds	r7, #16
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	40021000 	.word	0x40021000

08002cd8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002ce6:	4b6a      	ldr	r3, [pc, #424]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002ce8:	68db      	ldr	r3, [r3, #12]
 8002cea:	f003 0303 	and.w	r3, r3, #3
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d018      	beq.n	8002d24 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002cf2:	4b67      	ldr	r3, [pc, #412]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002cf4:	68db      	ldr	r3, [r3, #12]
 8002cf6:	f003 0203 	and.w	r2, r3, #3
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	429a      	cmp	r2, r3
 8002d00:	d10d      	bne.n	8002d1e <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
       ||
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d009      	beq.n	8002d1e <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002d0a:	4b61      	ldr	r3, [pc, #388]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d0c:	68db      	ldr	r3, [r3, #12]
 8002d0e:	091b      	lsrs	r3, r3, #4
 8002d10:	f003 0307 	and.w	r3, r3, #7
 8002d14:	1c5a      	adds	r2, r3, #1
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
       ||
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d047      	beq.n	8002dae <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	73fb      	strb	r3, [r7, #15]
 8002d22:	e044      	b.n	8002dae <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b03      	cmp	r3, #3
 8002d2a:	d018      	beq.n	8002d5e <RCCEx_PLLSAI2_Config+0x86>
 8002d2c:	2b03      	cmp	r3, #3
 8002d2e:	d825      	bhi.n	8002d7c <RCCEx_PLLSAI2_Config+0xa4>
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d002      	beq.n	8002d3a <RCCEx_PLLSAI2_Config+0x62>
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d009      	beq.n	8002d4c <RCCEx_PLLSAI2_Config+0x74>
 8002d38:	e020      	b.n	8002d7c <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002d3a:	4b55      	ldr	r3, [pc, #340]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0302 	and.w	r3, r3, #2
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d11d      	bne.n	8002d82 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d4a:	e01a      	b.n	8002d82 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002d4c:	4b50      	ldr	r3, [pc, #320]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d116      	bne.n	8002d86 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d5c:	e013      	b.n	8002d86 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002d5e:	4b4c      	ldr	r3, [pc, #304]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10f      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002d6a:	4b49      	ldr	r3, [pc, #292]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d109      	bne.n	8002d8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002d7a:	e006      	b.n	8002d8a <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d80:	e004      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d82:	bf00      	nop
 8002d84:	e002      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d86:	bf00      	nop
 8002d88:	e000      	b.n	8002d8c <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8002d8a:	bf00      	nop
    }

    if(status == HAL_OK)
 8002d8c:	7bfb      	ldrb	r3, [r7, #15]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d10d      	bne.n	8002dae <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002d92:	4b3f      	ldr	r3, [pc, #252]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6819      	ldr	r1, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	430b      	orrs	r3, r1
 8002da8:	4939      	ldr	r1, [pc, #228]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002dae:	7bfb      	ldrb	r3, [r7, #15]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d167      	bne.n	8002e84 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002db4:	4b36      	ldr	r3, [pc, #216]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a35      	ldr	r2, [pc, #212]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fa34 	bl	800122c <HAL_GetTick>
 8002dc4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002dc6:	e009      	b.n	8002ddc <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002dc8:	f7fe fa30 	bl	800122c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68bb      	ldr	r3, [r7, #8]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d902      	bls.n	8002ddc <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	73fb      	strb	r3, [r7, #15]
        break;
 8002dda:	e005      	b.n	8002de8 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002ddc:	4b2c      	ldr	r3, [pc, #176]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d1ef      	bne.n	8002dc8 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d14a      	bne.n	8002e84 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d111      	bne.n	8002e18 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002df4:	4b26      	ldr	r3, [pc, #152]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002df6:	695b      	ldr	r3, [r3, #20]
 8002df8:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	0211      	lsls	r1, r2, #8
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68d2      	ldr	r2, [r2, #12]
 8002e0a:	0912      	lsrs	r2, r2, #4
 8002e0c:	0452      	lsls	r2, r2, #17
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	491f      	ldr	r1, [pc, #124]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	614b      	str	r3, [r1, #20]
 8002e16:	e011      	b.n	8002e3c <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002e18:	4b1d      	ldr	r3, [pc, #116]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e1a:	695b      	ldr	r3, [r3, #20]
 8002e1c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002e20:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	6892      	ldr	r2, [r2, #8]
 8002e28:	0211      	lsls	r1, r2, #8
 8002e2a:	687a      	ldr	r2, [r7, #4]
 8002e2c:	6912      	ldr	r2, [r2, #16]
 8002e2e:	0852      	lsrs	r2, r2, #1
 8002e30:	3a01      	subs	r2, #1
 8002e32:	0652      	lsls	r2, r2, #25
 8002e34:	430a      	orrs	r2, r1
 8002e36:	4916      	ldr	r1, [pc, #88]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002e3c:	4b14      	ldr	r3, [pc, #80]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a13      	ldr	r2, [pc, #76]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e46:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e48:	f7fe f9f0 	bl	800122c <HAL_GetTick>
 8002e4c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e4e:	e009      	b.n	8002e64 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002e50:	f7fe f9ec 	bl	800122c <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d902      	bls.n	8002e64 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	73fb      	strb	r3, [r7, #15]
          break;
 8002e62:	e005      	b.n	8002e70 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002e64:	4b0a      	ldr	r3, [pc, #40]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ef      	beq.n	8002e50 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002e70:	7bfb      	ldrb	r3, [r7, #15]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d106      	bne.n	8002e84 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e78:	695a      	ldr	r2, [r3, #20]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	695b      	ldr	r3, [r3, #20]
 8002e7e:	4904      	ldr	r1, [pc, #16]	; (8002e90 <RCCEx_PLLSAI2_Config+0x1b8>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002e84:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3710      	adds	r7, #16
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
 8002e8e:	bf00      	nop
 8002e90:	40021000 	.word	0x40021000

08002e94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b082      	sub	sp, #8
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e049      	b.n	8002f3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eac:	b2db      	uxtb	r3, r3
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d106      	bne.n	8002ec0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fd ff66 	bl	8000d8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	3304      	adds	r3, #4
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	4610      	mov	r0, r2
 8002ed4:	f000 f9d0 	bl	8003278 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2201      	movs	r2, #1
 8002eec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2201      	movs	r2, #1
 8002efc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2201      	movs	r2, #1
 8002f04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2201      	movs	r2, #1
 8002f0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2201      	movs	r2, #1
 8002f14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2201      	movs	r2, #1
 8002f24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2201      	movs	r2, #1
 8002f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f38:	2300      	movs	r3, #0
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
	...

08002f44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b085      	sub	sp, #20
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d001      	beq.n	8002f5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	e04f      	b.n	8002ffc <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2202      	movs	r2, #2
 8002f60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f042 0201 	orr.w	r2, r2, #1
 8002f72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4a23      	ldr	r2, [pc, #140]	; (8003008 <HAL_TIM_Base_Start_IT+0xc4>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01d      	beq.n	8002fba <HAL_TIM_Base_Start_IT+0x76>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f86:	d018      	beq.n	8002fba <HAL_TIM_Base_Start_IT+0x76>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4a1f      	ldr	r2, [pc, #124]	; (800300c <HAL_TIM_Base_Start_IT+0xc8>)
 8002f8e:	4293      	cmp	r3, r2
 8002f90:	d013      	beq.n	8002fba <HAL_TIM_Base_Start_IT+0x76>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a1e      	ldr	r2, [pc, #120]	; (8003010 <HAL_TIM_Base_Start_IT+0xcc>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d00e      	beq.n	8002fba <HAL_TIM_Base_Start_IT+0x76>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <HAL_TIM_Base_Start_IT+0xd0>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d009      	beq.n	8002fba <HAL_TIM_Base_Start_IT+0x76>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a1b      	ldr	r2, [pc, #108]	; (8003018 <HAL_TIM_Base_Start_IT+0xd4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d004      	beq.n	8002fba <HAL_TIM_Base_Start_IT+0x76>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a19      	ldr	r2, [pc, #100]	; (800301c <HAL_TIM_Base_Start_IT+0xd8>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d115      	bne.n	8002fe6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_TIM_Base_Start_IT+0xdc>)
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2b06      	cmp	r3, #6
 8002fca:	d015      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0xb4>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fd2:	d011      	beq.n	8002ff8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	681a      	ldr	r2, [r3, #0]
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0201 	orr.w	r2, r2, #1
 8002fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fe4:	e008      	b.n	8002ff8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	681a      	ldr	r2, [r3, #0]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f042 0201 	orr.w	r2, r2, #1
 8002ff4:	601a      	str	r2, [r3, #0]
 8002ff6:	e000      	b.n	8002ffa <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ff8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3714      	adds	r7, #20
 8003000:	46bd      	mov	sp, r7
 8003002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003006:	4770      	bx	lr
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800
 8003014:	40000c00 	.word	0x40000c00
 8003018:	40013400 	.word	0x40013400
 800301c:	40014000 	.word	0x40014000
 8003020:	00010007 	.word	0x00010007

08003024 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b084      	sub	sp, #16
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	68db      	ldr	r3, [r3, #12]
 8003032:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	691b      	ldr	r3, [r3, #16]
 800303a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d020      	beq.n	8003088 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d01b      	beq.n	8003088 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f06f 0202 	mvn.w	r2, #2
 8003058:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2201      	movs	r2, #1
 800305e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	f003 0303 	and.w	r3, r3, #3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d003      	beq.n	8003076 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f8e4 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8003074:	e005      	b.n	8003082 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	f000 f8d6 	bl	8003228 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800307c:	6878      	ldr	r0, [r7, #4]
 800307e:	f000 f8e7 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	f003 0304 	and.w	r3, r3, #4
 800308e:	2b00      	cmp	r3, #0
 8003090:	d020      	beq.n	80030d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	f003 0304 	and.w	r3, r3, #4
 8003098:	2b00      	cmp	r3, #0
 800309a:	d01b      	beq.n	80030d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f06f 0204 	mvn.w	r2, #4
 80030a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	2202      	movs	r2, #2
 80030aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	699b      	ldr	r3, [r3, #24]
 80030b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030ba:	6878      	ldr	r0, [r7, #4]
 80030bc:	f000 f8be 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 80030c0:	e005      	b.n	80030ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f8b0 	bl	8003228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030c8:	6878      	ldr	r0, [r7, #4]
 80030ca:	f000 f8c1 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 0308 	and.w	r3, r3, #8
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d020      	beq.n	8003120 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d01b      	beq.n	8003120 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0208 	mvn.w	r2, #8
 80030f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2204      	movs	r2, #4
 80030f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	69db      	ldr	r3, [r3, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d003      	beq.n	800310e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003106:	6878      	ldr	r0, [r7, #4]
 8003108:	f000 f898 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 800310c:	e005      	b.n	800311a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 f88a 	bl	8003228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f89b 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003120:	68bb      	ldr	r3, [r7, #8]
 8003122:	f003 0310 	and.w	r3, r3, #16
 8003126:	2b00      	cmp	r3, #0
 8003128:	d020      	beq.n	800316c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f003 0310 	and.w	r3, r3, #16
 8003130:	2b00      	cmp	r3, #0
 8003132:	d01b      	beq.n	800316c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f06f 0210 	mvn.w	r2, #16
 800313c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2208      	movs	r2, #8
 8003142:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800314e:	2b00      	cmp	r3, #0
 8003150:	d003      	beq.n	800315a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f872 	bl	800323c <HAL_TIM_IC_CaptureCallback>
 8003158:	e005      	b.n	8003166 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 f864 	bl	8003228 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003160:	6878      	ldr	r0, [r7, #4]
 8003162:	f000 f875 	bl	8003250 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2200      	movs	r2, #0
 800316a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0301 	and.w	r3, r3, #1
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00c      	beq.n	8003190 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0301 	and.w	r3, r3, #1
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0201 	mvn.w	r2, #1
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fdbe 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00c      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d007      	beq.n	80031b4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80031ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031ae:	6878      	ldr	r0, [r7, #4]
 80031b0:	f000 f906 	bl	80033c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80031b4:	68bb      	ldr	r3, [r7, #8]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d00c      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d007      	beq.n	80031d8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80031d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f8fe 	bl	80033d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00c      	beq.n	80031fc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d007      	beq.n	80031fc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80031f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 f834 	bl	8003264 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f003 0320 	and.w	r3, r3, #32
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00c      	beq.n	8003220 <HAL_TIM_IRQHandler+0x1fc>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	f003 0320 	and.w	r3, r3, #32
 800320c:	2b00      	cmp	r3, #0
 800320e:	d007      	beq.n	8003220 <HAL_TIM_IRQHandler+0x1fc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f06f 0220 	mvn.w	r2, #32
 8003218:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8c6 	bl	80033ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003220:	bf00      	nop
 8003222:	3710      	adds	r7, #16
 8003224:	46bd      	mov	sp, r7
 8003226:	bd80      	pop	{r7, pc}

08003228 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr

08003278 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003278:	b480      	push	{r7}
 800327a:	b085      	sub	sp, #20
 800327c:	af00      	add	r7, sp, #0
 800327e:	6078      	str	r0, [r7, #4]
 8003280:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a40      	ldr	r2, [pc, #256]	; (800338c <TIM_Base_SetConfig+0x114>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d013      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003296:	d00f      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	4a3d      	ldr	r2, [pc, #244]	; (8003390 <TIM_Base_SetConfig+0x118>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d00b      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	4a3c      	ldr	r2, [pc, #240]	; (8003394 <TIM_Base_SetConfig+0x11c>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d007      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a3b      	ldr	r2, [pc, #236]	; (8003398 <TIM_Base_SetConfig+0x120>)
 80032ac:	4293      	cmp	r3, r2
 80032ae:	d003      	beq.n	80032b8 <TIM_Base_SetConfig+0x40>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4a3a      	ldr	r2, [pc, #232]	; (800339c <TIM_Base_SetConfig+0x124>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d108      	bne.n	80032ca <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80032c0:	683b      	ldr	r3, [r7, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	68fa      	ldr	r2, [r7, #12]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	4a2f      	ldr	r2, [pc, #188]	; (800338c <TIM_Base_SetConfig+0x114>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d01f      	beq.n	8003312 <TIM_Base_SetConfig+0x9a>
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d8:	d01b      	beq.n	8003312 <TIM_Base_SetConfig+0x9a>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	4a2c      	ldr	r2, [pc, #176]	; (8003390 <TIM_Base_SetConfig+0x118>)
 80032de:	4293      	cmp	r3, r2
 80032e0:	d017      	beq.n	8003312 <TIM_Base_SetConfig+0x9a>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a2b      	ldr	r2, [pc, #172]	; (8003394 <TIM_Base_SetConfig+0x11c>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d013      	beq.n	8003312 <TIM_Base_SetConfig+0x9a>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	4a2a      	ldr	r2, [pc, #168]	; (8003398 <TIM_Base_SetConfig+0x120>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d00f      	beq.n	8003312 <TIM_Base_SetConfig+0x9a>
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	4a29      	ldr	r2, [pc, #164]	; (800339c <TIM_Base_SetConfig+0x124>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d00b      	beq.n	8003312 <TIM_Base_SetConfig+0x9a>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	4a28      	ldr	r2, [pc, #160]	; (80033a0 <TIM_Base_SetConfig+0x128>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d007      	beq.n	8003312 <TIM_Base_SetConfig+0x9a>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a27      	ldr	r2, [pc, #156]	; (80033a4 <TIM_Base_SetConfig+0x12c>)
 8003306:	4293      	cmp	r3, r2
 8003308:	d003      	beq.n	8003312 <TIM_Base_SetConfig+0x9a>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	4a26      	ldr	r2, [pc, #152]	; (80033a8 <TIM_Base_SetConfig+0x130>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d108      	bne.n	8003324 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003318:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	68fa      	ldr	r2, [r7, #12]
 8003320:	4313      	orrs	r3, r2
 8003322:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68fa      	ldr	r2, [r7, #12]
 8003336:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681a      	ldr	r2, [r3, #0]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a10      	ldr	r2, [pc, #64]	; (800338c <TIM_Base_SetConfig+0x114>)
 800334c:	4293      	cmp	r3, r2
 800334e:	d00f      	beq.n	8003370 <TIM_Base_SetConfig+0xf8>
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	4a12      	ldr	r2, [pc, #72]	; (800339c <TIM_Base_SetConfig+0x124>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00b      	beq.n	8003370 <TIM_Base_SetConfig+0xf8>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	4a11      	ldr	r2, [pc, #68]	; (80033a0 <TIM_Base_SetConfig+0x128>)
 800335c:	4293      	cmp	r3, r2
 800335e:	d007      	beq.n	8003370 <TIM_Base_SetConfig+0xf8>
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	4a10      	ldr	r2, [pc, #64]	; (80033a4 <TIM_Base_SetConfig+0x12c>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d003      	beq.n	8003370 <TIM_Base_SetConfig+0xf8>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	4a0f      	ldr	r2, [pc, #60]	; (80033a8 <TIM_Base_SetConfig+0x130>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d103      	bne.n	8003378 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	691a      	ldr	r2, [r3, #16]
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2201      	movs	r2, #1
 800337c:	615a      	str	r2, [r3, #20]
}
 800337e:	bf00      	nop
 8003380:	3714      	adds	r7, #20
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	40012c00 	.word	0x40012c00
 8003390:	40000400 	.word	0x40000400
 8003394:	40000800 	.word	0x40000800
 8003398:	40000c00 	.word	0x40000c00
 800339c:	40013400 	.word	0x40013400
 80033a0:	40014000 	.word	0x40014000
 80033a4:	40014400 	.word	0x40014400
 80033a8:	40014800 	.word	0x40014800

080033ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80033ac:	b480      	push	{r7}
 80033ae:	b083      	sub	sp, #12
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr

080033c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b083      	sub	sp, #12
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80033c8:	bf00      	nop
 80033ca:	370c      	adds	r7, #12
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr

080033d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b082      	sub	sp, #8
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e040      	b.n	800347c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d106      	bne.n	8003410 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800340a:	6878      	ldr	r0, [r7, #4]
 800340c:	f7fd fce4 	bl	8000dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2224      	movs	r2, #36	; 0x24
 8003414:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	681a      	ldr	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f022 0201 	bic.w	r2, r2, #1
 8003424:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342a:	2b00      	cmp	r3, #0
 800342c:	d002      	beq.n	8003434 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	f000 fb6a 	bl	8003b08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f000 f8af 	bl	8003598 <UART_SetConfig>
 800343a:	4603      	mov	r3, r0
 800343c:	2b01      	cmp	r3, #1
 800343e:	d101      	bne.n	8003444 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e01b      	b.n	800347c <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	685a      	ldr	r2, [r3, #4]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003452:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689a      	ldr	r2, [r3, #8]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003462:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f042 0201 	orr.w	r2, r2, #1
 8003472:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 fbe9 	bl	8003c4c <UART_CheckIdleState>
 800347a:	4603      	mov	r3, r0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3708      	adds	r7, #8
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003484:	b580      	push	{r7, lr}
 8003486:	b08a      	sub	sp, #40	; 0x28
 8003488:	af02      	add	r7, sp, #8
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	603b      	str	r3, [r7, #0]
 8003490:	4613      	mov	r3, r2
 8003492:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003498:	2b20      	cmp	r3, #32
 800349a:	d178      	bne.n	800358e <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 800349c:	68bb      	ldr	r3, [r7, #8]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d002      	beq.n	80034a8 <HAL_UART_Transmit+0x24>
 80034a2:	88fb      	ldrh	r3, [r7, #6]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d101      	bne.n	80034ac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	e071      	b.n	8003590 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2221      	movs	r2, #33	; 0x21
 80034b8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80034ba:	f7fd feb7 	bl	800122c <HAL_GetTick>
 80034be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	88fa      	ldrh	r2, [r7, #6]
 80034c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	88fa      	ldrh	r2, [r7, #6]
 80034cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	689b      	ldr	r3, [r3, #8]
 80034d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034d8:	d108      	bne.n	80034ec <HAL_UART_Transmit+0x68>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d104      	bne.n	80034ec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	61bb      	str	r3, [r7, #24]
 80034ea:	e003      	b.n	80034f4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80034f0:	2300      	movs	r3, #0
 80034f2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80034f4:	e030      	b.n	8003558 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	9300      	str	r3, [sp, #0]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	2200      	movs	r2, #0
 80034fe:	2180      	movs	r1, #128	; 0x80
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f000 fc4b 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8003506:	4603      	mov	r3, r0
 8003508:	2b00      	cmp	r3, #0
 800350a:	d004      	beq.n	8003516 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	2220      	movs	r2, #32
 8003510:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e03c      	b.n	8003590 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d10b      	bne.n	8003534 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	881a      	ldrh	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003528:	b292      	uxth	r2, r2
 800352a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800352c:	69bb      	ldr	r3, [r7, #24]
 800352e:	3302      	adds	r3, #2
 8003530:	61bb      	str	r3, [r7, #24]
 8003532:	e008      	b.n	8003546 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	781a      	ldrb	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	b292      	uxth	r2, r2
 800353e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003540:	69fb      	ldr	r3, [r7, #28]
 8003542:	3301      	adds	r3, #1
 8003544:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800354c:	b29b      	uxth	r3, r3
 800354e:	3b01      	subs	r3, #1
 8003550:	b29a      	uxth	r2, r3
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800355e:	b29b      	uxth	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d1c8      	bne.n	80034f6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	9300      	str	r3, [sp, #0]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2200      	movs	r2, #0
 800356c:	2140      	movs	r1, #64	; 0x40
 800356e:	68f8      	ldr	r0, [r7, #12]
 8003570:	f000 fc14 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d004      	beq.n	8003584 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2220      	movs	r2, #32
 800357e:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8003580:	2303      	movs	r3, #3
 8003582:	e005      	b.n	8003590 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2220      	movs	r2, #32
 8003588:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800358a:	2300      	movs	r3, #0
 800358c:	e000      	b.n	8003590 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800358e:	2302      	movs	r3, #2
  }
}
 8003590:	4618      	mov	r0, r3
 8003592:	3720      	adds	r7, #32
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}

08003598 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800359c:	b08a      	sub	sp, #40	; 0x28
 800359e:	af00      	add	r7, sp, #0
 80035a0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	431a      	orrs	r2, r3
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	431a      	orrs	r2, r3
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	69db      	ldr	r3, [r3, #28]
 80035bc:	4313      	orrs	r3, r2
 80035be:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681a      	ldr	r2, [r3, #0]
 80035c6:	4ba4      	ldr	r3, [pc, #656]	; (8003858 <UART_SetConfig+0x2c0>)
 80035c8:	4013      	ands	r3, r2
 80035ca:	68fa      	ldr	r2, [r7, #12]
 80035cc:	6812      	ldr	r2, [r2, #0]
 80035ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035d0:	430b      	orrs	r3, r1
 80035d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	430a      	orrs	r2, r1
 80035e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	4a99      	ldr	r2, [pc, #612]	; (800385c <UART_SetConfig+0x2c4>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d004      	beq.n	8003604 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6a1b      	ldr	r3, [r3, #32]
 80035fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003600:	4313      	orrs	r3, r2
 8003602:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003614:	430a      	orrs	r2, r1
 8003616:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a90      	ldr	r2, [pc, #576]	; (8003860 <UART_SetConfig+0x2c8>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d126      	bne.n	8003670 <UART_SetConfig+0xd8>
 8003622:	4b90      	ldr	r3, [pc, #576]	; (8003864 <UART_SetConfig+0x2cc>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f003 0303 	and.w	r3, r3, #3
 800362c:	2b03      	cmp	r3, #3
 800362e:	d81b      	bhi.n	8003668 <UART_SetConfig+0xd0>
 8003630:	a201      	add	r2, pc, #4	; (adr r2, 8003638 <UART_SetConfig+0xa0>)
 8003632:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003636:	bf00      	nop
 8003638:	08003649 	.word	0x08003649
 800363c:	08003659 	.word	0x08003659
 8003640:	08003651 	.word	0x08003651
 8003644:	08003661 	.word	0x08003661
 8003648:	2301      	movs	r3, #1
 800364a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364e:	e116      	b.n	800387e <UART_SetConfig+0x2e6>
 8003650:	2302      	movs	r3, #2
 8003652:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003656:	e112      	b.n	800387e <UART_SetConfig+0x2e6>
 8003658:	2304      	movs	r3, #4
 800365a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800365e:	e10e      	b.n	800387e <UART_SetConfig+0x2e6>
 8003660:	2308      	movs	r3, #8
 8003662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003666:	e10a      	b.n	800387e <UART_SetConfig+0x2e6>
 8003668:	2310      	movs	r3, #16
 800366a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800366e:	e106      	b.n	800387e <UART_SetConfig+0x2e6>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a7c      	ldr	r2, [pc, #496]	; (8003868 <UART_SetConfig+0x2d0>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d138      	bne.n	80036ec <UART_SetConfig+0x154>
 800367a:	4b7a      	ldr	r3, [pc, #488]	; (8003864 <UART_SetConfig+0x2cc>)
 800367c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b0c      	cmp	r3, #12
 8003686:	d82d      	bhi.n	80036e4 <UART_SetConfig+0x14c>
 8003688:	a201      	add	r2, pc, #4	; (adr r2, 8003690 <UART_SetConfig+0xf8>)
 800368a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800368e:	bf00      	nop
 8003690:	080036c5 	.word	0x080036c5
 8003694:	080036e5 	.word	0x080036e5
 8003698:	080036e5 	.word	0x080036e5
 800369c:	080036e5 	.word	0x080036e5
 80036a0:	080036d5 	.word	0x080036d5
 80036a4:	080036e5 	.word	0x080036e5
 80036a8:	080036e5 	.word	0x080036e5
 80036ac:	080036e5 	.word	0x080036e5
 80036b0:	080036cd 	.word	0x080036cd
 80036b4:	080036e5 	.word	0x080036e5
 80036b8:	080036e5 	.word	0x080036e5
 80036bc:	080036e5 	.word	0x080036e5
 80036c0:	080036dd 	.word	0x080036dd
 80036c4:	2300      	movs	r3, #0
 80036c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ca:	e0d8      	b.n	800387e <UART_SetConfig+0x2e6>
 80036cc:	2302      	movs	r3, #2
 80036ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d2:	e0d4      	b.n	800387e <UART_SetConfig+0x2e6>
 80036d4:	2304      	movs	r3, #4
 80036d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036da:	e0d0      	b.n	800387e <UART_SetConfig+0x2e6>
 80036dc:	2308      	movs	r3, #8
 80036de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e2:	e0cc      	b.n	800387e <UART_SetConfig+0x2e6>
 80036e4:	2310      	movs	r3, #16
 80036e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ea:	e0c8      	b.n	800387e <UART_SetConfig+0x2e6>
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a5e      	ldr	r2, [pc, #376]	; (800386c <UART_SetConfig+0x2d4>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d125      	bne.n	8003742 <UART_SetConfig+0x1aa>
 80036f6:	4b5b      	ldr	r3, [pc, #364]	; (8003864 <UART_SetConfig+0x2cc>)
 80036f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036fc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003700:	2b30      	cmp	r3, #48	; 0x30
 8003702:	d016      	beq.n	8003732 <UART_SetConfig+0x19a>
 8003704:	2b30      	cmp	r3, #48	; 0x30
 8003706:	d818      	bhi.n	800373a <UART_SetConfig+0x1a2>
 8003708:	2b20      	cmp	r3, #32
 800370a:	d00a      	beq.n	8003722 <UART_SetConfig+0x18a>
 800370c:	2b20      	cmp	r3, #32
 800370e:	d814      	bhi.n	800373a <UART_SetConfig+0x1a2>
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <UART_SetConfig+0x182>
 8003714:	2b10      	cmp	r3, #16
 8003716:	d008      	beq.n	800372a <UART_SetConfig+0x192>
 8003718:	e00f      	b.n	800373a <UART_SetConfig+0x1a2>
 800371a:	2300      	movs	r3, #0
 800371c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003720:	e0ad      	b.n	800387e <UART_SetConfig+0x2e6>
 8003722:	2302      	movs	r3, #2
 8003724:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003728:	e0a9      	b.n	800387e <UART_SetConfig+0x2e6>
 800372a:	2304      	movs	r3, #4
 800372c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003730:	e0a5      	b.n	800387e <UART_SetConfig+0x2e6>
 8003732:	2308      	movs	r3, #8
 8003734:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003738:	e0a1      	b.n	800387e <UART_SetConfig+0x2e6>
 800373a:	2310      	movs	r3, #16
 800373c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003740:	e09d      	b.n	800387e <UART_SetConfig+0x2e6>
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a4a      	ldr	r2, [pc, #296]	; (8003870 <UART_SetConfig+0x2d8>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d125      	bne.n	8003798 <UART_SetConfig+0x200>
 800374c:	4b45      	ldr	r3, [pc, #276]	; (8003864 <UART_SetConfig+0x2cc>)
 800374e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003752:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003756:	2bc0      	cmp	r3, #192	; 0xc0
 8003758:	d016      	beq.n	8003788 <UART_SetConfig+0x1f0>
 800375a:	2bc0      	cmp	r3, #192	; 0xc0
 800375c:	d818      	bhi.n	8003790 <UART_SetConfig+0x1f8>
 800375e:	2b80      	cmp	r3, #128	; 0x80
 8003760:	d00a      	beq.n	8003778 <UART_SetConfig+0x1e0>
 8003762:	2b80      	cmp	r3, #128	; 0x80
 8003764:	d814      	bhi.n	8003790 <UART_SetConfig+0x1f8>
 8003766:	2b00      	cmp	r3, #0
 8003768:	d002      	beq.n	8003770 <UART_SetConfig+0x1d8>
 800376a:	2b40      	cmp	r3, #64	; 0x40
 800376c:	d008      	beq.n	8003780 <UART_SetConfig+0x1e8>
 800376e:	e00f      	b.n	8003790 <UART_SetConfig+0x1f8>
 8003770:	2300      	movs	r3, #0
 8003772:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003776:	e082      	b.n	800387e <UART_SetConfig+0x2e6>
 8003778:	2302      	movs	r3, #2
 800377a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377e:	e07e      	b.n	800387e <UART_SetConfig+0x2e6>
 8003780:	2304      	movs	r3, #4
 8003782:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003786:	e07a      	b.n	800387e <UART_SetConfig+0x2e6>
 8003788:	2308      	movs	r3, #8
 800378a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378e:	e076      	b.n	800387e <UART_SetConfig+0x2e6>
 8003790:	2310      	movs	r3, #16
 8003792:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003796:	e072      	b.n	800387e <UART_SetConfig+0x2e6>
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a35      	ldr	r2, [pc, #212]	; (8003874 <UART_SetConfig+0x2dc>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d12a      	bne.n	80037f8 <UART_SetConfig+0x260>
 80037a2:	4b30      	ldr	r3, [pc, #192]	; (8003864 <UART_SetConfig+0x2cc>)
 80037a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037b0:	d01a      	beq.n	80037e8 <UART_SetConfig+0x250>
 80037b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80037b6:	d81b      	bhi.n	80037f0 <UART_SetConfig+0x258>
 80037b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037bc:	d00c      	beq.n	80037d8 <UART_SetConfig+0x240>
 80037be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037c2:	d815      	bhi.n	80037f0 <UART_SetConfig+0x258>
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d003      	beq.n	80037d0 <UART_SetConfig+0x238>
 80037c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80037cc:	d008      	beq.n	80037e0 <UART_SetConfig+0x248>
 80037ce:	e00f      	b.n	80037f0 <UART_SetConfig+0x258>
 80037d0:	2300      	movs	r3, #0
 80037d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037d6:	e052      	b.n	800387e <UART_SetConfig+0x2e6>
 80037d8:	2302      	movs	r3, #2
 80037da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037de:	e04e      	b.n	800387e <UART_SetConfig+0x2e6>
 80037e0:	2304      	movs	r3, #4
 80037e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037e6:	e04a      	b.n	800387e <UART_SetConfig+0x2e6>
 80037e8:	2308      	movs	r3, #8
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e046      	b.n	800387e <UART_SetConfig+0x2e6>
 80037f0:	2310      	movs	r3, #16
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e042      	b.n	800387e <UART_SetConfig+0x2e6>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a17      	ldr	r2, [pc, #92]	; (800385c <UART_SetConfig+0x2c4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d13a      	bne.n	8003878 <UART_SetConfig+0x2e0>
 8003802:	4b18      	ldr	r3, [pc, #96]	; (8003864 <UART_SetConfig+0x2cc>)
 8003804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003808:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800380c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003810:	d01a      	beq.n	8003848 <UART_SetConfig+0x2b0>
 8003812:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003816:	d81b      	bhi.n	8003850 <UART_SetConfig+0x2b8>
 8003818:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800381c:	d00c      	beq.n	8003838 <UART_SetConfig+0x2a0>
 800381e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003822:	d815      	bhi.n	8003850 <UART_SetConfig+0x2b8>
 8003824:	2b00      	cmp	r3, #0
 8003826:	d003      	beq.n	8003830 <UART_SetConfig+0x298>
 8003828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800382c:	d008      	beq.n	8003840 <UART_SetConfig+0x2a8>
 800382e:	e00f      	b.n	8003850 <UART_SetConfig+0x2b8>
 8003830:	2300      	movs	r3, #0
 8003832:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003836:	e022      	b.n	800387e <UART_SetConfig+0x2e6>
 8003838:	2302      	movs	r3, #2
 800383a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800383e:	e01e      	b.n	800387e <UART_SetConfig+0x2e6>
 8003840:	2304      	movs	r3, #4
 8003842:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003846:	e01a      	b.n	800387e <UART_SetConfig+0x2e6>
 8003848:	2308      	movs	r3, #8
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e016      	b.n	800387e <UART_SetConfig+0x2e6>
 8003850:	2310      	movs	r3, #16
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e012      	b.n	800387e <UART_SetConfig+0x2e6>
 8003858:	efff69f3 	.word	0xefff69f3
 800385c:	40008000 	.word	0x40008000
 8003860:	40013800 	.word	0x40013800
 8003864:	40021000 	.word	0x40021000
 8003868:	40004400 	.word	0x40004400
 800386c:	40004800 	.word	0x40004800
 8003870:	40004c00 	.word	0x40004c00
 8003874:	40005000 	.word	0x40005000
 8003878:	2310      	movs	r3, #16
 800387a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	4a9f      	ldr	r2, [pc, #636]	; (8003b00 <UART_SetConfig+0x568>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d17a      	bne.n	800397e <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003888:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800388c:	2b08      	cmp	r3, #8
 800388e:	d824      	bhi.n	80038da <UART_SetConfig+0x342>
 8003890:	a201      	add	r2, pc, #4	; (adr r2, 8003898 <UART_SetConfig+0x300>)
 8003892:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003896:	bf00      	nop
 8003898:	080038bd 	.word	0x080038bd
 800389c:	080038db 	.word	0x080038db
 80038a0:	080038c5 	.word	0x080038c5
 80038a4:	080038db 	.word	0x080038db
 80038a8:	080038cb 	.word	0x080038cb
 80038ac:	080038db 	.word	0x080038db
 80038b0:	080038db 	.word	0x080038db
 80038b4:	080038db 	.word	0x080038db
 80038b8:	080038d3 	.word	0x080038d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038bc:	f7fe fd70 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 80038c0:	61f8      	str	r0, [r7, #28]
        break;
 80038c2:	e010      	b.n	80038e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038c4:	4b8f      	ldr	r3, [pc, #572]	; (8003b04 <UART_SetConfig+0x56c>)
 80038c6:	61fb      	str	r3, [r7, #28]
        break;
 80038c8:	e00d      	b.n	80038e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038ca:	f7fe fcd1 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 80038ce:	61f8      	str	r0, [r7, #28]
        break;
 80038d0:	e009      	b.n	80038e6 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d6:	61fb      	str	r3, [r7, #28]
        break;
 80038d8:	e005      	b.n	80038e6 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038e6:	69fb      	ldr	r3, [r7, #28]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	f000 80fb 	beq.w	8003ae4 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	685a      	ldr	r2, [r3, #4]
 80038f2:	4613      	mov	r3, r2
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	4413      	add	r3, r2
 80038f8:	69fa      	ldr	r2, [r7, #28]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d305      	bcc.n	800390a <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003904:	69fa      	ldr	r2, [r7, #28]
 8003906:	429a      	cmp	r2, r3
 8003908:	d903      	bls.n	8003912 <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003910:	e0e8      	b.n	8003ae4 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	2200      	movs	r2, #0
 8003916:	461c      	mov	r4, r3
 8003918:	4615      	mov	r5, r2
 800391a:	f04f 0200 	mov.w	r2, #0
 800391e:	f04f 0300 	mov.w	r3, #0
 8003922:	022b      	lsls	r3, r5, #8
 8003924:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003928:	0222      	lsls	r2, r4, #8
 800392a:	68f9      	ldr	r1, [r7, #12]
 800392c:	6849      	ldr	r1, [r1, #4]
 800392e:	0849      	lsrs	r1, r1, #1
 8003930:	2000      	movs	r0, #0
 8003932:	4688      	mov	r8, r1
 8003934:	4681      	mov	r9, r0
 8003936:	eb12 0a08 	adds.w	sl, r2, r8
 800393a:	eb43 0b09 	adc.w	fp, r3, r9
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	2200      	movs	r2, #0
 8003944:	603b      	str	r3, [r7, #0]
 8003946:	607a      	str	r2, [r7, #4]
 8003948:	e9d7 2300 	ldrd	r2, r3, [r7]
 800394c:	4650      	mov	r0, sl
 800394e:	4659      	mov	r1, fp
 8003950:	f7fc fc8e 	bl	8000270 <__aeabi_uldivmod>
 8003954:	4602      	mov	r2, r0
 8003956:	460b      	mov	r3, r1
 8003958:	4613      	mov	r3, r2
 800395a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003962:	d308      	bcc.n	8003976 <UART_SetConfig+0x3de>
 8003964:	69bb      	ldr	r3, [r7, #24]
 8003966:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800396a:	d204      	bcs.n	8003976 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	60da      	str	r2, [r3, #12]
 8003974:	e0b6      	b.n	8003ae4 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800397c:	e0b2      	b.n	8003ae4 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	69db      	ldr	r3, [r3, #28]
 8003982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003986:	d15e      	bne.n	8003a46 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8003988:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800398c:	2b08      	cmp	r3, #8
 800398e:	d828      	bhi.n	80039e2 <UART_SetConfig+0x44a>
 8003990:	a201      	add	r2, pc, #4	; (adr r2, 8003998 <UART_SetConfig+0x400>)
 8003992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003996:	bf00      	nop
 8003998:	080039bd 	.word	0x080039bd
 800399c:	080039c5 	.word	0x080039c5
 80039a0:	080039cd 	.word	0x080039cd
 80039a4:	080039e3 	.word	0x080039e3
 80039a8:	080039d3 	.word	0x080039d3
 80039ac:	080039e3 	.word	0x080039e3
 80039b0:	080039e3 	.word	0x080039e3
 80039b4:	080039e3 	.word	0x080039e3
 80039b8:	080039db 	.word	0x080039db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039bc:	f7fe fcf0 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 80039c0:	61f8      	str	r0, [r7, #28]
        break;
 80039c2:	e014      	b.n	80039ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039c4:	f7fe fd02 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 80039c8:	61f8      	str	r0, [r7, #28]
        break;
 80039ca:	e010      	b.n	80039ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039cc:	4b4d      	ldr	r3, [pc, #308]	; (8003b04 <UART_SetConfig+0x56c>)
 80039ce:	61fb      	str	r3, [r7, #28]
        break;
 80039d0:	e00d      	b.n	80039ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039d2:	f7fe fc4d 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 80039d6:	61f8      	str	r0, [r7, #28]
        break;
 80039d8:	e009      	b.n	80039ee <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039de:	61fb      	str	r3, [r7, #28]
        break;
 80039e0:	e005      	b.n	80039ee <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039ec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d077      	beq.n	8003ae4 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	005a      	lsls	r2, r3, #1
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	085b      	lsrs	r3, r3, #1
 80039fe:	441a      	add	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a08:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a0a:	69bb      	ldr	r3, [r7, #24]
 8003a0c:	2b0f      	cmp	r3, #15
 8003a0e:	d916      	bls.n	8003a3e <UART_SetConfig+0x4a6>
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a16:	d212      	bcs.n	8003a3e <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	f023 030f 	bic.w	r3, r3, #15
 8003a20:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a22:	69bb      	ldr	r3, [r7, #24]
 8003a24:	085b      	lsrs	r3, r3, #1
 8003a26:	b29b      	uxth	r3, r3
 8003a28:	f003 0307 	and.w	r3, r3, #7
 8003a2c:	b29a      	uxth	r2, r3
 8003a2e:	8afb      	ldrh	r3, [r7, #22]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	8afa      	ldrh	r2, [r7, #22]
 8003a3a:	60da      	str	r2, [r3, #12]
 8003a3c:	e052      	b.n	8003ae4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a44:	e04e      	b.n	8003ae4 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a46:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a4a:	2b08      	cmp	r3, #8
 8003a4c:	d827      	bhi.n	8003a9e <UART_SetConfig+0x506>
 8003a4e:	a201      	add	r2, pc, #4	; (adr r2, 8003a54 <UART_SetConfig+0x4bc>)
 8003a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a54:	08003a79 	.word	0x08003a79
 8003a58:	08003a81 	.word	0x08003a81
 8003a5c:	08003a89 	.word	0x08003a89
 8003a60:	08003a9f 	.word	0x08003a9f
 8003a64:	08003a8f 	.word	0x08003a8f
 8003a68:	08003a9f 	.word	0x08003a9f
 8003a6c:	08003a9f 	.word	0x08003a9f
 8003a70:	08003a9f 	.word	0x08003a9f
 8003a74:	08003a97 	.word	0x08003a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a78:	f7fe fc92 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 8003a7c:	61f8      	str	r0, [r7, #28]
        break;
 8003a7e:	e014      	b.n	8003aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a80:	f7fe fca4 	bl	80023cc <HAL_RCC_GetPCLK2Freq>
 8003a84:	61f8      	str	r0, [r7, #28]
        break;
 8003a86:	e010      	b.n	8003aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a88:	4b1e      	ldr	r3, [pc, #120]	; (8003b04 <UART_SetConfig+0x56c>)
 8003a8a:	61fb      	str	r3, [r7, #28]
        break;
 8003a8c:	e00d      	b.n	8003aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a8e:	f7fe fbef 	bl	8002270 <HAL_RCC_GetSysClockFreq>
 8003a92:	61f8      	str	r0, [r7, #28]
        break;
 8003a94:	e009      	b.n	8003aaa <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a9a:	61fb      	str	r3, [r7, #28]
        break;
 8003a9c:	e005      	b.n	8003aaa <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003aa2:	2301      	movs	r3, #1
 8003aa4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8003aaa:	69fb      	ldr	r3, [r7, #28]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d019      	beq.n	8003ae4 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	085a      	lsrs	r2, r3, #1
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	441a      	add	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	685b      	ldr	r3, [r3, #4]
 8003abe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	2b0f      	cmp	r3, #15
 8003ac8:	d909      	bls.n	8003ade <UART_SetConfig+0x546>
 8003aca:	69bb      	ldr	r3, [r7, #24]
 8003acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ad0:	d205      	bcs.n	8003ade <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	b29a      	uxth	r2, r3
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60da      	str	r2, [r3, #12]
 8003adc:	e002      	b.n	8003ae4 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8003ade:	2301      	movs	r3, #1
 8003ae0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	2200      	movs	r2, #0
 8003aee:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003af0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003af4:	4618      	mov	r0, r3
 8003af6:	3728      	adds	r7, #40	; 0x28
 8003af8:	46bd      	mov	sp, r7
 8003afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003afe:	bf00      	nop
 8003b00:	40008000 	.word	0x40008000
 8003b04:	00f42400 	.word	0x00f42400

08003b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	b083      	sub	sp, #12
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	430a      	orrs	r2, r1
 8003b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	430a      	orrs	r2, r1
 8003b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b58:	f003 0302 	and.w	r3, r3, #2
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	685b      	ldr	r3, [r3, #4]
 8003b66:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	430a      	orrs	r2, r1
 8003b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7a:	f003 0304 	and.w	r3, r3, #4
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	685b      	ldr	r3, [r3, #4]
 8003b88:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	430a      	orrs	r2, r1
 8003b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	f003 0310 	and.w	r3, r3, #16
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	430a      	orrs	r2, r1
 8003bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bbe:	f003 0320 	and.w	r3, r3, #32
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	689b      	ldr	r3, [r3, #8]
 8003bcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d01a      	beq.n	8003c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c06:	d10a      	bne.n	8003c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	430a      	orrs	r2, r1
 8003c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d00a      	beq.n	8003c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	430a      	orrs	r2, r1
 8003c3e:	605a      	str	r2, [r3, #4]
  }
}
 8003c40:	bf00      	nop
 8003c42:	370c      	adds	r7, #12
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr

08003c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b098      	sub	sp, #96	; 0x60
 8003c50:	af02      	add	r7, sp, #8
 8003c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2200      	movs	r2, #0
 8003c58:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c5c:	f7fd fae6 	bl	800122c <HAL_GetTick>
 8003c60:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 0308 	and.w	r3, r3, #8
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d12e      	bne.n	8003cce <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c74:	9300      	str	r3, [sp, #0]
 8003c76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c78:	2200      	movs	r2, #0
 8003c7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c7e:	6878      	ldr	r0, [r7, #4]
 8003c80:	f000 f88c 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8003c84:	4603      	mov	r3, r0
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d021      	beq.n	8003cce <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c92:	e853 3f00 	ldrex	r3, [r3]
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003c98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c9e:	653b      	str	r3, [r7, #80]	; 0x50
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	461a      	mov	r2, r3
 8003ca6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ca8:	647b      	str	r3, [r7, #68]	; 0x44
 8003caa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003cae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003cb0:	e841 2300 	strex	r3, r2, [r1]
 8003cb4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d1e6      	bne.n	8003c8a <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cca:	2303      	movs	r3, #3
 8003ccc:	e062      	b.n	8003d94 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b04      	cmp	r3, #4
 8003cda:	d149      	bne.n	8003d70 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ce0:	9300      	str	r3, [sp, #0]
 8003ce2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ce4:	2200      	movs	r2, #0
 8003ce6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cea:	6878      	ldr	r0, [r7, #4]
 8003cec:	f000 f856 	bl	8003d9c <UART_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d03c      	beq.n	8003d70 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfe:	e853 3f00 	ldrex	r3, [r3]
 8003d02:	623b      	str	r3, [r7, #32]
   return(result);
 8003d04:	6a3b      	ldr	r3, [r7, #32]
 8003d06:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	461a      	mov	r2, r3
 8003d12:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30
 8003d16:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1c:	e841 2300 	strex	r3, r2, [r1]
 8003d20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d1e6      	bne.n	8003cf6 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	3308      	adds	r3, #8
 8003d2e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f023 0301 	bic.w	r3, r3, #1
 8003d3e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	3308      	adds	r3, #8
 8003d46:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d48:	61fa      	str	r2, [r7, #28]
 8003d4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	69b9      	ldr	r1, [r7, #24]
 8003d4e:	69fa      	ldr	r2, [r7, #28]
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	617b      	str	r3, [r7, #20]
   return(result);
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e5      	bne.n	8003d28 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2200      	movs	r2, #0
 8003d68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003d6c:	2303      	movs	r3, #3
 8003d6e:	e011      	b.n	8003d94 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	2220      	movs	r2, #32
 8003d74:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2220      	movs	r2, #32
 8003d7a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2200      	movs	r2, #0
 8003d82:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003d92:	2300      	movs	r3, #0
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3758      	adds	r7, #88	; 0x58
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b084      	sub	sp, #16
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	603b      	str	r3, [r7, #0]
 8003da8:	4613      	mov	r3, r2
 8003daa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dac:	e049      	b.n	8003e42 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d045      	beq.n	8003e42 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db6:	f7fd fa39 	bl	800122c <HAL_GetTick>
 8003dba:	4602      	mov	r2, r0
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	69ba      	ldr	r2, [r7, #24]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d302      	bcc.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x30>
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d101      	bne.n	8003dd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e048      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0304 	and.w	r3, r3, #4
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d031      	beq.n	8003e42 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69db      	ldr	r3, [r3, #28]
 8003de4:	f003 0308 	and.w	r3, r3, #8
 8003de8:	2b08      	cmp	r3, #8
 8003dea:	d110      	bne.n	8003e0e <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	2208      	movs	r2, #8
 8003df2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f000 f838 	bl	8003e6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2208      	movs	r2, #8
 8003dfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e029      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e1c:	d111      	bne.n	8003e42 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003e28:	68f8      	ldr	r0, [r7, #12]
 8003e2a:	f000 f81e 	bl	8003e6a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e00f      	b.n	8003e62 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69da      	ldr	r2, [r3, #28]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	bf0c      	ite	eq
 8003e52:	2301      	moveq	r3, #1
 8003e54:	2300      	movne	r3, #0
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	79fb      	ldrb	r3, [r7, #7]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d0a6      	beq.n	8003dae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e60:	2300      	movs	r3, #0
}
 8003e62:	4618      	mov	r0, r3
 8003e64:	3710      	adds	r7, #16
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}

08003e6a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b095      	sub	sp, #84	; 0x54
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	e853 3f00 	ldrex	r3, [r3]
 8003e7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e90:	643b      	str	r3, [r7, #64]	; 0x40
 8003e92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003e98:	e841 2300 	strex	r3, r2, [r1]
 8003e9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d1e6      	bne.n	8003e72 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3308      	adds	r3, #8
 8003eaa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eac:	6a3b      	ldr	r3, [r7, #32]
 8003eae:	e853 3f00 	ldrex	r3, [r3]
 8003eb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8003eb4:	69fb      	ldr	r3, [r7, #28]
 8003eb6:	f023 0301 	bic.w	r3, r3, #1
 8003eba:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ec4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003eca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ecc:	e841 2300 	strex	r3, r2, [r1]
 8003ed0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d1e5      	bne.n	8003ea4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d118      	bne.n	8003f12 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	e853 3f00 	ldrex	r3, [r3]
 8003eec:	60bb      	str	r3, [r7, #8]
   return(result);
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f023 0310 	bic.w	r3, r3, #16
 8003ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	461a      	mov	r2, r3
 8003efc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003efe:	61bb      	str	r3, [r7, #24]
 8003f00:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f02:	6979      	ldr	r1, [r7, #20]
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	e841 2300 	strex	r3, r2, [r1]
 8003f0a:	613b      	str	r3, [r7, #16]
   return(result);
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1e6      	bne.n	8003ee0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	669a      	str	r2, [r3, #104]	; 0x68
}
 8003f26:	bf00      	nop
 8003f28:	3754      	adds	r7, #84	; 0x54
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr
	...

08003f34 <__NVIC_SetPriority>:
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	6039      	str	r1, [r7, #0]
 8003f3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003f40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	db0a      	blt.n	8003f5e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	b2da      	uxtb	r2, r3
 8003f4c:	490c      	ldr	r1, [pc, #48]	; (8003f80 <__NVIC_SetPriority+0x4c>)
 8003f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f52:	0112      	lsls	r2, r2, #4
 8003f54:	b2d2      	uxtb	r2, r2
 8003f56:	440b      	add	r3, r1
 8003f58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003f5c:	e00a      	b.n	8003f74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	4908      	ldr	r1, [pc, #32]	; (8003f84 <__NVIC_SetPriority+0x50>)
 8003f64:	79fb      	ldrb	r3, [r7, #7]
 8003f66:	f003 030f 	and.w	r3, r3, #15
 8003f6a:	3b04      	subs	r3, #4
 8003f6c:	0112      	lsls	r2, r2, #4
 8003f6e:	b2d2      	uxtb	r2, r2
 8003f70:	440b      	add	r3, r1
 8003f72:	761a      	strb	r2, [r3, #24]
}
 8003f74:	bf00      	nop
 8003f76:	370c      	adds	r7, #12
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7e:	4770      	bx	lr
 8003f80:	e000e100 	.word	0xe000e100
 8003f84:	e000ed00 	.word	0xe000ed00

08003f88 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <SysTick_Handler+0x1c>)
 8003f8e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003f90:	f002 f9fa 	bl	8006388 <xTaskGetSchedulerState>
 8003f94:	4603      	mov	r3, r0
 8003f96:	2b01      	cmp	r3, #1
 8003f98:	d001      	beq.n	8003f9e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003f9a:	f003 f99d 	bl	80072d8 <xPortSysTickHandler>
  }
}
 8003f9e:	bf00      	nop
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	e000e010 	.word	0xe000e010

08003fa8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003fac:	2100      	movs	r1, #0
 8003fae:	f06f 0004 	mvn.w	r0, #4
 8003fb2:	f7ff ffbf 	bl	8003f34 <__NVIC_SetPriority>
#endif
}
 8003fb6:	bf00      	nop
 8003fb8:	bd80      	pop	{r7, pc}
	...

08003fbc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fc2:	f3ef 8305 	mrs	r3, IPSR
 8003fc6:	603b      	str	r3, [r7, #0]
  return(result);
 8003fc8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d003      	beq.n	8003fd6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003fce:	f06f 0305 	mvn.w	r3, #5
 8003fd2:	607b      	str	r3, [r7, #4]
 8003fd4:	e00c      	b.n	8003ff0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003fd6:	4b0a      	ldr	r3, [pc, #40]	; (8004000 <osKernelInitialize+0x44>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d105      	bne.n	8003fea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003fde:	4b08      	ldr	r3, [pc, #32]	; (8004000 <osKernelInitialize+0x44>)
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003fe4:	2300      	movs	r3, #0
 8003fe6:	607b      	str	r3, [r7, #4]
 8003fe8:	e002      	b.n	8003ff0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003fea:	f04f 33ff 	mov.w	r3, #4294967295
 8003fee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ff0:	687b      	ldr	r3, [r7, #4]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	200001d0 	.word	0x200001d0

08004004 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004004:	b580      	push	{r7, lr}
 8004006:	b082      	sub	sp, #8
 8004008:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800400a:	f3ef 8305 	mrs	r3, IPSR
 800400e:	603b      	str	r3, [r7, #0]
  return(result);
 8004010:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004016:	f06f 0305 	mvn.w	r3, #5
 800401a:	607b      	str	r3, [r7, #4]
 800401c:	e010      	b.n	8004040 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800401e:	4b0b      	ldr	r3, [pc, #44]	; (800404c <osKernelStart+0x48>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d109      	bne.n	800403a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004026:	f7ff ffbf 	bl	8003fa8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800402a:	4b08      	ldr	r3, [pc, #32]	; (800404c <osKernelStart+0x48>)
 800402c:	2202      	movs	r2, #2
 800402e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004030:	f001 fd4e 	bl	8005ad0 <vTaskStartScheduler>
      stat = osOK;
 8004034:	2300      	movs	r3, #0
 8004036:	607b      	str	r3, [r7, #4]
 8004038:	e002      	b.n	8004040 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
 800403e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004040:	687b      	ldr	r3, [r7, #4]
}
 8004042:	4618      	mov	r0, r3
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	200001d0 	.word	0x200001d0

08004050 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004050:	b580      	push	{r7, lr}
 8004052:	b08e      	sub	sp, #56	; 0x38
 8004054:	af04      	add	r7, sp, #16
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800405c:	2300      	movs	r3, #0
 800405e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004060:	f3ef 8305 	mrs	r3, IPSR
 8004064:	617b      	str	r3, [r7, #20]
  return(result);
 8004066:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004068:	2b00      	cmp	r3, #0
 800406a:	d17e      	bne.n	800416a <osThreadNew+0x11a>
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d07b      	beq.n	800416a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004072:	2380      	movs	r3, #128	; 0x80
 8004074:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004076:	2318      	movs	r3, #24
 8004078:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800407e:	f04f 33ff 	mov.w	r3, #4294967295
 8004082:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d045      	beq.n	8004116 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d002      	beq.n	8004098 <osThreadNew+0x48>
        name = attr->name;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	699b      	ldr	r3, [r3, #24]
 80040a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80040a6:	69fb      	ldr	r3, [r7, #28]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <osThreadNew+0x6e>
 80040ac:	69fb      	ldr	r3, [r7, #28]
 80040ae:	2b38      	cmp	r3, #56	; 0x38
 80040b0:	d805      	bhi.n	80040be <osThreadNew+0x6e>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d001      	beq.n	80040c2 <osThreadNew+0x72>
        return (NULL);
 80040be:	2300      	movs	r3, #0
 80040c0:	e054      	b.n	800416c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d003      	beq.n	80040d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	089b      	lsrs	r3, r3, #2
 80040d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d00e      	beq.n	80040f8 <osThreadNew+0xa8>
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	2ba7      	cmp	r3, #167	; 0xa7
 80040e0:	d90a      	bls.n	80040f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d006      	beq.n	80040f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d002      	beq.n	80040f8 <osThreadNew+0xa8>
        mem = 1;
 80040f2:	2301      	movs	r3, #1
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e010      	b.n	800411a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10c      	bne.n	800411a <osThreadNew+0xca>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d108      	bne.n	800411a <osThreadNew+0xca>
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	691b      	ldr	r3, [r3, #16]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d104      	bne.n	800411a <osThreadNew+0xca>
          mem = 0;
 8004110:	2300      	movs	r3, #0
 8004112:	61bb      	str	r3, [r7, #24]
 8004114:	e001      	b.n	800411a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004116:	2300      	movs	r3, #0
 8004118:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800411a:	69bb      	ldr	r3, [r7, #24]
 800411c:	2b01      	cmp	r3, #1
 800411e:	d110      	bne.n	8004142 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004128:	9202      	str	r2, [sp, #8]
 800412a:	9301      	str	r3, [sp, #4]
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	9300      	str	r3, [sp, #0]
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	6a3a      	ldr	r2, [r7, #32]
 8004134:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f001 fade 	bl	80056f8 <xTaskCreateStatic>
 800413c:	4603      	mov	r3, r0
 800413e:	613b      	str	r3, [r7, #16]
 8004140:	e013      	b.n	800416a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004142:	69bb      	ldr	r3, [r7, #24]
 8004144:	2b00      	cmp	r3, #0
 8004146:	d110      	bne.n	800416a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	b29a      	uxth	r2, r3
 800414c:	f107 0310 	add.w	r3, r7, #16
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	69fb      	ldr	r3, [r7, #28]
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800415a:	68f8      	ldr	r0, [r7, #12]
 800415c:	f001 fb29 	bl	80057b2 <xTaskCreate>
 8004160:	4603      	mov	r3, r0
 8004162:	2b01      	cmp	r3, #1
 8004164:	d001      	beq.n	800416a <osThreadNew+0x11a>
            hTask = NULL;
 8004166:	2300      	movs	r3, #0
 8004168:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800416a:	693b      	ldr	r3, [r7, #16]
}
 800416c:	4618      	mov	r0, r3
 800416e:	3728      	adds	r7, #40	; 0x28
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004174:	b580      	push	{r7, lr}
 8004176:	b084      	sub	sp, #16
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800417c:	f3ef 8305 	mrs	r3, IPSR
 8004180:	60bb      	str	r3, [r7, #8]
  return(result);
 8004182:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004184:	2b00      	cmp	r3, #0
 8004186:	d003      	beq.n	8004190 <osDelay+0x1c>
    stat = osErrorISR;
 8004188:	f06f 0305 	mvn.w	r3, #5
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	e007      	b.n	80041a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004190:	2300      	movs	r3, #0
 8004192:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d002      	beq.n	80041a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f001 fc64 	bl	8005a68 <vTaskDelay>
    }
  }

  return (stat);
 80041a0:	68fb      	ldr	r3, [r7, #12]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3710      	adds	r7, #16
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}

080041aa <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 80041aa:	b580      	push	{r7, lr}
 80041ac:	b084      	sub	sp, #16
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 80041b2:	6878      	ldr	r0, [r7, #4]
 80041b4:	f002 feae 	bl	8006f14 <pvTimerGetTimerID>
 80041b8:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d005      	beq.n	80041cc <TimerCallback+0x22>
    callb->func (callb->arg);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68fa      	ldr	r2, [r7, #12]
 80041c6:	6852      	ldr	r2, [r2, #4]
 80041c8:	4610      	mov	r0, r2
 80041ca:	4798      	blx	r3
  }
}
 80041cc:	bf00      	nop
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08c      	sub	sp, #48	; 0x30
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	607a      	str	r2, [r7, #4]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	460b      	mov	r3, r1
 80041e2:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 80041e4:	2300      	movs	r3, #0
 80041e6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041e8:	f3ef 8305 	mrs	r3, IPSR
 80041ec:	613b      	str	r3, [r7, #16]
  return(result);
 80041ee:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d163      	bne.n	80042bc <osTimerNew+0xe8>
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d060      	beq.n	80042bc <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 80041fa:	2008      	movs	r0, #8
 80041fc:	f003 f8fc 	bl	80073f8 <pvPortMalloc>
 8004200:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d059      	beq.n	80042bc <osTimerNew+0xe8>
      callb->func = func;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	68fa      	ldr	r2, [r7, #12]
 800420c:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	687a      	ldr	r2, [r7, #4]
 8004212:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004214:	7afb      	ldrb	r3, [r7, #11]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d102      	bne.n	8004220 <osTimerNew+0x4c>
        reload = pdFALSE;
 800421a:	2300      	movs	r3, #0
 800421c:	61fb      	str	r3, [r7, #28]
 800421e:	e001      	b.n	8004224 <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004220:	2301      	movs	r3, #1
 8004222:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004224:	f04f 33ff 	mov.w	r3, #4294967295
 8004228:	61bb      	str	r3, [r7, #24]
      name = NULL;
 800422a:	2300      	movs	r3, #0
 800422c:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d01c      	beq.n	800426e <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d002      	beq.n	8004242 <osTimerNew+0x6e>
          name = attr->name;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d006      	beq.n	8004258 <osTimerNew+0x84>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	2b2b      	cmp	r3, #43	; 0x2b
 8004250:	d902      	bls.n	8004258 <osTimerNew+0x84>
          mem = 1;
 8004252:	2301      	movs	r3, #1
 8004254:	61bb      	str	r3, [r7, #24]
 8004256:	e00c      	b.n	8004272 <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d108      	bne.n	8004272 <osTimerNew+0x9e>
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	68db      	ldr	r3, [r3, #12]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d104      	bne.n	8004272 <osTimerNew+0x9e>
            mem = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	61bb      	str	r3, [r7, #24]
 800426c:	e001      	b.n	8004272 <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 800426e:	2300      	movs	r3, #0
 8004270:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	2b01      	cmp	r3, #1
 8004276:	d10c      	bne.n	8004292 <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	9301      	str	r3, [sp, #4]
 800427e:	4b12      	ldr	r3, [pc, #72]	; (80042c8 <osTimerNew+0xf4>)
 8004280:	9300      	str	r3, [sp, #0]
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	69fa      	ldr	r2, [r7, #28]
 8004286:	2101      	movs	r1, #1
 8004288:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800428a:	f002 fac4 	bl	8006816 <xTimerCreateStatic>
 800428e:	6238      	str	r0, [r7, #32]
 8004290:	e00b      	b.n	80042aa <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d108      	bne.n	80042aa <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004298:	4b0b      	ldr	r3, [pc, #44]	; (80042c8 <osTimerNew+0xf4>)
 800429a:	9300      	str	r3, [sp, #0]
 800429c:	697b      	ldr	r3, [r7, #20]
 800429e:	69fa      	ldr	r2, [r7, #28]
 80042a0:	2101      	movs	r1, #1
 80042a2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80042a4:	f002 fa96 	bl	80067d4 <xTimerCreate>
 80042a8:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 80042aa:	6a3b      	ldr	r3, [r7, #32]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d105      	bne.n	80042bc <osTimerNew+0xe8>
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d002      	beq.n	80042bc <osTimerNew+0xe8>
        vPortFree (callb);
 80042b6:	6978      	ldr	r0, [r7, #20]
 80042b8:	f003 f96a 	bl	8007590 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 80042bc:	6a3b      	ldr	r3, [r7, #32]
}
 80042be:	4618      	mov	r0, r3
 80042c0:	3728      	adds	r7, #40	; 0x28
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	080041ab 	.word	0x080041ab

080042cc <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b08a      	sub	sp, #40	; 0x28
 80042d0:	af02      	add	r7, sp, #8
 80042d2:	60f8      	str	r0, [r7, #12]
 80042d4:	60b9      	str	r1, [r7, #8]
 80042d6:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80042d8:	2300      	movs	r3, #0
 80042da:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042dc:	f3ef 8305 	mrs	r3, IPSR
 80042e0:	613b      	str	r3, [r7, #16]
  return(result);
 80042e2:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d175      	bne.n	80043d4 <osSemaphoreNew+0x108>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d072      	beq.n	80043d4 <osSemaphoreNew+0x108>
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d86e      	bhi.n	80043d4 <osSemaphoreNew+0x108>
    mem = -1;
 80042f6:	f04f 33ff 	mov.w	r3, #4294967295
 80042fa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d015      	beq.n	800432e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d006      	beq.n	8004318 <osSemaphoreNew+0x4c>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	68db      	ldr	r3, [r3, #12]
 800430e:	2b4f      	cmp	r3, #79	; 0x4f
 8004310:	d902      	bls.n	8004318 <osSemaphoreNew+0x4c>
        mem = 1;
 8004312:	2301      	movs	r3, #1
 8004314:	61bb      	str	r3, [r7, #24]
 8004316:	e00c      	b.n	8004332 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d108      	bne.n	8004332 <osSemaphoreNew+0x66>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d104      	bne.n	8004332 <osSemaphoreNew+0x66>
          mem = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
 800432c:	e001      	b.n	8004332 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d04c      	beq.n	80043d4 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2b01      	cmp	r3, #1
 800433e:	d128      	bne.n	8004392 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	2b01      	cmp	r3, #1
 8004344:	d10a      	bne.n	800435c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	2203      	movs	r2, #3
 800434c:	9200      	str	r2, [sp, #0]
 800434e:	2200      	movs	r2, #0
 8004350:	2100      	movs	r1, #0
 8004352:	2001      	movs	r0, #1
 8004354:	f000 fa2a 	bl	80047ac <xQueueGenericCreateStatic>
 8004358:	61f8      	str	r0, [r7, #28]
 800435a:	e005      	b.n	8004368 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800435c:	2203      	movs	r2, #3
 800435e:	2100      	movs	r1, #0
 8004360:	2001      	movs	r0, #1
 8004362:	f000 fa9b 	bl	800489c <xQueueGenericCreate>
 8004366:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8004368:	69fb      	ldr	r3, [r7, #28]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d022      	beq.n	80043b4 <osSemaphoreNew+0xe8>
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d01f      	beq.n	80043b4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8004374:	2300      	movs	r3, #0
 8004376:	2200      	movs	r2, #0
 8004378:	2100      	movs	r1, #0
 800437a:	69f8      	ldr	r0, [r7, #28]
 800437c:	f000 fb56 	bl	8004a2c <xQueueGenericSend>
 8004380:	4603      	mov	r3, r0
 8004382:	2b01      	cmp	r3, #1
 8004384:	d016      	beq.n	80043b4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8004386:	69f8      	ldr	r0, [r7, #28]
 8004388:	f000 ffe2 	bl	8005350 <vQueueDelete>
            hSemaphore = NULL;
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	e010      	b.n	80043b4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d108      	bne.n	80043aa <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	461a      	mov	r2, r3
 800439e:	68b9      	ldr	r1, [r7, #8]
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f000 fad8 	bl	8004956 <xQueueCreateCountingSemaphoreStatic>
 80043a6:	61f8      	str	r0, [r7, #28]
 80043a8:	e004      	b.n	80043b4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80043aa:	68b9      	ldr	r1, [r7, #8]
 80043ac:	68f8      	ldr	r0, [r7, #12]
 80043ae:	f000 fb09 	bl	80049c4 <xQueueCreateCountingSemaphore>
 80043b2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d00c      	beq.n	80043d4 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d003      	beq.n	80043c8 <osSemaphoreNew+0xfc>
          name = attr->name;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e001      	b.n	80043cc <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80043c8:	2300      	movs	r3, #0
 80043ca:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80043cc:	6979      	ldr	r1, [r7, #20]
 80043ce:	69f8      	ldr	r0, [r7, #28]
 80043d0:	f001 f90a 	bl	80055e8 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80043d4:	69fb      	ldr	r3, [r7, #28]
}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3720      	adds	r7, #32
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b086      	sub	sp, #24
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
 80043e8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80043ee:	2300      	movs	r3, #0
 80043f0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d103      	bne.n	8004400 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80043f8:	f06f 0303 	mvn.w	r3, #3
 80043fc:	617b      	str	r3, [r7, #20]
 80043fe:	e039      	b.n	8004474 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004400:	f3ef 8305 	mrs	r3, IPSR
 8004404:	60fb      	str	r3, [r7, #12]
  return(result);
 8004406:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004408:	2b00      	cmp	r3, #0
 800440a:	d022      	beq.n	8004452 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8004412:	f06f 0303 	mvn.w	r3, #3
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	e02c      	b.n	8004474 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800441a:	2300      	movs	r3, #0
 800441c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800441e:	f107 0308 	add.w	r3, r7, #8
 8004422:	461a      	mov	r2, r3
 8004424:	2100      	movs	r1, #0
 8004426:	6938      	ldr	r0, [r7, #16]
 8004428:	f000 ff12 	bl	8005250 <xQueueReceiveFromISR>
 800442c:	4603      	mov	r3, r0
 800442e:	2b01      	cmp	r3, #1
 8004430:	d003      	beq.n	800443a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8004432:	f06f 0302 	mvn.w	r3, #2
 8004436:	617b      	str	r3, [r7, #20]
 8004438:	e01c      	b.n	8004474 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d019      	beq.n	8004474 <osSemaphoreAcquire+0x94>
 8004440:	4b0f      	ldr	r3, [pc, #60]	; (8004480 <osSemaphoreAcquire+0xa0>)
 8004442:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	f3bf 8f4f 	dsb	sy
 800444c:	f3bf 8f6f 	isb	sy
 8004450:	e010      	b.n	8004474 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8004452:	6839      	ldr	r1, [r7, #0]
 8004454:	6938      	ldr	r0, [r7, #16]
 8004456:	f000 fdef 	bl	8005038 <xQueueSemaphoreTake>
 800445a:	4603      	mov	r3, r0
 800445c:	2b01      	cmp	r3, #1
 800445e:	d009      	beq.n	8004474 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8004460:	683b      	ldr	r3, [r7, #0]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d003      	beq.n	800446e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8004466:	f06f 0301 	mvn.w	r3, #1
 800446a:	617b      	str	r3, [r7, #20]
 800446c:	e002      	b.n	8004474 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800446e:	f06f 0302 	mvn.w	r3, #2
 8004472:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8004474:	697b      	ldr	r3, [r7, #20]
}
 8004476:	4618      	mov	r0, r3
 8004478:	3718      	adds	r7, #24
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}
 800447e:	bf00      	nop
 8004480:	e000ed04 	.word	0xe000ed04

08004484 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004490:	2300      	movs	r3, #0
 8004492:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d103      	bne.n	80044a2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800449a:	f06f 0303 	mvn.w	r3, #3
 800449e:	617b      	str	r3, [r7, #20]
 80044a0:	e02c      	b.n	80044fc <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80044a2:	f3ef 8305 	mrs	r3, IPSR
 80044a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80044a8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d01a      	beq.n	80044e4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80044b2:	f107 0308 	add.w	r3, r7, #8
 80044b6:	4619      	mov	r1, r3
 80044b8:	6938      	ldr	r0, [r7, #16]
 80044ba:	f000 fc50 	bl	8004d5e <xQueueGiveFromISR>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d003      	beq.n	80044cc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80044c4:	f06f 0302 	mvn.w	r3, #2
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e017      	b.n	80044fc <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d014      	beq.n	80044fc <osSemaphoreRelease+0x78>
 80044d2:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <osSemaphoreRelease+0x84>)
 80044d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	f3bf 8f4f 	dsb	sy
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	e00b      	b.n	80044fc <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80044e4:	2300      	movs	r3, #0
 80044e6:	2200      	movs	r2, #0
 80044e8:	2100      	movs	r1, #0
 80044ea:	6938      	ldr	r0, [r7, #16]
 80044ec:	f000 fa9e 	bl	8004a2c <xQueueGenericSend>
 80044f0:	4603      	mov	r3, r0
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d002      	beq.n	80044fc <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80044f6:	f06f 0302 	mvn.w	r3, #2
 80044fa:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80044fc:	697b      	ldr	r3, [r7, #20]
}
 80044fe:	4618      	mov	r0, r3
 8004500:	3718      	adds	r7, #24
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}
 8004506:	bf00      	nop
 8004508:	e000ed04 	.word	0xe000ed04

0800450c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800450c:	b480      	push	{r7}
 800450e:	b085      	sub	sp, #20
 8004510:	af00      	add	r7, sp, #0
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	4a07      	ldr	r2, [pc, #28]	; (8004538 <vApplicationGetIdleTaskMemory+0x2c>)
 800451c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	4a06      	ldr	r2, [pc, #24]	; (800453c <vApplicationGetIdleTaskMemory+0x30>)
 8004522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2280      	movs	r2, #128	; 0x80
 8004528:	601a      	str	r2, [r3, #0]
}
 800452a:	bf00      	nop
 800452c:	3714      	adds	r7, #20
 800452e:	46bd      	mov	sp, r7
 8004530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004534:	4770      	bx	lr
 8004536:	bf00      	nop
 8004538:	200001d4 	.word	0x200001d4
 800453c:	2000027c 	.word	0x2000027c

08004540 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004540:	b480      	push	{r7}
 8004542:	b085      	sub	sp, #20
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	4a07      	ldr	r2, [pc, #28]	; (800456c <vApplicationGetTimerTaskMemory+0x2c>)
 8004550:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	4a06      	ldr	r2, [pc, #24]	; (8004570 <vApplicationGetTimerTaskMemory+0x30>)
 8004556:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800455e:	601a      	str	r2, [r3, #0]
}
 8004560:	bf00      	nop
 8004562:	3714      	adds	r7, #20
 8004564:	46bd      	mov	sp, r7
 8004566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456a:	4770      	bx	lr
 800456c:	2000047c 	.word	0x2000047c
 8004570:	20000524 	.word	0x20000524

08004574 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004574:	b480      	push	{r7}
 8004576:	b083      	sub	sp, #12
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f103 0208 	add.w	r2, r3, #8
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	f04f 32ff 	mov.w	r2, #4294967295
 800458c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f103 0208 	add.w	r2, r3, #8
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	f103 0208 	add.w	r2, r3, #8
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80045a8:	bf00      	nop
 80045aa:	370c      	adds	r7, #12
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80045c2:	bf00      	nop
 80045c4:	370c      	adds	r7, #12
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr

080045ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80045ce:	b480      	push	{r7}
 80045d0:	b085      	sub	sp, #20
 80045d2:	af00      	add	r7, sp, #0
 80045d4:	6078      	str	r0, [r7, #4]
 80045d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	689a      	ldr	r2, [r3, #8]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	683a      	ldr	r2, [r7, #0]
 80045f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	687a      	ldr	r2, [r7, #4]
 80045fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	1c5a      	adds	r2, r3, #1
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	601a      	str	r2, [r3, #0]
}
 800460a:	bf00      	nop
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
 800461e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d103      	bne.n	8004636 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	691b      	ldr	r3, [r3, #16]
 8004632:	60fb      	str	r3, [r7, #12]
 8004634:	e00c      	b.n	8004650 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	3308      	adds	r3, #8
 800463a:	60fb      	str	r3, [r7, #12]
 800463c:	e002      	b.n	8004644 <vListInsert+0x2e>
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d2f6      	bcs.n	800463e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	685a      	ldr	r2, [r3, #4]
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	683a      	ldr	r2, [r7, #0]
 800465e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68fa      	ldr	r2, [r7, #12]
 8004664:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	683a      	ldr	r2, [r7, #0]
 800466a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	1c5a      	adds	r2, r3, #1
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	601a      	str	r2, [r3, #0]
}
 800467c:	bf00      	nop
 800467e:	3714      	adds	r7, #20
 8004680:	46bd      	mov	sp, r7
 8004682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004686:	4770      	bx	lr

08004688 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004688:	b480      	push	{r7}
 800468a:	b085      	sub	sp, #20
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6892      	ldr	r2, [r2, #8]
 800469e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	689b      	ldr	r3, [r3, #8]
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	6852      	ldr	r2, [r2, #4]
 80046a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d103      	bne.n	80046bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	1e5a      	subs	r2, r3, #1
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3714      	adds	r7, #20
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d10a      	bne.n	8004706 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004706:	f002 fd55 	bl	80071b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004716:	fb01 f303 	mul.w	r3, r1, r3
 800471a:	441a      	add	r2, r3
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004736:	3b01      	subs	r3, #1
 8004738:	68f9      	ldr	r1, [r7, #12]
 800473a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800473c:	fb01 f303 	mul.w	r3, r1, r3
 8004740:	441a      	add	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	22ff      	movs	r2, #255	; 0xff
 800474a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	22ff      	movs	r2, #255	; 0xff
 8004752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d114      	bne.n	8004786 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d01a      	beq.n	800479a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	3310      	adds	r3, #16
 8004768:	4618      	mov	r0, r3
 800476a:	f001 fc4b 	bl	8006004 <xTaskRemoveFromEventList>
 800476e:	4603      	mov	r3, r0
 8004770:	2b00      	cmp	r3, #0
 8004772:	d012      	beq.n	800479a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004774:	4b0c      	ldr	r3, [pc, #48]	; (80047a8 <xQueueGenericReset+0xcc>)
 8004776:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	f3bf 8f4f 	dsb	sy
 8004780:	f3bf 8f6f 	isb	sy
 8004784:	e009      	b.n	800479a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	3310      	adds	r3, #16
 800478a:	4618      	mov	r0, r3
 800478c:	f7ff fef2 	bl	8004574 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	3324      	adds	r3, #36	; 0x24
 8004794:	4618      	mov	r0, r3
 8004796:	f7ff feed 	bl	8004574 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800479a:	f002 fd3b 	bl	8007214 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800479e:	2301      	movs	r3, #1
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	e000ed04 	.word	0xe000ed04

080047ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b08e      	sub	sp, #56	; 0x38
 80047b0:	af02      	add	r7, sp, #8
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d10a      	bne.n	80047d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80047c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047c4:	f383 8811 	msr	BASEPRI, r3
 80047c8:	f3bf 8f6f 	isb	sy
 80047cc:	f3bf 8f4f 	dsb	sy
 80047d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80047d2:	bf00      	nop
 80047d4:	e7fe      	b.n	80047d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d002      	beq.n	80047fe <xQueueGenericCreateStatic+0x52>
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d001      	beq.n	8004802 <xQueueGenericCreateStatic+0x56>
 80047fe:	2301      	movs	r3, #1
 8004800:	e000      	b.n	8004804 <xQueueGenericCreateStatic+0x58>
 8004802:	2300      	movs	r3, #0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d10a      	bne.n	800481e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480c:	f383 8811 	msr	BASEPRI, r3
 8004810:	f3bf 8f6f 	isb	sy
 8004814:	f3bf 8f4f 	dsb	sy
 8004818:	623b      	str	r3, [r7, #32]
}
 800481a:	bf00      	nop
 800481c:	e7fe      	b.n	800481c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d102      	bne.n	800482a <xQueueGenericCreateStatic+0x7e>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <xQueueGenericCreateStatic+0x82>
 800482a:	2301      	movs	r3, #1
 800482c:	e000      	b.n	8004830 <xQueueGenericCreateStatic+0x84>
 800482e:	2300      	movs	r3, #0
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10a      	bne.n	800484a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004838:	f383 8811 	msr	BASEPRI, r3
 800483c:	f3bf 8f6f 	isb	sy
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	61fb      	str	r3, [r7, #28]
}
 8004846:	bf00      	nop
 8004848:	e7fe      	b.n	8004848 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800484a:	2350      	movs	r3, #80	; 0x50
 800484c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	2b50      	cmp	r3, #80	; 0x50
 8004852:	d00a      	beq.n	800486a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004854:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004858:	f383 8811 	msr	BASEPRI, r3
 800485c:	f3bf 8f6f 	isb	sy
 8004860:	f3bf 8f4f 	dsb	sy
 8004864:	61bb      	str	r3, [r7, #24]
}
 8004866:	bf00      	nop
 8004868:	e7fe      	b.n	8004868 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800486a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004872:	2b00      	cmp	r3, #0
 8004874:	d00d      	beq.n	8004892 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800487e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004884:	9300      	str	r3, [sp, #0]
 8004886:	4613      	mov	r3, r2
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	68b9      	ldr	r1, [r7, #8]
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f000 f83f 	bl	8004910 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004894:	4618      	mov	r0, r3
 8004896:	3730      	adds	r7, #48	; 0x30
 8004898:	46bd      	mov	sp, r7
 800489a:	bd80      	pop	{r7, pc}

0800489c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800489c:	b580      	push	{r7, lr}
 800489e:	b08a      	sub	sp, #40	; 0x28
 80048a0:	af02      	add	r7, sp, #8
 80048a2:	60f8      	str	r0, [r7, #12]
 80048a4:	60b9      	str	r1, [r7, #8]
 80048a6:	4613      	mov	r3, r2
 80048a8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d10a      	bne.n	80048c6 <xQueueGenericCreate+0x2a>
	__asm volatile
 80048b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048b4:	f383 8811 	msr	BASEPRI, r3
 80048b8:	f3bf 8f6f 	isb	sy
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	613b      	str	r3, [r7, #16]
}
 80048c2:	bf00      	nop
 80048c4:	e7fe      	b.n	80048c4 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	fb02 f303 	mul.w	r3, r2, r3
 80048ce:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80048d0:	69fb      	ldr	r3, [r7, #28]
 80048d2:	3350      	adds	r3, #80	; 0x50
 80048d4:	4618      	mov	r0, r3
 80048d6:	f002 fd8f 	bl	80073f8 <pvPortMalloc>
 80048da:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80048dc:	69bb      	ldr	r3, [r7, #24]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d011      	beq.n	8004906 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80048e2:	69bb      	ldr	r3, [r7, #24]
 80048e4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80048e6:	697b      	ldr	r3, [r7, #20]
 80048e8:	3350      	adds	r3, #80	; 0x50
 80048ea:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80048ec:	69bb      	ldr	r3, [r7, #24]
 80048ee:	2200      	movs	r2, #0
 80048f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80048f4:	79fa      	ldrb	r2, [r7, #7]
 80048f6:	69bb      	ldr	r3, [r7, #24]
 80048f8:	9300      	str	r3, [sp, #0]
 80048fa:	4613      	mov	r3, r2
 80048fc:	697a      	ldr	r2, [r7, #20]
 80048fe:	68b9      	ldr	r1, [r7, #8]
 8004900:	68f8      	ldr	r0, [r7, #12]
 8004902:	f000 f805 	bl	8004910 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004906:	69bb      	ldr	r3, [r7, #24]
	}
 8004908:	4618      	mov	r0, r3
 800490a:	3720      	adds	r7, #32
 800490c:	46bd      	mov	sp, r7
 800490e:	bd80      	pop	{r7, pc}

08004910 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b084      	sub	sp, #16
 8004914:	af00      	add	r7, sp, #0
 8004916:	60f8      	str	r0, [r7, #12]
 8004918:	60b9      	str	r1, [r7, #8]
 800491a:	607a      	str	r2, [r7, #4]
 800491c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d103      	bne.n	800492c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004924:	69bb      	ldr	r3, [r7, #24]
 8004926:	69ba      	ldr	r2, [r7, #24]
 8004928:	601a      	str	r2, [r3, #0]
 800492a:	e002      	b.n	8004932 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800492c:	69bb      	ldr	r3, [r7, #24]
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004932:	69bb      	ldr	r3, [r7, #24]
 8004934:	68fa      	ldr	r2, [r7, #12]
 8004936:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004938:	69bb      	ldr	r3, [r7, #24]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800493e:	2101      	movs	r1, #1
 8004940:	69b8      	ldr	r0, [r7, #24]
 8004942:	f7ff fecb 	bl	80046dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004946:	69bb      	ldr	r3, [r7, #24]
 8004948:	78fa      	ldrb	r2, [r7, #3]
 800494a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800494e:	bf00      	nop
 8004950:	3710      	adds	r7, #16
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}

08004956 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004956:	b580      	push	{r7, lr}
 8004958:	b08a      	sub	sp, #40	; 0x28
 800495a:	af02      	add	r7, sp, #8
 800495c:	60f8      	str	r0, [r7, #12]
 800495e:	60b9      	str	r1, [r7, #8]
 8004960:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d10a      	bne.n	800497e <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	; 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	61bb      	str	r3, [r7, #24]
}
 800497a:	bf00      	nop
 800497c:	e7fe      	b.n	800497c <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800497e:	68ba      	ldr	r2, [r7, #8]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	429a      	cmp	r2, r3
 8004984:	d90a      	bls.n	800499c <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004986:	f04f 0350 	mov.w	r3, #80	; 0x50
 800498a:	f383 8811 	msr	BASEPRI, r3
 800498e:	f3bf 8f6f 	isb	sy
 8004992:	f3bf 8f4f 	dsb	sy
 8004996:	617b      	str	r3, [r7, #20]
}
 8004998:	bf00      	nop
 800499a:	e7fe      	b.n	800499a <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800499c:	2302      	movs	r3, #2
 800499e:	9300      	str	r3, [sp, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	2100      	movs	r1, #0
 80049a6:	68f8      	ldr	r0, [r7, #12]
 80049a8:	f7ff ff00 	bl	80047ac <xQueueGenericCreateStatic>
 80049ac:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 80049ae:	69fb      	ldr	r3, [r7, #28]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d002      	beq.n	80049ba <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80049b4:	69fb      	ldr	r3, [r7, #28]
 80049b6:	68ba      	ldr	r2, [r7, #8]
 80049b8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80049ba:	69fb      	ldr	r3, [r7, #28]
	}
 80049bc:	4618      	mov	r0, r3
 80049be:	3720      	adds	r7, #32
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d10a      	bne.n	80049ea <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80049d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d8:	f383 8811 	msr	BASEPRI, r3
 80049dc:	f3bf 8f6f 	isb	sy
 80049e0:	f3bf 8f4f 	dsb	sy
 80049e4:	613b      	str	r3, [r7, #16]
}
 80049e6:	bf00      	nop
 80049e8:	e7fe      	b.n	80049e8 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80049ea:	683a      	ldr	r2, [r7, #0]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d90a      	bls.n	8004a08 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80049f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f6:	f383 8811 	msr	BASEPRI, r3
 80049fa:	f3bf 8f6f 	isb	sy
 80049fe:	f3bf 8f4f 	dsb	sy
 8004a02:	60fb      	str	r3, [r7, #12]
}
 8004a04:	bf00      	nop
 8004a06:	e7fe      	b.n	8004a06 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004a08:	2202      	movs	r2, #2
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	6878      	ldr	r0, [r7, #4]
 8004a0e:	f7ff ff45 	bl	800489c <xQueueGenericCreate>
 8004a12:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	683a      	ldr	r2, [r7, #0]
 8004a1e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004a20:	697b      	ldr	r3, [r7, #20]
	}
 8004a22:	4618      	mov	r0, r3
 8004a24:	3718      	adds	r7, #24
 8004a26:	46bd      	mov	sp, r7
 8004a28:	bd80      	pop	{r7, pc}
	...

08004a2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b08e      	sub	sp, #56	; 0x38
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	60f8      	str	r0, [r7, #12]
 8004a34:	60b9      	str	r1, [r7, #8]
 8004a36:	607a      	str	r2, [r7, #4]
 8004a38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d10a      	bne.n	8004a5e <xQueueGenericSend+0x32>
	__asm volatile
 8004a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4c:	f383 8811 	msr	BASEPRI, r3
 8004a50:	f3bf 8f6f 	isb	sy
 8004a54:	f3bf 8f4f 	dsb	sy
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a5a:	bf00      	nop
 8004a5c:	e7fe      	b.n	8004a5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a5e:	68bb      	ldr	r3, [r7, #8]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d103      	bne.n	8004a6c <xQueueGenericSend+0x40>
 8004a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <xQueueGenericSend+0x44>
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e000      	b.n	8004a72 <xQueueGenericSend+0x46>
 8004a70:	2300      	movs	r3, #0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d10a      	bne.n	8004a8c <xQueueGenericSend+0x60>
	__asm volatile
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a88:	bf00      	nop
 8004a8a:	e7fe      	b.n	8004a8a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d103      	bne.n	8004a9a <xQueueGenericSend+0x6e>
 8004a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <xQueueGenericSend+0x72>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	e000      	b.n	8004aa0 <xQueueGenericSend+0x74>
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d10a      	bne.n	8004aba <xQueueGenericSend+0x8e>
	__asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	623b      	str	r3, [r7, #32]
}
 8004ab6:	bf00      	nop
 8004ab8:	e7fe      	b.n	8004ab8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004aba:	f001 fc65 	bl	8006388 <xTaskGetSchedulerState>
 8004abe:	4603      	mov	r3, r0
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d102      	bne.n	8004aca <xQueueGenericSend+0x9e>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <xQueueGenericSend+0xa2>
 8004aca:	2301      	movs	r3, #1
 8004acc:	e000      	b.n	8004ad0 <xQueueGenericSend+0xa4>
 8004ace:	2300      	movs	r3, #0
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d10a      	bne.n	8004aea <xQueueGenericSend+0xbe>
	__asm volatile
 8004ad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ad8:	f383 8811 	msr	BASEPRI, r3
 8004adc:	f3bf 8f6f 	isb	sy
 8004ae0:	f3bf 8f4f 	dsb	sy
 8004ae4:	61fb      	str	r3, [r7, #28]
}
 8004ae6:	bf00      	nop
 8004ae8:	e7fe      	b.n	8004ae8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004aea:	f002 fb63 	bl	80071b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d302      	bcc.n	8004b00 <xQueueGenericSend+0xd4>
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b02      	cmp	r3, #2
 8004afe:	d129      	bne.n	8004b54 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	68b9      	ldr	r1, [r7, #8]
 8004b04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b06:	f000 fc5e 	bl	80053c6 <prvCopyDataToQueue>
 8004b0a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d010      	beq.n	8004b36 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b16:	3324      	adds	r3, #36	; 0x24
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f001 fa73 	bl	8006004 <xTaskRemoveFromEventList>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d013      	beq.n	8004b4c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004b24:	4b3f      	ldr	r3, [pc, #252]	; (8004c24 <xQueueGenericSend+0x1f8>)
 8004b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b2a:	601a      	str	r2, [r3, #0]
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	f3bf 8f6f 	isb	sy
 8004b34:	e00a      	b.n	8004b4c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d007      	beq.n	8004b4c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004b3c:	4b39      	ldr	r3, [pc, #228]	; (8004c24 <xQueueGenericSend+0x1f8>)
 8004b3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b42:	601a      	str	r2, [r3, #0]
 8004b44:	f3bf 8f4f 	dsb	sy
 8004b48:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004b4c:	f002 fb62 	bl	8007214 <vPortExitCritical>
				return pdPASS;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e063      	b.n	8004c1c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d103      	bne.n	8004b62 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004b5a:	f002 fb5b 	bl	8007214 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	e05c      	b.n	8004c1c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d106      	bne.n	8004b76 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b68:	f107 0314 	add.w	r3, r7, #20
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	f001 faad 	bl	80060cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b72:	2301      	movs	r3, #1
 8004b74:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b76:	f002 fb4d 	bl	8007214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b7a:	f001 f819 	bl	8005bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b7e:	f002 fb19 	bl	80071b4 <vPortEnterCritical>
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b88:	b25b      	sxtb	r3, r3
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d103      	bne.n	8004b98 <xQueueGenericSend+0x16c>
 8004b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b92:	2200      	movs	r2, #0
 8004b94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b9a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004b9e:	b25b      	sxtb	r3, r3
 8004ba0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba4:	d103      	bne.n	8004bae <xQueueGenericSend+0x182>
 8004ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba8:	2200      	movs	r2, #0
 8004baa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bae:	f002 fb31 	bl	8007214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb2:	1d3a      	adds	r2, r7, #4
 8004bb4:	f107 0314 	add.w	r3, r7, #20
 8004bb8:	4611      	mov	r1, r2
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f001 fa9c 	bl	80060f8 <xTaskCheckForTimeOut>
 8004bc0:	4603      	mov	r3, r0
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d124      	bne.n	8004c10 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004bc6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004bc8:	f000 fcf5 	bl	80055b6 <prvIsQueueFull>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d018      	beq.n	8004c04 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	3310      	adds	r3, #16
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	4611      	mov	r1, r2
 8004bda:	4618      	mov	r0, r3
 8004bdc:	f001 f9c2 	bl	8005f64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004be0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004be2:	f000 fc80 	bl	80054e6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004be6:	f000 fff1 	bl	8005bcc <xTaskResumeAll>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f47f af7c 	bne.w	8004aea <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004bf2:	4b0c      	ldr	r3, [pc, #48]	; (8004c24 <xQueueGenericSend+0x1f8>)
 8004bf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bf8:	601a      	str	r2, [r3, #0]
 8004bfa:	f3bf 8f4f 	dsb	sy
 8004bfe:	f3bf 8f6f 	isb	sy
 8004c02:	e772      	b.n	8004aea <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004c04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c06:	f000 fc6e 	bl	80054e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c0a:	f000 ffdf 	bl	8005bcc <xTaskResumeAll>
 8004c0e:	e76c      	b.n	8004aea <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004c10:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004c12:	f000 fc68 	bl	80054e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c16:	f000 ffd9 	bl	8005bcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004c1a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3738      	adds	r7, #56	; 0x38
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	e000ed04 	.word	0xe000ed04

08004c28 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b090      	sub	sp, #64	; 0x40
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	607a      	str	r2, [r7, #4]
 8004c34:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d10a      	bne.n	8004c56 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <xQueueGenericSendFromISR+0x3c>
 8004c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d101      	bne.n	8004c68 <xQueueGenericSendFromISR+0x40>
 8004c64:	2301      	movs	r3, #1
 8004c66:	e000      	b.n	8004c6a <xQueueGenericSendFromISR+0x42>
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10a      	bne.n	8004c84 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004c6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c72:	f383 8811 	msr	BASEPRI, r3
 8004c76:	f3bf 8f6f 	isb	sy
 8004c7a:	f3bf 8f4f 	dsb	sy
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c80:	bf00      	nop
 8004c82:	e7fe      	b.n	8004c82 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	2b02      	cmp	r3, #2
 8004c88:	d103      	bne.n	8004c92 <xQueueGenericSendFromISR+0x6a>
 8004c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d101      	bne.n	8004c96 <xQueueGenericSendFromISR+0x6e>
 8004c92:	2301      	movs	r3, #1
 8004c94:	e000      	b.n	8004c98 <xQueueGenericSendFromISR+0x70>
 8004c96:	2300      	movs	r3, #0
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d10a      	bne.n	8004cb2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca0:	f383 8811 	msr	BASEPRI, r3
 8004ca4:	f3bf 8f6f 	isb	sy
 8004ca8:	f3bf 8f4f 	dsb	sy
 8004cac:	623b      	str	r3, [r7, #32]
}
 8004cae:	bf00      	nop
 8004cb0:	e7fe      	b.n	8004cb0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004cb2:	f002 fb61 	bl	8007378 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004cb6:	f3ef 8211 	mrs	r2, BASEPRI
 8004cba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cbe:	f383 8811 	msr	BASEPRI, r3
 8004cc2:	f3bf 8f6f 	isb	sy
 8004cc6:	f3bf 8f4f 	dsb	sy
 8004cca:	61fa      	str	r2, [r7, #28]
 8004ccc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004cce:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004cd0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004cd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d302      	bcc.n	8004ce4 <xQueueGenericSendFromISR+0xbc>
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d12f      	bne.n	8004d44 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ce6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004cf4:	683a      	ldr	r2, [r7, #0]
 8004cf6:	68b9      	ldr	r1, [r7, #8]
 8004cf8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cfa:	f000 fb64 	bl	80053c6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004cfe:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004d02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d06:	d112      	bne.n	8004d2e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004d08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d016      	beq.n	8004d3e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004d10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d12:	3324      	adds	r3, #36	; 0x24
 8004d14:	4618      	mov	r0, r3
 8004d16:	f001 f975 	bl	8006004 <xTaskRemoveFromEventList>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00e      	beq.n	8004d3e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d00b      	beq.n	8004d3e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	e007      	b.n	8004d3e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004d2e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004d32:	3301      	adds	r3, #1
 8004d34:	b2db      	uxtb	r3, r3
 8004d36:	b25a      	sxtb	r2, r3
 8004d38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d3a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004d3e:	2301      	movs	r3, #1
 8004d40:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004d42:	e001      	b.n	8004d48 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004d44:	2300      	movs	r3, #0
 8004d46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d4a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004d4c:	697b      	ldr	r3, [r7, #20]
 8004d4e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004d52:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004d54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	3740      	adds	r7, #64	; 0x40
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	bd80      	pop	{r7, pc}

08004d5e <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004d5e:	b580      	push	{r7, lr}
 8004d60:	b08e      	sub	sp, #56	; 0x38
 8004d62:	af00      	add	r7, sp, #0
 8004d64:	6078      	str	r0, [r7, #4]
 8004d66:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
 8004d82:	623b      	str	r3, [r7, #32]
}
 8004d84:	bf00      	nop
 8004d86:	e7fe      	b.n	8004d86 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00a      	beq.n	8004da6 <xQueueGiveFromISR+0x48>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	61fb      	str	r3, [r7, #28]
}
 8004da2:	bf00      	nop
 8004da4:	e7fe      	b.n	8004da4 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d103      	bne.n	8004db6 <xQueueGiveFromISR+0x58>
 8004dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004db0:	689b      	ldr	r3, [r3, #8]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d101      	bne.n	8004dba <xQueueGiveFromISR+0x5c>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <xQueueGiveFromISR+0x5e>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10a      	bne.n	8004dd6 <xQueueGiveFromISR+0x78>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	61bb      	str	r3, [r7, #24]
}
 8004dd2:	bf00      	nop
 8004dd4:	e7fe      	b.n	8004dd4 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dd6:	f002 facf 	bl	8007378 <vPortValidateInterruptPriority>
	__asm volatile
 8004dda:	f3ef 8211 	mrs	r2, BASEPRI
 8004dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	617a      	str	r2, [r7, #20]
 8004df0:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8004df2:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004df4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfa:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8004dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004e02:	429a      	cmp	r2, r3
 8004e04:	d22b      	bcs.n	8004e5e <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	1c5a      	adds	r2, r3, #1
 8004e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e16:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e18:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004e1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e20:	d112      	bne.n	8004e48 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d016      	beq.n	8004e58 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2c:	3324      	adds	r3, #36	; 0x24
 8004e2e:	4618      	mov	r0, r3
 8004e30:	f001 f8e8 	bl	8006004 <xTaskRemoveFromEventList>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00e      	beq.n	8004e58 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00b      	beq.n	8004e58 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2201      	movs	r2, #1
 8004e44:	601a      	str	r2, [r3, #0]
 8004e46:	e007      	b.n	8004e58 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004e4c:	3301      	adds	r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	b25a      	sxtb	r2, r3
 8004e52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e5c:	e001      	b.n	8004e62 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	637b      	str	r3, [r7, #52]	; 0x34
 8004e62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e64:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f383 8811 	msr	BASEPRI, r3
}
 8004e6c:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004e70:	4618      	mov	r0, r3
 8004e72:	3738      	adds	r7, #56	; 0x38
 8004e74:	46bd      	mov	sp, r7
 8004e76:	bd80      	pop	{r7, pc}

08004e78 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b08c      	sub	sp, #48	; 0x30
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	60f8      	str	r0, [r7, #12]
 8004e80:	60b9      	str	r1, [r7, #8]
 8004e82:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e84:	2300      	movs	r3, #0
 8004e86:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <xQueueReceive+0x30>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	623b      	str	r3, [r7, #32]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d103      	bne.n	8004eb6 <xQueueReceive+0x3e>
 8004eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <xQueueReceive+0x42>
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e000      	b.n	8004ebc <xQueueReceive+0x44>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10a      	bne.n	8004ed6 <xQueueReceive+0x5e>
	__asm volatile
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	61fb      	str	r3, [r7, #28]
}
 8004ed2:	bf00      	nop
 8004ed4:	e7fe      	b.n	8004ed4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ed6:	f001 fa57 	bl	8006388 <xTaskGetSchedulerState>
 8004eda:	4603      	mov	r3, r0
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d102      	bne.n	8004ee6 <xQueueReceive+0x6e>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <xQueueReceive+0x72>
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e000      	b.n	8004eec <xQueueReceive+0x74>
 8004eea:	2300      	movs	r3, #0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10a      	bne.n	8004f06 <xQueueReceive+0x8e>
	__asm volatile
 8004ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef4:	f383 8811 	msr	BASEPRI, r3
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	f3bf 8f4f 	dsb	sy
 8004f00:	61bb      	str	r3, [r7, #24]
}
 8004f02:	bf00      	nop
 8004f04:	e7fe      	b.n	8004f04 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f06:	f002 f955 	bl	80071b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d01f      	beq.n	8004f56 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f16:	68b9      	ldr	r1, [r7, #8]
 8004f18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004f1a:	f000 fabe 	bl	800549a <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f20:	1e5a      	subs	r2, r3, #1
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f28:	691b      	ldr	r3, [r3, #16]
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d00f      	beq.n	8004f4e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f30:	3310      	adds	r3, #16
 8004f32:	4618      	mov	r0, r3
 8004f34:	f001 f866 	bl	8006004 <xTaskRemoveFromEventList>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d007      	beq.n	8004f4e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f3e:	4b3d      	ldr	r3, [pc, #244]	; (8005034 <xQueueReceive+0x1bc>)
 8004f40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f44:	601a      	str	r2, [r3, #0]
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f4e:	f002 f961 	bl	8007214 <vPortExitCritical>
				return pdPASS;
 8004f52:	2301      	movs	r3, #1
 8004f54:	e069      	b.n	800502a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d103      	bne.n	8004f64 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f5c:	f002 f95a 	bl	8007214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f60:	2300      	movs	r3, #0
 8004f62:	e062      	b.n	800502a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d106      	bne.n	8004f78 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f6a:	f107 0310 	add.w	r3, r7, #16
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 f8ac 	bl	80060cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f74:	2301      	movs	r3, #1
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f78:	f002 f94c 	bl	8007214 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f7c:	f000 fe18 	bl	8005bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f80:	f002 f918 	bl	80071b4 <vPortEnterCritical>
 8004f84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f8a:	b25b      	sxtb	r3, r3
 8004f8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f90:	d103      	bne.n	8004f9a <xQueueReceive+0x122>
 8004f92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa0:	b25b      	sxtb	r3, r3
 8004fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa6:	d103      	bne.n	8004fb0 <xQueueReceive+0x138>
 8004fa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004faa:	2200      	movs	r2, #0
 8004fac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fb0:	f002 f930 	bl	8007214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fb4:	1d3a      	adds	r2, r7, #4
 8004fb6:	f107 0310 	add.w	r3, r7, #16
 8004fba:	4611      	mov	r1, r2
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	f001 f89b 	bl	80060f8 <xTaskCheckForTimeOut>
 8004fc2:	4603      	mov	r3, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d123      	bne.n	8005010 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fc8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fca:	f000 fade 	bl	800558a <prvIsQueueEmpty>
 8004fce:	4603      	mov	r3, r0
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d017      	beq.n	8005004 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd6:	3324      	adds	r3, #36	; 0x24
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f000 ffc1 	bl	8005f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fe2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004fe4:	f000 fa7f 	bl	80054e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004fe8:	f000 fdf0 	bl	8005bcc <xTaskResumeAll>
 8004fec:	4603      	mov	r3, r0
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d189      	bne.n	8004f06 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004ff2:	4b10      	ldr	r3, [pc, #64]	; (8005034 <xQueueReceive+0x1bc>)
 8004ff4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	f3bf 8f4f 	dsb	sy
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	e780      	b.n	8004f06 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005004:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005006:	f000 fa6e 	bl	80054e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800500a:	f000 fddf 	bl	8005bcc <xTaskResumeAll>
 800500e:	e77a      	b.n	8004f06 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005010:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005012:	f000 fa68 	bl	80054e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005016:	f000 fdd9 	bl	8005bcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800501a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800501c:	f000 fab5 	bl	800558a <prvIsQueueEmpty>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	f43f af6f 	beq.w	8004f06 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005028:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800502a:	4618      	mov	r0, r3
 800502c:	3730      	adds	r7, #48	; 0x30
 800502e:	46bd      	mov	sp, r7
 8005030:	bd80      	pop	{r7, pc}
 8005032:	bf00      	nop
 8005034:	e000ed04 	.word	0xe000ed04

08005038 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b08e      	sub	sp, #56	; 0x38
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
 8005040:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005042:	2300      	movs	r3, #0
 8005044:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800504a:	2300      	movs	r3, #0
 800504c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800504e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005050:	2b00      	cmp	r3, #0
 8005052:	d10a      	bne.n	800506a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005058:	f383 8811 	msr	BASEPRI, r3
 800505c:	f3bf 8f6f 	isb	sy
 8005060:	f3bf 8f4f 	dsb	sy
 8005064:	623b      	str	r3, [r7, #32]
}
 8005066:	bf00      	nop
 8005068:	e7fe      	b.n	8005068 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800506a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800506c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506e:	2b00      	cmp	r3, #0
 8005070:	d00a      	beq.n	8005088 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8005072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005076:	f383 8811 	msr	BASEPRI, r3
 800507a:	f3bf 8f6f 	isb	sy
 800507e:	f3bf 8f4f 	dsb	sy
 8005082:	61fb      	str	r3, [r7, #28]
}
 8005084:	bf00      	nop
 8005086:	e7fe      	b.n	8005086 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005088:	f001 f97e 	bl	8006388 <xTaskGetSchedulerState>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	d102      	bne.n	8005098 <xQueueSemaphoreTake+0x60>
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d101      	bne.n	800509c <xQueueSemaphoreTake+0x64>
 8005098:	2301      	movs	r3, #1
 800509a:	e000      	b.n	800509e <xQueueSemaphoreTake+0x66>
 800509c:	2300      	movs	r3, #0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d10a      	bne.n	80050b8 <xQueueSemaphoreTake+0x80>
	__asm volatile
 80050a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a6:	f383 8811 	msr	BASEPRI, r3
 80050aa:	f3bf 8f6f 	isb	sy
 80050ae:	f3bf 8f4f 	dsb	sy
 80050b2:	61bb      	str	r3, [r7, #24]
}
 80050b4:	bf00      	nop
 80050b6:	e7fe      	b.n	80050b6 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80050b8:	f002 f87c 	bl	80071b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80050bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c0:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d024      	beq.n	8005112 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	1e5a      	subs	r2, r3, #1
 80050cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80050d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d104      	bne.n	80050e2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80050d8:	f001 facc 	bl	8006674 <pvTaskIncrementMutexHeldCount>
 80050dc:	4602      	mov	r2, r0
 80050de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80050e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d00f      	beq.n	800510a <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80050ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050ec:	3310      	adds	r3, #16
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 ff88 	bl	8006004 <xTaskRemoveFromEventList>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d007      	beq.n	800510a <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80050fa:	4b54      	ldr	r3, [pc, #336]	; (800524c <xQueueSemaphoreTake+0x214>)
 80050fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005100:	601a      	str	r2, [r3, #0]
 8005102:	f3bf 8f4f 	dsb	sy
 8005106:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800510a:	f002 f883 	bl	8007214 <vPortExitCritical>
				return pdPASS;
 800510e:	2301      	movs	r3, #1
 8005110:	e097      	b.n	8005242 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d111      	bne.n	800513c <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8005118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800511a:	2b00      	cmp	r3, #0
 800511c:	d00a      	beq.n	8005134 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800511e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005122:	f383 8811 	msr	BASEPRI, r3
 8005126:	f3bf 8f6f 	isb	sy
 800512a:	f3bf 8f4f 	dsb	sy
 800512e:	617b      	str	r3, [r7, #20]
}
 8005130:	bf00      	nop
 8005132:	e7fe      	b.n	8005132 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005134:	f002 f86e 	bl	8007214 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005138:	2300      	movs	r3, #0
 800513a:	e082      	b.n	8005242 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800513c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800513e:	2b00      	cmp	r3, #0
 8005140:	d106      	bne.n	8005150 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005142:	f107 030c 	add.w	r3, r7, #12
 8005146:	4618      	mov	r0, r3
 8005148:	f000 ffc0 	bl	80060cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800514c:	2301      	movs	r3, #1
 800514e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005150:	f002 f860 	bl	8007214 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005154:	f000 fd2c 	bl	8005bb0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005158:	f002 f82c 	bl	80071b4 <vPortEnterCritical>
 800515c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800515e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005162:	b25b      	sxtb	r3, r3
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d103      	bne.n	8005172 <xQueueSemaphoreTake+0x13a>
 800516a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800516c:	2200      	movs	r2, #0
 800516e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005172:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005174:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005178:	b25b      	sxtb	r3, r3
 800517a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517e:	d103      	bne.n	8005188 <xQueueSemaphoreTake+0x150>
 8005180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005182:	2200      	movs	r2, #0
 8005184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005188:	f002 f844 	bl	8007214 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800518c:	463a      	mov	r2, r7
 800518e:	f107 030c 	add.w	r3, r7, #12
 8005192:	4611      	mov	r1, r2
 8005194:	4618      	mov	r0, r3
 8005196:	f000 ffaf 	bl	80060f8 <xTaskCheckForTimeOut>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	d132      	bne.n	8005206 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80051a0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051a2:	f000 f9f2 	bl	800558a <prvIsQueueEmpty>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d026      	beq.n	80051fa <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80051ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d109      	bne.n	80051c8 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80051b4:	f001 fffe 	bl	80071b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80051b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 f901 	bl	80063c4 <xTaskPriorityInherit>
 80051c2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80051c4:	f002 f826 	bl	8007214 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80051c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ca:	3324      	adds	r3, #36	; 0x24
 80051cc:	683a      	ldr	r2, [r7, #0]
 80051ce:	4611      	mov	r1, r2
 80051d0:	4618      	mov	r0, r3
 80051d2:	f000 fec7 	bl	8005f64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80051d6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051d8:	f000 f985 	bl	80054e6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80051dc:	f000 fcf6 	bl	8005bcc <xTaskResumeAll>
 80051e0:	4603      	mov	r3, r0
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f47f af68 	bne.w	80050b8 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80051e8:	4b18      	ldr	r3, [pc, #96]	; (800524c <xQueueSemaphoreTake+0x214>)
 80051ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051ee:	601a      	str	r2, [r3, #0]
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	f3bf 8f6f 	isb	sy
 80051f8:	e75e      	b.n	80050b8 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80051fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80051fc:	f000 f973 	bl	80054e6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005200:	f000 fce4 	bl	8005bcc <xTaskResumeAll>
 8005204:	e758      	b.n	80050b8 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8005206:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005208:	f000 f96d 	bl	80054e6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800520c:	f000 fcde 	bl	8005bcc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005210:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005212:	f000 f9ba 	bl	800558a <prvIsQueueEmpty>
 8005216:	4603      	mov	r3, r0
 8005218:	2b00      	cmp	r3, #0
 800521a:	f43f af4d 	beq.w	80050b8 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800521e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005220:	2b00      	cmp	r3, #0
 8005222:	d00d      	beq.n	8005240 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005224:	f001 ffc6 	bl	80071b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8005228:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800522a:	f000 f8b4 	bl	8005396 <prvGetDisinheritPriorityAfterTimeout>
 800522e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005236:	4618      	mov	r0, r3
 8005238:	f001 f99a 	bl	8006570 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800523c:	f001 ffea 	bl	8007214 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005240:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005242:	4618      	mov	r0, r3
 8005244:	3738      	adds	r7, #56	; 0x38
 8005246:	46bd      	mov	sp, r7
 8005248:	bd80      	pop	{r7, pc}
 800524a:	bf00      	nop
 800524c:	e000ed04 	.word	0xe000ed04

08005250 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005250:	b580      	push	{r7, lr}
 8005252:	b08e      	sub	sp, #56	; 0x38
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005260:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005262:	2b00      	cmp	r3, #0
 8005264:	d10a      	bne.n	800527c <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005266:	f04f 0350 	mov.w	r3, #80	; 0x50
 800526a:	f383 8811 	msr	BASEPRI, r3
 800526e:	f3bf 8f6f 	isb	sy
 8005272:	f3bf 8f4f 	dsb	sy
 8005276:	623b      	str	r3, [r7, #32]
}
 8005278:	bf00      	nop
 800527a:	e7fe      	b.n	800527a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800527c:	68bb      	ldr	r3, [r7, #8]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d103      	bne.n	800528a <xQueueReceiveFromISR+0x3a>
 8005282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <xQueueReceiveFromISR+0x3e>
 800528a:	2301      	movs	r3, #1
 800528c:	e000      	b.n	8005290 <xQueueReceiveFromISR+0x40>
 800528e:	2300      	movs	r3, #0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d10a      	bne.n	80052aa <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005298:	f383 8811 	msr	BASEPRI, r3
 800529c:	f3bf 8f6f 	isb	sy
 80052a0:	f3bf 8f4f 	dsb	sy
 80052a4:	61fb      	str	r3, [r7, #28]
}
 80052a6:	bf00      	nop
 80052a8:	e7fe      	b.n	80052a8 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80052aa:	f002 f865 	bl	8007378 <vPortValidateInterruptPriority>
	__asm volatile
 80052ae:	f3ef 8211 	mrs	r2, BASEPRI
 80052b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b6:	f383 8811 	msr	BASEPRI, r3
 80052ba:	f3bf 8f6f 	isb	sy
 80052be:	f3bf 8f4f 	dsb	sy
 80052c2:	61ba      	str	r2, [r7, #24]
 80052c4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80052c6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80052c8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052ce:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d02f      	beq.n	8005336 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80052d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80052dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80052e4:	f000 f8d9 	bl	800549a <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	1e5a      	subs	r2, r3, #1
 80052ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052ee:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80052f0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80052f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f8:	d112      	bne.n	8005320 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052fc:	691b      	ldr	r3, [r3, #16]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d016      	beq.n	8005330 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	3310      	adds	r3, #16
 8005306:	4618      	mov	r0, r3
 8005308:	f000 fe7c 	bl	8006004 <xTaskRemoveFromEventList>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d00e      	beq.n	8005330 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00b      	beq.n	8005330 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	601a      	str	r2, [r3, #0]
 800531e:	e007      	b.n	8005330 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005320:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005324:	3301      	adds	r3, #1
 8005326:	b2db      	uxtb	r3, r3
 8005328:	b25a      	sxtb	r2, r3
 800532a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800532c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005330:	2301      	movs	r3, #1
 8005332:	637b      	str	r3, [r7, #52]	; 0x34
 8005334:	e001      	b.n	800533a <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8005336:	2300      	movs	r3, #0
 8005338:	637b      	str	r3, [r7, #52]	; 0x34
 800533a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800533c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	f383 8811 	msr	BASEPRI, r3
}
 8005344:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005346:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005348:	4618      	mov	r0, r3
 800534a:	3738      	adds	r7, #56	; 0x38
 800534c:	46bd      	mov	sp, r7
 800534e:	bd80      	pop	{r7, pc}

08005350 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b084      	sub	sp, #16
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10a      	bne.n	8005378 <vQueueDelete+0x28>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	60bb      	str	r3, [r7, #8]
}
 8005374:	bf00      	nop
 8005376:	e7fe      	b.n	8005376 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8005378:	68f8      	ldr	r0, [r7, #12]
 800537a:	f000 f95f 	bl	800563c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8005388:	68f8      	ldr	r0, [r7, #12]
 800538a:	f002 f901 	bl	8007590 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800538e:	bf00      	nop
 8005390:	3710      	adds	r7, #16
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}

08005396 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005396:	b480      	push	{r7}
 8005398:	b085      	sub	sp, #20
 800539a:	af00      	add	r7, sp, #0
 800539c:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d006      	beq.n	80053b4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80053b0:	60fb      	str	r3, [r7, #12]
 80053b2:	e001      	b.n	80053b8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80053b4:	2300      	movs	r3, #0
 80053b6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80053b8:	68fb      	ldr	r3, [r7, #12]
	}
 80053ba:	4618      	mov	r0, r3
 80053bc:	3714      	adds	r7, #20
 80053be:	46bd      	mov	sp, r7
 80053c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c4:	4770      	bx	lr

080053c6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80053c6:	b580      	push	{r7, lr}
 80053c8:	b086      	sub	sp, #24
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	60f8      	str	r0, [r7, #12]
 80053ce:	60b9      	str	r1, [r7, #8]
 80053d0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80053d2:	2300      	movs	r3, #0
 80053d4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053da:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10d      	bne.n	8005400 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d14d      	bne.n	8005488 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4618      	mov	r0, r3
 80053f2:	f001 f84f 	bl	8006494 <xTaskPriorityDisinherit>
 80053f6:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	609a      	str	r2, [r3, #8]
 80053fe:	e043      	b.n	8005488 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d119      	bne.n	800543a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	6858      	ldr	r0, [r3, #4]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	461a      	mov	r2, r3
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	f002 fbc4 	bl	8007b9e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	685a      	ldr	r2, [r3, #4]
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800541e:	441a      	add	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	429a      	cmp	r2, r3
 800542e:	d32b      	bcc.n	8005488 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681a      	ldr	r2, [r3, #0]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	605a      	str	r2, [r3, #4]
 8005438:	e026      	b.n	8005488 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	68d8      	ldr	r0, [r3, #12]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005442:	461a      	mov	r2, r3
 8005444:	68b9      	ldr	r1, [r7, #8]
 8005446:	f002 fbaa 	bl	8007b9e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	68da      	ldr	r2, [r3, #12]
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005452:	425b      	negs	r3, r3
 8005454:	441a      	add	r2, r3
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	68da      	ldr	r2, [r3, #12]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d207      	bcs.n	8005476 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	425b      	negs	r3, r3
 8005470:	441a      	add	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2b02      	cmp	r3, #2
 800547a:	d105      	bne.n	8005488 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800547c:	693b      	ldr	r3, [r7, #16]
 800547e:	2b00      	cmp	r3, #0
 8005480:	d002      	beq.n	8005488 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	3b01      	subs	r3, #1
 8005486:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1c5a      	adds	r2, r3, #1
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005490:	697b      	ldr	r3, [r7, #20]
}
 8005492:	4618      	mov	r0, r3
 8005494:	3718      	adds	r7, #24
 8005496:	46bd      	mov	sp, r7
 8005498:	bd80      	pop	{r7, pc}

0800549a <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800549a:	b580      	push	{r7, lr}
 800549c:	b082      	sub	sp, #8
 800549e:	af00      	add	r7, sp, #0
 80054a0:	6078      	str	r0, [r7, #4]
 80054a2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d018      	beq.n	80054de <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	68da      	ldr	r2, [r3, #12]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b4:	441a      	add	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d303      	bcc.n	80054ce <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681a      	ldr	r2, [r3, #0]
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68d9      	ldr	r1, [r3, #12]
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d6:	461a      	mov	r2, r3
 80054d8:	6838      	ldr	r0, [r7, #0]
 80054da:	f002 fb60 	bl	8007b9e <memcpy>
	}
}
 80054de:	bf00      	nop
 80054e0:	3708      	adds	r7, #8
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}

080054e6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80054e6:	b580      	push	{r7, lr}
 80054e8:	b084      	sub	sp, #16
 80054ea:	af00      	add	r7, sp, #0
 80054ec:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80054ee:	f001 fe61 	bl	80071b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054f8:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80054fa:	e011      	b.n	8005520 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005500:	2b00      	cmp	r3, #0
 8005502:	d012      	beq.n	800552a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	3324      	adds	r3, #36	; 0x24
 8005508:	4618      	mov	r0, r3
 800550a:	f000 fd7b 	bl	8006004 <xTaskRemoveFromEventList>
 800550e:	4603      	mov	r3, r0
 8005510:	2b00      	cmp	r3, #0
 8005512:	d001      	beq.n	8005518 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005514:	f000 fe52 	bl	80061bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	3b01      	subs	r3, #1
 800551c:	b2db      	uxtb	r3, r3
 800551e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005520:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005524:	2b00      	cmp	r3, #0
 8005526:	dce9      	bgt.n	80054fc <prvUnlockQueue+0x16>
 8005528:	e000      	b.n	800552c <prvUnlockQueue+0x46>
					break;
 800552a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	22ff      	movs	r2, #255	; 0xff
 8005530:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005534:	f001 fe6e 	bl	8007214 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005538:	f001 fe3c 	bl	80071b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005542:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005544:	e011      	b.n	800556a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	691b      	ldr	r3, [r3, #16]
 800554a:	2b00      	cmp	r3, #0
 800554c:	d012      	beq.n	8005574 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	3310      	adds	r3, #16
 8005552:	4618      	mov	r0, r3
 8005554:	f000 fd56 	bl	8006004 <xTaskRemoveFromEventList>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800555e:	f000 fe2d 	bl	80061bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005562:	7bbb      	ldrb	r3, [r7, #14]
 8005564:	3b01      	subs	r3, #1
 8005566:	b2db      	uxtb	r3, r3
 8005568:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800556a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800556e:	2b00      	cmp	r3, #0
 8005570:	dce9      	bgt.n	8005546 <prvUnlockQueue+0x60>
 8005572:	e000      	b.n	8005576 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005574:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	22ff      	movs	r2, #255	; 0xff
 800557a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800557e:	f001 fe49 	bl	8007214 <vPortExitCritical>
}
 8005582:	bf00      	nop
 8005584:	3710      	adds	r7, #16
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b084      	sub	sp, #16
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005592:	f001 fe0f 	bl	80071b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559a:	2b00      	cmp	r3, #0
 800559c:	d102      	bne.n	80055a4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800559e:	2301      	movs	r3, #1
 80055a0:	60fb      	str	r3, [r7, #12]
 80055a2:	e001      	b.n	80055a8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80055a4:	2300      	movs	r3, #0
 80055a6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055a8:	f001 fe34 	bl	8007214 <vPortExitCritical>

	return xReturn;
 80055ac:	68fb      	ldr	r3, [r7, #12]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	3710      	adds	r7, #16
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b084      	sub	sp, #16
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80055be:	f001 fdf9 	bl	80071b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ca:	429a      	cmp	r2, r3
 80055cc:	d102      	bne.n	80055d4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80055ce:	2301      	movs	r3, #1
 80055d0:	60fb      	str	r3, [r7, #12]
 80055d2:	e001      	b.n	80055d8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80055d4:	2300      	movs	r3, #0
 80055d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80055d8:	f001 fe1c 	bl	8007214 <vPortExitCritical>

	return xReturn;
 80055dc:	68fb      	ldr	r3, [r7, #12]
}
 80055de:	4618      	mov	r0, r3
 80055e0:	3710      	adds	r7, #16
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
	...

080055e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80055e8:	b480      	push	{r7}
 80055ea:	b085      	sub	sp, #20
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
 80055f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	e014      	b.n	8005622 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80055f8:	4a0f      	ldr	r2, [pc, #60]	; (8005638 <vQueueAddToRegistry+0x50>)
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d10b      	bne.n	800561c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005604:	490c      	ldr	r1, [pc, #48]	; (8005638 <vQueueAddToRegistry+0x50>)
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800560e:	4a0a      	ldr	r2, [pc, #40]	; (8005638 <vQueueAddToRegistry+0x50>)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	4413      	add	r3, r2
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800561a:	e006      	b.n	800562a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	3301      	adds	r3, #1
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2b07      	cmp	r3, #7
 8005626:	d9e7      	bls.n	80055f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005628:	bf00      	nop
 800562a:	bf00      	nop
 800562c:	3714      	adds	r7, #20
 800562e:	46bd      	mov	sp, r7
 8005630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	20000924 	.word	0x20000924

0800563c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800563c:	b480      	push	{r7}
 800563e:	b085      	sub	sp, #20
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005644:	2300      	movs	r3, #0
 8005646:	60fb      	str	r3, [r7, #12]
 8005648:	e016      	b.n	8005678 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800564a:	4a10      	ldr	r2, [pc, #64]	; (800568c <vQueueUnregisterQueue+0x50>)
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	00db      	lsls	r3, r3, #3
 8005650:	4413      	add	r3, r2
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	687a      	ldr	r2, [r7, #4]
 8005656:	429a      	cmp	r2, r3
 8005658:	d10b      	bne.n	8005672 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800565a:	4a0c      	ldr	r2, [pc, #48]	; (800568c <vQueueUnregisterQueue+0x50>)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2100      	movs	r1, #0
 8005660:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005664:	4a09      	ldr	r2, [pc, #36]	; (800568c <vQueueUnregisterQueue+0x50>)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	00db      	lsls	r3, r3, #3
 800566a:	4413      	add	r3, r2
 800566c:	2200      	movs	r2, #0
 800566e:	605a      	str	r2, [r3, #4]
				break;
 8005670:	e006      	b.n	8005680 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	3301      	adds	r3, #1
 8005676:	60fb      	str	r3, [r7, #12]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	2b07      	cmp	r3, #7
 800567c:	d9e5      	bls.n	800564a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800567e:	bf00      	nop
 8005680:	bf00      	nop
 8005682:	3714      	adds	r7, #20
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	20000924 	.word	0x20000924

08005690 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80056a0:	f001 fd88 	bl	80071b4 <vPortEnterCritical>
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056aa:	b25b      	sxtb	r3, r3
 80056ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056b0:	d103      	bne.n	80056ba <vQueueWaitForMessageRestricted+0x2a>
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	2200      	movs	r2, #0
 80056b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056c0:	b25b      	sxtb	r3, r3
 80056c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056c6:	d103      	bne.n	80056d0 <vQueueWaitForMessageRestricted+0x40>
 80056c8:	697b      	ldr	r3, [r7, #20]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056d0:	f001 fda0 	bl	8007214 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d106      	bne.n	80056ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	3324      	adds	r3, #36	; 0x24
 80056e0:	687a      	ldr	r2, [r7, #4]
 80056e2:	68b9      	ldr	r1, [r7, #8]
 80056e4:	4618      	mov	r0, r3
 80056e6:	f000 fc61 	bl	8005fac <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80056ea:	6978      	ldr	r0, [r7, #20]
 80056ec:	f7ff fefb 	bl	80054e6 <prvUnlockQueue>
	}
 80056f0:	bf00      	nop
 80056f2:	3718      	adds	r7, #24
 80056f4:	46bd      	mov	sp, r7
 80056f6:	bd80      	pop	{r7, pc}

080056f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08e      	sub	sp, #56	; 0x38
 80056fc:	af04      	add	r7, sp, #16
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	607a      	str	r2, [r7, #4]
 8005704:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10a      	bne.n	8005722 <xTaskCreateStatic+0x2a>
	__asm volatile
 800570c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005710:	f383 8811 	msr	BASEPRI, r3
 8005714:	f3bf 8f6f 	isb	sy
 8005718:	f3bf 8f4f 	dsb	sy
 800571c:	623b      	str	r3, [r7, #32]
}
 800571e:	bf00      	nop
 8005720:	e7fe      	b.n	8005720 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <xTaskCreateStatic+0x46>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	61fb      	str	r3, [r7, #28]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800573e:	23a8      	movs	r3, #168	; 0xa8
 8005740:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005742:	693b      	ldr	r3, [r7, #16]
 8005744:	2ba8      	cmp	r3, #168	; 0xa8
 8005746:	d00a      	beq.n	800575e <xTaskCreateStatic+0x66>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	61bb      	str	r3, [r7, #24]
}
 800575a:	bf00      	nop
 800575c:	e7fe      	b.n	800575c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800575e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005760:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005762:	2b00      	cmp	r3, #0
 8005764:	d01e      	beq.n	80057a4 <xTaskCreateStatic+0xac>
 8005766:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005768:	2b00      	cmp	r3, #0
 800576a:	d01b      	beq.n	80057a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005772:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005774:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	2202      	movs	r2, #2
 800577a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800577e:	2300      	movs	r3, #0
 8005780:	9303      	str	r3, [sp, #12]
 8005782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005784:	9302      	str	r3, [sp, #8]
 8005786:	f107 0314 	add.w	r3, r7, #20
 800578a:	9301      	str	r3, [sp, #4]
 800578c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578e:	9300      	str	r3, [sp, #0]
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	68b9      	ldr	r1, [r7, #8]
 8005796:	68f8      	ldr	r0, [r7, #12]
 8005798:	f000 f850 	bl	800583c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800579c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800579e:	f000 f8f3 	bl	8005988 <prvAddNewTaskToReadyList>
 80057a2:	e001      	b.n	80057a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80057a8:	697b      	ldr	r3, [r7, #20]
	}
 80057aa:	4618      	mov	r0, r3
 80057ac:	3728      	adds	r7, #40	; 0x28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}

080057b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80057b2:	b580      	push	{r7, lr}
 80057b4:	b08c      	sub	sp, #48	; 0x30
 80057b6:	af04      	add	r7, sp, #16
 80057b8:	60f8      	str	r0, [r7, #12]
 80057ba:	60b9      	str	r1, [r7, #8]
 80057bc:	603b      	str	r3, [r7, #0]
 80057be:	4613      	mov	r3, r2
 80057c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80057c2:	88fb      	ldrh	r3, [r7, #6]
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 fe16 	bl	80073f8 <pvPortMalloc>
 80057cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d00e      	beq.n	80057f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80057d4:	20a8      	movs	r0, #168	; 0xa8
 80057d6:	f001 fe0f 	bl	80073f8 <pvPortMalloc>
 80057da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d003      	beq.n	80057ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	631a      	str	r2, [r3, #48]	; 0x30
 80057e8:	e005      	b.n	80057f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80057ea:	6978      	ldr	r0, [r7, #20]
 80057ec:	f001 fed0 	bl	8007590 <vPortFree>
 80057f0:	e001      	b.n	80057f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80057f2:	2300      	movs	r3, #0
 80057f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d017      	beq.n	800582c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2200      	movs	r2, #0
 8005800:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005804:	88fa      	ldrh	r2, [r7, #6]
 8005806:	2300      	movs	r3, #0
 8005808:	9303      	str	r3, [sp, #12]
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	9302      	str	r3, [sp, #8]
 800580e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005810:	9301      	str	r3, [sp, #4]
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	9300      	str	r3, [sp, #0]
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	68b9      	ldr	r1, [r7, #8]
 800581a:	68f8      	ldr	r0, [r7, #12]
 800581c:	f000 f80e 	bl	800583c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005820:	69f8      	ldr	r0, [r7, #28]
 8005822:	f000 f8b1 	bl	8005988 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005826:	2301      	movs	r3, #1
 8005828:	61bb      	str	r3, [r7, #24]
 800582a:	e002      	b.n	8005832 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800582c:	f04f 33ff 	mov.w	r3, #4294967295
 8005830:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005832:	69bb      	ldr	r3, [r7, #24]
	}
 8005834:	4618      	mov	r0, r3
 8005836:	3720      	adds	r7, #32
 8005838:	46bd      	mov	sp, r7
 800583a:	bd80      	pop	{r7, pc}

0800583c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800583c:	b580      	push	{r7, lr}
 800583e:	b088      	sub	sp, #32
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	607a      	str	r2, [r7, #4]
 8005848:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800584a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	009b      	lsls	r3, r3, #2
 8005852:	461a      	mov	r2, r3
 8005854:	21a5      	movs	r1, #165	; 0xa5
 8005856:	f002 f8d0 	bl	80079fa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005864:	3b01      	subs	r3, #1
 8005866:	009b      	lsls	r3, r3, #2
 8005868:	4413      	add	r3, r2
 800586a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f023 0307 	bic.w	r3, r3, #7
 8005872:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f003 0307 	and.w	r3, r3, #7
 800587a:	2b00      	cmp	r3, #0
 800587c:	d00a      	beq.n	8005894 <prvInitialiseNewTask+0x58>
	__asm volatile
 800587e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005882:	f383 8811 	msr	BASEPRI, r3
 8005886:	f3bf 8f6f 	isb	sy
 800588a:	f3bf 8f4f 	dsb	sy
 800588e:	617b      	str	r3, [r7, #20]
}
 8005890:	bf00      	nop
 8005892:	e7fe      	b.n	8005892 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d01f      	beq.n	80058da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800589a:	2300      	movs	r3, #0
 800589c:	61fb      	str	r3, [r7, #28]
 800589e:	e012      	b.n	80058c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80058a0:	68ba      	ldr	r2, [r7, #8]
 80058a2:	69fb      	ldr	r3, [r7, #28]
 80058a4:	4413      	add	r3, r2
 80058a6:	7819      	ldrb	r1, [r3, #0]
 80058a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	4413      	add	r3, r2
 80058ae:	3334      	adds	r3, #52	; 0x34
 80058b0:	460a      	mov	r2, r1
 80058b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80058b4:	68ba      	ldr	r2, [r7, #8]
 80058b6:	69fb      	ldr	r3, [r7, #28]
 80058b8:	4413      	add	r3, r2
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d006      	beq.n	80058ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	3301      	adds	r3, #1
 80058c4:	61fb      	str	r3, [r7, #28]
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	2b0f      	cmp	r3, #15
 80058ca:	d9e9      	bls.n	80058a0 <prvInitialiseNewTask+0x64>
 80058cc:	e000      	b.n	80058d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80058ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	2200      	movs	r2, #0
 80058d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80058d8:	e003      	b.n	80058e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	2200      	movs	r2, #0
 80058de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	2b37      	cmp	r3, #55	; 0x37
 80058e6:	d901      	bls.n	80058ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80058e8:	2337      	movs	r3, #55	; 0x37
 80058ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80058ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80058f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80058f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058fa:	2200      	movs	r2, #0
 80058fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80058fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005900:	3304      	adds	r3, #4
 8005902:	4618      	mov	r0, r3
 8005904:	f7fe fe56 	bl	80045b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800590a:	3318      	adds	r3, #24
 800590c:	4618      	mov	r0, r3
 800590e:	f7fe fe51 	bl	80045b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005916:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800591e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005920:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005926:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005928:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592a:	2200      	movs	r2, #0
 800592c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005930:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005932:	2200      	movs	r2, #0
 8005934:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	3354      	adds	r3, #84	; 0x54
 800593c:	224c      	movs	r2, #76	; 0x4c
 800593e:	2100      	movs	r1, #0
 8005940:	4618      	mov	r0, r3
 8005942:	f002 f85a 	bl	80079fa <memset>
 8005946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005948:	4a0c      	ldr	r2, [pc, #48]	; (800597c <prvInitialiseNewTask+0x140>)
 800594a:	659a      	str	r2, [r3, #88]	; 0x58
 800594c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594e:	4a0c      	ldr	r2, [pc, #48]	; (8005980 <prvInitialiseNewTask+0x144>)
 8005950:	65da      	str	r2, [r3, #92]	; 0x5c
 8005952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005954:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <prvInitialiseNewTask+0x148>)
 8005956:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005958:	683a      	ldr	r2, [r7, #0]
 800595a:	68f9      	ldr	r1, [r7, #12]
 800595c:	69b8      	ldr	r0, [r7, #24]
 800595e:	f001 faf9 	bl	8006f54 <pxPortInitialiseStack>
 8005962:	4602      	mov	r2, r0
 8005964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005966:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005968:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800596a:	2b00      	cmp	r3, #0
 800596c:	d002      	beq.n	8005974 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800596e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005972:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005974:	bf00      	nop
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}
 800597c:	20004a50 	.word	0x20004a50
 8005980:	20004ab8 	.word	0x20004ab8
 8005984:	20004b20 	.word	0x20004b20

08005988 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005990:	f001 fc10 	bl	80071b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005994:	4b2d      	ldr	r3, [pc, #180]	; (8005a4c <prvAddNewTaskToReadyList+0xc4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	3301      	adds	r3, #1
 800599a:	4a2c      	ldr	r2, [pc, #176]	; (8005a4c <prvAddNewTaskToReadyList+0xc4>)
 800599c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800599e:	4b2c      	ldr	r3, [pc, #176]	; (8005a50 <prvAddNewTaskToReadyList+0xc8>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d109      	bne.n	80059ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80059a6:	4a2a      	ldr	r2, [pc, #168]	; (8005a50 <prvAddNewTaskToReadyList+0xc8>)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80059ac:	4b27      	ldr	r3, [pc, #156]	; (8005a4c <prvAddNewTaskToReadyList+0xc4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	2b01      	cmp	r3, #1
 80059b2:	d110      	bne.n	80059d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80059b4:	f000 fc26 	bl	8006204 <prvInitialiseTaskLists>
 80059b8:	e00d      	b.n	80059d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80059ba:	4b26      	ldr	r3, [pc, #152]	; (8005a54 <prvAddNewTaskToReadyList+0xcc>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d109      	bne.n	80059d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80059c2:	4b23      	ldr	r3, [pc, #140]	; (8005a50 <prvAddNewTaskToReadyList+0xc8>)
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	429a      	cmp	r2, r3
 80059ce:	d802      	bhi.n	80059d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80059d0:	4a1f      	ldr	r2, [pc, #124]	; (8005a50 <prvAddNewTaskToReadyList+0xc8>)
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80059d6:	4b20      	ldr	r3, [pc, #128]	; (8005a58 <prvAddNewTaskToReadyList+0xd0>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3301      	adds	r3, #1
 80059dc:	4a1e      	ldr	r2, [pc, #120]	; (8005a58 <prvAddNewTaskToReadyList+0xd0>)
 80059de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80059e0:	4b1d      	ldr	r3, [pc, #116]	; (8005a58 <prvAddNewTaskToReadyList+0xd0>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059ec:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <prvAddNewTaskToReadyList+0xd4>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	429a      	cmp	r2, r3
 80059f2:	d903      	bls.n	80059fc <prvAddNewTaskToReadyList+0x74>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059f8:	4a18      	ldr	r2, [pc, #96]	; (8005a5c <prvAddNewTaskToReadyList+0xd4>)
 80059fa:	6013      	str	r3, [r2, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a00:	4613      	mov	r3, r2
 8005a02:	009b      	lsls	r3, r3, #2
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <prvAddNewTaskToReadyList+0xd8>)
 8005a0a:	441a      	add	r2, r3
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	3304      	adds	r3, #4
 8005a10:	4619      	mov	r1, r3
 8005a12:	4610      	mov	r0, r2
 8005a14:	f7fe fddb 	bl	80045ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005a18:	f001 fbfc 	bl	8007214 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005a1c:	4b0d      	ldr	r3, [pc, #52]	; (8005a54 <prvAddNewTaskToReadyList+0xcc>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d00e      	beq.n	8005a42 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005a24:	4b0a      	ldr	r3, [pc, #40]	; (8005a50 <prvAddNewTaskToReadyList+0xc8>)
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d207      	bcs.n	8005a42 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005a32:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <prvAddNewTaskToReadyList+0xdc>)
 8005a34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005a38:	601a      	str	r2, [r3, #0]
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a42:	bf00      	nop
 8005a44:	3708      	adds	r7, #8
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
 8005a4a:	bf00      	nop
 8005a4c:	20000e38 	.word	0x20000e38
 8005a50:	20000964 	.word	0x20000964
 8005a54:	20000e44 	.word	0x20000e44
 8005a58:	20000e54 	.word	0x20000e54
 8005a5c:	20000e40 	.word	0x20000e40
 8005a60:	20000968 	.word	0x20000968
 8005a64:	e000ed04 	.word	0xe000ed04

08005a68 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d017      	beq.n	8005aaa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005a7a:	4b13      	ldr	r3, [pc, #76]	; (8005ac8 <vTaskDelay+0x60>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d00a      	beq.n	8005a98 <vTaskDelay+0x30>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	60bb      	str	r3, [r7, #8]
}
 8005a94:	bf00      	nop
 8005a96:	e7fe      	b.n	8005a96 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005a98:	f000 f88a 	bl	8005bb0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005a9c:	2100      	movs	r1, #0
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 fdfc 	bl	800669c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005aa4:	f000 f892 	bl	8005bcc <xTaskResumeAll>
 8005aa8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d107      	bne.n	8005ac0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ab0:	4b06      	ldr	r3, [pc, #24]	; (8005acc <vTaskDelay+0x64>)
 8005ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ab6:	601a      	str	r2, [r3, #0]
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ac0:	bf00      	nop
 8005ac2:	3710      	adds	r7, #16
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	20000e60 	.word	0x20000e60
 8005acc:	e000ed04 	.word	0xe000ed04

08005ad0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b08a      	sub	sp, #40	; 0x28
 8005ad4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005ada:	2300      	movs	r3, #0
 8005adc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ade:	463a      	mov	r2, r7
 8005ae0:	1d39      	adds	r1, r7, #4
 8005ae2:	f107 0308 	add.w	r3, r7, #8
 8005ae6:	4618      	mov	r0, r3
 8005ae8:	f7fe fd10 	bl	800450c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005aec:	6839      	ldr	r1, [r7, #0]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	68ba      	ldr	r2, [r7, #8]
 8005af2:	9202      	str	r2, [sp, #8]
 8005af4:	9301      	str	r3, [sp, #4]
 8005af6:	2300      	movs	r3, #0
 8005af8:	9300      	str	r3, [sp, #0]
 8005afa:	2300      	movs	r3, #0
 8005afc:	460a      	mov	r2, r1
 8005afe:	4924      	ldr	r1, [pc, #144]	; (8005b90 <vTaskStartScheduler+0xc0>)
 8005b00:	4824      	ldr	r0, [pc, #144]	; (8005b94 <vTaskStartScheduler+0xc4>)
 8005b02:	f7ff fdf9 	bl	80056f8 <xTaskCreateStatic>
 8005b06:	4603      	mov	r3, r0
 8005b08:	4a23      	ldr	r2, [pc, #140]	; (8005b98 <vTaskStartScheduler+0xc8>)
 8005b0a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005b0c:	4b22      	ldr	r3, [pc, #136]	; (8005b98 <vTaskStartScheduler+0xc8>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d002      	beq.n	8005b1a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005b14:	2301      	movs	r3, #1
 8005b16:	617b      	str	r3, [r7, #20]
 8005b18:	e001      	b.n	8005b1e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005b1a:	2300      	movs	r3, #0
 8005b1c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005b1e:	697b      	ldr	r3, [r7, #20]
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d102      	bne.n	8005b2a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005b24:	f000 fe0e 	bl	8006744 <xTimerCreateTimerTask>
 8005b28:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d11b      	bne.n	8005b68 <vTaskStartScheduler+0x98>
	__asm volatile
 8005b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b34:	f383 8811 	msr	BASEPRI, r3
 8005b38:	f3bf 8f6f 	isb	sy
 8005b3c:	f3bf 8f4f 	dsb	sy
 8005b40:	613b      	str	r3, [r7, #16]
}
 8005b42:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005b44:	4b15      	ldr	r3, [pc, #84]	; (8005b9c <vTaskStartScheduler+0xcc>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	3354      	adds	r3, #84	; 0x54
 8005b4a:	4a15      	ldr	r2, [pc, #84]	; (8005ba0 <vTaskStartScheduler+0xd0>)
 8005b4c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005b4e:	4b15      	ldr	r3, [pc, #84]	; (8005ba4 <vTaskStartScheduler+0xd4>)
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295
 8005b54:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005b56:	4b14      	ldr	r3, [pc, #80]	; (8005ba8 <vTaskStartScheduler+0xd8>)
 8005b58:	2201      	movs	r2, #1
 8005b5a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005b5c:	4b13      	ldr	r3, [pc, #76]	; (8005bac <vTaskStartScheduler+0xdc>)
 8005b5e:	2200      	movs	r2, #0
 8005b60:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005b62:	f001 fa85 	bl	8007070 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005b66:	e00e      	b.n	8005b86 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b6e:	d10a      	bne.n	8005b86 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b74:	f383 8811 	msr	BASEPRI, r3
 8005b78:	f3bf 8f6f 	isb	sy
 8005b7c:	f3bf 8f4f 	dsb	sy
 8005b80:	60fb      	str	r3, [r7, #12]
}
 8005b82:	bf00      	nop
 8005b84:	e7fe      	b.n	8005b84 <vTaskStartScheduler+0xb4>
}
 8005b86:	bf00      	nop
 8005b88:	3718      	adds	r7, #24
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	bd80      	pop	{r7, pc}
 8005b8e:	bf00      	nop
 8005b90:	080087c0 	.word	0x080087c0
 8005b94:	080061d5 	.word	0x080061d5
 8005b98:	20000e5c 	.word	0x20000e5c
 8005b9c:	20000964 	.word	0x20000964
 8005ba0:	20000068 	.word	0x20000068
 8005ba4:	20000e58 	.word	0x20000e58
 8005ba8:	20000e44 	.word	0x20000e44
 8005bac:	20000e3c 	.word	0x20000e3c

08005bb0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005bb0:	b480      	push	{r7}
 8005bb2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005bb4:	4b04      	ldr	r3, [pc, #16]	; (8005bc8 <vTaskSuspendAll+0x18>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	4a03      	ldr	r2, [pc, #12]	; (8005bc8 <vTaskSuspendAll+0x18>)
 8005bbc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005bbe:	bf00      	nop
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr
 8005bc8:	20000e60 	.word	0x20000e60

08005bcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b084      	sub	sp, #16
 8005bd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005bda:	4b42      	ldr	r3, [pc, #264]	; (8005ce4 <xTaskResumeAll+0x118>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10a      	bne.n	8005bf8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be6:	f383 8811 	msr	BASEPRI, r3
 8005bea:	f3bf 8f6f 	isb	sy
 8005bee:	f3bf 8f4f 	dsb	sy
 8005bf2:	603b      	str	r3, [r7, #0]
}
 8005bf4:	bf00      	nop
 8005bf6:	e7fe      	b.n	8005bf6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005bf8:	f001 fadc 	bl	80071b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005bfc:	4b39      	ldr	r3, [pc, #228]	; (8005ce4 <xTaskResumeAll+0x118>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	3b01      	subs	r3, #1
 8005c02:	4a38      	ldr	r2, [pc, #224]	; (8005ce4 <xTaskResumeAll+0x118>)
 8005c04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c06:	4b37      	ldr	r3, [pc, #220]	; (8005ce4 <xTaskResumeAll+0x118>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d162      	bne.n	8005cd4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005c0e:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <xTaskResumeAll+0x11c>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d05e      	beq.n	8005cd4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c16:	e02f      	b.n	8005c78 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c18:	4b34      	ldr	r3, [pc, #208]	; (8005cec <xTaskResumeAll+0x120>)
 8005c1a:	68db      	ldr	r3, [r3, #12]
 8005c1c:	68db      	ldr	r3, [r3, #12]
 8005c1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3318      	adds	r3, #24
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe fd2f 	bl	8004688 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	3304      	adds	r3, #4
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f7fe fd2a 	bl	8004688 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c38:	4b2d      	ldr	r3, [pc, #180]	; (8005cf0 <xTaskResumeAll+0x124>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	429a      	cmp	r2, r3
 8005c3e:	d903      	bls.n	8005c48 <xTaskResumeAll+0x7c>
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c44:	4a2a      	ldr	r2, [pc, #168]	; (8005cf0 <xTaskResumeAll+0x124>)
 8005c46:	6013      	str	r3, [r2, #0]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c4c:	4613      	mov	r3, r2
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	009b      	lsls	r3, r3, #2
 8005c54:	4a27      	ldr	r2, [pc, #156]	; (8005cf4 <xTaskResumeAll+0x128>)
 8005c56:	441a      	add	r2, r3
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	3304      	adds	r3, #4
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	4610      	mov	r0, r2
 8005c60:	f7fe fcb5 	bl	80045ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c68:	4b23      	ldr	r3, [pc, #140]	; (8005cf8 <xTaskResumeAll+0x12c>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d302      	bcc.n	8005c78 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005c72:	4b22      	ldr	r3, [pc, #136]	; (8005cfc <xTaskResumeAll+0x130>)
 8005c74:	2201      	movs	r2, #1
 8005c76:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005c78:	4b1c      	ldr	r3, [pc, #112]	; (8005cec <xTaskResumeAll+0x120>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d1cb      	bne.n	8005c18 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005c86:	f000 fb5f 	bl	8006348 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005c8a:	4b1d      	ldr	r3, [pc, #116]	; (8005d00 <xTaskResumeAll+0x134>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d010      	beq.n	8005cb8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005c96:	f000 f847 	bl	8005d28 <xTaskIncrementTick>
 8005c9a:	4603      	mov	r3, r0
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d002      	beq.n	8005ca6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005ca0:	4b16      	ldr	r3, [pc, #88]	; (8005cfc <xTaskResumeAll+0x130>)
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	3b01      	subs	r3, #1
 8005caa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d1f1      	bne.n	8005c96 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005cb2:	4b13      	ldr	r3, [pc, #76]	; (8005d00 <xTaskResumeAll+0x134>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005cb8:	4b10      	ldr	r3, [pc, #64]	; (8005cfc <xTaskResumeAll+0x130>)
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d009      	beq.n	8005cd4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005cc0:	2301      	movs	r3, #1
 8005cc2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <xTaskResumeAll+0x138>)
 8005cc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cca:	601a      	str	r2, [r3, #0]
 8005ccc:	f3bf 8f4f 	dsb	sy
 8005cd0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005cd4:	f001 fa9e 	bl	8007214 <vPortExitCritical>

	return xAlreadyYielded;
 8005cd8:	68bb      	ldr	r3, [r7, #8]
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	20000e60 	.word	0x20000e60
 8005ce8:	20000e38 	.word	0x20000e38
 8005cec:	20000df8 	.word	0x20000df8
 8005cf0:	20000e40 	.word	0x20000e40
 8005cf4:	20000968 	.word	0x20000968
 8005cf8:	20000964 	.word	0x20000964
 8005cfc:	20000e4c 	.word	0x20000e4c
 8005d00:	20000e48 	.word	0x20000e48
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005d0e:	4b05      	ldr	r3, [pc, #20]	; (8005d24 <xTaskGetTickCount+0x1c>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005d14:	687b      	ldr	r3, [r7, #4]
}
 8005d16:	4618      	mov	r0, r3
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	20000e3c 	.word	0x20000e3c

08005d28 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005d28:	b580      	push	{r7, lr}
 8005d2a:	b086      	sub	sp, #24
 8005d2c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005d32:	4b4f      	ldr	r3, [pc, #316]	; (8005e70 <xTaskIncrementTick+0x148>)
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	f040 808f 	bne.w	8005e5a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005d3c:	4b4d      	ldr	r3, [pc, #308]	; (8005e74 <xTaskIncrementTick+0x14c>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	3301      	adds	r3, #1
 8005d42:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005d44:	4a4b      	ldr	r2, [pc, #300]	; (8005e74 <xTaskIncrementTick+0x14c>)
 8005d46:	693b      	ldr	r3, [r7, #16]
 8005d48:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005d4a:	693b      	ldr	r3, [r7, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d120      	bne.n	8005d92 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005d50:	4b49      	ldr	r3, [pc, #292]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d00a      	beq.n	8005d70 <xTaskIncrementTick+0x48>
	__asm volatile
 8005d5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5e:	f383 8811 	msr	BASEPRI, r3
 8005d62:	f3bf 8f6f 	isb	sy
 8005d66:	f3bf 8f4f 	dsb	sy
 8005d6a:	603b      	str	r3, [r7, #0]
}
 8005d6c:	bf00      	nop
 8005d6e:	e7fe      	b.n	8005d6e <xTaskIncrementTick+0x46>
 8005d70:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	60fb      	str	r3, [r7, #12]
 8005d76:	4b41      	ldr	r3, [pc, #260]	; (8005e7c <xTaskIncrementTick+0x154>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	4a3f      	ldr	r2, [pc, #252]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d7c:	6013      	str	r3, [r2, #0]
 8005d7e:	4a3f      	ldr	r2, [pc, #252]	; (8005e7c <xTaskIncrementTick+0x154>)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6013      	str	r3, [r2, #0]
 8005d84:	4b3e      	ldr	r3, [pc, #248]	; (8005e80 <xTaskIncrementTick+0x158>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	3301      	adds	r3, #1
 8005d8a:	4a3d      	ldr	r2, [pc, #244]	; (8005e80 <xTaskIncrementTick+0x158>)
 8005d8c:	6013      	str	r3, [r2, #0]
 8005d8e:	f000 fadb 	bl	8006348 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005d92:	4b3c      	ldr	r3, [pc, #240]	; (8005e84 <xTaskIncrementTick+0x15c>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d349      	bcc.n	8005e30 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005d9c:	4b36      	ldr	r3, [pc, #216]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d104      	bne.n	8005db0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da6:	4b37      	ldr	r3, [pc, #220]	; (8005e84 <xTaskIncrementTick+0x15c>)
 8005da8:	f04f 32ff 	mov.w	r2, #4294967295
 8005dac:	601a      	str	r2, [r3, #0]
					break;
 8005dae:	e03f      	b.n	8005e30 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005db0:	4b31      	ldr	r3, [pc, #196]	; (8005e78 <xTaskIncrementTick+0x150>)
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	68db      	ldr	r3, [r3, #12]
 8005db8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005dc0:	693a      	ldr	r2, [r7, #16]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	429a      	cmp	r2, r3
 8005dc6:	d203      	bcs.n	8005dd0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005dc8:	4a2e      	ldr	r2, [pc, #184]	; (8005e84 <xTaskIncrementTick+0x15c>)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005dce:	e02f      	b.n	8005e30 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	3304      	adds	r3, #4
 8005dd4:	4618      	mov	r0, r3
 8005dd6:	f7fe fc57 	bl	8004688 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005dda:	68bb      	ldr	r3, [r7, #8]
 8005ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d004      	beq.n	8005dec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	3318      	adds	r3, #24
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fe fc4e 	bl	8004688 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df0:	4b25      	ldr	r3, [pc, #148]	; (8005e88 <xTaskIncrementTick+0x160>)
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d903      	bls.n	8005e00 <xTaskIncrementTick+0xd8>
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dfc:	4a22      	ldr	r2, [pc, #136]	; (8005e88 <xTaskIncrementTick+0x160>)
 8005dfe:	6013      	str	r3, [r2, #0]
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009b      	lsls	r3, r3, #2
 8005e0c:	4a1f      	ldr	r2, [pc, #124]	; (8005e8c <xTaskIncrementTick+0x164>)
 8005e0e:	441a      	add	r2, r3
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	3304      	adds	r3, #4
 8005e14:	4619      	mov	r1, r3
 8005e16:	4610      	mov	r0, r2
 8005e18:	f7fe fbd9 	bl	80045ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e20:	4b1b      	ldr	r3, [pc, #108]	; (8005e90 <xTaskIncrementTick+0x168>)
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e26:	429a      	cmp	r2, r3
 8005e28:	d3b8      	bcc.n	8005d9c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e2e:	e7b5      	b.n	8005d9c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005e30:	4b17      	ldr	r3, [pc, #92]	; (8005e90 <xTaskIncrementTick+0x168>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e36:	4915      	ldr	r1, [pc, #84]	; (8005e8c <xTaskIncrementTick+0x164>)
 8005e38:	4613      	mov	r3, r2
 8005e3a:	009b      	lsls	r3, r3, #2
 8005e3c:	4413      	add	r3, r2
 8005e3e:	009b      	lsls	r3, r3, #2
 8005e40:	440b      	add	r3, r1
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2b01      	cmp	r3, #1
 8005e46:	d901      	bls.n	8005e4c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005e48:	2301      	movs	r3, #1
 8005e4a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005e4c:	4b11      	ldr	r3, [pc, #68]	; (8005e94 <xTaskIncrementTick+0x16c>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d007      	beq.n	8005e64 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005e54:	2301      	movs	r3, #1
 8005e56:	617b      	str	r3, [r7, #20]
 8005e58:	e004      	b.n	8005e64 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005e5a:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <xTaskIncrementTick+0x170>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	3301      	adds	r3, #1
 8005e60:	4a0d      	ldr	r2, [pc, #52]	; (8005e98 <xTaskIncrementTick+0x170>)
 8005e62:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005e64:	697b      	ldr	r3, [r7, #20]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3718      	adds	r7, #24
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20000e60 	.word	0x20000e60
 8005e74:	20000e3c 	.word	0x20000e3c
 8005e78:	20000df0 	.word	0x20000df0
 8005e7c:	20000df4 	.word	0x20000df4
 8005e80:	20000e50 	.word	0x20000e50
 8005e84:	20000e58 	.word	0x20000e58
 8005e88:	20000e40 	.word	0x20000e40
 8005e8c:	20000968 	.word	0x20000968
 8005e90:	20000964 	.word	0x20000964
 8005e94:	20000e4c 	.word	0x20000e4c
 8005e98:	20000e48 	.word	0x20000e48

08005e9c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005ea2:	4b2a      	ldr	r3, [pc, #168]	; (8005f4c <vTaskSwitchContext+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d003      	beq.n	8005eb2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005eaa:	4b29      	ldr	r3, [pc, #164]	; (8005f50 <vTaskSwitchContext+0xb4>)
 8005eac:	2201      	movs	r2, #1
 8005eae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005eb0:	e046      	b.n	8005f40 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005eb2:	4b27      	ldr	r3, [pc, #156]	; (8005f50 <vTaskSwitchContext+0xb4>)
 8005eb4:	2200      	movs	r2, #0
 8005eb6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005eb8:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <vTaskSwitchContext+0xb8>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60fb      	str	r3, [r7, #12]
 8005ebe:	e010      	b.n	8005ee2 <vTaskSwitchContext+0x46>
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <vTaskSwitchContext+0x40>
	__asm volatile
 8005ec6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eca:	f383 8811 	msr	BASEPRI, r3
 8005ece:	f3bf 8f6f 	isb	sy
 8005ed2:	f3bf 8f4f 	dsb	sy
 8005ed6:	607b      	str	r3, [r7, #4]
}
 8005ed8:	bf00      	nop
 8005eda:	e7fe      	b.n	8005eda <vTaskSwitchContext+0x3e>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	3b01      	subs	r3, #1
 8005ee0:	60fb      	str	r3, [r7, #12]
 8005ee2:	491d      	ldr	r1, [pc, #116]	; (8005f58 <vTaskSwitchContext+0xbc>)
 8005ee4:	68fa      	ldr	r2, [r7, #12]
 8005ee6:	4613      	mov	r3, r2
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	4413      	add	r3, r2
 8005eec:	009b      	lsls	r3, r3, #2
 8005eee:	440b      	add	r3, r1
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d0e4      	beq.n	8005ec0 <vTaskSwitchContext+0x24>
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4613      	mov	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4413      	add	r3, r2
 8005efe:	009b      	lsls	r3, r3, #2
 8005f00:	4a15      	ldr	r2, [pc, #84]	; (8005f58 <vTaskSwitchContext+0xbc>)
 8005f02:	4413      	add	r3, r2
 8005f04:	60bb      	str	r3, [r7, #8]
 8005f06:	68bb      	ldr	r3, [r7, #8]
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	685a      	ldr	r2, [r3, #4]
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	605a      	str	r2, [r3, #4]
 8005f10:	68bb      	ldr	r3, [r7, #8]
 8005f12:	685a      	ldr	r2, [r3, #4]
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	3308      	adds	r3, #8
 8005f18:	429a      	cmp	r2, r3
 8005f1a:	d104      	bne.n	8005f26 <vTaskSwitchContext+0x8a>
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	685b      	ldr	r3, [r3, #4]
 8005f20:	685a      	ldr	r2, [r3, #4]
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	605a      	str	r2, [r3, #4]
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	685b      	ldr	r3, [r3, #4]
 8005f2a:	68db      	ldr	r3, [r3, #12]
 8005f2c:	4a0b      	ldr	r2, [pc, #44]	; (8005f5c <vTaskSwitchContext+0xc0>)
 8005f2e:	6013      	str	r3, [r2, #0]
 8005f30:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <vTaskSwitchContext+0xb8>)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f36:	4b09      	ldr	r3, [pc, #36]	; (8005f5c <vTaskSwitchContext+0xc0>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3354      	adds	r3, #84	; 0x54
 8005f3c:	4a08      	ldr	r2, [pc, #32]	; (8005f60 <vTaskSwitchContext+0xc4>)
 8005f3e:	6013      	str	r3, [r2, #0]
}
 8005f40:	bf00      	nop
 8005f42:	3714      	adds	r7, #20
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr
 8005f4c:	20000e60 	.word	0x20000e60
 8005f50:	20000e4c 	.word	0x20000e4c
 8005f54:	20000e40 	.word	0x20000e40
 8005f58:	20000968 	.word	0x20000968
 8005f5c:	20000964 	.word	0x20000964
 8005f60:	20000068 	.word	0x20000068

08005f64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10a      	bne.n	8005f8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	60fb      	str	r3, [r7, #12]
}
 8005f86:	bf00      	nop
 8005f88:	e7fe      	b.n	8005f88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005f8a:	4b07      	ldr	r3, [pc, #28]	; (8005fa8 <vTaskPlaceOnEventList+0x44>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	3318      	adds	r3, #24
 8005f90:	4619      	mov	r1, r3
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fe fb3f 	bl	8004616 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005f98:	2101      	movs	r1, #1
 8005f9a:	6838      	ldr	r0, [r7, #0]
 8005f9c:	f000 fb7e 	bl	800669c <prvAddCurrentTaskToDelayedList>
}
 8005fa0:	bf00      	nop
 8005fa2:	3710      	adds	r7, #16
 8005fa4:	46bd      	mov	sp, r7
 8005fa6:	bd80      	pop	{r7, pc}
 8005fa8:	20000964 	.word	0x20000964

08005fac <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b086      	sub	sp, #24
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	60f8      	str	r0, [r7, #12]
 8005fb4:	60b9      	str	r1, [r7, #8]
 8005fb6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d10a      	bne.n	8005fd4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	617b      	str	r3, [r7, #20]
}
 8005fd0:	bf00      	nop
 8005fd2:	e7fe      	b.n	8005fd2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005fd4:	4b0a      	ldr	r3, [pc, #40]	; (8006000 <vTaskPlaceOnEventListRestricted+0x54>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3318      	adds	r3, #24
 8005fda:	4619      	mov	r1, r3
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7fe faf6 	bl	80045ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d002      	beq.n	8005fee <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fec:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005fee:	6879      	ldr	r1, [r7, #4]
 8005ff0:	68b8      	ldr	r0, [r7, #8]
 8005ff2:	f000 fb53 	bl	800669c <prvAddCurrentTaskToDelayedList>
	}
 8005ff6:	bf00      	nop
 8005ff8:	3718      	adds	r7, #24
 8005ffa:	46bd      	mov	sp, r7
 8005ffc:	bd80      	pop	{r7, pc}
 8005ffe:	bf00      	nop
 8006000:	20000964 	.word	0x20000964

08006004 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006004:	b580      	push	{r7, lr}
 8006006:	b086      	sub	sp, #24
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	68db      	ldr	r3, [r3, #12]
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	2b00      	cmp	r3, #0
 8006018:	d10a      	bne.n	8006030 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800601a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601e:	f383 8811 	msr	BASEPRI, r3
 8006022:	f3bf 8f6f 	isb	sy
 8006026:	f3bf 8f4f 	dsb	sy
 800602a:	60fb      	str	r3, [r7, #12]
}
 800602c:	bf00      	nop
 800602e:	e7fe      	b.n	800602e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	3318      	adds	r3, #24
 8006034:	4618      	mov	r0, r3
 8006036:	f7fe fb27 	bl	8004688 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800603a:	4b1e      	ldr	r3, [pc, #120]	; (80060b4 <xTaskRemoveFromEventList+0xb0>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d11d      	bne.n	800607e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	3304      	adds	r3, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe fb1e 	bl	8004688 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006050:	4b19      	ldr	r3, [pc, #100]	; (80060b8 <xTaskRemoveFromEventList+0xb4>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	429a      	cmp	r2, r3
 8006056:	d903      	bls.n	8006060 <xTaskRemoveFromEventList+0x5c>
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	4a16      	ldr	r2, [pc, #88]	; (80060b8 <xTaskRemoveFromEventList+0xb4>)
 800605e:	6013      	str	r3, [r2, #0]
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006064:	4613      	mov	r3, r2
 8006066:	009b      	lsls	r3, r3, #2
 8006068:	4413      	add	r3, r2
 800606a:	009b      	lsls	r3, r3, #2
 800606c:	4a13      	ldr	r2, [pc, #76]	; (80060bc <xTaskRemoveFromEventList+0xb8>)
 800606e:	441a      	add	r2, r3
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	3304      	adds	r3, #4
 8006074:	4619      	mov	r1, r3
 8006076:	4610      	mov	r0, r2
 8006078:	f7fe faa9 	bl	80045ce <vListInsertEnd>
 800607c:	e005      	b.n	800608a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	3318      	adds	r3, #24
 8006082:	4619      	mov	r1, r3
 8006084:	480e      	ldr	r0, [pc, #56]	; (80060c0 <xTaskRemoveFromEventList+0xbc>)
 8006086:	f7fe faa2 	bl	80045ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800608e:	4b0d      	ldr	r3, [pc, #52]	; (80060c4 <xTaskRemoveFromEventList+0xc0>)
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006094:	429a      	cmp	r2, r3
 8006096:	d905      	bls.n	80060a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006098:	2301      	movs	r3, #1
 800609a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800609c:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <xTaskRemoveFromEventList+0xc4>)
 800609e:	2201      	movs	r2, #1
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	e001      	b.n	80060a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80060a4:	2300      	movs	r3, #0
 80060a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80060a8:	697b      	ldr	r3, [r7, #20]
}
 80060aa:	4618      	mov	r0, r3
 80060ac:	3718      	adds	r7, #24
 80060ae:	46bd      	mov	sp, r7
 80060b0:	bd80      	pop	{r7, pc}
 80060b2:	bf00      	nop
 80060b4:	20000e60 	.word	0x20000e60
 80060b8:	20000e40 	.word	0x20000e40
 80060bc:	20000968 	.word	0x20000968
 80060c0:	20000df8 	.word	0x20000df8
 80060c4:	20000964 	.word	0x20000964
 80060c8:	20000e4c 	.word	0x20000e4c

080060cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80060d4:	4b06      	ldr	r3, [pc, #24]	; (80060f0 <vTaskInternalSetTimeOutState+0x24>)
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80060dc:	4b05      	ldr	r3, [pc, #20]	; (80060f4 <vTaskInternalSetTimeOutState+0x28>)
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	605a      	str	r2, [r3, #4]
}
 80060e4:	bf00      	nop
 80060e6:	370c      	adds	r7, #12
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	20000e50 	.word	0x20000e50
 80060f4:	20000e3c 	.word	0x20000e3c

080060f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b088      	sub	sp, #32
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d10a      	bne.n	800611e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800610c:	f383 8811 	msr	BASEPRI, r3
 8006110:	f3bf 8f6f 	isb	sy
 8006114:	f3bf 8f4f 	dsb	sy
 8006118:	613b      	str	r3, [r7, #16]
}
 800611a:	bf00      	nop
 800611c:	e7fe      	b.n	800611c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d10a      	bne.n	800613a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006128:	f383 8811 	msr	BASEPRI, r3
 800612c:	f3bf 8f6f 	isb	sy
 8006130:	f3bf 8f4f 	dsb	sy
 8006134:	60fb      	str	r3, [r7, #12]
}
 8006136:	bf00      	nop
 8006138:	e7fe      	b.n	8006138 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800613a:	f001 f83b 	bl	80071b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800613e:	4b1d      	ldr	r3, [pc, #116]	; (80061b4 <xTaskCheckForTimeOut+0xbc>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	1ad3      	subs	r3, r2, r3
 800614c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800614e:	683b      	ldr	r3, [r7, #0]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006156:	d102      	bne.n	800615e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006158:	2300      	movs	r3, #0
 800615a:	61fb      	str	r3, [r7, #28]
 800615c:	e023      	b.n	80061a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	4b15      	ldr	r3, [pc, #84]	; (80061b8 <xTaskCheckForTimeOut+0xc0>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	429a      	cmp	r2, r3
 8006168:	d007      	beq.n	800617a <xTaskCheckForTimeOut+0x82>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	429a      	cmp	r2, r3
 8006172:	d302      	bcc.n	800617a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006174:	2301      	movs	r3, #1
 8006176:	61fb      	str	r3, [r7, #28]
 8006178:	e015      	b.n	80061a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	429a      	cmp	r2, r3
 8006182:	d20b      	bcs.n	800619c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	1ad2      	subs	r2, r2, r3
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006190:	6878      	ldr	r0, [r7, #4]
 8006192:	f7ff ff9b 	bl	80060cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006196:	2300      	movs	r3, #0
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e004      	b.n	80061a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80061a2:	2301      	movs	r3, #1
 80061a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80061a6:	f001 f835 	bl	8007214 <vPortExitCritical>

	return xReturn;
 80061aa:	69fb      	ldr	r3, [r7, #28]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3720      	adds	r7, #32
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}
 80061b4:	20000e3c 	.word	0x20000e3c
 80061b8:	20000e50 	.word	0x20000e50

080061bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80061bc:	b480      	push	{r7}
 80061be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80061c0:	4b03      	ldr	r3, [pc, #12]	; (80061d0 <vTaskMissedYield+0x14>)
 80061c2:	2201      	movs	r2, #1
 80061c4:	601a      	str	r2, [r3, #0]
}
 80061c6:	bf00      	nop
 80061c8:	46bd      	mov	sp, r7
 80061ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ce:	4770      	bx	lr
 80061d0:	20000e4c 	.word	0x20000e4c

080061d4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b082      	sub	sp, #8
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80061dc:	f000 f852 	bl	8006284 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80061e0:	4b06      	ldr	r3, [pc, #24]	; (80061fc <prvIdleTask+0x28>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d9f9      	bls.n	80061dc <prvIdleTask+0x8>
			{
				taskYIELD();
 80061e8:	4b05      	ldr	r3, [pc, #20]	; (8006200 <prvIdleTask+0x2c>)
 80061ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061ee:	601a      	str	r2, [r3, #0]
 80061f0:	f3bf 8f4f 	dsb	sy
 80061f4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80061f8:	e7f0      	b.n	80061dc <prvIdleTask+0x8>
 80061fa:	bf00      	nop
 80061fc:	20000968 	.word	0x20000968
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	e00c      	b.n	800622a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	4613      	mov	r3, r2
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	4413      	add	r3, r2
 8006218:	009b      	lsls	r3, r3, #2
 800621a:	4a12      	ldr	r2, [pc, #72]	; (8006264 <prvInitialiseTaskLists+0x60>)
 800621c:	4413      	add	r3, r2
 800621e:	4618      	mov	r0, r3
 8006220:	f7fe f9a8 	bl	8004574 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	3301      	adds	r3, #1
 8006228:	607b      	str	r3, [r7, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	2b37      	cmp	r3, #55	; 0x37
 800622e:	d9ef      	bls.n	8006210 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006230:	480d      	ldr	r0, [pc, #52]	; (8006268 <prvInitialiseTaskLists+0x64>)
 8006232:	f7fe f99f 	bl	8004574 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006236:	480d      	ldr	r0, [pc, #52]	; (800626c <prvInitialiseTaskLists+0x68>)
 8006238:	f7fe f99c 	bl	8004574 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800623c:	480c      	ldr	r0, [pc, #48]	; (8006270 <prvInitialiseTaskLists+0x6c>)
 800623e:	f7fe f999 	bl	8004574 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006242:	480c      	ldr	r0, [pc, #48]	; (8006274 <prvInitialiseTaskLists+0x70>)
 8006244:	f7fe f996 	bl	8004574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006248:	480b      	ldr	r0, [pc, #44]	; (8006278 <prvInitialiseTaskLists+0x74>)
 800624a:	f7fe f993 	bl	8004574 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800624e:	4b0b      	ldr	r3, [pc, #44]	; (800627c <prvInitialiseTaskLists+0x78>)
 8006250:	4a05      	ldr	r2, [pc, #20]	; (8006268 <prvInitialiseTaskLists+0x64>)
 8006252:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006254:	4b0a      	ldr	r3, [pc, #40]	; (8006280 <prvInitialiseTaskLists+0x7c>)
 8006256:	4a05      	ldr	r2, [pc, #20]	; (800626c <prvInitialiseTaskLists+0x68>)
 8006258:	601a      	str	r2, [r3, #0]
}
 800625a:	bf00      	nop
 800625c:	3708      	adds	r7, #8
 800625e:	46bd      	mov	sp, r7
 8006260:	bd80      	pop	{r7, pc}
 8006262:	bf00      	nop
 8006264:	20000968 	.word	0x20000968
 8006268:	20000dc8 	.word	0x20000dc8
 800626c:	20000ddc 	.word	0x20000ddc
 8006270:	20000df8 	.word	0x20000df8
 8006274:	20000e0c 	.word	0x20000e0c
 8006278:	20000e24 	.word	0x20000e24
 800627c:	20000df0 	.word	0x20000df0
 8006280:	20000df4 	.word	0x20000df4

08006284 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006284:	b580      	push	{r7, lr}
 8006286:	b082      	sub	sp, #8
 8006288:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800628a:	e019      	b.n	80062c0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800628c:	f000 ff92 	bl	80071b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <prvCheckTasksWaitingTermination+0x50>)
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	68db      	ldr	r3, [r3, #12]
 8006296:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	3304      	adds	r3, #4
 800629c:	4618      	mov	r0, r3
 800629e:	f7fe f9f3 	bl	8004688 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80062a2:	4b0d      	ldr	r3, [pc, #52]	; (80062d8 <prvCheckTasksWaitingTermination+0x54>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	3b01      	subs	r3, #1
 80062a8:	4a0b      	ldr	r2, [pc, #44]	; (80062d8 <prvCheckTasksWaitingTermination+0x54>)
 80062aa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80062ac:	4b0b      	ldr	r3, [pc, #44]	; (80062dc <prvCheckTasksWaitingTermination+0x58>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	3b01      	subs	r3, #1
 80062b2:	4a0a      	ldr	r2, [pc, #40]	; (80062dc <prvCheckTasksWaitingTermination+0x58>)
 80062b4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80062b6:	f000 ffad 	bl	8007214 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80062ba:	6878      	ldr	r0, [r7, #4]
 80062bc:	f000 f810 	bl	80062e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80062c0:	4b06      	ldr	r3, [pc, #24]	; (80062dc <prvCheckTasksWaitingTermination+0x58>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d1e1      	bne.n	800628c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80062c8:	bf00      	nop
 80062ca:	bf00      	nop
 80062cc:	3708      	adds	r7, #8
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}
 80062d2:	bf00      	nop
 80062d4:	20000e0c 	.word	0x20000e0c
 80062d8:	20000e38 	.word	0x20000e38
 80062dc:	20000e20 	.word	0x20000e20

080062e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	3354      	adds	r3, #84	; 0x54
 80062ec:	4618      	mov	r0, r3
 80062ee:	f001 fb9d 	bl	8007a2c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d108      	bne.n	800630e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006300:	4618      	mov	r0, r3
 8006302:	f001 f945 	bl	8007590 <vPortFree>
				vPortFree( pxTCB );
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f001 f942 	bl	8007590 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800630c:	e018      	b.n	8006340 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006314:	2b01      	cmp	r3, #1
 8006316:	d103      	bne.n	8006320 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006318:	6878      	ldr	r0, [r7, #4]
 800631a:	f001 f939 	bl	8007590 <vPortFree>
	}
 800631e:	e00f      	b.n	8006340 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006326:	2b02      	cmp	r3, #2
 8006328:	d00a      	beq.n	8006340 <prvDeleteTCB+0x60>
	__asm volatile
 800632a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800632e:	f383 8811 	msr	BASEPRI, r3
 8006332:	f3bf 8f6f 	isb	sy
 8006336:	f3bf 8f4f 	dsb	sy
 800633a:	60fb      	str	r3, [r7, #12]
}
 800633c:	bf00      	nop
 800633e:	e7fe      	b.n	800633e <prvDeleteTCB+0x5e>
	}
 8006340:	bf00      	nop
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}

08006348 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006348:	b480      	push	{r7}
 800634a:	b083      	sub	sp, #12
 800634c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800634e:	4b0c      	ldr	r3, [pc, #48]	; (8006380 <prvResetNextTaskUnblockTime+0x38>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d104      	bne.n	8006362 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006358:	4b0a      	ldr	r3, [pc, #40]	; (8006384 <prvResetNextTaskUnblockTime+0x3c>)
 800635a:	f04f 32ff 	mov.w	r2, #4294967295
 800635e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006360:	e008      	b.n	8006374 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006362:	4b07      	ldr	r3, [pc, #28]	; (8006380 <prvResetNextTaskUnblockTime+0x38>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68db      	ldr	r3, [r3, #12]
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	685b      	ldr	r3, [r3, #4]
 8006370:	4a04      	ldr	r2, [pc, #16]	; (8006384 <prvResetNextTaskUnblockTime+0x3c>)
 8006372:	6013      	str	r3, [r2, #0]
}
 8006374:	bf00      	nop
 8006376:	370c      	adds	r7, #12
 8006378:	46bd      	mov	sp, r7
 800637a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637e:	4770      	bx	lr
 8006380:	20000df0 	.word	0x20000df0
 8006384:	20000e58 	.word	0x20000e58

08006388 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006388:	b480      	push	{r7}
 800638a:	b083      	sub	sp, #12
 800638c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800638e:	4b0b      	ldr	r3, [pc, #44]	; (80063bc <xTaskGetSchedulerState+0x34>)
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d102      	bne.n	800639c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006396:	2301      	movs	r3, #1
 8006398:	607b      	str	r3, [r7, #4]
 800639a:	e008      	b.n	80063ae <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800639c:	4b08      	ldr	r3, [pc, #32]	; (80063c0 <xTaskGetSchedulerState+0x38>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d102      	bne.n	80063aa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80063a4:	2302      	movs	r3, #2
 80063a6:	607b      	str	r3, [r7, #4]
 80063a8:	e001      	b.n	80063ae <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80063aa:	2300      	movs	r3, #0
 80063ac:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80063ae:	687b      	ldr	r3, [r7, #4]
	}
 80063b0:	4618      	mov	r0, r3
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ba:	4770      	bx	lr
 80063bc:	20000e44 	.word	0x20000e44
 80063c0:	20000e60 	.word	0x20000e60

080063c4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80063d0:	2300      	movs	r3, #0
 80063d2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d051      	beq.n	800647e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80063da:	68bb      	ldr	r3, [r7, #8]
 80063dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063de:	4b2a      	ldr	r3, [pc, #168]	; (8006488 <xTaskPriorityInherit+0xc4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063e4:	429a      	cmp	r2, r3
 80063e6:	d241      	bcs.n	800646c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	db06      	blt.n	80063fe <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063f0:	4b25      	ldr	r3, [pc, #148]	; (8006488 <xTaskPriorityInherit+0xc4>)
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063f6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80063fa:	68bb      	ldr	r3, [r7, #8]
 80063fc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	6959      	ldr	r1, [r3, #20]
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006406:	4613      	mov	r3, r2
 8006408:	009b      	lsls	r3, r3, #2
 800640a:	4413      	add	r3, r2
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4a1f      	ldr	r2, [pc, #124]	; (800648c <xTaskPriorityInherit+0xc8>)
 8006410:	4413      	add	r3, r2
 8006412:	4299      	cmp	r1, r3
 8006414:	d122      	bne.n	800645c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	3304      	adds	r3, #4
 800641a:	4618      	mov	r0, r3
 800641c:	f7fe f934 	bl	8004688 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006420:	4b19      	ldr	r3, [pc, #100]	; (8006488 <xTaskPriorityInherit+0xc4>)
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006426:	68bb      	ldr	r3, [r7, #8]
 8006428:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800642a:	68bb      	ldr	r3, [r7, #8]
 800642c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800642e:	4b18      	ldr	r3, [pc, #96]	; (8006490 <xTaskPriorityInherit+0xcc>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d903      	bls.n	800643e <xTaskPriorityInherit+0x7a>
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800643a:	4a15      	ldr	r2, [pc, #84]	; (8006490 <xTaskPriorityInherit+0xcc>)
 800643c:	6013      	str	r3, [r2, #0]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006442:	4613      	mov	r3, r2
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	4413      	add	r3, r2
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	4a10      	ldr	r2, [pc, #64]	; (800648c <xTaskPriorityInherit+0xc8>)
 800644c:	441a      	add	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	3304      	adds	r3, #4
 8006452:	4619      	mov	r1, r3
 8006454:	4610      	mov	r0, r2
 8006456:	f7fe f8ba 	bl	80045ce <vListInsertEnd>
 800645a:	e004      	b.n	8006466 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800645c:	4b0a      	ldr	r3, [pc, #40]	; (8006488 <xTaskPriorityInherit+0xc4>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006466:	2301      	movs	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]
 800646a:	e008      	b.n	800647e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006470:	4b05      	ldr	r3, [pc, #20]	; (8006488 <xTaskPriorityInherit+0xc4>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006476:	429a      	cmp	r2, r3
 8006478:	d201      	bcs.n	800647e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800647a:	2301      	movs	r3, #1
 800647c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800647e:	68fb      	ldr	r3, [r7, #12]
	}
 8006480:	4618      	mov	r0, r3
 8006482:	3710      	adds	r7, #16
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}
 8006488:	20000964 	.word	0x20000964
 800648c:	20000968 	.word	0x20000968
 8006490:	20000e40 	.word	0x20000e40

08006494 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006494:	b580      	push	{r7, lr}
 8006496:	b086      	sub	sp, #24
 8006498:	af00      	add	r7, sp, #0
 800649a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d056      	beq.n	8006558 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80064aa:	4b2e      	ldr	r3, [pc, #184]	; (8006564 <xTaskPriorityDisinherit+0xd0>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	693a      	ldr	r2, [r7, #16]
 80064b0:	429a      	cmp	r2, r3
 80064b2:	d00a      	beq.n	80064ca <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80064b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064b8:	f383 8811 	msr	BASEPRI, r3
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	f3bf 8f4f 	dsb	sy
 80064c4:	60fb      	str	r3, [r7, #12]
}
 80064c6:	bf00      	nop
 80064c8:	e7fe      	b.n	80064c8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d10a      	bne.n	80064e8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80064d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d6:	f383 8811 	msr	BASEPRI, r3
 80064da:	f3bf 8f6f 	isb	sy
 80064de:	f3bf 8f4f 	dsb	sy
 80064e2:	60bb      	str	r3, [r7, #8]
}
 80064e4:	bf00      	nop
 80064e6:	e7fe      	b.n	80064e6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80064e8:	693b      	ldr	r3, [r7, #16]
 80064ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064ec:	1e5a      	subs	r2, r3, #1
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80064f2:	693b      	ldr	r3, [r7, #16]
 80064f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d02c      	beq.n	8006558 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80064fe:	693b      	ldr	r3, [r7, #16]
 8006500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006502:	2b00      	cmp	r3, #0
 8006504:	d128      	bne.n	8006558 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	3304      	adds	r3, #4
 800650a:	4618      	mov	r0, r3
 800650c:	f7fe f8bc 	bl	8004688 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800651c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006520:	693b      	ldr	r3, [r7, #16]
 8006522:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006528:	4b0f      	ldr	r3, [pc, #60]	; (8006568 <xTaskPriorityDisinherit+0xd4>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	429a      	cmp	r2, r3
 800652e:	d903      	bls.n	8006538 <xTaskPriorityDisinherit+0xa4>
 8006530:	693b      	ldr	r3, [r7, #16]
 8006532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006534:	4a0c      	ldr	r2, [pc, #48]	; (8006568 <xTaskPriorityDisinherit+0xd4>)
 8006536:	6013      	str	r3, [r2, #0]
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653c:	4613      	mov	r3, r2
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	4413      	add	r3, r2
 8006542:	009b      	lsls	r3, r3, #2
 8006544:	4a09      	ldr	r2, [pc, #36]	; (800656c <xTaskPriorityDisinherit+0xd8>)
 8006546:	441a      	add	r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	3304      	adds	r3, #4
 800654c:	4619      	mov	r1, r3
 800654e:	4610      	mov	r0, r2
 8006550:	f7fe f83d 	bl	80045ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006554:	2301      	movs	r3, #1
 8006556:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006558:	697b      	ldr	r3, [r7, #20]
	}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}
 8006562:	bf00      	nop
 8006564:	20000964 	.word	0x20000964
 8006568:	20000e40 	.word	0x20000e40
 800656c:	20000968 	.word	0x20000968

08006570 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006570:	b580      	push	{r7, lr}
 8006572:	b088      	sub	sp, #32
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800657e:	2301      	movs	r3, #1
 8006580:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d06a      	beq.n	800665e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800658c:	2b00      	cmp	r3, #0
 800658e:	d10a      	bne.n	80065a6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80065a6:	69bb      	ldr	r3, [r7, #24]
 80065a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065aa:	683a      	ldr	r2, [r7, #0]
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d902      	bls.n	80065b6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	61fb      	str	r3, [r7, #28]
 80065b4:	e002      	b.n	80065bc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80065b6:	69bb      	ldr	r3, [r7, #24]
 80065b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065c0:	69fa      	ldr	r2, [r7, #28]
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d04b      	beq.n	800665e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80065c6:	69bb      	ldr	r3, [r7, #24]
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	697a      	ldr	r2, [r7, #20]
 80065cc:	429a      	cmp	r2, r3
 80065ce:	d146      	bne.n	800665e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80065d0:	4b25      	ldr	r3, [pc, #148]	; (8006668 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	69ba      	ldr	r2, [r7, #24]
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d10a      	bne.n	80065f0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80065da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065de:	f383 8811 	msr	BASEPRI, r3
 80065e2:	f3bf 8f6f 	isb	sy
 80065e6:	f3bf 8f4f 	dsb	sy
 80065ea:	60bb      	str	r3, [r7, #8]
}
 80065ec:	bf00      	nop
 80065ee:	e7fe      	b.n	80065ee <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	69fa      	ldr	r2, [r7, #28]
 80065fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80065fc:	69bb      	ldr	r3, [r7, #24]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	2b00      	cmp	r3, #0
 8006602:	db04      	blt.n	800660e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800660a:	69bb      	ldr	r3, [r7, #24]
 800660c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800660e:	69bb      	ldr	r3, [r7, #24]
 8006610:	6959      	ldr	r1, [r3, #20]
 8006612:	693a      	ldr	r2, [r7, #16]
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4a13      	ldr	r2, [pc, #76]	; (800666c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800661e:	4413      	add	r3, r2
 8006620:	4299      	cmp	r1, r3
 8006622:	d11c      	bne.n	800665e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006624:	69bb      	ldr	r3, [r7, #24]
 8006626:	3304      	adds	r3, #4
 8006628:	4618      	mov	r0, r3
 800662a:	f7fe f82d 	bl	8004688 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006632:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	429a      	cmp	r2, r3
 8006638:	d903      	bls.n	8006642 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800663a:	69bb      	ldr	r3, [r7, #24]
 800663c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800663e:	4a0c      	ldr	r2, [pc, #48]	; (8006670 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006640:	6013      	str	r3, [r2, #0]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006646:	4613      	mov	r3, r2
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	4413      	add	r3, r2
 800664c:	009b      	lsls	r3, r3, #2
 800664e:	4a07      	ldr	r2, [pc, #28]	; (800666c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006650:	441a      	add	r2, r3
 8006652:	69bb      	ldr	r3, [r7, #24]
 8006654:	3304      	adds	r3, #4
 8006656:	4619      	mov	r1, r3
 8006658:	4610      	mov	r0, r2
 800665a:	f7fd ffb8 	bl	80045ce <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800665e:	bf00      	nop
 8006660:	3720      	adds	r7, #32
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}
 8006666:	bf00      	nop
 8006668:	20000964 	.word	0x20000964
 800666c:	20000968 	.word	0x20000968
 8006670:	20000e40 	.word	0x20000e40

08006674 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006674:	b480      	push	{r7}
 8006676:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006678:	4b07      	ldr	r3, [pc, #28]	; (8006698 <pvTaskIncrementMutexHeldCount+0x24>)
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d004      	beq.n	800668a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006680:	4b05      	ldr	r3, [pc, #20]	; (8006698 <pvTaskIncrementMutexHeldCount+0x24>)
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006686:	3201      	adds	r2, #1
 8006688:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800668a:	4b03      	ldr	r3, [pc, #12]	; (8006698 <pvTaskIncrementMutexHeldCount+0x24>)
 800668c:	681b      	ldr	r3, [r3, #0]
	}
 800668e:	4618      	mov	r0, r3
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr
 8006698:	20000964 	.word	0x20000964

0800669c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800669c:	b580      	push	{r7, lr}
 800669e:	b084      	sub	sp, #16
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80066a6:	4b21      	ldr	r3, [pc, #132]	; (800672c <prvAddCurrentTaskToDelayedList+0x90>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ac:	4b20      	ldr	r3, [pc, #128]	; (8006730 <prvAddCurrentTaskToDelayedList+0x94>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	3304      	adds	r3, #4
 80066b2:	4618      	mov	r0, r3
 80066b4:	f7fd ffe8 	bl	8004688 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066be:	d10a      	bne.n	80066d6 <prvAddCurrentTaskToDelayedList+0x3a>
 80066c0:	683b      	ldr	r3, [r7, #0]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d007      	beq.n	80066d6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066c6:	4b1a      	ldr	r3, [pc, #104]	; (8006730 <prvAddCurrentTaskToDelayedList+0x94>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	3304      	adds	r3, #4
 80066cc:	4619      	mov	r1, r3
 80066ce:	4819      	ldr	r0, [pc, #100]	; (8006734 <prvAddCurrentTaskToDelayedList+0x98>)
 80066d0:	f7fd ff7d 	bl	80045ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80066d4:	e026      	b.n	8006724 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80066d6:	68fa      	ldr	r2, [r7, #12]
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	4413      	add	r3, r2
 80066dc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066de:	4b14      	ldr	r3, [pc, #80]	; (8006730 <prvAddCurrentTaskToDelayedList+0x94>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	429a      	cmp	r2, r3
 80066ec:	d209      	bcs.n	8006702 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ee:	4b12      	ldr	r3, [pc, #72]	; (8006738 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066f0:	681a      	ldr	r2, [r3, #0]
 80066f2:	4b0f      	ldr	r3, [pc, #60]	; (8006730 <prvAddCurrentTaskToDelayedList+0x94>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3304      	adds	r3, #4
 80066f8:	4619      	mov	r1, r3
 80066fa:	4610      	mov	r0, r2
 80066fc:	f7fd ff8b 	bl	8004616 <vListInsert>
}
 8006700:	e010      	b.n	8006724 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006702:	4b0e      	ldr	r3, [pc, #56]	; (800673c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006704:	681a      	ldr	r2, [r3, #0]
 8006706:	4b0a      	ldr	r3, [pc, #40]	; (8006730 <prvAddCurrentTaskToDelayedList+0x94>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	3304      	adds	r3, #4
 800670c:	4619      	mov	r1, r3
 800670e:	4610      	mov	r0, r2
 8006710:	f7fd ff81 	bl	8004616 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006714:	4b0a      	ldr	r3, [pc, #40]	; (8006740 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	429a      	cmp	r2, r3
 800671c:	d202      	bcs.n	8006724 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800671e:	4a08      	ldr	r2, [pc, #32]	; (8006740 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	6013      	str	r3, [r2, #0]
}
 8006724:	bf00      	nop
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}
 800672c:	20000e3c 	.word	0x20000e3c
 8006730:	20000964 	.word	0x20000964
 8006734:	20000e24 	.word	0x20000e24
 8006738:	20000df4 	.word	0x20000df4
 800673c:	20000df0 	.word	0x20000df0
 8006740:	20000e58 	.word	0x20000e58

08006744 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006744:	b580      	push	{r7, lr}
 8006746:	b08a      	sub	sp, #40	; 0x28
 8006748:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800674a:	2300      	movs	r3, #0
 800674c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800674e:	f000 fba1 	bl	8006e94 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006752:	4b1c      	ldr	r3, [pc, #112]	; (80067c4 <xTimerCreateTimerTask+0x80>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d021      	beq.n	800679e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006762:	1d3a      	adds	r2, r7, #4
 8006764:	f107 0108 	add.w	r1, r7, #8
 8006768:	f107 030c 	add.w	r3, r7, #12
 800676c:	4618      	mov	r0, r3
 800676e:	f7fd fee7 	bl	8004540 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006772:	6879      	ldr	r1, [r7, #4]
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	68fa      	ldr	r2, [r7, #12]
 8006778:	9202      	str	r2, [sp, #8]
 800677a:	9301      	str	r3, [sp, #4]
 800677c:	2302      	movs	r3, #2
 800677e:	9300      	str	r3, [sp, #0]
 8006780:	2300      	movs	r3, #0
 8006782:	460a      	mov	r2, r1
 8006784:	4910      	ldr	r1, [pc, #64]	; (80067c8 <xTimerCreateTimerTask+0x84>)
 8006786:	4811      	ldr	r0, [pc, #68]	; (80067cc <xTimerCreateTimerTask+0x88>)
 8006788:	f7fe ffb6 	bl	80056f8 <xTaskCreateStatic>
 800678c:	4603      	mov	r3, r0
 800678e:	4a10      	ldr	r2, [pc, #64]	; (80067d0 <xTimerCreateTimerTask+0x8c>)
 8006790:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006792:	4b0f      	ldr	r3, [pc, #60]	; (80067d0 <xTimerCreateTimerTask+0x8c>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d001      	beq.n	800679e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800679a:	2301      	movs	r3, #1
 800679c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d10a      	bne.n	80067ba <xTimerCreateTimerTask+0x76>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	613b      	str	r3, [r7, #16]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80067ba:	697b      	ldr	r3, [r7, #20]
}
 80067bc:	4618      	mov	r0, r3
 80067be:	3718      	adds	r7, #24
 80067c0:	46bd      	mov	sp, r7
 80067c2:	bd80      	pop	{r7, pc}
 80067c4:	20000e94 	.word	0x20000e94
 80067c8:	080087c8 	.word	0x080087c8
 80067cc:	08006a3d 	.word	0x08006a3d
 80067d0:	20000e98 	.word	0x20000e98

080067d4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 80067d4:	b580      	push	{r7, lr}
 80067d6:	b088      	sub	sp, #32
 80067d8:	af02      	add	r7, sp, #8
 80067da:	60f8      	str	r0, [r7, #12]
 80067dc:	60b9      	str	r1, [r7, #8]
 80067de:	607a      	str	r2, [r7, #4]
 80067e0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 80067e2:	202c      	movs	r0, #44	; 0x2c
 80067e4:	f000 fe08 	bl	80073f8 <pvPortMalloc>
 80067e8:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00d      	beq.n	800680c <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 80067f0:	697b      	ldr	r3, [r7, #20]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	9301      	str	r3, [sp, #4]
 80067fc:	6a3b      	ldr	r3, [r7, #32]
 80067fe:	9300      	str	r3, [sp, #0]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	687a      	ldr	r2, [r7, #4]
 8006804:	68b9      	ldr	r1, [r7, #8]
 8006806:	68f8      	ldr	r0, [r7, #12]
 8006808:	f000 f843 	bl	8006892 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800680c:	697b      	ldr	r3, [r7, #20]
	}
 800680e:	4618      	mov	r0, r3
 8006810:	3718      	adds	r7, #24
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}

08006816 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 8006816:	b580      	push	{r7, lr}
 8006818:	b08a      	sub	sp, #40	; 0x28
 800681a:	af02      	add	r7, sp, #8
 800681c:	60f8      	str	r0, [r7, #12]
 800681e:	60b9      	str	r1, [r7, #8]
 8006820:	607a      	str	r2, [r7, #4]
 8006822:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 8006824:	232c      	movs	r3, #44	; 0x2c
 8006826:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	2b2c      	cmp	r3, #44	; 0x2c
 800682c:	d00a      	beq.n	8006844 <xTimerCreateStatic+0x2e>
	__asm volatile
 800682e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006832:	f383 8811 	msr	BASEPRI, r3
 8006836:	f3bf 8f6f 	isb	sy
 800683a:	f3bf 8f4f 	dsb	sy
 800683e:	61bb      	str	r3, [r7, #24]
}
 8006840:	bf00      	nop
 8006842:	e7fe      	b.n	8006842 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8006844:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 8006846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006848:	2b00      	cmp	r3, #0
 800684a:	d10a      	bne.n	8006862 <xTimerCreateStatic+0x4c>
	__asm volatile
 800684c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006850:	f383 8811 	msr	BASEPRI, r3
 8006854:	f3bf 8f6f 	isb	sy
 8006858:	f3bf 8f4f 	dsb	sy
 800685c:	617b      	str	r3, [r7, #20]
}
 800685e:	bf00      	nop
 8006860:	e7fe      	b.n	8006860 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8006862:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006864:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8006866:	69fb      	ldr	r3, [r7, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d00d      	beq.n	8006888 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800686c:	69fb      	ldr	r3, [r7, #28]
 800686e:	2202      	movs	r2, #2
 8006870:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8006874:	69fb      	ldr	r3, [r7, #28]
 8006876:	9301      	str	r3, [sp, #4]
 8006878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687a:	9300      	str	r3, [sp, #0]
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	687a      	ldr	r2, [r7, #4]
 8006880:	68b9      	ldr	r1, [r7, #8]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f000 f805 	bl	8006892 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8006888:	69fb      	ldr	r3, [r7, #28]
	}
 800688a:	4618      	mov	r0, r3
 800688c:	3720      	adds	r7, #32
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}

08006892 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8006892:	b580      	push	{r7, lr}
 8006894:	b086      	sub	sp, #24
 8006896:	af00      	add	r7, sp, #0
 8006898:	60f8      	str	r0, [r7, #12]
 800689a:	60b9      	str	r1, [r7, #8]
 800689c:	607a      	str	r2, [r7, #4]
 800689e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10a      	bne.n	80068bc <prvInitialiseNewTimer+0x2a>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	617b      	str	r3, [r7, #20]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d01e      	beq.n	8006900 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 80068c2:	f000 fae7 	bl	8006e94 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 80068cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ce:	68ba      	ldr	r2, [r7, #8]
 80068d0:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	683a      	ldr	r2, [r7, #0]
 80068d6:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 80068d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068da:	6a3a      	ldr	r2, [r7, #32]
 80068dc:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	3304      	adds	r3, #4
 80068e2:	4618      	mov	r0, r3
 80068e4:	f7fd fe66 	bl	80045b4 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d008      	beq.n	8006900 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068f4:	f043 0304 	orr.w	r3, r3, #4
 80068f8:	b2da      	uxtb	r2, r3
 80068fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 8006900:	bf00      	nop
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}

08006908 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b08a      	sub	sp, #40	; 0x28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006916:	2300      	movs	r3, #0
 8006918:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d10a      	bne.n	8006936 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006924:	f383 8811 	msr	BASEPRI, r3
 8006928:	f3bf 8f6f 	isb	sy
 800692c:	f3bf 8f4f 	dsb	sy
 8006930:	623b      	str	r3, [r7, #32]
}
 8006932:	bf00      	nop
 8006934:	e7fe      	b.n	8006934 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006936:	4b1a      	ldr	r3, [pc, #104]	; (80069a0 <xTimerGenericCommand+0x98>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2b00      	cmp	r3, #0
 800693c:	d02a      	beq.n	8006994 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800693e:	68bb      	ldr	r3, [r7, #8]
 8006940:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800694a:	68bb      	ldr	r3, [r7, #8]
 800694c:	2b05      	cmp	r3, #5
 800694e:	dc18      	bgt.n	8006982 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006950:	f7ff fd1a 	bl	8006388 <xTaskGetSchedulerState>
 8006954:	4603      	mov	r3, r0
 8006956:	2b02      	cmp	r3, #2
 8006958:	d109      	bne.n	800696e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800695a:	4b11      	ldr	r3, [pc, #68]	; (80069a0 <xTimerGenericCommand+0x98>)
 800695c:	6818      	ldr	r0, [r3, #0]
 800695e:	f107 0110 	add.w	r1, r7, #16
 8006962:	2300      	movs	r3, #0
 8006964:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006966:	f7fe f861 	bl	8004a2c <xQueueGenericSend>
 800696a:	6278      	str	r0, [r7, #36]	; 0x24
 800696c:	e012      	b.n	8006994 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800696e:	4b0c      	ldr	r3, [pc, #48]	; (80069a0 <xTimerGenericCommand+0x98>)
 8006970:	6818      	ldr	r0, [r3, #0]
 8006972:	f107 0110 	add.w	r1, r7, #16
 8006976:	2300      	movs	r3, #0
 8006978:	2200      	movs	r2, #0
 800697a:	f7fe f857 	bl	8004a2c <xQueueGenericSend>
 800697e:	6278      	str	r0, [r7, #36]	; 0x24
 8006980:	e008      	b.n	8006994 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006982:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <xTimerGenericCommand+0x98>)
 8006984:	6818      	ldr	r0, [r3, #0]
 8006986:	f107 0110 	add.w	r1, r7, #16
 800698a:	2300      	movs	r3, #0
 800698c:	683a      	ldr	r2, [r7, #0]
 800698e:	f7fe f94b 	bl	8004c28 <xQueueGenericSendFromISR>
 8006992:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006996:	4618      	mov	r0, r3
 8006998:	3728      	adds	r7, #40	; 0x28
 800699a:	46bd      	mov	sp, r7
 800699c:	bd80      	pop	{r7, pc}
 800699e:	bf00      	nop
 80069a0:	20000e94 	.word	0x20000e94

080069a4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80069a4:	b580      	push	{r7, lr}
 80069a6:	b088      	sub	sp, #32
 80069a8:	af02      	add	r7, sp, #8
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80069ae:	4b22      	ldr	r3, [pc, #136]	; (8006a38 <prvProcessExpiredTimer+0x94>)
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	68db      	ldr	r3, [r3, #12]
 80069b4:	68db      	ldr	r3, [r3, #12]
 80069b6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	3304      	adds	r3, #4
 80069bc:	4618      	mov	r0, r3
 80069be:	f7fd fe63 	bl	8004688 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80069c2:	697b      	ldr	r3, [r7, #20]
 80069c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069c8:	f003 0304 	and.w	r3, r3, #4
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d022      	beq.n	8006a16 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	699a      	ldr	r2, [r3, #24]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	18d1      	adds	r1, r2, r3
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	6978      	ldr	r0, [r7, #20]
 80069de:	f000 f8d1 	bl	8006b84 <prvInsertTimerInActiveList>
 80069e2:	4603      	mov	r3, r0
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d01f      	beq.n	8006a28 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069e8:	2300      	movs	r3, #0
 80069ea:	9300      	str	r3, [sp, #0]
 80069ec:	2300      	movs	r3, #0
 80069ee:	687a      	ldr	r2, [r7, #4]
 80069f0:	2100      	movs	r1, #0
 80069f2:	6978      	ldr	r0, [r7, #20]
 80069f4:	f7ff ff88 	bl	8006908 <xTimerGenericCommand>
 80069f8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069fa:	693b      	ldr	r3, [r7, #16]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d113      	bne.n	8006a28 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a04:	f383 8811 	msr	BASEPRI, r3
 8006a08:	f3bf 8f6f 	isb	sy
 8006a0c:	f3bf 8f4f 	dsb	sy
 8006a10:	60fb      	str	r3, [r7, #12]
}
 8006a12:	bf00      	nop
 8006a14:	e7fe      	b.n	8006a14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006a1c:	f023 0301 	bic.w	r3, r3, #1
 8006a20:	b2da      	uxtb	r2, r3
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	6978      	ldr	r0, [r7, #20]
 8006a2e:	4798      	blx	r3
}
 8006a30:	bf00      	nop
 8006a32:	3718      	adds	r7, #24
 8006a34:	46bd      	mov	sp, r7
 8006a36:	bd80      	pop	{r7, pc}
 8006a38:	20000e8c 	.word	0x20000e8c

08006a3c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a44:	f107 0308 	add.w	r3, r7, #8
 8006a48:	4618      	mov	r0, r3
 8006a4a:	f000 f857 	bl	8006afc <prvGetNextExpireTime>
 8006a4e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a50:	68bb      	ldr	r3, [r7, #8]
 8006a52:	4619      	mov	r1, r3
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f803 	bl	8006a60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a5a:	f000 f8d5 	bl	8006c08 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a5e:	e7f1      	b.n	8006a44 <prvTimerTask+0x8>

08006a60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b084      	sub	sp, #16
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	6078      	str	r0, [r7, #4]
 8006a68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a6a:	f7ff f8a1 	bl	8005bb0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a6e:	f107 0308 	add.w	r3, r7, #8
 8006a72:	4618      	mov	r0, r3
 8006a74:	f000 f866 	bl	8006b44 <prvSampleTimeNow>
 8006a78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d130      	bne.n	8006ae2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10a      	bne.n	8006a9c <prvProcessTimerOrBlockTask+0x3c>
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	429a      	cmp	r2, r3
 8006a8c:	d806      	bhi.n	8006a9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a8e:	f7ff f89d 	bl	8005bcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a92:	68f9      	ldr	r1, [r7, #12]
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff ff85 	bl	80069a4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a9a:	e024      	b.n	8006ae6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d008      	beq.n	8006ab4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006aa2:	4b13      	ldr	r3, [pc, #76]	; (8006af0 <prvProcessTimerOrBlockTask+0x90>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d101      	bne.n	8006ab0 <prvProcessTimerOrBlockTask+0x50>
 8006aac:	2301      	movs	r3, #1
 8006aae:	e000      	b.n	8006ab2 <prvProcessTimerOrBlockTask+0x52>
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006ab4:	4b0f      	ldr	r3, [pc, #60]	; (8006af4 <prvProcessTimerOrBlockTask+0x94>)
 8006ab6:	6818      	ldr	r0, [r3, #0]
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	1ad3      	subs	r3, r2, r3
 8006abe:	683a      	ldr	r2, [r7, #0]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	f7fe fde5 	bl	8005690 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ac6:	f7ff f881 	bl	8005bcc <xTaskResumeAll>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d10a      	bne.n	8006ae6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006ad0:	4b09      	ldr	r3, [pc, #36]	; (8006af8 <prvProcessTimerOrBlockTask+0x98>)
 8006ad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	f3bf 8f6f 	isb	sy
}
 8006ae0:	e001      	b.n	8006ae6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ae2:	f7ff f873 	bl	8005bcc <xTaskResumeAll>
}
 8006ae6:	bf00      	nop
 8006ae8:	3710      	adds	r7, #16
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000e90 	.word	0x20000e90
 8006af4:	20000e94 	.word	0x20000e94
 8006af8:	e000ed04 	.word	0xe000ed04

08006afc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006b04:	4b0e      	ldr	r3, [pc, #56]	; (8006b40 <prvGetNextExpireTime+0x44>)
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d101      	bne.n	8006b12 <prvGetNextExpireTime+0x16>
 8006b0e:	2201      	movs	r2, #1
 8006b10:	e000      	b.n	8006b14 <prvGetNextExpireTime+0x18>
 8006b12:	2200      	movs	r2, #0
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d105      	bne.n	8006b2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006b20:	4b07      	ldr	r3, [pc, #28]	; (8006b40 <prvGetNextExpireTime+0x44>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	60fb      	str	r3, [r7, #12]
 8006b2a:	e001      	b.n	8006b30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006b30:	68fb      	ldr	r3, [r7, #12]
}
 8006b32:	4618      	mov	r0, r3
 8006b34:	3714      	adds	r7, #20
 8006b36:	46bd      	mov	sp, r7
 8006b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3c:	4770      	bx	lr
 8006b3e:	bf00      	nop
 8006b40:	20000e8c 	.word	0x20000e8c

08006b44 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b4c:	f7ff f8dc 	bl	8005d08 <xTaskGetTickCount>
 8006b50:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b52:	4b0b      	ldr	r3, [pc, #44]	; (8006b80 <prvSampleTimeNow+0x3c>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d205      	bcs.n	8006b68 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b5c:	f000 f936 	bl	8006dcc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2201      	movs	r2, #1
 8006b64:	601a      	str	r2, [r3, #0]
 8006b66:	e002      	b.n	8006b6e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b6e:	4a04      	ldr	r2, [pc, #16]	; (8006b80 <prvSampleTimeNow+0x3c>)
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b74:	68fb      	ldr	r3, [r7, #12]
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3710      	adds	r7, #16
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000e9c 	.word	0x20000e9c

08006b84 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b086      	sub	sp, #24
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b96:	68fb      	ldr	r3, [r7, #12]
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	68fa      	ldr	r2, [r7, #12]
 8006ba0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006ba2:	68ba      	ldr	r2, [r7, #8]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	429a      	cmp	r2, r3
 8006ba8:	d812      	bhi.n	8006bd0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006baa:	687a      	ldr	r2, [r7, #4]
 8006bac:	683b      	ldr	r3, [r7, #0]
 8006bae:	1ad2      	subs	r2, r2, r3
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	699b      	ldr	r3, [r3, #24]
 8006bb4:	429a      	cmp	r2, r3
 8006bb6:	d302      	bcc.n	8006bbe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006bb8:	2301      	movs	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	e01b      	b.n	8006bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006bbe:	4b10      	ldr	r3, [pc, #64]	; (8006c00 <prvInsertTimerInActiveList+0x7c>)
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3304      	adds	r3, #4
 8006bc6:	4619      	mov	r1, r3
 8006bc8:	4610      	mov	r0, r2
 8006bca:	f7fd fd24 	bl	8004616 <vListInsert>
 8006bce:	e012      	b.n	8006bf6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006bd0:	687a      	ldr	r2, [r7, #4]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	429a      	cmp	r2, r3
 8006bd6:	d206      	bcs.n	8006be6 <prvInsertTimerInActiveList+0x62>
 8006bd8:	68ba      	ldr	r2, [r7, #8]
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	429a      	cmp	r2, r3
 8006bde:	d302      	bcc.n	8006be6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006be0:	2301      	movs	r3, #1
 8006be2:	617b      	str	r3, [r7, #20]
 8006be4:	e007      	b.n	8006bf6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006be6:	4b07      	ldr	r3, [pc, #28]	; (8006c04 <prvInsertTimerInActiveList+0x80>)
 8006be8:	681a      	ldr	r2, [r3, #0]
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3304      	adds	r3, #4
 8006bee:	4619      	mov	r1, r3
 8006bf0:	4610      	mov	r0, r2
 8006bf2:	f7fd fd10 	bl	8004616 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006bf6:	697b      	ldr	r3, [r7, #20]
}
 8006bf8:	4618      	mov	r0, r3
 8006bfa:	3718      	adds	r7, #24
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	bd80      	pop	{r7, pc}
 8006c00:	20000e90 	.word	0x20000e90
 8006c04:	20000e8c 	.word	0x20000e8c

08006c08 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b08e      	sub	sp, #56	; 0x38
 8006c0c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c0e:	e0ca      	b.n	8006da6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	da18      	bge.n	8006c48 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006c16:	1d3b      	adds	r3, r7, #4
 8006c18:	3304      	adds	r3, #4
 8006c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10a      	bne.n	8006c38 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c26:	f383 8811 	msr	BASEPRI, r3
 8006c2a:	f3bf 8f6f 	isb	sy
 8006c2e:	f3bf 8f4f 	dsb	sy
 8006c32:	61fb      	str	r3, [r7, #28]
}
 8006c34:	bf00      	nop
 8006c36:	e7fe      	b.n	8006c36 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006c38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c3e:	6850      	ldr	r0, [r2, #4]
 8006c40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006c42:	6892      	ldr	r2, [r2, #8]
 8006c44:	4611      	mov	r1, r2
 8006c46:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f2c0 80ab 	blt.w	8006da6 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	695b      	ldr	r3, [r3, #20]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d004      	beq.n	8006c66 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	3304      	adds	r3, #4
 8006c60:	4618      	mov	r0, r3
 8006c62:	f7fd fd11 	bl	8004688 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c66:	463b      	mov	r3, r7
 8006c68:	4618      	mov	r0, r3
 8006c6a:	f7ff ff6b 	bl	8006b44 <prvSampleTimeNow>
 8006c6e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2b09      	cmp	r3, #9
 8006c74:	f200 8096 	bhi.w	8006da4 <prvProcessReceivedCommands+0x19c>
 8006c78:	a201      	add	r2, pc, #4	; (adr r2, 8006c80 <prvProcessReceivedCommands+0x78>)
 8006c7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c7e:	bf00      	nop
 8006c80:	08006ca9 	.word	0x08006ca9
 8006c84:	08006ca9 	.word	0x08006ca9
 8006c88:	08006ca9 	.word	0x08006ca9
 8006c8c:	08006d1d 	.word	0x08006d1d
 8006c90:	08006d31 	.word	0x08006d31
 8006c94:	08006d7b 	.word	0x08006d7b
 8006c98:	08006ca9 	.word	0x08006ca9
 8006c9c:	08006ca9 	.word	0x08006ca9
 8006ca0:	08006d1d 	.word	0x08006d1d
 8006ca4:	08006d31 	.word	0x08006d31
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006caa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cae:	f043 0301 	orr.w	r3, r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006cba:	68ba      	ldr	r2, [r7, #8]
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	699b      	ldr	r3, [r3, #24]
 8006cc0:	18d1      	adds	r1, r2, r3
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006cc6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cc8:	f7ff ff5c 	bl	8006b84 <prvInsertTimerInActiveList>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d069      	beq.n	8006da6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cd8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006cda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ce0:	f003 0304 	and.w	r3, r3, #4
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d05e      	beq.n	8006da6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ce8:	68ba      	ldr	r2, [r7, #8]
 8006cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cec:	699b      	ldr	r3, [r3, #24]
 8006cee:	441a      	add	r2, r3
 8006cf0:	2300      	movs	r3, #0
 8006cf2:	9300      	str	r3, [sp, #0]
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	2100      	movs	r1, #0
 8006cf8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006cfa:	f7ff fe05 	bl	8006908 <xTimerGenericCommand>
 8006cfe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006d00:	6a3b      	ldr	r3, [r7, #32]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d14f      	bne.n	8006da6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	61bb      	str	r3, [r7, #24]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d22:	f023 0301 	bic.w	r3, r3, #1
 8006d26:	b2da      	uxtb	r2, r3
 8006d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006d2e:	e03a      	b.n	8006da6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d36:	f043 0301 	orr.w	r3, r3, #1
 8006d3a:	b2da      	uxtb	r2, r3
 8006d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006d42:	68ba      	ldr	r2, [r7, #8]
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d4a:	699b      	ldr	r3, [r3, #24]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d10a      	bne.n	8006d66 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d54:	f383 8811 	msr	BASEPRI, r3
 8006d58:	f3bf 8f6f 	isb	sy
 8006d5c:	f3bf 8f4f 	dsb	sy
 8006d60:	617b      	str	r3, [r7, #20]
}
 8006d62:	bf00      	nop
 8006d64:	e7fe      	b.n	8006d64 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d6c:	18d1      	adds	r1, r2, r3
 8006d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d72:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d74:	f7ff ff06 	bl	8006b84 <prvInsertTimerInActiveList>
					break;
 8006d78:	e015      	b.n	8006da6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d80:	f003 0302 	and.w	r3, r3, #2
 8006d84:	2b00      	cmp	r3, #0
 8006d86:	d103      	bne.n	8006d90 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d8a:	f000 fc01 	bl	8007590 <vPortFree>
 8006d8e:	e00a      	b.n	8006da6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d92:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d96:	f023 0301 	bic.w	r3, r3, #1
 8006d9a:	b2da      	uxtb	r2, r3
 8006d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d9e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006da2:	e000      	b.n	8006da6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006da4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006da6:	4b08      	ldr	r3, [pc, #32]	; (8006dc8 <prvProcessReceivedCommands+0x1c0>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	1d39      	adds	r1, r7, #4
 8006dac:	2200      	movs	r2, #0
 8006dae:	4618      	mov	r0, r3
 8006db0:	f7fe f862 	bl	8004e78 <xQueueReceive>
 8006db4:	4603      	mov	r3, r0
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f47f af2a 	bne.w	8006c10 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006dbc:	bf00      	nop
 8006dbe:	bf00      	nop
 8006dc0:	3730      	adds	r7, #48	; 0x30
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	bd80      	pop	{r7, pc}
 8006dc6:	bf00      	nop
 8006dc8:	20000e94 	.word	0x20000e94

08006dcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006dcc:	b580      	push	{r7, lr}
 8006dce:	b088      	sub	sp, #32
 8006dd0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dd2:	e048      	b.n	8006e66 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006dd4:	4b2d      	ldr	r3, [pc, #180]	; (8006e8c <prvSwitchTimerLists+0xc0>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	68db      	ldr	r3, [r3, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006dde:	4b2b      	ldr	r3, [pc, #172]	; (8006e8c <prvSwitchTimerLists+0xc0>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	68db      	ldr	r3, [r3, #12]
 8006de4:	68db      	ldr	r3, [r3, #12]
 8006de6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4618      	mov	r0, r3
 8006dee:	f7fd fc4b 	bl	8004688 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6a1b      	ldr	r3, [r3, #32]
 8006df6:	68f8      	ldr	r0, [r7, #12]
 8006df8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e00:	f003 0304 	and.w	r3, r3, #4
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d02e      	beq.n	8006e66 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	699b      	ldr	r3, [r3, #24]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4413      	add	r3, r2
 8006e10:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006e12:	68ba      	ldr	r2, [r7, #8]
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	429a      	cmp	r2, r3
 8006e18:	d90e      	bls.n	8006e38 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	68ba      	ldr	r2, [r7, #8]
 8006e1e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e26:	4b19      	ldr	r3, [pc, #100]	; (8006e8c <prvSwitchTimerLists+0xc0>)
 8006e28:	681a      	ldr	r2, [r3, #0]
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	3304      	adds	r3, #4
 8006e2e:	4619      	mov	r1, r3
 8006e30:	4610      	mov	r0, r2
 8006e32:	f7fd fbf0 	bl	8004616 <vListInsert>
 8006e36:	e016      	b.n	8006e66 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e38:	2300      	movs	r3, #0
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	2300      	movs	r3, #0
 8006e3e:	693a      	ldr	r2, [r7, #16]
 8006e40:	2100      	movs	r1, #0
 8006e42:	68f8      	ldr	r0, [r7, #12]
 8006e44:	f7ff fd60 	bl	8006908 <xTimerGenericCommand>
 8006e48:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d10a      	bne.n	8006e66 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e54:	f383 8811 	msr	BASEPRI, r3
 8006e58:	f3bf 8f6f 	isb	sy
 8006e5c:	f3bf 8f4f 	dsb	sy
 8006e60:	603b      	str	r3, [r7, #0]
}
 8006e62:	bf00      	nop
 8006e64:	e7fe      	b.n	8006e64 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e66:	4b09      	ldr	r3, [pc, #36]	; (8006e8c <prvSwitchTimerLists+0xc0>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1b1      	bne.n	8006dd4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e70:	4b06      	ldr	r3, [pc, #24]	; (8006e8c <prvSwitchTimerLists+0xc0>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <prvSwitchTimerLists+0xc4>)
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	4a04      	ldr	r2, [pc, #16]	; (8006e8c <prvSwitchTimerLists+0xc0>)
 8006e7c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e7e:	4a04      	ldr	r2, [pc, #16]	; (8006e90 <prvSwitchTimerLists+0xc4>)
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	6013      	str	r3, [r2, #0]
}
 8006e84:	bf00      	nop
 8006e86:	3718      	adds	r7, #24
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	bd80      	pop	{r7, pc}
 8006e8c:	20000e8c 	.word	0x20000e8c
 8006e90:	20000e90 	.word	0x20000e90

08006e94 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e9a:	f000 f98b 	bl	80071b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e9e:	4b15      	ldr	r3, [pc, #84]	; (8006ef4 <prvCheckForValidListAndQueue+0x60>)
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d120      	bne.n	8006ee8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006ea6:	4814      	ldr	r0, [pc, #80]	; (8006ef8 <prvCheckForValidListAndQueue+0x64>)
 8006ea8:	f7fd fb64 	bl	8004574 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006eac:	4813      	ldr	r0, [pc, #76]	; (8006efc <prvCheckForValidListAndQueue+0x68>)
 8006eae:	f7fd fb61 	bl	8004574 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006eb2:	4b13      	ldr	r3, [pc, #76]	; (8006f00 <prvCheckForValidListAndQueue+0x6c>)
 8006eb4:	4a10      	ldr	r2, [pc, #64]	; (8006ef8 <prvCheckForValidListAndQueue+0x64>)
 8006eb6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006eb8:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <prvCheckForValidListAndQueue+0x70>)
 8006eba:	4a10      	ldr	r2, [pc, #64]	; (8006efc <prvCheckForValidListAndQueue+0x68>)
 8006ebc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	9300      	str	r3, [sp, #0]
 8006ec2:	4b11      	ldr	r3, [pc, #68]	; (8006f08 <prvCheckForValidListAndQueue+0x74>)
 8006ec4:	4a11      	ldr	r2, [pc, #68]	; (8006f0c <prvCheckForValidListAndQueue+0x78>)
 8006ec6:	2110      	movs	r1, #16
 8006ec8:	200a      	movs	r0, #10
 8006eca:	f7fd fc6f 	bl	80047ac <xQueueGenericCreateStatic>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	4a08      	ldr	r2, [pc, #32]	; (8006ef4 <prvCheckForValidListAndQueue+0x60>)
 8006ed2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006ed4:	4b07      	ldr	r3, [pc, #28]	; (8006ef4 <prvCheckForValidListAndQueue+0x60>)
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d005      	beq.n	8006ee8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006edc:	4b05      	ldr	r3, [pc, #20]	; (8006ef4 <prvCheckForValidListAndQueue+0x60>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	490b      	ldr	r1, [pc, #44]	; (8006f10 <prvCheckForValidListAndQueue+0x7c>)
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7fe fb80 	bl	80055e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ee8:	f000 f994 	bl	8007214 <vPortExitCritical>
}
 8006eec:	bf00      	nop
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}
 8006ef2:	bf00      	nop
 8006ef4:	20000e94 	.word	0x20000e94
 8006ef8:	20000e64 	.word	0x20000e64
 8006efc:	20000e78 	.word	0x20000e78
 8006f00:	20000e8c 	.word	0x20000e8c
 8006f04:	20000e90 	.word	0x20000e90
 8006f08:	20000f40 	.word	0x20000f40
 8006f0c:	20000ea0 	.word	0x20000ea0
 8006f10:	080087d0 	.word	0x080087d0

08006f14 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b086      	sub	sp, #24
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d10a      	bne.n	8006f3c <pvTimerGetTimerID+0x28>
	__asm volatile
 8006f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2a:	f383 8811 	msr	BASEPRI, r3
 8006f2e:	f3bf 8f6f 	isb	sy
 8006f32:	f3bf 8f4f 	dsb	sy
 8006f36:	60fb      	str	r3, [r7, #12]
}
 8006f38:	bf00      	nop
 8006f3a:	e7fe      	b.n	8006f3a <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8006f3c:	f000 f93a 	bl	80071b4 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8006f40:	697b      	ldr	r3, [r7, #20]
 8006f42:	69db      	ldr	r3, [r3, #28]
 8006f44:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8006f46:	f000 f965 	bl	8007214 <vPortExitCritical>

	return pvReturn;
 8006f4a:	693b      	ldr	r3, [r7, #16]
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	3718      	adds	r7, #24
 8006f50:	46bd      	mov	sp, r7
 8006f52:	bd80      	pop	{r7, pc}

08006f54 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	3b04      	subs	r3, #4
 8006f64:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006f6c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	3b04      	subs	r3, #4
 8006f72:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	f023 0201 	bic.w	r2, r3, #1
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	3b04      	subs	r3, #4
 8006f82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006f84:	4a0c      	ldr	r2, [pc, #48]	; (8006fb8 <pxPortInitialiseStack+0x64>)
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	3b14      	subs	r3, #20
 8006f8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006f90:	687a      	ldr	r2, [r7, #4]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	3b04      	subs	r3, #4
 8006f9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f06f 0202 	mvn.w	r2, #2
 8006fa2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	3b20      	subs	r3, #32
 8006fa8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006faa:	68fb      	ldr	r3, [r7, #12]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3714      	adds	r7, #20
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb6:	4770      	bx	lr
 8006fb8:	08006fbd 	.word	0x08006fbd

08006fbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006fbc:	b480      	push	{r7}
 8006fbe:	b085      	sub	sp, #20
 8006fc0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006fc2:	2300      	movs	r3, #0
 8006fc4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006fc6:	4b12      	ldr	r3, [pc, #72]	; (8007010 <prvTaskExitError+0x54>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d00a      	beq.n	8006fe6 <prvTaskExitError+0x2a>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	60fb      	str	r3, [r7, #12]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <prvTaskExitError+0x28>
	__asm volatile
 8006fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fea:	f383 8811 	msr	BASEPRI, r3
 8006fee:	f3bf 8f6f 	isb	sy
 8006ff2:	f3bf 8f4f 	dsb	sy
 8006ff6:	60bb      	str	r3, [r7, #8]
}
 8006ff8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006ffa:	bf00      	nop
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d0fc      	beq.n	8006ffc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007002:	bf00      	nop
 8007004:	bf00      	nop
 8007006:	3714      	adds	r7, #20
 8007008:	46bd      	mov	sp, r7
 800700a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700e:	4770      	bx	lr
 8007010:	2000000c 	.word	0x2000000c
	...

08007020 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <pxCurrentTCBConst2>)
 8007022:	6819      	ldr	r1, [r3, #0]
 8007024:	6808      	ldr	r0, [r1, #0]
 8007026:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800702a:	f380 8809 	msr	PSP, r0
 800702e:	f3bf 8f6f 	isb	sy
 8007032:	f04f 0000 	mov.w	r0, #0
 8007036:	f380 8811 	msr	BASEPRI, r0
 800703a:	4770      	bx	lr
 800703c:	f3af 8000 	nop.w

08007040 <pxCurrentTCBConst2>:
 8007040:	20000964 	.word	0x20000964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007044:	bf00      	nop
 8007046:	bf00      	nop

08007048 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007048:	4808      	ldr	r0, [pc, #32]	; (800706c <prvPortStartFirstTask+0x24>)
 800704a:	6800      	ldr	r0, [r0, #0]
 800704c:	6800      	ldr	r0, [r0, #0]
 800704e:	f380 8808 	msr	MSP, r0
 8007052:	f04f 0000 	mov.w	r0, #0
 8007056:	f380 8814 	msr	CONTROL, r0
 800705a:	b662      	cpsie	i
 800705c:	b661      	cpsie	f
 800705e:	f3bf 8f4f 	dsb	sy
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	df00      	svc	0
 8007068:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800706a:	bf00      	nop
 800706c:	e000ed08 	.word	0xe000ed08

08007070 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007070:	b580      	push	{r7, lr}
 8007072:	b086      	sub	sp, #24
 8007074:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007076:	4b46      	ldr	r3, [pc, #280]	; (8007190 <xPortStartScheduler+0x120>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	4a46      	ldr	r2, [pc, #280]	; (8007194 <xPortStartScheduler+0x124>)
 800707c:	4293      	cmp	r3, r2
 800707e:	d10a      	bne.n	8007096 <xPortStartScheduler+0x26>
	__asm volatile
 8007080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007084:	f383 8811 	msr	BASEPRI, r3
 8007088:	f3bf 8f6f 	isb	sy
 800708c:	f3bf 8f4f 	dsb	sy
 8007090:	613b      	str	r3, [r7, #16]
}
 8007092:	bf00      	nop
 8007094:	e7fe      	b.n	8007094 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007096:	4b3e      	ldr	r3, [pc, #248]	; (8007190 <xPortStartScheduler+0x120>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a3f      	ldr	r2, [pc, #252]	; (8007198 <xPortStartScheduler+0x128>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d10a      	bne.n	80070b6 <xPortStartScheduler+0x46>
	__asm volatile
 80070a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a4:	f383 8811 	msr	BASEPRI, r3
 80070a8:	f3bf 8f6f 	isb	sy
 80070ac:	f3bf 8f4f 	dsb	sy
 80070b0:	60fb      	str	r3, [r7, #12]
}
 80070b2:	bf00      	nop
 80070b4:	e7fe      	b.n	80070b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80070b6:	4b39      	ldr	r3, [pc, #228]	; (800719c <xPortStartScheduler+0x12c>)
 80070b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80070ba:	697b      	ldr	r3, [r7, #20]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	b2db      	uxtb	r3, r3
 80070c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	22ff      	movs	r2, #255	; 0xff
 80070c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80070c8:	697b      	ldr	r3, [r7, #20]
 80070ca:	781b      	ldrb	r3, [r3, #0]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80070d0:	78fb      	ldrb	r3, [r7, #3]
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80070d8:	b2da      	uxtb	r2, r3
 80070da:	4b31      	ldr	r3, [pc, #196]	; (80071a0 <xPortStartScheduler+0x130>)
 80070dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80070de:	4b31      	ldr	r3, [pc, #196]	; (80071a4 <xPortStartScheduler+0x134>)
 80070e0:	2207      	movs	r2, #7
 80070e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070e4:	e009      	b.n	80070fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80070e6:	4b2f      	ldr	r3, [pc, #188]	; (80071a4 <xPortStartScheduler+0x134>)
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	3b01      	subs	r3, #1
 80070ec:	4a2d      	ldr	r2, [pc, #180]	; (80071a4 <xPortStartScheduler+0x134>)
 80070ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80070f0:	78fb      	ldrb	r3, [r7, #3]
 80070f2:	b2db      	uxtb	r3, r3
 80070f4:	005b      	lsls	r3, r3, #1
 80070f6:	b2db      	uxtb	r3, r3
 80070f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80070fa:	78fb      	ldrb	r3, [r7, #3]
 80070fc:	b2db      	uxtb	r3, r3
 80070fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007102:	2b80      	cmp	r3, #128	; 0x80
 8007104:	d0ef      	beq.n	80070e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007106:	4b27      	ldr	r3, [pc, #156]	; (80071a4 <xPortStartScheduler+0x134>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f1c3 0307 	rsb	r3, r3, #7
 800710e:	2b04      	cmp	r3, #4
 8007110:	d00a      	beq.n	8007128 <xPortStartScheduler+0xb8>
	__asm volatile
 8007112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007116:	f383 8811 	msr	BASEPRI, r3
 800711a:	f3bf 8f6f 	isb	sy
 800711e:	f3bf 8f4f 	dsb	sy
 8007122:	60bb      	str	r3, [r7, #8]
}
 8007124:	bf00      	nop
 8007126:	e7fe      	b.n	8007126 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007128:	4b1e      	ldr	r3, [pc, #120]	; (80071a4 <xPortStartScheduler+0x134>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	021b      	lsls	r3, r3, #8
 800712e:	4a1d      	ldr	r2, [pc, #116]	; (80071a4 <xPortStartScheduler+0x134>)
 8007130:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007132:	4b1c      	ldr	r3, [pc, #112]	; (80071a4 <xPortStartScheduler+0x134>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800713a:	4a1a      	ldr	r2, [pc, #104]	; (80071a4 <xPortStartScheduler+0x134>)
 800713c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	697b      	ldr	r3, [r7, #20]
 8007144:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007146:	4b18      	ldr	r3, [pc, #96]	; (80071a8 <xPortStartScheduler+0x138>)
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a17      	ldr	r2, [pc, #92]	; (80071a8 <xPortStartScheduler+0x138>)
 800714c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007150:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007152:	4b15      	ldr	r3, [pc, #84]	; (80071a8 <xPortStartScheduler+0x138>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a14      	ldr	r2, [pc, #80]	; (80071a8 <xPortStartScheduler+0x138>)
 8007158:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800715c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800715e:	f000 f8dd 	bl	800731c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007162:	4b12      	ldr	r3, [pc, #72]	; (80071ac <xPortStartScheduler+0x13c>)
 8007164:	2200      	movs	r2, #0
 8007166:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007168:	f000 f8fc 	bl	8007364 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800716c:	4b10      	ldr	r3, [pc, #64]	; (80071b0 <xPortStartScheduler+0x140>)
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	4a0f      	ldr	r2, [pc, #60]	; (80071b0 <xPortStartScheduler+0x140>)
 8007172:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007176:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007178:	f7ff ff66 	bl	8007048 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800717c:	f7fe fe8e 	bl	8005e9c <vTaskSwitchContext>
	prvTaskExitError();
 8007180:	f7ff ff1c 	bl	8006fbc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007184:	2300      	movs	r3, #0
}
 8007186:	4618      	mov	r0, r3
 8007188:	3718      	adds	r7, #24
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	e000ed00 	.word	0xe000ed00
 8007194:	410fc271 	.word	0x410fc271
 8007198:	410fc270 	.word	0x410fc270
 800719c:	e000e400 	.word	0xe000e400
 80071a0:	20000f90 	.word	0x20000f90
 80071a4:	20000f94 	.word	0x20000f94
 80071a8:	e000ed20 	.word	0xe000ed20
 80071ac:	2000000c 	.word	0x2000000c
 80071b0:	e000ef34 	.word	0xe000ef34

080071b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80071b4:	b480      	push	{r7}
 80071b6:	b083      	sub	sp, #12
 80071b8:	af00      	add	r7, sp, #0
	__asm volatile
 80071ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071be:	f383 8811 	msr	BASEPRI, r3
 80071c2:	f3bf 8f6f 	isb	sy
 80071c6:	f3bf 8f4f 	dsb	sy
 80071ca:	607b      	str	r3, [r7, #4]
}
 80071cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80071ce:	4b0f      	ldr	r3, [pc, #60]	; (800720c <vPortEnterCritical+0x58>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	3301      	adds	r3, #1
 80071d4:	4a0d      	ldr	r2, [pc, #52]	; (800720c <vPortEnterCritical+0x58>)
 80071d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80071d8:	4b0c      	ldr	r3, [pc, #48]	; (800720c <vPortEnterCritical+0x58>)
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d10f      	bne.n	8007200 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <vPortEnterCritical+0x5c>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d00a      	beq.n	8007200 <vPortEnterCritical+0x4c>
	__asm volatile
 80071ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071ee:	f383 8811 	msr	BASEPRI, r3
 80071f2:	f3bf 8f6f 	isb	sy
 80071f6:	f3bf 8f4f 	dsb	sy
 80071fa:	603b      	str	r3, [r7, #0]
}
 80071fc:	bf00      	nop
 80071fe:	e7fe      	b.n	80071fe <vPortEnterCritical+0x4a>
	}
}
 8007200:	bf00      	nop
 8007202:	370c      	adds	r7, #12
 8007204:	46bd      	mov	sp, r7
 8007206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720a:	4770      	bx	lr
 800720c:	2000000c 	.word	0x2000000c
 8007210:	e000ed04 	.word	0xe000ed04

08007214 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800721a:	4b12      	ldr	r3, [pc, #72]	; (8007264 <vPortExitCritical+0x50>)
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	2b00      	cmp	r3, #0
 8007220:	d10a      	bne.n	8007238 <vPortExitCritical+0x24>
	__asm volatile
 8007222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007226:	f383 8811 	msr	BASEPRI, r3
 800722a:	f3bf 8f6f 	isb	sy
 800722e:	f3bf 8f4f 	dsb	sy
 8007232:	607b      	str	r3, [r7, #4]
}
 8007234:	bf00      	nop
 8007236:	e7fe      	b.n	8007236 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007238:	4b0a      	ldr	r3, [pc, #40]	; (8007264 <vPortExitCritical+0x50>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3b01      	subs	r3, #1
 800723e:	4a09      	ldr	r2, [pc, #36]	; (8007264 <vPortExitCritical+0x50>)
 8007240:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007242:	4b08      	ldr	r3, [pc, #32]	; (8007264 <vPortExitCritical+0x50>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	2b00      	cmp	r3, #0
 8007248:	d105      	bne.n	8007256 <vPortExitCritical+0x42>
 800724a:	2300      	movs	r3, #0
 800724c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	f383 8811 	msr	BASEPRI, r3
}
 8007254:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007256:	bf00      	nop
 8007258:	370c      	adds	r7, #12
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr
 8007262:	bf00      	nop
 8007264:	2000000c 	.word	0x2000000c
	...

08007270 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007270:	f3ef 8009 	mrs	r0, PSP
 8007274:	f3bf 8f6f 	isb	sy
 8007278:	4b15      	ldr	r3, [pc, #84]	; (80072d0 <pxCurrentTCBConst>)
 800727a:	681a      	ldr	r2, [r3, #0]
 800727c:	f01e 0f10 	tst.w	lr, #16
 8007280:	bf08      	it	eq
 8007282:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007286:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	6010      	str	r0, [r2, #0]
 800728c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007290:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007294:	f380 8811 	msr	BASEPRI, r0
 8007298:	f3bf 8f4f 	dsb	sy
 800729c:	f3bf 8f6f 	isb	sy
 80072a0:	f7fe fdfc 	bl	8005e9c <vTaskSwitchContext>
 80072a4:	f04f 0000 	mov.w	r0, #0
 80072a8:	f380 8811 	msr	BASEPRI, r0
 80072ac:	bc09      	pop	{r0, r3}
 80072ae:	6819      	ldr	r1, [r3, #0]
 80072b0:	6808      	ldr	r0, [r1, #0]
 80072b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072b6:	f01e 0f10 	tst.w	lr, #16
 80072ba:	bf08      	it	eq
 80072bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80072c0:	f380 8809 	msr	PSP, r0
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	4770      	bx	lr
 80072ca:	bf00      	nop
 80072cc:	f3af 8000 	nop.w

080072d0 <pxCurrentTCBConst>:
 80072d0:	20000964 	.word	0x20000964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80072d4:	bf00      	nop
 80072d6:	bf00      	nop

080072d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b082      	sub	sp, #8
 80072dc:	af00      	add	r7, sp, #0
	__asm volatile
 80072de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e2:	f383 8811 	msr	BASEPRI, r3
 80072e6:	f3bf 8f6f 	isb	sy
 80072ea:	f3bf 8f4f 	dsb	sy
 80072ee:	607b      	str	r3, [r7, #4]
}
 80072f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80072f2:	f7fe fd19 	bl	8005d28 <xTaskIncrementTick>
 80072f6:	4603      	mov	r3, r0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d003      	beq.n	8007304 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80072fc:	4b06      	ldr	r3, [pc, #24]	; (8007318 <xPortSysTickHandler+0x40>)
 80072fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007302:	601a      	str	r2, [r3, #0]
 8007304:	2300      	movs	r3, #0
 8007306:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007308:	683b      	ldr	r3, [r7, #0]
 800730a:	f383 8811 	msr	BASEPRI, r3
}
 800730e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007310:	bf00      	nop
 8007312:	3708      	adds	r7, #8
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	e000ed04 	.word	0xe000ed04

0800731c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007320:	4b0b      	ldr	r3, [pc, #44]	; (8007350 <vPortSetupTimerInterrupt+0x34>)
 8007322:	2200      	movs	r2, #0
 8007324:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007326:	4b0b      	ldr	r3, [pc, #44]	; (8007354 <vPortSetupTimerInterrupt+0x38>)
 8007328:	2200      	movs	r2, #0
 800732a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800732c:	4b0a      	ldr	r3, [pc, #40]	; (8007358 <vPortSetupTimerInterrupt+0x3c>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a0a      	ldr	r2, [pc, #40]	; (800735c <vPortSetupTimerInterrupt+0x40>)
 8007332:	fba2 2303 	umull	r2, r3, r2, r3
 8007336:	099b      	lsrs	r3, r3, #6
 8007338:	4a09      	ldr	r2, [pc, #36]	; (8007360 <vPortSetupTimerInterrupt+0x44>)
 800733a:	3b01      	subs	r3, #1
 800733c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800733e:	4b04      	ldr	r3, [pc, #16]	; (8007350 <vPortSetupTimerInterrupt+0x34>)
 8007340:	2207      	movs	r2, #7
 8007342:	601a      	str	r2, [r3, #0]
}
 8007344:	bf00      	nop
 8007346:	46bd      	mov	sp, r7
 8007348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734c:	4770      	bx	lr
 800734e:	bf00      	nop
 8007350:	e000e010 	.word	0xe000e010
 8007354:	e000e018 	.word	0xe000e018
 8007358:	20000000 	.word	0x20000000
 800735c:	10624dd3 	.word	0x10624dd3
 8007360:	e000e014 	.word	0xe000e014

08007364 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007364:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007374 <vPortEnableVFP+0x10>
 8007368:	6801      	ldr	r1, [r0, #0]
 800736a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800736e:	6001      	str	r1, [r0, #0]
 8007370:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007372:	bf00      	nop
 8007374:	e000ed88 	.word	0xe000ed88

08007378 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800737e:	f3ef 8305 	mrs	r3, IPSR
 8007382:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b0f      	cmp	r3, #15
 8007388:	d914      	bls.n	80073b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800738a:	4a17      	ldr	r2, [pc, #92]	; (80073e8 <vPortValidateInterruptPriority+0x70>)
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	4413      	add	r3, r2
 8007390:	781b      	ldrb	r3, [r3, #0]
 8007392:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007394:	4b15      	ldr	r3, [pc, #84]	; (80073ec <vPortValidateInterruptPriority+0x74>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	7afa      	ldrb	r2, [r7, #11]
 800739a:	429a      	cmp	r2, r3
 800739c:	d20a      	bcs.n	80073b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	607b      	str	r3, [r7, #4]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80073b4:	4b0e      	ldr	r3, [pc, #56]	; (80073f0 <vPortValidateInterruptPriority+0x78>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80073bc:	4b0d      	ldr	r3, [pc, #52]	; (80073f4 <vPortValidateInterruptPriority+0x7c>)
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d90a      	bls.n	80073da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80073c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c8:	f383 8811 	msr	BASEPRI, r3
 80073cc:	f3bf 8f6f 	isb	sy
 80073d0:	f3bf 8f4f 	dsb	sy
 80073d4:	603b      	str	r3, [r7, #0]
}
 80073d6:	bf00      	nop
 80073d8:	e7fe      	b.n	80073d8 <vPortValidateInterruptPriority+0x60>
	}
 80073da:	bf00      	nop
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	e000e3f0 	.word	0xe000e3f0
 80073ec:	20000f90 	.word	0x20000f90
 80073f0:	e000ed0c 	.word	0xe000ed0c
 80073f4:	20000f94 	.word	0x20000f94

080073f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	; 0x28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007400:	2300      	movs	r3, #0
 8007402:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007404:	f7fe fbd4 	bl	8005bb0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007408:	4b5b      	ldr	r3, [pc, #364]	; (8007578 <pvPortMalloc+0x180>)
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d101      	bne.n	8007414 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007410:	f000 f920 	bl	8007654 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007414:	4b59      	ldr	r3, [pc, #356]	; (800757c <pvPortMalloc+0x184>)
 8007416:	681a      	ldr	r2, [r3, #0]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	4013      	ands	r3, r2
 800741c:	2b00      	cmp	r3, #0
 800741e:	f040 8093 	bne.w	8007548 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d01d      	beq.n	8007464 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007428:	2208      	movs	r2, #8
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b00      	cmp	r3, #0
 8007438:	d014      	beq.n	8007464 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f023 0307 	bic.w	r3, r3, #7
 8007440:	3308      	adds	r3, #8
 8007442:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f003 0307 	and.w	r3, r3, #7
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00a      	beq.n	8007464 <pvPortMalloc+0x6c>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	617b      	str	r3, [r7, #20]
}
 8007460:	bf00      	nop
 8007462:	e7fe      	b.n	8007462 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d06e      	beq.n	8007548 <pvPortMalloc+0x150>
 800746a:	4b45      	ldr	r3, [pc, #276]	; (8007580 <pvPortMalloc+0x188>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	687a      	ldr	r2, [r7, #4]
 8007470:	429a      	cmp	r2, r3
 8007472:	d869      	bhi.n	8007548 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007474:	4b43      	ldr	r3, [pc, #268]	; (8007584 <pvPortMalloc+0x18c>)
 8007476:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007478:	4b42      	ldr	r3, [pc, #264]	; (8007584 <pvPortMalloc+0x18c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800747e:	e004      	b.n	800748a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	429a      	cmp	r2, r3
 8007492:	d903      	bls.n	800749c <pvPortMalloc+0xa4>
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1f1      	bne.n	8007480 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800749c:	4b36      	ldr	r3, [pc, #216]	; (8007578 <pvPortMalloc+0x180>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d050      	beq.n	8007548 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80074a6:	6a3b      	ldr	r3, [r7, #32]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	2208      	movs	r2, #8
 80074ac:	4413      	add	r3, r2
 80074ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80074b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074b2:	681a      	ldr	r2, [r3, #0]
 80074b4:	6a3b      	ldr	r3, [r7, #32]
 80074b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	2308      	movs	r3, #8
 80074c2:	005b      	lsls	r3, r3, #1
 80074c4:	429a      	cmp	r2, r3
 80074c6:	d91f      	bls.n	8007508 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80074c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	4413      	add	r3, r2
 80074ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80074d0:	69bb      	ldr	r3, [r7, #24]
 80074d2:	f003 0307 	and.w	r3, r3, #7
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00a      	beq.n	80074f0 <pvPortMalloc+0xf8>
	__asm volatile
 80074da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074de:	f383 8811 	msr	BASEPRI, r3
 80074e2:	f3bf 8f6f 	isb	sy
 80074e6:	f3bf 8f4f 	dsb	sy
 80074ea:	613b      	str	r3, [r7, #16]
}
 80074ec:	bf00      	nop
 80074ee:	e7fe      	b.n	80074ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	685a      	ldr	r2, [r3, #4]
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	1ad2      	subs	r2, r2, r3
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80074fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fe:	687a      	ldr	r2, [r7, #4]
 8007500:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007502:	69b8      	ldr	r0, [r7, #24]
 8007504:	f000 f908 	bl	8007718 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007508:	4b1d      	ldr	r3, [pc, #116]	; (8007580 <pvPortMalloc+0x188>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800750e:	685b      	ldr	r3, [r3, #4]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	4a1b      	ldr	r2, [pc, #108]	; (8007580 <pvPortMalloc+0x188>)
 8007514:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007516:	4b1a      	ldr	r3, [pc, #104]	; (8007580 <pvPortMalloc+0x188>)
 8007518:	681a      	ldr	r2, [r3, #0]
 800751a:	4b1b      	ldr	r3, [pc, #108]	; (8007588 <pvPortMalloc+0x190>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	429a      	cmp	r2, r3
 8007520:	d203      	bcs.n	800752a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007522:	4b17      	ldr	r3, [pc, #92]	; (8007580 <pvPortMalloc+0x188>)
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a18      	ldr	r2, [pc, #96]	; (8007588 <pvPortMalloc+0x190>)
 8007528:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800752a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800752c:	685a      	ldr	r2, [r3, #4]
 800752e:	4b13      	ldr	r3, [pc, #76]	; (800757c <pvPortMalloc+0x184>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	431a      	orrs	r2, r3
 8007534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007536:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800753a:	2200      	movs	r2, #0
 800753c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800753e:	4b13      	ldr	r3, [pc, #76]	; (800758c <pvPortMalloc+0x194>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3301      	adds	r3, #1
 8007544:	4a11      	ldr	r2, [pc, #68]	; (800758c <pvPortMalloc+0x194>)
 8007546:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007548:	f7fe fb40 	bl	8005bcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800754c:	69fb      	ldr	r3, [r7, #28]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00a      	beq.n	800756c <pvPortMalloc+0x174>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	; 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	60fb      	str	r3, [r7, #12]
}
 8007568:	bf00      	nop
 800756a:	e7fe      	b.n	800756a <pvPortMalloc+0x172>
	return pvReturn;
 800756c:	69fb      	ldr	r3, [r7, #28]
}
 800756e:	4618      	mov	r0, r3
 8007570:	3728      	adds	r7, #40	; 0x28
 8007572:	46bd      	mov	sp, r7
 8007574:	bd80      	pop	{r7, pc}
 8007576:	bf00      	nop
 8007578:	20004a38 	.word	0x20004a38
 800757c:	20004a4c 	.word	0x20004a4c
 8007580:	20004a3c 	.word	0x20004a3c
 8007584:	20004a30 	.word	0x20004a30
 8007588:	20004a40 	.word	0x20004a40
 800758c:	20004a44 	.word	0x20004a44

08007590 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007590:	b580      	push	{r7, lr}
 8007592:	b086      	sub	sp, #24
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d04d      	beq.n	800763e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80075a2:	2308      	movs	r3, #8
 80075a4:	425b      	negs	r3, r3
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	4413      	add	r3, r2
 80075aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80075b0:	693b      	ldr	r3, [r7, #16]
 80075b2:	685a      	ldr	r2, [r3, #4]
 80075b4:	4b24      	ldr	r3, [pc, #144]	; (8007648 <vPortFree+0xb8>)
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	4013      	ands	r3, r2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d10a      	bne.n	80075d4 <vPortFree+0x44>
	__asm volatile
 80075be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075c2:	f383 8811 	msr	BASEPRI, r3
 80075c6:	f3bf 8f6f 	isb	sy
 80075ca:	f3bf 8f4f 	dsb	sy
 80075ce:	60fb      	str	r3, [r7, #12]
}
 80075d0:	bf00      	nop
 80075d2:	e7fe      	b.n	80075d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00a      	beq.n	80075f2 <vPortFree+0x62>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	60bb      	str	r3, [r7, #8]
}
 80075ee:	bf00      	nop
 80075f0:	e7fe      	b.n	80075f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	685a      	ldr	r2, [r3, #4]
 80075f6:	4b14      	ldr	r3, [pc, #80]	; (8007648 <vPortFree+0xb8>)
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	4013      	ands	r3, r2
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d01e      	beq.n	800763e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007600:	693b      	ldr	r3, [r7, #16]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2b00      	cmp	r3, #0
 8007606:	d11a      	bne.n	800763e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007608:	693b      	ldr	r3, [r7, #16]
 800760a:	685a      	ldr	r2, [r3, #4]
 800760c:	4b0e      	ldr	r3, [pc, #56]	; (8007648 <vPortFree+0xb8>)
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	43db      	mvns	r3, r3
 8007612:	401a      	ands	r2, r3
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007618:	f7fe faca 	bl	8005bb0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	685a      	ldr	r2, [r3, #4]
 8007620:	4b0a      	ldr	r3, [pc, #40]	; (800764c <vPortFree+0xbc>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	4413      	add	r3, r2
 8007626:	4a09      	ldr	r2, [pc, #36]	; (800764c <vPortFree+0xbc>)
 8007628:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800762a:	6938      	ldr	r0, [r7, #16]
 800762c:	f000 f874 	bl	8007718 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007630:	4b07      	ldr	r3, [pc, #28]	; (8007650 <vPortFree+0xc0>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3301      	adds	r3, #1
 8007636:	4a06      	ldr	r2, [pc, #24]	; (8007650 <vPortFree+0xc0>)
 8007638:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800763a:	f7fe fac7 	bl	8005bcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800763e:	bf00      	nop
 8007640:	3718      	adds	r7, #24
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20004a4c 	.word	0x20004a4c
 800764c:	20004a3c 	.word	0x20004a3c
 8007650:	20004a48 	.word	0x20004a48

08007654 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800765a:	f643 2398 	movw	r3, #15000	; 0x3a98
 800765e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007660:	4b27      	ldr	r3, [pc, #156]	; (8007700 <prvHeapInit+0xac>)
 8007662:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f003 0307 	and.w	r3, r3, #7
 800766a:	2b00      	cmp	r3, #0
 800766c:	d00c      	beq.n	8007688 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	3307      	adds	r3, #7
 8007672:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800767c:	68ba      	ldr	r2, [r7, #8]
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	1ad3      	subs	r3, r2, r3
 8007682:	4a1f      	ldr	r2, [pc, #124]	; (8007700 <prvHeapInit+0xac>)
 8007684:	4413      	add	r3, r2
 8007686:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800768c:	4a1d      	ldr	r2, [pc, #116]	; (8007704 <prvHeapInit+0xb0>)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007692:	4b1c      	ldr	r3, [pc, #112]	; (8007704 <prvHeapInit+0xb0>)
 8007694:	2200      	movs	r2, #0
 8007696:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	68ba      	ldr	r2, [r7, #8]
 800769c:	4413      	add	r3, r2
 800769e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80076a0:	2208      	movs	r2, #8
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	1a9b      	subs	r3, r3, r2
 80076a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f023 0307 	bic.w	r3, r3, #7
 80076ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	4a15      	ldr	r2, [pc, #84]	; (8007708 <prvHeapInit+0xb4>)
 80076b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80076b6:	4b14      	ldr	r3, [pc, #80]	; (8007708 <prvHeapInit+0xb4>)
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	2200      	movs	r2, #0
 80076bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80076be:	4b12      	ldr	r3, [pc, #72]	; (8007708 <prvHeapInit+0xb4>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	2200      	movs	r2, #0
 80076c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	1ad2      	subs	r2, r2, r3
 80076d0:	683b      	ldr	r3, [r7, #0]
 80076d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80076d4:	4b0c      	ldr	r3, [pc, #48]	; (8007708 <prvHeapInit+0xb4>)
 80076d6:	681a      	ldr	r2, [r3, #0]
 80076d8:	683b      	ldr	r3, [r7, #0]
 80076da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	4a0a      	ldr	r2, [pc, #40]	; (800770c <prvHeapInit+0xb8>)
 80076e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	4a09      	ldr	r2, [pc, #36]	; (8007710 <prvHeapInit+0xbc>)
 80076ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80076ec:	4b09      	ldr	r3, [pc, #36]	; (8007714 <prvHeapInit+0xc0>)
 80076ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80076f2:	601a      	str	r2, [r3, #0]
}
 80076f4:	bf00      	nop
 80076f6:	3714      	adds	r7, #20
 80076f8:	46bd      	mov	sp, r7
 80076fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fe:	4770      	bx	lr
 8007700:	20000f98 	.word	0x20000f98
 8007704:	20004a30 	.word	0x20004a30
 8007708:	20004a38 	.word	0x20004a38
 800770c:	20004a40 	.word	0x20004a40
 8007710:	20004a3c 	.word	0x20004a3c
 8007714:	20004a4c 	.word	0x20004a4c

08007718 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007720:	4b28      	ldr	r3, [pc, #160]	; (80077c4 <prvInsertBlockIntoFreeList+0xac>)
 8007722:	60fb      	str	r3, [r7, #12]
 8007724:	e002      	b.n	800772c <prvInsertBlockIntoFreeList+0x14>
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	60fb      	str	r3, [r7, #12]
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	687a      	ldr	r2, [r7, #4]
 8007732:	429a      	cmp	r2, r3
 8007734:	d8f7      	bhi.n	8007726 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	685b      	ldr	r3, [r3, #4]
 800773e:	68ba      	ldr	r2, [r7, #8]
 8007740:	4413      	add	r3, r2
 8007742:	687a      	ldr	r2, [r7, #4]
 8007744:	429a      	cmp	r2, r3
 8007746:	d108      	bne.n	800775a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	685a      	ldr	r2, [r3, #4]
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	441a      	add	r2, r3
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	685b      	ldr	r3, [r3, #4]
 8007762:	68ba      	ldr	r2, [r7, #8]
 8007764:	441a      	add	r2, r3
 8007766:	68fb      	ldr	r3, [r7, #12]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	429a      	cmp	r2, r3
 800776c:	d118      	bne.n	80077a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	4b15      	ldr	r3, [pc, #84]	; (80077c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	429a      	cmp	r2, r3
 8007778:	d00d      	beq.n	8007796 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	685a      	ldr	r2, [r3, #4]
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	685b      	ldr	r3, [r3, #4]
 8007784:	441a      	add	r2, r3
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	681a      	ldr	r2, [r3, #0]
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	601a      	str	r2, [r3, #0]
 8007794:	e008      	b.n	80077a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007796:	4b0c      	ldr	r3, [pc, #48]	; (80077c8 <prvInsertBlockIntoFreeList+0xb0>)
 8007798:	681a      	ldr	r2, [r3, #0]
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	601a      	str	r2, [r3, #0]
 800779e:	e003      	b.n	80077a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681a      	ldr	r2, [r3, #0]
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80077a8:	68fa      	ldr	r2, [r7, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	429a      	cmp	r2, r3
 80077ae:	d002      	beq.n	80077b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	687a      	ldr	r2, [r7, #4]
 80077b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80077b6:	bf00      	nop
 80077b8:	3714      	adds	r7, #20
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	20004a30 	.word	0x20004a30
 80077c8:	20004a38 	.word	0x20004a38

080077cc <std>:
 80077cc:	2300      	movs	r3, #0
 80077ce:	b510      	push	{r4, lr}
 80077d0:	4604      	mov	r4, r0
 80077d2:	e9c0 3300 	strd	r3, r3, [r0]
 80077d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80077da:	6083      	str	r3, [r0, #8]
 80077dc:	8181      	strh	r1, [r0, #12]
 80077de:	6643      	str	r3, [r0, #100]	; 0x64
 80077e0:	81c2      	strh	r2, [r0, #14]
 80077e2:	6183      	str	r3, [r0, #24]
 80077e4:	4619      	mov	r1, r3
 80077e6:	2208      	movs	r2, #8
 80077e8:	305c      	adds	r0, #92	; 0x5c
 80077ea:	f000 f906 	bl	80079fa <memset>
 80077ee:	4b0d      	ldr	r3, [pc, #52]	; (8007824 <std+0x58>)
 80077f0:	6263      	str	r3, [r4, #36]	; 0x24
 80077f2:	4b0d      	ldr	r3, [pc, #52]	; (8007828 <std+0x5c>)
 80077f4:	62a3      	str	r3, [r4, #40]	; 0x28
 80077f6:	4b0d      	ldr	r3, [pc, #52]	; (800782c <std+0x60>)
 80077f8:	62e3      	str	r3, [r4, #44]	; 0x2c
 80077fa:	4b0d      	ldr	r3, [pc, #52]	; (8007830 <std+0x64>)
 80077fc:	6323      	str	r3, [r4, #48]	; 0x30
 80077fe:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <std+0x68>)
 8007800:	6224      	str	r4, [r4, #32]
 8007802:	429c      	cmp	r4, r3
 8007804:	d006      	beq.n	8007814 <std+0x48>
 8007806:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800780a:	4294      	cmp	r4, r2
 800780c:	d002      	beq.n	8007814 <std+0x48>
 800780e:	33d0      	adds	r3, #208	; 0xd0
 8007810:	429c      	cmp	r4, r3
 8007812:	d105      	bne.n	8007820 <std+0x54>
 8007814:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007818:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800781c:	f000 b9bc 	b.w	8007b98 <__retarget_lock_init_recursive>
 8007820:	bd10      	pop	{r4, pc}
 8007822:	bf00      	nop
 8007824:	08007975 	.word	0x08007975
 8007828:	08007997 	.word	0x08007997
 800782c:	080079cf 	.word	0x080079cf
 8007830:	080079f3 	.word	0x080079f3
 8007834:	20004a50 	.word	0x20004a50

08007838 <stdio_exit_handler>:
 8007838:	4a02      	ldr	r2, [pc, #8]	; (8007844 <stdio_exit_handler+0xc>)
 800783a:	4903      	ldr	r1, [pc, #12]	; (8007848 <stdio_exit_handler+0x10>)
 800783c:	4803      	ldr	r0, [pc, #12]	; (800784c <stdio_exit_handler+0x14>)
 800783e:	f000 b869 	b.w	8007914 <_fwalk_sglue>
 8007842:	bf00      	nop
 8007844:	20000010 	.word	0x20000010
 8007848:	08008461 	.word	0x08008461
 800784c:	2000001c 	.word	0x2000001c

08007850 <cleanup_stdio>:
 8007850:	6841      	ldr	r1, [r0, #4]
 8007852:	4b0c      	ldr	r3, [pc, #48]	; (8007884 <cleanup_stdio+0x34>)
 8007854:	4299      	cmp	r1, r3
 8007856:	b510      	push	{r4, lr}
 8007858:	4604      	mov	r4, r0
 800785a:	d001      	beq.n	8007860 <cleanup_stdio+0x10>
 800785c:	f000 fe00 	bl	8008460 <_fflush_r>
 8007860:	68a1      	ldr	r1, [r4, #8]
 8007862:	4b09      	ldr	r3, [pc, #36]	; (8007888 <cleanup_stdio+0x38>)
 8007864:	4299      	cmp	r1, r3
 8007866:	d002      	beq.n	800786e <cleanup_stdio+0x1e>
 8007868:	4620      	mov	r0, r4
 800786a:	f000 fdf9 	bl	8008460 <_fflush_r>
 800786e:	68e1      	ldr	r1, [r4, #12]
 8007870:	4b06      	ldr	r3, [pc, #24]	; (800788c <cleanup_stdio+0x3c>)
 8007872:	4299      	cmp	r1, r3
 8007874:	d004      	beq.n	8007880 <cleanup_stdio+0x30>
 8007876:	4620      	mov	r0, r4
 8007878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800787c:	f000 bdf0 	b.w	8008460 <_fflush_r>
 8007880:	bd10      	pop	{r4, pc}
 8007882:	bf00      	nop
 8007884:	20004a50 	.word	0x20004a50
 8007888:	20004ab8 	.word	0x20004ab8
 800788c:	20004b20 	.word	0x20004b20

08007890 <global_stdio_init.part.0>:
 8007890:	b510      	push	{r4, lr}
 8007892:	4b0b      	ldr	r3, [pc, #44]	; (80078c0 <global_stdio_init.part.0+0x30>)
 8007894:	4c0b      	ldr	r4, [pc, #44]	; (80078c4 <global_stdio_init.part.0+0x34>)
 8007896:	4a0c      	ldr	r2, [pc, #48]	; (80078c8 <global_stdio_init.part.0+0x38>)
 8007898:	601a      	str	r2, [r3, #0]
 800789a:	4620      	mov	r0, r4
 800789c:	2200      	movs	r2, #0
 800789e:	2104      	movs	r1, #4
 80078a0:	f7ff ff94 	bl	80077cc <std>
 80078a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80078a8:	2201      	movs	r2, #1
 80078aa:	2109      	movs	r1, #9
 80078ac:	f7ff ff8e 	bl	80077cc <std>
 80078b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80078b4:	2202      	movs	r2, #2
 80078b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078ba:	2112      	movs	r1, #18
 80078bc:	f7ff bf86 	b.w	80077cc <std>
 80078c0:	20004b88 	.word	0x20004b88
 80078c4:	20004a50 	.word	0x20004a50
 80078c8:	08007839 	.word	0x08007839

080078cc <__sfp_lock_acquire>:
 80078cc:	4801      	ldr	r0, [pc, #4]	; (80078d4 <__sfp_lock_acquire+0x8>)
 80078ce:	f000 b964 	b.w	8007b9a <__retarget_lock_acquire_recursive>
 80078d2:	bf00      	nop
 80078d4:	20004b91 	.word	0x20004b91

080078d8 <__sfp_lock_release>:
 80078d8:	4801      	ldr	r0, [pc, #4]	; (80078e0 <__sfp_lock_release+0x8>)
 80078da:	f000 b95f 	b.w	8007b9c <__retarget_lock_release_recursive>
 80078de:	bf00      	nop
 80078e0:	20004b91 	.word	0x20004b91

080078e4 <__sinit>:
 80078e4:	b510      	push	{r4, lr}
 80078e6:	4604      	mov	r4, r0
 80078e8:	f7ff fff0 	bl	80078cc <__sfp_lock_acquire>
 80078ec:	6a23      	ldr	r3, [r4, #32]
 80078ee:	b11b      	cbz	r3, 80078f8 <__sinit+0x14>
 80078f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80078f4:	f7ff bff0 	b.w	80078d8 <__sfp_lock_release>
 80078f8:	4b04      	ldr	r3, [pc, #16]	; (800790c <__sinit+0x28>)
 80078fa:	6223      	str	r3, [r4, #32]
 80078fc:	4b04      	ldr	r3, [pc, #16]	; (8007910 <__sinit+0x2c>)
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d1f5      	bne.n	80078f0 <__sinit+0xc>
 8007904:	f7ff ffc4 	bl	8007890 <global_stdio_init.part.0>
 8007908:	e7f2      	b.n	80078f0 <__sinit+0xc>
 800790a:	bf00      	nop
 800790c:	08007851 	.word	0x08007851
 8007910:	20004b88 	.word	0x20004b88

08007914 <_fwalk_sglue>:
 8007914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007918:	4607      	mov	r7, r0
 800791a:	4688      	mov	r8, r1
 800791c:	4614      	mov	r4, r2
 800791e:	2600      	movs	r6, #0
 8007920:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007924:	f1b9 0901 	subs.w	r9, r9, #1
 8007928:	d505      	bpl.n	8007936 <_fwalk_sglue+0x22>
 800792a:	6824      	ldr	r4, [r4, #0]
 800792c:	2c00      	cmp	r4, #0
 800792e:	d1f7      	bne.n	8007920 <_fwalk_sglue+0xc>
 8007930:	4630      	mov	r0, r6
 8007932:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007936:	89ab      	ldrh	r3, [r5, #12]
 8007938:	2b01      	cmp	r3, #1
 800793a:	d907      	bls.n	800794c <_fwalk_sglue+0x38>
 800793c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007940:	3301      	adds	r3, #1
 8007942:	d003      	beq.n	800794c <_fwalk_sglue+0x38>
 8007944:	4629      	mov	r1, r5
 8007946:	4638      	mov	r0, r7
 8007948:	47c0      	blx	r8
 800794a:	4306      	orrs	r6, r0
 800794c:	3568      	adds	r5, #104	; 0x68
 800794e:	e7e9      	b.n	8007924 <_fwalk_sglue+0x10>

08007950 <iprintf>:
 8007950:	b40f      	push	{r0, r1, r2, r3}
 8007952:	b507      	push	{r0, r1, r2, lr}
 8007954:	4906      	ldr	r1, [pc, #24]	; (8007970 <iprintf+0x20>)
 8007956:	ab04      	add	r3, sp, #16
 8007958:	6808      	ldr	r0, [r1, #0]
 800795a:	f853 2b04 	ldr.w	r2, [r3], #4
 800795e:	6881      	ldr	r1, [r0, #8]
 8007960:	9301      	str	r3, [sp, #4]
 8007962:	f000 fa4d 	bl	8007e00 <_vfiprintf_r>
 8007966:	b003      	add	sp, #12
 8007968:	f85d eb04 	ldr.w	lr, [sp], #4
 800796c:	b004      	add	sp, #16
 800796e:	4770      	bx	lr
 8007970:	20000068 	.word	0x20000068

08007974 <__sread>:
 8007974:	b510      	push	{r4, lr}
 8007976:	460c      	mov	r4, r1
 8007978:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800797c:	f000 f8be 	bl	8007afc <_read_r>
 8007980:	2800      	cmp	r0, #0
 8007982:	bfab      	itete	ge
 8007984:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007986:	89a3      	ldrhlt	r3, [r4, #12]
 8007988:	181b      	addge	r3, r3, r0
 800798a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800798e:	bfac      	ite	ge
 8007990:	6563      	strge	r3, [r4, #84]	; 0x54
 8007992:	81a3      	strhlt	r3, [r4, #12]
 8007994:	bd10      	pop	{r4, pc}

08007996 <__swrite>:
 8007996:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800799a:	461f      	mov	r7, r3
 800799c:	898b      	ldrh	r3, [r1, #12]
 800799e:	05db      	lsls	r3, r3, #23
 80079a0:	4605      	mov	r5, r0
 80079a2:	460c      	mov	r4, r1
 80079a4:	4616      	mov	r6, r2
 80079a6:	d505      	bpl.n	80079b4 <__swrite+0x1e>
 80079a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ac:	2302      	movs	r3, #2
 80079ae:	2200      	movs	r2, #0
 80079b0:	f000 f892 	bl	8007ad8 <_lseek_r>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	4632      	mov	r2, r6
 80079c2:	463b      	mov	r3, r7
 80079c4:	4628      	mov	r0, r5
 80079c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079ca:	f000 b8a9 	b.w	8007b20 <_write_r>

080079ce <__sseek>:
 80079ce:	b510      	push	{r4, lr}
 80079d0:	460c      	mov	r4, r1
 80079d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079d6:	f000 f87f 	bl	8007ad8 <_lseek_r>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	bf15      	itete	ne
 80079e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80079e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079ea:	81a3      	strheq	r3, [r4, #12]
 80079ec:	bf18      	it	ne
 80079ee:	81a3      	strhne	r3, [r4, #12]
 80079f0:	bd10      	pop	{r4, pc}

080079f2 <__sclose>:
 80079f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079f6:	f000 b809 	b.w	8007a0c <_close_r>

080079fa <memset>:
 80079fa:	4402      	add	r2, r0
 80079fc:	4603      	mov	r3, r0
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d100      	bne.n	8007a04 <memset+0xa>
 8007a02:	4770      	bx	lr
 8007a04:	f803 1b01 	strb.w	r1, [r3], #1
 8007a08:	e7f9      	b.n	80079fe <memset+0x4>
	...

08007a0c <_close_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	4d06      	ldr	r5, [pc, #24]	; (8007a28 <_close_r+0x1c>)
 8007a10:	2300      	movs	r3, #0
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7f9 fb2d 	bl	8001076 <_close>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_close_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_close_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	20004b8c 	.word	0x20004b8c

08007a2c <_reclaim_reent>:
 8007a2c:	4b29      	ldr	r3, [pc, #164]	; (8007ad4 <_reclaim_reent+0xa8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	4283      	cmp	r3, r0
 8007a32:	b570      	push	{r4, r5, r6, lr}
 8007a34:	4604      	mov	r4, r0
 8007a36:	d04b      	beq.n	8007ad0 <_reclaim_reent+0xa4>
 8007a38:	69c3      	ldr	r3, [r0, #28]
 8007a3a:	b143      	cbz	r3, 8007a4e <_reclaim_reent+0x22>
 8007a3c:	68db      	ldr	r3, [r3, #12]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d144      	bne.n	8007acc <_reclaim_reent+0xa0>
 8007a42:	69e3      	ldr	r3, [r4, #28]
 8007a44:	6819      	ldr	r1, [r3, #0]
 8007a46:	b111      	cbz	r1, 8007a4e <_reclaim_reent+0x22>
 8007a48:	4620      	mov	r0, r4
 8007a4a:	f000 f8b7 	bl	8007bbc <_free_r>
 8007a4e:	6961      	ldr	r1, [r4, #20]
 8007a50:	b111      	cbz	r1, 8007a58 <_reclaim_reent+0x2c>
 8007a52:	4620      	mov	r0, r4
 8007a54:	f000 f8b2 	bl	8007bbc <_free_r>
 8007a58:	69e1      	ldr	r1, [r4, #28]
 8007a5a:	b111      	cbz	r1, 8007a62 <_reclaim_reent+0x36>
 8007a5c:	4620      	mov	r0, r4
 8007a5e:	f000 f8ad 	bl	8007bbc <_free_r>
 8007a62:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007a64:	b111      	cbz	r1, 8007a6c <_reclaim_reent+0x40>
 8007a66:	4620      	mov	r0, r4
 8007a68:	f000 f8a8 	bl	8007bbc <_free_r>
 8007a6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a6e:	b111      	cbz	r1, 8007a76 <_reclaim_reent+0x4a>
 8007a70:	4620      	mov	r0, r4
 8007a72:	f000 f8a3 	bl	8007bbc <_free_r>
 8007a76:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007a78:	b111      	cbz	r1, 8007a80 <_reclaim_reent+0x54>
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f000 f89e 	bl	8007bbc <_free_r>
 8007a80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007a82:	b111      	cbz	r1, 8007a8a <_reclaim_reent+0x5e>
 8007a84:	4620      	mov	r0, r4
 8007a86:	f000 f899 	bl	8007bbc <_free_r>
 8007a8a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007a8c:	b111      	cbz	r1, 8007a94 <_reclaim_reent+0x68>
 8007a8e:	4620      	mov	r0, r4
 8007a90:	f000 f894 	bl	8007bbc <_free_r>
 8007a94:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007a96:	b111      	cbz	r1, 8007a9e <_reclaim_reent+0x72>
 8007a98:	4620      	mov	r0, r4
 8007a9a:	f000 f88f 	bl	8007bbc <_free_r>
 8007a9e:	6a23      	ldr	r3, [r4, #32]
 8007aa0:	b1b3      	cbz	r3, 8007ad0 <_reclaim_reent+0xa4>
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007aa8:	4718      	bx	r3
 8007aaa:	5949      	ldr	r1, [r1, r5]
 8007aac:	b941      	cbnz	r1, 8007ac0 <_reclaim_reent+0x94>
 8007aae:	3504      	adds	r5, #4
 8007ab0:	69e3      	ldr	r3, [r4, #28]
 8007ab2:	2d80      	cmp	r5, #128	; 0x80
 8007ab4:	68d9      	ldr	r1, [r3, #12]
 8007ab6:	d1f8      	bne.n	8007aaa <_reclaim_reent+0x7e>
 8007ab8:	4620      	mov	r0, r4
 8007aba:	f000 f87f 	bl	8007bbc <_free_r>
 8007abe:	e7c0      	b.n	8007a42 <_reclaim_reent+0x16>
 8007ac0:	680e      	ldr	r6, [r1, #0]
 8007ac2:	4620      	mov	r0, r4
 8007ac4:	f000 f87a 	bl	8007bbc <_free_r>
 8007ac8:	4631      	mov	r1, r6
 8007aca:	e7ef      	b.n	8007aac <_reclaim_reent+0x80>
 8007acc:	2500      	movs	r5, #0
 8007ace:	e7ef      	b.n	8007ab0 <_reclaim_reent+0x84>
 8007ad0:	bd70      	pop	{r4, r5, r6, pc}
 8007ad2:	bf00      	nop
 8007ad4:	20000068 	.word	0x20000068

08007ad8 <_lseek_r>:
 8007ad8:	b538      	push	{r3, r4, r5, lr}
 8007ada:	4d07      	ldr	r5, [pc, #28]	; (8007af8 <_lseek_r+0x20>)
 8007adc:	4604      	mov	r4, r0
 8007ade:	4608      	mov	r0, r1
 8007ae0:	4611      	mov	r1, r2
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	602a      	str	r2, [r5, #0]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f7f9 faec 	bl	80010c4 <_lseek>
 8007aec:	1c43      	adds	r3, r0, #1
 8007aee:	d102      	bne.n	8007af6 <_lseek_r+0x1e>
 8007af0:	682b      	ldr	r3, [r5, #0]
 8007af2:	b103      	cbz	r3, 8007af6 <_lseek_r+0x1e>
 8007af4:	6023      	str	r3, [r4, #0]
 8007af6:	bd38      	pop	{r3, r4, r5, pc}
 8007af8:	20004b8c 	.word	0x20004b8c

08007afc <_read_r>:
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4d07      	ldr	r5, [pc, #28]	; (8007b1c <_read_r+0x20>)
 8007b00:	4604      	mov	r4, r0
 8007b02:	4608      	mov	r0, r1
 8007b04:	4611      	mov	r1, r2
 8007b06:	2200      	movs	r2, #0
 8007b08:	602a      	str	r2, [r5, #0]
 8007b0a:	461a      	mov	r2, r3
 8007b0c:	f7f9 fa7a 	bl	8001004 <_read>
 8007b10:	1c43      	adds	r3, r0, #1
 8007b12:	d102      	bne.n	8007b1a <_read_r+0x1e>
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	b103      	cbz	r3, 8007b1a <_read_r+0x1e>
 8007b18:	6023      	str	r3, [r4, #0]
 8007b1a:	bd38      	pop	{r3, r4, r5, pc}
 8007b1c:	20004b8c 	.word	0x20004b8c

08007b20 <_write_r>:
 8007b20:	b538      	push	{r3, r4, r5, lr}
 8007b22:	4d07      	ldr	r5, [pc, #28]	; (8007b40 <_write_r+0x20>)
 8007b24:	4604      	mov	r4, r0
 8007b26:	4608      	mov	r0, r1
 8007b28:	4611      	mov	r1, r2
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	602a      	str	r2, [r5, #0]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f7f9 fa85 	bl	800103e <_write>
 8007b34:	1c43      	adds	r3, r0, #1
 8007b36:	d102      	bne.n	8007b3e <_write_r+0x1e>
 8007b38:	682b      	ldr	r3, [r5, #0]
 8007b3a:	b103      	cbz	r3, 8007b3e <_write_r+0x1e>
 8007b3c:	6023      	str	r3, [r4, #0]
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	20004b8c 	.word	0x20004b8c

08007b44 <__errno>:
 8007b44:	4b01      	ldr	r3, [pc, #4]	; (8007b4c <__errno+0x8>)
 8007b46:	6818      	ldr	r0, [r3, #0]
 8007b48:	4770      	bx	lr
 8007b4a:	bf00      	nop
 8007b4c:	20000068 	.word	0x20000068

08007b50 <__libc_init_array>:
 8007b50:	b570      	push	{r4, r5, r6, lr}
 8007b52:	4d0d      	ldr	r5, [pc, #52]	; (8007b88 <__libc_init_array+0x38>)
 8007b54:	4c0d      	ldr	r4, [pc, #52]	; (8007b8c <__libc_init_array+0x3c>)
 8007b56:	1b64      	subs	r4, r4, r5
 8007b58:	10a4      	asrs	r4, r4, #2
 8007b5a:	2600      	movs	r6, #0
 8007b5c:	42a6      	cmp	r6, r4
 8007b5e:	d109      	bne.n	8007b74 <__libc_init_array+0x24>
 8007b60:	4d0b      	ldr	r5, [pc, #44]	; (8007b90 <__libc_init_array+0x40>)
 8007b62:	4c0c      	ldr	r4, [pc, #48]	; (8007b94 <__libc_init_array+0x44>)
 8007b64:	f000 fdce 	bl	8008704 <_init>
 8007b68:	1b64      	subs	r4, r4, r5
 8007b6a:	10a4      	asrs	r4, r4, #2
 8007b6c:	2600      	movs	r6, #0
 8007b6e:	42a6      	cmp	r6, r4
 8007b70:	d105      	bne.n	8007b7e <__libc_init_array+0x2e>
 8007b72:	bd70      	pop	{r4, r5, r6, pc}
 8007b74:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b78:	4798      	blx	r3
 8007b7a:	3601      	adds	r6, #1
 8007b7c:	e7ee      	b.n	8007b5c <__libc_init_array+0xc>
 8007b7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b82:	4798      	blx	r3
 8007b84:	3601      	adds	r6, #1
 8007b86:	e7f2      	b.n	8007b6e <__libc_init_array+0x1e>
 8007b88:	08008928 	.word	0x08008928
 8007b8c:	08008928 	.word	0x08008928
 8007b90:	08008928 	.word	0x08008928
 8007b94:	0800892c 	.word	0x0800892c

08007b98 <__retarget_lock_init_recursive>:
 8007b98:	4770      	bx	lr

08007b9a <__retarget_lock_acquire_recursive>:
 8007b9a:	4770      	bx	lr

08007b9c <__retarget_lock_release_recursive>:
 8007b9c:	4770      	bx	lr

08007b9e <memcpy>:
 8007b9e:	440a      	add	r2, r1
 8007ba0:	4291      	cmp	r1, r2
 8007ba2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ba6:	d100      	bne.n	8007baa <memcpy+0xc>
 8007ba8:	4770      	bx	lr
 8007baa:	b510      	push	{r4, lr}
 8007bac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007bb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007bb4:	4291      	cmp	r1, r2
 8007bb6:	d1f9      	bne.n	8007bac <memcpy+0xe>
 8007bb8:	bd10      	pop	{r4, pc}
	...

08007bbc <_free_r>:
 8007bbc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007bbe:	2900      	cmp	r1, #0
 8007bc0:	d044      	beq.n	8007c4c <_free_r+0x90>
 8007bc2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007bc6:	9001      	str	r0, [sp, #4]
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	f1a1 0404 	sub.w	r4, r1, #4
 8007bce:	bfb8      	it	lt
 8007bd0:	18e4      	addlt	r4, r4, r3
 8007bd2:	f000 f8df 	bl	8007d94 <__malloc_lock>
 8007bd6:	4a1e      	ldr	r2, [pc, #120]	; (8007c50 <_free_r+0x94>)
 8007bd8:	9801      	ldr	r0, [sp, #4]
 8007bda:	6813      	ldr	r3, [r2, #0]
 8007bdc:	b933      	cbnz	r3, 8007bec <_free_r+0x30>
 8007bde:	6063      	str	r3, [r4, #4]
 8007be0:	6014      	str	r4, [r2, #0]
 8007be2:	b003      	add	sp, #12
 8007be4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007be8:	f000 b8da 	b.w	8007da0 <__malloc_unlock>
 8007bec:	42a3      	cmp	r3, r4
 8007bee:	d908      	bls.n	8007c02 <_free_r+0x46>
 8007bf0:	6825      	ldr	r5, [r4, #0]
 8007bf2:	1961      	adds	r1, r4, r5
 8007bf4:	428b      	cmp	r3, r1
 8007bf6:	bf01      	itttt	eq
 8007bf8:	6819      	ldreq	r1, [r3, #0]
 8007bfa:	685b      	ldreq	r3, [r3, #4]
 8007bfc:	1949      	addeq	r1, r1, r5
 8007bfe:	6021      	streq	r1, [r4, #0]
 8007c00:	e7ed      	b.n	8007bde <_free_r+0x22>
 8007c02:	461a      	mov	r2, r3
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	b10b      	cbz	r3, 8007c0c <_free_r+0x50>
 8007c08:	42a3      	cmp	r3, r4
 8007c0a:	d9fa      	bls.n	8007c02 <_free_r+0x46>
 8007c0c:	6811      	ldr	r1, [r2, #0]
 8007c0e:	1855      	adds	r5, r2, r1
 8007c10:	42a5      	cmp	r5, r4
 8007c12:	d10b      	bne.n	8007c2c <_free_r+0x70>
 8007c14:	6824      	ldr	r4, [r4, #0]
 8007c16:	4421      	add	r1, r4
 8007c18:	1854      	adds	r4, r2, r1
 8007c1a:	42a3      	cmp	r3, r4
 8007c1c:	6011      	str	r1, [r2, #0]
 8007c1e:	d1e0      	bne.n	8007be2 <_free_r+0x26>
 8007c20:	681c      	ldr	r4, [r3, #0]
 8007c22:	685b      	ldr	r3, [r3, #4]
 8007c24:	6053      	str	r3, [r2, #4]
 8007c26:	440c      	add	r4, r1
 8007c28:	6014      	str	r4, [r2, #0]
 8007c2a:	e7da      	b.n	8007be2 <_free_r+0x26>
 8007c2c:	d902      	bls.n	8007c34 <_free_r+0x78>
 8007c2e:	230c      	movs	r3, #12
 8007c30:	6003      	str	r3, [r0, #0]
 8007c32:	e7d6      	b.n	8007be2 <_free_r+0x26>
 8007c34:	6825      	ldr	r5, [r4, #0]
 8007c36:	1961      	adds	r1, r4, r5
 8007c38:	428b      	cmp	r3, r1
 8007c3a:	bf04      	itt	eq
 8007c3c:	6819      	ldreq	r1, [r3, #0]
 8007c3e:	685b      	ldreq	r3, [r3, #4]
 8007c40:	6063      	str	r3, [r4, #4]
 8007c42:	bf04      	itt	eq
 8007c44:	1949      	addeq	r1, r1, r5
 8007c46:	6021      	streq	r1, [r4, #0]
 8007c48:	6054      	str	r4, [r2, #4]
 8007c4a:	e7ca      	b.n	8007be2 <_free_r+0x26>
 8007c4c:	b003      	add	sp, #12
 8007c4e:	bd30      	pop	{r4, r5, pc}
 8007c50:	20004b94 	.word	0x20004b94

08007c54 <sbrk_aligned>:
 8007c54:	b570      	push	{r4, r5, r6, lr}
 8007c56:	4e0e      	ldr	r6, [pc, #56]	; (8007c90 <sbrk_aligned+0x3c>)
 8007c58:	460c      	mov	r4, r1
 8007c5a:	6831      	ldr	r1, [r6, #0]
 8007c5c:	4605      	mov	r5, r0
 8007c5e:	b911      	cbnz	r1, 8007c66 <sbrk_aligned+0x12>
 8007c60:	f000 fcbc 	bl	80085dc <_sbrk_r>
 8007c64:	6030      	str	r0, [r6, #0]
 8007c66:	4621      	mov	r1, r4
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f000 fcb7 	bl	80085dc <_sbrk_r>
 8007c6e:	1c43      	adds	r3, r0, #1
 8007c70:	d00a      	beq.n	8007c88 <sbrk_aligned+0x34>
 8007c72:	1cc4      	adds	r4, r0, #3
 8007c74:	f024 0403 	bic.w	r4, r4, #3
 8007c78:	42a0      	cmp	r0, r4
 8007c7a:	d007      	beq.n	8007c8c <sbrk_aligned+0x38>
 8007c7c:	1a21      	subs	r1, r4, r0
 8007c7e:	4628      	mov	r0, r5
 8007c80:	f000 fcac 	bl	80085dc <_sbrk_r>
 8007c84:	3001      	adds	r0, #1
 8007c86:	d101      	bne.n	8007c8c <sbrk_aligned+0x38>
 8007c88:	f04f 34ff 	mov.w	r4, #4294967295
 8007c8c:	4620      	mov	r0, r4
 8007c8e:	bd70      	pop	{r4, r5, r6, pc}
 8007c90:	20004b98 	.word	0x20004b98

08007c94 <_malloc_r>:
 8007c94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007c98:	1ccd      	adds	r5, r1, #3
 8007c9a:	f025 0503 	bic.w	r5, r5, #3
 8007c9e:	3508      	adds	r5, #8
 8007ca0:	2d0c      	cmp	r5, #12
 8007ca2:	bf38      	it	cc
 8007ca4:	250c      	movcc	r5, #12
 8007ca6:	2d00      	cmp	r5, #0
 8007ca8:	4607      	mov	r7, r0
 8007caa:	db01      	blt.n	8007cb0 <_malloc_r+0x1c>
 8007cac:	42a9      	cmp	r1, r5
 8007cae:	d905      	bls.n	8007cbc <_malloc_r+0x28>
 8007cb0:	230c      	movs	r3, #12
 8007cb2:	603b      	str	r3, [r7, #0]
 8007cb4:	2600      	movs	r6, #0
 8007cb6:	4630      	mov	r0, r6
 8007cb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007cbc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007d90 <_malloc_r+0xfc>
 8007cc0:	f000 f868 	bl	8007d94 <__malloc_lock>
 8007cc4:	f8d8 3000 	ldr.w	r3, [r8]
 8007cc8:	461c      	mov	r4, r3
 8007cca:	bb5c      	cbnz	r4, 8007d24 <_malloc_r+0x90>
 8007ccc:	4629      	mov	r1, r5
 8007cce:	4638      	mov	r0, r7
 8007cd0:	f7ff ffc0 	bl	8007c54 <sbrk_aligned>
 8007cd4:	1c43      	adds	r3, r0, #1
 8007cd6:	4604      	mov	r4, r0
 8007cd8:	d155      	bne.n	8007d86 <_malloc_r+0xf2>
 8007cda:	f8d8 4000 	ldr.w	r4, [r8]
 8007cde:	4626      	mov	r6, r4
 8007ce0:	2e00      	cmp	r6, #0
 8007ce2:	d145      	bne.n	8007d70 <_malloc_r+0xdc>
 8007ce4:	2c00      	cmp	r4, #0
 8007ce6:	d048      	beq.n	8007d7a <_malloc_r+0xe6>
 8007ce8:	6823      	ldr	r3, [r4, #0]
 8007cea:	4631      	mov	r1, r6
 8007cec:	4638      	mov	r0, r7
 8007cee:	eb04 0903 	add.w	r9, r4, r3
 8007cf2:	f000 fc73 	bl	80085dc <_sbrk_r>
 8007cf6:	4581      	cmp	r9, r0
 8007cf8:	d13f      	bne.n	8007d7a <_malloc_r+0xe6>
 8007cfa:	6821      	ldr	r1, [r4, #0]
 8007cfc:	1a6d      	subs	r5, r5, r1
 8007cfe:	4629      	mov	r1, r5
 8007d00:	4638      	mov	r0, r7
 8007d02:	f7ff ffa7 	bl	8007c54 <sbrk_aligned>
 8007d06:	3001      	adds	r0, #1
 8007d08:	d037      	beq.n	8007d7a <_malloc_r+0xe6>
 8007d0a:	6823      	ldr	r3, [r4, #0]
 8007d0c:	442b      	add	r3, r5
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	f8d8 3000 	ldr.w	r3, [r8]
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d038      	beq.n	8007d8a <_malloc_r+0xf6>
 8007d18:	685a      	ldr	r2, [r3, #4]
 8007d1a:	42a2      	cmp	r2, r4
 8007d1c:	d12b      	bne.n	8007d76 <_malloc_r+0xe2>
 8007d1e:	2200      	movs	r2, #0
 8007d20:	605a      	str	r2, [r3, #4]
 8007d22:	e00f      	b.n	8007d44 <_malloc_r+0xb0>
 8007d24:	6822      	ldr	r2, [r4, #0]
 8007d26:	1b52      	subs	r2, r2, r5
 8007d28:	d41f      	bmi.n	8007d6a <_malloc_r+0xd6>
 8007d2a:	2a0b      	cmp	r2, #11
 8007d2c:	d917      	bls.n	8007d5e <_malloc_r+0xca>
 8007d2e:	1961      	adds	r1, r4, r5
 8007d30:	42a3      	cmp	r3, r4
 8007d32:	6025      	str	r5, [r4, #0]
 8007d34:	bf18      	it	ne
 8007d36:	6059      	strne	r1, [r3, #4]
 8007d38:	6863      	ldr	r3, [r4, #4]
 8007d3a:	bf08      	it	eq
 8007d3c:	f8c8 1000 	streq.w	r1, [r8]
 8007d40:	5162      	str	r2, [r4, r5]
 8007d42:	604b      	str	r3, [r1, #4]
 8007d44:	4638      	mov	r0, r7
 8007d46:	f104 060b 	add.w	r6, r4, #11
 8007d4a:	f000 f829 	bl	8007da0 <__malloc_unlock>
 8007d4e:	f026 0607 	bic.w	r6, r6, #7
 8007d52:	1d23      	adds	r3, r4, #4
 8007d54:	1af2      	subs	r2, r6, r3
 8007d56:	d0ae      	beq.n	8007cb6 <_malloc_r+0x22>
 8007d58:	1b9b      	subs	r3, r3, r6
 8007d5a:	50a3      	str	r3, [r4, r2]
 8007d5c:	e7ab      	b.n	8007cb6 <_malloc_r+0x22>
 8007d5e:	42a3      	cmp	r3, r4
 8007d60:	6862      	ldr	r2, [r4, #4]
 8007d62:	d1dd      	bne.n	8007d20 <_malloc_r+0x8c>
 8007d64:	f8c8 2000 	str.w	r2, [r8]
 8007d68:	e7ec      	b.n	8007d44 <_malloc_r+0xb0>
 8007d6a:	4623      	mov	r3, r4
 8007d6c:	6864      	ldr	r4, [r4, #4]
 8007d6e:	e7ac      	b.n	8007cca <_malloc_r+0x36>
 8007d70:	4634      	mov	r4, r6
 8007d72:	6876      	ldr	r6, [r6, #4]
 8007d74:	e7b4      	b.n	8007ce0 <_malloc_r+0x4c>
 8007d76:	4613      	mov	r3, r2
 8007d78:	e7cc      	b.n	8007d14 <_malloc_r+0x80>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	603b      	str	r3, [r7, #0]
 8007d7e:	4638      	mov	r0, r7
 8007d80:	f000 f80e 	bl	8007da0 <__malloc_unlock>
 8007d84:	e797      	b.n	8007cb6 <_malloc_r+0x22>
 8007d86:	6025      	str	r5, [r4, #0]
 8007d88:	e7dc      	b.n	8007d44 <_malloc_r+0xb0>
 8007d8a:	605b      	str	r3, [r3, #4]
 8007d8c:	deff      	udf	#255	; 0xff
 8007d8e:	bf00      	nop
 8007d90:	20004b94 	.word	0x20004b94

08007d94 <__malloc_lock>:
 8007d94:	4801      	ldr	r0, [pc, #4]	; (8007d9c <__malloc_lock+0x8>)
 8007d96:	f7ff bf00 	b.w	8007b9a <__retarget_lock_acquire_recursive>
 8007d9a:	bf00      	nop
 8007d9c:	20004b90 	.word	0x20004b90

08007da0 <__malloc_unlock>:
 8007da0:	4801      	ldr	r0, [pc, #4]	; (8007da8 <__malloc_unlock+0x8>)
 8007da2:	f7ff befb 	b.w	8007b9c <__retarget_lock_release_recursive>
 8007da6:	bf00      	nop
 8007da8:	20004b90 	.word	0x20004b90

08007dac <__sfputc_r>:
 8007dac:	6893      	ldr	r3, [r2, #8]
 8007dae:	3b01      	subs	r3, #1
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	b410      	push	{r4}
 8007db4:	6093      	str	r3, [r2, #8]
 8007db6:	da08      	bge.n	8007dca <__sfputc_r+0x1e>
 8007db8:	6994      	ldr	r4, [r2, #24]
 8007dba:	42a3      	cmp	r3, r4
 8007dbc:	db01      	blt.n	8007dc2 <__sfputc_r+0x16>
 8007dbe:	290a      	cmp	r1, #10
 8007dc0:	d103      	bne.n	8007dca <__sfputc_r+0x1e>
 8007dc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dc6:	f000 bb73 	b.w	80084b0 <__swbuf_r>
 8007dca:	6813      	ldr	r3, [r2, #0]
 8007dcc:	1c58      	adds	r0, r3, #1
 8007dce:	6010      	str	r0, [r2, #0]
 8007dd0:	7019      	strb	r1, [r3, #0]
 8007dd2:	4608      	mov	r0, r1
 8007dd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007dd8:	4770      	bx	lr

08007dda <__sfputs_r>:
 8007dda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ddc:	4606      	mov	r6, r0
 8007dde:	460f      	mov	r7, r1
 8007de0:	4614      	mov	r4, r2
 8007de2:	18d5      	adds	r5, r2, r3
 8007de4:	42ac      	cmp	r4, r5
 8007de6:	d101      	bne.n	8007dec <__sfputs_r+0x12>
 8007de8:	2000      	movs	r0, #0
 8007dea:	e007      	b.n	8007dfc <__sfputs_r+0x22>
 8007dec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df0:	463a      	mov	r2, r7
 8007df2:	4630      	mov	r0, r6
 8007df4:	f7ff ffda 	bl	8007dac <__sfputc_r>
 8007df8:	1c43      	adds	r3, r0, #1
 8007dfa:	d1f3      	bne.n	8007de4 <__sfputs_r+0xa>
 8007dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007e00 <_vfiprintf_r>:
 8007e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e04:	460d      	mov	r5, r1
 8007e06:	b09d      	sub	sp, #116	; 0x74
 8007e08:	4614      	mov	r4, r2
 8007e0a:	4698      	mov	r8, r3
 8007e0c:	4606      	mov	r6, r0
 8007e0e:	b118      	cbz	r0, 8007e18 <_vfiprintf_r+0x18>
 8007e10:	6a03      	ldr	r3, [r0, #32]
 8007e12:	b90b      	cbnz	r3, 8007e18 <_vfiprintf_r+0x18>
 8007e14:	f7ff fd66 	bl	80078e4 <__sinit>
 8007e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e1a:	07d9      	lsls	r1, r3, #31
 8007e1c:	d405      	bmi.n	8007e2a <_vfiprintf_r+0x2a>
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	059a      	lsls	r2, r3, #22
 8007e22:	d402      	bmi.n	8007e2a <_vfiprintf_r+0x2a>
 8007e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e26:	f7ff feb8 	bl	8007b9a <__retarget_lock_acquire_recursive>
 8007e2a:	89ab      	ldrh	r3, [r5, #12]
 8007e2c:	071b      	lsls	r3, r3, #28
 8007e2e:	d501      	bpl.n	8007e34 <_vfiprintf_r+0x34>
 8007e30:	692b      	ldr	r3, [r5, #16]
 8007e32:	b99b      	cbnz	r3, 8007e5c <_vfiprintf_r+0x5c>
 8007e34:	4629      	mov	r1, r5
 8007e36:	4630      	mov	r0, r6
 8007e38:	f000 fb78 	bl	800852c <__swsetup_r>
 8007e3c:	b170      	cbz	r0, 8007e5c <_vfiprintf_r+0x5c>
 8007e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007e40:	07dc      	lsls	r4, r3, #31
 8007e42:	d504      	bpl.n	8007e4e <_vfiprintf_r+0x4e>
 8007e44:	f04f 30ff 	mov.w	r0, #4294967295
 8007e48:	b01d      	add	sp, #116	; 0x74
 8007e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e4e:	89ab      	ldrh	r3, [r5, #12]
 8007e50:	0598      	lsls	r0, r3, #22
 8007e52:	d4f7      	bmi.n	8007e44 <_vfiprintf_r+0x44>
 8007e54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007e56:	f7ff fea1 	bl	8007b9c <__retarget_lock_release_recursive>
 8007e5a:	e7f3      	b.n	8007e44 <_vfiprintf_r+0x44>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	9309      	str	r3, [sp, #36]	; 0x24
 8007e60:	2320      	movs	r3, #32
 8007e62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007e66:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e6a:	2330      	movs	r3, #48	; 0x30
 8007e6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008020 <_vfiprintf_r+0x220>
 8007e70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007e74:	f04f 0901 	mov.w	r9, #1
 8007e78:	4623      	mov	r3, r4
 8007e7a:	469a      	mov	sl, r3
 8007e7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e80:	b10a      	cbz	r2, 8007e86 <_vfiprintf_r+0x86>
 8007e82:	2a25      	cmp	r2, #37	; 0x25
 8007e84:	d1f9      	bne.n	8007e7a <_vfiprintf_r+0x7a>
 8007e86:	ebba 0b04 	subs.w	fp, sl, r4
 8007e8a:	d00b      	beq.n	8007ea4 <_vfiprintf_r+0xa4>
 8007e8c:	465b      	mov	r3, fp
 8007e8e:	4622      	mov	r2, r4
 8007e90:	4629      	mov	r1, r5
 8007e92:	4630      	mov	r0, r6
 8007e94:	f7ff ffa1 	bl	8007dda <__sfputs_r>
 8007e98:	3001      	adds	r0, #1
 8007e9a:	f000 80a9 	beq.w	8007ff0 <_vfiprintf_r+0x1f0>
 8007e9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007ea0:	445a      	add	r2, fp
 8007ea2:	9209      	str	r2, [sp, #36]	; 0x24
 8007ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	f000 80a1 	beq.w	8007ff0 <_vfiprintf_r+0x1f0>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	f04f 32ff 	mov.w	r2, #4294967295
 8007eb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007eb8:	f10a 0a01 	add.w	sl, sl, #1
 8007ebc:	9304      	str	r3, [sp, #16]
 8007ebe:	9307      	str	r3, [sp, #28]
 8007ec0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ec4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ec6:	4654      	mov	r4, sl
 8007ec8:	2205      	movs	r2, #5
 8007eca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ece:	4854      	ldr	r0, [pc, #336]	; (8008020 <_vfiprintf_r+0x220>)
 8007ed0:	f7f8 f97e 	bl	80001d0 <memchr>
 8007ed4:	9a04      	ldr	r2, [sp, #16]
 8007ed6:	b9d8      	cbnz	r0, 8007f10 <_vfiprintf_r+0x110>
 8007ed8:	06d1      	lsls	r1, r2, #27
 8007eda:	bf44      	itt	mi
 8007edc:	2320      	movmi	r3, #32
 8007ede:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ee2:	0713      	lsls	r3, r2, #28
 8007ee4:	bf44      	itt	mi
 8007ee6:	232b      	movmi	r3, #43	; 0x2b
 8007ee8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007eec:	f89a 3000 	ldrb.w	r3, [sl]
 8007ef0:	2b2a      	cmp	r3, #42	; 0x2a
 8007ef2:	d015      	beq.n	8007f20 <_vfiprintf_r+0x120>
 8007ef4:	9a07      	ldr	r2, [sp, #28]
 8007ef6:	4654      	mov	r4, sl
 8007ef8:	2000      	movs	r0, #0
 8007efa:	f04f 0c0a 	mov.w	ip, #10
 8007efe:	4621      	mov	r1, r4
 8007f00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007f04:	3b30      	subs	r3, #48	; 0x30
 8007f06:	2b09      	cmp	r3, #9
 8007f08:	d94d      	bls.n	8007fa6 <_vfiprintf_r+0x1a6>
 8007f0a:	b1b0      	cbz	r0, 8007f3a <_vfiprintf_r+0x13a>
 8007f0c:	9207      	str	r2, [sp, #28]
 8007f0e:	e014      	b.n	8007f3a <_vfiprintf_r+0x13a>
 8007f10:	eba0 0308 	sub.w	r3, r0, r8
 8007f14:	fa09 f303 	lsl.w	r3, r9, r3
 8007f18:	4313      	orrs	r3, r2
 8007f1a:	9304      	str	r3, [sp, #16]
 8007f1c:	46a2      	mov	sl, r4
 8007f1e:	e7d2      	b.n	8007ec6 <_vfiprintf_r+0xc6>
 8007f20:	9b03      	ldr	r3, [sp, #12]
 8007f22:	1d19      	adds	r1, r3, #4
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	9103      	str	r1, [sp, #12]
 8007f28:	2b00      	cmp	r3, #0
 8007f2a:	bfbb      	ittet	lt
 8007f2c:	425b      	neglt	r3, r3
 8007f2e:	f042 0202 	orrlt.w	r2, r2, #2
 8007f32:	9307      	strge	r3, [sp, #28]
 8007f34:	9307      	strlt	r3, [sp, #28]
 8007f36:	bfb8      	it	lt
 8007f38:	9204      	strlt	r2, [sp, #16]
 8007f3a:	7823      	ldrb	r3, [r4, #0]
 8007f3c:	2b2e      	cmp	r3, #46	; 0x2e
 8007f3e:	d10c      	bne.n	8007f5a <_vfiprintf_r+0x15a>
 8007f40:	7863      	ldrb	r3, [r4, #1]
 8007f42:	2b2a      	cmp	r3, #42	; 0x2a
 8007f44:	d134      	bne.n	8007fb0 <_vfiprintf_r+0x1b0>
 8007f46:	9b03      	ldr	r3, [sp, #12]
 8007f48:	1d1a      	adds	r2, r3, #4
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	9203      	str	r2, [sp, #12]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	bfb8      	it	lt
 8007f52:	f04f 33ff 	movlt.w	r3, #4294967295
 8007f56:	3402      	adds	r4, #2
 8007f58:	9305      	str	r3, [sp, #20]
 8007f5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008030 <_vfiprintf_r+0x230>
 8007f5e:	7821      	ldrb	r1, [r4, #0]
 8007f60:	2203      	movs	r2, #3
 8007f62:	4650      	mov	r0, sl
 8007f64:	f7f8 f934 	bl	80001d0 <memchr>
 8007f68:	b138      	cbz	r0, 8007f7a <_vfiprintf_r+0x17a>
 8007f6a:	9b04      	ldr	r3, [sp, #16]
 8007f6c:	eba0 000a 	sub.w	r0, r0, sl
 8007f70:	2240      	movs	r2, #64	; 0x40
 8007f72:	4082      	lsls	r2, r0
 8007f74:	4313      	orrs	r3, r2
 8007f76:	3401      	adds	r4, #1
 8007f78:	9304      	str	r3, [sp, #16]
 8007f7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f7e:	4829      	ldr	r0, [pc, #164]	; (8008024 <_vfiprintf_r+0x224>)
 8007f80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f84:	2206      	movs	r2, #6
 8007f86:	f7f8 f923 	bl	80001d0 <memchr>
 8007f8a:	2800      	cmp	r0, #0
 8007f8c:	d03f      	beq.n	800800e <_vfiprintf_r+0x20e>
 8007f8e:	4b26      	ldr	r3, [pc, #152]	; (8008028 <_vfiprintf_r+0x228>)
 8007f90:	bb1b      	cbnz	r3, 8007fda <_vfiprintf_r+0x1da>
 8007f92:	9b03      	ldr	r3, [sp, #12]
 8007f94:	3307      	adds	r3, #7
 8007f96:	f023 0307 	bic.w	r3, r3, #7
 8007f9a:	3308      	adds	r3, #8
 8007f9c:	9303      	str	r3, [sp, #12]
 8007f9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007fa0:	443b      	add	r3, r7
 8007fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8007fa4:	e768      	b.n	8007e78 <_vfiprintf_r+0x78>
 8007fa6:	fb0c 3202 	mla	r2, ip, r2, r3
 8007faa:	460c      	mov	r4, r1
 8007fac:	2001      	movs	r0, #1
 8007fae:	e7a6      	b.n	8007efe <_vfiprintf_r+0xfe>
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	3401      	adds	r4, #1
 8007fb4:	9305      	str	r3, [sp, #20]
 8007fb6:	4619      	mov	r1, r3
 8007fb8:	f04f 0c0a 	mov.w	ip, #10
 8007fbc:	4620      	mov	r0, r4
 8007fbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007fc2:	3a30      	subs	r2, #48	; 0x30
 8007fc4:	2a09      	cmp	r2, #9
 8007fc6:	d903      	bls.n	8007fd0 <_vfiprintf_r+0x1d0>
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d0c6      	beq.n	8007f5a <_vfiprintf_r+0x15a>
 8007fcc:	9105      	str	r1, [sp, #20]
 8007fce:	e7c4      	b.n	8007f5a <_vfiprintf_r+0x15a>
 8007fd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	2301      	movs	r3, #1
 8007fd8:	e7f0      	b.n	8007fbc <_vfiprintf_r+0x1bc>
 8007fda:	ab03      	add	r3, sp, #12
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4b12      	ldr	r3, [pc, #72]	; (800802c <_vfiprintf_r+0x22c>)
 8007fe2:	a904      	add	r1, sp, #16
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f3af 8000 	nop.w
 8007fea:	4607      	mov	r7, r0
 8007fec:	1c78      	adds	r0, r7, #1
 8007fee:	d1d6      	bne.n	8007f9e <_vfiprintf_r+0x19e>
 8007ff0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ff2:	07d9      	lsls	r1, r3, #31
 8007ff4:	d405      	bmi.n	8008002 <_vfiprintf_r+0x202>
 8007ff6:	89ab      	ldrh	r3, [r5, #12]
 8007ff8:	059a      	lsls	r2, r3, #22
 8007ffa:	d402      	bmi.n	8008002 <_vfiprintf_r+0x202>
 8007ffc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ffe:	f7ff fdcd 	bl	8007b9c <__retarget_lock_release_recursive>
 8008002:	89ab      	ldrh	r3, [r5, #12]
 8008004:	065b      	lsls	r3, r3, #25
 8008006:	f53f af1d 	bmi.w	8007e44 <_vfiprintf_r+0x44>
 800800a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800800c:	e71c      	b.n	8007e48 <_vfiprintf_r+0x48>
 800800e:	ab03      	add	r3, sp, #12
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	462a      	mov	r2, r5
 8008014:	4b05      	ldr	r3, [pc, #20]	; (800802c <_vfiprintf_r+0x22c>)
 8008016:	a904      	add	r1, sp, #16
 8008018:	4630      	mov	r0, r6
 800801a:	f000 f879 	bl	8008110 <_printf_i>
 800801e:	e7e4      	b.n	8007fea <_vfiprintf_r+0x1ea>
 8008020:	080088ec 	.word	0x080088ec
 8008024:	080088f6 	.word	0x080088f6
 8008028:	00000000 	.word	0x00000000
 800802c:	08007ddb 	.word	0x08007ddb
 8008030:	080088f2 	.word	0x080088f2

08008034 <_printf_common>:
 8008034:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	4616      	mov	r6, r2
 800803a:	4699      	mov	r9, r3
 800803c:	688a      	ldr	r2, [r1, #8]
 800803e:	690b      	ldr	r3, [r1, #16]
 8008040:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008044:	4293      	cmp	r3, r2
 8008046:	bfb8      	it	lt
 8008048:	4613      	movlt	r3, r2
 800804a:	6033      	str	r3, [r6, #0]
 800804c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008050:	4607      	mov	r7, r0
 8008052:	460c      	mov	r4, r1
 8008054:	b10a      	cbz	r2, 800805a <_printf_common+0x26>
 8008056:	3301      	adds	r3, #1
 8008058:	6033      	str	r3, [r6, #0]
 800805a:	6823      	ldr	r3, [r4, #0]
 800805c:	0699      	lsls	r1, r3, #26
 800805e:	bf42      	ittt	mi
 8008060:	6833      	ldrmi	r3, [r6, #0]
 8008062:	3302      	addmi	r3, #2
 8008064:	6033      	strmi	r3, [r6, #0]
 8008066:	6825      	ldr	r5, [r4, #0]
 8008068:	f015 0506 	ands.w	r5, r5, #6
 800806c:	d106      	bne.n	800807c <_printf_common+0x48>
 800806e:	f104 0a19 	add.w	sl, r4, #25
 8008072:	68e3      	ldr	r3, [r4, #12]
 8008074:	6832      	ldr	r2, [r6, #0]
 8008076:	1a9b      	subs	r3, r3, r2
 8008078:	42ab      	cmp	r3, r5
 800807a:	dc26      	bgt.n	80080ca <_printf_common+0x96>
 800807c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008080:	1e13      	subs	r3, r2, #0
 8008082:	6822      	ldr	r2, [r4, #0]
 8008084:	bf18      	it	ne
 8008086:	2301      	movne	r3, #1
 8008088:	0692      	lsls	r2, r2, #26
 800808a:	d42b      	bmi.n	80080e4 <_printf_common+0xb0>
 800808c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008090:	4649      	mov	r1, r9
 8008092:	4638      	mov	r0, r7
 8008094:	47c0      	blx	r8
 8008096:	3001      	adds	r0, #1
 8008098:	d01e      	beq.n	80080d8 <_printf_common+0xa4>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	6922      	ldr	r2, [r4, #16]
 800809e:	f003 0306 	and.w	r3, r3, #6
 80080a2:	2b04      	cmp	r3, #4
 80080a4:	bf02      	ittt	eq
 80080a6:	68e5      	ldreq	r5, [r4, #12]
 80080a8:	6833      	ldreq	r3, [r6, #0]
 80080aa:	1aed      	subeq	r5, r5, r3
 80080ac:	68a3      	ldr	r3, [r4, #8]
 80080ae:	bf0c      	ite	eq
 80080b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80080b4:	2500      	movne	r5, #0
 80080b6:	4293      	cmp	r3, r2
 80080b8:	bfc4      	itt	gt
 80080ba:	1a9b      	subgt	r3, r3, r2
 80080bc:	18ed      	addgt	r5, r5, r3
 80080be:	2600      	movs	r6, #0
 80080c0:	341a      	adds	r4, #26
 80080c2:	42b5      	cmp	r5, r6
 80080c4:	d11a      	bne.n	80080fc <_printf_common+0xc8>
 80080c6:	2000      	movs	r0, #0
 80080c8:	e008      	b.n	80080dc <_printf_common+0xa8>
 80080ca:	2301      	movs	r3, #1
 80080cc:	4652      	mov	r2, sl
 80080ce:	4649      	mov	r1, r9
 80080d0:	4638      	mov	r0, r7
 80080d2:	47c0      	blx	r8
 80080d4:	3001      	adds	r0, #1
 80080d6:	d103      	bne.n	80080e0 <_printf_common+0xac>
 80080d8:	f04f 30ff 	mov.w	r0, #4294967295
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	3501      	adds	r5, #1
 80080e2:	e7c6      	b.n	8008072 <_printf_common+0x3e>
 80080e4:	18e1      	adds	r1, r4, r3
 80080e6:	1c5a      	adds	r2, r3, #1
 80080e8:	2030      	movs	r0, #48	; 0x30
 80080ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80080ee:	4422      	add	r2, r4
 80080f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80080f4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80080f8:	3302      	adds	r3, #2
 80080fa:	e7c7      	b.n	800808c <_printf_common+0x58>
 80080fc:	2301      	movs	r3, #1
 80080fe:	4622      	mov	r2, r4
 8008100:	4649      	mov	r1, r9
 8008102:	4638      	mov	r0, r7
 8008104:	47c0      	blx	r8
 8008106:	3001      	adds	r0, #1
 8008108:	d0e6      	beq.n	80080d8 <_printf_common+0xa4>
 800810a:	3601      	adds	r6, #1
 800810c:	e7d9      	b.n	80080c2 <_printf_common+0x8e>
	...

08008110 <_printf_i>:
 8008110:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008114:	7e0f      	ldrb	r7, [r1, #24]
 8008116:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008118:	2f78      	cmp	r7, #120	; 0x78
 800811a:	4691      	mov	r9, r2
 800811c:	4680      	mov	r8, r0
 800811e:	460c      	mov	r4, r1
 8008120:	469a      	mov	sl, r3
 8008122:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008126:	d807      	bhi.n	8008138 <_printf_i+0x28>
 8008128:	2f62      	cmp	r7, #98	; 0x62
 800812a:	d80a      	bhi.n	8008142 <_printf_i+0x32>
 800812c:	2f00      	cmp	r7, #0
 800812e:	f000 80d4 	beq.w	80082da <_printf_i+0x1ca>
 8008132:	2f58      	cmp	r7, #88	; 0x58
 8008134:	f000 80c0 	beq.w	80082b8 <_printf_i+0x1a8>
 8008138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800813c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008140:	e03a      	b.n	80081b8 <_printf_i+0xa8>
 8008142:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008146:	2b15      	cmp	r3, #21
 8008148:	d8f6      	bhi.n	8008138 <_printf_i+0x28>
 800814a:	a101      	add	r1, pc, #4	; (adr r1, 8008150 <_printf_i+0x40>)
 800814c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008150:	080081a9 	.word	0x080081a9
 8008154:	080081bd 	.word	0x080081bd
 8008158:	08008139 	.word	0x08008139
 800815c:	08008139 	.word	0x08008139
 8008160:	08008139 	.word	0x08008139
 8008164:	08008139 	.word	0x08008139
 8008168:	080081bd 	.word	0x080081bd
 800816c:	08008139 	.word	0x08008139
 8008170:	08008139 	.word	0x08008139
 8008174:	08008139 	.word	0x08008139
 8008178:	08008139 	.word	0x08008139
 800817c:	080082c1 	.word	0x080082c1
 8008180:	080081e9 	.word	0x080081e9
 8008184:	0800827b 	.word	0x0800827b
 8008188:	08008139 	.word	0x08008139
 800818c:	08008139 	.word	0x08008139
 8008190:	080082e3 	.word	0x080082e3
 8008194:	08008139 	.word	0x08008139
 8008198:	080081e9 	.word	0x080081e9
 800819c:	08008139 	.word	0x08008139
 80081a0:	08008139 	.word	0x08008139
 80081a4:	08008283 	.word	0x08008283
 80081a8:	682b      	ldr	r3, [r5, #0]
 80081aa:	1d1a      	adds	r2, r3, #4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	602a      	str	r2, [r5, #0]
 80081b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80081b8:	2301      	movs	r3, #1
 80081ba:	e09f      	b.n	80082fc <_printf_i+0x1ec>
 80081bc:	6820      	ldr	r0, [r4, #0]
 80081be:	682b      	ldr	r3, [r5, #0]
 80081c0:	0607      	lsls	r7, r0, #24
 80081c2:	f103 0104 	add.w	r1, r3, #4
 80081c6:	6029      	str	r1, [r5, #0]
 80081c8:	d501      	bpl.n	80081ce <_printf_i+0xbe>
 80081ca:	681e      	ldr	r6, [r3, #0]
 80081cc:	e003      	b.n	80081d6 <_printf_i+0xc6>
 80081ce:	0646      	lsls	r6, r0, #25
 80081d0:	d5fb      	bpl.n	80081ca <_printf_i+0xba>
 80081d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80081d6:	2e00      	cmp	r6, #0
 80081d8:	da03      	bge.n	80081e2 <_printf_i+0xd2>
 80081da:	232d      	movs	r3, #45	; 0x2d
 80081dc:	4276      	negs	r6, r6
 80081de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80081e2:	485a      	ldr	r0, [pc, #360]	; (800834c <_printf_i+0x23c>)
 80081e4:	230a      	movs	r3, #10
 80081e6:	e012      	b.n	800820e <_printf_i+0xfe>
 80081e8:	682b      	ldr	r3, [r5, #0]
 80081ea:	6820      	ldr	r0, [r4, #0]
 80081ec:	1d19      	adds	r1, r3, #4
 80081ee:	6029      	str	r1, [r5, #0]
 80081f0:	0605      	lsls	r5, r0, #24
 80081f2:	d501      	bpl.n	80081f8 <_printf_i+0xe8>
 80081f4:	681e      	ldr	r6, [r3, #0]
 80081f6:	e002      	b.n	80081fe <_printf_i+0xee>
 80081f8:	0641      	lsls	r1, r0, #25
 80081fa:	d5fb      	bpl.n	80081f4 <_printf_i+0xe4>
 80081fc:	881e      	ldrh	r6, [r3, #0]
 80081fe:	4853      	ldr	r0, [pc, #332]	; (800834c <_printf_i+0x23c>)
 8008200:	2f6f      	cmp	r7, #111	; 0x6f
 8008202:	bf0c      	ite	eq
 8008204:	2308      	moveq	r3, #8
 8008206:	230a      	movne	r3, #10
 8008208:	2100      	movs	r1, #0
 800820a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800820e:	6865      	ldr	r5, [r4, #4]
 8008210:	60a5      	str	r5, [r4, #8]
 8008212:	2d00      	cmp	r5, #0
 8008214:	bfa2      	ittt	ge
 8008216:	6821      	ldrge	r1, [r4, #0]
 8008218:	f021 0104 	bicge.w	r1, r1, #4
 800821c:	6021      	strge	r1, [r4, #0]
 800821e:	b90e      	cbnz	r6, 8008224 <_printf_i+0x114>
 8008220:	2d00      	cmp	r5, #0
 8008222:	d04b      	beq.n	80082bc <_printf_i+0x1ac>
 8008224:	4615      	mov	r5, r2
 8008226:	fbb6 f1f3 	udiv	r1, r6, r3
 800822a:	fb03 6711 	mls	r7, r3, r1, r6
 800822e:	5dc7      	ldrb	r7, [r0, r7]
 8008230:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008234:	4637      	mov	r7, r6
 8008236:	42bb      	cmp	r3, r7
 8008238:	460e      	mov	r6, r1
 800823a:	d9f4      	bls.n	8008226 <_printf_i+0x116>
 800823c:	2b08      	cmp	r3, #8
 800823e:	d10b      	bne.n	8008258 <_printf_i+0x148>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	07de      	lsls	r6, r3, #31
 8008244:	d508      	bpl.n	8008258 <_printf_i+0x148>
 8008246:	6923      	ldr	r3, [r4, #16]
 8008248:	6861      	ldr	r1, [r4, #4]
 800824a:	4299      	cmp	r1, r3
 800824c:	bfde      	ittt	le
 800824e:	2330      	movle	r3, #48	; 0x30
 8008250:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008254:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008258:	1b52      	subs	r2, r2, r5
 800825a:	6122      	str	r2, [r4, #16]
 800825c:	f8cd a000 	str.w	sl, [sp]
 8008260:	464b      	mov	r3, r9
 8008262:	aa03      	add	r2, sp, #12
 8008264:	4621      	mov	r1, r4
 8008266:	4640      	mov	r0, r8
 8008268:	f7ff fee4 	bl	8008034 <_printf_common>
 800826c:	3001      	adds	r0, #1
 800826e:	d14a      	bne.n	8008306 <_printf_i+0x1f6>
 8008270:	f04f 30ff 	mov.w	r0, #4294967295
 8008274:	b004      	add	sp, #16
 8008276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800827a:	6823      	ldr	r3, [r4, #0]
 800827c:	f043 0320 	orr.w	r3, r3, #32
 8008280:	6023      	str	r3, [r4, #0]
 8008282:	4833      	ldr	r0, [pc, #204]	; (8008350 <_printf_i+0x240>)
 8008284:	2778      	movs	r7, #120	; 0x78
 8008286:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	6829      	ldr	r1, [r5, #0]
 800828e:	061f      	lsls	r7, r3, #24
 8008290:	f851 6b04 	ldr.w	r6, [r1], #4
 8008294:	d402      	bmi.n	800829c <_printf_i+0x18c>
 8008296:	065f      	lsls	r7, r3, #25
 8008298:	bf48      	it	mi
 800829a:	b2b6      	uxthmi	r6, r6
 800829c:	07df      	lsls	r7, r3, #31
 800829e:	bf48      	it	mi
 80082a0:	f043 0320 	orrmi.w	r3, r3, #32
 80082a4:	6029      	str	r1, [r5, #0]
 80082a6:	bf48      	it	mi
 80082a8:	6023      	strmi	r3, [r4, #0]
 80082aa:	b91e      	cbnz	r6, 80082b4 <_printf_i+0x1a4>
 80082ac:	6823      	ldr	r3, [r4, #0]
 80082ae:	f023 0320 	bic.w	r3, r3, #32
 80082b2:	6023      	str	r3, [r4, #0]
 80082b4:	2310      	movs	r3, #16
 80082b6:	e7a7      	b.n	8008208 <_printf_i+0xf8>
 80082b8:	4824      	ldr	r0, [pc, #144]	; (800834c <_printf_i+0x23c>)
 80082ba:	e7e4      	b.n	8008286 <_printf_i+0x176>
 80082bc:	4615      	mov	r5, r2
 80082be:	e7bd      	b.n	800823c <_printf_i+0x12c>
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	6826      	ldr	r6, [r4, #0]
 80082c4:	6961      	ldr	r1, [r4, #20]
 80082c6:	1d18      	adds	r0, r3, #4
 80082c8:	6028      	str	r0, [r5, #0]
 80082ca:	0635      	lsls	r5, r6, #24
 80082cc:	681b      	ldr	r3, [r3, #0]
 80082ce:	d501      	bpl.n	80082d4 <_printf_i+0x1c4>
 80082d0:	6019      	str	r1, [r3, #0]
 80082d2:	e002      	b.n	80082da <_printf_i+0x1ca>
 80082d4:	0670      	lsls	r0, r6, #25
 80082d6:	d5fb      	bpl.n	80082d0 <_printf_i+0x1c0>
 80082d8:	8019      	strh	r1, [r3, #0]
 80082da:	2300      	movs	r3, #0
 80082dc:	6123      	str	r3, [r4, #16]
 80082de:	4615      	mov	r5, r2
 80082e0:	e7bc      	b.n	800825c <_printf_i+0x14c>
 80082e2:	682b      	ldr	r3, [r5, #0]
 80082e4:	1d1a      	adds	r2, r3, #4
 80082e6:	602a      	str	r2, [r5, #0]
 80082e8:	681d      	ldr	r5, [r3, #0]
 80082ea:	6862      	ldr	r2, [r4, #4]
 80082ec:	2100      	movs	r1, #0
 80082ee:	4628      	mov	r0, r5
 80082f0:	f7f7 ff6e 	bl	80001d0 <memchr>
 80082f4:	b108      	cbz	r0, 80082fa <_printf_i+0x1ea>
 80082f6:	1b40      	subs	r0, r0, r5
 80082f8:	6060      	str	r0, [r4, #4]
 80082fa:	6863      	ldr	r3, [r4, #4]
 80082fc:	6123      	str	r3, [r4, #16]
 80082fe:	2300      	movs	r3, #0
 8008300:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008304:	e7aa      	b.n	800825c <_printf_i+0x14c>
 8008306:	6923      	ldr	r3, [r4, #16]
 8008308:	462a      	mov	r2, r5
 800830a:	4649      	mov	r1, r9
 800830c:	4640      	mov	r0, r8
 800830e:	47d0      	blx	sl
 8008310:	3001      	adds	r0, #1
 8008312:	d0ad      	beq.n	8008270 <_printf_i+0x160>
 8008314:	6823      	ldr	r3, [r4, #0]
 8008316:	079b      	lsls	r3, r3, #30
 8008318:	d413      	bmi.n	8008342 <_printf_i+0x232>
 800831a:	68e0      	ldr	r0, [r4, #12]
 800831c:	9b03      	ldr	r3, [sp, #12]
 800831e:	4298      	cmp	r0, r3
 8008320:	bfb8      	it	lt
 8008322:	4618      	movlt	r0, r3
 8008324:	e7a6      	b.n	8008274 <_printf_i+0x164>
 8008326:	2301      	movs	r3, #1
 8008328:	4632      	mov	r2, r6
 800832a:	4649      	mov	r1, r9
 800832c:	4640      	mov	r0, r8
 800832e:	47d0      	blx	sl
 8008330:	3001      	adds	r0, #1
 8008332:	d09d      	beq.n	8008270 <_printf_i+0x160>
 8008334:	3501      	adds	r5, #1
 8008336:	68e3      	ldr	r3, [r4, #12]
 8008338:	9903      	ldr	r1, [sp, #12]
 800833a:	1a5b      	subs	r3, r3, r1
 800833c:	42ab      	cmp	r3, r5
 800833e:	dcf2      	bgt.n	8008326 <_printf_i+0x216>
 8008340:	e7eb      	b.n	800831a <_printf_i+0x20a>
 8008342:	2500      	movs	r5, #0
 8008344:	f104 0619 	add.w	r6, r4, #25
 8008348:	e7f5      	b.n	8008336 <_printf_i+0x226>
 800834a:	bf00      	nop
 800834c:	080088fd 	.word	0x080088fd
 8008350:	0800890e 	.word	0x0800890e

08008354 <__sflush_r>:
 8008354:	898a      	ldrh	r2, [r1, #12]
 8008356:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800835a:	4605      	mov	r5, r0
 800835c:	0710      	lsls	r0, r2, #28
 800835e:	460c      	mov	r4, r1
 8008360:	d458      	bmi.n	8008414 <__sflush_r+0xc0>
 8008362:	684b      	ldr	r3, [r1, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	dc05      	bgt.n	8008374 <__sflush_r+0x20>
 8008368:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800836a:	2b00      	cmp	r3, #0
 800836c:	dc02      	bgt.n	8008374 <__sflush_r+0x20>
 800836e:	2000      	movs	r0, #0
 8008370:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008374:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008376:	2e00      	cmp	r6, #0
 8008378:	d0f9      	beq.n	800836e <__sflush_r+0x1a>
 800837a:	2300      	movs	r3, #0
 800837c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008380:	682f      	ldr	r7, [r5, #0]
 8008382:	6a21      	ldr	r1, [r4, #32]
 8008384:	602b      	str	r3, [r5, #0]
 8008386:	d032      	beq.n	80083ee <__sflush_r+0x9a>
 8008388:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800838a:	89a3      	ldrh	r3, [r4, #12]
 800838c:	075a      	lsls	r2, r3, #29
 800838e:	d505      	bpl.n	800839c <__sflush_r+0x48>
 8008390:	6863      	ldr	r3, [r4, #4]
 8008392:	1ac0      	subs	r0, r0, r3
 8008394:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008396:	b10b      	cbz	r3, 800839c <__sflush_r+0x48>
 8008398:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800839a:	1ac0      	subs	r0, r0, r3
 800839c:	2300      	movs	r3, #0
 800839e:	4602      	mov	r2, r0
 80083a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083a2:	6a21      	ldr	r1, [r4, #32]
 80083a4:	4628      	mov	r0, r5
 80083a6:	47b0      	blx	r6
 80083a8:	1c43      	adds	r3, r0, #1
 80083aa:	89a3      	ldrh	r3, [r4, #12]
 80083ac:	d106      	bne.n	80083bc <__sflush_r+0x68>
 80083ae:	6829      	ldr	r1, [r5, #0]
 80083b0:	291d      	cmp	r1, #29
 80083b2:	d82b      	bhi.n	800840c <__sflush_r+0xb8>
 80083b4:	4a29      	ldr	r2, [pc, #164]	; (800845c <__sflush_r+0x108>)
 80083b6:	410a      	asrs	r2, r1
 80083b8:	07d6      	lsls	r6, r2, #31
 80083ba:	d427      	bmi.n	800840c <__sflush_r+0xb8>
 80083bc:	2200      	movs	r2, #0
 80083be:	6062      	str	r2, [r4, #4]
 80083c0:	04d9      	lsls	r1, r3, #19
 80083c2:	6922      	ldr	r2, [r4, #16]
 80083c4:	6022      	str	r2, [r4, #0]
 80083c6:	d504      	bpl.n	80083d2 <__sflush_r+0x7e>
 80083c8:	1c42      	adds	r2, r0, #1
 80083ca:	d101      	bne.n	80083d0 <__sflush_r+0x7c>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b903      	cbnz	r3, 80083d2 <__sflush_r+0x7e>
 80083d0:	6560      	str	r0, [r4, #84]	; 0x54
 80083d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80083d4:	602f      	str	r7, [r5, #0]
 80083d6:	2900      	cmp	r1, #0
 80083d8:	d0c9      	beq.n	800836e <__sflush_r+0x1a>
 80083da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80083de:	4299      	cmp	r1, r3
 80083e0:	d002      	beq.n	80083e8 <__sflush_r+0x94>
 80083e2:	4628      	mov	r0, r5
 80083e4:	f7ff fbea 	bl	8007bbc <_free_r>
 80083e8:	2000      	movs	r0, #0
 80083ea:	6360      	str	r0, [r4, #52]	; 0x34
 80083ec:	e7c0      	b.n	8008370 <__sflush_r+0x1c>
 80083ee:	2301      	movs	r3, #1
 80083f0:	4628      	mov	r0, r5
 80083f2:	47b0      	blx	r6
 80083f4:	1c41      	adds	r1, r0, #1
 80083f6:	d1c8      	bne.n	800838a <__sflush_r+0x36>
 80083f8:	682b      	ldr	r3, [r5, #0]
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d0c5      	beq.n	800838a <__sflush_r+0x36>
 80083fe:	2b1d      	cmp	r3, #29
 8008400:	d001      	beq.n	8008406 <__sflush_r+0xb2>
 8008402:	2b16      	cmp	r3, #22
 8008404:	d101      	bne.n	800840a <__sflush_r+0xb6>
 8008406:	602f      	str	r7, [r5, #0]
 8008408:	e7b1      	b.n	800836e <__sflush_r+0x1a>
 800840a:	89a3      	ldrh	r3, [r4, #12]
 800840c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008410:	81a3      	strh	r3, [r4, #12]
 8008412:	e7ad      	b.n	8008370 <__sflush_r+0x1c>
 8008414:	690f      	ldr	r7, [r1, #16]
 8008416:	2f00      	cmp	r7, #0
 8008418:	d0a9      	beq.n	800836e <__sflush_r+0x1a>
 800841a:	0793      	lsls	r3, r2, #30
 800841c:	680e      	ldr	r6, [r1, #0]
 800841e:	bf08      	it	eq
 8008420:	694b      	ldreq	r3, [r1, #20]
 8008422:	600f      	str	r7, [r1, #0]
 8008424:	bf18      	it	ne
 8008426:	2300      	movne	r3, #0
 8008428:	eba6 0807 	sub.w	r8, r6, r7
 800842c:	608b      	str	r3, [r1, #8]
 800842e:	f1b8 0f00 	cmp.w	r8, #0
 8008432:	dd9c      	ble.n	800836e <__sflush_r+0x1a>
 8008434:	6a21      	ldr	r1, [r4, #32]
 8008436:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008438:	4643      	mov	r3, r8
 800843a:	463a      	mov	r2, r7
 800843c:	4628      	mov	r0, r5
 800843e:	47b0      	blx	r6
 8008440:	2800      	cmp	r0, #0
 8008442:	dc06      	bgt.n	8008452 <__sflush_r+0xfe>
 8008444:	89a3      	ldrh	r3, [r4, #12]
 8008446:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800844a:	81a3      	strh	r3, [r4, #12]
 800844c:	f04f 30ff 	mov.w	r0, #4294967295
 8008450:	e78e      	b.n	8008370 <__sflush_r+0x1c>
 8008452:	4407      	add	r7, r0
 8008454:	eba8 0800 	sub.w	r8, r8, r0
 8008458:	e7e9      	b.n	800842e <__sflush_r+0xda>
 800845a:	bf00      	nop
 800845c:	dfbffffe 	.word	0xdfbffffe

08008460 <_fflush_r>:
 8008460:	b538      	push	{r3, r4, r5, lr}
 8008462:	690b      	ldr	r3, [r1, #16]
 8008464:	4605      	mov	r5, r0
 8008466:	460c      	mov	r4, r1
 8008468:	b913      	cbnz	r3, 8008470 <_fflush_r+0x10>
 800846a:	2500      	movs	r5, #0
 800846c:	4628      	mov	r0, r5
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	b118      	cbz	r0, 800847a <_fflush_r+0x1a>
 8008472:	6a03      	ldr	r3, [r0, #32]
 8008474:	b90b      	cbnz	r3, 800847a <_fflush_r+0x1a>
 8008476:	f7ff fa35 	bl	80078e4 <__sinit>
 800847a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800847e:	2b00      	cmp	r3, #0
 8008480:	d0f3      	beq.n	800846a <_fflush_r+0xa>
 8008482:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008484:	07d0      	lsls	r0, r2, #31
 8008486:	d404      	bmi.n	8008492 <_fflush_r+0x32>
 8008488:	0599      	lsls	r1, r3, #22
 800848a:	d402      	bmi.n	8008492 <_fflush_r+0x32>
 800848c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800848e:	f7ff fb84 	bl	8007b9a <__retarget_lock_acquire_recursive>
 8008492:	4628      	mov	r0, r5
 8008494:	4621      	mov	r1, r4
 8008496:	f7ff ff5d 	bl	8008354 <__sflush_r>
 800849a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800849c:	07da      	lsls	r2, r3, #31
 800849e:	4605      	mov	r5, r0
 80084a0:	d4e4      	bmi.n	800846c <_fflush_r+0xc>
 80084a2:	89a3      	ldrh	r3, [r4, #12]
 80084a4:	059b      	lsls	r3, r3, #22
 80084a6:	d4e1      	bmi.n	800846c <_fflush_r+0xc>
 80084a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084aa:	f7ff fb77 	bl	8007b9c <__retarget_lock_release_recursive>
 80084ae:	e7dd      	b.n	800846c <_fflush_r+0xc>

080084b0 <__swbuf_r>:
 80084b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084b2:	460e      	mov	r6, r1
 80084b4:	4614      	mov	r4, r2
 80084b6:	4605      	mov	r5, r0
 80084b8:	b118      	cbz	r0, 80084c2 <__swbuf_r+0x12>
 80084ba:	6a03      	ldr	r3, [r0, #32]
 80084bc:	b90b      	cbnz	r3, 80084c2 <__swbuf_r+0x12>
 80084be:	f7ff fa11 	bl	80078e4 <__sinit>
 80084c2:	69a3      	ldr	r3, [r4, #24]
 80084c4:	60a3      	str	r3, [r4, #8]
 80084c6:	89a3      	ldrh	r3, [r4, #12]
 80084c8:	071a      	lsls	r2, r3, #28
 80084ca:	d525      	bpl.n	8008518 <__swbuf_r+0x68>
 80084cc:	6923      	ldr	r3, [r4, #16]
 80084ce:	b31b      	cbz	r3, 8008518 <__swbuf_r+0x68>
 80084d0:	6823      	ldr	r3, [r4, #0]
 80084d2:	6922      	ldr	r2, [r4, #16]
 80084d4:	1a98      	subs	r0, r3, r2
 80084d6:	6963      	ldr	r3, [r4, #20]
 80084d8:	b2f6      	uxtb	r6, r6
 80084da:	4283      	cmp	r3, r0
 80084dc:	4637      	mov	r7, r6
 80084de:	dc04      	bgt.n	80084ea <__swbuf_r+0x3a>
 80084e0:	4621      	mov	r1, r4
 80084e2:	4628      	mov	r0, r5
 80084e4:	f7ff ffbc 	bl	8008460 <_fflush_r>
 80084e8:	b9e0      	cbnz	r0, 8008524 <__swbuf_r+0x74>
 80084ea:	68a3      	ldr	r3, [r4, #8]
 80084ec:	3b01      	subs	r3, #1
 80084ee:	60a3      	str	r3, [r4, #8]
 80084f0:	6823      	ldr	r3, [r4, #0]
 80084f2:	1c5a      	adds	r2, r3, #1
 80084f4:	6022      	str	r2, [r4, #0]
 80084f6:	701e      	strb	r6, [r3, #0]
 80084f8:	6962      	ldr	r2, [r4, #20]
 80084fa:	1c43      	adds	r3, r0, #1
 80084fc:	429a      	cmp	r2, r3
 80084fe:	d004      	beq.n	800850a <__swbuf_r+0x5a>
 8008500:	89a3      	ldrh	r3, [r4, #12]
 8008502:	07db      	lsls	r3, r3, #31
 8008504:	d506      	bpl.n	8008514 <__swbuf_r+0x64>
 8008506:	2e0a      	cmp	r6, #10
 8008508:	d104      	bne.n	8008514 <__swbuf_r+0x64>
 800850a:	4621      	mov	r1, r4
 800850c:	4628      	mov	r0, r5
 800850e:	f7ff ffa7 	bl	8008460 <_fflush_r>
 8008512:	b938      	cbnz	r0, 8008524 <__swbuf_r+0x74>
 8008514:	4638      	mov	r0, r7
 8008516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008518:	4621      	mov	r1, r4
 800851a:	4628      	mov	r0, r5
 800851c:	f000 f806 	bl	800852c <__swsetup_r>
 8008520:	2800      	cmp	r0, #0
 8008522:	d0d5      	beq.n	80084d0 <__swbuf_r+0x20>
 8008524:	f04f 37ff 	mov.w	r7, #4294967295
 8008528:	e7f4      	b.n	8008514 <__swbuf_r+0x64>
	...

0800852c <__swsetup_r>:
 800852c:	b538      	push	{r3, r4, r5, lr}
 800852e:	4b2a      	ldr	r3, [pc, #168]	; (80085d8 <__swsetup_r+0xac>)
 8008530:	4605      	mov	r5, r0
 8008532:	6818      	ldr	r0, [r3, #0]
 8008534:	460c      	mov	r4, r1
 8008536:	b118      	cbz	r0, 8008540 <__swsetup_r+0x14>
 8008538:	6a03      	ldr	r3, [r0, #32]
 800853a:	b90b      	cbnz	r3, 8008540 <__swsetup_r+0x14>
 800853c:	f7ff f9d2 	bl	80078e4 <__sinit>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008546:	0718      	lsls	r0, r3, #28
 8008548:	d422      	bmi.n	8008590 <__swsetup_r+0x64>
 800854a:	06d9      	lsls	r1, r3, #27
 800854c:	d407      	bmi.n	800855e <__swsetup_r+0x32>
 800854e:	2309      	movs	r3, #9
 8008550:	602b      	str	r3, [r5, #0]
 8008552:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008556:	81a3      	strh	r3, [r4, #12]
 8008558:	f04f 30ff 	mov.w	r0, #4294967295
 800855c:	e034      	b.n	80085c8 <__swsetup_r+0x9c>
 800855e:	0758      	lsls	r0, r3, #29
 8008560:	d512      	bpl.n	8008588 <__swsetup_r+0x5c>
 8008562:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008564:	b141      	cbz	r1, 8008578 <__swsetup_r+0x4c>
 8008566:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800856a:	4299      	cmp	r1, r3
 800856c:	d002      	beq.n	8008574 <__swsetup_r+0x48>
 800856e:	4628      	mov	r0, r5
 8008570:	f7ff fb24 	bl	8007bbc <_free_r>
 8008574:	2300      	movs	r3, #0
 8008576:	6363      	str	r3, [r4, #52]	; 0x34
 8008578:	89a3      	ldrh	r3, [r4, #12]
 800857a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800857e:	81a3      	strh	r3, [r4, #12]
 8008580:	2300      	movs	r3, #0
 8008582:	6063      	str	r3, [r4, #4]
 8008584:	6923      	ldr	r3, [r4, #16]
 8008586:	6023      	str	r3, [r4, #0]
 8008588:	89a3      	ldrh	r3, [r4, #12]
 800858a:	f043 0308 	orr.w	r3, r3, #8
 800858e:	81a3      	strh	r3, [r4, #12]
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	b94b      	cbnz	r3, 80085a8 <__swsetup_r+0x7c>
 8008594:	89a3      	ldrh	r3, [r4, #12]
 8008596:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800859a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800859e:	d003      	beq.n	80085a8 <__swsetup_r+0x7c>
 80085a0:	4621      	mov	r1, r4
 80085a2:	4628      	mov	r0, r5
 80085a4:	f000 f850 	bl	8008648 <__smakebuf_r>
 80085a8:	89a0      	ldrh	r0, [r4, #12]
 80085aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085ae:	f010 0301 	ands.w	r3, r0, #1
 80085b2:	d00a      	beq.n	80085ca <__swsetup_r+0x9e>
 80085b4:	2300      	movs	r3, #0
 80085b6:	60a3      	str	r3, [r4, #8]
 80085b8:	6963      	ldr	r3, [r4, #20]
 80085ba:	425b      	negs	r3, r3
 80085bc:	61a3      	str	r3, [r4, #24]
 80085be:	6923      	ldr	r3, [r4, #16]
 80085c0:	b943      	cbnz	r3, 80085d4 <__swsetup_r+0xa8>
 80085c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80085c6:	d1c4      	bne.n	8008552 <__swsetup_r+0x26>
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	0781      	lsls	r1, r0, #30
 80085cc:	bf58      	it	pl
 80085ce:	6963      	ldrpl	r3, [r4, #20]
 80085d0:	60a3      	str	r3, [r4, #8]
 80085d2:	e7f4      	b.n	80085be <__swsetup_r+0x92>
 80085d4:	2000      	movs	r0, #0
 80085d6:	e7f7      	b.n	80085c8 <__swsetup_r+0x9c>
 80085d8:	20000068 	.word	0x20000068

080085dc <_sbrk_r>:
 80085dc:	b538      	push	{r3, r4, r5, lr}
 80085de:	4d06      	ldr	r5, [pc, #24]	; (80085f8 <_sbrk_r+0x1c>)
 80085e0:	2300      	movs	r3, #0
 80085e2:	4604      	mov	r4, r0
 80085e4:	4608      	mov	r0, r1
 80085e6:	602b      	str	r3, [r5, #0]
 80085e8:	f7f8 fd7a 	bl	80010e0 <_sbrk>
 80085ec:	1c43      	adds	r3, r0, #1
 80085ee:	d102      	bne.n	80085f6 <_sbrk_r+0x1a>
 80085f0:	682b      	ldr	r3, [r5, #0]
 80085f2:	b103      	cbz	r3, 80085f6 <_sbrk_r+0x1a>
 80085f4:	6023      	str	r3, [r4, #0]
 80085f6:	bd38      	pop	{r3, r4, r5, pc}
 80085f8:	20004b8c 	.word	0x20004b8c

080085fc <__swhatbuf_r>:
 80085fc:	b570      	push	{r4, r5, r6, lr}
 80085fe:	460c      	mov	r4, r1
 8008600:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008604:	2900      	cmp	r1, #0
 8008606:	b096      	sub	sp, #88	; 0x58
 8008608:	4615      	mov	r5, r2
 800860a:	461e      	mov	r6, r3
 800860c:	da0d      	bge.n	800862a <__swhatbuf_r+0x2e>
 800860e:	89a3      	ldrh	r3, [r4, #12]
 8008610:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008614:	f04f 0100 	mov.w	r1, #0
 8008618:	bf0c      	ite	eq
 800861a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800861e:	2340      	movne	r3, #64	; 0x40
 8008620:	2000      	movs	r0, #0
 8008622:	6031      	str	r1, [r6, #0]
 8008624:	602b      	str	r3, [r5, #0]
 8008626:	b016      	add	sp, #88	; 0x58
 8008628:	bd70      	pop	{r4, r5, r6, pc}
 800862a:	466a      	mov	r2, sp
 800862c:	f000 f848 	bl	80086c0 <_fstat_r>
 8008630:	2800      	cmp	r0, #0
 8008632:	dbec      	blt.n	800860e <__swhatbuf_r+0x12>
 8008634:	9901      	ldr	r1, [sp, #4]
 8008636:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800863a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800863e:	4259      	negs	r1, r3
 8008640:	4159      	adcs	r1, r3
 8008642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008646:	e7eb      	b.n	8008620 <__swhatbuf_r+0x24>

08008648 <__smakebuf_r>:
 8008648:	898b      	ldrh	r3, [r1, #12]
 800864a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800864c:	079d      	lsls	r5, r3, #30
 800864e:	4606      	mov	r6, r0
 8008650:	460c      	mov	r4, r1
 8008652:	d507      	bpl.n	8008664 <__smakebuf_r+0x1c>
 8008654:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008658:	6023      	str	r3, [r4, #0]
 800865a:	6123      	str	r3, [r4, #16]
 800865c:	2301      	movs	r3, #1
 800865e:	6163      	str	r3, [r4, #20]
 8008660:	b002      	add	sp, #8
 8008662:	bd70      	pop	{r4, r5, r6, pc}
 8008664:	ab01      	add	r3, sp, #4
 8008666:	466a      	mov	r2, sp
 8008668:	f7ff ffc8 	bl	80085fc <__swhatbuf_r>
 800866c:	9900      	ldr	r1, [sp, #0]
 800866e:	4605      	mov	r5, r0
 8008670:	4630      	mov	r0, r6
 8008672:	f7ff fb0f 	bl	8007c94 <_malloc_r>
 8008676:	b948      	cbnz	r0, 800868c <__smakebuf_r+0x44>
 8008678:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800867c:	059a      	lsls	r2, r3, #22
 800867e:	d4ef      	bmi.n	8008660 <__smakebuf_r+0x18>
 8008680:	f023 0303 	bic.w	r3, r3, #3
 8008684:	f043 0302 	orr.w	r3, r3, #2
 8008688:	81a3      	strh	r3, [r4, #12]
 800868a:	e7e3      	b.n	8008654 <__smakebuf_r+0xc>
 800868c:	89a3      	ldrh	r3, [r4, #12]
 800868e:	6020      	str	r0, [r4, #0]
 8008690:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008694:	81a3      	strh	r3, [r4, #12]
 8008696:	9b00      	ldr	r3, [sp, #0]
 8008698:	6163      	str	r3, [r4, #20]
 800869a:	9b01      	ldr	r3, [sp, #4]
 800869c:	6120      	str	r0, [r4, #16]
 800869e:	b15b      	cbz	r3, 80086b8 <__smakebuf_r+0x70>
 80086a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086a4:	4630      	mov	r0, r6
 80086a6:	f000 f81d 	bl	80086e4 <_isatty_r>
 80086aa:	b128      	cbz	r0, 80086b8 <__smakebuf_r+0x70>
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	f023 0303 	bic.w	r3, r3, #3
 80086b2:	f043 0301 	orr.w	r3, r3, #1
 80086b6:	81a3      	strh	r3, [r4, #12]
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	431d      	orrs	r5, r3
 80086bc:	81a5      	strh	r5, [r4, #12]
 80086be:	e7cf      	b.n	8008660 <__smakebuf_r+0x18>

080086c0 <_fstat_r>:
 80086c0:	b538      	push	{r3, r4, r5, lr}
 80086c2:	4d07      	ldr	r5, [pc, #28]	; (80086e0 <_fstat_r+0x20>)
 80086c4:	2300      	movs	r3, #0
 80086c6:	4604      	mov	r4, r0
 80086c8:	4608      	mov	r0, r1
 80086ca:	4611      	mov	r1, r2
 80086cc:	602b      	str	r3, [r5, #0]
 80086ce:	f7f8 fcde 	bl	800108e <_fstat>
 80086d2:	1c43      	adds	r3, r0, #1
 80086d4:	d102      	bne.n	80086dc <_fstat_r+0x1c>
 80086d6:	682b      	ldr	r3, [r5, #0]
 80086d8:	b103      	cbz	r3, 80086dc <_fstat_r+0x1c>
 80086da:	6023      	str	r3, [r4, #0]
 80086dc:	bd38      	pop	{r3, r4, r5, pc}
 80086de:	bf00      	nop
 80086e0:	20004b8c 	.word	0x20004b8c

080086e4 <_isatty_r>:
 80086e4:	b538      	push	{r3, r4, r5, lr}
 80086e6:	4d06      	ldr	r5, [pc, #24]	; (8008700 <_isatty_r+0x1c>)
 80086e8:	2300      	movs	r3, #0
 80086ea:	4604      	mov	r4, r0
 80086ec:	4608      	mov	r0, r1
 80086ee:	602b      	str	r3, [r5, #0]
 80086f0:	f7f8 fcdd 	bl	80010ae <_isatty>
 80086f4:	1c43      	adds	r3, r0, #1
 80086f6:	d102      	bne.n	80086fe <_isatty_r+0x1a>
 80086f8:	682b      	ldr	r3, [r5, #0]
 80086fa:	b103      	cbz	r3, 80086fe <_isatty_r+0x1a>
 80086fc:	6023      	str	r3, [r4, #0]
 80086fe:	bd38      	pop	{r3, r4, r5, pc}
 8008700:	20004b8c 	.word	0x20004b8c

08008704 <_init>:
 8008704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008706:	bf00      	nop
 8008708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800870a:	bc08      	pop	{r3}
 800870c:	469e      	mov	lr, r3
 800870e:	4770      	bx	lr

08008710 <_fini>:
 8008710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008712:	bf00      	nop
 8008714:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008716:	bc08      	pop	{r3}
 8008718:	469e      	mov	lr, r3
 800871a:	4770      	bx	lr
